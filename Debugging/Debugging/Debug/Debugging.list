
Debugging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c94  08011134  08011134  00021134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dc8  08015dc8  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08015dc8  08015dc8  00025dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dd0  08015dd0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dd0  08015dd0  00025dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dd4  08015dd4  00025dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08015dd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006914  2000007c  08015e54  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006990  08015e54  00036990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad25  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051f8  00000000  00000000  0005add1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0005ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  000612d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f082  00000000  00000000  00062520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d1a2  00000000  00000000  000915a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea911  00000000  00000000  000ae744  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005300  00000000  00000000  001990d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801111c 	.word	0x0801111c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0801111c 	.word	0x0801111c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <MX_GPIO_Init+0x184>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a59      	ldr	r2, [pc, #356]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b57      	ldr	r3, [pc, #348]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b53      	ldr	r3, [pc, #332]	; (8000714 <MX_GPIO_Init+0x184>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a52      	ldr	r2, [pc, #328]	; (8000714 <MX_GPIO_Init+0x184>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <MX_GPIO_Init+0x184>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a4b      	ldr	r2, [pc, #300]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <MX_GPIO_Init+0x184>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <MX_GPIO_Init+0x184>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a44      	ldr	r2, [pc, #272]	; (8000714 <MX_GPIO_Init+0x184>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b42      	ldr	r3, [pc, #264]	; (8000714 <MX_GPIO_Init+0x184>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_GPIO_Init+0x184>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <MX_GPIO_Init+0x184>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <MX_GPIO_Init+0x184>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0x184>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0x184>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0x184>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0181 	movw	r1, #16513	; 0x4081
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <MX_GPIO_Init+0x188>)
 8000656:	f001 fce3 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	482f      	ldr	r0, [pc, #188]	; (800071c <MX_GPIO_Init+0x18c>)
 8000660:	f001 fcde 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_GPIO_Init+0x190>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	482a      	ldr	r0, [pc, #168]	; (8000724 <MX_GPIO_Init+0x194>)
 800067a:	f001 fb27 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800067e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_GPIO_Init+0x188>)
 8000698:	f001 fb18 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <MX_GPIO_Init+0x18c>)
 80006b4:	f001 fb0a 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_GPIO_Init+0x18c>)
 80006cc:	f001 fafe 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e2:	230a      	movs	r3, #10
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_GPIO_Init+0x198>)
 80006ee:	f001 faed 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <MX_GPIO_Init+0x198>)
 8000708:	f001 fae0 	bl	8001ccc <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	40021800 	.word	0x40021800
 8000720:	10110000 	.word	0x10110000
 8000724:	40020800 	.word	0x40020800
 8000728:	40020000 	.word	0x40020000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fa42 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f82a 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ff2a 	bl	8000590 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073c:	f000 f9a0 	bl	8000a80 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000740:	f002 fda8 	bl	8003294 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // MX_LWIP_Process();
	  LWIP_DEBUGF(ETHARP_DEBUG,("ETHARP\n"));
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x48>)
 8000746:	f00f fda3 	bl	8010290 <puts>
	  LWIP_DEBUGF(NETIF_DEBUG,("NETIF: %d\n",23));
 800074a:	2117      	movs	r1, #23
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <main+0x4c>)
 800074e:	f00f fd17 	bl	8010180 <iprintf>
	  LWIP_DEBUGF(IP_DEBUG,("IP_DEBUG\n"));
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0x50>)
 8000754:	f00f fd9c 	bl	8010290 <puts>
	  LWIP_DEBUGF(RAW_DEBUG,("RAW_DEBUG\n"));
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <main+0x54>)
 800075a:	f00f fd99 	bl	8010290 <puts>
	  LWIP_DEBUGF(SYS_DEBUG,("SYS_DEBUG\n"));
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0x58>)
 8000760:	f00f fd96 	bl	8010290 <puts>
	  LWIP_DEBUGF(DHCP_DEBUG,("DHCP_DEBUG\n"));
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <main+0x5c>)
 8000766:	f00f fd93 	bl	8010290 <puts>
	  HAL_Delay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f000 fa95 	bl	8000c9c <HAL_Delay>
	  LWIP_DEBUGF(ETHARP_DEBUG,("ETHARP\n"));
 8000772:	e7e7      	b.n	8000744 <main+0x18>
 8000774:	08011134 	.word	0x08011134
 8000778:	0801113c 	.word	0x0801113c
 800077c:	08011148 	.word	0x08011148
 8000780:	08011154 	.word	0x08011154
 8000784:	08011160 	.word	0x08011160
 8000788:	0801116c 	.word	0x0801116c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00f fce8 	bl	8010170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000800:	23a8      	movs	r3, #168	; 0xa8
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000808:	2307      	movs	r3, #7
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fc1f 	bl	8002054 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f820 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2105      	movs	r1, #5
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fe78 	bl	8002534 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084a:	f000 f809 	bl	8000860 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f9a2 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
	}

return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fc7d 	bl	8003270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
	}
	return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_sbrk+0x50>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x16>
		heap_end = &end;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <_sbrk+0x50>)
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <_sbrk+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <_sbrk+0x50>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <_sbrk+0x50>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	466a      	mov	r2, sp
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d905      	bls.n	8000a2e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <_sbrk+0x58>)
 8000a24:	220c      	movs	r2, #12
 8000a26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	e006      	b.n	8000a3c <_sbrk+0x44>
	}

	heap_end += incr;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <_sbrk+0x50>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <_sbrk+0x50>)
 8000a38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20000098 	.word	0x20000098
 8000a4c:	20006990 	.word	0x20006990
 8000a50:	2000698c 	.word	0x2000698c

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x28>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x28>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0x28>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART3_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART3_UART_Init+0x4c>)
 8000ab8:	f001 ff2e 	bl	8002918 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f7ff fecd 	bl	8000860 <Error_Handler>
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000224 	.word	0x20000224
 8000ad0:	40004800 	.word	0x40004800

08000ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12c      	bne.n	8000b50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0x8c>)
 8000b4c:	f001 f8be 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004800 	.word	0x40004800
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b6a:	e003      	b.n	8000b74 <LoopCopyDataInit>

08000b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b72:	3104      	adds	r1, #4

08000b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b7c:	d3f6      	bcc.n	8000b6c <CopyDataInit>
  ldr  r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b80:	e002      	b.n	8000b88 <LoopFillZerobss>

08000b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b84:	f842 3b04 	str.w	r3, [r2], #4

08000b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b8c:	d3f9      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8e:	f7ff ff61 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f00f faaf 	bl	80100f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fdc9 	bl	800072c <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b9c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000ba0:	08015dd8 	.word	0x08015dd8
  ldr  r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000bac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000bb0:	20006990 	.word	0x20006990

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f92f 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe40 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f939 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90f 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000264 	.word	0x20000264

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000264 	.word	0x20000264

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_Delay+0x40>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff47 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5c 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb0 	bl	8000e00 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ebc:	4baa      	ldr	r3, [pc, #680]	; (8001168 <HAL_ETH_Init+0x2bc>)
 8000ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e185      	b.n	80011de <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f002 fa14 	bl	8003314 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b9e      	ldr	r3, [pc, #632]	; (800116c <HAL_ETH_Init+0x2c0>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	4a9d      	ldr	r2, [pc, #628]	; (800116c <HAL_ETH_Init+0x2c0>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	6453      	str	r3, [r2, #68]	; 0x44
 8000efc:	4b9b      	ldr	r3, [pc, #620]	; (800116c <HAL_ETH_Init+0x2c0>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f08:	4b99      	ldr	r3, [pc, #612]	; (8001170 <HAL_ETH_Init+0x2c4>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4a98      	ldr	r2, [pc, #608]	; (8001170 <HAL_ETH_Init+0x2c4>)
 8000f0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f14:	4b96      	ldr	r3, [pc, #600]	; (8001170 <HAL_ETH_Init+0x2c4>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4994      	ldr	r1, [pc, #592]	; (8001170 <HAL_ETH_Init+0x2c4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f3a:	f7ff fea3 	bl	8000c84 <HAL_GetTick>
 8000f3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f40:	e011      	b.n	8000f66 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f42:	f7ff fe9f 	bl	8000c84 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f50:	d909      	bls.n	8000f66 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e13b      	b.n	80011de <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e4      	bne.n	8000f42 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f023 031c 	bic.w	r3, r3, #28
 8000f86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f88:	f001 fc92 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 8000f8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4a78      	ldr	r2, [pc, #480]	; (8001174 <HAL_ETH_Init+0x2c8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d908      	bls.n	8000fa8 <HAL_ETH_Init+0xfc>
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4a77      	ldr	r2, [pc, #476]	; (8001178 <HAL_ETH_Init+0x2cc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d804      	bhi.n	8000fa8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e027      	b.n	8000ff8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4a73      	ldr	r2, [pc, #460]	; (8001178 <HAL_ETH_Init+0x2cc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d908      	bls.n	8000fc2 <HAL_ETH_Init+0x116>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	4a72      	ldr	r2, [pc, #456]	; (800117c <HAL_ETH_Init+0x2d0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d804      	bhi.n	8000fc2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f043 030c 	orr.w	r3, r3, #12
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	e01a      	b.n	8000ff8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4a6d      	ldr	r2, [pc, #436]	; (800117c <HAL_ETH_Init+0x2d0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d903      	bls.n	8000fd2 <HAL_ETH_Init+0x126>
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4a6c      	ldr	r2, [pc, #432]	; (8001180 <HAL_ETH_Init+0x2d4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d911      	bls.n	8000ff6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <HAL_ETH_Init+0x2d4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d908      	bls.n	8000fec <HAL_ETH_Init+0x140>
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4a69      	ldr	r2, [pc, #420]	; (8001184 <HAL_ETH_Init+0x2d8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d804      	bhi.n	8000fec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e005      	b.n	8000ff8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	e000      	b.n	8000ff8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000ff6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001004:	2100      	movs	r1, #0
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fb16 	bl	8001638 <HAL_ETH_WritePHYRegister>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 fba3 	bl	8001764 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0d9      	b.n	80011de <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800102a:	20ff      	movs	r0, #255	; 0xff
 800102c:	f7ff fe36 	bl	8000c9c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a7 	beq.w	8001188 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800103a:	f7ff fe23 	bl	8000c84 <HAL_GetTick>
 800103e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	461a      	mov	r2, r3
 8001046:	2101      	movs	r1, #1
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fa8d 	bl	8001568 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800104e:	f7ff fe19 	bl	8000c84 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d90f      	bls.n	8001080 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fb7c 	bl	8001764 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e0ae      	b.n	80011de <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0da      	beq.n	8001040 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800108a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108e:	2100      	movs	r1, #0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fad1 	bl	8001638 <HAL_ETH_WritePHYRegister>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fb5e 	bl	8001764 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010b0:	2301      	movs	r3, #1
 80010b2:	e094      	b.n	80011de <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fde6 	bl	8000c84 <HAL_GetTick>
 80010b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa50 	bl	8001568 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010c8:	f7ff fddc 	bl	8000c84 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d90f      	bls.n	80010fa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fb3f 	bl	8001764 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e071      	b.n	80011de <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0da      	beq.n	80010ba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	461a      	mov	r2, r3
 800110a:	211f      	movs	r1, #31
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fa2b 	bl	8001568 <HAL_ETH_ReadPHYRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fb20 	bl	8001764 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800112c:	2301      	movs	r3, #1
 800112e:	e056      	b.n	80011de <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	e002      	b.n	800114a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	e037      	b.n	80011cc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	e032      	b.n	80011cc <HAL_ETH_Init+0x320>
 8001166:	bf00      	nop
 8001168:	03938700 	.word	0x03938700
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	01312cff 	.word	0x01312cff
 8001178:	02160ebf 	.word	0x02160ebf
 800117c:	039386ff 	.word	0x039386ff
 8001180:	05f5e0ff 	.word	0x05f5e0ff
 8001184:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001198:	4313      	orrs	r3, r2
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fa49 	bl	8001638 <HAL_ETH_WritePHYRegister>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fad6 	bl	8001764 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00c      	b.n	80011de <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011c8:	f7ff fd68 	bl	8000c9c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011cc:	6939      	ldr	r1, [r7, #16]
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fac8 	bl	8001764 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop

080011e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ETH_DMATxDescListInit+0x20>
 8001204:	2302      	movs	r3, #2
 8001206:	e052      	b.n	80012ae <HAL_ETH_DMATxDescListInit+0xc6>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e030      	b.n	8001286 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	015b      	lsls	r3, r3, #5
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001234:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	461a      	mov	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	d208      	bcs.n	800127a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	461a      	mov	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	e002      	b.n	8001280 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3ca      	bcc.n	8001224 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	3310      	adds	r3, #16
 800129a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ETH_DMARxDescListInit+0x20>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e056      	b.n	8001388 <HAL_ETH_DMARxDescListInit+0xce>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e034      	b.n	8001360 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001306:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800130e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	429a      	cmp	r2, r3
 8001340:	d208      	bcs.n	8001354 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	e002      	b.n	800135a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3c6      	bcc.n	80012f6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001372:	330c      	adds	r3, #12
 8001374:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_ETH_TransmitFrame+0x24>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0cd      	b.n	8001554 <HAL_ETH_TransmitFrame+0x1c0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80013de:	2301      	movs	r3, #1
 80013e0:	e0b8      	b.n	8001554 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	da09      	bge.n	8001400 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2212      	movs	r2, #18
 80013f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0a9      	b.n	8001554 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001406:	4293      	cmp	r3, r2
 8001408:	d915      	bls.n	8001436 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_ETH_TransmitFrame+0x1cc>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_ETH_TransmitFrame+0x1cc>)
 800141a:	fba3 1302 	umull	r1, r3, r3, r2
 800141e:	0a9b      	lsrs	r3, r3, #10
 8001420:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e001      	b.n	800143a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d11c      	bne.n	800147a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800144e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800145a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800146a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
 8001478:	e04b      	b.n	8001512 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	e044      	b.n	800150a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800148e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014ae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d116      	bne.n	80014e8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014c8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_ETH_TransmitFrame+0x1d0>)
 80014ce:	fb02 f203 	mul.w	r2, r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80014da:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014e6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014f6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3301      	adds	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3b6      	bcc.n	8001480 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800151a:	3314      	adds	r3, #20
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152e:	3314      	adds	r3, #20
 8001530:	2204      	movs	r2, #4
 8001532:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	3304      	adds	r3, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	ac02b00b 	.word	0xac02b00b
 8001564:	fffffa0c 	.word	0xfffffa0c

08001568 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	460b      	mov	r3, r1
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b82      	cmp	r3, #130	; 0x82
 8001588:	d101      	bne.n	800158e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	e050      	b.n	8001630 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2282      	movs	r2, #130	; 0x82
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 031c 	and.w	r3, r3, #28
 80015a4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8a1b      	ldrh	r3, [r3, #16]
 80015aa:	02db      	lsls	r3, r3, #11
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4313      	orrs	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015da:	f7ff fb53 	bl	8000c84 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e0:	e015      	b.n	800160e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80015e2:	f7ff fb4f 	bl	8000c84 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d309      	bcc.n	8001606 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e014      	b.n	8001630 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e4      	bne.n	80015e2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	460b      	mov	r3, r1
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b42      	cmp	r3, #66	; 0x42
 8001658:	d101      	bne.n	800165e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800165a:	2302      	movs	r3, #2
 800165c:	e04e      	b.n	80016fc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2242      	movs	r2, #66	; 0x42
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8a1b      	ldrh	r3, [r3, #16]
 800167a:	02db      	lsls	r3, r3, #11
 800167c:	b29b      	uxth	r3, r3
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff fae6 	bl	8000c84 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ba:	e015      	b.n	80016e8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80016bc:	f7ff fae2 	bl	8000c84 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d309      	bcc.n	80016e0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e00d      	b.n	80016fc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e4      	bne.n	80016bc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ETH_Start+0x16>
 8001716:	2302      	movs	r3, #2
 8001718:	e01f      	b.n	800175a <HAL_ETH_Start+0x56>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fa1c 	bl	8001b68 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa36 	bl	8001ba2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fa80 	bl	8001c3c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fa4d 	bl	8001bdc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa62 	bl	8001c0c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0b0      	sub	sp, #192	; 0xc0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001780:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001788:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001792:	2300      	movs	r3, #0
 8001794:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	663b      	str	r3, [r7, #96]	; 0x60
 80017b0:	e001      	b.n	80017b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80017b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017c0:	2300      	movs	r3, #0
 80017c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001838:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800183c:	4bac      	ldr	r3, [pc, #688]	; (8001af0 <ETH_MACDMAConfig+0x38c>)
 800183e:	4013      	ands	r3, r2
 8001840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001844:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001848:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800184a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800184c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800184e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001850:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001856:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800185a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800185c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800185e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001864:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001868:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800186a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800186c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800186e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001870:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001874:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001878:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800187a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff f9ff 	bl	8000c9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018a6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80018aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018ac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80018ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80018b0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80018b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80018b6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80018b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80018bc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80018be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80018c2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80018c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80018c8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80018cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80018d4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018d6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff f9da 	bl	8000c9c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018fa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001904:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001914:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001918:	4013      	ands	r3, r2
 800191a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800191e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001922:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001928:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800192a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800192e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001934:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800193a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001940:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001942:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001954:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff f99b 	bl	8000c9c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800196e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001970:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001974:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff f986 	bl	8000c9c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001998:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800199e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80019a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80019be:	2304      	movs	r3, #4
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80019c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80019c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ee:	3318      	adds	r3, #24
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <ETH_MACDMAConfig+0x390>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a02:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001a04:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a06:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001a08:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001a0a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001a0c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001a0e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001a10:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001a12:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001a14:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001a16:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001a18:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001a1a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001a1e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001a22:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	3318      	adds	r3, #24
 8001a38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	3318      	adds	r3, #24
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7ff f924 	bl	8000c9c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a62:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a68:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a6c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a70:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a74:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a7a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a7e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff f8fd 	bl	8000c9c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10f      	bne.n	8001ad8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	331c      	adds	r3, #28
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad4:	331c      	adds	r3, #28
 8001ad6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	461a      	mov	r2, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f809 	bl	8001af8 <ETH_MACAddressConfig>
}
 8001ae6:	bf00      	nop
 8001ae8:	37c0      	adds	r7, #192	; 0xc0
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	ff20810f 	.word	0xff20810f
 8001af4:	f8de3f23 	.word	0xf8de3f23

08001af8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3305      	adds	r3, #5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	3204      	adds	r2, #4
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <ETH_MACAddressConfig+0x68>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	061a      	lsls	r2, r3, #24
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3301      	adds	r3, #1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	7812      	ldrb	r2, [r2, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <ETH_MACAddressConfig+0x6c>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40028040 	.word	0x40028040
 8001b64:	40028044 	.word	0x40028044

08001b68 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0208 	orr.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 f87f 	bl	8001c90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0204 	orr.w	r2, r2, #4
 8001bbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 f862 	bl	8001c90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	3318      	adds	r3, #24
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0202 	orr.w	r2, r2, #2
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	3318      	adds	r3, #24
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	3318      	adds	r3, #24
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c60:	3318      	adds	r3, #24
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f000 f80c 	bl	8001c90 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	3318      	adds	r3, #24
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <ETH_Delay+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <ETH_Delay+0x38>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0a5b      	lsrs	r3, r3, #9
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001cac:	bf00      	nop
  } 
  while (Delay --);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	60fa      	str	r2, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <ETH_Delay+0x1c>
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	10624dd3 	.word	0x10624dd3

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e177      	b.n	8001fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8166 	bne.w	8001fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d00b      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0xfc>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80c0 	beq.w	8001fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a64      	ldr	r2, [pc, #400]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b62      	ldr	r3, [pc, #392]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a60      	ldr	r2, [pc, #384]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d037      	beq.n	8001f0a <HAL_GPIO_Init+0x23e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_GPIO_Init+0x32c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d031      	beq.n	8001f06 <HAL_GPIO_Init+0x23a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_GPIO_Init+0x330>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d02b      	beq.n	8001f02 <HAL_GPIO_Init+0x236>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x232>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a53      	ldr	r2, [pc, #332]	; (8002004 <HAL_GPIO_Init+0x338>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x22e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_GPIO_Init+0x33c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x22a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x340>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_GPIO_Init+0x344>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4f      	ldr	r2, [pc, #316]	; (8002014 <HAL_GPIO_Init+0x348>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_GPIO_Init+0x34c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	e012      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	e010      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001eea:	2308      	movs	r3, #8
 8001eec:	e00e      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00c      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e00a      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x240>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_GPIO_Init+0x350>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <HAL_GPIO_Init+0x350>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_GPIO_Init+0x350>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_GPIO_Init+0x350>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_GPIO_Init+0x350>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_GPIO_Init+0x350>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_GPIO_Init+0x350>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_GPIO_Init+0x350>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f ae84 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3724      	adds	r7, #36	; 0x24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e25b      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d075      	beq.n	800215e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002072:	4ba3      	ldr	r3, [pc, #652]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b04      	cmp	r3, #4
 800207c:	d00c      	beq.n	8002098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207e:	4ba0      	ldr	r3, [pc, #640]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	2b08      	cmp	r3, #8
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b9d      	ldr	r3, [pc, #628]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002096:	d10b      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	4b99      	ldr	r3, [pc, #612]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d05b      	beq.n	800215c <HAL_RCC_OscConfig+0x108>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d157      	bne.n	800215c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e236      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x74>
 80020ba:	4b91      	ldr	r3, [pc, #580]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a90      	ldr	r2, [pc, #576]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a8a      	ldr	r2, [pc, #552]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a87      	ldr	r2, [pc, #540]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020ec:	4b84      	ldr	r3, [pc, #528]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a83      	ldr	r2, [pc, #524]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a80      	ldr	r2, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fdba 	bl	8000c84 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe fdb6 	bl	8000c84 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1fb      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xc0>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fda6 	bl	8000c84 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe fda2 	bl	8000c84 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1e7      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0xe8>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1bb      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b56      	ldr	r3, [pc, #344]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4952      	ldr	r1, [pc, #328]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_RCC_OscConfig+0x2b0>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd5b 	bl	8000c84 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe fd57 	bl	8000c84 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e19c      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4940      	ldr	r1, [pc, #256]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_OscConfig+0x2b0>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fd3a 	bl	8000c84 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe fd36 	bl	8000c84 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e17b      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d030      	beq.n	80022a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_RCC_OscConfig+0x2b4>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7fe fd1a 	bl	8000c84 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7fe fd16 	bl	8000c84 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e15b      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x200>
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0x2b4>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe fd03 	bl	8000c84 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002282:	f7fe fcff 	bl	8000c84 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e144      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 8002296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a0 	beq.w	80023ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x2b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d121      	bne.n	800232e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_RCC_OscConfig+0x2b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_RCC_OscConfig+0x2b8>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fcc5 	bl	8000c84 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e011      	b.n	8002322 <HAL_RCC_OscConfig+0x2ce>
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	42470000 	.word	0x42470000
 8002308:	42470e80 	.word	0x42470e80
 800230c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7fe fcb8 	bl	8000c84 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0fd      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x4d4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0x2f0>
 8002336:	4b7d      	ldr	r3, [pc, #500]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a7c      	ldr	r2, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
 8002342:	e01c      	b.n	800237e <HAL_RCC_OscConfig+0x32a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x312>
 800234c:	4b77      	ldr	r3, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4a76      	ldr	r2, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6713      	str	r3, [r2, #112]	; 0x70
 8002358:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a73      	ldr	r2, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x32a>
 8002366:	4b71      	ldr	r3, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4a70      	ldr	r2, [pc, #448]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	; 0x70
 8002372:	4b6e      	ldr	r3, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a6d      	ldr	r2, [pc, #436]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fc7d 	bl	8000c84 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fc79 	bl	8000c84 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0bc      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCC_OscConfig+0x33a>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fc67 	bl	8000c84 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fc63 	bl	8000c84 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0a6      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	4b56      	ldr	r3, [pc, #344]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b52      	ldr	r3, [pc, #328]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a51      	ldr	r2, [pc, #324]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8092 	beq.w	800251c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d05c      	beq.n	80024be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d141      	bne.n	8002490 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b48      	ldr	r3, [pc, #288]	; (8002530 <HAL_RCC_OscConfig+0x4dc>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fc37 	bl	8000c84 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fc33 	bl	8000c84 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e078      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	019b      	lsls	r3, r3, #6
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	4933      	ldr	r1, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x4dc>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fc0c 	bl	8000c84 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fc08 	bl	8000c84 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04d      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x41c>
 800248e:	e045      	b.n	800251c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x4dc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fbf5 	bl	8000c84 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fbf1 	bl	8000c84 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e036      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x44a>
 80024bc:	e02e      	b.n	800251c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e029      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_OscConfig+0x4d8>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d115      	bne.n	8002518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f2:	4013      	ands	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10d      	bne.n	8002518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40007000 	.word	0x40007000
 800252c:	40023800 	.word	0x40023800
 8002530:	42470060 	.word	0x42470060

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0cc      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d90c      	bls.n	8002570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d044      	beq.n	8002654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e067      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4934      	ldr	r1, [pc, #208]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe fb2e 	bl	8000c84 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fb2a 	bl	8000c84 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e04f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 020c 	and.w	r2, r3, #12
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1eb      	bne.n	800262c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d20c      	bcs.n	800267c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4601      	mov	r1, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	5cd3      	ldrb	r3, [r2, r3]
 80026ce:	fa21 f303 	lsr.w	r3, r1, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fa8e 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08015be8 	.word	0x08015be8
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d007      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x32>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d008      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x38>
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80b4 	bne.w	8002894 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800272e:	60bb      	str	r3, [r7, #8]
       break;
 8002730:	e0b3      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002734:	60bb      	str	r3, [r7, #8]
      break;
 8002736:	e0b0      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04a      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	f04f 0400 	mov.w	r4, #0
 8002758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	ea03 0501 	and.w	r5, r3, r1
 8002764:	ea04 0602 	and.w	r6, r4, r2
 8002768:	4629      	mov	r1, r5
 800276a:	4632      	mov	r2, r6
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	0154      	lsls	r4, r2, #5
 8002776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800277a:	014b      	lsls	r3, r1, #5
 800277c:	4619      	mov	r1, r3
 800277e:	4622      	mov	r2, r4
 8002780:	1b49      	subs	r1, r1, r5
 8002782:	eb62 0206 	sbc.w	r2, r2, r6
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	f04f 0400 	mov.w	r4, #0
 800278e:	0194      	lsls	r4, r2, #6
 8002790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002794:	018b      	lsls	r3, r1, #6
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	eb64 0402 	sbc.w	r4, r4, r2
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	00e2      	lsls	r2, r4, #3
 80027a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027aa:	00d9      	lsls	r1, r3, #3
 80027ac:	460b      	mov	r3, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	195b      	adds	r3, r3, r5
 80027b2:	eb44 0406 	adc.w	r4, r4, r6
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	0262      	lsls	r2, r4, #9
 80027c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027c4:	0259      	lsls	r1, r3, #9
 80027c6:	460b      	mov	r3, r1
 80027c8:	4614      	mov	r4, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	4621      	mov	r1, r4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	f7fd fd5a 	bl	8000290 <__aeabi_uldivmod>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e049      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	f04f 0400 	mov.w	r4, #0
 80027ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	ea03 0501 	and.w	r5, r3, r1
 80027fa:	ea04 0602 	and.w	r6, r4, r2
 80027fe:	4629      	mov	r1, r5
 8002800:	4632      	mov	r2, r6
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	f04f 0400 	mov.w	r4, #0
 800280a:	0154      	lsls	r4, r2, #5
 800280c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002810:	014b      	lsls	r3, r1, #5
 8002812:	4619      	mov	r1, r3
 8002814:	4622      	mov	r2, r4
 8002816:	1b49      	subs	r1, r1, r5
 8002818:	eb62 0206 	sbc.w	r2, r2, r6
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	0194      	lsls	r4, r2, #6
 8002826:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800282a:	018b      	lsls	r3, r1, #6
 800282c:	1a5b      	subs	r3, r3, r1
 800282e:	eb64 0402 	sbc.w	r4, r4, r2
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	00e2      	lsls	r2, r4, #3
 800283c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002840:	00d9      	lsls	r1, r3, #3
 8002842:	460b      	mov	r3, r1
 8002844:	4614      	mov	r4, r2
 8002846:	195b      	adds	r3, r3, r5
 8002848:	eb44 0406 	adc.w	r4, r4, r6
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	02a2      	lsls	r2, r4, #10
 8002856:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800285a:	0299      	lsls	r1, r3, #10
 800285c:	460b      	mov	r3, r1
 800285e:	4614      	mov	r4, r2
 8002860:	4618      	mov	r0, r3
 8002862:	4621      	mov	r1, r4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	461a      	mov	r2, r3
 800286c:	4623      	mov	r3, r4
 800286e:	f7fd fd0f 	bl	8000290 <__aeabi_uldivmod>
 8002872:	4603      	mov	r3, r0
 8002874:	460c      	mov	r4, r1
 8002876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	60bb      	str	r3, [r7, #8]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002896:	60bb      	str	r3, [r7, #8]
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	68bb      	ldr	r3, [r7, #8]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	007a1200 	.word	0x007a1200

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4601      	mov	r1, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08015bf8 	.word	0x08015bf8

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffdc 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f8:	4601      	mov	r1, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0b5b      	lsrs	r3, r3, #13
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40023800 	.word	0x40023800
 8002914:	08015bf8 	.word	0x08015bf8

08002918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e03f      	b.n	80029aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f8c8 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f90b 	bl	8002b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b088      	sub	sp, #32
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	f040 8083 	bne.w	8002ada <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Transmit+0x2e>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e07b      	b.n	8002adc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Transmit+0x40>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e074      	b.n	8002adc <HAL_UART_Transmit+0x12a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a08:	f7fe f93c 	bl	8000c84 <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a22:	e042      	b.n	8002aaa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3a:	d122      	bne.n	8002a82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f84c 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e042      	b.n	8002adc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3302      	adds	r3, #2
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	e017      	b.n	8002aaa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	e013      	b.n	8002aaa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f829 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e01f      	b.n	8002adc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	60ba      	str	r2, [r7, #8]
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1b7      	bne.n	8002a24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f810 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e006      	b.n	8002adc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af4:	e02c      	b.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d028      	beq.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b04:	f7fe f8be 	bl	8000c84 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d21d      	bcs.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e00f      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d0c3      	beq.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bba:	f023 030c 	bic.w	r3, r3, #12
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be6:	f040 818b 	bne.w	8002f00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4ac1      	ldr	r2, [pc, #772]	; (8002ef4 <UART_SetConfig+0x37c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d005      	beq.n	8002c00 <UART_SetConfig+0x88>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4abf      	ldr	r2, [pc, #764]	; (8002ef8 <UART_SetConfig+0x380>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f040 80bd 	bne.w	8002d7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c00:	f7ff fe76 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8002c04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	461d      	mov	r5, r3
 8002c0a:	f04f 0600 	mov.w	r6, #0
 8002c0e:	46a8      	mov	r8, r5
 8002c10:	46b1      	mov	r9, r6
 8002c12:	eb18 0308 	adds.w	r3, r8, r8
 8002c16:	eb49 0409 	adc.w	r4, r9, r9
 8002c1a:	4698      	mov	r8, r3
 8002c1c:	46a1      	mov	r9, r4
 8002c1e:	eb18 0805 	adds.w	r8, r8, r5
 8002c22:	eb49 0906 	adc.w	r9, r9, r6
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4691      	mov	r9, r2
 8002c3e:	eb18 0005 	adds.w	r0, r8, r5
 8002c42:	eb49 0106 	adc.w	r1, r9, r6
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	f04f 0600 	mov.w	r6, #0
 8002c50:	196b      	adds	r3, r5, r5
 8002c52:	eb46 0406 	adc.w	r4, r6, r6
 8002c56:	461a      	mov	r2, r3
 8002c58:	4623      	mov	r3, r4
 8002c5a:	f7fd fb19 	bl	8000290 <__aeabi_uldivmod>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	461a      	mov	r2, r3
 8002c64:	4ba5      	ldr	r3, [pc, #660]	; (8002efc <UART_SetConfig+0x384>)
 8002c66:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	461d      	mov	r5, r3
 8002c74:	f04f 0600 	mov.w	r6, #0
 8002c78:	46a9      	mov	r9, r5
 8002c7a:	46b2      	mov	sl, r6
 8002c7c:	eb19 0309 	adds.w	r3, r9, r9
 8002c80:	eb4a 040a 	adc.w	r4, sl, sl
 8002c84:	4699      	mov	r9, r3
 8002c86:	46a2      	mov	sl, r4
 8002c88:	eb19 0905 	adds.w	r9, r9, r5
 8002c8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca4:	4689      	mov	r9, r1
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	eb19 0005 	adds.w	r0, r9, r5
 8002cac:	eb4a 0106 	adc.w	r1, sl, r6
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	461d      	mov	r5, r3
 8002cb6:	f04f 0600 	mov.w	r6, #0
 8002cba:	196b      	adds	r3, r5, r5
 8002cbc:	eb46 0406 	adc.w	r4, r6, r6
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	f7fd fae4 	bl	8000290 <__aeabi_uldivmod>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	460c      	mov	r4, r1
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <UART_SetConfig+0x384>)
 8002cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3332      	adds	r3, #50	; 0x32
 8002ce2:	4a86      	ldr	r2, [pc, #536]	; (8002efc <UART_SetConfig+0x384>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf0:	4498      	add	r8, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	461d      	mov	r5, r3
 8002cf6:	f04f 0600 	mov.w	r6, #0
 8002cfa:	46a9      	mov	r9, r5
 8002cfc:	46b2      	mov	sl, r6
 8002cfe:	eb19 0309 	adds.w	r3, r9, r9
 8002d02:	eb4a 040a 	adc.w	r4, sl, sl
 8002d06:	4699      	mov	r9, r3
 8002d08:	46a2      	mov	sl, r4
 8002d0a:	eb19 0905 	adds.w	r9, r9, r5
 8002d0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d26:	4689      	mov	r9, r1
 8002d28:	4692      	mov	sl, r2
 8002d2a:	eb19 0005 	adds.w	r0, r9, r5
 8002d2e:	eb4a 0106 	adc.w	r1, sl, r6
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	461d      	mov	r5, r3
 8002d38:	f04f 0600 	mov.w	r6, #0
 8002d3c:	196b      	adds	r3, r5, r5
 8002d3e:	eb46 0406 	adc.w	r4, r6, r6
 8002d42:	461a      	mov	r2, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	f7fd faa3 	bl	8000290 <__aeabi_uldivmod>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <UART_SetConfig+0x384>)
 8002d52:	fba3 1302 	umull	r1, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2164      	movs	r1, #100	; 0x64
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	3332      	adds	r3, #50	; 0x32
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <UART_SetConfig+0x384>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4442      	add	r2, r8
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e26f      	b.n	800325a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f7ff fda5 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	461d      	mov	r5, r3
 8002d84:	f04f 0600 	mov.w	r6, #0
 8002d88:	46a8      	mov	r8, r5
 8002d8a:	46b1      	mov	r9, r6
 8002d8c:	eb18 0308 	adds.w	r3, r8, r8
 8002d90:	eb49 0409 	adc.w	r4, r9, r9
 8002d94:	4698      	mov	r8, r3
 8002d96:	46a1      	mov	r9, r4
 8002d98:	eb18 0805 	adds.w	r8, r8, r5
 8002d9c:	eb49 0906 	adc.w	r9, r9, r6
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002db0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002db4:	4688      	mov	r8, r1
 8002db6:	4691      	mov	r9, r2
 8002db8:	eb18 0005 	adds.w	r0, r8, r5
 8002dbc:	eb49 0106 	adc.w	r1, r9, r6
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	f04f 0600 	mov.w	r6, #0
 8002dca:	196b      	adds	r3, r5, r5
 8002dcc:	eb46 0406 	adc.w	r4, r6, r6
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	f7fd fa5c 	bl	8000290 <__aeabi_uldivmod>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <UART_SetConfig+0x384>)
 8002de0:	fba3 2302 	umull	r2, r3, r3, r2
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	461d      	mov	r5, r3
 8002dee:	f04f 0600 	mov.w	r6, #0
 8002df2:	46a9      	mov	r9, r5
 8002df4:	46b2      	mov	sl, r6
 8002df6:	eb19 0309 	adds.w	r3, r9, r9
 8002dfa:	eb4a 040a 	adc.w	r4, sl, sl
 8002dfe:	4699      	mov	r9, r3
 8002e00:	46a2      	mov	sl, r4
 8002e02:	eb19 0905 	adds.w	r9, r9, r5
 8002e06:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e1e:	4689      	mov	r9, r1
 8002e20:	4692      	mov	sl, r2
 8002e22:	eb19 0005 	adds.w	r0, r9, r5
 8002e26:	eb4a 0106 	adc.w	r1, sl, r6
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	461d      	mov	r5, r3
 8002e30:	f04f 0600 	mov.w	r6, #0
 8002e34:	196b      	adds	r3, r5, r5
 8002e36:	eb46 0406 	adc.w	r4, r6, r6
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd fa27 	bl	8000290 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <UART_SetConfig+0x384>)
 8002e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2164      	movs	r1, #100	; 0x64
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	3332      	adds	r3, #50	; 0x32
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <UART_SetConfig+0x384>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e6a:	4498      	add	r8, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	461d      	mov	r5, r3
 8002e70:	f04f 0600 	mov.w	r6, #0
 8002e74:	46a9      	mov	r9, r5
 8002e76:	46b2      	mov	sl, r6
 8002e78:	eb19 0309 	adds.w	r3, r9, r9
 8002e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e80:	4699      	mov	r9, r3
 8002e82:	46a2      	mov	sl, r4
 8002e84:	eb19 0905 	adds.w	r9, r9, r5
 8002e88:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ea0:	4689      	mov	r9, r1
 8002ea2:	4692      	mov	sl, r2
 8002ea4:	eb19 0005 	adds.w	r0, r9, r5
 8002ea8:	eb4a 0106 	adc.w	r1, sl, r6
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	f04f 0600 	mov.w	r6, #0
 8002eb6:	196b      	adds	r3, r5, r5
 8002eb8:	eb46 0406 	adc.w	r4, r6, r6
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	f7fd f9e6 	bl	8000290 <__aeabi_uldivmod>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <UART_SetConfig+0x384>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <UART_SetConfig+0x384>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 0207 	and.w	r2, r3, #7
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4442      	add	r2, r8
 8002ef0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ef2:	e1b2      	b.n	800325a <UART_SetConfig+0x6e2>
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4ad7      	ldr	r2, [pc, #860]	; (8003264 <UART_SetConfig+0x6ec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d005      	beq.n	8002f16 <UART_SetConfig+0x39e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4ad6      	ldr	r2, [pc, #856]	; (8003268 <UART_SetConfig+0x6f0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	f040 80d1 	bne.w	80030b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f16:	f7ff fceb 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8002f1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	469a      	mov	sl, r3
 8002f20:	f04f 0b00 	mov.w	fp, #0
 8002f24:	46d0      	mov	r8, sl
 8002f26:	46d9      	mov	r9, fp
 8002f28:	eb18 0308 	adds.w	r3, r8, r8
 8002f2c:	eb49 0409 	adc.w	r4, r9, r9
 8002f30:	4698      	mov	r8, r3
 8002f32:	46a1      	mov	r9, r4
 8002f34:	eb18 080a 	adds.w	r8, r8, sl
 8002f38:	eb49 090b 	adc.w	r9, r9, fp
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f50:	4688      	mov	r8, r1
 8002f52:	4691      	mov	r9, r2
 8002f54:	eb1a 0508 	adds.w	r5, sl, r8
 8002f58:	eb4b 0609 	adc.w	r6, fp, r9
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f04f 0400 	mov.w	r4, #0
 8002f6e:	0094      	lsls	r4, r2, #2
 8002f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f74:	008b      	lsls	r3, r1, #2
 8002f76:	461a      	mov	r2, r3
 8002f78:	4623      	mov	r3, r4
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	f7fd f987 	bl	8000290 <__aeabi_uldivmod>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	461a      	mov	r2, r3
 8002f88:	4bb8      	ldr	r3, [pc, #736]	; (800326c <UART_SetConfig+0x6f4>)
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	469b      	mov	fp, r3
 8002f98:	f04f 0c00 	mov.w	ip, #0
 8002f9c:	46d9      	mov	r9, fp
 8002f9e:	46e2      	mov	sl, ip
 8002fa0:	eb19 0309 	adds.w	r3, r9, r9
 8002fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8002fa8:	4699      	mov	r9, r3
 8002faa:	46a2      	mov	sl, r4
 8002fac:	eb19 090b 	adds.w	r9, r9, fp
 8002fb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fc8:	4689      	mov	r9, r1
 8002fca:	4692      	mov	sl, r2
 8002fcc:	eb1b 0509 	adds.w	r5, fp, r9
 8002fd0:	eb4c 060a 	adc.w	r6, ip, sl
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	0094      	lsls	r4, r2, #2
 8002fe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fec:	008b      	lsls	r3, r1, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4623      	mov	r3, r4
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	4631      	mov	r1, r6
 8002ff6:	f7fd f94b 	bl	8000290 <__aeabi_uldivmod>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b9a      	ldr	r3, [pc, #616]	; (800326c <UART_SetConfig+0x6f4>)
 8003002:	fba3 1302 	umull	r1, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2164      	movs	r1, #100	; 0x64
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a95      	ldr	r2, [pc, #596]	; (800326c <UART_SetConfig+0x6f4>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003020:	4498      	add	r8, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	469b      	mov	fp, r3
 8003026:	f04f 0c00 	mov.w	ip, #0
 800302a:	46d9      	mov	r9, fp
 800302c:	46e2      	mov	sl, ip
 800302e:	eb19 0309 	adds.w	r3, r9, r9
 8003032:	eb4a 040a 	adc.w	r4, sl, sl
 8003036:	4699      	mov	r9, r3
 8003038:	46a2      	mov	sl, r4
 800303a:	eb19 090b 	adds.w	r9, r9, fp
 800303e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003056:	4689      	mov	r9, r1
 8003058:	4692      	mov	sl, r2
 800305a:	eb1b 0509 	adds.w	r5, fp, r9
 800305e:	eb4c 060a 	adc.w	r6, ip, sl
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	0094      	lsls	r4, r2, #2
 8003076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800307a:	008b      	lsls	r3, r1, #2
 800307c:	461a      	mov	r2, r3
 800307e:	4623      	mov	r3, r4
 8003080:	4628      	mov	r0, r5
 8003082:	4631      	mov	r1, r6
 8003084:	f7fd f904 	bl	8000290 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	461a      	mov	r2, r3
 800308e:	4b77      	ldr	r3, [pc, #476]	; (800326c <UART_SetConfig+0x6f4>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a72      	ldr	r2, [pc, #456]	; (800326c <UART_SetConfig+0x6f4>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4442      	add	r2, r8
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	e0d0      	b.n	800325a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7ff fc06 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 80030bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	469a      	mov	sl, r3
 80030c2:	f04f 0b00 	mov.w	fp, #0
 80030c6:	46d0      	mov	r8, sl
 80030c8:	46d9      	mov	r9, fp
 80030ca:	eb18 0308 	adds.w	r3, r8, r8
 80030ce:	eb49 0409 	adc.w	r4, r9, r9
 80030d2:	4698      	mov	r8, r3
 80030d4:	46a1      	mov	r9, r4
 80030d6:	eb18 080a 	adds.w	r8, r8, sl
 80030da:	eb49 090b 	adc.w	r9, r9, fp
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030f2:	4688      	mov	r8, r1
 80030f4:	4691      	mov	r9, r2
 80030f6:	eb1a 0508 	adds.w	r5, sl, r8
 80030fa:	eb4b 0609 	adc.w	r6, fp, r9
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0094      	lsls	r4, r2, #2
 8003112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	461a      	mov	r2, r3
 800311a:	4623      	mov	r3, r4
 800311c:	4628      	mov	r0, r5
 800311e:	4631      	mov	r1, r6
 8003120:	f7fd f8b6 	bl	8000290 <__aeabi_uldivmod>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	461a      	mov	r2, r3
 800312a:	4b50      	ldr	r3, [pc, #320]	; (800326c <UART_SetConfig+0x6f4>)
 800312c:	fba3 2302 	umull	r2, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	469b      	mov	fp, r3
 800313a:	f04f 0c00 	mov.w	ip, #0
 800313e:	46d9      	mov	r9, fp
 8003140:	46e2      	mov	sl, ip
 8003142:	eb19 0309 	adds.w	r3, r9, r9
 8003146:	eb4a 040a 	adc.w	r4, sl, sl
 800314a:	4699      	mov	r9, r3
 800314c:	46a2      	mov	sl, r4
 800314e:	eb19 090b 	adds.w	r9, r9, fp
 8003152:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800316a:	4689      	mov	r9, r1
 800316c:	4692      	mov	sl, r2
 800316e:	eb1b 0509 	adds.w	r5, fp, r9
 8003172:	eb4c 060a 	adc.w	r6, ip, sl
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4619      	mov	r1, r3
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	0094      	lsls	r4, r2, #2
 800318a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800318e:	008b      	lsls	r3, r1, #2
 8003190:	461a      	mov	r2, r3
 8003192:	4623      	mov	r3, r4
 8003194:	4628      	mov	r0, r5
 8003196:	4631      	mov	r1, r6
 8003198:	f7fd f87a 	bl	8000290 <__aeabi_uldivmod>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <UART_SetConfig+0x6f4>)
 80031a4:	fba3 1302 	umull	r1, r3, r3, r2
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	2164      	movs	r1, #100	; 0x64
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	3332      	adds	r3, #50	; 0x32
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <UART_SetConfig+0x6f4>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c2:	4498      	add	r8, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	469b      	mov	fp, r3
 80031c8:	f04f 0c00 	mov.w	ip, #0
 80031cc:	46d9      	mov	r9, fp
 80031ce:	46e2      	mov	sl, ip
 80031d0:	eb19 0309 	adds.w	r3, r9, r9
 80031d4:	eb4a 040a 	adc.w	r4, sl, sl
 80031d8:	4699      	mov	r9, r3
 80031da:	46a2      	mov	sl, r4
 80031dc:	eb19 090b 	adds.w	r9, r9, fp
 80031e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031f8:	4689      	mov	r9, r1
 80031fa:	4692      	mov	sl, r2
 80031fc:	eb1b 0509 	adds.w	r5, fp, r9
 8003200:	eb4c 060a 	adc.w	r6, ip, sl
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	f04f 0400 	mov.w	r4, #0
 8003216:	0094      	lsls	r4, r2, #2
 8003218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800321c:	008b      	lsls	r3, r1, #2
 800321e:	461a      	mov	r2, r3
 8003220:	4623      	mov	r3, r4
 8003222:	4628      	mov	r0, r5
 8003224:	4631      	mov	r1, r6
 8003226:	f7fd f833 	bl	8000290 <__aeabi_uldivmod>
 800322a:	4603      	mov	r3, r0
 800322c:	460c      	mov	r4, r1
 800322e:	461a      	mov	r2, r3
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <UART_SetConfig+0x6f4>)
 8003232:	fba3 1302 	umull	r1, r3, r3, r2
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2164      	movs	r1, #100	; 0x64
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	3332      	adds	r3, #50	; 0x32
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <UART_SetConfig+0x6f4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4442      	add	r2, r8
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	e7ff      	b.n	800325a <UART_SetConfig+0x6e2>
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003264:	40011000 	.word	0x40011000
 8003268:	40011400 	.word	0x40011400
 800326c:	51eb851f 	.word	0x51eb851f

08003270 <__io_putchar>:
/* USER CODE BEGIN 2 */

/*(This redirects through the ST Link*/

int __io_putchar(int ch)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003278:	1d39      	adds	r1, r7, #4
 800327a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327e:	2201      	movs	r2, #1
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <__io_putchar+0x20>)
 8003282:	f7ff fb96 	bl	80029b2 <HAL_UART_Transmit>

	  return ch;
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000224 	.word	0x20000224

08003294 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800329a:	f000 faa8 	bl	80037ee <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <MX_LWIP_Init+0x68>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <MX_LWIP_Init+0x6c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <MX_LWIP_Init+0x70>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <MX_LWIP_Init+0x74>)
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <MX_LWIP_Init+0x78>)
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_LWIP_Init+0x70>)
 80032be:	4a10      	ldr	r2, [pc, #64]	; (8003300 <MX_LWIP_Init+0x6c>)
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <MX_LWIP_Init+0x68>)
 80032c2:	4813      	ldr	r0, [pc, #76]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032c4:	f000 ff38 	bl	8004138 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80032c8:	4811      	ldr	r0, [pc, #68]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032ca:	f001 f9cb 	bl	8004664 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80032e0:	480b      	ldr	r0, [pc, #44]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032e2:	f001 f9e3 	bl	80046ac <netif_set_up>
 80032e6:	e002      	b.n	80032ee <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032ea:	f001 fa4b 	bl	8004784 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80032ee:	4808      	ldr	r0, [pc, #32]	; (8003310 <MX_LWIP_Init+0x7c>)
 80032f0:	f008 fbf2 	bl	800bad8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000029c 	.word	0x2000029c
 8003300:	200002a0 	.word	0x200002a0
 8003304:	200002a4 	.word	0x200002a4
 8003308:	0800fe75 	.word	0x0800fe75
 800330c:	08003729 	.word	0x08003729
 8003310:	20000268 	.word	0x20000268

08003314 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_ETH_MspInit+0x174>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f040 80a4 	bne.w	8003480 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_ETH_MspInit+0x178>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003346:	6313      	str	r3, [r2, #48]	; 0x30
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_ETH_MspInit+0x178>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_ETH_MspInit+0x178>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a4b      	ldr	r2, [pc, #300]	; (800348c <HAL_ETH_MspInit+0x178>)
 800335e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a44      	ldr	r2, [pc, #272]	; (800348c <HAL_ETH_MspInit+0x178>)
 800337a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a3d      	ldr	r2, [pc, #244]	; (800348c <HAL_ETH_MspInit+0x178>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6313      	str	r3, [r2, #48]	; 0x30
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_ETH_MspInit+0x178>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4a36      	ldr	r2, [pc, #216]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6313      	str	r3, [r2, #48]	; 0x30
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	6313      	str	r3, [r2, #48]	; 0x30
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_ETH_MspInit+0x178>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80033fc:	2332      	movs	r3, #50	; 0x32
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800340c:	230b      	movs	r3, #11
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	481e      	ldr	r0, [pc, #120]	; (8003490 <HAL_ETH_MspInit+0x17c>)
 8003418:	f7fe fc58 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800341c:	2386      	movs	r3, #134	; 0x86
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800342c:	230b      	movs	r3, #11
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	4817      	ldr	r0, [pc, #92]	; (8003494 <HAL_ETH_MspInit+0x180>)
 8003438:	f7fe fc48 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800343c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800344e:	230b      	movs	r3, #11
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003456:	4619      	mov	r1, r3
 8003458:	480f      	ldr	r0, [pc, #60]	; (8003498 <HAL_ETH_MspInit+0x184>)
 800345a:	f7fe fc37 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800345e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346c:	2303      	movs	r3, #3
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003470:	230b      	movs	r3, #11
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	4808      	ldr	r0, [pc, #32]	; (800349c <HAL_ETH_MspInit+0x188>)
 800347c:	f7fe fc26 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003480:	bf00      	nop
 8003482:	3738      	adds	r7, #56	; 0x38
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40028000 	.word	0x40028000
 800348c:	40023800 	.word	0x40023800
 8003490:	40020800 	.word	0x40020800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40021800 	.word	0x40021800

080034a0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80034ac:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <low_level_init+0x134>)
 80034ae:	4a4a      	ldr	r2, [pc, #296]	; (80035d8 <low_level_init+0x138>)
 80034b0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80034b2:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <low_level_init+0x134>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <low_level_init+0x134>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80034c6:	23e1      	movs	r3, #225	; 0xe1
 80034c8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80034ca:	2300      	movs	r3, #0
 80034cc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80034ce:	2300      	movs	r3, #0
 80034d0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80034d2:	2300      	movs	r3, #0
 80034d4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80034d6:	4a3f      	ldr	r2, [pc, #252]	; (80035d4 <low_level_init+0x134>)
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80034de:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <low_level_init+0x134>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <low_level_init+0x134>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80034ea:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <low_level_init+0x134>)
 80034ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034f0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80034f2:	4838      	ldr	r0, [pc, #224]	; (80035d4 <low_level_init+0x134>)
 80034f4:	f7fd fcda 	bl	8000eac <HAL_ETH_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003514:	2304      	movs	r3, #4
 8003516:	4a31      	ldr	r2, [pc, #196]	; (80035dc <low_level_init+0x13c>)
 8003518:	4931      	ldr	r1, [pc, #196]	; (80035e0 <low_level_init+0x140>)
 800351a:	482e      	ldr	r0, [pc, #184]	; (80035d4 <low_level_init+0x134>)
 800351c:	f7fd fe64 	bl	80011e8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003520:	2304      	movs	r3, #4
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <low_level_init+0x144>)
 8003524:	4930      	ldr	r1, [pc, #192]	; (80035e8 <low_level_init+0x148>)
 8003526:	482b      	ldr	r0, [pc, #172]	; (80035d4 <low_level_init+0x134>)
 8003528:	f7fd fec7 	bl	80012ba <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2206      	movs	r2, #6
 8003530:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <low_level_init+0x134>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003540:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <low_level_init+0x134>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	785a      	ldrb	r2, [r3, #1]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <low_level_init+0x134>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	789a      	ldrb	r2, [r3, #2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <low_level_init+0x134>)
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	78da      	ldrb	r2, [r3, #3]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <low_level_init+0x134>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	791a      	ldrb	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <low_level_init+0x134>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	795a      	ldrb	r2, [r3, #5]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003582:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800358a:	f043 030a 	orr.w	r3, r3, #10
 800358e:	b2da      	uxtb	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003596:	480f      	ldr	r0, [pc, #60]	; (80035d4 <low_level_init+0x134>)
 8003598:	f7fe f8b4 	bl	8001704 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	461a      	mov	r2, r3
 80035a2:	211d      	movs	r1, #29
 80035a4:	480b      	ldr	r0, [pc, #44]	; (80035d4 <low_level_init+0x134>)
 80035a6:	f7fd ffdf 	bl	8001568 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f043 030b 	orr.w	r3, r3, #11
 80035b0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	461a      	mov	r2, r3
 80035b6:	211d      	movs	r1, #29
 80035b8:	4806      	ldr	r0, [pc, #24]	; (80035d4 <low_level_init+0x134>)
 80035ba:	f7fe f83d 	bl	8001638 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80035be:	f107 0310 	add.w	r3, r7, #16
 80035c2:	461a      	mov	r2, r3
 80035c4:	211d      	movs	r1, #29
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <low_level_init+0x134>)
 80035c8:	f7fd ffce 	bl	8001568 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20001b78 	.word	0x20001b78
 80035d8:	40028000 	.word	0x40028000
 80035dc:	20001bc0 	.word	0x20001bc0
 80035e0:	200002a8 	.word	0x200002a8
 80035e4:	20000328 	.word	0x20000328
 80035e8:	20001af8 	.word	0x20001af8

080035ec <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80035f6:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <low_level_output+0x138>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800360e:	4b45      	ldr	r3, [pc, #276]	; (8003724 <low_level_output+0x138>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	e05a      	b.n	80036d4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	da03      	bge.n	800362e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003626:	23f8      	movs	r3, #248	; 0xf8
 8003628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800362c:	e05c      	b.n	80036e8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	895b      	ldrh	r3, [r3, #10]
 8003632:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003638:	e02f      	b.n	800369a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	18d0      	adds	r0, r2, r3
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	18d1      	adds	r1, r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800364e:	3304      	adds	r3, #4
 8003650:	461a      	mov	r2, r3
 8003652:	f00c fd82 	bl	801015a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da03      	bge.n	800366c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003664:	23f8      	movs	r3, #248	; 0xf8
 8003666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800366a:	e03d      	b.n	80036e8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800367c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003688:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003694:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d8c8      	bhi.n	800363a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	18d0      	adds	r0, r2, r3
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f00c fd4e 	bl	801015a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1a1      	bne.n	800361e <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	4811      	ldr	r0, [pc, #68]	; (8003724 <low_level_output+0x138>)
 80036de:	f7fd fe59 	bl	8001394 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <low_level_output+0x138>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	3314      	adds	r3, #20
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <low_level_output+0x138>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	3314      	adds	r3, #20
 8003706:	2220      	movs	r2, #32
 8003708:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <low_level_output+0x138>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003712:	3304      	adds	r3, #4
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800371c:	4618      	mov	r0, r3
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20001b78 	.word	0x20001b78

08003728 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <ethernetif_init+0x1c>
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <ethernetif_init+0x48>)
 8003738:	f240 2211 	movw	r2, #529	; 0x211
 800373c:	490d      	ldr	r1, [pc, #52]	; (8003774 <ethernetif_init+0x4c>)
 800373e:	480e      	ldr	r0, [pc, #56]	; (8003778 <ethernetif_init+0x50>)
 8003740:	f00c fd1e 	bl	8010180 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2273      	movs	r2, #115	; 0x73
 8003748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2274      	movs	r2, #116	; 0x74
 8003750:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <ethernetif_init+0x54>)
 8003758:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <ethernetif_init+0x58>)
 800375e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fe9d 	bl	80034a0 <low_level_init>

  return ERR_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	0801119c 	.word	0x0801119c
 8003774:	080111b8 	.word	0x080111b8
 8003778:	080111c8 	.word	0x080111c8
 800377c:	0800def5 	.word	0x0800def5
 8003780:	080035ed 	.word	0x080035ed

08003784 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003788:	f7fd fa7c 	bl	8000c84 <HAL_GetTick>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	bd80      	pop	{r7, pc}

08003792 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	b29b      	uxth	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	061a      	lsls	r2, r3, #24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0e1b      	lsrs	r3, r3, #24
 80037e0:	4313      	orrs	r3, r2
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80037f8:	f000 f8d4 	bl	80039a4 <mem_init>
  memp_init();
 80037fc:	f000 fbda 	bl	8003fb4 <memp_init>
  pbuf_init();
  netif_init();
 8003800:	f000 fc92 	bl	8004128 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003804:	f007 f86e 	bl	800a8e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003808:	f001 fdd6 	bl	80053b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800380c:	f007 f818 	bl	800a840 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <ptr_to_mem+0x20>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4413      	add	r3, r2
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	2000009c 	.word	0x2000009c

0800383c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <mem_to_ptr+0x20>)
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	b29b      	uxth	r3, r3
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	2000009c 	.word	0x2000009c

08003860 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <plug_holes+0x120>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d206      	bcs.n	8003880 <plug_holes+0x20>
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <plug_holes+0x124>)
 8003874:	f240 12df 	movw	r2, #479	; 0x1df
 8003878:	4943      	ldr	r1, [pc, #268]	; (8003988 <plug_holes+0x128>)
 800387a:	4844      	ldr	r0, [pc, #272]	; (800398c <plug_holes+0x12c>)
 800387c:	f00c fc80 	bl	8010180 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <plug_holes+0x130>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d306      	bcc.n	8003898 <plug_holes+0x38>
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <plug_holes+0x124>)
 800388c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003890:	4940      	ldr	r1, [pc, #256]	; (8003994 <plug_holes+0x134>)
 8003892:	483e      	ldr	r0, [pc, #248]	; (800398c <plug_holes+0x12c>)
 8003894:	f00c fc74 	bl	8010180 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d006      	beq.n	80038ae <plug_holes+0x4e>
 80038a0:	4b38      	ldr	r3, [pc, #224]	; (8003984 <plug_holes+0x124>)
 80038a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80038a6:	493c      	ldr	r1, [pc, #240]	; (8003998 <plug_holes+0x138>)
 80038a8:	4838      	ldr	r0, [pc, #224]	; (800398c <plug_holes+0x12c>)
 80038aa:	f00c fc69 	bl	8010180 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038b6:	d906      	bls.n	80038c6 <plug_holes+0x66>
 80038b8:	4b32      	ldr	r3, [pc, #200]	; (8003984 <plug_holes+0x124>)
 80038ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80038be:	4937      	ldr	r1, [pc, #220]	; (800399c <plug_holes+0x13c>)
 80038c0:	4832      	ldr	r0, [pc, #200]	; (800398c <plug_holes+0x12c>)
 80038c2:	f00c fc5d 	bl	8010180 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ffa4 	bl	8003818 <ptr_to_mem>
 80038d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d024      	beq.n	8003924 <plug_holes+0xc4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d120      	bne.n	8003924 <plug_holes+0xc4>
 80038e2:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <plug_holes+0x130>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d01b      	beq.n	8003924 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80038ec:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <plug_holes+0x140>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d102      	bne.n	80038fc <plug_holes+0x9c>
      lfree = mem;
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <plug_holes+0x140>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800390c:	d00a      	beq.n	8003924 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff80 	bl	8003818 <ptr_to_mem>
 8003918:	4604      	mov	r4, r0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff8e 	bl	800383c <mem_to_ptr>
 8003920:	4603      	mov	r3, r0
 8003922:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	885b      	ldrh	r3, [r3, #2]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff75 	bl	8003818 <ptr_to_mem>
 800392e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d01f      	beq.n	8003978 <plug_holes+0x118>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11b      	bne.n	8003978 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <plug_holes+0x140>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	d102      	bne.n	8003950 <plug_holes+0xf0>
      lfree = pmem;
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <plug_holes+0x140>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	881a      	ldrh	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003960:	d00a      	beq.n	8003978 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff56 	bl	8003818 <ptr_to_mem>
 800396c:	4604      	mov	r4, r0
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f7ff ff64 	bl	800383c <mem_to_ptr>
 8003974:	4603      	mov	r3, r0
 8003976:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	2000009c 	.word	0x2000009c
 8003984:	080111f0 	.word	0x080111f0
 8003988:	08011220 	.word	0x08011220
 800398c:	08011238 	.word	0x08011238
 8003990:	200000a0 	.word	0x200000a0
 8003994:	08011260 	.word	0x08011260
 8003998:	0801127c 	.word	0x0801127c
 800399c:	08011298 	.word	0x08011298
 80039a0:	200000a4 	.word	0x200000a4

080039a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <mem_init+0x68>)
 80039ac:	3303      	adds	r3, #3
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <mem_init+0x6c>)
 80039b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <mem_init+0x6c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80039c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80039d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80039d6:	f7ff ff1f 	bl	8003818 <ptr_to_mem>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <mem_init+0x70>)
 80039de:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <mem_init+0x70>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <mem_init+0x70>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80039f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <mem_init+0x70>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80039fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <mem_init+0x6c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <mem_init+0x74>)
 8003a02:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200033a8 	.word	0x200033a8
 8003a10:	2000009c 	.word	0x2000009c
 8003a14:	200000a0 	.word	0x200000a0
 8003a18:	200000a4 	.word	0x200000a4

08003a1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff09 	bl	800383c <mem_to_ptr>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fef0 	bl	8003818 <ptr_to_mem>
 8003a38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	885b      	ldrh	r3, [r3, #2]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff feea 	bl	8003818 <ptr_to_mem>
 8003a44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a4e:	d818      	bhi.n	8003a82 <mem_link_valid+0x66>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	885b      	ldrh	r3, [r3, #2]
 8003a54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a58:	d813      	bhi.n	8003a82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a5e:	8afa      	ldrh	r2, [r7, #22]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d004      	beq.n	8003a6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	8afa      	ldrh	r2, [r7, #22]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d109      	bne.n	8003a82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <mem_link_valid+0x74>)
 8003a70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d006      	beq.n	8003a86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	885b      	ldrh	r3, [r3, #2]
 8003a7c:	8afa      	ldrh	r2, [r7, #22]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <mem_link_valid+0x6a>
    return 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <mem_link_valid+0x6c>
  }
  return 1;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200000a0 	.word	0x200000a0

08003a94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04c      	beq.n	8003b3c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <mem_free+0xb0>)
 8003aae:	f240 2273 	movw	r2, #627	; 0x273
 8003ab2:	4925      	ldr	r1, [pc, #148]	; (8003b48 <mem_free+0xb4>)
 8003ab4:	4825      	ldr	r0, [pc, #148]	; (8003b4c <mem_free+0xb8>)
 8003ab6:	f00c fb63 	bl	8010180 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003aba:	e040      	b.n	8003b3e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b08      	subs	r3, #8
 8003ac0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <mem_free+0xbc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d306      	bcc.n	8003ada <mem_free+0x46>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f103 020c 	add.w	r2, r3, #12
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <mem_free+0xc0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d907      	bls.n	8003aea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <mem_free+0xb0>)
 8003adc:	f240 227f 	movw	r2, #639	; 0x27f
 8003ae0:	491d      	ldr	r1, [pc, #116]	; (8003b58 <mem_free+0xc4>)
 8003ae2:	481a      	ldr	r0, [pc, #104]	; (8003b4c <mem_free+0xb8>)
 8003ae4:	f00c fb4c 	bl	8010180 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ae8:	e029      	b.n	8003b3e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <mem_free+0xb0>)
 8003af4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003af8:	4918      	ldr	r1, [pc, #96]	; (8003b5c <mem_free+0xc8>)
 8003afa:	4814      	ldr	r0, [pc, #80]	; (8003b4c <mem_free+0xb8>)
 8003afc:	f00c fb40 	bl	8010180 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b00:	e01d      	b.n	8003b3e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff ff8a 	bl	8003a1c <mem_link_valid>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <mem_free+0xb0>)
 8003b10:	f240 2295 	movw	r2, #661	; 0x295
 8003b14:	4912      	ldr	r1, [pc, #72]	; (8003b60 <mem_free+0xcc>)
 8003b16:	480d      	ldr	r0, [pc, #52]	; (8003b4c <mem_free+0xb8>)
 8003b18:	f00c fb32 	bl	8010180 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b1c:	e00f      	b.n	8003b3e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <mem_free+0xd0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d202      	bcs.n	8003b34 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <mem_free+0xd0>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fe93 	bl	8003860 <plug_holes>
 8003b3a:	e000      	b.n	8003b3e <mem_free+0xaa>
    return;
 8003b3c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	080111f0 	.word	0x080111f0
 8003b48:	080112c4 	.word	0x080112c4
 8003b4c:	08011238 	.word	0x08011238
 8003b50:	2000009c 	.word	0x2000009c
 8003b54:	200000a0 	.word	0x200000a0
 8003b58:	080112e8 	.word	0x080112e8
 8003b5c:	08011304 	.word	0x08011304
 8003b60:	0801132c 	.word	0x0801132c
 8003b64:	200000a4 	.word	0x200000a4

08003b68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	3303      	adds	r3, #3
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	2b0b      	cmp	r3, #11
 8003b84:	d801      	bhi.n	8003b8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003b86:	230c      	movs	r3, #12
 8003b88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003b8a:	8bfb      	ldrh	r3, [r7, #30]
 8003b8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b90:	d803      	bhi.n	8003b9a <mem_trim+0x32>
 8003b92:	8bfa      	ldrh	r2, [r7, #30]
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d201      	bcs.n	8003b9e <mem_trim+0x36>
    return NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e0cc      	b.n	8003d38 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003b9e:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <mem_trim+0x1d8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d304      	bcc.n	8003bb2 <mem_trim+0x4a>
 8003ba8:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <mem_trim+0x1dc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d306      	bcc.n	8003bc0 <mem_trim+0x58>
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <mem_trim+0x1e0>)
 8003bb4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003bb8:	4964      	ldr	r1, [pc, #400]	; (8003d4c <mem_trim+0x1e4>)
 8003bba:	4865      	ldr	r0, [pc, #404]	; (8003d50 <mem_trim+0x1e8>)
 8003bbc:	f00c fae0 	bl	8010180 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003bc0:	4b5f      	ldr	r3, [pc, #380]	; (8003d40 <mem_trim+0x1d8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d304      	bcc.n	8003bd4 <mem_trim+0x6c>
 8003bca:	4b5e      	ldr	r3, [pc, #376]	; (8003d44 <mem_trim+0x1dc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d301      	bcc.n	8003bd8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	e0af      	b.n	8003d38 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b08      	subs	r3, #8
 8003bdc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003bde:	69b8      	ldr	r0, [r7, #24]
 8003be0:	f7ff fe2c 	bl	800383c <mem_to_ptr>
 8003be4:	4603      	mov	r3, r0
 8003be6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	8afb      	ldrh	r3, [r7, #22]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b08      	subs	r3, #8
 8003bf4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003bf6:	8bfa      	ldrh	r2, [r7, #30]
 8003bf8:	8abb      	ldrh	r3, [r7, #20]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d906      	bls.n	8003c0c <mem_trim+0xa4>
 8003bfe:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <mem_trim+0x1e0>)
 8003c00:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003c04:	4953      	ldr	r1, [pc, #332]	; (8003d54 <mem_trim+0x1ec>)
 8003c06:	4852      	ldr	r0, [pc, #328]	; (8003d50 <mem_trim+0x1e8>)
 8003c08:	f00c faba 	bl	8010180 <iprintf>
  if (newsize > size) {
 8003c0c:	8bfa      	ldrh	r2, [r7, #30]
 8003c0e:	8abb      	ldrh	r3, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d901      	bls.n	8003c18 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e08f      	b.n	8003d38 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003c18:	8bfa      	ldrh	r2, [r7, #30]
 8003c1a:	8abb      	ldrh	r3, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d101      	bne.n	8003c24 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	e089      	b.n	8003d38 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fdf5 	bl	8003818 <ptr_to_mem>
 8003c2e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13f      	bne.n	8003cb8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c40:	d106      	bne.n	8003c50 <mem_trim+0xe8>
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <mem_trim+0x1e0>)
 8003c44:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003c48:	4943      	ldr	r1, [pc, #268]	; (8003d58 <mem_trim+0x1f0>)
 8003c4a:	4841      	ldr	r0, [pc, #260]	; (8003d50 <mem_trim+0x1e8>)
 8003c4c:	f00c fa98 	bl	8010180 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003c56:	8afa      	ldrh	r2, [r7, #22]
 8003c58:	8bfb      	ldrh	r3, [r7, #30]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3308      	adds	r3, #8
 8003c60:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003c62:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <mem_trim+0x1f4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d106      	bne.n	8003c7a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fdd2 	bl	8003818 <ptr_to_mem>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <mem_trim+0x1f4>)
 8003c78:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fdcb 	bl	8003818 <ptr_to_mem>
 8003c82:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2200      	movs	r2, #0
 8003c88:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	89ba      	ldrh	r2, [r7, #12]
 8003c8e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	8afa      	ldrh	r2, [r7, #22]
 8003c94:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	89fa      	ldrh	r2, [r7, #14]
 8003c9a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ca4:	d047      	beq.n	8003d36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fdb4 	bl	8003818 <ptr_to_mem>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	89fb      	ldrh	r3, [r7, #14]
 8003cb4:	8053      	strh	r3, [r2, #2]
 8003cb6:	e03e      	b.n	8003d36 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003cb8:	8bfb      	ldrh	r3, [r7, #30]
 8003cba:	f103 0214 	add.w	r2, r3, #20
 8003cbe:	8abb      	ldrh	r3, [r7, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d838      	bhi.n	8003d36 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003cc4:	8afa      	ldrh	r2, [r7, #22]
 8003cc6:	8bfb      	ldrh	r3, [r7, #30]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3308      	adds	r3, #8
 8003cce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cd8:	d106      	bne.n	8003ce8 <mem_trim+0x180>
 8003cda:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <mem_trim+0x1e0>)
 8003cdc:	f240 3216 	movw	r2, #790	; 0x316
 8003ce0:	491d      	ldr	r1, [pc, #116]	; (8003d58 <mem_trim+0x1f0>)
 8003ce2:	481b      	ldr	r0, [pc, #108]	; (8003d50 <mem_trim+0x1e8>)
 8003ce4:	f00c fa4c 	bl	8010180 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003ce8:	89fb      	ldrh	r3, [r7, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fd94 	bl	8003818 <ptr_to_mem>
 8003cf0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <mem_trim+0x1f4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d202      	bcs.n	8003d02 <mem_trim+0x19a>
      lfree = mem2;
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <mem_trim+0x1f4>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2200      	movs	r2, #0
 8003d06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	8afa      	ldrh	r2, [r7, #22]
 8003d14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	89fa      	ldrh	r2, [r7, #14]
 8003d1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d24:	d007      	beq.n	8003d36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fd74 	bl	8003818 <ptr_to_mem>
 8003d30:	4602      	mov	r2, r0
 8003d32:	89fb      	ldrh	r3, [r7, #14]
 8003d34:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003d36:	687b      	ldr	r3, [r7, #4]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	2000009c 	.word	0x2000009c
 8003d44:	200000a0 	.word	0x200000a0
 8003d48:	080111f0 	.word	0x080111f0
 8003d4c:	08011360 	.word	0x08011360
 8003d50:	08011238 	.word	0x08011238
 8003d54:	08011378 	.word	0x08011378
 8003d58:	08011398 	.word	0x08011398
 8003d5c:	200000a4 	.word	0x200000a4

08003d60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <mem_malloc+0x14>
    return NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e0d9      	b.n	8003f28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	3303      	adds	r3, #3
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003d80:	8bbb      	ldrh	r3, [r7, #28]
 8003d82:	2b0b      	cmp	r3, #11
 8003d84:	d801      	bhi.n	8003d8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003d86:	230c      	movs	r3, #12
 8003d88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003d8a:	8bbb      	ldrh	r3, [r7, #28]
 8003d8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d90:	d803      	bhi.n	8003d9a <mem_malloc+0x3a>
 8003d92:	8bba      	ldrh	r2, [r7, #28]
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d201      	bcs.n	8003d9e <mem_malloc+0x3e>
    return NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e0c4      	b.n	8003f28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003d9e:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <mem_malloc+0x1d0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fd4a 	bl	800383c <mem_to_ptr>
 8003da8:	4603      	mov	r3, r0
 8003daa:	83fb      	strh	r3, [r7, #30]
 8003dac:	e0b4      	b.n	8003f18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003dae:	8bfb      	ldrh	r3, [r7, #30]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fd31 	bl	8003818 <ptr_to_mem>
 8003db6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 80a4 	bne.w	8003f0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	8bfb      	ldrh	r3, [r7, #30]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f1a3 0208 	sub.w	r2, r3, #8
 8003dd0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f0c0 8099 	bcc.w	8003f0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	8bfb      	ldrh	r3, [r7, #30]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f1a3 0208 	sub.w	r2, r3, #8
 8003de6:	8bbb      	ldrh	r3, [r7, #28]
 8003de8:	3314      	adds	r3, #20
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d333      	bcc.n	8003e56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003dee:	8bfa      	ldrh	r2, [r7, #30]
 8003df0:	8bbb      	ldrh	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3308      	adds	r3, #8
 8003df8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003dfa:	8a7b      	ldrh	r3, [r7, #18]
 8003dfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e00:	d106      	bne.n	8003e10 <mem_malloc+0xb0>
 8003e02:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <mem_malloc+0x1d4>)
 8003e04:	f240 3287 	movw	r2, #903	; 0x387
 8003e08:	494b      	ldr	r1, [pc, #300]	; (8003f38 <mem_malloc+0x1d8>)
 8003e0a:	484c      	ldr	r0, [pc, #304]	; (8003f3c <mem_malloc+0x1dc>)
 8003e0c:	f00c f9b8 	bl	8010180 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003e10:	8a7b      	ldrh	r3, [r7, #18]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fd00 	bl	8003818 <ptr_to_mem>
 8003e18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8bfa      	ldrh	r2, [r7, #30]
 8003e2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	8a7a      	ldrh	r2, [r7, #18]
 8003e32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2201      	movs	r2, #1
 8003e38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e42:	d00b      	beq.n	8003e5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fce5 	bl	8003818 <ptr_to_mem>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	8a7b      	ldrh	r3, [r7, #18]
 8003e52:	8053      	strh	r3, [r2, #2]
 8003e54:	e002      	b.n	8003e5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <mem_malloc+0x1d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d127      	bne.n	8003eb6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <mem_malloc+0x1d0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003e6c:	e005      	b.n	8003e7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fcd0 	bl	8003818 <ptr_to_mem>
 8003e78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	791b      	ldrb	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <mem_malloc+0x12c>
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <mem_malloc+0x1e0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1f0      	bne.n	8003e6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <mem_malloc+0x1d0>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <mem_malloc+0x1d0>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <mem_malloc+0x1e0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d00b      	beq.n	8003eb6 <mem_malloc+0x156>
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <mem_malloc+0x1d0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	791b      	ldrb	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <mem_malloc+0x156>
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <mem_malloc+0x1d4>)
 8003eaa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003eae:	4925      	ldr	r1, [pc, #148]	; (8003f44 <mem_malloc+0x1e4>)
 8003eb0:	4822      	ldr	r0, [pc, #136]	; (8003f3c <mem_malloc+0x1dc>)
 8003eb2:	f00c f965 	bl	8010180 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003eb6:	8bba      	ldrh	r2, [r7, #28]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <mem_malloc+0x1e0>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d906      	bls.n	8003ed4 <mem_malloc+0x174>
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <mem_malloc+0x1d4>)
 8003ec8:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003ecc:	491e      	ldr	r1, [pc, #120]	; (8003f48 <mem_malloc+0x1e8>)
 8003ece:	481b      	ldr	r0, [pc, #108]	; (8003f3c <mem_malloc+0x1dc>)
 8003ed0:	f00c f956 	bl	8010180 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <mem_malloc+0x18c>
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <mem_malloc+0x1d4>)
 8003ee0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8003ee4:	4919      	ldr	r1, [pc, #100]	; (8003f4c <mem_malloc+0x1ec>)
 8003ee6:	4815      	ldr	r0, [pc, #84]	; (8003f3c <mem_malloc+0x1dc>)
 8003ee8:	f00c f94a 	bl	8010180 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <mem_malloc+0x1a4>
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <mem_malloc+0x1d4>)
 8003ef8:	f240 32be 	movw	r2, #958	; 0x3be
 8003efc:	4914      	ldr	r1, [pc, #80]	; (8003f50 <mem_malloc+0x1f0>)
 8003efe:	480f      	ldr	r0, [pc, #60]	; (8003f3c <mem_malloc+0x1dc>)
 8003f00:	f00c f93e 	bl	8010180 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3308      	adds	r3, #8
 8003f08:	e00e      	b.n	8003f28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003f0a:	8bfb      	ldrh	r3, [r7, #30]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fc83 	bl	8003818 <ptr_to_mem>
 8003f12:	4603      	mov	r3, r0
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f18:	8bfa      	ldrh	r2, [r7, #30]
 8003f1a:	8bbb      	ldrh	r3, [r7, #28]
 8003f1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003f20:	429a      	cmp	r2, r3
 8003f22:	f4ff af44 	bcc.w	8003dae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200000a4 	.word	0x200000a4
 8003f34:	080111f0 	.word	0x080111f0
 8003f38:	08011398 	.word	0x08011398
 8003f3c:	08011238 	.word	0x08011238
 8003f40:	200000a0 	.word	0x200000a0
 8003f44:	080113ac 	.word	0x080113ac
 8003f48:	080113c8 	.word	0x080113c8
 8003f4c:	080113f8 	.word	0x080113f8
 8003f50:	08011428 	.word	0x08011428

08003f54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	3303      	adds	r3, #3
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e011      	b.n	8003f9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	88db      	ldrh	r3, [r3, #6]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	dbe7      	blt.n	8003f76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fba:	2300      	movs	r3, #0
 8003fbc:	80fb      	strh	r3, [r7, #6]
 8003fbe:	e009      	b.n	8003fd4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <memp_init+0x30>)
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ffc3 	bl	8003f54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	80fb      	strh	r3, [r7, #6]
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d9f2      	bls.n	8003fc0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	08015c90 	.word	0x08015c90

08003fe8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <do_memp_malloc_pool+0x38>
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <do_memp_malloc_pool+0x48>)
 8004014:	f240 1219 	movw	r2, #281	; 0x119
 8004018:	4906      	ldr	r1, [pc, #24]	; (8004034 <do_memp_malloc_pool+0x4c>)
 800401a:	4807      	ldr	r0, [pc, #28]	; (8004038 <do_memp_malloc_pool+0x50>)
 800401c:	f00c f8b0 	bl	8010180 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	e000      	b.n	8004026 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	080114b4 	.word	0x080114b4
 8004034:	080114e4 	.word	0x080114e4
 8004038:	08011508 	.word	0x08011508

0800403c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d908      	bls.n	800405e <memp_malloc+0x22>
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <memp_malloc+0x3c>)
 800404e:	f240 1257 	movw	r2, #343	; 0x157
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <memp_malloc+0x40>)
 8004054:	480a      	ldr	r0, [pc, #40]	; (8004080 <memp_malloc+0x44>)
 8004056:	f00c f893 	bl	8010180 <iprintf>
 800405a:	2300      	movs	r3, #0
 800405c:	e008      	b.n	8004070 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	4a08      	ldr	r2, [pc, #32]	; (8004084 <memp_malloc+0x48>)
 8004062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ffbe 	bl	8003fe8 <do_memp_malloc_pool>
 800406c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	080114b4 	.word	0x080114b4
 800407c:	08011544 	.word	0x08011544
 8004080:	08011508 	.word	0x08011508
 8004084:	08015c90 	.word	0x08015c90

08004088 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <do_memp_free_pool+0x22>
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <do_memp_free_pool+0x40>)
 800409e:	f240 126d 	movw	r2, #365	; 0x16d
 80040a2:	490a      	ldr	r1, [pc, #40]	; (80040cc <do_memp_free_pool+0x44>)
 80040a4:	480a      	ldr	r0, [pc, #40]	; (80040d0 <do_memp_free_pool+0x48>)
 80040a6:	f00c f86b 	bl	8010180 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	080114b4 	.word	0x080114b4
 80040cc:	08011564 	.word	0x08011564
 80040d0:	08011508 	.word	0x08011508

080040d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d907      	bls.n	80040f6 <memp_free+0x22>
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <memp_free+0x44>)
 80040e8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80040ec:	490b      	ldr	r1, [pc, #44]	; (800411c <memp_free+0x48>)
 80040ee:	480c      	ldr	r0, [pc, #48]	; (8004120 <memp_free+0x4c>)
 80040f0:	f00c f846 	bl	8010180 <iprintf>
 80040f4:	e00c      	b.n	8004110 <memp_free+0x3c>

  if (mem == NULL) {
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <memp_free+0x50>)
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ffbe 	bl	8004088 <do_memp_free_pool>
 800410c:	e000      	b.n	8004110 <memp_free+0x3c>
    return;
 800410e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	080114b4 	.word	0x080114b4
 800411c:	08011584 	.word	0x08011584
 8004120:	08011508 	.word	0x08011508
 8004124:	08015c90 	.word	0x08015c90

08004128 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d108      	bne.n	800415e <netif_add+0x26>
 800414c:	4b9f      	ldr	r3, [pc, #636]	; (80043cc <netif_add+0x294>)
 800414e:	f240 1227 	movw	r2, #295	; 0x127
 8004152:	499f      	ldr	r1, [pc, #636]	; (80043d0 <netif_add+0x298>)
 8004154:	489f      	ldr	r0, [pc, #636]	; (80043d4 <netif_add+0x29c>)
 8004156:	f00c f813 	bl	8010180 <iprintf>
 800415a:	2300      	movs	r3, #0
 800415c:	e132      	b.n	80043c4 <netif_add+0x28c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d108      	bne.n	8004176 <netif_add+0x3e>
 8004164:	4b99      	ldr	r3, [pc, #612]	; (80043cc <netif_add+0x294>)
 8004166:	f44f 7294 	mov.w	r2, #296	; 0x128
 800416a:	499b      	ldr	r1, [pc, #620]	; (80043d8 <netif_add+0x2a0>)
 800416c:	4899      	ldr	r0, [pc, #612]	; (80043d4 <netif_add+0x29c>)
 800416e:	f00c f807 	bl	8010180 <iprintf>
 8004172:	2300      	movs	r3, #0
 8004174:	e126      	b.n	80043c4 <netif_add+0x28c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800417c:	4b97      	ldr	r3, [pc, #604]	; (80043dc <netif_add+0x2a4>)
 800417e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004186:	4b95      	ldr	r3, [pc, #596]	; (80043dc <netif_add+0x2a4>)
 8004188:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004190:	4b92      	ldr	r3, [pc, #584]	; (80043dc <netif_add+0x2a4>)
 8004192:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a8d      	ldr	r2, [pc, #564]	; (80043e0 <netif_add+0x2a8>)
 80041aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3320      	adds	r3, #32
 80041be:	2204      	movs	r2, #4
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f00b ffd4 	bl	8010170 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80041ce:	4b85      	ldr	r3, [pc, #532]	; (80043e4 <netif_add+0x2ac>)
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f9f3 	bl	80045d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	4798      	blx	r3
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <netif_add+0xc2>
    return NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e0e4      	b.n	80043c4 <netif_add+0x28c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004200:	2bff      	cmp	r3, #255	; 0xff
 8004202:	d103      	bne.n	800420c <netif_add+0xd4>
        netif->num = 0;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004210:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <netif_add+0x2b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e02b      	b.n	8004270 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d106      	bne.n	800422e <netif_add+0xf6>
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <netif_add+0x294>)
 8004222:	f240 128b 	movw	r2, #395	; 0x18b
 8004226:	4971      	ldr	r1, [pc, #452]	; (80043ec <netif_add+0x2b4>)
 8004228:	486a      	ldr	r0, [pc, #424]	; (80043d4 <netif_add+0x29c>)
 800422a:	f00b ffa9 	bl	8010180 <iprintf>
        num_netifs++;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2bff      	cmp	r3, #255	; 0xff
 8004238:	dd06      	ble.n	8004248 <netif_add+0x110>
 800423a:	4b64      	ldr	r3, [pc, #400]	; (80043cc <netif_add+0x294>)
 800423c:	f240 128d 	movw	r2, #397	; 0x18d
 8004240:	496b      	ldr	r1, [pc, #428]	; (80043f0 <netif_add+0x2b8>)
 8004242:	4864      	ldr	r0, [pc, #400]	; (80043d4 <netif_add+0x29c>)
 8004244:	f00b ff9c 	bl	8010180 <iprintf>
        if (netif2->num == netif->num) {
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004254:	429a      	cmp	r2, r3
 8004256:	d108      	bne.n	800426a <netif_add+0x132>
          netif->num++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800425e:	3301      	adds	r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004268:	e005      	b.n	8004276 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1d0      	bne.n	8004218 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1be      	bne.n	80041fa <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004282:	2bfe      	cmp	r3, #254	; 0xfe
 8004284:	d103      	bne.n	800428e <netif_add+0x156>
    netif_num = 0;
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <netif_add+0x2ac>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e006      	b.n	800429c <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004294:	3301      	adds	r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <netif_add+0x2ac>)
 800429a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800429c:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <netif_add+0x2b0>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80042a4:	4a50      	ldr	r2, [pc, #320]	; (80043e8 <netif_add+0x2b0>)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80042b0:	4619      	mov	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80042b8:	461a      	mov	r2, r3
 80042ba:	484e      	ldr	r0, [pc, #312]	; (80043f4 <netif_add+0x2bc>)
 80042bc:	f00b ff60 	bl	8010180 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 80042c0:	484d      	ldr	r0, [pc, #308]	; (80043f8 <netif_add+0x2c0>)
 80042c2:	f00b ff5d 	bl	8010180 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <netif_add+0x19c>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4619      	mov	r1, r3
 80042d2:	e000      	b.n	80042d6 <netif_add+0x19e>
 80042d4:	2100      	movs	r1, #0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <netif_add+0x1ae>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3301      	adds	r3, #1
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	e000      	b.n	80042e8 <netif_add+0x1b0>
 80042e6:	2200      	movs	r2, #0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <netif_add+0x1c0>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3302      	adds	r3, #2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	e000      	b.n	80042fa <netif_add+0x1c2>
 80042f8:	2000      	movs	r0, #0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <netif_add+0x1d0>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3303      	adds	r3, #3
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	e000      	b.n	800430a <netif_add+0x1d2>
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	483b      	ldr	r0, [pc, #236]	; (80043fc <netif_add+0x2c4>)
 8004310:	f00b ff36 	bl	8010180 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8004314:	483a      	ldr	r0, [pc, #232]	; (8004400 <netif_add+0x2c8>)
 8004316:	f00b ff33 	bl	8010180 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <netif_add+0x1f0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	e000      	b.n	800432a <netif_add+0x1f2>
 8004328:	2100      	movs	r1, #0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <netif_add+0x202>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	e000      	b.n	800433c <netif_add+0x204>
 800433a:	2200      	movs	r2, #0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <netif_add+0x214>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3302      	adds	r3, #2
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	e000      	b.n	800434e <netif_add+0x216>
 800434c:	2000      	movs	r0, #0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <netif_add+0x224>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3303      	adds	r3, #3
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	e000      	b.n	800435e <netif_add+0x226>
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	4603      	mov	r3, r0
 8004362:	4826      	ldr	r0, [pc, #152]	; (80043fc <netif_add+0x2c4>)
 8004364:	f00b ff0c 	bl	8010180 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8004368:	4826      	ldr	r0, [pc, #152]	; (8004404 <netif_add+0x2cc>)
 800436a:	f00b ff09 	bl	8010180 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <netif_add+0x244>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	e000      	b.n	800437e <netif_add+0x246>
 800437c:	2100      	movs	r1, #0
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <netif_add+0x256>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3301      	adds	r3, #1
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	e000      	b.n	8004390 <netif_add+0x258>
 800438e:	2200      	movs	r2, #0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <netif_add+0x268>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3302      	adds	r3, #2
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	e000      	b.n	80043a2 <netif_add+0x26a>
 80043a0:	2000      	movs	r0, #0
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <netif_add+0x278>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	3303      	adds	r3, #3
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	e000      	b.n	80043b2 <netif_add+0x27a>
 80043b0:	2300      	movs	r3, #0
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	4811      	ldr	r0, [pc, #68]	; (80043fc <netif_add+0x2c4>)
 80043b8:	f00b fee2 	bl	8010180 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 80043bc:	200a      	movs	r0, #10
 80043be:	f00b fef7 	bl	80101b0 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	080115a0 	.word	0x080115a0
 80043d0:	08011634 	.word	0x08011634
 80043d4:	080115f0 	.word	0x080115f0
 80043d8:	08011650 	.word	0x08011650
 80043dc:	08015d18 	.word	0x08015d18
 80043e0:	080047e9 	.word	0x080047e9
 80043e4:	200000cc 	.word	0x200000cc
 80043e8:	20006938 	.word	0x20006938
 80043ec:	08011674 	.word	0x08011674
 80043f0:	08011688 	.word	0x08011688
 80043f4:	080116b8 	.word	0x080116b8
 80043f8:	080116d8 	.word	0x080116d8
 80043fc:	080116e0 	.word	0x080116e0
 8004400:	080116f0 	.word	0x080116f0
 8004404:	080116fc 	.word	0x080116fc

08004408 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f002 fb11 	bl	8006a3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f006 feed 	bl	800b1fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <netif_do_set_ipaddr+0x20>
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <netif_do_set_ipaddr+0x8c>)
 8004440:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004444:	491d      	ldr	r1, [pc, #116]	; (80044bc <netif_do_set_ipaddr+0x90>)
 8004446:	481e      	ldr	r0, [pc, #120]	; (80044c0 <netif_do_set_ipaddr+0x94>)
 8004448:	f00b fe9a 	bl	8010180 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <netif_do_set_ipaddr+0x34>
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <netif_do_set_ipaddr+0x8c>)
 8004454:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004458:	4918      	ldr	r1, [pc, #96]	; (80044bc <netif_do_set_ipaddr+0x90>)
 800445a:	4819      	ldr	r0, [pc, #100]	; (80044c0 <netif_do_set_ipaddr+0x94>)
 800445c:	f00b fe90 	bl	8010180 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3304      	adds	r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d01f      	beq.n	80044ae <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3304      	adds	r3, #4
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800447e:	4811      	ldr	r0, [pc, #68]	; (80044c4 <netif_do_set_ipaddr+0x98>)
 8004480:	f00b ff06 	bl	8010290 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ffbc 	bl	8004408 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <netif_do_set_ipaddr+0x70>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	e000      	b.n	800449e <netif_do_set_ipaddr+0x72>
 800449c:	2300      	movs	r3, #0
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80044a2:	2101      	movs	r1, #1
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f92d 	bl	8004704 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	080115a0 	.word	0x080115a0
 80044bc:	08011704 	.word	0x08011704
 80044c0:	080115f0 	.word	0x080115f0
 80044c4:	08011714 	.word	0x08011714

080044c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80044c8:	b5b0      	push	{r4, r5, r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af04      	add	r7, sp, #16
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3308      	adds	r3, #8
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d02d      	beq.n	800453e <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <netif_do_set_netmask+0x26>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	e000      	b.n	80044f0 <netif_do_set_netmask+0x28>
 80044ee:	2300      	movs	r3, #0
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80044fa:	4618      	mov	r0, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004502:	461c      	mov	r4, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3308      	adds	r3, #8
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	461d      	mov	r5, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3308      	adds	r3, #8
 8004510:	3301      	adds	r3, #1
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3308      	adds	r3, #8
 800451a:	3302      	adds	r3, #2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3308      	adds	r3, #8
 8004524:	3303      	adds	r3, #3
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	9302      	str	r3, [sp, #8]
 800452a:	9101      	str	r1, [sp, #4]
 800452c:	9200      	str	r2, [sp, #0]
 800452e:	462b      	mov	r3, r5
 8004530:	4622      	mov	r2, r4
 8004532:	4601      	mov	r1, r0
 8004534:	4804      	ldr	r0, [pc, #16]	; (8004548 <netif_do_set_netmask+0x80>)
 8004536:	f00b fe23 	bl	8010180 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bdb0      	pop	{r4, r5, r7, pc}
 8004548:	08011764 	.word	0x08011764

0800454c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800454c:	b5b0      	push	{r4, r5, r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af04      	add	r7, sp, #16
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	330c      	adds	r3, #12
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d02d      	beq.n	80045c2 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <netif_do_set_gw+0x26>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	e000      	b.n	8004574 <netif_do_set_gw+0x28>
 8004572:	2300      	movs	r3, #0
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800457e:	4618      	mov	r0, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004586:	461c      	mov	r4, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	330c      	adds	r3, #12
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461d      	mov	r5, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	330c      	adds	r3, #12
 8004594:	3301      	adds	r3, #1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	330c      	adds	r3, #12
 800459e:	3302      	adds	r3, #2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	330c      	adds	r3, #12
 80045a8:	3303      	adds	r3, #3
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	9302      	str	r3, [sp, #8]
 80045ae:	9101      	str	r1, [sp, #4]
 80045b0:	9200      	str	r2, [sp, #0]
 80045b2:	462b      	mov	r3, r5
 80045b4:	4622      	mov	r2, r4
 80045b6:	4601      	mov	r1, r0
 80045b8:	4804      	ldr	r0, [pc, #16]	; (80045cc <netif_do_set_gw+0x80>)
 80045ba:	f00b fde1 	bl	8010180 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	080117c4 	.word	0x080117c4

080045d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <netif_set_addr+0x90>)
 80045ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <netif_set_addr+0x90>)
 80045f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004600:	4b17      	ldr	r3, [pc, #92]	; (8004660 <netif_set_addr+0x90>)
 8004602:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <netif_set_addr+0x42>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <netif_set_addr+0x46>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <netif_set_addr+0x48>
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  if (remove) {
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	461a      	mov	r2, r3
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff feff 	bl	800442c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff ff48 	bl	80044c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff85 	bl	800454c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	461a      	mov	r2, r3
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff feeb 	bl	800442c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004656:	bf00      	nop
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	08015d18 	.word	0x08015d18

08004664 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800466c:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <netif_set_default+0x40>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <netif_set_default+0x1e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800467e:	4619      	mov	r1, r3
 8004680:	e000      	b.n	8004684 <netif_set_default+0x20>
 8004682:	2127      	movs	r1, #39	; 0x27
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <netif_set_default+0x2e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004690:	e000      	b.n	8004694 <netif_set_default+0x30>
 8004692:	2327      	movs	r3, #39	; 0x27
 8004694:	461a      	mov	r2, r3
 8004696:	4804      	ldr	r0, [pc, #16]	; (80046a8 <netif_set_default+0x44>)
 8004698:	f00b fd72 	bl	8010180 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2000693c 	.word	0x2000693c
 80046a8:	08011838 	.word	0x08011838

080046ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <netif_set_up+0x1e>
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <netif_set_up+0x4c>)
 80046bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <netif_set_up+0x50>)
 80046c2:	480f      	ldr	r0, [pc, #60]	; (8004700 <netif_set_up+0x54>)
 80046c4:	f00b fd5c 	bl	8010180 <iprintf>
 80046c8:	e013      	b.n	80046f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10c      	bne.n	80046f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80046ea:	2103      	movs	r1, #3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f809 	bl	8004704 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	080115a0 	.word	0x080115a0
 80046fc:	08011860 	.word	0x08011860
 8004700:	080115f0 	.word	0x080115f0

08004704 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <netif_issue_reports+0x20>
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <netif_issue_reports+0x74>)
 8004718:	f240 326d 	movw	r2, #877	; 0x36d
 800471c:	4917      	ldr	r1, [pc, #92]	; (800477c <netif_issue_reports+0x78>)
 800471e:	4818      	ldr	r0, [pc, #96]	; (8004780 <netif_issue_reports+0x7c>)
 8004720:	f00b fd2e 	bl	8010180 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01e      	beq.n	8004770 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004738:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800473c:	2b00      	cmp	r3, #0
 800473e:	d017      	beq.n	8004770 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d013      	beq.n	8004772 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f009 fee3 	bl	800e534 <etharp_request>
 800476e:	e000      	b.n	8004772 <netif_issue_reports+0x6e>
    return;
 8004770:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	080115a0 	.word	0x080115a0
 800477c:	0801187c 	.word	0x0801187c
 8004780:	080115f0 	.word	0x080115f0

08004784 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <netif_set_down+0x1e>
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <netif_set_down+0x58>)
 8004794:	f240 329b 	movw	r2, #923	; 0x39b
 8004798:	4911      	ldr	r1, [pc, #68]	; (80047e0 <netif_set_down+0x5c>)
 800479a:	4812      	ldr	r0, [pc, #72]	; (80047e4 <netif_set_down+0x60>)
 800479c:	f00b fcf0 	bl	8010180 <iprintf>
 80047a0:	e019      	b.n	80047d6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f009 f9fb 	bl	800dbcc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	080115a0 	.word	0x080115a0
 80047e0:	080118a0 	.word	0x080118a0
 80047e4:	080115f0 	.word	0x080115f0

080047e8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80047f4:	f06f 030b 	mvn.w	r3, #11
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <netif_get_by_index+0x48>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00c      	b.n	8004836 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004822:	3301      	adds	r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	79fa      	ldrb	r2, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d101      	bne.n	8004830 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	e006      	b.n	800483e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ef      	bne.n	800481c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20006938 	.word	0x20006938

08004850 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <pbuf_pool_is_empty+0x14>)
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20006940 	.word	0x20006940

08004868 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4611      	mov	r1, r2
 8004874:	461a      	mov	r2, r3
 8004876:	460b      	mov	r3, r1
 8004878:	80fb      	strh	r3, [r7, #6]
 800487a:	4613      	mov	r3, r2
 800487c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88ba      	ldrh	r2, [r7, #4]
 8004894:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004896:	8b3b      	ldrh	r3, [r7, #24]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	7f3a      	ldrb	r2, [r7, #28]
 80048a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	73da      	strb	r2, [r3, #15]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	; 0x30
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	4603      	mov	r3, r0
 80048c4:	71fb      	strb	r3, [r7, #7]
 80048c6:	460b      	mov	r3, r1
 80048c8:	80bb      	strh	r3, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	2b41      	cmp	r3, #65	; 0x41
 80048d6:	d00b      	beq.n	80048f0 <pbuf_alloc+0x34>
 80048d8:	2b41      	cmp	r3, #65	; 0x41
 80048da:	dc02      	bgt.n	80048e2 <pbuf_alloc+0x26>
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d007      	beq.n	80048f0 <pbuf_alloc+0x34>
 80048e0:	e0c2      	b.n	8004a68 <pbuf_alloc+0x1ac>
 80048e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80048e6:	d00b      	beq.n	8004900 <pbuf_alloc+0x44>
 80048e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80048ec:	d070      	beq.n	80049d0 <pbuf_alloc+0x114>
 80048ee:	e0bb      	b.n	8004a68 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	88bb      	ldrh	r3, [r7, #4]
 80048f4:	4619      	mov	r1, r3
 80048f6:	2000      	movs	r0, #0
 80048f8:	f000 f8d2 	bl	8004aa0 <pbuf_alloc_reference>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80048fe:	e0bd      	b.n	8004a7c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004908:	88bb      	ldrh	r3, [r7, #4]
 800490a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800490c:	2008      	movs	r0, #8
 800490e:	f7ff fb95 	bl	800403c <memp_malloc>
 8004912:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800491a:	f7ff ff99 	bl	8004850 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8004924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004926:	f000 faa9 	bl	8004e7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	e0a7      	b.n	8004a7e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800492e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004930:	3303      	adds	r3, #3
 8004932:	b29b      	uxth	r3, r3
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	b29b      	uxth	r3, r3
 800493a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800493e:	b29b      	uxth	r3, r3
 8004940:	8b7a      	ldrh	r2, [r7, #26]
 8004942:	4293      	cmp	r3, r2
 8004944:	bf28      	it	cs
 8004946:	4613      	movcs	r3, r2
 8004948:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800494a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494c:	3310      	adds	r3, #16
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4413      	add	r3, r2
 8004952:	3303      	adds	r3, #3
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	4618      	mov	r0, r3
 800495a:	89f9      	ldrh	r1, [r7, #14]
 800495c:	8b7a      	ldrh	r2, [r7, #26]
 800495e:	2300      	movs	r3, #0
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	460b      	mov	r3, r1
 8004968:	4601      	mov	r1, r0
 800496a:	6938      	ldr	r0, [r7, #16]
 800496c:	f7ff ff7c 	bl	8004868 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <pbuf_alloc+0xce>
 800497c:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <pbuf_alloc+0x1cc>)
 800497e:	f240 1201 	movw	r2, #257	; 0x101
 8004982:	4942      	ldr	r1, [pc, #264]	; (8004a8c <pbuf_alloc+0x1d0>)
 8004984:	4842      	ldr	r0, [pc, #264]	; (8004a90 <pbuf_alloc+0x1d4>)
 8004986:	f00b fbfb 	bl	8010180 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800498a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800498c:	3303      	adds	r3, #3
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004996:	d106      	bne.n	80049a6 <pbuf_alloc+0xea>
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <pbuf_alloc+0x1cc>)
 800499a:	f240 1203 	movw	r2, #259	; 0x103
 800499e:	493d      	ldr	r1, [pc, #244]	; (8004a94 <pbuf_alloc+0x1d8>)
 80049a0:	483b      	ldr	r0, [pc, #236]	; (8004a90 <pbuf_alloc+0x1d4>)
 80049a2:	f00b fbed 	bl	8010180 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	e002      	b.n	80049b8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80049bc:	8b7a      	ldrh	r2, [r7, #26]
 80049be:	89fb      	ldrh	r3, [r7, #14]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80049c8:	8b7b      	ldrh	r3, [r7, #26]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d19e      	bne.n	800490c <pbuf_alloc+0x50>
      break;
 80049ce:	e055      	b.n	8004a7c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80049d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049d2:	3303      	adds	r3, #3
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	b29a      	uxth	r2, r3
 80049dc:	88bb      	ldrh	r3, [r7, #4]
 80049de:	3303      	adds	r3, #3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80049ec:	8b3b      	ldrh	r3, [r7, #24]
 80049ee:	3310      	adds	r3, #16
 80049f0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049f2:	8b3a      	ldrh	r2, [r7, #24]
 80049f4:	88bb      	ldrh	r3, [r7, #4]
 80049f6:	3303      	adds	r3, #3
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d306      	bcc.n	8004a0e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004a00:	8afa      	ldrh	r2, [r7, #22]
 8004a02:	88bb      	ldrh	r3, [r7, #4]
 8004a04:	3303      	adds	r3, #3
 8004a06:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d201      	bcs.n	8004a12 <pbuf_alloc+0x156>
        return NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e035      	b.n	8004a7e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004a12:	8afb      	ldrh	r3, [r7, #22]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f9a3 	bl	8003d60 <mem_malloc>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <pbuf_alloc+0x16a>
        return NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e02b      	b.n	8004a7e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004a26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a28:	3310      	adds	r3, #16
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3303      	adds	r3, #3
 8004a30:	f023 0303 	bic.w	r3, r3, #3
 8004a34:	4618      	mov	r0, r3
 8004a36:	88b9      	ldrh	r1, [r7, #4]
 8004a38:	88ba      	ldrh	r2, [r7, #4]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	460b      	mov	r3, r1
 8004a44:	4601      	mov	r1, r0
 8004a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a48:	f7ff ff0e 	bl	8004868 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <pbuf_alloc+0x1be>
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <pbuf_alloc+0x1cc>)
 8004a5a:	f240 1223 	movw	r2, #291	; 0x123
 8004a5e:	490e      	ldr	r1, [pc, #56]	; (8004a98 <pbuf_alloc+0x1dc>)
 8004a60:	480b      	ldr	r0, [pc, #44]	; (8004a90 <pbuf_alloc+0x1d4>)
 8004a62:	f00b fb8d 	bl	8010180 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004a66:	e008      	b.n	8004a7a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <pbuf_alloc+0x1cc>)
 8004a6a:	f240 1227 	movw	r2, #295	; 0x127
 8004a6e:	490b      	ldr	r1, [pc, #44]	; (8004a9c <pbuf_alloc+0x1e0>)
 8004a70:	4807      	ldr	r0, [pc, #28]	; (8004a90 <pbuf_alloc+0x1d4>)
 8004a72:	f00b fb85 	bl	8010180 <iprintf>
      return NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e001      	b.n	8004a7e <pbuf_alloc+0x1c2>
      break;
 8004a7a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08011940 	.word	0x08011940
 8004a8c:	08011970 	.word	0x08011970
 8004a90:	080119a0 	.word	0x080119a0
 8004a94:	080119c8 	.word	0x080119c8
 8004a98:	080119fc 	.word	0x080119fc
 8004a9c:	08011a28 	.word	0x08011a28

08004aa0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
 8004aac:	4613      	mov	r3, r2
 8004aae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004ab0:	883b      	ldrh	r3, [r7, #0]
 8004ab2:	2b41      	cmp	r3, #65	; 0x41
 8004ab4:	d009      	beq.n	8004aca <pbuf_alloc_reference+0x2a>
 8004ab6:	883b      	ldrh	r3, [r7, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d006      	beq.n	8004aca <pbuf_alloc_reference+0x2a>
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <pbuf_alloc_reference+0x5c>)
 8004abe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004ac2:	490f      	ldr	r1, [pc, #60]	; (8004b00 <pbuf_alloc_reference+0x60>)
 8004ac4:	480f      	ldr	r0, [pc, #60]	; (8004b04 <pbuf_alloc_reference+0x64>)
 8004ac6:	f00b fb5b 	bl	8010180 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004aca:	2007      	movs	r0, #7
 8004acc:	f7ff fab6 	bl	800403c <memp_malloc>
 8004ad0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e00b      	b.n	8004af4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004adc:	8879      	ldrh	r1, [r7, #2]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	883b      	ldrh	r3, [r7, #0]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff febb 	bl	8004868 <pbuf_init_alloced_pbuf>
  return p;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	08011940 	.word	0x08011940
 8004b00:	08011a44 	.word	0x08011a44
 8004b04:	080119a0 	.word	0x080119a0

08004b08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	460b      	mov	r3, r1
 8004b16:	81bb      	strh	r3, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004b20:	8a7b      	ldrh	r3, [r7, #18]
 8004b22:	3303      	adds	r3, #3
 8004b24:	f023 0203 	bic.w	r2, r3, #3
 8004b28:	89bb      	ldrh	r3, [r7, #12]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d901      	bls.n	8004b36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e018      	b.n	8004b68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004b3c:	8a7b      	ldrh	r3, [r7, #18]
 8004b3e:	3303      	adds	r3, #3
 8004b40:	f023 0303 	bic.w	r3, r3, #3
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	4413      	add	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e001      	b.n	8004b50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	89b9      	ldrh	r1, [r7, #12]
 8004b54:	89ba      	ldrh	r2, [r7, #12]
 8004b56:	2302      	movs	r3, #2
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	f7ff fe81 	bl	8004868 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004b66:	687b      	ldr	r3, [r7, #4]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <pbuf_realloc+0x20>
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <pbuf_realloc+0xfc>)
 8004b84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004b88:	4939      	ldr	r1, [pc, #228]	; (8004c70 <pbuf_realloc+0x100>)
 8004b8a:	483a      	ldr	r0, [pc, #232]	; (8004c74 <pbuf_realloc+0x104>)
 8004b8c:	f00b faf8 	bl	8010180 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	891b      	ldrh	r3, [r3, #8]
 8004b94:	887a      	ldrh	r2, [r7, #2]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d264      	bcs.n	8004c64 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	891a      	ldrh	r2, [r3, #8]
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	817b      	strh	r3, [r7, #10]
  q = p;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004bac:	e018      	b.n	8004be0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	897a      	ldrh	r2, [r7, #10]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	891a      	ldrh	r2, [r3, #8]
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <pbuf_realloc+0x70>
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <pbuf_realloc+0xfc>)
 8004bd4:	f240 12af 	movw	r2, #431	; 0x1af
 8004bd8:	4927      	ldr	r1, [pc, #156]	; (8004c78 <pbuf_realloc+0x108>)
 8004bda:	4826      	ldr	r0, [pc, #152]	; (8004c74 <pbuf_realloc+0x104>)
 8004bdc:	f00b fad0 	bl	8010180 <iprintf>
  while (rem_len > q->len) {
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	895b      	ldrh	r3, [r3, #10]
 8004be4:	897a      	ldrh	r2, [r7, #10]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d8e1      	bhi.n	8004bae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	7b1b      	ldrb	r3, [r3, #12]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d122      	bne.n	8004c3c <pbuf_realloc+0xcc>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	897a      	ldrh	r2, [r7, #10]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d01d      	beq.n	8004c3c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	7b5b      	ldrb	r3, [r3, #13]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d117      	bne.n	8004c3c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	897b      	ldrh	r3, [r7, #10]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7fe ffa1 	bl	8003b68 <mem_trim>
 8004c26:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <pbuf_realloc+0xcc>
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <pbuf_realloc+0xfc>)
 8004c30:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004c34:	4911      	ldr	r1, [pc, #68]	; (8004c7c <pbuf_realloc+0x10c>)
 8004c36:	480f      	ldr	r0, [pc, #60]	; (8004c74 <pbuf_realloc+0x104>)
 8004c38:	f00b faa2 	bl	8010180 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	897a      	ldrh	r2, [r7, #10]
 8004c40:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	895a      	ldrh	r2, [r3, #10]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f910 	bl	8004e7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e000      	b.n	8004c66 <pbuf_realloc+0xf6>
    return;
 8004c64:	bf00      	nop

}
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	08011940 	.word	0x08011940
 8004c70:	08011a58 	.word	0x08011a58
 8004c74:	080119a0 	.word	0x080119a0
 8004c78:	08011a70 	.word	0x08011a70
 8004c7c:	08011a88 	.word	0x08011a88

08004c80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <pbuf_add_header_impl+0x22>
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <pbuf_add_header_impl+0xc4>)
 8004c96:	f240 12df 	movw	r2, #479	; 0x1df
 8004c9a:	492b      	ldr	r1, [pc, #172]	; (8004d48 <pbuf_add_header_impl+0xc8>)
 8004c9c:	482b      	ldr	r0, [pc, #172]	; (8004d4c <pbuf_add_header_impl+0xcc>)
 8004c9e:	f00b fa6f 	bl	8010180 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <pbuf_add_header_impl+0x30>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d301      	bcc.n	8004cb4 <pbuf_add_header_impl+0x34>
    return 1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e043      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <pbuf_add_header_impl+0x3e>
    return 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e03e      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	891a      	ldrh	r2, [r3, #8]
 8004cc6:	8a7b      	ldrh	r3, [r7, #18]
 8004cc8:	4413      	add	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8a7a      	ldrh	r2, [r7, #18]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d901      	bls.n	8004cd6 <pbuf_add_header_impl+0x56>
    return 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e032      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	7b1b      	ldrb	r3, [r3, #12]
 8004cda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004cdc:	8a3b      	ldrh	r3, [r7, #16]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	425b      	negs	r3, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d20d      	bcs.n	8004d18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e01d      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e001      	b.n	8004d18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e011      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	895a      	ldrh	r2, [r3, #10]
 8004d22:	8a7b      	ldrh	r3, [r7, #18]
 8004d24:	4413      	add	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	891a      	ldrh	r2, [r3, #8]
 8004d30:	8a7b      	ldrh	r3, [r7, #18]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	811a      	strh	r2, [r3, #8]


  return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	08011940 	.word	0x08011940
 8004d48:	08011aa4 	.word	0x08011aa4
 8004d4c:	080119a0 	.word	0x080119a0

08004d50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff8e 	bl	8004c80 <pbuf_add_header_impl>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <pbuf_remove_header+0x1e>
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <pbuf_remove_header+0x94>)
 8004d82:	f240 224b 	movw	r2, #587	; 0x24b
 8004d86:	4920      	ldr	r1, [pc, #128]	; (8004e08 <pbuf_remove_header+0x98>)
 8004d88:	4820      	ldr	r0, [pc, #128]	; (8004e0c <pbuf_remove_header+0x9c>)
 8004d8a:	f00b f9f9 	bl	8010180 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <pbuf_remove_header+0x2c>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d301      	bcc.n	8004da0 <pbuf_remove_header+0x30>
    return 1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e02c      	b.n	8004dfa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <pbuf_remove_header+0x3a>
    return 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e027      	b.n	8004dfa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	895b      	ldrh	r3, [r3, #10]
 8004db2:	89fa      	ldrh	r2, [r7, #14]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d908      	bls.n	8004dca <pbuf_remove_header+0x5a>
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <pbuf_remove_header+0x94>)
 8004dba:	f240 2255 	movw	r2, #597	; 0x255
 8004dbe:	4914      	ldr	r1, [pc, #80]	; (8004e10 <pbuf_remove_header+0xa0>)
 8004dc0:	4812      	ldr	r0, [pc, #72]	; (8004e0c <pbuf_remove_header+0x9c>)
 8004dc2:	f00b f9dd 	bl	8010180 <iprintf>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e017      	b.n	8004dfa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	895a      	ldrh	r2, [r3, #10]
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	891a      	ldrh	r2, [r3, #8]
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	08011940 	.word	0x08011940
 8004e08:	08011aa4 	.word	0x08011aa4
 8004e0c:	080119a0 	.word	0x080119a0
 8004e10:	08011ab0 	.word	0x08011ab0

08004e14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da08      	bge.n	8004e3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004e2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e30:	425b      	negs	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff9b 	bl	8004d70 <pbuf_remove_header>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	e007      	b.n	8004e4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004e3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e42:	787a      	ldrb	r2, [r7, #1]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff1a 	bl	8004c80 <pbuf_add_header_impl>
 8004e4c:	4603      	mov	r3, r0
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ffd2 	bl	8004e14 <pbuf_header_impl>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <pbuf_free+0x22>
 8004e90:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <pbuf_free+0xf8>)
 8004e92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004e96:	4938      	ldr	r1, [pc, #224]	; (8004f78 <pbuf_free+0xfc>)
 8004e98:	4838      	ldr	r0, [pc, #224]	; (8004f7c <pbuf_free+0x100>)
 8004e9a:	f00b f971 	bl	8010180 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e063      	b.n	8004f6a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004ea6:	e05c      	b.n	8004f62 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7b9b      	ldrb	r3, [r3, #14]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <pbuf_free+0x42>
 8004eb0:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <pbuf_free+0xf8>)
 8004eb2:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004eb6:	4932      	ldr	r1, [pc, #200]	; (8004f80 <pbuf_free+0x104>)
 8004eb8:	4830      	ldr	r0, [pc, #192]	; (8004f7c <pbuf_free+0x100>)
 8004eba:	f00b f961 	bl	8010180 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7b9b      	ldrb	r3, [r3, #14]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	739a      	strb	r2, [r3, #14]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7b9b      	ldrb	r3, [r3, #14]
 8004ece:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004ed0:	7dbb      	ldrb	r3, [r7, #22]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d143      	bne.n	8004f5e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7b1b      	ldrb	r3, [r3, #12]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7b5b      	ldrb	r3, [r3, #13]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <pbuf_free+0x90>
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <pbuf_free+0xf8>)
 8004f00:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004f04:	491f      	ldr	r1, [pc, #124]	; (8004f84 <pbuf_free+0x108>)
 8004f06:	481d      	ldr	r0, [pc, #116]	; (8004f7c <pbuf_free+0x100>)
 8004f08:	f00b f93a 	bl	8010180 <iprintf>
        pc->custom_free_function(p);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	e01d      	b.n	8004f52 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d104      	bne.n	8004f26 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	2008      	movs	r0, #8
 8004f20:	f7ff f8d8 	bl	80040d4 <memp_free>
 8004f24:	e015      	b.n	8004f52 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d104      	bne.n	8004f36 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	2007      	movs	r0, #7
 8004f30:	f7ff f8d0 	bl	80040d4 <memp_free>
 8004f34:	e00d      	b.n	8004f52 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <pbuf_free+0xc8>
          mem_free(p);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fe fda9 	bl	8003a94 <mem_free>
 8004f42:	e006      	b.n	8004f52 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <pbuf_free+0xf8>)
 8004f46:	f240 320f 	movw	r2, #783	; 0x30f
 8004f4a:	490f      	ldr	r1, [pc, #60]	; (8004f88 <pbuf_free+0x10c>)
 8004f4c:	480b      	ldr	r0, [pc, #44]	; (8004f7c <pbuf_free+0x100>)
 8004f4e:	f00b f917 	bl	8010180 <iprintf>
        }
      }
      count++;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	3301      	adds	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e001      	b.n	8004f62 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d19f      	bne.n	8004ea8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	08011940 	.word	0x08011940
 8004f78:	08011aa4 	.word	0x08011aa4
 8004f7c:	080119a0 	.word	0x080119a0
 8004f80:	08011ad0 	.word	0x08011ad0
 8004f84:	08011ae8 	.word	0x08011ae8
 8004f88:	08011b0c 	.word	0x08011b0c

08004f8c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f98:	e005      	b.n	8004fa6 <pbuf_clen+0x1a>
    ++len;
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f6      	bne.n	8004f9a <pbuf_clen+0xe>
  }
  return len;
 8004fac:	89fb      	ldrh	r3, [r7, #14]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7b9b      	ldrb	r3, [r3, #14]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7b9b      	ldrb	r3, [r3, #14]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <pbuf_ref+0x30>
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <pbuf_ref+0x38>)
 8004fe0:	f240 3242 	movw	r2, #834	; 0x342
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <pbuf_ref+0x3c>)
 8004fe6:	4805      	ldr	r0, [pc, #20]	; (8004ffc <pbuf_ref+0x40>)
 8004fe8:	f00b f8ca 	bl	8010180 <iprintf>
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08011940 	.word	0x08011940
 8004ff8:	08011b20 	.word	0x08011b20
 8004ffc:	080119a0 	.word	0x080119a0

08005000 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <pbuf_cat+0x16>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <pbuf_cat+0x26>
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <pbuf_cat+0x98>)
 8005018:	f240 325a 	movw	r2, #858	; 0x35a
 800501c:	491f      	ldr	r1, [pc, #124]	; (800509c <pbuf_cat+0x9c>)
 800501e:	4820      	ldr	r0, [pc, #128]	; (80050a0 <pbuf_cat+0xa0>)
 8005020:	f00b f8ae 	bl	8010180 <iprintf>
 8005024:	e034      	b.n	8005090 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e00a      	b.n	8005042 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	891a      	ldrh	r2, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	891b      	ldrh	r3, [r3, #8]
 8005034:	4413      	add	r3, r2
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	891a      	ldrh	r2, [r3, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	895b      	ldrh	r3, [r3, #10]
 8005052:	429a      	cmp	r2, r3
 8005054:	d006      	beq.n	8005064 <pbuf_cat+0x64>
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <pbuf_cat+0x98>)
 8005058:	f240 3262 	movw	r2, #866	; 0x362
 800505c:	4911      	ldr	r1, [pc, #68]	; (80050a4 <pbuf_cat+0xa4>)
 800505e:	4810      	ldr	r0, [pc, #64]	; (80050a0 <pbuf_cat+0xa0>)
 8005060:	f00b f88e 	bl	8010180 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <pbuf_cat+0x7a>
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <pbuf_cat+0x98>)
 800506e:	f240 3263 	movw	r2, #867	; 0x363
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <pbuf_cat+0xa8>)
 8005074:	480a      	ldr	r0, [pc, #40]	; (80050a0 <pbuf_cat+0xa0>)
 8005076:	f00b f883 	bl	8010180 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	891a      	ldrh	r2, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	891b      	ldrh	r3, [r3, #8]
 8005082:	4413      	add	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	08011940 	.word	0x08011940
 800509c:	08011b34 	.word	0x08011b34
 80050a0:	080119a0 	.word	0x080119a0
 80050a4:	08011b6c 	.word	0x08011b6c
 80050a8:	08011b9c 	.word	0x08011b9c

080050ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ffa1 	bl	8005000 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80050be:	6838      	ldr	r0, [r7, #0]
 80050c0:	f7ff ff7c 	bl	8004fbc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <pbuf_copy+0x2a>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <pbuf_copy+0x2a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	891a      	ldrh	r2, [r3, #8]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	891b      	ldrh	r3, [r3, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d209      	bcs.n	800510a <pbuf_copy+0x3e>
 80050f6:	4b57      	ldr	r3, [pc, #348]	; (8005254 <pbuf_copy+0x188>)
 80050f8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80050fc:	4956      	ldr	r1, [pc, #344]	; (8005258 <pbuf_copy+0x18c>)
 80050fe:	4857      	ldr	r0, [pc, #348]	; (800525c <pbuf_copy+0x190>)
 8005100:	f00b f83e 	bl	8010180 <iprintf>
 8005104:	f06f 030f 	mvn.w	r3, #15
 8005108:	e09f      	b.n	800524a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	895b      	ldrh	r3, [r3, #10]
 800510e:	461a      	mov	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	895b      	ldrh	r3, [r3, #10]
 8005118:	4619      	mov	r1, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1acb      	subs	r3, r1, r3
 800511e:	429a      	cmp	r2, r3
 8005120:	d306      	bcc.n	8005130 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	895b      	ldrh	r3, [r3, #10]
 8005126:	461a      	mov	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e005      	b.n	800513c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	895b      	ldrh	r3, [r3, #10]
 8005134:	461a      	mov	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	18d0      	adds	r0, r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4619      	mov	r1, r3
 8005150:	f00b f803 	bl	801015a <memcpy>
    offset_to += len;
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	461a      	mov	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4293      	cmp	r3, r2
 800516e:	d906      	bls.n	800517e <pbuf_copy+0xb2>
 8005170:	4b38      	ldr	r3, [pc, #224]	; (8005254 <pbuf_copy+0x188>)
 8005172:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005176:	493a      	ldr	r1, [pc, #232]	; (8005260 <pbuf_copy+0x194>)
 8005178:	4838      	ldr	r0, [pc, #224]	; (800525c <pbuf_copy+0x190>)
 800517a:	f00b f801 	bl	8010180 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	895b      	ldrh	r3, [r3, #10]
 8005182:	461a      	mov	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4293      	cmp	r3, r2
 8005188:	d906      	bls.n	8005198 <pbuf_copy+0xcc>
 800518a:	4b32      	ldr	r3, [pc, #200]	; (8005254 <pbuf_copy+0x188>)
 800518c:	f240 32da 	movw	r2, #986	; 0x3da
 8005190:	4934      	ldr	r1, [pc, #208]	; (8005264 <pbuf_copy+0x198>)
 8005192:	4832      	ldr	r0, [pc, #200]	; (800525c <pbuf_copy+0x190>)
 8005194:	f00a fff4 	bl	8010180 <iprintf>
    if (offset_from >= p_from->len) {
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	895b      	ldrh	r3, [r3, #10]
 800519c:	461a      	mov	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d304      	bcc.n	80051ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	895b      	ldrh	r3, [r3, #10]
 80051b2:	461a      	mov	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d114      	bne.n	80051e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <pbuf_copy+0x118>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <pbuf_copy+0x118>
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <pbuf_copy+0x188>)
 80051d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80051d6:	4924      	ldr	r1, [pc, #144]	; (8005268 <pbuf_copy+0x19c>)
 80051d8:	4820      	ldr	r0, [pc, #128]	; (800525c <pbuf_copy+0x190>)
 80051da:	f00a ffd1 	bl	8010180 <iprintf>
 80051de:	f06f 030f 	mvn.w	r3, #15
 80051e2:	e032      	b.n	800524a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d013      	beq.n	8005212 <pbuf_copy+0x146>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	895a      	ldrh	r2, [r3, #10]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	891b      	ldrh	r3, [r3, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d10d      	bne.n	8005212 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <pbuf_copy+0x146>
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <pbuf_copy+0x188>)
 8005200:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8005204:	4919      	ldr	r1, [pc, #100]	; (800526c <pbuf_copy+0x1a0>)
 8005206:	4815      	ldr	r0, [pc, #84]	; (800525c <pbuf_copy+0x190>)
 8005208:	f00a ffba 	bl	8010180 <iprintf>
 800520c:	f06f 0305 	mvn.w	r3, #5
 8005210:	e01b      	b.n	800524a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <pbuf_copy+0x174>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	895a      	ldrh	r2, [r3, #10]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	891b      	ldrh	r3, [r3, #8]
 8005220:	429a      	cmp	r2, r3
 8005222:	d10d      	bne.n	8005240 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <pbuf_copy+0x174>
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <pbuf_copy+0x188>)
 800522e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8005232:	490e      	ldr	r1, [pc, #56]	; (800526c <pbuf_copy+0x1a0>)
 8005234:	4809      	ldr	r0, [pc, #36]	; (800525c <pbuf_copy+0x190>)
 8005236:	f00a ffa3 	bl	8010180 <iprintf>
 800523a:	f06f 0305 	mvn.w	r3, #5
 800523e:	e004      	b.n	800524a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f47f af61 	bne.w	800510a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	08011940 	.word	0x08011940
 8005258:	08011be8 	.word	0x08011be8
 800525c:	080119a0 	.word	0x080119a0
 8005260:	08011c18 	.word	0x08011c18
 8005264:	08011c30 	.word	0x08011c30
 8005268:	08011c4c 	.word	0x08011c4c
 800526c:	08011c5c 	.word	0x08011c5c

08005270 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	460b      	mov	r3, r1
 8005280:	80fb      	strh	r3, [r7, #6]
 8005282:	4613      	mov	r3, r2
 8005284:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d108      	bne.n	80052a6 <pbuf_copy_partial+0x36>
 8005294:	4b2b      	ldr	r3, [pc, #172]	; (8005344 <pbuf_copy_partial+0xd4>)
 8005296:	f240 420a 	movw	r2, #1034	; 0x40a
 800529a:	492b      	ldr	r1, [pc, #172]	; (8005348 <pbuf_copy_partial+0xd8>)
 800529c:	482b      	ldr	r0, [pc, #172]	; (800534c <pbuf_copy_partial+0xdc>)
 800529e:	f00a ff6f 	bl	8010180 <iprintf>
 80052a2:	2300      	movs	r3, #0
 80052a4:	e04a      	b.n	800533c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <pbuf_copy_partial+0x4e>
 80052ac:	4b25      	ldr	r3, [pc, #148]	; (8005344 <pbuf_copy_partial+0xd4>)
 80052ae:	f240 420b 	movw	r2, #1035	; 0x40b
 80052b2:	4927      	ldr	r1, [pc, #156]	; (8005350 <pbuf_copy_partial+0xe0>)
 80052b4:	4825      	ldr	r0, [pc, #148]	; (800534c <pbuf_copy_partial+0xdc>)
 80052b6:	f00a ff63 	bl	8010180 <iprintf>
 80052ba:	2300      	movs	r3, #0
 80052bc:	e03e      	b.n	800533c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e034      	b.n	800532e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80052c4:	88bb      	ldrh	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <pbuf_copy_partial+0x70>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	895b      	ldrh	r3, [r3, #10]
 80052ce:	88ba      	ldrh	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d305      	bcc.n	80052e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	895b      	ldrh	r3, [r3, #10]
 80052d8:	88ba      	ldrh	r2, [r7, #4]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	80bb      	strh	r3, [r7, #4]
 80052de:	e023      	b.n	8005328 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	895a      	ldrh	r2, [r3, #10]
 80052e4:	88bb      	ldrh	r3, [r7, #4]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80052ea:	8b3a      	ldrh	r2, [r7, #24]
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d901      	bls.n	80052f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80052f6:	8b7b      	ldrh	r3, [r7, #26]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	18d0      	adds	r0, r2, r3
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	88bb      	ldrh	r3, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	8b3a      	ldrh	r2, [r7, #24]
 8005306:	4619      	mov	r1, r3
 8005308:	f00a ff27 	bl	801015a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800530c:	8afa      	ldrh	r2, [r7, #22]
 800530e:	8b3b      	ldrh	r3, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005314:	8b7a      	ldrh	r2, [r7, #26]
 8005316:	8b3b      	ldrh	r3, [r7, #24]
 8005318:	4413      	add	r3, r2
 800531a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	8b3b      	ldrh	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <pbuf_copy_partial+0xca>
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1c4      	bne.n	80052c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800533a:	8afb      	ldrh	r3, [r7, #22]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	08011940 	.word	0x08011940
 8005348:	08011c88 	.word	0x08011c88
 800534c:	080119a0 	.word	0x080119a0
 8005350:	08011ca8 	.word	0x08011ca8

08005354 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	603a      	str	r2, [r7, #0]
 800535e:	71fb      	strb	r3, [r7, #7]
 8005360:	460b      	mov	r3, r1
 8005362:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	8919      	ldrh	r1, [r3, #8]
 8005368:	88ba      	ldrh	r2, [r7, #4]
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff faa5 	bl	80048bc <pbuf_alloc>
 8005372:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <pbuf_clone+0x2a>
    return NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	e011      	b.n	80053a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fea3 	bl	80050cc <pbuf_copy>
 8005386:	4603      	mov	r3, r0
 8005388:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800538a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <pbuf_clone+0x4c>
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <pbuf_clone+0x58>)
 8005394:	f240 5224 	movw	r2, #1316	; 0x524
 8005398:	4905      	ldr	r1, [pc, #20]	; (80053b0 <pbuf_clone+0x5c>)
 800539a:	4806      	ldr	r0, [pc, #24]	; (80053b4 <pbuf_clone+0x60>)
 800539c:	f00a fef0 	bl	8010180 <iprintf>
  return q;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08011940 	.word	0x08011940
 80053b0:	08011db4 	.word	0x08011db4
 80053b4:	080119a0 	.word	0x080119a0

080053b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80053bc:	f00a ff70 	bl	80102a0 <rand>
 80053c0:	4603      	mov	r3, r0
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	4b01      	ldr	r3, [pc, #4]	; (80053d8 <tcp_init+0x20>)
 80053d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	2000000a 	.word	0x2000000a

080053dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7d1b      	ldrb	r3, [r3, #20]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <tcp_free+0x1c>
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <tcp_free+0x2c>)
 80053ee:	22d4      	movs	r2, #212	; 0xd4
 80053f0:	4906      	ldr	r1, [pc, #24]	; (800540c <tcp_free+0x30>)
 80053f2:	4807      	ldr	r0, [pc, #28]	; (8005410 <tcp_free+0x34>)
 80053f4:	f00a fec4 	bl	8010180 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	2001      	movs	r0, #1
 80053fc:	f7fe fe6a 	bl	80040d4 <memp_free>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	08011e40 	.word	0x08011e40
 800540c:	08011e70 	.word	0x08011e70
 8005410:	08011e84 	.word	0x08011e84

08005414 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	7d1b      	ldrb	r3, [r3, #20]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <tcp_free_listen+0x1c>
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <tcp_free_listen+0x2c>)
 8005426:	22df      	movs	r2, #223	; 0xdf
 8005428:	4906      	ldr	r1, [pc, #24]	; (8005444 <tcp_free_listen+0x30>)
 800542a:	4807      	ldr	r0, [pc, #28]	; (8005448 <tcp_free_listen+0x34>)
 800542c:	f00a fea8 	bl	8010180 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	2002      	movs	r0, #2
 8005434:	f7fe fe4e 	bl	80040d4 <memp_free>
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	08011e40 	.word	0x08011e40
 8005444:	08011eac 	.word	0x08011eac
 8005448:	08011e84 	.word	0x08011e84

0800544c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005450:	f000 fe98 	bl	8006184 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <tcp_tmr+0x28>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	b2da      	uxtb	r2, r3
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <tcp_tmr+0x28>)
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <tcp_tmr+0x28>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800546c:	f000 fb4c 	bl	8005b08 <tcp_slowtmr>
  }
}
 8005470:	bf00      	nop
 8005472:	bd80      	pop	{r7, pc}
 8005474:	200000cd 	.word	0x200000cd

08005478 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d105      	bne.n	8005494 <tcp_remove_listener+0x1c>
 8005488:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <tcp_remove_listener+0x48>)
 800548a:	22ff      	movs	r2, #255	; 0xff
 800548c:	490d      	ldr	r1, [pc, #52]	; (80054c4 <tcp_remove_listener+0x4c>)
 800548e:	480e      	ldr	r0, [pc, #56]	; (80054c8 <tcp_remove_listener+0x50>)
 8005490:	f00a fe76 	bl	8010180 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e00a      	b.n	80054b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d102      	bne.n	80054aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f1      	bne.n	800549a <tcp_remove_listener+0x22>
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	08011e40 	.word	0x08011e40
 80054c4:	08011ec8 	.word	0x08011ec8
 80054c8:	08011e84 	.word	0x08011e84

080054cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <tcp_listen_closed+0x1c>
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <tcp_listen_closed+0x60>)
 80054dc:	f240 1211 	movw	r2, #273	; 0x111
 80054e0:	4913      	ldr	r1, [pc, #76]	; (8005530 <tcp_listen_closed+0x64>)
 80054e2:	4814      	ldr	r0, [pc, #80]	; (8005534 <tcp_listen_closed+0x68>)
 80054e4:	f00a fe4c 	bl	8010180 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	7d1b      	ldrb	r3, [r3, #20]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d006      	beq.n	80054fe <tcp_listen_closed+0x32>
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <tcp_listen_closed+0x60>)
 80054f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80054f6:	4910      	ldr	r1, [pc, #64]	; (8005538 <tcp_listen_closed+0x6c>)
 80054f8:	480e      	ldr	r0, [pc, #56]	; (8005534 <tcp_listen_closed+0x68>)
 80054fa:	f00a fe41 	bl	8010180 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054fe:	2301      	movs	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e00b      	b.n	800551c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005504:	4a0d      	ldr	r2, [pc, #52]	; (800553c <tcp_listen_closed+0x70>)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ffb1 	bl	8005478 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d9f0      	bls.n	8005504 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	08011e40 	.word	0x08011e40
 8005530:	08011ef0 	.word	0x08011ef0
 8005534:	08011e84 	.word	0x08011e84
 8005538:	08011efc 	.word	0x08011efc
 800553c:	08015ccc 	.word	0x08015ccc

08005540 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005540:	b5b0      	push	{r4, r5, r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af04      	add	r7, sp, #16
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <tcp_close_shutdown+0x20>
 8005552:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <tcp_close_shutdown+0x198>)
 8005554:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005558:	4960      	ldr	r1, [pc, #384]	; (80056dc <tcp_close_shutdown+0x19c>)
 800555a:	4861      	ldr	r0, [pc, #388]	; (80056e0 <tcp_close_shutdown+0x1a0>)
 800555c:	f00a fe10 	bl	8010180 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d066      	beq.n	8005634 <tcp_close_shutdown+0xf4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7d1b      	ldrb	r3, [r3, #20]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <tcp_close_shutdown+0x36>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7d1b      	ldrb	r3, [r3, #20]
 8005572:	2b07      	cmp	r3, #7
 8005574:	d15e      	bne.n	8005634 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <tcp_close_shutdown+0x48>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005586:	d055      	beq.n	8005634 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8b5b      	ldrh	r3, [r3, #26]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <tcp_close_shutdown+0x62>
 8005594:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <tcp_close_shutdown+0x198>)
 8005596:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800559a:	4952      	ldr	r1, [pc, #328]	; (80056e4 <tcp_close_shutdown+0x1a4>)
 800559c:	4850      	ldr	r0, [pc, #320]	; (80056e0 <tcp_close_shutdown+0x1a0>)
 800559e:	f00a fdef 	bl	8010180 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80055aa:	687d      	ldr	r5, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	8ad2      	ldrh	r2, [r2, #22]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	8b09      	ldrh	r1, [r1, #24]
 80055b8:	9102      	str	r1, [sp, #8]
 80055ba:	9201      	str	r2, [sp, #4]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462b      	mov	r3, r5
 80055c0:	4622      	mov	r2, r4
 80055c2:	4601      	mov	r1, r0
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f004 feab 	bl	800a320 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 f8ba 	bl	8006744 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <tcp_close_shutdown+0x1a8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d105      	bne.n	80055e6 <tcp_close_shutdown+0xa6>
 80055da:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <tcp_close_shutdown+0x1a8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4a41      	ldr	r2, [pc, #260]	; (80056e8 <tcp_close_shutdown+0x1a8>)
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e013      	b.n	800560e <tcp_close_shutdown+0xce>
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <tcp_close_shutdown+0x1a8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e00c      	b.n	8005608 <tcp_close_shutdown+0xc8>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d104      	bne.n	8005602 <tcp_close_shutdown+0xc2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e005      	b.n	800560e <tcp_close_shutdown+0xce>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ef      	bne.n	80055ee <tcp_close_shutdown+0xae>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <tcp_close_shutdown+0x1ac>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800561a:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <tcp_close_shutdown+0x1b0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d102      	bne.n	800562a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005624:	f003 fd54 	bl	80090d0 <tcp_trigger_input_pcb_close>
 8005628:	e002      	b.n	8005630 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fed6 	bl	80053dc <tcp_free>
      }
      return ERR_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e04d      	b.n	80056d0 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7d1b      	ldrb	r3, [r3, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d02d      	beq.n	8005698 <tcp_close_shutdown+0x158>
 800563c:	2b02      	cmp	r3, #2
 800563e:	d036      	beq.n	80056ae <tcp_close_shutdown+0x16e>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13f      	bne.n	80056c4 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8adb      	ldrh	r3, [r3, #22]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d021      	beq.n	8005690 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800564c:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <tcp_close_shutdown+0x1b4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d105      	bne.n	8005662 <tcp_close_shutdown+0x122>
 8005656:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <tcp_close_shutdown+0x1b4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <tcp_close_shutdown+0x1b4>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	e013      	b.n	800568a <tcp_close_shutdown+0x14a>
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <tcp_close_shutdown+0x1b4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	e00c      	b.n	8005684 <tcp_close_shutdown+0x144>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d104      	bne.n	800567e <tcp_close_shutdown+0x13e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e005      	b.n	800568a <tcp_close_shutdown+0x14a>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1ef      	bne.n	800566a <tcp_close_shutdown+0x12a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fea3 	bl	80053dc <tcp_free>
      break;
 8005696:	e01a      	b.n	80056ce <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff17 	bl	80054cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4815      	ldr	r0, [pc, #84]	; (80056f8 <tcp_close_shutdown+0x1b8>)
 80056a2:	f001 f89f 	bl	80067e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff feb4 	bl	8005414 <tcp_free_listen>
      break;
 80056ac:	e00f      	b.n	80056ce <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	480d      	ldr	r0, [pc, #52]	; (80056e8 <tcp_close_shutdown+0x1a8>)
 80056b2:	f001 f897 	bl	80067e4 <tcp_pcb_remove>
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <tcp_close_shutdown+0x1ac>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe8d 	bl	80053dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80056c2:	e004      	b.n	80056ce <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f819 	bl	80056fc <tcp_close_shutdown_fin>
 80056ca:	4603      	mov	r3, r0
 80056cc:	e000      	b.n	80056d0 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bdb0      	pop	{r4, r5, r7, pc}
 80056d8:	08011e40 	.word	0x08011e40
 80056dc:	08011f14 	.word	0x08011f14
 80056e0:	08011e84 	.word	0x08011e84
 80056e4:	08011f34 	.word	0x08011f34
 80056e8:	20006948 	.word	0x20006948
 80056ec:	20006944 	.word	0x20006944
 80056f0:	2000695c 	.word	0x2000695c
 80056f4:	20006954 	.word	0x20006954
 80056f8:	20006950 	.word	0x20006950

080056fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <tcp_close_shutdown_fin+0x1c>
 800570a:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <tcp_close_shutdown_fin+0xc0>)
 800570c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005710:	492b      	ldr	r1, [pc, #172]	; (80057c0 <tcp_close_shutdown_fin+0xc4>)
 8005712:	482c      	ldr	r0, [pc, #176]	; (80057c4 <tcp_close_shutdown_fin+0xc8>)
 8005714:	f00a fd34 	bl	8010180 <iprintf>

  switch (pcb->state) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7d1b      	ldrb	r3, [r3, #20]
 800571c:	2b04      	cmp	r3, #4
 800571e:	d010      	beq.n	8005742 <tcp_close_shutdown_fin+0x46>
 8005720:	2b07      	cmp	r3, #7
 8005722:	d01b      	beq.n	800575c <tcp_close_shutdown_fin+0x60>
 8005724:	2b03      	cmp	r3, #3
 8005726:	d126      	bne.n	8005776 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f003 fee9 	bl	8009500 <tcp_send_fin>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11f      	bne.n	800577a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2205      	movs	r2, #5
 800573e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005740:	e01b      	b.n	800577a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f003 fedc 	bl	8009500 <tcp_send_fin>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800574c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d114      	bne.n	800577e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2205      	movs	r2, #5
 8005758:	751a      	strb	r2, [r3, #20]
      }
      break;
 800575a:	e010      	b.n	800577e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f003 fecf 	bl	8009500 <tcp_send_fin>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2209      	movs	r2, #9
 8005772:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005774:	e005      	b.n	8005782 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e01c      	b.n	80057b4 <tcp_close_shutdown_fin+0xb8>
      break;
 800577a:	bf00      	nop
 800577c:	e002      	b.n	8005784 <tcp_close_shutdown_fin+0x88>
      break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <tcp_close_shutdown_fin+0x88>
      break;
 8005782:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f003 fff5 	bl	800977c <tcp_output>
 8005792:	e00d      	b.n	80057b0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d108      	bne.n	80057b0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8b5b      	ldrh	r3, [r3, #26]
 80057a2:	f043 0308 	orr.w	r3, r3, #8
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e001      	b.n	80057b4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80057b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	08011e40 	.word	0x08011e40
 80057c0:	08011ef0 	.word	0x08011ef0
 80057c4:	08011e84 	.word	0x08011e84

080057c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <tcp_close+0x22>
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <tcp_close+0x4c>)
 80057d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80057dc:	490e      	ldr	r1, [pc, #56]	; (8005818 <tcp_close+0x50>)
 80057de:	480f      	ldr	r0, [pc, #60]	; (800581c <tcp_close+0x54>)
 80057e0:	f00a fcce 	bl	8010180 <iprintf>
 80057e4:	f06f 030f 	mvn.w	r3, #15
 80057e8:	e00f      	b.n	800580a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7d1b      	ldrb	r3, [r3, #20]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d006      	beq.n	8005800 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8b5b      	ldrh	r3, [r3, #26]
 80057f6:	f043 0310 	orr.w	r3, r3, #16
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fe9c 	bl	8005540 <tcp_close_shutdown>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	08011e40 	.word	0x08011e40
 8005818:	08011f50 	.word	0x08011f50
 800581c:	08011e84 	.word	0x08011e84

08005820 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af04      	add	r7, sp, #16
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <tcp_abandon+0x20>
 8005830:	4b52      	ldr	r3, [pc, #328]	; (800597c <tcp_abandon+0x15c>)
 8005832:	f240 223d 	movw	r2, #573	; 0x23d
 8005836:	4952      	ldr	r1, [pc, #328]	; (8005980 <tcp_abandon+0x160>)
 8005838:	4852      	ldr	r0, [pc, #328]	; (8005984 <tcp_abandon+0x164>)
 800583a:	f00a fca1 	bl	8010180 <iprintf>
 800583e:	e099      	b.n	8005974 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7d1b      	ldrb	r3, [r3, #20]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <tcp_abandon+0x36>
 8005848:	4b4c      	ldr	r3, [pc, #304]	; (800597c <tcp_abandon+0x15c>)
 800584a:	f240 2241 	movw	r2, #577	; 0x241
 800584e:	494e      	ldr	r1, [pc, #312]	; (8005988 <tcp_abandon+0x168>)
 8005850:	484c      	ldr	r0, [pc, #304]	; (8005984 <tcp_abandon+0x164>)
 8005852:	f00a fc95 	bl	8010180 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	7d1b      	ldrb	r3, [r3, #20]
 800585a:	2b0a      	cmp	r3, #10
 800585c:	d107      	bne.n	800586e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	484a      	ldr	r0, [pc, #296]	; (800598c <tcp_abandon+0x16c>)
 8005862:	f000 ffbf 	bl	80067e4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fdb8 	bl	80053dc <tcp_free>
 800586c:	e082      	b.n	8005974 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7d1b      	ldrb	r3, [r3, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d126      	bne.n	80058e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8adb      	ldrh	r3, [r3, #22]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02e      	beq.n	80058fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80058a0:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <tcp_abandon+0x170>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d105      	bne.n	80058b6 <tcp_abandon+0x96>
 80058aa:	4b39      	ldr	r3, [pc, #228]	; (8005990 <tcp_abandon+0x170>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a37      	ldr	r2, [pc, #220]	; (8005990 <tcp_abandon+0x170>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e013      	b.n	80058de <tcp_abandon+0xbe>
 80058b6:	4b36      	ldr	r3, [pc, #216]	; (8005990 <tcp_abandon+0x170>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e00c      	b.n	80058d8 <tcp_abandon+0xb8>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d104      	bne.n	80058d2 <tcp_abandon+0xb2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e005      	b.n	80058de <tcp_abandon+0xbe>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1ef      	bne.n	80058be <tcp_abandon+0x9e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e00b      	b.n	80058fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8adb      	ldrh	r3, [r3, #22]
 80058ee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4828      	ldr	r0, [pc, #160]	; (8005994 <tcp_abandon+0x174>)
 80058f4:	f000 ff76 	bl	80067e4 <tcp_pcb_remove>
 80058f8:	4b27      	ldr	r3, [pc, #156]	; (8005998 <tcp_abandon+0x178>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fd1a 	bl	8006344 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fd11 	bl	8006344 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fd08 	bl	8006344 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	8b12      	ldrh	r2, [r2, #24]
 8005944:	9202      	str	r2, [sp, #8]
 8005946:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005948:	9201      	str	r2, [sp, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	460b      	mov	r3, r1
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f004 fce4 	bl	800a320 <tcp_rst>
    }
    last_state = pcb->state;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7d1b      	ldrb	r3, [r3, #20]
 800595c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fd3c 	bl	80053dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <tcp_abandon+0x154>
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f06f 010c 	mvn.w	r1, #12
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	4798      	blx	r3
  }
}
 8005974:	3728      	adds	r7, #40	; 0x28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08011e40 	.word	0x08011e40
 8005980:	08011f84 	.word	0x08011f84
 8005984:	08011e84 	.word	0x08011e84
 8005988:	08011fa0 	.word	0x08011fa0
 800598c:	20006958 	.word	0x20006958
 8005990:	20006954 	.word	0x20006954
 8005994:	20006948 	.word	0x20006948
 8005998:	20006944 	.word	0x20006944

0800599c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff3a 	bl	8005820 <tcp_abandon>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <tcp_update_rcv_ann_wnd+0x1c>
 80059c2:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <tcp_update_rcv_ann_wnd+0xa4>)
 80059c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80059c8:	4924      	ldr	r1, [pc, #144]	; (8005a5c <tcp_update_rcv_ann_wnd+0xa8>)
 80059ca:	4825      	ldr	r0, [pc, #148]	; (8005a60 <tcp_update_rcv_ann_wnd+0xac>)
 80059cc:	f00a fbd8 	bl	8010180 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80059d8:	4413      	add	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80059e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80059e8:	bf28      	it	cs
 80059ea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80059ee:	b292      	uxth	r2, r2
 80059f0:	4413      	add	r3, r2
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db08      	blt.n	8005a0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	e020      	b.n	8005a4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dd03      	ble.n	8005a22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a20:	e014      	b.n	8005a4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d306      	bcc.n	8005a44 <tcp_update_rcv_ann_wnd+0x90>
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <tcp_update_rcv_ann_wnd+0xa4>)
 8005a38:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005a3c:	4909      	ldr	r1, [pc, #36]	; (8005a64 <tcp_update_rcv_ann_wnd+0xb0>)
 8005a3e:	4808      	ldr	r0, [pc, #32]	; (8005a60 <tcp_update_rcv_ann_wnd+0xac>)
 8005a40:	f00a fb9e 	bl	8010180 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005a4c:	2300      	movs	r3, #0
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	08011e40 	.word	0x08011e40
 8005a5c:	0801209c 	.word	0x0801209c
 8005a60:	08011e84 	.word	0x08011e84
 8005a64:	080120c0 	.word	0x080120c0

08005a68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <tcp_recved+0x22>
 8005a7a:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <tcp_recved+0x90>)
 8005a7c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005a80:	491e      	ldr	r1, [pc, #120]	; (8005afc <tcp_recved+0x94>)
 8005a82:	481f      	ldr	r0, [pc, #124]	; (8005b00 <tcp_recved+0x98>)
 8005a84:	f00a fb7c 	bl	8010180 <iprintf>
 8005a88:	e032      	b.n	8005af0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7d1b      	ldrb	r3, [r3, #20]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d106      	bne.n	8005aa0 <tcp_recved+0x38>
 8005a92:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <tcp_recved+0x90>)
 8005a94:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005a98:	491a      	ldr	r1, [pc, #104]	; (8005b04 <tcp_recved+0x9c>)
 8005a9a:	4819      	ldr	r0, [pc, #100]	; (8005b00 <tcp_recved+0x98>)
 8005a9c:	f00a fb70 	bl	8010180 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
 8005aac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005ab0:	d804      	bhi.n	8005abc <tcp_recved+0x54>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab6:	89fa      	ldrh	r2, [r7, #14]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d204      	bcs.n	8005ac6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005ac2:	851a      	strh	r2, [r3, #40]	; 0x28
 8005ac4:	e002      	b.n	8005acc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	89fa      	ldrh	r2, [r7, #14]
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff71 	bl	80059b4 <tcp_update_rcv_ann_wnd>
 8005ad2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005ada:	d309      	bcc.n	8005af0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8b5b      	ldrh	r3, [r3, #26]
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f003 fe46 	bl	800977c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	08011e40 	.word	0x08011e40
 8005afc:	080120dc 	.word	0x080120dc
 8005b00:	08011e84 	.word	0x08011e84
 8005b04:	080120f4 	.word	0x080120f4

08005b08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005b08:	b5b0      	push	{r4, r5, r7, lr}
 8005b0a:	b090      	sub	sp, #64	; 0x40
 8005b0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005b14:	4b94      	ldr	r3, [pc, #592]	; (8005d68 <tcp_slowtmr+0x260>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4a93      	ldr	r2, [pc, #588]	; (8005d68 <tcp_slowtmr+0x260>)
 8005b1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005b1e:	4b93      	ldr	r3, [pc, #588]	; (8005d6c <tcp_slowtmr+0x264>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4b91      	ldr	r3, [pc, #580]	; (8005d6c <tcp_slowtmr+0x264>)
 8005b28:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005b2e:	4b90      	ldr	r3, [pc, #576]	; (8005d70 <tcp_slowtmr+0x268>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005b34:	e29f      	b.n	8006076 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	7d1b      	ldrb	r3, [r3, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <tcp_slowtmr+0x44>
 8005b3e:	4b8d      	ldr	r3, [pc, #564]	; (8005d74 <tcp_slowtmr+0x26c>)
 8005b40:	f240 42be 	movw	r2, #1214	; 0x4be
 8005b44:	498c      	ldr	r1, [pc, #560]	; (8005d78 <tcp_slowtmr+0x270>)
 8005b46:	488d      	ldr	r0, [pc, #564]	; (8005d7c <tcp_slowtmr+0x274>)
 8005b48:	f00a fb1a 	bl	8010180 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	7d1b      	ldrb	r3, [r3, #20]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <tcp_slowtmr+0x5a>
 8005b54:	4b87      	ldr	r3, [pc, #540]	; (8005d74 <tcp_slowtmr+0x26c>)
 8005b56:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005b5a:	4989      	ldr	r1, [pc, #548]	; (8005d80 <tcp_slowtmr+0x278>)
 8005b5c:	4887      	ldr	r0, [pc, #540]	; (8005d7c <tcp_slowtmr+0x274>)
 8005b5e:	f00a fb0f 	bl	8010180 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	7d1b      	ldrb	r3, [r3, #20]
 8005b66:	2b0a      	cmp	r3, #10
 8005b68:	d106      	bne.n	8005b78 <tcp_slowtmr+0x70>
 8005b6a:	4b82      	ldr	r3, [pc, #520]	; (8005d74 <tcp_slowtmr+0x26c>)
 8005b6c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005b70:	4984      	ldr	r1, [pc, #528]	; (8005d84 <tcp_slowtmr+0x27c>)
 8005b72:	4882      	ldr	r0, [pc, #520]	; (8005d7c <tcp_slowtmr+0x274>)
 8005b74:	f00a fb04 	bl	8010180 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	7f9a      	ldrb	r2, [r3, #30]
 8005b7c:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <tcp_slowtmr+0x264>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d105      	bne.n	8005b90 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005b8e:	e272      	b.n	8006076 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005b90:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <tcp_slowtmr+0x264>)
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	7d1b      	ldrb	r3, [r3, #20]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d10a      	bne.n	8005bc2 <tcp_slowtmr+0xba>
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d905      	bls.n	8005bc2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8005bc0:	e11e      	b.n	8005e00 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc8:	2b0b      	cmp	r3, #11
 8005bca:	d905      	bls.n	8005bd8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bd6:	e113      	b.n	8005e00 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d075      	beq.n	8005cce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <tcp_slowtmr+0xf0>
 8005bea:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <tcp_slowtmr+0x26c>)
 8005bec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005bf0:	4965      	ldr	r1, [pc, #404]	; (8005d88 <tcp_slowtmr+0x280>)
 8005bf2:	4862      	ldr	r0, [pc, #392]	; (8005d7c <tcp_slowtmr+0x274>)
 8005bf4:	f00a fac4 	bl	8010180 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <tcp_slowtmr+0x106>
 8005c00:	4b5c      	ldr	r3, [pc, #368]	; (8005d74 <tcp_slowtmr+0x26c>)
 8005c02:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005c06:	4961      	ldr	r1, [pc, #388]	; (8005d8c <tcp_slowtmr+0x284>)
 8005c08:	485c      	ldr	r0, [pc, #368]	; (8005d7c <tcp_slowtmr+0x274>)
 8005c0a:	f00a fab9 	bl	8010180 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005c14:	2b0b      	cmp	r3, #11
 8005c16:	d905      	bls.n	8005c24 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c22:	e0ed      	b.n	8005e00 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <tcp_slowtmr+0x288>)
 8005c2e:	5cd3      	ldrb	r3, [r2, r3]
 8005c30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c38:	7c7a      	ldrb	r2, [r7, #17]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d907      	bls.n	8005c4e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c44:	3301      	adds	r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c54:	7c7a      	ldrb	r2, [r7, #17]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	f200 80d2 	bhi.w	8005e00 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c6c:	f004 fc4c 	bl	800a508 <tcp_zero_window_probe>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005c76:	2300      	movs	r3, #0
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	e011      	b.n	8005ca0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c82:	4619      	mov	r1, r3
 8005c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c86:	f003 faef 	bl	8009268 <tcp_split_unsent_seg>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c92:	f003 fd73 	bl	800977c <tcp_output>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 80ac 	beq.w	8005e00 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	f200 80a2 	bhi.w	8005e00 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005ccc:	e098      	b.n	8005e00 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	db0f      	blt.n	8005cf8 <tcp_slowtmr+0x1f0>
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cde:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d008      	beq.n	8005cf8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	b21a      	sxth	r2, r3
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d04:	429a      	cmp	r2, r3
 8005d06:	db7b      	blt.n	8005e00 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0a:	f004 f833 	bl	8009d74 <tcp_rexmit_rto_prepare>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <tcp_slowtmr+0x21c>
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d171      	bne.n	8005e00 <tcp_slowtmr+0x2f8>
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d06d      	beq.n	8005e00 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	7d1b      	ldrb	r3, [r3, #20]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d03a      	beq.n	8005da2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d32:	2b0c      	cmp	r3, #12
 8005d34:	bf28      	it	cs
 8005d36:	230c      	movcs	r3, #12
 8005d38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005d40:	10db      	asrs	r3, r3, #3
 8005d42:	b21b      	sxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005d4c:	4413      	add	r3, r2
 8005d4e:	7efa      	ldrb	r2, [r7, #27]
 8005d50:	4910      	ldr	r1, [pc, #64]	; (8005d94 <tcp_slowtmr+0x28c>)
 8005d52:	5c8a      	ldrb	r2, [r1, r2]
 8005d54:	4093      	lsls	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	dc1a      	bgt.n	8005d98 <tcp_slowtmr+0x290>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	b21a      	sxth	r2, r3
 8005d66:	e019      	b.n	8005d9c <tcp_slowtmr+0x294>
 8005d68:	2000694c 	.word	0x2000694c
 8005d6c:	200000ce 	.word	0x200000ce
 8005d70:	20006948 	.word	0x20006948
 8005d74:	08011e40 	.word	0x08011e40
 8005d78:	08012184 	.word	0x08012184
 8005d7c:	08011e84 	.word	0x08011e84
 8005d80:	080121b0 	.word	0x080121b0
 8005d84:	080121dc 	.word	0x080121dc
 8005d88:	0801220c 	.word	0x0801220c
 8005d8c:	08012240 	.word	0x08012240
 8005d90:	08015cc4 	.word	0x08015cc4
 8005d94:	08015cb4 	.word	0x08015cb4
 8005d98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2200      	movs	r2, #0
 8005da6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bf28      	it	cs
 8005db8:	4613      	movcs	r3, r2
 8005dba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005dbc:	8a7b      	ldrh	r3, [r7, #18]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d206      	bcs.n	8005de8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dfc:	f004 f834 	bl	8009e68 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	7d1b      	ldrb	r3, [r3, #20]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d111      	bne.n	8005e2c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	8b5b      	ldrh	r3, [r3, #26]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e14:	4b9d      	ldr	r3, [pc, #628]	; (800608c <tcp_slowtmr+0x584>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b28      	cmp	r3, #40	; 0x28
 8005e20:	d904      	bls.n	8005e2c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e26:	3301      	adds	r3, #1
 8005e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	7a5b      	ldrb	r3, [r3, #9]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d04c      	beq.n	8005ed2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d003      	beq.n	8005e48 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005e44:	2b07      	cmp	r3, #7
 8005e46:	d144      	bne.n	8005ed2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e48:	4b90      	ldr	r3, [pc, #576]	; (800608c <tcp_slowtmr+0x584>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e58:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005e5c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005e60:	498b      	ldr	r1, [pc, #556]	; (8006090 <tcp_slowtmr+0x588>)
 8005e62:	fba1 1303 	umull	r1, r3, r1, r3
 8005e66:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d90a      	bls.n	8005e82 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e70:	3301      	adds	r3, #1
 8005e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e80:	e027      	b.n	8005ed2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e82:	4b82      	ldr	r3, [pc, #520]	; (800608c <tcp_slowtmr+0x584>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005e98:	4618      	mov	r0, r3
 8005e9a:	4b7e      	ldr	r3, [pc, #504]	; (8006094 <tcp_slowtmr+0x58c>)
 8005e9c:	fb03 f300 	mul.w	r3, r3, r0
 8005ea0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005ea2:	497b      	ldr	r1, [pc, #492]	; (8006090 <tcp_slowtmr+0x588>)
 8005ea4:	fba1 1303 	umull	r1, r3, r1, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d911      	bls.n	8005ed2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eb0:	f004 faea 	bl	800a488 <tcp_keepalive>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005eba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005ec8:	3301      	adds	r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <tcp_slowtmr+0x584>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	1ad2      	subs	r2, r2, r3
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005eea:	4619      	mov	r1, r3
 8005eec:	460b      	mov	r3, r1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	440b      	add	r3, r1
 8005ef2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d302      	bcc.n	8005efe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005efa:	f000 fddd 	bl	8006ab8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d10b      	bne.n	8005f1e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f06:	4b61      	ldr	r3, [pc, #388]	; (800608c <tcp_slowtmr+0x584>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b28      	cmp	r3, #40	; 0x28
 8005f12:	d904      	bls.n	8005f1e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	7d1b      	ldrb	r3, [r3, #20]
 8005f22:	2b09      	cmp	r3, #9
 8005f24:	d10b      	bne.n	8005f3e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f26:	4b59      	ldr	r3, [pc, #356]	; (800608c <tcp_slowtmr+0x584>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2bf0      	cmp	r3, #240	; 0xf0
 8005f32:	d904      	bls.n	8005f3e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d060      	beq.n	8006008 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f50:	f000 fbf8 	bl	8006744 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005f5a:	4b4f      	ldr	r3, [pc, #316]	; (8006098 <tcp_slowtmr+0x590>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d106      	bne.n	8005f72 <tcp_slowtmr+0x46a>
 8005f64:	4b4d      	ldr	r3, [pc, #308]	; (800609c <tcp_slowtmr+0x594>)
 8005f66:	f240 526d 	movw	r2, #1389	; 0x56d
 8005f6a:	494d      	ldr	r1, [pc, #308]	; (80060a0 <tcp_slowtmr+0x598>)
 8005f6c:	484d      	ldr	r0, [pc, #308]	; (80060a4 <tcp_slowtmr+0x59c>)
 8005f6e:	f00a f907 	bl	8010180 <iprintf>
        prev->next = pcb->next;
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e00f      	b.n	8005f9c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <tcp_slowtmr+0x590>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d006      	beq.n	8005f94 <tcp_slowtmr+0x48c>
 8005f86:	4b45      	ldr	r3, [pc, #276]	; (800609c <tcp_slowtmr+0x594>)
 8005f88:	f240 5271 	movw	r2, #1393	; 0x571
 8005f8c:	4946      	ldr	r1, [pc, #280]	; (80060a8 <tcp_slowtmr+0x5a0>)
 8005f8e:	4845      	ldr	r0, [pc, #276]	; (80060a4 <tcp_slowtmr+0x59c>)
 8005f90:	f00a f8f6 	bl	8010180 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <tcp_slowtmr+0x590>)
 8005f9a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d013      	beq.n	8005fcc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005fac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb4:	8ad2      	ldrh	r2, [r2, #22]
 8005fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb8:	8b09      	ldrh	r1, [r1, #24]
 8005fba:	9102      	str	r1, [sp, #8]
 8005fbc:	9201      	str	r2, [sp, #4]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fc8:	f004 f9aa 	bl	800a320 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	7d1b      	ldrb	r3, [r3, #20]
 8005fd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f7ff f9fa 	bl	80053dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005fe8:	4b30      	ldr	r3, [pc, #192]	; (80060ac <tcp_slowtmr+0x5a4>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <tcp_slowtmr+0x4f6>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f06f 010c 	mvn.w	r1, #12
 8005ffa:	68b8      	ldr	r0, [r7, #8]
 8005ffc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005ffe:	4b2b      	ldr	r3, [pc, #172]	; (80060ac <tcp_slowtmr+0x5a4>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d037      	beq.n	8006076 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006006:	e590      	b.n	8005b2a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	7f1b      	ldrb	r3, [r3, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	7f1a      	ldrb	r2, [r3, #28]
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	7f5b      	ldrb	r3, [r3, #29]
 8006026:	429a      	cmp	r2, r3
 8006028:	d325      	bcc.n	8006076 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	2200      	movs	r2, #0
 800602e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006030:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <tcp_slowtmr+0x5a4>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <tcp_slowtmr+0x550>
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	6912      	ldr	r2, [r2, #16]
 800604a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006056:	e002      	b.n	800605e <tcp_slowtmr+0x556>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <tcp_slowtmr+0x5a4>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d000      	beq.n	8006068 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006066:	e560      	b.n	8005b2a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006068:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006072:	f003 fb83 	bl	800977c <tcp_output>
  while (pcb != NULL) {
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	f47f ad5c 	bne.w	8005b36 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <tcp_slowtmr+0x5a8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006088:	e067      	b.n	800615a <tcp_slowtmr+0x652>
 800608a:	bf00      	nop
 800608c:	2000694c 	.word	0x2000694c
 8006090:	10624dd3 	.word	0x10624dd3
 8006094:	000124f8 	.word	0x000124f8
 8006098:	20006948 	.word	0x20006948
 800609c:	08011e40 	.word	0x08011e40
 80060a0:	08012278 	.word	0x08012278
 80060a4:	08011e84 	.word	0x08011e84
 80060a8:	080122a4 	.word	0x080122a4
 80060ac:	20006944 	.word	0x20006944
 80060b0:	20006958 	.word	0x20006958
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	7d1b      	ldrb	r3, [r3, #20]
 80060b8:	2b0a      	cmp	r3, #10
 80060ba:	d006      	beq.n	80060ca <tcp_slowtmr+0x5c2>
 80060bc:	4b2a      	ldr	r3, [pc, #168]	; (8006168 <tcp_slowtmr+0x660>)
 80060be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80060c2:	492a      	ldr	r1, [pc, #168]	; (800616c <tcp_slowtmr+0x664>)
 80060c4:	482a      	ldr	r0, [pc, #168]	; (8006170 <tcp_slowtmr+0x668>)
 80060c6:	f00a f85b 	bl	8010180 <iprintf>
    pcb_remove = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <tcp_slowtmr+0x66c>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2bf0      	cmp	r3, #240	; 0xf0
 80060dc:	d904      	bls.n	80060e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80060de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e2:	3301      	adds	r3, #1
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80060e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02f      	beq.n	8006150 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80060f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060f2:	f000 fb27 	bl	8006744 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <tcp_slowtmr+0x670>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006102:	429a      	cmp	r2, r3
 8006104:	d106      	bne.n	8006114 <tcp_slowtmr+0x60c>
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <tcp_slowtmr+0x660>)
 8006108:	f240 52af 	movw	r2, #1455	; 0x5af
 800610c:	491b      	ldr	r1, [pc, #108]	; (800617c <tcp_slowtmr+0x674>)
 800610e:	4818      	ldr	r0, [pc, #96]	; (8006170 <tcp_slowtmr+0x668>)
 8006110:	f00a f836 	bl	8010180 <iprintf>
        prev->next = pcb->next;
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	e00f      	b.n	800613e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <tcp_slowtmr+0x670>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d006      	beq.n	8006136 <tcp_slowtmr+0x62e>
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <tcp_slowtmr+0x660>)
 800612a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800612e:	4914      	ldr	r1, [pc, #80]	; (8006180 <tcp_slowtmr+0x678>)
 8006130:	480f      	ldr	r0, [pc, #60]	; (8006170 <tcp_slowtmr+0x668>)
 8006132:	f00a f825 	bl	8010180 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	4a0f      	ldr	r2, [pc, #60]	; (8006178 <tcp_slowtmr+0x670>)
 800613c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006148:	69f8      	ldr	r0, [r7, #28]
 800614a:	f7ff f947 	bl	80053dc <tcp_free>
 800614e:	e004      	b.n	800615a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1a9      	bne.n	80060b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006160:	bf00      	nop
 8006162:	3730      	adds	r7, #48	; 0x30
 8006164:	46bd      	mov	sp, r7
 8006166:	bdb0      	pop	{r4, r5, r7, pc}
 8006168:	08011e40 	.word	0x08011e40
 800616c:	080122d0 	.word	0x080122d0
 8006170:	08011e84 	.word	0x08011e84
 8006174:	2000694c 	.word	0x2000694c
 8006178:	20006958 	.word	0x20006958
 800617c:	08012300 	.word	0x08012300
 8006180:	08012328 	.word	0x08012328

08006184 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800618a:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <tcp_fasttmr+0xbc>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <tcp_fasttmr+0xbc>)
 8006194:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006196:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <tcp_fasttmr+0xc0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800619c:	e048      	b.n	8006230 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7f9a      	ldrb	r2, [r3, #30]
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <tcp_fasttmr+0xbc>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d03f      	beq.n	800622a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80061aa:	4b25      	ldr	r3, [pc, #148]	; (8006240 <tcp_fasttmr+0xbc>)
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8b5b      	ldrh	r3, [r3, #26]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d010      	beq.n	80061e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8b5b      	ldrh	r3, [r3, #26]
 80061c2:	f043 0302 	orr.w	r3, r3, #2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f003 fad5 	bl	800977c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8b5b      	ldrh	r3, [r3, #26]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8b5b      	ldrh	r3, [r3, #26]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8b5b      	ldrh	r3, [r3, #26]
 80061f0:	f023 0308 	bic.w	r3, r3, #8
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fa7e 	bl	80056fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800620e:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <tcp_fasttmr+0xc4>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f819 	bl	800624c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <tcp_fasttmr+0xc4>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d000      	beq.n	8006224 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006222:	e7b8      	b.n	8006196 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e002      	b.n	8006230 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1b3      	bne.n	800619e <tcp_fasttmr+0x1a>
    }
  }
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200000ce 	.word	0x200000ce
 8006244:	20006948 	.word	0x20006948
 8006248:	20006944 	.word	0x20006944

0800624c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <tcp_process_refused_data+0x22>
 800625a:	4b37      	ldr	r3, [pc, #220]	; (8006338 <tcp_process_refused_data+0xec>)
 800625c:	f240 6209 	movw	r2, #1545	; 0x609
 8006260:	4936      	ldr	r1, [pc, #216]	; (800633c <tcp_process_refused_data+0xf0>)
 8006262:	4837      	ldr	r0, [pc, #220]	; (8006340 <tcp_process_refused_data+0xf4>)
 8006264:	f009 ff8c 	bl	8010180 <iprintf>
 8006268:	f06f 030f 	mvn.w	r3, #15
 800626c:	e060      	b.n	8006330 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006272:	7b5b      	ldrb	r3, [r3, #13]
 8006274:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <tcp_process_refused_data+0x58>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6918      	ldr	r0, [r3, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	47a0      	blx	r4
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e007      	b.n	80062b4 <tcp_process_refused_data+0x68>
 80062a4:	2300      	movs	r3, #0
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	2000      	movs	r0, #0
 80062ac:	f000 f8a2 	bl	80063f4 <tcp_recv_null>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d12a      	bne.n	8006312 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d033      	beq.n	800632e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062ce:	d005      	beq.n	80062dc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	3301      	adds	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <tcp_process_refused_data+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6918      	ldr	r0, [r3, #16]
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	47a0      	blx	r4
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	e001      	b.n	8006302 <tcp_process_refused_data+0xb6>
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006306:	f113 0f0d 	cmn.w	r3, #13
 800630a:	d110      	bne.n	800632e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800630c:	f06f 030c 	mvn.w	r3, #12
 8006310:	e00e      	b.n	8006330 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006316:	f113 0f0d 	cmn.w	r3, #13
 800631a:	d102      	bne.n	8006322 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800631c:	f06f 030c 	mvn.w	r3, #12
 8006320:	e006      	b.n	8006330 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006328:	f06f 0304 	mvn.w	r3, #4
 800632c:	e000      	b.n	8006330 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	bd90      	pop	{r4, r7, pc}
 8006338:	08011e40 	.word	0x08011e40
 800633c:	08012350 	.word	0x08012350
 8006340:	08011e84 	.word	0x08011e84

08006344 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800634c:	e007      	b.n	800635e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f809 	bl	800636c <tcp_seg_free>
    seg = next;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f4      	bne.n	800634e <tcp_segs_free+0xa>
  }
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fd78 	bl	8004e7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	2003      	movs	r0, #3
 8006390:	f7fd fea0 	bl	80040d4 <memp_free>
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <tcp_seg_copy+0x1c>
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <tcp_seg_copy+0x4c>)
 80063ac:	f240 6282 	movw	r2, #1666	; 0x682
 80063b0:	490e      	ldr	r1, [pc, #56]	; (80063ec <tcp_seg_copy+0x50>)
 80063b2:	480f      	ldr	r0, [pc, #60]	; (80063f0 <tcp_seg_copy+0x54>)
 80063b4:	f009 fee4 	bl	8010180 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80063b8:	2003      	movs	r0, #3
 80063ba:	f7fd fe3f 	bl	800403c <memp_malloc>
 80063be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <tcp_seg_copy+0x2e>
    return NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e00a      	b.n	80063e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80063ca:	2214      	movs	r2, #20
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f009 fec3 	bl	801015a <memcpy>
  pbuf_ref(cseg->p);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe fdef 	bl	8004fbc <pbuf_ref>
  return cseg;
 80063de:	68fb      	ldr	r3, [r7, #12]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	08011e40 	.word	0x08011e40
 80063ec:	08012394 	.word	0x08012394
 80063f0:	08011e84 	.word	0x08011e84

080063f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <tcp_recv_null+0x28>
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <tcp_recv_null+0x60>)
 800640a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800640e:	4912      	ldr	r1, [pc, #72]	; (8006458 <tcp_recv_null+0x64>)
 8006410:	4812      	ldr	r0, [pc, #72]	; (800645c <tcp_recv_null+0x68>)
 8006412:	f009 feb5 	bl	8010180 <iprintf>
 8006416:	f06f 030f 	mvn.w	r3, #15
 800641a:	e016      	b.n	800644a <tcp_recv_null+0x56>

  if (p != NULL) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	891b      	ldrh	r3, [r3, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	68b8      	ldr	r0, [r7, #8]
 800642a:	f7ff fb1d 	bl	8005a68 <tcp_recved>
    pbuf_free(p);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fe fd24 	bl	8004e7c <pbuf_free>
 8006434:	e008      	b.n	8006448 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7ff f9c2 	bl	80057c8 <tcp_close>
 8006444:	4603      	mov	r3, r0
 8006446:	e000      	b.n	800644a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	08011e40 	.word	0x08011e40
 8006458:	080123b0 	.word	0x080123b0
 800645c:	08011e84 	.word	0x08011e84

08006460 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800646a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646e:	2b00      	cmp	r3, #0
 8006470:	db01      	blt.n	8006476 <tcp_kill_prio+0x16>
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	e000      	b.n	8006478 <tcp_kill_prio+0x18>
 8006476:	237f      	movs	r3, #127	; 0x7f
 8006478:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d034      	beq.n	80064ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3b01      	subs	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <tcp_kill_prio+0x94>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e01f      	b.n	80064d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	7d5b      	ldrb	r3, [r3, #21]
 800649a:	7afa      	ldrb	r2, [r7, #11]
 800649c:	429a      	cmp	r2, r3
 800649e:	d80c      	bhi.n	80064ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80064a4:	7afa      	ldrb	r2, [r7, #11]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d112      	bne.n	80064d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <tcp_kill_prio+0x98>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d80a      	bhi.n	80064d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <tcp_kill_prio+0x98>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	7d5b      	ldrb	r3, [r3, #21]
 80064ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1dc      	bne.n	8006496 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7ff fa5a 	bl	800599c <tcp_abort>
 80064e8:	e000      	b.n	80064ec <tcp_kill_prio+0x8c>
    return;
 80064ea:	bf00      	nop
  }
}
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20006948 	.word	0x20006948
 80064f8:	2000694c 	.word	0x2000694c

080064fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d009      	beq.n	8006520 <tcp_kill_state+0x24>
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b09      	cmp	r3, #9
 8006510:	d006      	beq.n	8006520 <tcp_kill_state+0x24>
 8006512:	4b1a      	ldr	r3, [pc, #104]	; (800657c <tcp_kill_state+0x80>)
 8006514:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006518:	4919      	ldr	r1, [pc, #100]	; (8006580 <tcp_kill_state+0x84>)
 800651a:	481a      	ldr	r0, [pc, #104]	; (8006584 <tcp_kill_state+0x88>)
 800651c:	f009 fe30 	bl	8010180 <iprintf>

  inactivity = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006528:	4b17      	ldr	r3, [pc, #92]	; (8006588 <tcp_kill_state+0x8c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e017      	b.n	8006560 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	7d1b      	ldrb	r3, [r3, #20]
 8006534:	79fa      	ldrb	r2, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d10f      	bne.n	800655a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <tcp_kill_state+0x90>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d807      	bhi.n	800655a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <tcp_kill_state+0x90>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e4      	bne.n	8006530 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800656c:	2100      	movs	r1, #0
 800656e:	6938      	ldr	r0, [r7, #16]
 8006570:	f7ff f956 	bl	8005820 <tcp_abandon>
  }
}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08011e40 	.word	0x08011e40
 8006580:	080123cc 	.word	0x080123cc
 8006584:	08011e84 	.word	0x08011e84
 8006588:	20006948 	.word	0x20006948
 800658c:	2000694c 	.word	0x2000694c

08006590 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <tcp_kill_timewait+0x58>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e012      	b.n	80065cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065a6:	4b11      	ldr	r3, [pc, #68]	; (80065ec <tcp_kill_timewait+0x5c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d807      	bhi.n	80065c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <tcp_kill_timewait+0x5c>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e9      	bne.n	80065a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065d8:	68b8      	ldr	r0, [r7, #8]
 80065da:	f7ff f9df 	bl	800599c <tcp_abort>
  }
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20006958 	.word	0x20006958
 80065ec:	2000694c 	.word	0x2000694c

080065f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <tcp_handle_closepend+0x48>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80065fc:	e014      	b.n	8006628 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8b5b      	ldrh	r3, [r3, #26]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8b5b      	ldrh	r3, [r3, #26]
 8006614:	f023 0308 	bic.w	r3, r3, #8
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff f86c 	bl	80056fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e7      	bne.n	80065fe <tcp_handle_closepend+0xe>
  }
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20006948 	.word	0x20006948

0800663c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006646:	2001      	movs	r0, #1
 8006648:	f7fd fcf8 	bl	800403c <memp_malloc>
 800664c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d126      	bne.n	80066a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006654:	f7ff ffcc 	bl	80065f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006658:	f7ff ff9a 	bl	8006590 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800665c:	2001      	movs	r0, #1
 800665e:	f7fd fced 	bl	800403c <memp_malloc>
 8006662:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d11b      	bne.n	80066a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800666a:	2009      	movs	r0, #9
 800666c:	f7ff ff46 	bl	80064fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006670:	2001      	movs	r0, #1
 8006672:	f7fd fce3 	bl	800403c <memp_malloc>
 8006676:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d111      	bne.n	80066a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800667e:	2008      	movs	r0, #8
 8006680:	f7ff ff3c 	bl	80064fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006684:	2001      	movs	r0, #1
 8006686:	f7fd fcd9 	bl	800403c <memp_malloc>
 800668a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d107      	bne.n	80066a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff fee3 	bl	8006460 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800669a:	2001      	movs	r0, #1
 800669c:	f7fd fcce 	bl	800403c <memp_malloc>
 80066a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d03f      	beq.n	8006728 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80066a8:	229c      	movs	r2, #156	; 0x9c
 80066aa:	2100      	movs	r1, #0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f009 fd5f 	bl	8010170 <memset>
    pcb->prio = prio;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80066be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80066de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2206      	movs	r2, #6
 80066e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2206      	movs	r2, #6
 80066ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80066fe:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <tcp_alloc+0xf8>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <tcp_alloc+0xfc>)
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006714:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <tcp_alloc+0x100>)
 800671c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4a07      	ldr	r2, [pc, #28]	; (8006740 <tcp_alloc+0x104>)
 8006724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2000694c 	.word	0x2000694c
 8006738:	200000ce 	.word	0x200000ce
 800673c:	080063f5 	.word	0x080063f5
 8006740:	006ddd00 	.word	0x006ddd00

08006744 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <tcp_pcb_purge+0x1e>
 8006752:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <tcp_pcb_purge+0x94>)
 8006754:	f640 0251 	movw	r2, #2129	; 0x851
 8006758:	4920      	ldr	r1, [pc, #128]	; (80067dc <tcp_pcb_purge+0x98>)
 800675a:	4821      	ldr	r0, [pc, #132]	; (80067e0 <tcp_pcb_purge+0x9c>)
 800675c:	f009 fd10 	bl	8010180 <iprintf>
 8006760:	e037      	b.n	80067d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7d1b      	ldrb	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d033      	beq.n	80067d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800676e:	2b0a      	cmp	r3, #10
 8006770:	d02f      	beq.n	80067d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006776:	2b01      	cmp	r3, #1
 8006778:	d02b      	beq.n	80067d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fb78 	bl	8004e7c <pbuf_free>
      pcb->refused_data = NULL;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f98c 	bl	8006ab8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fdc9 	bl	8006344 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff fdc4 	bl	8006344 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08011e40 	.word	0x08011e40
 80067dc:	0801248c 	.word	0x0801248c
 80067e0:	08011e84 	.word	0x08011e84

080067e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <tcp_pcb_remove+0x1e>
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <tcp_pcb_remove+0x10c>)
 80067f6:	f640 0283 	movw	r2, #2179	; 0x883
 80067fa:	493e      	ldr	r1, [pc, #248]	; (80068f4 <tcp_pcb_remove+0x110>)
 80067fc:	483e      	ldr	r0, [pc, #248]	; (80068f8 <tcp_pcb_remove+0x114>)
 80067fe:	f009 fcbf 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <tcp_pcb_remove+0x32>
 8006808:	4b39      	ldr	r3, [pc, #228]	; (80068f0 <tcp_pcb_remove+0x10c>)
 800680a:	f640 0284 	movw	r2, #2180	; 0x884
 800680e:	493b      	ldr	r1, [pc, #236]	; (80068fc <tcp_pcb_remove+0x118>)
 8006810:	4839      	ldr	r0, [pc, #228]	; (80068f8 <tcp_pcb_remove+0x114>)
 8006812:	f009 fcb5 	bl	8010180 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d105      	bne.n	800682c <tcp_pcb_remove+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e013      	b.n	8006854 <tcp_pcb_remove+0x70>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e00c      	b.n	800684e <tcp_pcb_remove+0x6a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d104      	bne.n	8006848 <tcp_pcb_remove+0x64>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e005      	b.n	8006854 <tcp_pcb_remove+0x70>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ef      	bne.n	8006834 <tcp_pcb_remove+0x50>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800685a:	6838      	ldr	r0, [r7, #0]
 800685c:	f7ff ff72 	bl	8006744 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	7d1b      	ldrb	r3, [r3, #20]
 8006864:	2b0a      	cmp	r3, #10
 8006866:	d013      	beq.n	8006890 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800686c:	2b01      	cmp	r3, #1
 800686e:	d00f      	beq.n	8006890 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	8b5b      	ldrh	r3, [r3, #26]
 8006874:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	8b5b      	ldrh	r3, [r3, #26]
 8006880:	f043 0302 	orr.w	r3, r3, #2
 8006884:	b29a      	uxth	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800688a:	6838      	ldr	r0, [r7, #0]
 800688c:	f002 ff76 	bl	800977c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	7d1b      	ldrb	r3, [r3, #20]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d020      	beq.n	80068da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <tcp_pcb_remove+0xca>
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <tcp_pcb_remove+0x10c>)
 80068a2:	f640 0293 	movw	r2, #2195	; 0x893
 80068a6:	4916      	ldr	r1, [pc, #88]	; (8006900 <tcp_pcb_remove+0x11c>)
 80068a8:	4813      	ldr	r0, [pc, #76]	; (80068f8 <tcp_pcb_remove+0x114>)
 80068aa:	f009 fc69 	bl	8010180 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <tcp_pcb_remove+0xe0>
 80068b6:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <tcp_pcb_remove+0x10c>)
 80068b8:	f640 0294 	movw	r2, #2196	; 0x894
 80068bc:	4911      	ldr	r1, [pc, #68]	; (8006904 <tcp_pcb_remove+0x120>)
 80068be:	480e      	ldr	r0, [pc, #56]	; (80068f8 <tcp_pcb_remove+0x114>)
 80068c0:	f009 fc5e 	bl	8010180 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <tcp_pcb_remove+0xf6>
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <tcp_pcb_remove+0x10c>)
 80068ce:	f640 0296 	movw	r2, #2198	; 0x896
 80068d2:	490d      	ldr	r1, [pc, #52]	; (8006908 <tcp_pcb_remove+0x124>)
 80068d4:	4808      	ldr	r0, [pc, #32]	; (80068f8 <tcp_pcb_remove+0x114>)
 80068d6:	f009 fc53 	bl	8010180 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2200      	movs	r2, #0
 80068de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	08011e40 	.word	0x08011e40
 80068f4:	080124a8 	.word	0x080124a8
 80068f8:	08011e84 	.word	0x08011e84
 80068fc:	080124c4 	.word	0x080124c4
 8006900:	080124e4 	.word	0x080124e4
 8006904:	080124fc 	.word	0x080124fc
 8006908:	08012518 	.word	0x08012518

0800690c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <tcp_next_iss+0x1c>
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <tcp_next_iss+0x38>)
 800691c:	f640 02af 	movw	r2, #2223	; 0x8af
 8006920:	4909      	ldr	r1, [pc, #36]	; (8006948 <tcp_next_iss+0x3c>)
 8006922:	480a      	ldr	r0, [pc, #40]	; (800694c <tcp_next_iss+0x40>)
 8006924:	f009 fc2c 	bl	8010180 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <tcp_next_iss+0x44>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <tcp_next_iss+0x48>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4413      	add	r3, r2
 8006932:	4a07      	ldr	r2, [pc, #28]	; (8006950 <tcp_next_iss+0x44>)
 8006934:	6013      	str	r3, [r2, #0]
  return iss;
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <tcp_next_iss+0x44>)
 8006938:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	08011e40 	.word	0x08011e40
 8006948:	08012530 	.word	0x08012530
 800694c:	08011e84 	.word	0x08011e84
 8006950:	2000000c 	.word	0x2000000c
 8006954:	2000694c 	.word	0x2000694c

08006958 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <tcp_eff_send_mss_netif+0x22>
 800696c:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <tcp_eff_send_mss_netif+0x68>)
 800696e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006972:	4914      	ldr	r1, [pc, #80]	; (80069c4 <tcp_eff_send_mss_netif+0x6c>)
 8006974:	4814      	ldr	r0, [pc, #80]	; (80069c8 <tcp_eff_send_mss_netif+0x70>)
 8006976:	f009 fc03 	bl	8010180 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	e019      	b.n	80069b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006988:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d012      	beq.n	80069b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006990:	2328      	movs	r3, #40	; 0x28
 8006992:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006994:	8afa      	ldrh	r2, [r7, #22]
 8006996:	8abb      	ldrh	r3, [r7, #20]
 8006998:	429a      	cmp	r2, r3
 800699a:	d904      	bls.n	80069a6 <tcp_eff_send_mss_netif+0x4e>
 800699c:	8afa      	ldrh	r2, [r7, #22]
 800699e:	8abb      	ldrh	r3, [r7, #20]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	e000      	b.n	80069a8 <tcp_eff_send_mss_netif+0x50>
 80069a6:	2300      	movs	r3, #0
 80069a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80069aa:	8a7a      	ldrh	r2, [r7, #18]
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bf28      	it	cs
 80069b2:	4613      	movcs	r3, r2
 80069b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80069b6:	89fb      	ldrh	r3, [r7, #14]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	08011e40 	.word	0x08011e40
 80069c4:	0801254c 	.word	0x0801254c
 80069c8:	08011e84 	.word	0x08011e84

080069cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11d      	bne.n	8006a1c <tcp_netif_ip_addr_changed_pcblist+0x50>
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80069e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80069e6:	4912      	ldr	r1, [pc, #72]	; (8006a30 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 80069e8:	4812      	ldr	r0, [pc, #72]	; (8006a34 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 80069ea:	f009 fbc9 	bl	8010180 <iprintf>

  while (pcb != NULL) {
 80069ee:	e015      	b.n	8006a1c <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d10c      	bne.n	8006a16 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	480c      	ldr	r0, [pc, #48]	; (8006a38 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8006a06:	f009 fbbb 	bl	8010180 <iprintf>
      tcp_abort(pcb);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fe ffc6 	bl	800599c <tcp_abort>
      pcb = next;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e002      	b.n	8006a1c <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08011e40 	.word	0x08011e40
 8006a30:	08012574 	.word	0x08012574
 8006a34:	08011e84 	.word	0x08011e84
 8006a38:	080125a8 	.word	0x080125a8

08006a3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02a      	beq.n	8006aa2 <tcp_netif_ip_addr_changed+0x66>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d026      	beq.n	8006aa2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <tcp_netif_ip_addr_changed+0x70>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff ffb6 	bl	80069cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a60:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <tcp_netif_ip_addr_changed+0x74>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ffb0 	bl	80069cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d017      	beq.n	8006aa2 <tcp_netif_ip_addr_changed+0x66>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d013      	beq.n	8006aa2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <tcp_netif_ip_addr_changed+0x78>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e00c      	b.n	8006a9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d103      	bne.n	8006a96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1ef      	bne.n	8006a82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20006948 	.word	0x20006948
 8006ab0:	20006954 	.word	0x20006954
 8006ab4:	20006950 	.word	0x20006950

08006ab8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff fc39 	bl	8006344 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b08d      	sub	sp, #52	; 0x34
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <tcp_input+0x1c>
 8006af0:	4b9b      	ldr	r3, [pc, #620]	; (8006d60 <tcp_input+0x280>)
 8006af2:	2283      	movs	r2, #131	; 0x83
 8006af4:	499b      	ldr	r1, [pc, #620]	; (8006d64 <tcp_input+0x284>)
 8006af6:	489c      	ldr	r0, [pc, #624]	; (8006d68 <tcp_input+0x288>)
 8006af8:	f009 fb42 	bl	8010180 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a9a      	ldr	r2, [pc, #616]	; (8006d6c <tcp_input+0x28c>)
 8006b02:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	895b      	ldrh	r3, [r3, #10]
 8006b08:	2b13      	cmp	r3, #19
 8006b0a:	f240 83c4 	bls.w	8007296 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b0e:	4b98      	ldr	r3, [pc, #608]	; (8006d70 <tcp_input+0x290>)
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	4b97      	ldr	r3, [pc, #604]	; (8006d70 <tcp_input+0x290>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f008 fb33 	bl	800f184 <ip4_addr_isbroadcast_u32>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 83ba 	bne.w	800729a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006b26:	4b92      	ldr	r3, [pc, #584]	; (8006d70 <tcp_input+0x290>)
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b2e:	2be0      	cmp	r3, #224	; 0xe0
 8006b30:	f000 83b3 	beq.w	800729a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b34:	4b8d      	ldr	r3, [pc, #564]	; (8006d6c <tcp_input+0x28c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	899b      	ldrh	r3, [r3, #12]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fc fe28 	bl	8003792 <lwip_htons>
 8006b42:	4603      	mov	r3, r0
 8006b44:	0b1b      	lsrs	r3, r3, #12
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b4e:	7cbb      	ldrb	r3, [r7, #18]
 8006b50:	2b13      	cmp	r3, #19
 8006b52:	f240 83a4 	bls.w	800729e <tcp_input+0x7be>
 8006b56:	7cbb      	ldrb	r3, [r7, #18]
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	891b      	ldrh	r3, [r3, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f200 839d 	bhi.w	800729e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b64:	7cbb      	ldrb	r3, [r7, #18]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b14      	subs	r3, #20
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <tcp_input+0x294>)
 8006b6e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b70:	4b81      	ldr	r3, [pc, #516]	; (8006d78 <tcp_input+0x298>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	895a      	ldrh	r2, [r3, #10]
 8006b7a:	7cbb      	ldrb	r3, [r7, #18]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d309      	bcc.n	8006b96 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b82:	4b7c      	ldr	r3, [pc, #496]	; (8006d74 <tcp_input+0x294>)
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	4b7d      	ldr	r3, [pc, #500]	; (8006d7c <tcp_input+0x29c>)
 8006b88:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006b8a:	7cbb      	ldrb	r3, [r7, #18]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe f8ee 	bl	8004d70 <pbuf_remove_header>
 8006b94:	e04e      	b.n	8006c34 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <tcp_input+0xca>
 8006b9e:	4b70      	ldr	r3, [pc, #448]	; (8006d60 <tcp_input+0x280>)
 8006ba0:	22c2      	movs	r2, #194	; 0xc2
 8006ba2:	4977      	ldr	r1, [pc, #476]	; (8006d80 <tcp_input+0x2a0>)
 8006ba4:	4870      	ldr	r0, [pc, #448]	; (8006d68 <tcp_input+0x288>)
 8006ba6:	f009 faeb 	bl	8010180 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006baa:	2114      	movs	r1, #20
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fe f8df 	bl	8004d70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	895a      	ldrh	r2, [r3, #10]
 8006bb6:	4b71      	ldr	r3, [pc, #452]	; (8006d7c <tcp_input+0x29c>)
 8006bb8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006bba:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <tcp_input+0x294>)
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	4b6f      	ldr	r3, [pc, #444]	; (8006d7c <tcp_input+0x29c>)
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006bc6:	4b6d      	ldr	r3, [pc, #436]	; (8006d7c <tcp_input+0x29c>)
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe f8cf 	bl	8004d70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	895b      	ldrh	r3, [r3, #10]
 8006bd8:	8a3a      	ldrh	r2, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	f200 8361 	bhi.w	80072a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4a64      	ldr	r2, [pc, #400]	; (8006d78 <tcp_input+0x298>)
 8006be8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	8a3a      	ldrh	r2, [r7, #16]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe f8bc 	bl	8004d70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	891a      	ldrh	r2, [r3, #8]
 8006bfc:	8a3b      	ldrh	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	895b      	ldrh	r3, [r3, #10]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <tcp_input+0x13a>
 8006c0e:	4b54      	ldr	r3, [pc, #336]	; (8006d60 <tcp_input+0x280>)
 8006c10:	22df      	movs	r2, #223	; 0xdf
 8006c12:	495c      	ldr	r1, [pc, #368]	; (8006d84 <tcp_input+0x2a4>)
 8006c14:	4854      	ldr	r0, [pc, #336]	; (8006d68 <tcp_input+0x288>)
 8006c16:	f009 fab3 	bl	8010180 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	891a      	ldrh	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	891b      	ldrh	r3, [r3, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d005      	beq.n	8006c34 <tcp_input+0x154>
 8006c28:	4b4d      	ldr	r3, [pc, #308]	; (8006d60 <tcp_input+0x280>)
 8006c2a:	22e0      	movs	r2, #224	; 0xe0
 8006c2c:	4956      	ldr	r1, [pc, #344]	; (8006d88 <tcp_input+0x2a8>)
 8006c2e:	484e      	ldr	r0, [pc, #312]	; (8006d68 <tcp_input+0x288>)
 8006c30:	f009 faa6 	bl	8010180 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c34:	4b4d      	ldr	r3, [pc, #308]	; (8006d6c <tcp_input+0x28c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <tcp_input+0x28c>)
 8006c3e:	681c      	ldr	r4, [r3, #0]
 8006c40:	4610      	mov	r0, r2
 8006c42:	f7fc fda6 	bl	8003792 <lwip_htons>
 8006c46:	4603      	mov	r3, r0
 8006c48:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c4a:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <tcp_input+0x28c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	4b46      	ldr	r3, [pc, #280]	; (8006d6c <tcp_input+0x28c>)
 8006c54:	681c      	ldr	r4, [r3, #0]
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fc fd9b 	bl	8003792 <lwip_htons>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c60:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <tcp_input+0x28c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b41      	ldr	r3, [pc, #260]	; (8006d6c <tcp_input+0x28c>)
 8006c68:	681c      	ldr	r4, [r3, #0]
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fc fda6 	bl	80037bc <lwip_htonl>
 8006c70:	4603      	mov	r3, r0
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	4a45      	ldr	r2, [pc, #276]	; (8006d8c <tcp_input+0x2ac>)
 8006c78:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c7a:	4b3c      	ldr	r3, [pc, #240]	; (8006d6c <tcp_input+0x28c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	4b3a      	ldr	r3, [pc, #232]	; (8006d6c <tcp_input+0x28c>)
 8006c82:	681c      	ldr	r4, [r3, #0]
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fc fd99 	bl	80037bc <lwip_htonl>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	60a3      	str	r3, [r4, #8]
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	4a3f      	ldr	r2, [pc, #252]	; (8006d90 <tcp_input+0x2b0>)
 8006c92:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <tcp_input+0x28c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	89db      	ldrh	r3, [r3, #14]
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <tcp_input+0x28c>)
 8006c9e:	681c      	ldr	r4, [r3, #0]
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	f7fc fd76 	bl	8003792 <lwip_htons>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006caa:	4b30      	ldr	r3, [pc, #192]	; (8006d6c <tcp_input+0x28c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	899b      	ldrh	r3, [r3, #12]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fc fd6d 	bl	8003792 <lwip_htons>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <tcp_input+0x2b4>)
 8006cc4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	891a      	ldrh	r2, [r3, #8]
 8006cca:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <tcp_input+0x2b8>)
 8006ccc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006cce:	4b31      	ldr	r3, [pc, #196]	; (8006d94 <tcp_input+0x2b4>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <tcp_input+0x214>
    tcplen++;
 8006cda:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <tcp_input+0x2b8>)
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <tcp_input+0x2b8>)
 8006ce4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	891a      	ldrh	r2, [r3, #8]
 8006cea:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <tcp_input+0x2b8>)
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f200 82d9 	bhi.w	80072a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cf8:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <tcp_input+0x2bc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e09d      	b.n	8006e3c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	7d1b      	ldrb	r3, [r3, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <tcp_input+0x234>
 8006d08:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <tcp_input+0x280>)
 8006d0a:	22fb      	movs	r2, #251	; 0xfb
 8006d0c:	4924      	ldr	r1, [pc, #144]	; (8006da0 <tcp_input+0x2c0>)
 8006d0e:	4816      	ldr	r0, [pc, #88]	; (8006d68 <tcp_input+0x288>)
 8006d10:	f009 fa36 	bl	8010180 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	7d1b      	ldrb	r3, [r3, #20]
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d105      	bne.n	8006d28 <tcp_input+0x248>
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <tcp_input+0x280>)
 8006d1e:	22fc      	movs	r2, #252	; 0xfc
 8006d20:	4920      	ldr	r1, [pc, #128]	; (8006da4 <tcp_input+0x2c4>)
 8006d22:	4811      	ldr	r0, [pc, #68]	; (8006d68 <tcp_input+0x288>)
 8006d24:	f009 fa2c 	bl	8010180 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	7d1b      	ldrb	r3, [r3, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d105      	bne.n	8006d3c <tcp_input+0x25c>
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <tcp_input+0x280>)
 8006d32:	22fd      	movs	r2, #253	; 0xfd
 8006d34:	491c      	ldr	r1, [pc, #112]	; (8006da8 <tcp_input+0x2c8>)
 8006d36:	480c      	ldr	r0, [pc, #48]	; (8006d68 <tcp_input+0x288>)
 8006d38:	f009 fa22 	bl	8010180 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	7a1b      	ldrb	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d033      	beq.n	8006dac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	7a1a      	ldrb	r2, [r3, #8]
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <tcp_input+0x290>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d50:	3301      	adds	r3, #1
 8006d52:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d029      	beq.n	8006dac <tcp_input+0x2cc>
      prev = pcb;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	61fb      	str	r3, [r7, #28]
      continue;
 8006d5c:	e06b      	b.n	8006e36 <tcp_input+0x356>
 8006d5e:	bf00      	nop
 8006d60:	080125d0 	.word	0x080125d0
 8006d64:	08012604 	.word	0x08012604
 8006d68:	0801261c 	.word	0x0801261c
 8006d6c:	200000e4 	.word	0x200000e4
 8006d70:	20003390 	.word	0x20003390
 8006d74:	200000e8 	.word	0x200000e8
 8006d78:	200000ec 	.word	0x200000ec
 8006d7c:	200000ea 	.word	0x200000ea
 8006d80:	08012644 	.word	0x08012644
 8006d84:	08012654 	.word	0x08012654
 8006d88:	08012660 	.word	0x08012660
 8006d8c:	200000f4 	.word	0x200000f4
 8006d90:	200000f8 	.word	0x200000f8
 8006d94:	20000100 	.word	0x20000100
 8006d98:	200000fe 	.word	0x200000fe
 8006d9c:	20006948 	.word	0x20006948
 8006da0:	08012680 	.word	0x08012680
 8006da4:	080126a8 	.word	0x080126a8
 8006da8:	080126d4 	.word	0x080126d4
    }

    if (pcb->remote_port == tcphdr->src &&
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	8b1a      	ldrh	r2, [r3, #24]
 8006db0:	4b94      	ldr	r3, [pc, #592]	; (8007004 <tcp_input+0x524>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d13a      	bne.n	8006e32 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	8ada      	ldrh	r2, [r3, #22]
 8006dc0:	4b90      	ldr	r3, [pc, #576]	; (8007004 <tcp_input+0x524>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d132      	bne.n	8006e32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <tcp_input+0x528>)
 8006dd2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d12c      	bne.n	8006e32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b8a      	ldr	r3, [pc, #552]	; (8007008 <tcp_input+0x528>)
 8006dde:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d126      	bne.n	8006e32 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d106      	bne.n	8006dfc <tcp_input+0x31c>
 8006dee:	4b87      	ldr	r3, [pc, #540]	; (800700c <tcp_input+0x52c>)
 8006df0:	f240 120d 	movw	r2, #269	; 0x10d
 8006df4:	4986      	ldr	r1, [pc, #536]	; (8007010 <tcp_input+0x530>)
 8006df6:	4887      	ldr	r0, [pc, #540]	; (8007014 <tcp_input+0x534>)
 8006df8:	f009 f9c2 	bl	8010180 <iprintf>
      if (prev != NULL) {
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <tcp_input+0x338>
        prev->next = pcb->next;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006e0a:	4b83      	ldr	r3, [pc, #524]	; (8007018 <tcp_input+0x538>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006e12:	4a81      	ldr	r2, [pc, #516]	; (8007018 <tcp_input+0x538>)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d111      	bne.n	8006e46 <tcp_input+0x366>
 8006e22:	4b7a      	ldr	r3, [pc, #488]	; (800700c <tcp_input+0x52c>)
 8006e24:	f240 1215 	movw	r2, #277	; 0x115
 8006e28:	497c      	ldr	r1, [pc, #496]	; (800701c <tcp_input+0x53c>)
 8006e2a:	487a      	ldr	r0, [pc, #488]	; (8007014 <tcp_input+0x534>)
 8006e2c:	f009 f9a8 	bl	8010180 <iprintf>
      break;
 8006e30:	e009      	b.n	8006e46 <tcp_input+0x366>
    }
    prev = pcb;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f af5e 	bne.w	8006d00 <tcp_input+0x220>
 8006e44:	e000      	b.n	8006e48 <tcp_input+0x368>
      break;
 8006e46:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 8095 	bne.w	8006f7a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e50:	4b73      	ldr	r3, [pc, #460]	; (8007020 <tcp_input+0x540>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e03f      	b.n	8006ed8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	7d1b      	ldrb	r3, [r3, #20]
 8006e5c:	2b0a      	cmp	r3, #10
 8006e5e:	d006      	beq.n	8006e6e <tcp_input+0x38e>
 8006e60:	4b6a      	ldr	r3, [pc, #424]	; (800700c <tcp_input+0x52c>)
 8006e62:	f240 121f 	movw	r2, #287	; 0x11f
 8006e66:	496f      	ldr	r1, [pc, #444]	; (8007024 <tcp_input+0x544>)
 8006e68:	486a      	ldr	r0, [pc, #424]	; (8007014 <tcp_input+0x534>)
 8006e6a:	f009 f989 	bl	8010180 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	7a1b      	ldrb	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	7a1a      	ldrb	r2, [r3, #8]
 8006e7a:	4b63      	ldr	r3, [pc, #396]	; (8007008 <tcp_input+0x528>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d122      	bne.n	8006ed0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	8b1a      	ldrh	r2, [r3, #24]
 8006e8e:	4b5d      	ldr	r3, [pc, #372]	; (8007004 <tcp_input+0x524>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d11b      	bne.n	8006ed2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	8ada      	ldrh	r2, [r3, #22]
 8006e9e:	4b59      	ldr	r3, [pc, #356]	; (8007004 <tcp_input+0x524>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	885b      	ldrh	r3, [r3, #2]
 8006ea4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d113      	bne.n	8006ed2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	4b56      	ldr	r3, [pc, #344]	; (8007008 <tcp_input+0x528>)
 8006eb0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d10d      	bne.n	8006ed2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b53      	ldr	r3, [pc, #332]	; (8007008 <tcp_input+0x528>)
 8006ebc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d107      	bne.n	8006ed2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006ec2:	69b8      	ldr	r0, [r7, #24]
 8006ec4:	f000 fb54 	bl	8007570 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fd ffd7 	bl	8004e7c <pbuf_free>
        return;
 8006ece:	e1f0      	b.n	80072b2 <tcp_input+0x7d2>
        continue;
 8006ed0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1bc      	bne.n	8006e58 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ee2:	4b51      	ldr	r3, [pc, #324]	; (8007028 <tcp_input+0x548>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e02a      	b.n	8006f40 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	7a1b      	ldrb	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	7a1a      	ldrb	r2, [r3, #8]
 8006ef6:	4b44      	ldr	r3, [pc, #272]	; (8007008 <tcp_input+0x528>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006efe:	3301      	adds	r3, #1
 8006f00:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d002      	beq.n	8006f0c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	61fb      	str	r3, [r7, #28]
        continue;
 8006f0a:	e016      	b.n	8006f3a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	8ada      	ldrh	r2, [r3, #22]
 8006f10:	4b3c      	ldr	r3, [pc, #240]	; (8007004 <tcp_input+0x524>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	885b      	ldrh	r3, [r3, #2]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d10c      	bne.n	8006f36 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b39      	ldr	r3, [pc, #228]	; (8007008 <tcp_input+0x528>)
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d00f      	beq.n	8006f48 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <tcp_input+0x46a>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1d1      	bne.n	8006eea <tcp_input+0x40a>
 8006f46:	e000      	b.n	8006f4a <tcp_input+0x46a>
            break;
 8006f48:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d014      	beq.n	8006f7a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f5e:	4b32      	ldr	r3, [pc, #200]	; (8007028 <tcp_input+0x548>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f66:	4a30      	ldr	r2, [pc, #192]	; (8007028 <tcp_input+0x548>)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f000 fa01 	bl	8007374 <tcp_listen_input>
      }
      pbuf_free(p);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fd ff82 	bl	8004e7c <pbuf_free>
      return;
 8006f78:	e19b      	b.n	80072b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8160 	beq.w	8007242 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f82:	4b2a      	ldr	r3, [pc, #168]	; (800702c <tcp_input+0x54c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	891a      	ldrh	r2, [r3, #8]
 8006f8c:	4b27      	ldr	r3, [pc, #156]	; (800702c <tcp_input+0x54c>)
 8006f8e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006f90:	4a26      	ldr	r2, [pc, #152]	; (800702c <tcp_input+0x54c>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006f96:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <tcp_input+0x524>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a24      	ldr	r2, [pc, #144]	; (800702c <tcp_input+0x54c>)
 8006f9c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <tcp_input+0x550>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006fa4:	4b23      	ldr	r3, [pc, #140]	; (8007034 <tcp_input+0x554>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <tcp_input+0x558>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006fb0:	4b22      	ldr	r3, [pc, #136]	; (800703c <tcp_input+0x55c>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7b5b      	ldrb	r3, [r3, #13]
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d038      	beq.n	8007044 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fd2:	69b8      	ldr	r0, [r7, #24]
 8006fd4:	f7ff f93a 	bl	800624c <tcp_process_refused_data>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f113 0f0d 	cmn.w	r3, #13
 8006fde:	d007      	beq.n	8006ff0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02d      	beq.n	8007044 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fe8:	4b15      	ldr	r3, [pc, #84]	; (8007040 <tcp_input+0x560>)
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d029      	beq.n	8007044 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 8104 	bne.w	8007202 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006ffa:	69b8      	ldr	r0, [r7, #24]
 8006ffc:	f003 f9e2 	bl	800a3c4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007000:	e0ff      	b.n	8007202 <tcp_input+0x722>
 8007002:	bf00      	nop
 8007004:	200000e4 	.word	0x200000e4
 8007008:	20003390 	.word	0x20003390
 800700c:	080125d0 	.word	0x080125d0
 8007010:	080126fc 	.word	0x080126fc
 8007014:	0801261c 	.word	0x0801261c
 8007018:	20006948 	.word	0x20006948
 800701c:	08012728 	.word	0x08012728
 8007020:	20006958 	.word	0x20006958
 8007024:	08012754 	.word	0x08012754
 8007028:	20006950 	.word	0x20006950
 800702c:	200000d0 	.word	0x200000d0
 8007030:	20000104 	.word	0x20000104
 8007034:	20000101 	.word	0x20000101
 8007038:	200000fc 	.word	0x200000fc
 800703c:	20000100 	.word	0x20000100
 8007040:	200000fe 	.word	0x200000fe
      }
    }
    tcp_input_pcb = pcb;
 8007044:	4a9c      	ldr	r2, [pc, #624]	; (80072b8 <tcp_input+0x7d8>)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800704a:	69b8      	ldr	r0, [r7, #24]
 800704c:	f000 fb0c 	bl	8007668 <tcp_process>
 8007050:	4603      	mov	r3, r0
 8007052:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007054:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007058:	f113 0f0d 	cmn.w	r3, #13
 800705c:	f000 80d3 	beq.w	8007206 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007060:	4b96      	ldr	r3, [pc, #600]	; (80072bc <tcp_input+0x7dc>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d015      	beq.n	8007098 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <tcp_input+0x5a8>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	6912      	ldr	r2, [r2, #16]
 8007080:	f06f 010d 	mvn.w	r1, #13
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	488d      	ldr	r0, [pc, #564]	; (80072c0 <tcp_input+0x7e0>)
 800708c:	f7ff fbaa 	bl	80067e4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007090:	69b8      	ldr	r0, [r7, #24]
 8007092:	f7fe f9a3 	bl	80053dc <tcp_free>
 8007096:	e0c1      	b.n	800721c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800709c:	4b89      	ldr	r3, [pc, #548]	; (80072c4 <tcp_input+0x7e4>)
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01d      	beq.n	80070e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80070a4:	4b87      	ldr	r3, [pc, #540]	; (80072c4 <tcp_input+0x7e4>)
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <tcp_input+0x5ea>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	6910      	ldr	r0, [r2, #16]
 80070be:	89fa      	ldrh	r2, [r7, #14]
 80070c0:	69b9      	ldr	r1, [r7, #24]
 80070c2:	4798      	blx	r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	74fb      	strb	r3, [r7, #19]
 80070c8:	e001      	b.n	80070ce <tcp_input+0x5ee>
 80070ca:	2300      	movs	r3, #0
 80070cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80070ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070d2:	f113 0f0d 	cmn.w	r3, #13
 80070d6:	f000 8098 	beq.w	800720a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80070da:	4b7a      	ldr	r3, [pc, #488]	; (80072c4 <tcp_input+0x7e4>)
 80070dc:	2200      	movs	r2, #0
 80070de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80070e0:	69b8      	ldr	r0, [r7, #24]
 80070e2:	f000 f907 	bl	80072f4 <tcp_input_delayed_close>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8090 	bne.w	800720e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80070ee:	4b76      	ldr	r3, [pc, #472]	; (80072c8 <tcp_input+0x7e8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d041      	beq.n	800717a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d006      	beq.n	800710c <tcp_input+0x62c>
 80070fe:	4b73      	ldr	r3, [pc, #460]	; (80072cc <tcp_input+0x7ec>)
 8007100:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007104:	4972      	ldr	r1, [pc, #456]	; (80072d0 <tcp_input+0x7f0>)
 8007106:	4873      	ldr	r0, [pc, #460]	; (80072d4 <tcp_input+0x7f4>)
 8007108:	f009 f83a 	bl	8010180 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	8b5b      	ldrh	r3, [r3, #26]
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007118:	4b6b      	ldr	r3, [pc, #428]	; (80072c8 <tcp_input+0x7e8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f7fd fead 	bl	8004e7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007122:	69b8      	ldr	r0, [r7, #24]
 8007124:	f7fe fc3a 	bl	800599c <tcp_abort>
            goto aborted;
 8007128:	e078      	b.n	800721c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <tcp_input+0x66e>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	6918      	ldr	r0, [r3, #16]
 800713e:	4b62      	ldr	r3, [pc, #392]	; (80072c8 <tcp_input+0x7e8>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	47a0      	blx	r4
 8007148:	4603      	mov	r3, r0
 800714a:	74fb      	strb	r3, [r7, #19]
 800714c:	e008      	b.n	8007160 <tcp_input+0x680>
 800714e:	4b5e      	ldr	r3, [pc, #376]	; (80072c8 <tcp_input+0x7e8>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	2300      	movs	r3, #0
 8007154:	69b9      	ldr	r1, [r7, #24]
 8007156:	2000      	movs	r0, #0
 8007158:	f7ff f94c 	bl	80063f4 <tcp_recv_null>
 800715c:	4603      	mov	r3, r0
 800715e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007164:	f113 0f0d 	cmn.w	r3, #13
 8007168:	d053      	beq.n	8007212 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800716a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007172:	4b55      	ldr	r3, [pc, #340]	; (80072c8 <tcp_input+0x7e8>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800717a:	4b50      	ldr	r3, [pc, #320]	; (80072bc <tcp_input+0x7dc>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d030      	beq.n	80071e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007192:	7b5a      	ldrb	r2, [r3, #13]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007198:	f042 0220 	orr.w	r2, r2, #32
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	735a      	strb	r2, [r3, #13]
 80071a0:	e022      	b.n	80071e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80071aa:	d005      	beq.n	80071b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	3301      	adds	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <tcp_input+0x6fa>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6918      	ldr	r0, [r3, #16]
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	47a0      	blx	r4
 80071d4:	4603      	mov	r3, r0
 80071d6:	74fb      	strb	r3, [r7, #19]
 80071d8:	e001      	b.n	80071de <tcp_input+0x6fe>
 80071da:	2300      	movs	r3, #0
 80071dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071e2:	f113 0f0d 	cmn.w	r3, #13
 80071e6:	d016      	beq.n	8007216 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80071e8:	4b33      	ldr	r3, [pc, #204]	; (80072b8 <tcp_input+0x7d8>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80071ee:	69b8      	ldr	r0, [r7, #24]
 80071f0:	f000 f880 	bl	80072f4 <tcp_input_delayed_close>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10f      	bne.n	800721a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80071fa:	69b8      	ldr	r0, [r7, #24]
 80071fc:	f002 fabe 	bl	800977c <tcp_output>
 8007200:	e00c      	b.n	800721c <tcp_input+0x73c>
        goto aborted;
 8007202:	bf00      	nop
 8007204:	e00a      	b.n	800721c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007206:	bf00      	nop
 8007208:	e008      	b.n	800721c <tcp_input+0x73c>
              goto aborted;
 800720a:	bf00      	nop
 800720c:	e006      	b.n	800721c <tcp_input+0x73c>
          goto aborted;
 800720e:	bf00      	nop
 8007210:	e004      	b.n	800721c <tcp_input+0x73c>
            goto aborted;
 8007212:	bf00      	nop
 8007214:	e002      	b.n	800721c <tcp_input+0x73c>
              goto aborted;
 8007216:	bf00      	nop
 8007218:	e000      	b.n	800721c <tcp_input+0x73c>
          goto aborted;
 800721a:	bf00      	nop
    tcp_input_pcb = NULL;
 800721c:	4b26      	ldr	r3, [pc, #152]	; (80072b8 <tcp_input+0x7d8>)
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007222:	4b29      	ldr	r3, [pc, #164]	; (80072c8 <tcp_input+0x7e8>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <tcp_input+0x7f8>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d03f      	beq.n	80072b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007230:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <tcp_input+0x7f8>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4618      	mov	r0, r3
 8007236:	f7fd fe21 	bl	8004e7c <pbuf_free>
      inseg.p = NULL;
 800723a:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <tcp_input+0x7f8>)
 800723c:	2200      	movs	r2, #0
 800723e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007240:	e036      	b.n	80072b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007242:	4b26      	ldr	r3, [pc, #152]	; (80072dc <tcp_input+0x7fc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	899b      	ldrh	r3, [r3, #12]
 8007248:	b29b      	uxth	r3, r3
 800724a:	4618      	mov	r0, r3
 800724c:	f7fc faa1 	bl	8003792 <lwip_htons>
 8007250:	4603      	mov	r3, r0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d118      	bne.n	800728e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <tcp_input+0x800>)
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	4b20      	ldr	r3, [pc, #128]	; (80072e4 <tcp_input+0x804>)
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <tcp_input+0x808>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <tcp_input+0x7fc>)
 800726e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007270:	885b      	ldrh	r3, [r3, #2]
 8007272:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007274:	4a19      	ldr	r2, [pc, #100]	; (80072dc <tcp_input+0x7fc>)
 8007276:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007278:	8812      	ldrh	r2, [r2, #0]
 800727a:	b292      	uxth	r2, r2
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <tcp_input+0x80c>)
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <tcp_input+0x810>)
 8007286:	4602      	mov	r2, r0
 8007288:	2000      	movs	r0, #0
 800728a:	f003 f849 	bl	800a320 <tcp_rst>
    pbuf_free(p);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fd fdf4 	bl	8004e7c <pbuf_free>
  return;
 8007294:	e00c      	b.n	80072b0 <tcp_input+0x7d0>
    goto dropped;
 8007296:	bf00      	nop
 8007298:	e006      	b.n	80072a8 <tcp_input+0x7c8>
dropped:
 800729a:	bf00      	nop
 800729c:	e004      	b.n	80072a8 <tcp_input+0x7c8>
    goto dropped;
 800729e:	bf00      	nop
 80072a0:	e002      	b.n	80072a8 <tcp_input+0x7c8>
      goto dropped;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <tcp_input+0x7c8>
      goto dropped;
 80072a6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fd fde7 	bl	8004e7c <pbuf_free>
 80072ae:	e000      	b.n	80072b2 <tcp_input+0x7d2>
  return;
 80072b0:	bf00      	nop
}
 80072b2:	3724      	adds	r7, #36	; 0x24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd90      	pop	{r4, r7, pc}
 80072b8:	2000695c 	.word	0x2000695c
 80072bc:	20000101 	.word	0x20000101
 80072c0:	20006948 	.word	0x20006948
 80072c4:	200000fc 	.word	0x200000fc
 80072c8:	20000104 	.word	0x20000104
 80072cc:	080125d0 	.word	0x080125d0
 80072d0:	08012784 	.word	0x08012784
 80072d4:	0801261c 	.word	0x0801261c
 80072d8:	200000d0 	.word	0x200000d0
 80072dc:	200000e4 	.word	0x200000e4
 80072e0:	200000f8 	.word	0x200000f8
 80072e4:	200000fe 	.word	0x200000fe
 80072e8:	200000f4 	.word	0x200000f4
 80072ec:	200033a0 	.word	0x200033a0
 80072f0:	200033a4 	.word	0x200033a4

080072f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <tcp_input_delayed_close+0x1c>
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <tcp_input_delayed_close+0x6c>)
 8007304:	f240 225a 	movw	r2, #602	; 0x25a
 8007308:	4916      	ldr	r1, [pc, #88]	; (8007364 <tcp_input_delayed_close+0x70>)
 800730a:	4817      	ldr	r0, [pc, #92]	; (8007368 <tcp_input_delayed_close+0x74>)
 800730c:	f008 ff38 	bl	8010180 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007310:	4b16      	ldr	r3, [pc, #88]	; (800736c <tcp_input_delayed_close+0x78>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01c      	beq.n	8007356 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8b5b      	ldrh	r3, [r3, #26]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <tcp_input_delayed_close+0x50>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6912      	ldr	r2, [r2, #16]
 800733c:	f06f 010e 	mvn.w	r1, #14
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	480a      	ldr	r0, [pc, #40]	; (8007370 <tcp_input_delayed_close+0x7c>)
 8007348:	f7ff fa4c 	bl	80067e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe f845 	bl	80053dc <tcp_free>
    return 1;
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	080125d0 	.word	0x080125d0
 8007364:	080127a0 	.word	0x080127a0
 8007368:	0801261c 	.word	0x0801261c
 800736c:	20000101 	.word	0x20000101
 8007370:	20006948 	.word	0x20006948

08007374 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b08b      	sub	sp, #44	; 0x2c
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800737c:	4b6f      	ldr	r3, [pc, #444]	; (800753c <tcp_listen_input+0x1c8>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	f040 80d3 	bne.w	8007530 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <tcp_listen_input+0x2a>
 8007390:	4b6b      	ldr	r3, [pc, #428]	; (8007540 <tcp_listen_input+0x1cc>)
 8007392:	f240 2281 	movw	r2, #641	; 0x281
 8007396:	496b      	ldr	r1, [pc, #428]	; (8007544 <tcp_listen_input+0x1d0>)
 8007398:	486b      	ldr	r0, [pc, #428]	; (8007548 <tcp_listen_input+0x1d4>)
 800739a:	f008 fef1 	bl	8010180 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800739e:	4b67      	ldr	r3, [pc, #412]	; (800753c <tcp_listen_input+0x1c8>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d019      	beq.n	80073de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073aa:	4b68      	ldr	r3, [pc, #416]	; (800754c <tcp_listen_input+0x1d8>)
 80073ac:	6819      	ldr	r1, [r3, #0]
 80073ae:	4b68      	ldr	r3, [pc, #416]	; (8007550 <tcp_listen_input+0x1dc>)
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b67      	ldr	r3, [pc, #412]	; (8007554 <tcp_listen_input+0x1e0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073ba:	4b67      	ldr	r3, [pc, #412]	; (8007558 <tcp_listen_input+0x1e4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073be:	885b      	ldrh	r3, [r3, #2]
 80073c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073c2:	4a65      	ldr	r2, [pc, #404]	; (8007558 <tcp_listen_input+0x1e4>)
 80073c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073c6:	8812      	ldrh	r2, [r2, #0]
 80073c8:	b292      	uxth	r2, r2
 80073ca:	9202      	str	r2, [sp, #8]
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	4b63      	ldr	r3, [pc, #396]	; (800755c <tcp_listen_input+0x1e8>)
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4b63      	ldr	r3, [pc, #396]	; (8007560 <tcp_listen_input+0x1ec>)
 80073d4:	4602      	mov	r2, r0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f002 ffa2 	bl	800a320 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80073dc:	e0aa      	b.n	8007534 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80073de:	4b57      	ldr	r3, [pc, #348]	; (800753c <tcp_listen_input+0x1c8>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80a4 	beq.w	8007534 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	7d5b      	ldrb	r3, [r3, #21]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff f923 	bl	800663c <tcp_alloc>
 80073f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d111      	bne.n	8007422 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <tcp_listen_input+0xa8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6910      	ldr	r0, [r2, #16]
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	2100      	movs	r1, #0
 8007414:	4798      	blx	r3
 8007416:	4603      	mov	r3, r0
 8007418:	73bb      	strb	r3, [r7, #14]
      return;
 800741a:	e08c      	b.n	8007536 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800741c:	23f0      	movs	r3, #240	; 0xf0
 800741e:	73bb      	strb	r3, [r7, #14]
      return;
 8007420:	e089      	b.n	8007536 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007422:	4b50      	ldr	r3, [pc, #320]	; (8007564 <tcp_listen_input+0x1f0>)
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800742a:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <tcp_listen_input+0x1f0>)
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8ada      	ldrh	r2, [r3, #22]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800743a:	4b47      	ldr	r3, [pc, #284]	; (8007558 <tcp_listen_input+0x1e4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29a      	uxth	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2203      	movs	r2, #3
 800744a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800744c:	4b41      	ldr	r3, [pc, #260]	; (8007554 <tcp_listen_input+0x1e0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f7ff fa54 	bl	800690c <tcp_next_iss>
 8007464:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800747e:	4b35      	ldr	r3, [pc, #212]	; (8007554 <tcp_listen_input+0x1e0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	1e5a      	subs	r2, r3, #1
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7a5b      	ldrb	r3, [r3, #9]
 800749a:	f003 030c 	and.w	r3, r3, #12
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7a1a      	ldrb	r2, [r3, #8]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80074ac:	4b2e      	ldr	r3, [pc, #184]	; (8007568 <tcp_listen_input+0x1f4>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	60da      	str	r2, [r3, #12]
 80074b4:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <tcp_listen_input+0x1f4>)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	f003 f8f5 	bl	800a6a8 <tcp_timer_needed>
 80074be:	4b2b      	ldr	r3, [pc, #172]	; (800756c <tcp_listen_input+0x1f8>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80074c4:	6978      	ldr	r0, [r7, #20]
 80074c6:	f001 fd8f 	bl	8008fe8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <tcp_listen_input+0x1e4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	89db      	ldrh	r3, [r3, #14]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f007 f9cb 	bl	800e888 <ip4_route>
 80074f2:	4601      	mov	r1, r0
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	3304      	adds	r3, #4
 80074f8:	461a      	mov	r2, r3
 80074fa:	4620      	mov	r0, r4
 80074fc:	f7ff fa2c 	bl	8006958 <tcp_eff_send_mss_netif>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007508:	2112      	movs	r1, #18
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f002 f848 	bl	80095a0 <tcp_enqueue_flags>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800751c:	2100      	movs	r1, #0
 800751e:	6978      	ldr	r0, [r7, #20]
 8007520:	f7fe f97e 	bl	8005820 <tcp_abandon>
      return;
 8007524:	e007      	b.n	8007536 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f002 f928 	bl	800977c <tcp_output>
  return;
 800752c:	bf00      	nop
 800752e:	e001      	b.n	8007534 <tcp_listen_input+0x1c0>
    return;
 8007530:	bf00      	nop
 8007532:	e000      	b.n	8007536 <tcp_listen_input+0x1c2>
  return;
 8007534:	bf00      	nop
}
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	bd90      	pop	{r4, r7, pc}
 800753c:	20000100 	.word	0x20000100
 8007540:	080125d0 	.word	0x080125d0
 8007544:	080127c8 	.word	0x080127c8
 8007548:	0801261c 	.word	0x0801261c
 800754c:	200000f8 	.word	0x200000f8
 8007550:	200000fe 	.word	0x200000fe
 8007554:	200000f4 	.word	0x200000f4
 8007558:	200000e4 	.word	0x200000e4
 800755c:	200033a0 	.word	0x200033a0
 8007560:	200033a4 	.word	0x200033a4
 8007564:	20003390 	.word	0x20003390
 8007568:	20006948 	.word	0x20006948
 800756c:	20006944 	.word	0x20006944

08007570 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af04      	add	r7, sp, #16
 8007576:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007578:	4b30      	ldr	r3, [pc, #192]	; (800763c <tcp_timewait_input+0xcc>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d154      	bne.n	800762e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <tcp_timewait_input+0x28>
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <tcp_timewait_input+0xd0>)
 800758c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007590:	492c      	ldr	r1, [pc, #176]	; (8007644 <tcp_timewait_input+0xd4>)
 8007592:	482d      	ldr	r0, [pc, #180]	; (8007648 <tcp_timewait_input+0xd8>)
 8007594:	f008 fdf4 	bl	8010180 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007598:	4b28      	ldr	r3, [pc, #160]	; (800763c <tcp_timewait_input+0xcc>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02a      	beq.n	80075fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <tcp_timewait_input+0xdc>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	db2d      	blt.n	800760e <tcp_timewait_input+0x9e>
 80075b2:	4b26      	ldr	r3, [pc, #152]	; (800764c <tcp_timewait_input+0xdc>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80075be:	440b      	add	r3, r1
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc23      	bgt.n	800760e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075c6:	4b22      	ldr	r3, [pc, #136]	; (8007650 <tcp_timewait_input+0xe0>)
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	4b22      	ldr	r3, [pc, #136]	; (8007654 <tcp_timewait_input+0xe4>)
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b1e      	ldr	r3, [pc, #120]	; (800764c <tcp_timewait_input+0xdc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075d6:	4b20      	ldr	r3, [pc, #128]	; (8007658 <tcp_timewait_input+0xe8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <tcp_timewait_input+0xe8>)
 80075e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075e2:	8812      	ldrh	r2, [r2, #0]
 80075e4:	b292      	uxth	r2, r2
 80075e6:	9202      	str	r2, [sp, #8]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	4b1c      	ldr	r3, [pc, #112]	; (800765c <tcp_timewait_input+0xec>)
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4b1c      	ldr	r3, [pc, #112]	; (8007660 <tcp_timewait_input+0xf0>)
 80075f0:	4602      	mov	r2, r0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fe94 	bl	800a320 <tcp_rst>
      return;
 80075f8:	e01c      	b.n	8007634 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <tcp_timewait_input+0xcc>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007606:	4b17      	ldr	r3, [pc, #92]	; (8007664 <tcp_timewait_input+0xf4>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <tcp_timewait_input+0xe4>)
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00d      	beq.n	8007632 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8b5b      	ldrh	r3, [r3, #26]
 800761a:	f043 0302 	orr.w	r3, r3, #2
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f002 f8a9 	bl	800977c <tcp_output>
  }
  return;
 800762a:	bf00      	nop
 800762c:	e001      	b.n	8007632 <tcp_timewait_input+0xc2>
    return;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <tcp_timewait_input+0xc4>
  return;
 8007632:	bf00      	nop
}
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000100 	.word	0x20000100
 8007640:	080125d0 	.word	0x080125d0
 8007644:	080127e8 	.word	0x080127e8
 8007648:	0801261c 	.word	0x0801261c
 800764c:	200000f4 	.word	0x200000f4
 8007650:	200000f8 	.word	0x200000f8
 8007654:	200000fe 	.word	0x200000fe
 8007658:	200000e4 	.word	0x200000e4
 800765c:	200033a0 	.word	0x200033a0
 8007660:	200033a4 	.word	0x200033a4
 8007664:	2000694c 	.word	0x2000694c

08007668 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b08d      	sub	sp, #52	; 0x34
 800766c:	af04      	add	r7, sp, #16
 800766e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <tcp_process+0x24>
 800767e:	4ba5      	ldr	r3, [pc, #660]	; (8007914 <tcp_process+0x2ac>)
 8007680:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007684:	49a4      	ldr	r1, [pc, #656]	; (8007918 <tcp_process+0x2b0>)
 8007686:	48a5      	ldr	r0, [pc, #660]	; (800791c <tcp_process+0x2b4>)
 8007688:	f008 fd7a 	bl	8010180 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800768c:	4ba4      	ldr	r3, [pc, #656]	; (8007920 <tcp_process+0x2b8>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d04e      	beq.n	8007736 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7d1b      	ldrb	r3, [r3, #20]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d108      	bne.n	80076b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076a4:	4b9f      	ldr	r3, [pc, #636]	; (8007924 <tcp_process+0x2bc>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d123      	bne.n	80076f4 <tcp_process+0x8c>
        acceptable = 1;
 80076ac:	2301      	movs	r3, #1
 80076ae:	77fb      	strb	r3, [r7, #31]
 80076b0:	e020      	b.n	80076f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b6:	4b9c      	ldr	r3, [pc, #624]	; (8007928 <tcp_process+0x2c0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d102      	bne.n	80076c4 <tcp_process+0x5c>
        acceptable = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	e017      	b.n	80076f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80076c4:	4b98      	ldr	r3, [pc, #608]	; (8007928 <tcp_process+0x2c0>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	db10      	blt.n	80076f4 <tcp_process+0x8c>
 80076d2:	4b95      	ldr	r3, [pc, #596]	; (8007928 <tcp_process+0x2c0>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076de:	440b      	add	r3, r1
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dc06      	bgt.n	80076f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8b5b      	ldrh	r3, [r3, #26]
 80076ea:	f043 0302 	orr.w	r3, r3, #2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80076f4:	7ffb      	ldrb	r3, [r7, #31]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01b      	beq.n	8007732 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7d1b      	ldrb	r3, [r3, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <tcp_process+0xa8>
 8007702:	4b84      	ldr	r3, [pc, #528]	; (8007914 <tcp_process+0x2ac>)
 8007704:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007708:	4988      	ldr	r1, [pc, #544]	; (800792c <tcp_process+0x2c4>)
 800770a:	4884      	ldr	r0, [pc, #528]	; (800791c <tcp_process+0x2b4>)
 800770c:	f008 fd38 	bl	8010180 <iprintf>
      recv_flags |= TF_RESET;
 8007710:	4b87      	ldr	r3, [pc, #540]	; (8007930 <tcp_process+0x2c8>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f043 0308 	orr.w	r3, r3, #8
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b85      	ldr	r3, [pc, #532]	; (8007930 <tcp_process+0x2c8>)
 800771c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8b5b      	ldrh	r3, [r3, #26]
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800772c:	f06f 030d 	mvn.w	r3, #13
 8007730:	e37a      	b.n	8007e28 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	e378      	b.n	8007e28 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007736:	4b7a      	ldr	r3, [pc, #488]	; (8007920 <tcp_process+0x2b8>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d010      	beq.n	8007764 <tcp_process+0xfc>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7d1b      	ldrb	r3, [r3, #20]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d00c      	beq.n	8007764 <tcp_process+0xfc>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7d1b      	ldrb	r3, [r3, #20]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d008      	beq.n	8007764 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8b5b      	ldrh	r3, [r3, #26]
 8007756:	f043 0302 	orr.w	r3, r3, #2
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	e361      	b.n	8007e28 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8b5b      	ldrh	r3, [r3, #26]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007770:	4b70      	ldr	r3, [pc, #448]	; (8007934 <tcp_process+0x2cc>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fc2d 	bl	8008fe8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7d1b      	ldrb	r3, [r3, #20]
 8007792:	3b02      	subs	r3, #2
 8007794:	2b07      	cmp	r3, #7
 8007796:	f200 8337 	bhi.w	8007e08 <tcp_process+0x7a0>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <tcp_process+0x138>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080079f1 	.word	0x080079f1
 80077a8:	08007b69 	.word	0x08007b69
 80077ac:	08007b93 	.word	0x08007b93
 80077b0:	08007cb7 	.word	0x08007cb7
 80077b4:	08007b69 	.word	0x08007b69
 80077b8:	08007d43 	.word	0x08007d43
 80077bc:	08007dd3 	.word	0x08007dd3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80077c0:	4b57      	ldr	r3, [pc, #348]	; (8007920 <tcp_process+0x2b8>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80e4 	beq.w	8007996 <tcp_process+0x32e>
 80077ce:	4b54      	ldr	r3, [pc, #336]	; (8007920 <tcp_process+0x2b8>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80dd 	beq.w	8007996 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	4b50      	ldr	r3, [pc, #320]	; (8007924 <tcp_process+0x2bc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f040 80d5 	bne.w	8007996 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80077ec:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <tcp_process+0x2c0>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80077fe:	4b49      	ldr	r3, [pc, #292]	; (8007924 <tcp_process+0x2bc>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007806:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <tcp_process+0x2d0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	89db      	ldrh	r3, [r3, #14]
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007820:	4b41      	ldr	r3, [pc, #260]	; (8007928 <tcp_process+0x2c0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	1e5a      	subs	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2204      	movs	r2, #4
 800782e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f007 f825 	bl	800e888 <ip4_route>
 800783e:	4601      	mov	r1, r0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	461a      	mov	r2, r3
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff f886 	bl	8006958 <tcp_eff_send_mss_netif>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007858:	009a      	lsls	r2, r3, #2
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	f241 111c 	movw	r1, #4380	; 0x111c
 8007864:	428b      	cmp	r3, r1
 8007866:	bf38      	it	cc
 8007868:	460b      	movcc	r3, r1
 800786a:	429a      	cmp	r2, r3
 800786c:	d204      	bcs.n	8007878 <tcp_process+0x210>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	b29b      	uxth	r3, r3
 8007876:	e00d      	b.n	8007894 <tcp_process+0x22c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007882:	4293      	cmp	r3, r2
 8007884:	d904      	bls.n	8007890 <tcp_process+0x228>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	b29b      	uxth	r3, r3
 800788e:	e001      	b.n	8007894 <tcp_process+0x22c>
 8007890:	f241 131c 	movw	r3, #4380	; 0x111c
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <tcp_process+0x24a>
 80078a4:	4b1b      	ldr	r3, [pc, #108]	; (8007914 <tcp_process+0x2ac>)
 80078a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80078aa:	4924      	ldr	r1, [pc, #144]	; (800793c <tcp_process+0x2d4>)
 80078ac:	481b      	ldr	r0, [pc, #108]	; (800791c <tcp_process+0x2b4>)
 80078ae:	f008 fc67 	bl	8010180 <iprintf>
        --pcb->snd_queuelen;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d111      	bne.n	80078f2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d2:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <tcp_process+0x280>
 80078da:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <tcp_process+0x2ac>)
 80078dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80078e0:	4917      	ldr	r1, [pc, #92]	; (8007940 <tcp_process+0x2d8>)
 80078e2:	480e      	ldr	r0, [pc, #56]	; (800791c <tcp_process+0x2b4>)
 80078e4:	f008 fc4c 	bl	8010180 <iprintf>
          pcb->unsent = rseg->next;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80078f0:	e003      	b.n	80078fa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f7fe fd36 	bl	800636c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	2b00      	cmp	r3, #0
 8007906:	d11d      	bne.n	8007944 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800790e:	861a      	strh	r2, [r3, #48]	; 0x30
 8007910:	e01f      	b.n	8007952 <tcp_process+0x2ea>
 8007912:	bf00      	nop
 8007914:	080125d0 	.word	0x080125d0
 8007918:	08012808 	.word	0x08012808
 800791c:	0801261c 	.word	0x0801261c
 8007920:	20000100 	.word	0x20000100
 8007924:	200000f8 	.word	0x200000f8
 8007928:	200000f4 	.word	0x200000f4
 800792c:	08012824 	.word	0x08012824
 8007930:	20000101 	.word	0x20000101
 8007934:	2000694c 	.word	0x2000694c
 8007938:	200000e4 	.word	0x200000e4
 800793c:	08012844 	.word	0x08012844
 8007940:	0801285c 	.word	0x0801285c
        } else {
          pcb->rtime = 0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <tcp_process+0x30a>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6910      	ldr	r0, [r2, #16]
 8007966:	2200      	movs	r2, #0
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4798      	blx	r3
 800796c:	4603      	mov	r3, r0
 800796e:	77bb      	strb	r3, [r7, #30]
 8007970:	e001      	b.n	8007976 <tcp_process+0x30e>
 8007972:	2300      	movs	r3, #0
 8007974:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8007976:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800797a:	f113 0f0d 	cmn.w	r3, #13
 800797e:	d102      	bne.n	8007986 <tcp_process+0x31e>
          return ERR_ABRT;
 8007980:	f06f 030c 	mvn.w	r3, #12
 8007984:	e250      	b.n	8007e28 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8b5b      	ldrh	r3, [r3, #26]
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007994:	e23a      	b.n	8007e0c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007996:	4b9d      	ldr	r3, [pc, #628]	; (8007c0c <tcp_process+0x5a4>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8234 	beq.w	8007e0c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079a4:	4b9a      	ldr	r3, [pc, #616]	; (8007c10 <tcp_process+0x5a8>)
 80079a6:	6819      	ldr	r1, [r3, #0]
 80079a8:	4b9a      	ldr	r3, [pc, #616]	; (8007c14 <tcp_process+0x5ac>)
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	4b9a      	ldr	r3, [pc, #616]	; (8007c18 <tcp_process+0x5b0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079b4:	4b99      	ldr	r3, [pc, #612]	; (8007c1c <tcp_process+0x5b4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079b8:	885b      	ldrh	r3, [r3, #2]
 80079ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079bc:	4a97      	ldr	r2, [pc, #604]	; (8007c1c <tcp_process+0x5b4>)
 80079be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079c0:	8812      	ldrh	r2, [r2, #0]
 80079c2:	b292      	uxth	r2, r2
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	4b95      	ldr	r3, [pc, #596]	; (8007c20 <tcp_process+0x5b8>)
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	4b95      	ldr	r3, [pc, #596]	; (8007c24 <tcp_process+0x5bc>)
 80079ce:	4602      	mov	r2, r0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f002 fca5 	bl	800a320 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079dc:	2b05      	cmp	r3, #5
 80079de:	f200 8215 	bhi.w	8007e0c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f002 fa65 	bl	8009eb8 <tcp_rexmit_rto>
      break;
 80079ee:	e20d      	b.n	8007e0c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80079f0:	4b86      	ldr	r3, [pc, #536]	; (8007c0c <tcp_process+0x5a4>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a1 	beq.w	8007b40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079fe:	4b84      	ldr	r3, [pc, #528]	; (8007c10 <tcp_process+0x5a8>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	db7e      	blt.n	8007b0c <tcp_process+0x4a4>
 8007a0e:	4b80      	ldr	r3, [pc, #512]	; (8007c10 <tcp_process+0x5a8>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dc77      	bgt.n	8007b0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007a2a:	23fa      	movs	r3, #250	; 0xfa
 8007a2c:	77bb      	strb	r3, [r7, #30]
 8007a2e:	e01d      	b.n	8007a6c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <tcp_process+0x3e0>
 8007a3a:	4b7b      	ldr	r3, [pc, #492]	; (8007c28 <tcp_process+0x5c0>)
 8007a3c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007a40:	497a      	ldr	r1, [pc, #488]	; (8007c2c <tcp_process+0x5c4>)
 8007a42:	487b      	ldr	r0, [pc, #492]	; (8007c30 <tcp_process+0x5c8>)
 8007a44:	f008 fb9c 	bl	8010180 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <tcp_process+0x400>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6910      	ldr	r0, [r2, #16]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	77bb      	strb	r3, [r7, #30]
 8007a66:	e001      	b.n	8007a6c <tcp_process+0x404>
 8007a68:	23f0      	movs	r3, #240	; 0xf0
 8007a6a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8007a6c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007a74:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007a78:	f113 0f0d 	cmn.w	r3, #13
 8007a7c:	d002      	beq.n	8007a84 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fd ff8c 	bl	800599c <tcp_abort>
            }
            return ERR_ABRT;
 8007a84:	f06f 030c 	mvn.w	r3, #12
 8007a88:	e1ce      	b.n	8007e28 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fae0 	bl	8008050 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007a90:	4b68      	ldr	r3, [pc, #416]	; (8007c34 <tcp_process+0x5cc>)
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <tcp_process+0x43c>
            recv_acked--;
 8007a98:	4b66      	ldr	r3, [pc, #408]	; (8007c34 <tcp_process+0x5cc>)
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b64      	ldr	r3, [pc, #400]	; (8007c34 <tcp_process+0x5cc>)
 8007aa2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aa8:	009a      	lsls	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	f241 111c 	movw	r1, #4380	; 0x111c
 8007ab4:	428b      	cmp	r3, r1
 8007ab6:	bf38      	it	cc
 8007ab8:	460b      	movcc	r3, r1
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d204      	bcs.n	8007ac8 <tcp_process+0x460>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	e00d      	b.n	8007ae4 <tcp_process+0x47c>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	f241 121c 	movw	r2, #4380	; 0x111c
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d904      	bls.n	8007ae0 <tcp_process+0x478>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	e001      	b.n	8007ae4 <tcp_process+0x47c>
 8007ae0:	f241 131c 	movw	r3, #4380	; 0x111c
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007aea:	4b53      	ldr	r3, [pc, #332]	; (8007c38 <tcp_process+0x5d0>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d037      	beq.n	8007b66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	8b5b      	ldrh	r3, [r3, #26]
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2207      	movs	r2, #7
 8007b08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007b0a:	e02c      	b.n	8007b66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b0c:	4b40      	ldr	r3, [pc, #256]	; (8007c10 <tcp_process+0x5a8>)
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	4b40      	ldr	r3, [pc, #256]	; (8007c14 <tcp_process+0x5ac>)
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	4b40      	ldr	r3, [pc, #256]	; (8007c18 <tcp_process+0x5b0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b1c:	4b3f      	ldr	r3, [pc, #252]	; (8007c1c <tcp_process+0x5b4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b20:	885b      	ldrh	r3, [r3, #2]
 8007b22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b24:	4a3d      	ldr	r2, [pc, #244]	; (8007c1c <tcp_process+0x5b4>)
 8007b26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b28:	8812      	ldrh	r2, [r2, #0]
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	4b3b      	ldr	r3, [pc, #236]	; (8007c20 <tcp_process+0x5b8>)
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <tcp_process+0x5bc>)
 8007b36:	4602      	mov	r2, r0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f002 fbf1 	bl	800a320 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b3e:	e167      	b.n	8007e10 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <tcp_process+0x5a4>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8161 	beq.w	8007e10 <tcp_process+0x7a8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	1e5a      	subs	r2, r3, #1
 8007b54:	4b30      	ldr	r3, [pc, #192]	; (8007c18 <tcp_process+0x5b0>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	f040 8159 	bne.w	8007e10 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f002 f9cc 	bl	8009efc <tcp_rexmit>
      break;
 8007b64:	e154      	b.n	8007e10 <tcp_process+0x7a8>
 8007b66:	e153      	b.n	8007e10 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa71 	bl	8008050 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b6e:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <tcp_process+0x5d0>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 814c 	beq.w	8007e14 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8b5b      	ldrh	r3, [r3, #26]
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2207      	movs	r2, #7
 8007b8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b90:	e140      	b.n	8007e14 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa5c 	bl	8008050 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <tcp_process+0x5d0>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d071      	beq.n	8007c88 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ba4:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <tcp_process+0x5a4>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d060      	beq.n	8007c72 <tcp_process+0x60a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bb4:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <tcp_process+0x5a8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d15a      	bne.n	8007c72 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d156      	bne.n	8007c72 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8b5b      	ldrh	r3, [r3, #26]
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe fdb6 	bl	8006744 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007bd8:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <tcp_process+0x5d4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d105      	bne.n	8007bee <tcp_process+0x586>
 8007be2:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <tcp_process+0x5d4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	4a14      	ldr	r2, [pc, #80]	; (8007c3c <tcp_process+0x5d4>)
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	e02e      	b.n	8007c4c <tcp_process+0x5e4>
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <tcp_process+0x5d4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	e027      	b.n	8007c46 <tcp_process+0x5de>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d11f      	bne.n	8007c40 <tcp_process+0x5d8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	60da      	str	r2, [r3, #12]
 8007c08:	e020      	b.n	8007c4c <tcp_process+0x5e4>
 8007c0a:	bf00      	nop
 8007c0c:	20000100 	.word	0x20000100
 8007c10:	200000f8 	.word	0x200000f8
 8007c14:	200000fe 	.word	0x200000fe
 8007c18:	200000f4 	.word	0x200000f4
 8007c1c:	200000e4 	.word	0x200000e4
 8007c20:	200033a0 	.word	0x200033a0
 8007c24:	200033a4 	.word	0x200033a4
 8007c28:	080125d0 	.word	0x080125d0
 8007c2c:	08012870 	.word	0x08012870
 8007c30:	0801261c 	.word	0x0801261c
 8007c34:	200000fc 	.word	0x200000fc
 8007c38:	20000101 	.word	0x20000101
 8007c3c:	20006948 	.word	0x20006948
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1d4      	bne.n	8007bf6 <tcp_process+0x58e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	4b77      	ldr	r3, [pc, #476]	; (8007e30 <tcp_process+0x7c8>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	220a      	movs	r2, #10
 8007c5c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c5e:	4b75      	ldr	r3, [pc, #468]	; (8007e34 <tcp_process+0x7cc>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	4a73      	ldr	r2, [pc, #460]	; (8007e34 <tcp_process+0x7cc>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	f002 fd1c 	bl	800a6a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007c70:	e0d2      	b.n	8007e18 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8b5b      	ldrh	r3, [r3, #26]
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2208      	movs	r2, #8
 8007c84:	751a      	strb	r2, [r3, #20]
      break;
 8007c86:	e0c7      	b.n	8007e18 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c88:	4b6b      	ldr	r3, [pc, #428]	; (8007e38 <tcp_process+0x7d0>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80c1 	beq.w	8007e18 <tcp_process+0x7b0>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c9a:	4b68      	ldr	r3, [pc, #416]	; (8007e3c <tcp_process+0x7d4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	f040 80ba 	bne.w	8007e18 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f040 80b5 	bne.w	8007e18 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2206      	movs	r2, #6
 8007cb2:	751a      	strb	r2, [r3, #20]
      break;
 8007cb4:	e0b0      	b.n	8007e18 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9ca 	bl	8008050 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007cbc:	4b60      	ldr	r3, [pc, #384]	; (8007e40 <tcp_process+0x7d8>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80a9 	beq.w	8007e1c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8b5b      	ldrh	r3, [r3, #26]
 8007cce:	f043 0302 	orr.w	r3, r3, #2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe fd33 	bl	8006744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007cde:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <tcp_process+0x7dc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d105      	bne.n	8007cf4 <tcp_process+0x68c>
 8007ce8:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <tcp_process+0x7dc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	4a55      	ldr	r2, [pc, #340]	; (8007e44 <tcp_process+0x7dc>)
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e013      	b.n	8007d1c <tcp_process+0x6b4>
 8007cf4:	4b53      	ldr	r3, [pc, #332]	; (8007e44 <tcp_process+0x7dc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e00c      	b.n	8007d16 <tcp_process+0x6ae>
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d104      	bne.n	8007d10 <tcp_process+0x6a8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e005      	b.n	8007d1c <tcp_process+0x6b4>
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1ef      	bne.n	8007cfc <tcp_process+0x694>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60da      	str	r2, [r3, #12]
 8007d22:	4b43      	ldr	r3, [pc, #268]	; (8007e30 <tcp_process+0x7c8>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d2e:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <tcp_process+0x7cc>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	4a3f      	ldr	r2, [pc, #252]	; (8007e34 <tcp_process+0x7cc>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	f002 fcb4 	bl	800a6a8 <tcp_timer_needed>
      }
      break;
 8007d40:	e06c      	b.n	8007e1c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f984 	bl	8008050 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d48:	4b3b      	ldr	r3, [pc, #236]	; (8007e38 <tcp_process+0x7d0>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d065      	beq.n	8007e20 <tcp_process+0x7b8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d58:	4b38      	ldr	r3, [pc, #224]	; (8007e3c <tcp_process+0x7d4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d15f      	bne.n	8007e20 <tcp_process+0x7b8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d15b      	bne.n	8007e20 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fe fceb 	bl	8006744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d6e:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <tcp_process+0x7dc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d105      	bne.n	8007d84 <tcp_process+0x71c>
 8007d78:	4b32      	ldr	r3, [pc, #200]	; (8007e44 <tcp_process+0x7dc>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	4a31      	ldr	r2, [pc, #196]	; (8007e44 <tcp_process+0x7dc>)
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e013      	b.n	8007dac <tcp_process+0x744>
 8007d84:	4b2f      	ldr	r3, [pc, #188]	; (8007e44 <tcp_process+0x7dc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e00c      	b.n	8007da6 <tcp_process+0x73e>
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d104      	bne.n	8007da0 <tcp_process+0x738>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	60da      	str	r2, [r3, #12]
 8007d9e:	e005      	b.n	8007dac <tcp_process+0x744>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1ef      	bne.n	8007d8c <tcp_process+0x724>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	4b1f      	ldr	r3, [pc, #124]	; (8007e30 <tcp_process+0x7c8>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	220a      	movs	r2, #10
 8007dbc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <tcp_process+0x7cc>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	4a1b      	ldr	r2, [pc, #108]	; (8007e34 <tcp_process+0x7cc>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	f002 fc6c 	bl	800a6a8 <tcp_timer_needed>
      }
      break;
 8007dd0:	e026      	b.n	8007e20 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f93c 	bl	8008050 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <tcp_process+0x7d0>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01f      	beq.n	8007e24 <tcp_process+0x7bc>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007de8:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <tcp_process+0x7d4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d119      	bne.n	8007e24 <tcp_process+0x7bc>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d115      	bne.n	8007e24 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <tcp_process+0x7d8>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f043 0310 	orr.w	r3, r3, #16
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <tcp_process+0x7d8>)
 8007e04:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007e06:	e00d      	b.n	8007e24 <tcp_process+0x7bc>
    default:
      break;
 8007e08:	bf00      	nop
 8007e0a:	e00c      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e00a      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e10:	bf00      	nop
 8007e12:	e008      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e14:	bf00      	nop
 8007e16:	e006      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e004      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e002      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <tcp_process+0x7be>
      break;
 8007e24:	bf00      	nop
  }
  return ERR_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3724      	adds	r7, #36	; 0x24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd90      	pop	{r4, r7, pc}
 8007e30:	20006944 	.word	0x20006944
 8007e34:	20006958 	.word	0x20006958
 8007e38:	20000100 	.word	0x20000100
 8007e3c:	200000f8 	.word	0x200000f8
 8007e40:	20000101 	.word	0x20000101
 8007e44:	20006948 	.word	0x20006948

08007e48 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <tcp_oos_insert_segment+0x1e>
 8007e58:	4b3b      	ldr	r3, [pc, #236]	; (8007f48 <tcp_oos_insert_segment+0x100>)
 8007e5a:	f240 421f 	movw	r2, #1055	; 0x41f
 8007e5e:	493b      	ldr	r1, [pc, #236]	; (8007f4c <tcp_oos_insert_segment+0x104>)
 8007e60:	483b      	ldr	r0, [pc, #236]	; (8007f50 <tcp_oos_insert_segment+0x108>)
 8007e62:	f008 f98d 	bl	8010180 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	899b      	ldrh	r3, [r3, #12]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fb fc8f 	bl	8003792 <lwip_htons>
 8007e74:	4603      	mov	r3, r0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d028      	beq.n	8007ed2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f7fe fa5f 	bl	8006344 <tcp_segs_free>
    next = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	603b      	str	r3, [r7, #0]
 8007e8a:	e056      	b.n	8007f3a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	899b      	ldrh	r3, [r3, #12]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb fc7c 	bl	8003792 <lwip_htons>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	899b      	ldrh	r3, [r3, #12]
 8007eac:	b29c      	uxth	r4, r3
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f7fb fc6f 	bl	8003792 <lwip_htons>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4322      	orrs	r2, r4
 8007ebe:	b292      	uxth	r2, r2
 8007ec0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7fe fa4d 	bl	800636c <tcp_seg_free>
    while (next &&
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	891b      	ldrh	r3, [r3, #8]
 8007edc:	461a      	mov	r2, r3
 8007ede:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <tcp_oos_insert_segment+0x10c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	441a      	add	r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	8909      	ldrh	r1, [r1, #8]
 8007eee:	440b      	add	r3, r1
 8007ef0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	daca      	bge.n	8007e8c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01e      	beq.n	8007f3a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	891b      	ldrh	r3, [r3, #8]
 8007f00:	461a      	mov	r2, r3
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <tcp_oos_insert_segment+0x10c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	441a      	add	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dd12      	ble.n	8007f3a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <tcp_oos_insert_segment+0x10c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	891b      	ldrh	r3, [r3, #8]
 8007f32:	4619      	mov	r1, r3
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7fc fe1b 	bl	8004b70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd90      	pop	{r4, r7, pc}
 8007f48:	080125d0 	.word	0x080125d0
 8007f4c:	08012890 	.word	0x08012890
 8007f50:	0801261c 	.word	0x0801261c
 8007f54:	200000f4 	.word	0x200000f4

08007f58 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007f58:	b5b0      	push	{r4, r5, r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007f66:	e03e      	b.n	8007fe6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd f808 	bl	8004f8c <pbuf_clen>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f86:	8a7a      	ldrh	r2, [r7, #18]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d906      	bls.n	8007f9a <tcp_free_acked_segments+0x42>
 8007f8c:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <tcp_free_acked_segments+0xe0>)
 8007f8e:	f240 4257 	movw	r2, #1111	; 0x457
 8007f92:	492a      	ldr	r1, [pc, #168]	; (800803c <tcp_free_acked_segments+0xe4>)
 8007f94:	482a      	ldr	r0, [pc, #168]	; (8008040 <tcp_free_acked_segments+0xe8>)
 8007f96:	f008 f8f3 	bl	8010180 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007fa0:	8a7b      	ldrh	r3, [r7, #18]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	891a      	ldrh	r2, [r3, #8]
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <tcp_free_acked_segments+0xec>)
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	4b22      	ldr	r3, [pc, #136]	; (8008044 <tcp_free_acked_segments+0xec>)
 8007fba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007fbc:	6978      	ldr	r0, [r7, #20]
 8007fbe:	f7fe f9d5 	bl	800636c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <tcp_free_acked_segments+0x8e>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <tcp_free_acked_segments+0x8e>
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <tcp_free_acked_segments+0xe0>)
 8007fda:	f240 4262 	movw	r2, #1122	; 0x462
 8007fde:	491a      	ldr	r1, [pc, #104]	; (8008048 <tcp_free_acked_segments+0xf0>)
 8007fe0:	4817      	ldr	r0, [pc, #92]	; (8008040 <tcp_free_acked_segments+0xe8>)
 8007fe2:	f008 f8cd 	bl	8010180 <iprintf>
  while (seg_list != NULL &&
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d020      	beq.n	800802e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fb fbe2 	bl	80037bc <lwip_htonl>
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	891b      	ldrh	r3, [r3, #8]
 8007ffe:	461d      	mov	r5, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	899b      	ldrh	r3, [r3, #12]
 8008006:	b29b      	uxth	r3, r3
 8008008:	4618      	mov	r0, r3
 800800a:	f7fb fbc2 	bl	8003792 <lwip_htons>
 800800e:	4603      	mov	r3, r0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <tcp_free_acked_segments+0xc6>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <tcp_free_acked_segments+0xc8>
 800801e:	2300      	movs	r3, #0
 8008020:	442b      	add	r3, r5
 8008022:	18e2      	adds	r2, r4, r3
 8008024:	4b09      	ldr	r3, [pc, #36]	; (800804c <tcp_free_acked_segments+0xf4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd9c      	ble.n	8007f68 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800802e:	68bb      	ldr	r3, [r7, #8]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bdb0      	pop	{r4, r5, r7, pc}
 8008038:	080125d0 	.word	0x080125d0
 800803c:	080128b8 	.word	0x080128b8
 8008040:	0801261c 	.word	0x0801261c
 8008044:	200000fc 	.word	0x200000fc
 8008048:	080128e0 	.word	0x080128e0
 800804c:	200000f8 	.word	0x200000f8

08008050 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008050:	b5b0      	push	{r4, r5, r7, lr}
 8008052:	b094      	sub	sp, #80	; 0x50
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <tcp_receive+0x20>
 8008062:	4ba6      	ldr	r3, [pc, #664]	; (80082fc <tcp_receive+0x2ac>)
 8008064:	f240 427b 	movw	r2, #1147	; 0x47b
 8008068:	49a5      	ldr	r1, [pc, #660]	; (8008300 <tcp_receive+0x2b0>)
 800806a:	48a6      	ldr	r0, [pc, #664]	; (8008304 <tcp_receive+0x2b4>)
 800806c:	f008 f888 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7d1b      	ldrb	r3, [r3, #20]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d806      	bhi.n	8008086 <tcp_receive+0x36>
 8008078:	4ba0      	ldr	r3, [pc, #640]	; (80082fc <tcp_receive+0x2ac>)
 800807a:	f240 427c 	movw	r2, #1148	; 0x47c
 800807e:	49a2      	ldr	r1, [pc, #648]	; (8008308 <tcp_receive+0x2b8>)
 8008080:	48a0      	ldr	r0, [pc, #640]	; (8008304 <tcp_receive+0x2b4>)
 8008082:	f008 f87d 	bl	8010180 <iprintf>

  if (flags & TCP_ACK) {
 8008086:	4ba1      	ldr	r3, [pc, #644]	; (800830c <tcp_receive+0x2bc>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8263 	beq.w	800855a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a0:	4413      	add	r3, r2
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a8:	4b99      	ldr	r3, [pc, #612]	; (8008310 <tcp_receive+0x2c0>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	db1b      	blt.n	80080ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080b6:	4b96      	ldr	r3, [pc, #600]	; (8008310 <tcp_receive+0x2c0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d106      	bne.n	80080cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080c2:	4b94      	ldr	r3, [pc, #592]	; (8008314 <tcp_receive+0x2c4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db0e      	blt.n	80080ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080d0:	4b90      	ldr	r3, [pc, #576]	; (8008314 <tcp_receive+0x2c4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d125      	bne.n	8008124 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080d8:	4b8f      	ldr	r3, [pc, #572]	; (8008318 <tcp_receive+0x2c8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	89db      	ldrh	r3, [r3, #14]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d91c      	bls.n	8008124 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080ea:	4b8b      	ldr	r3, [pc, #556]	; (8008318 <tcp_receive+0x2c8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	89db      	ldrh	r3, [r3, #14]
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008104:	429a      	cmp	r2, r3
 8008106:	d205      	bcs.n	8008114 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008114:	4b7e      	ldr	r3, [pc, #504]	; (8008310 <tcp_receive+0x2c0>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800811c:	4b7d      	ldr	r3, [pc, #500]	; (8008314 <tcp_receive+0x2c4>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008124:	4b7b      	ldr	r3, [pc, #492]	; (8008314 <tcp_receive+0x2c4>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc58      	bgt.n	80081e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008132:	4b7a      	ldr	r3, [pc, #488]	; (800831c <tcp_receive+0x2cc>)
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d14b      	bne.n	80081d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008144:	4413      	add	r3, r2
 8008146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008148:	429a      	cmp	r2, r3
 800814a:	d142      	bne.n	80081d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	db3d      	blt.n	80081d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815a:	4b6e      	ldr	r3, [pc, #440]	; (8008314 <tcp_receive+0x2c4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d137      	bne.n	80081d2 <tcp_receive+0x182>
              found_dupack = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800816c:	2bff      	cmp	r3, #255	; 0xff
 800816e:	d007      	beq.n	8008180 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008176:	3301      	adds	r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008186:	2b03      	cmp	r3, #3
 8008188:	d91b      	bls.n	80081c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008194:	4413      	add	r3, r2
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800819e:	429a      	cmp	r2, r3
 80081a0:	d30a      	bcc.n	80081b8 <tcp_receive+0x168>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081ac:	4413      	add	r3, r2
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081b6:	e004      	b.n	80081c2 <tcp_receive+0x172>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d902      	bls.n	80081d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 ff01 	bl	8009fd4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80081d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f040 8160 	bne.w	800849a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e2:	e15a      	b.n	800849a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80081e4:	4b4b      	ldr	r3, [pc, #300]	; (8008314 <tcp_receive+0x2c4>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f2c0 814d 	blt.w	8008490 <tcp_receive+0x440>
 80081f6:	4b47      	ldr	r3, [pc, #284]	; (8008314 <tcp_receive+0x2c4>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f300 8145 	bgt.w	8008490 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8b5b      	ldrh	r3, [r3, #26]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	8b5b      	ldrh	r3, [r3, #26]
 8008216:	f023 0304 	bic.w	r3, r3, #4
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008242:	10db      	asrs	r3, r3, #3
 8008244:	b21b      	sxth	r3, r3
 8008246:	b29a      	uxth	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800824e:	b29b      	uxth	r3, r3
 8008250:	4413      	add	r3, r2
 8008252:	b29b      	uxth	r3, r3
 8008254:	b21a      	sxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800825c:	4b2d      	ldr	r3, [pc, #180]	; (8008314 <tcp_receive+0x2c4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	b29b      	uxth	r3, r3
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008274:	4b27      	ldr	r3, [pc, #156]	; (8008314 <tcp_receive+0x2c4>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	2b03      	cmp	r3, #3
 8008282:	f240 8096 	bls.w	80083b2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008292:	429a      	cmp	r2, r3
 8008294:	d244      	bcs.n	8008320 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	8b5b      	ldrh	r3, [r3, #26]
 800829a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <tcp_receive+0x256>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <tcp_receive+0x258>
 80082a6:	2302      	movs	r3, #2
 80082a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80082ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082b6:	fb12 f303 	smulbb	r3, r2, r3
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082be:	4293      	cmp	r3, r2
 80082c0:	bf28      	it	cs
 80082c2:	4613      	movcs	r3, r2
 80082c4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082ce:	4413      	add	r3, r2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082d8:	429a      	cmp	r2, r3
 80082da:	d309      	bcc.n	80082f0 <tcp_receive+0x2a0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082e4:	4413      	add	r3, r2
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082ee:	e060      	b.n	80083b2 <tcp_receive+0x362>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082fa:	e05a      	b.n	80083b2 <tcp_receive+0x362>
 80082fc:	080125d0 	.word	0x080125d0
 8008300:	08012900 	.word	0x08012900
 8008304:	0801261c 	.word	0x0801261c
 8008308:	0801291c 	.word	0x0801291c
 800830c:	20000100 	.word	0x20000100
 8008310:	200000f4 	.word	0x200000f4
 8008314:	200000f8 	.word	0x200000f8
 8008318:	200000e4 	.word	0x200000e4
 800831c:	200000fe 	.word	0x200000fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008328:	4413      	add	r3, r2
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008332:	429a      	cmp	r2, r3
 8008334:	d309      	bcc.n	800834a <tcp_receive+0x2fa>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800833c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800833e:	4413      	add	r3, r2
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008348:	e004      	b.n	8008354 <tcp_receive+0x304>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008360:	429a      	cmp	r2, r3
 8008362:	d326      	bcc.n	80083b2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	b29a      	uxth	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008384:	4413      	add	r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800838e:	429a      	cmp	r2, r3
 8008390:	d30a      	bcc.n	80083a8 <tcp_receive+0x358>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800839c:	4413      	add	r3, r2
 800839e:	b29a      	uxth	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083a6:	e004      	b.n	80083b2 <tcp_receive+0x362>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ba:	4a98      	ldr	r2, [pc, #608]	; (800861c <tcp_receive+0x5cc>)
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff fdcb 	bl	8007f58 <tcp_free_acked_segments>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	4a93      	ldr	r2, [pc, #588]	; (8008620 <tcp_receive+0x5d0>)
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fdc0 	bl	8007f58 <tcp_free_acked_segments>
 80083d8:	4602      	mov	r2, r0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80083ee:	e002      	b.n	80083f6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008412:	4b84      	ldr	r3, [pc, #528]	; (8008624 <tcp_receive+0x5d4>)
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	4413      	add	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	8b5b      	ldrh	r3, [r3, #26]
 8008424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008428:	2b00      	cmp	r3, #0
 800842a:	d035      	beq.n	8008498 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008430:	2b00      	cmp	r3, #0
 8008432:	d118      	bne.n	8008466 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00c      	beq.n	8008456 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	f7fb f9b7 	bl	80037bc <lwip_htonl>
 800844e:	4603      	mov	r3, r0
 8008450:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008452:	2b00      	cmp	r3, #0
 8008454:	dc20      	bgt.n	8008498 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8b5b      	ldrh	r3, [r3, #26]
 800845a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800845e:	b29a      	uxth	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008464:	e018      	b.n	8008498 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fb f9a2 	bl	80037bc <lwip_htonl>
 8008478:	4603      	mov	r3, r0
 800847a:	1ae3      	subs	r3, r4, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	dc0b      	bgt.n	8008498 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8b5b      	ldrh	r3, [r3, #26]
 8008484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008488:	b29a      	uxth	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800848e:	e003      	b.n	8008498 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 ff97 	bl	800a3c4 <tcp_send_empty_ack>
 8008496:	e000      	b.n	800849a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008498:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d05b      	beq.n	800855a <tcp_receive+0x50a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a6:	4b60      	ldr	r3, [pc, #384]	; (8008628 <tcp_receive+0x5d8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da54      	bge.n	800855a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80084b0:	4b5e      	ldr	r3, [pc, #376]	; (800862c <tcp_receive+0x5dc>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80084c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084ce:	10db      	asrs	r3, r3, #3
 80084d0:	b21b      	sxth	r3, r3
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084e8:	4413      	add	r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	b21a      	sxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80084f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da05      	bge.n	8008506 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80084fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084fe:	425b      	negs	r3, r3
 8008500:	b29b      	uxth	r3, r3
 8008502:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008506:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008510:	109b      	asrs	r3, r3, #2
 8008512:	b21b      	sxth	r3, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	b29b      	uxth	r3, r3
 800851a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800852a:	4413      	add	r3, r2
 800852c:	b29b      	uxth	r3, r3
 800852e:	b21a      	sxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800853a:	10db      	asrs	r3, r3, #3
 800853c:	b21b      	sxth	r3, r3
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008546:	b29b      	uxth	r3, r3
 8008548:	4413      	add	r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	b21a      	sxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <tcp_receive+0x5e0>)
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 84e1 	beq.w	8008f26 <tcp_receive+0xed6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	7d1b      	ldrb	r3, [r3, #20]
 8008568:	2b06      	cmp	r3, #6
 800856a:	f200 84dc 	bhi.w	8008f26 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008572:	4b30      	ldr	r3, [pc, #192]	; (8008634 <tcp_receive+0x5e4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	f2c0 808e 	blt.w	800869c <tcp_receive+0x64c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008584:	4b2a      	ldr	r3, [pc, #168]	; (8008630 <tcp_receive+0x5e0>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	4619      	mov	r1, r3
 800858a:	4b2a      	ldr	r3, [pc, #168]	; (8008634 <tcp_receive+0x5e4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	440b      	add	r3, r1
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	3301      	adds	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	f300 8081 	bgt.w	800869c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800859a:	4b27      	ldr	r3, [pc, #156]	; (8008638 <tcp_receive+0x5e8>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <tcp_receive+0x5e4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80085ac:	4b22      	ldr	r3, [pc, #136]	; (8008638 <tcp_receive+0x5e8>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <tcp_receive+0x572>
 80085b4:	4b21      	ldr	r3, [pc, #132]	; (800863c <tcp_receive+0x5ec>)
 80085b6:	f240 5294 	movw	r2, #1428	; 0x594
 80085ba:	4921      	ldr	r1, [pc, #132]	; (8008640 <tcp_receive+0x5f0>)
 80085bc:	4821      	ldr	r0, [pc, #132]	; (8008644 <tcp_receive+0x5f4>)
 80085be:	f007 fddf 	bl	8010180 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d906      	bls.n	80085da <tcp_receive+0x58a>
 80085cc:	4b1b      	ldr	r3, [pc, #108]	; (800863c <tcp_receive+0x5ec>)
 80085ce:	f240 5295 	movw	r2, #1429	; 0x595
 80085d2:	491d      	ldr	r1, [pc, #116]	; (8008648 <tcp_receive+0x5f8>)
 80085d4:	481b      	ldr	r0, [pc, #108]	; (8008644 <tcp_receive+0x5f4>)
 80085d6:	f007 fdd3 	bl	8010180 <iprintf>
      off = (u16_t)off32;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80085e0:	4b15      	ldr	r3, [pc, #84]	; (8008638 <tcp_receive+0x5e8>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	891b      	ldrh	r3, [r3, #8]
 80085e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d906      	bls.n	80085fc <tcp_receive+0x5ac>
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <tcp_receive+0x5ec>)
 80085f0:	f240 5297 	movw	r2, #1431	; 0x597
 80085f4:	4915      	ldr	r1, [pc, #84]	; (800864c <tcp_receive+0x5fc>)
 80085f6:	4813      	ldr	r0, [pc, #76]	; (8008644 <tcp_receive+0x5f4>)
 80085f8:	f007 fdc2 	bl	8010180 <iprintf>
      inseg.len -= off;
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <tcp_receive+0x5e8>)
 80085fe:	891a      	ldrh	r2, [r3, #8]
 8008600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	b29a      	uxth	r2, r3
 8008608:	4b0b      	ldr	r3, [pc, #44]	; (8008638 <tcp_receive+0x5e8>)
 800860a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <tcp_receive+0x5e8>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	891a      	ldrh	r2, [r3, #8]
 8008612:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800861a:	e029      	b.n	8008670 <tcp_receive+0x620>
 800861c:	08012938 	.word	0x08012938
 8008620:	08012940 	.word	0x08012940
 8008624:	200000fc 	.word	0x200000fc
 8008628:	200000f8 	.word	0x200000f8
 800862c:	2000694c 	.word	0x2000694c
 8008630:	200000fe 	.word	0x200000fe
 8008634:	200000f4 	.word	0x200000f4
 8008638:	200000d0 	.word	0x200000d0
 800863c:	080125d0 	.word	0x080125d0
 8008640:	08012948 	.word	0x08012948
 8008644:	0801261c 	.word	0x0801261c
 8008648:	08012958 	.word	0x08012958
 800864c:	08012968 	.word	0x08012968
        off -= p->len;
 8008650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008652:	895b      	ldrh	r3, [r3, #10]
 8008654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800865e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008660:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008662:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008666:	2200      	movs	r2, #0
 8008668:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	895b      	ldrh	r3, [r3, #10]
 8008674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008678:	429a      	cmp	r2, r3
 800867a:	d8e9      	bhi.n	8008650 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800867c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008680:	4619      	mov	r1, r3
 8008682:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008684:	f7fc fb74 	bl	8004d70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	4a91      	ldr	r2, [pc, #580]	; (80088d4 <tcp_receive+0x884>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	4b91      	ldr	r3, [pc, #580]	; (80088d8 <tcp_receive+0x888>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	4a8f      	ldr	r2, [pc, #572]	; (80088d4 <tcp_receive+0x884>)
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800869a:	e00d      	b.n	80086b8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800869c:	4b8d      	ldr	r3, [pc, #564]	; (80088d4 <tcp_receive+0x884>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da06      	bge.n	80086b8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8b5b      	ldrh	r3, [r3, #26]
 80086ae:	f043 0302 	orr.w	r3, r3, #2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80086b8:	4b86      	ldr	r3, [pc, #536]	; (80088d4 <tcp_receive+0x884>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 842a 	blt.w	8008f1c <tcp_receive+0xecc>
 80086c8:	4b82      	ldr	r3, [pc, #520]	; (80088d4 <tcp_receive+0x884>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086d4:	440b      	add	r3, r1
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	3301      	adds	r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f300 841e 	bgt.w	8008f1c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e4:	4b7b      	ldr	r3, [pc, #492]	; (80088d4 <tcp_receive+0x884>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	f040 829a 	bne.w	8008c22 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80086ee:	4b7a      	ldr	r3, [pc, #488]	; (80088d8 <tcp_receive+0x888>)
 80086f0:	891c      	ldrh	r4, [r3, #8]
 80086f2:	4b79      	ldr	r3, [pc, #484]	; (80088d8 <tcp_receive+0x888>)
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	899b      	ldrh	r3, [r3, #12]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fb f849 	bl	8003792 <lwip_htons>
 8008700:	4603      	mov	r3, r0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <tcp_receive+0x6c0>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <tcp_receive+0x6c2>
 8008710:	2300      	movs	r3, #0
 8008712:	4423      	add	r3, r4
 8008714:	b29a      	uxth	r2, r3
 8008716:	4b71      	ldr	r3, [pc, #452]	; (80088dc <tcp_receive+0x88c>)
 8008718:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800871e:	4b6f      	ldr	r3, [pc, #444]	; (80088dc <tcp_receive+0x88c>)
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d275      	bcs.n	8008812 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008726:	4b6c      	ldr	r3, [pc, #432]	; (80088d8 <tcp_receive+0x888>)
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	899b      	ldrh	r3, [r3, #12]
 800872c:	b29b      	uxth	r3, r3
 800872e:	4618      	mov	r0, r3
 8008730:	f7fb f82f 	bl	8003792 <lwip_htons>
 8008734:	4603      	mov	r3, r0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01f      	beq.n	8008780 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008740:	4b65      	ldr	r3, [pc, #404]	; (80088d8 <tcp_receive+0x888>)
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	899b      	ldrh	r3, [r3, #12]
 8008746:	b29b      	uxth	r3, r3
 8008748:	b21b      	sxth	r3, r3
 800874a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800874e:	b21c      	sxth	r4, r3
 8008750:	4b61      	ldr	r3, [pc, #388]	; (80088d8 <tcp_receive+0x888>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	b29b      	uxth	r3, r3
 8008758:	4618      	mov	r0, r3
 800875a:	f7fb f81a 	bl	8003792 <lwip_htons>
 800875e:	4603      	mov	r3, r0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	b29b      	uxth	r3, r3
 8008764:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008768:	b29b      	uxth	r3, r3
 800876a:	4618      	mov	r0, r3
 800876c:	f7fb f811 	bl	8003792 <lwip_htons>
 8008770:	4603      	mov	r3, r0
 8008772:	b21b      	sxth	r3, r3
 8008774:	4323      	orrs	r3, r4
 8008776:	b21a      	sxth	r2, r3
 8008778:	4b57      	ldr	r3, [pc, #348]	; (80088d8 <tcp_receive+0x888>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	b292      	uxth	r2, r2
 800877e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008784:	4b54      	ldr	r3, [pc, #336]	; (80088d8 <tcp_receive+0x888>)
 8008786:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008788:	4b53      	ldr	r3, [pc, #332]	; (80088d8 <tcp_receive+0x888>)
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	899b      	ldrh	r3, [r3, #12]
 800878e:	b29b      	uxth	r3, r3
 8008790:	4618      	mov	r0, r3
 8008792:	f7fa fffe 	bl	8003792 <lwip_htons>
 8008796:	4603      	mov	r3, r0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <tcp_receive+0x75e>
            inseg.len -= 1;
 80087a2:	4b4d      	ldr	r3, [pc, #308]	; (80088d8 <tcp_receive+0x888>)
 80087a4:	891b      	ldrh	r3, [r3, #8]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	4b4b      	ldr	r3, [pc, #300]	; (80088d8 <tcp_receive+0x888>)
 80087ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80087ae:	4b4a      	ldr	r3, [pc, #296]	; (80088d8 <tcp_receive+0x888>)
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	4b49      	ldr	r3, [pc, #292]	; (80088d8 <tcp_receive+0x888>)
 80087b4:	891b      	ldrh	r3, [r3, #8]
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fc f9d9 	bl	8004b70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80087be:	4b46      	ldr	r3, [pc, #280]	; (80088d8 <tcp_receive+0x888>)
 80087c0:	891c      	ldrh	r4, [r3, #8]
 80087c2:	4b45      	ldr	r3, [pc, #276]	; (80088d8 <tcp_receive+0x888>)
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	899b      	ldrh	r3, [r3, #12]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fa ffe1 	bl	8003792 <lwip_htons>
 80087d0:	4603      	mov	r3, r0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0303 	and.w	r3, r3, #3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <tcp_receive+0x790>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <tcp_receive+0x792>
 80087e0:	2300      	movs	r3, #0
 80087e2:	4423      	add	r3, r4
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	4b3d      	ldr	r3, [pc, #244]	; (80088dc <tcp_receive+0x88c>)
 80087e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80087ea:	4b3c      	ldr	r3, [pc, #240]	; (80088dc <tcp_receive+0x88c>)
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b38      	ldr	r3, [pc, #224]	; (80088d4 <tcp_receive+0x884>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087fe:	440b      	add	r3, r1
 8008800:	429a      	cmp	r2, r3
 8008802:	d006      	beq.n	8008812 <tcp_receive+0x7c2>
 8008804:	4b36      	ldr	r3, [pc, #216]	; (80088e0 <tcp_receive+0x890>)
 8008806:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800880a:	4936      	ldr	r1, [pc, #216]	; (80088e4 <tcp_receive+0x894>)
 800880c:	4836      	ldr	r0, [pc, #216]	; (80088e8 <tcp_receive+0x898>)
 800880e:	f007 fcb7 	bl	8010180 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80e7 	beq.w	80089ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800881c:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <tcp_receive+0x888>)
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	899b      	ldrh	r3, [r3, #12]
 8008822:	b29b      	uxth	r3, r3
 8008824:	4618      	mov	r0, r3
 8008826:	f7fa ffb4 	bl	8003792 <lwip_htons>
 800882a:	4603      	mov	r3, r0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008836:	e00a      	b.n	800884e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7fd fd8f 	bl	800636c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f0      	bne.n	8008838 <tcp_receive+0x7e8>
 8008856:	e0c8      	b.n	80089ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800885e:	e052      	b.n	8008906 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	899b      	ldrh	r3, [r3, #12]
 8008866:	b29b      	uxth	r3, r3
 8008868:	4618      	mov	r0, r3
 800886a:	f7fa ff92 	bl	8003792 <lwip_htons>
 800886e:	4603      	mov	r3, r0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d03d      	beq.n	80088f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800887a:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <tcp_receive+0x888>)
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	899b      	ldrh	r3, [r3, #12]
 8008880:	b29b      	uxth	r3, r3
 8008882:	4618      	mov	r0, r3
 8008884:	f7fa ff85 	bl	8003792 <lwip_htons>
 8008888:	4603      	mov	r3, r0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008890:	2b00      	cmp	r3, #0
 8008892:	d130      	bne.n	80088f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008894:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <tcp_receive+0x888>)
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	899b      	ldrh	r3, [r3, #12]
 800889a:	b29c      	uxth	r4, r3
 800889c:	2001      	movs	r0, #1
 800889e:	f7fa ff78 	bl	8003792 <lwip_htons>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <tcp_receive+0x888>)
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	4322      	orrs	r2, r4
 80088ac:	b292      	uxth	r2, r2
 80088ae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80088b0:	4b09      	ldr	r3, [pc, #36]	; (80088d8 <tcp_receive+0x888>)
 80088b2:	891c      	ldrh	r4, [r3, #8]
 80088b4:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <tcp_receive+0x888>)
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	899b      	ldrh	r3, [r3, #12]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fa ff68 	bl	8003792 <lwip_htons>
 80088c2:	4603      	mov	r3, r0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <tcp_receive+0x89c>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e00d      	b.n	80088ee <tcp_receive+0x89e>
 80088d2:	bf00      	nop
 80088d4:	200000f4 	.word	0x200000f4
 80088d8:	200000d0 	.word	0x200000d0
 80088dc:	200000fe 	.word	0x200000fe
 80088e0:	080125d0 	.word	0x080125d0
 80088e4:	08012978 	.word	0x08012978
 80088e8:	0801261c 	.word	0x0801261c
 80088ec:	2300      	movs	r3, #0
 80088ee:	4423      	add	r3, r4
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b98      	ldr	r3, [pc, #608]	; (8008b54 <tcp_receive+0xb04>)
 80088f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008900:	6938      	ldr	r0, [r7, #16]
 8008902:	f7fd fd33 	bl	800636c <tcp_seg_free>
            while (next &&
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00e      	beq.n	800892a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800890c:	4b91      	ldr	r3, [pc, #580]	; (8008b54 <tcp_receive+0xb04>)
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	4b91      	ldr	r3, [pc, #580]	; (8008b58 <tcp_receive+0xb08>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	441a      	add	r2, r3
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008920:	8909      	ldrh	r1, [r1, #8]
 8008922:	440b      	add	r3, r1
 8008924:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008926:	2b00      	cmp	r3, #0
 8008928:	da9a      	bge.n	8008860 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800892a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d059      	beq.n	80089e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008930:	4b88      	ldr	r3, [pc, #544]	; (8008b54 <tcp_receive+0xb04>)
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	4b88      	ldr	r3, [pc, #544]	; (8008b58 <tcp_receive+0xb08>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	441a      	add	r2, r3
 800893c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008944:	2b00      	cmp	r3, #0
 8008946:	dd4d      	ble.n	80089e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b29a      	uxth	r2, r3
 8008950:	4b81      	ldr	r3, [pc, #516]	; (8008b58 <tcp_receive+0xb08>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	b29a      	uxth	r2, r3
 800895a:	4b80      	ldr	r3, [pc, #512]	; (8008b5c <tcp_receive+0xb0c>)
 800895c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800895e:	4b7f      	ldr	r3, [pc, #508]	; (8008b5c <tcp_receive+0xb0c>)
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	899b      	ldrh	r3, [r3, #12]
 8008964:	b29b      	uxth	r3, r3
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa ff13 	bl	8003792 <lwip_htons>
 800896c:	4603      	mov	r3, r0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <tcp_receive+0x934>
                inseg.len -= 1;
 8008978:	4b78      	ldr	r3, [pc, #480]	; (8008b5c <tcp_receive+0xb0c>)
 800897a:	891b      	ldrh	r3, [r3, #8]
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	4b76      	ldr	r3, [pc, #472]	; (8008b5c <tcp_receive+0xb0c>)
 8008982:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008984:	4b75      	ldr	r3, [pc, #468]	; (8008b5c <tcp_receive+0xb0c>)
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	4b74      	ldr	r3, [pc, #464]	; (8008b5c <tcp_receive+0xb0c>)
 800898a:	891b      	ldrh	r3, [r3, #8]
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fc f8ee 	bl	8004b70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008994:	4b71      	ldr	r3, [pc, #452]	; (8008b5c <tcp_receive+0xb0c>)
 8008996:	891c      	ldrh	r4, [r3, #8]
 8008998:	4b70      	ldr	r3, [pc, #448]	; (8008b5c <tcp_receive+0xb0c>)
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	899b      	ldrh	r3, [r3, #12]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fa fef6 	bl	8003792 <lwip_htons>
 80089a6:	4603      	mov	r3, r0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <tcp_receive+0x966>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <tcp_receive+0x968>
 80089b6:	2300      	movs	r3, #0
 80089b8:	4423      	add	r3, r4
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	4b65      	ldr	r3, [pc, #404]	; (8008b54 <tcp_receive+0xb04>)
 80089be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80089c0:	4b64      	ldr	r3, [pc, #400]	; (8008b54 <tcp_receive+0xb04>)
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	4b64      	ldr	r3, [pc, #400]	; (8008b58 <tcp_receive+0xb08>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	441a      	add	r2, r3
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d006      	beq.n	80089e4 <tcp_receive+0x994>
 80089d6:	4b62      	ldr	r3, [pc, #392]	; (8008b60 <tcp_receive+0xb10>)
 80089d8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80089dc:	4961      	ldr	r1, [pc, #388]	; (8008b64 <tcp_receive+0xb14>)
 80089de:	4862      	ldr	r0, [pc, #392]	; (8008b68 <tcp_receive+0xb18>)
 80089e0:	f007 fbce 	bl	8010180 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089e8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80089ea:	4b5a      	ldr	r3, [pc, #360]	; (8008b54 <tcp_receive+0xb04>)
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <tcp_receive+0xb08>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	441a      	add	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089fe:	4b55      	ldr	r3, [pc, #340]	; (8008b54 <tcp_receive+0xb04>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d206      	bcs.n	8008a14 <tcp_receive+0x9c4>
 8008a06:	4b56      	ldr	r3, [pc, #344]	; (8008b60 <tcp_receive+0xb10>)
 8008a08:	f240 6207 	movw	r2, #1543	; 0x607
 8008a0c:	4957      	ldr	r1, [pc, #348]	; (8008b6c <tcp_receive+0xb1c>)
 8008a0e:	4856      	ldr	r0, [pc, #344]	; (8008b68 <tcp_receive+0xb18>)
 8008a10:	f007 fbb6 	bl	8010180 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008a18:	4b4e      	ldr	r3, [pc, #312]	; (8008b54 <tcp_receive+0xb04>)
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7fc ffc5 	bl	80059b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a2a:	4b4c      	ldr	r3, [pc, #304]	; (8008b5c <tcp_receive+0xb0c>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	891b      	ldrh	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008a34:	4b49      	ldr	r3, [pc, #292]	; (8008b5c <tcp_receive+0xb0c>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4a4d      	ldr	r2, [pc, #308]	; (8008b70 <tcp_receive+0xb20>)
 8008a3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a3c:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <tcp_receive+0xb0c>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a42:	4b46      	ldr	r3, [pc, #280]	; (8008b5c <tcp_receive+0xb0c>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	899b      	ldrh	r3, [r3, #12]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fa fea1 	bl	8003792 <lwip_htons>
 8008a50:	4603      	mov	r3, r0
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80b8 	beq.w	8008bce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008a5e:	4b45      	ldr	r3, [pc, #276]	; (8008b74 <tcp_receive+0xb24>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f043 0320 	orr.w	r3, r3, #32
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	4b42      	ldr	r3, [pc, #264]	; (8008b74 <tcp_receive+0xb24>)
 8008a6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008a6c:	e0af      	b.n	8008bce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	4a36      	ldr	r2, [pc, #216]	; (8008b58 <tcp_receive+0xb08>)
 8008a7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	891b      	ldrh	r3, [r3, #8]
 8008a84:	461c      	mov	r4, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	899b      	ldrh	r3, [r3, #12]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fa fe7f 	bl	8003792 <lwip_htons>
 8008a94:	4603      	mov	r3, r0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <tcp_receive+0xa54>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <tcp_receive+0xa56>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	191a      	adds	r2, r3, r4
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	441a      	add	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	461c      	mov	r4, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	891b      	ldrh	r3, [r3, #8]
 8008abc:	461d      	mov	r5, r3
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	899b      	ldrh	r3, [r3, #12]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fa fe63 	bl	8003792 <lwip_htons>
 8008acc:	4603      	mov	r3, r0
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <tcp_receive+0xa8c>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <tcp_receive+0xa8e>
 8008adc:	2300      	movs	r3, #0
 8008ade:	442b      	add	r3, r5
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	d206      	bcs.n	8008af2 <tcp_receive+0xaa2>
 8008ae4:	4b1e      	ldr	r3, [pc, #120]	; (8008b60 <tcp_receive+0xb10>)
 8008ae6:	f240 622c 	movw	r2, #1580	; 0x62c
 8008aea:	4923      	ldr	r1, [pc, #140]	; (8008b78 <tcp_receive+0xb28>)
 8008aec:	481e      	ldr	r0, [pc, #120]	; (8008b68 <tcp_receive+0xb18>)
 8008aee:	f007 fb47 	bl	8010180 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	891b      	ldrh	r3, [r3, #8]
 8008af6:	461c      	mov	r4, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	899b      	ldrh	r3, [r3, #12]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fa fe46 	bl	8003792 <lwip_htons>
 8008b06:	4603      	mov	r3, r0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <tcp_receive+0xac6>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <tcp_receive+0xac8>
 8008b16:	2300      	movs	r3, #0
 8008b18:	1919      	adds	r1, r3, r4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b1e:	b28b      	uxth	r3, r1
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fc ff43 	bl	80059b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	891b      	ldrh	r3, [r3, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d028      	beq.n	8008b8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <tcp_receive+0xb20>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01d      	beq.n	8008b7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <tcp_receive+0xb20>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7fc fa58 	bl	8005000 <pbuf_cat>
 8008b50:	e018      	b.n	8008b84 <tcp_receive+0xb34>
 8008b52:	bf00      	nop
 8008b54:	200000fe 	.word	0x200000fe
 8008b58:	200000f4 	.word	0x200000f4
 8008b5c:	200000d0 	.word	0x200000d0
 8008b60:	080125d0 	.word	0x080125d0
 8008b64:	080129b0 	.word	0x080129b0
 8008b68:	0801261c 	.word	0x0801261c
 8008b6c:	080129ec 	.word	0x080129ec
 8008b70:	20000104 	.word	0x20000104
 8008b74:	20000101 	.word	0x20000101
 8008b78:	08012a0c 	.word	0x08012a0c
            } else {
              recv_data = cseg->p;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	4a70      	ldr	r2, [pc, #448]	; (8008d44 <tcp_receive+0xcf4>)
 8008b82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	899b      	ldrh	r3, [r3, #12]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fa fdfd 	bl	8003792 <lwip_htons>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00d      	beq.n	8008bc0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008ba4:	4b68      	ldr	r3, [pc, #416]	; (8008d48 <tcp_receive+0xcf8>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f043 0320 	orr.w	r3, r3, #32
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4b66      	ldr	r3, [pc, #408]	; (8008d48 <tcp_receive+0xcf8>)
 8008bb0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7d1b      	ldrb	r3, [r3, #20]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d102      	bne.n	8008bc0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2207      	movs	r2, #7
 8008bbe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008bc8:	68b8      	ldr	r0, [r7, #8]
 8008bca:	f7fd fbcf 	bl	800636c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d008      	beq.n	8008be8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008be2:	429a      	cmp	r2, r3
 8008be4:	f43f af43 	beq.w	8008a6e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8b5b      	ldrh	r3, [r3, #26]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <tcp_receive+0xbc2>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8b5b      	ldrh	r3, [r3, #26]
 8008bf8:	f023 0301 	bic.w	r3, r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	835a      	strh	r2, [r3, #26]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8b5b      	ldrh	r3, [r3, #26]
 8008c06:	f043 0302 	orr.w	r3, r3, #2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c10:	e188      	b.n	8008f24 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8b5b      	ldrh	r3, [r3, #26]
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c20:	e180      	b.n	8008f24 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c2a:	4848      	ldr	r0, [pc, #288]	; (8008d4c <tcp_receive+0xcfc>)
 8008c2c:	f7fd fbb6 	bl	800639c <tcp_seg_copy>
 8008c30:	4602      	mov	r2, r0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	675a      	str	r2, [r3, #116]	; 0x74
 8008c36:	e16d      	b.n	8008f14 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c42:	e157      	b.n	8008ef4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <tcp_receive+0xd00>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d11d      	bne.n	8008c8e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008c52:	4b3e      	ldr	r3, [pc, #248]	; (8008d4c <tcp_receive+0xcfc>)
 8008c54:	891a      	ldrh	r2, [r3, #8]
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	891b      	ldrh	r3, [r3, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	f240 814f 	bls.w	8008efe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c60:	483a      	ldr	r0, [pc, #232]	; (8008d4c <tcp_receive+0xcfc>)
 8008c62:	f7fd fb9b 	bl	800639c <tcp_seg_copy>
 8008c66:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8149 	beq.w	8008f02 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8008c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	e002      	b.n	8008c84 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f7ff f8de 	bl	8007e48 <tcp_oos_insert_segment>
                }
                break;
 8008c8c:	e139      	b.n	8008f02 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d117      	bne.n	8008cc4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c94:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <tcp_receive+0xd00>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da57      	bge.n	8008d54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008ca4:	4829      	ldr	r0, [pc, #164]	; (8008d4c <tcp_receive+0xcfc>)
 8008ca6:	f7fd fb79 	bl	800639c <tcp_seg_copy>
 8008caa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 8129 	beq.w	8008f06 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cbc:	69b8      	ldr	r0, [r7, #24]
 8008cbe:	f7ff f8c3 	bl	8007e48 <tcp_oos_insert_segment>
                  }
                  break;
 8008cc2:	e120      	b.n	8008f06 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008cc4:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <tcp_receive+0xd00>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	db3e      	blt.n	8008d54 <tcp_receive+0xd04>
 8008cd6:	4b1e      	ldr	r3, [pc, #120]	; (8008d50 <tcp_receive+0xd00>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dc35      	bgt.n	8008d54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008ce8:	4818      	ldr	r0, [pc, #96]	; (8008d4c <tcp_receive+0xcfc>)
 8008cea:	f7fd fb57 	bl	800639c <tcp_seg_copy>
 8008cee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8109 	beq.w	8008f0a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d00:	8912      	ldrh	r2, [r2, #8]
 8008d02:	441a      	add	r2, r3
 8008d04:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <tcp_receive+0xd00>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd12      	ble.n	8008d34 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008d0e:	4b10      	ldr	r3, [pc, #64]	; (8008d50 <tcp_receive+0xd00>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2a:	891b      	ldrh	r3, [r3, #8]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fb ff1e 	bl	8004b70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d3c:	69f8      	ldr	r0, [r7, #28]
 8008d3e:	f7ff f883 	bl	8007e48 <tcp_oos_insert_segment>
                  }
                  break;
 8008d42:	e0e2      	b.n	8008f0a <tcp_receive+0xeba>
 8008d44:	20000104 	.word	0x20000104
 8008d48:	20000101 	.word	0x20000101
 8008d4c:	200000d0 	.word	0x200000d0
 8008d50:	200000f4 	.word	0x200000f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 80c6 	bne.w	8008eee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d62:	4b80      	ldr	r3, [pc, #512]	; (8008f64 <tcp_receive+0xf14>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f340 80bd 	ble.w	8008eee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	899b      	ldrh	r3, [r3, #12]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fa fd08 	bl	8003792 <lwip_htons>
 8008d82:	4603      	mov	r3, r0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 80bf 	bne.w	8008f0e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008d90:	4875      	ldr	r0, [pc, #468]	; (8008f68 <tcp_receive+0xf18>)
 8008d92:	f7fd fb03 	bl	800639c <tcp_seg_copy>
 8008d96:	4602      	mov	r2, r0
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80b6 	beq.w	8008f12 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dae:	8912      	ldrh	r2, [r2, #8]
 8008db0:	441a      	add	r2, r3
 8008db2:	4b6c      	ldr	r3, [pc, #432]	; (8008f64 <tcp_receive+0xf14>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	dd12      	ble.n	8008de2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008dbc:	4b69      	ldr	r3, [pc, #420]	; (8008f64 <tcp_receive+0xf14>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	891b      	ldrh	r3, [r3, #8]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7fb fec7 	bl	8004b70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008de2:	4b62      	ldr	r3, [pc, #392]	; (8008f6c <tcp_receive+0xf1c>)
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b5e      	ldr	r3, [pc, #376]	; (8008f64 <tcp_receive+0xf14>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	441a      	add	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008df6:	440b      	add	r3, r1
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f340 8089 	ble.w	8008f12 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	899b      	ldrh	r3, [r3, #12]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fa fcc1 	bl	8003792 <lwip_htons>
 8008e10:	4603      	mov	r3, r0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d022      	beq.n	8008e62 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	899b      	ldrh	r3, [r3, #12]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	b21b      	sxth	r3, r3
 8008e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e2c:	b21c      	sxth	r4, r3
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	899b      	ldrh	r3, [r3, #12]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fa fcaa 	bl	8003792 <lwip_htons>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fa fca1 	bl	8003792 <lwip_htons>
 8008e50:	4603      	mov	r3, r0
 8008e52:	b21b      	sxth	r3, r3
 8008e54:	4323      	orrs	r3, r4
 8008e56:	b21a      	sxth	r2, r3
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b299      	uxth	r1, r3
 8008e70:	4b3c      	ldr	r3, [pc, #240]	; (8008f64 <tcp_receive+0xf14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1a8a      	subs	r2, r1, r2
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	891b      	ldrh	r3, [r3, #8]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fb fe6e 	bl	8004b70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	891c      	ldrh	r4, [r3, #8]
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	899b      	ldrh	r3, [r3, #12]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fa fc74 	bl	8003792 <lwip_htons>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <tcp_receive+0xe6a>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <tcp_receive+0xe6c>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4423      	add	r3, r4
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <tcp_receive+0xf1c>)
 8008ec2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ec4:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <tcp_receive+0xf1c>)
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4b26      	ldr	r3, [pc, #152]	; (8008f64 <tcp_receive+0xf14>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	441a      	add	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	6879      	ldr	r1, [r7, #4]
 8008ed6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ed8:	440b      	add	r3, r1
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d019      	beq.n	8008f12 <tcp_receive+0xec2>
 8008ede:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <tcp_receive+0xf20>)
 8008ee0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8008ee4:	4923      	ldr	r1, [pc, #140]	; (8008f74 <tcp_receive+0xf24>)
 8008ee6:	4824      	ldr	r0, [pc, #144]	; (8008f78 <tcp_receive+0xf28>)
 8008ee8:	f007 f94a 	bl	8010180 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008eec:	e011      	b.n	8008f12 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f47f aea4 	bne.w	8008c44 <tcp_receive+0xbf4>
 8008efc:	e00a      	b.n	8008f14 <tcp_receive+0xec4>
                break;
 8008efe:	bf00      	nop
 8008f00:	e008      	b.n	8008f14 <tcp_receive+0xec4>
                break;
 8008f02:	bf00      	nop
 8008f04:	e006      	b.n	8008f14 <tcp_receive+0xec4>
                  break;
 8008f06:	bf00      	nop
 8008f08:	e004      	b.n	8008f14 <tcp_receive+0xec4>
                  break;
 8008f0a:	bf00      	nop
 8008f0c:	e002      	b.n	8008f14 <tcp_receive+0xec4>
                  break;
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <tcp_receive+0xec4>
                break;
 8008f12:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fa55 	bl	800a3c4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008f1a:	e003      	b.n	8008f24 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 fa51 	bl	800a3c4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f22:	e01a      	b.n	8008f5a <tcp_receive+0xf0a>
 8008f24:	e019      	b.n	8008f5a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f26:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <tcp_receive+0xf14>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db0a      	blt.n	8008f4a <tcp_receive+0xefa>
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <tcp_receive+0xf14>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f40:	440b      	add	r3, r1
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	3301      	adds	r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dd07      	ble.n	8008f5a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8b5b      	ldrh	r3, [r3, #26]
 8008f4e:	f043 0302 	orr.w	r3, r3, #2
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008f58:	e7ff      	b.n	8008f5a <tcp_receive+0xf0a>
 8008f5a:	bf00      	nop
 8008f5c:	3750      	adds	r7, #80	; 0x50
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bdb0      	pop	{r4, r5, r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200000f4 	.word	0x200000f4
 8008f68:	200000d0 	.word	0x200000d0
 8008f6c:	200000fe 	.word	0x200000fe
 8008f70:	080125d0 	.word	0x080125d0
 8008f74:	08012978 	.word	0x08012978
 8008f78:	0801261c 	.word	0x0801261c

08008f7c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <tcp_get_next_optbyte+0x5c>)
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	b291      	uxth	r1, r2
 8008f8a:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <tcp_get_next_optbyte+0x5c>)
 8008f8c:	8011      	strh	r1, [r2, #0]
 8008f8e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <tcp_get_next_optbyte+0x60>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <tcp_get_next_optbyte+0x26>
 8008f98:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <tcp_get_next_optbyte+0x64>)
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d208      	bcs.n	8008fb4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <tcp_get_next_optbyte+0x68>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	4413      	add	r3, r2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	e00b      	b.n	8008fcc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <tcp_get_next_optbyte+0x64>)
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008fc2:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <tcp_get_next_optbyte+0x60>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	797b      	ldrb	r3, [r7, #5]
 8008fc8:	4413      	add	r3, r2
 8008fca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	200000f0 	.word	0x200000f0
 8008fdc:	200000ec 	.word	0x200000ec
 8008fe0:	200000ea 	.word	0x200000ea
 8008fe4:	200000e4 	.word	0x200000e4

08008fe8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <tcp_parseopt+0x1c>
 8008ff6:	4b31      	ldr	r3, [pc, #196]	; (80090bc <tcp_parseopt+0xd4>)
 8008ff8:	f240 727d 	movw	r2, #1917	; 0x77d
 8008ffc:	4930      	ldr	r1, [pc, #192]	; (80090c0 <tcp_parseopt+0xd8>)
 8008ffe:	4831      	ldr	r0, [pc, #196]	; (80090c4 <tcp_parseopt+0xdc>)
 8009000:	f007 f8be 	bl	8010180 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009004:	4b30      	ldr	r3, [pc, #192]	; (80090c8 <tcp_parseopt+0xe0>)
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d053      	beq.n	80090b4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800900c:	4b2f      	ldr	r3, [pc, #188]	; (80090cc <tcp_parseopt+0xe4>)
 800900e:	2200      	movs	r2, #0
 8009010:	801a      	strh	r2, [r3, #0]
 8009012:	e043      	b.n	800909c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8009014:	f7ff ffb2 	bl	8008f7c <tcp_get_next_optbyte>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d03c      	beq.n	800909c <tcp_parseopt+0xb4>
 8009022:	2b02      	cmp	r3, #2
 8009024:	d002      	beq.n	800902c <tcp_parseopt+0x44>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d03f      	beq.n	80090aa <tcp_parseopt+0xc2>
 800902a:	e026      	b.n	800907a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800902c:	f7ff ffa6 	bl	8008f7c <tcp_get_next_optbyte>
 8009030:	4603      	mov	r3, r0
 8009032:	2b04      	cmp	r3, #4
 8009034:	d13b      	bne.n	80090ae <tcp_parseopt+0xc6>
 8009036:	4b25      	ldr	r3, [pc, #148]	; (80090cc <tcp_parseopt+0xe4>)
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	3302      	adds	r3, #2
 800903c:	4a22      	ldr	r2, [pc, #136]	; (80090c8 <tcp_parseopt+0xe0>)
 800903e:	8812      	ldrh	r2, [r2, #0]
 8009040:	4293      	cmp	r3, r2
 8009042:	dc34      	bgt.n	80090ae <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009044:	f7ff ff9a 	bl	8008f7c <tcp_get_next_optbyte>
 8009048:	4603      	mov	r3, r0
 800904a:	b29b      	uxth	r3, r3
 800904c:	021b      	lsls	r3, r3, #8
 800904e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009050:	f7ff ff94 	bl	8008f7c <tcp_get_next_optbyte>
 8009054:	4603      	mov	r3, r0
 8009056:	b29a      	uxth	r2, r3
 8009058:	89bb      	ldrh	r3, [r7, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800905e:	89bb      	ldrh	r3, [r7, #12]
 8009060:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009064:	d804      	bhi.n	8009070 <tcp_parseopt+0x88>
 8009066:	89bb      	ldrh	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <tcp_parseopt+0x88>
 800906c:	89ba      	ldrh	r2, [r7, #12]
 800906e:	e001      	b.n	8009074 <tcp_parseopt+0x8c>
 8009070:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009078:	e010      	b.n	800909c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800907a:	f7ff ff7f 	bl	8008f7c <tcp_get_next_optbyte>
 800907e:	4603      	mov	r3, r0
 8009080:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d914      	bls.n	80090b2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	b29a      	uxth	r2, r3
 800908c:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <tcp_parseopt+0xe4>)
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	4413      	add	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	3b02      	subs	r3, #2
 8009096:	b29a      	uxth	r2, r3
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <tcp_parseopt+0xe4>)
 800909a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <tcp_parseopt+0xe4>)
 800909e:	881a      	ldrh	r2, [r3, #0]
 80090a0:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <tcp_parseopt+0xe0>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d3b5      	bcc.n	8009014 <tcp_parseopt+0x2c>
 80090a8:	e004      	b.n	80090b4 <tcp_parseopt+0xcc>
          return;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <tcp_parseopt+0xcc>
            return;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <tcp_parseopt+0xcc>
            return;
 80090b2:	bf00      	nop
      }
    }
  }
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	080125d0 	.word	0x080125d0
 80090c0:	08012a34 	.word	0x08012a34
 80090c4:	0801261c 	.word	0x0801261c
 80090c8:	200000e8 	.word	0x200000e8
 80090cc:	200000f0 	.word	0x200000f0

080090d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <tcp_trigger_input_pcb_close+0x1c>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f043 0310 	orr.w	r3, r3, #16
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <tcp_trigger_input_pcb_close+0x1c>)
 80090e0:	701a      	strb	r2, [r3, #0]
}
 80090e2:	bf00      	nop
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20000101 	.word	0x20000101

080090f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <tcp_route+0x28>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	7a1b      	ldrb	r3, [r3, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d006      	beq.n	8009118 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	7a1b      	ldrb	r3, [r3, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f7fb fb78 	bl	8004804 <netif_get_by_index>
 8009114:	4603      	mov	r3, r0
 8009116:	e003      	b.n	8009120 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f005 fbb5 	bl	800e888 <ip4_route>
 800911e:	4603      	mov	r3, r0
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d105      	bne.n	800914a <tcp_create_segment+0x22>
 800913e:	4b45      	ldr	r3, [pc, #276]	; (8009254 <tcp_create_segment+0x12c>)
 8009140:	22a3      	movs	r2, #163	; 0xa3
 8009142:	4945      	ldr	r1, [pc, #276]	; (8009258 <tcp_create_segment+0x130>)
 8009144:	4845      	ldr	r0, [pc, #276]	; (800925c <tcp_create_segment+0x134>)
 8009146:	f007 f81b 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <tcp_create_segment+0x34>
 8009150:	4b40      	ldr	r3, [pc, #256]	; (8009254 <tcp_create_segment+0x12c>)
 8009152:	22a4      	movs	r2, #164	; 0xa4
 8009154:	4942      	ldr	r1, [pc, #264]	; (8009260 <tcp_create_segment+0x138>)
 8009156:	4841      	ldr	r0, [pc, #260]	; (800925c <tcp_create_segment+0x134>)
 8009158:	f007 f812 	bl	8010180 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800915c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800916a:	2003      	movs	r0, #3
 800916c:	f7fa ff66 	bl	800403c <memp_malloc>
 8009170:	6138      	str	r0, [r7, #16]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009178:	68b8      	ldr	r0, [r7, #8]
 800917a:	f7fb fe7f 	bl	8004e7c <pbuf_free>
    return NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	e064      	b.n	800924c <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009188:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	891a      	ldrh	r2, [r3, #8]
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	b29b      	uxth	r3, r3
 800919e:	429a      	cmp	r2, r3
 80091a0:	d205      	bcs.n	80091ae <tcp_create_segment+0x86>
 80091a2:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <tcp_create_segment+0x12c>)
 80091a4:	22b0      	movs	r2, #176	; 0xb0
 80091a6:	492f      	ldr	r1, [pc, #188]	; (8009264 <tcp_create_segment+0x13c>)
 80091a8:	482c      	ldr	r0, [pc, #176]	; (800925c <tcp_create_segment+0x134>)
 80091aa:	f006 ffe9 	bl	8010180 <iprintf>
  seg->len = p->tot_len - optlen;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	891a      	ldrh	r2, [r3, #8]
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2200      	movs	r2, #0
 80091c2:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80091c4:	2114      	movs	r1, #20
 80091c6:	68b8      	ldr	r0, [r7, #8]
 80091c8:	f7fb fdc2 	bl	8004d50 <pbuf_add_header>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80091d2:	6938      	ldr	r0, [r7, #16]
 80091d4:	f7fd f8ca 	bl	800636c <tcp_seg_free>
    return NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	e037      	b.n	800924c <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8ada      	ldrh	r2, [r3, #22]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	691c      	ldr	r4, [r3, #16]
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fa facf 	bl	8003792 <lwip_htons>
 80091f4:	4603      	mov	r3, r0
 80091f6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8b1a      	ldrh	r2, [r3, #24]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	691c      	ldr	r4, [r3, #16]
 8009200:	4610      	mov	r0, r2
 8009202:	f7fa fac6 	bl	8003792 <lwip_htons>
 8009206:	4603      	mov	r3, r0
 8009208:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	691c      	ldr	r4, [r3, #16]
 800920e:	6838      	ldr	r0, [r7, #0]
 8009210:	f7fa fad4 	bl	80037bc <lwip_htonl>
 8009214:	4603      	mov	r3, r0
 8009216:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	b2db      	uxtb	r3, r3
 800921e:	b29b      	uxth	r3, r3
 8009220:	3305      	adds	r3, #5
 8009222:	b29b      	uxth	r3, r3
 8009224:	031b      	lsls	r3, r3, #12
 8009226:	b29a      	uxth	r2, r3
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	b29b      	uxth	r3, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	b29a      	uxth	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	691c      	ldr	r4, [r3, #16]
 8009234:	4610      	mov	r0, r2
 8009236:	f7fa faac 	bl	8003792 <lwip_htons>
 800923a:	4603      	mov	r3, r0
 800923c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2200      	movs	r2, #0
 8009244:	749a      	strb	r2, [r3, #18]
 8009246:	2200      	movs	r2, #0
 8009248:	74da      	strb	r2, [r3, #19]
  return seg;
 800924a:	693b      	ldr	r3, [r7, #16]
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd90      	pop	{r4, r7, pc}
 8009254:	08012a50 	.word	0x08012a50
 8009258:	08012a84 	.word	0x08012a84
 800925c:	08012aa4 	.word	0x08012aa4
 8009260:	08012acc 	.word	0x08012acc
 8009264:	08012af0 	.word	0x08012af0

08009268 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b08b      	sub	sp, #44	; 0x2c
 800926c:	af02      	add	r7, sp, #8
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009274:	2300      	movs	r3, #0
 8009276:	61bb      	str	r3, [r7, #24]
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <tcp_split_unsent_seg+0x2c>
 8009286:	4b97      	ldr	r3, [pc, #604]	; (80094e4 <tcp_split_unsent_seg+0x27c>)
 8009288:	f240 324b 	movw	r2, #843	; 0x34b
 800928c:	4996      	ldr	r1, [pc, #600]	; (80094e8 <tcp_split_unsent_seg+0x280>)
 800928e:	4897      	ldr	r0, [pc, #604]	; (80094ec <tcp_split_unsent_seg+0x284>)
 8009290:	f006 ff76 	bl	8010180 <iprintf>

  useg = pcb->unsent;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009298:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295
 80092a4:	e119      	b.n	80094da <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80092a6:	887b      	ldrh	r3, [r7, #2]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d109      	bne.n	80092c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80092ac:	4b8d      	ldr	r3, [pc, #564]	; (80094e4 <tcp_split_unsent_seg+0x27c>)
 80092ae:	f240 3253 	movw	r2, #851	; 0x353
 80092b2:	498f      	ldr	r1, [pc, #572]	; (80094f0 <tcp_split_unsent_seg+0x288>)
 80092b4:	488d      	ldr	r0, [pc, #564]	; (80094ec <tcp_split_unsent_seg+0x284>)
 80092b6:	f006 ff63 	bl	8010180 <iprintf>
    return ERR_VAL;
 80092ba:	f06f 0305 	mvn.w	r3, #5
 80092be:	e10c      	b.n	80094da <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	891b      	ldrh	r3, [r3, #8]
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d301      	bcc.n	80092ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e105      	b.n	80094da <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092d2:	887a      	ldrh	r2, [r7, #2]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d906      	bls.n	80092e6 <tcp_split_unsent_seg+0x7e>
 80092d8:	4b82      	ldr	r3, [pc, #520]	; (80094e4 <tcp_split_unsent_seg+0x27c>)
 80092da:	f240 325b 	movw	r2, #859	; 0x35b
 80092de:	4985      	ldr	r1, [pc, #532]	; (80094f4 <tcp_split_unsent_seg+0x28c>)
 80092e0:	4882      	ldr	r0, [pc, #520]	; (80094ec <tcp_split_unsent_seg+0x284>)
 80092e2:	f006 ff4d 	bl	8010180 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	891b      	ldrh	r3, [r3, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <tcp_split_unsent_seg+0x94>
 80092ee:	4b7d      	ldr	r3, [pc, #500]	; (80094e4 <tcp_split_unsent_seg+0x27c>)
 80092f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80092f4:	4980      	ldr	r1, [pc, #512]	; (80094f8 <tcp_split_unsent_seg+0x290>)
 80092f6:	487d      	ldr	r0, [pc, #500]	; (80094ec <tcp_split_unsent_seg+0x284>)
 80092f8:	f006 ff42 	bl	8010180 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	7b1b      	ldrb	r3, [r3, #12]
 8009300:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	891a      	ldrh	r2, [r3, #8]
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	b29a      	uxth	r2, r3
 800931c:	89bb      	ldrh	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	b29b      	uxth	r3, r3
 8009322:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009326:	4619      	mov	r1, r3
 8009328:	2036      	movs	r0, #54	; 0x36
 800932a:	f7fb fac7 	bl	80048bc <pbuf_alloc>
 800932e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80ba 	beq.w	80094ac <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	891a      	ldrh	r2, [r3, #8]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	891b      	ldrh	r3, [r3, #8]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	b29a      	uxth	r2, r3
 8009346:	887b      	ldrh	r3, [r7, #2]
 8009348:	4413      	add	r3, r2
 800934a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	6858      	ldr	r0, [r3, #4]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	18d1      	adds	r1, r2, r3
 8009358:	897b      	ldrh	r3, [r7, #10]
 800935a:	89ba      	ldrh	r2, [r7, #12]
 800935c:	f7fb ff88 	bl	8005270 <pbuf_copy_partial>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	89bb      	ldrh	r3, [r7, #12]
 8009366:	4293      	cmp	r3, r2
 8009368:	f040 80a2 	bne.w	80094b0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	899b      	ldrh	r3, [r3, #12]
 8009372:	b29b      	uxth	r3, r3
 8009374:	4618      	mov	r0, r3
 8009376:	f7fa fa0c 	bl	8003792 <lwip_htons>
 800937a:	4603      	mov	r3, r0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009382:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009384:	2300      	movs	r3, #0
 8009386:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8009388:	7ffb      	ldrb	r3, [r7, #31]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d007      	beq.n	80093a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009392:	7ffb      	ldrb	r3, [r7, #31]
 8009394:	f023 0308 	bic.w	r3, r3, #8
 8009398:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800939a:	7fbb      	ldrb	r3, [r7, #30]
 800939c:	f043 0308 	orr.w	r3, r3, #8
 80093a0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80093a2:	7ffb      	ldrb	r3, [r7, #31]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80093ac:	7ffb      	ldrb	r3, [r7, #31]
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80093b4:	7fbb      	ldrb	r3, [r7, #30]
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fa f9fa 	bl	80037bc <lwip_htonl>
 80093c8:	4602      	mov	r2, r0
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	18d1      	adds	r1, r2, r3
 80093ce:	7fba      	ldrb	r2, [r7, #30]
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	460b      	mov	r3, r1
 80093d6:	6939      	ldr	r1, [r7, #16]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff fea5 	bl	8009128 <tcp_create_segment>
 80093de:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d066      	beq.n	80094b4 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fb fdce 	bl	8004f8c <pbuf_clen>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6858      	ldr	r0, [r3, #4]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	891a      	ldrh	r2, [r3, #8]
 800940e:	89bb      	ldrh	r3, [r7, #12]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	4619      	mov	r1, r3
 8009416:	f7fb fbab 	bl	8004b70 <pbuf_realloc>
  useg->len -= remainder;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	891a      	ldrh	r2, [r3, #8]
 800941e:	89bb      	ldrh	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	b29a      	uxth	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	899b      	ldrh	r3, [r3, #12]
 800942e:	b29c      	uxth	r4, r3
 8009430:	7ffb      	ldrb	r3, [r7, #31]
 8009432:	b29b      	uxth	r3, r3
 8009434:	4618      	mov	r0, r3
 8009436:	f7fa f9ac 	bl	8003792 <lwip_htons>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	4322      	orrs	r2, r4
 8009444:	b292      	uxth	r2, r2
 8009446:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2200      	movs	r2, #0
 800944c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	4618      	mov	r0, r3
 8009454:	f7fb fd9a 	bl	8004f8c <pbuf_clen>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009462:	4413      	add	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	f7fb fd8b 	bl	8004f8c <pbuf_clen>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009480:	4413      	add	r3, r2
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	e016      	b.n	80094da <tcp_split_unsent_seg+0x272>
    goto memerr;
 80094ac:	bf00      	nop
 80094ae:	e002      	b.n	80094b6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80094b0:	bf00      	nop
 80094b2:	e000      	b.n	80094b6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80094b4:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <tcp_split_unsent_seg+0x262>
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <tcp_split_unsent_seg+0x27c>)
 80094be:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80094c2:	490e      	ldr	r1, [pc, #56]	; (80094fc <tcp_split_unsent_seg+0x294>)
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <tcp_split_unsent_seg+0x284>)
 80094c6:	f006 fe5b 	bl	8010180 <iprintf>
  if (p != NULL) {
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 80094d0:	6938      	ldr	r0, [r7, #16]
 80094d2:	f7fb fcd3 	bl	8004e7c <pbuf_free>
  }

  return ERR_MEM;
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3724      	adds	r7, #36	; 0x24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd90      	pop	{r4, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	08012a50 	.word	0x08012a50
 80094e8:	08012e40 	.word	0x08012e40
 80094ec:	08012aa4 	.word	0x08012aa4
 80094f0:	08012e64 	.word	0x08012e64
 80094f4:	08012e88 	.word	0x08012e88
 80094f8:	08012e98 	.word	0x08012e98
 80094fc:	08012ea8 	.word	0x08012ea8

08009500 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <tcp_send_fin+0x1c>
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <tcp_send_fin+0x94>)
 8009510:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009514:	4920      	ldr	r1, [pc, #128]	; (8009598 <tcp_send_fin+0x98>)
 8009516:	4821      	ldr	r0, [pc, #132]	; (800959c <tcp_send_fin+0x9c>)
 8009518:	f006 fe32 	bl	8010180 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02e      	beq.n	8009582 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e002      	b.n	8009532 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f8      	bne.n	800952c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	899b      	ldrh	r3, [r3, #12]
 8009540:	b29b      	uxth	r3, r3
 8009542:	4618      	mov	r0, r3
 8009544:	f7fa f925 	bl	8003792 <lwip_htons>
 8009548:	4603      	mov	r3, r0
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	2b00      	cmp	r3, #0
 8009552:	d116      	bne.n	8009582 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	899b      	ldrh	r3, [r3, #12]
 800955a:	b29c      	uxth	r4, r3
 800955c:	2001      	movs	r0, #1
 800955e:	f7fa f918 	bl	8003792 <lwip_htons>
 8009562:	4603      	mov	r3, r0
 8009564:	461a      	mov	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	4322      	orrs	r2, r4
 800956c:	b292      	uxth	r2, r2
 800956e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	8b5b      	ldrh	r3, [r3, #26]
 8009574:	f043 0320 	orr.w	r3, r3, #32
 8009578:	b29a      	uxth	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	e004      	b.n	800958c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009582:	2101      	movs	r1, #1
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f80b 	bl	80095a0 <tcp_enqueue_flags>
 800958a:	4603      	mov	r3, r0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}
 8009594:	08012a50 	.word	0x08012a50
 8009598:	08012eb4 	.word	0x08012eb4
 800959c:	08012aa4 	.word	0x08012aa4

080095a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <tcp_enqueue_flags+0x2c>
 80095be:	4b67      	ldr	r3, [pc, #412]	; (800975c <tcp_enqueue_flags+0x1bc>)
 80095c0:	f240 4212 	movw	r2, #1042	; 0x412
 80095c4:	4966      	ldr	r1, [pc, #408]	; (8009760 <tcp_enqueue_flags+0x1c0>)
 80095c6:	4867      	ldr	r0, [pc, #412]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 80095c8:	f006 fdda 	bl	8010180 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <tcp_enqueue_flags+0x40>
 80095d2:	4b62      	ldr	r3, [pc, #392]	; (800975c <tcp_enqueue_flags+0x1bc>)
 80095d4:	f240 4213 	movw	r2, #1043	; 0x413
 80095d8:	4963      	ldr	r1, [pc, #396]	; (8009768 <tcp_enqueue_flags+0x1c8>)
 80095da:	4862      	ldr	r0, [pc, #392]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 80095dc:	f006 fdd0 	bl	8010180 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80095ea:	2301      	movs	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009602:	4619      	mov	r1, r3
 8009604:	2036      	movs	r0, #54	; 0x36
 8009606:	f7fb f959 	bl	80048bc <pbuf_alloc>
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8b5b      	ldrh	r3, [r3, #26]
 8009616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009620:	f04f 33ff 	mov.w	r3, #4294967295
 8009624:	e095      	b.n	8009752 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	895a      	ldrh	r2, [r3, #10]
 800962a:	7dbb      	ldrb	r3, [r7, #22]
 800962c:	b29b      	uxth	r3, r3
 800962e:	429a      	cmp	r2, r3
 8009630:	d206      	bcs.n	8009640 <tcp_enqueue_flags+0xa0>
 8009632:	4b4a      	ldr	r3, [pc, #296]	; (800975c <tcp_enqueue_flags+0x1bc>)
 8009634:	f240 423a 	movw	r2, #1082	; 0x43a
 8009638:	494c      	ldr	r1, [pc, #304]	; (800976c <tcp_enqueue_flags+0x1cc>)
 800963a:	484a      	ldr	r0, [pc, #296]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 800963c:	f006 fda0 	bl	8010180 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	460b      	mov	r3, r1
 800964c:	68f9      	ldr	r1, [r7, #12]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fd6a 	bl	8009128 <tcp_create_segment>
 8009654:	60b8      	str	r0, [r7, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d109      	bne.n	8009670 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8b5b      	ldrh	r3, [r3, #26]
 8009660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009664:	b29a      	uxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800966a:	f04f 33ff 	mov.w	r3, #4294967295
 800966e:	e070      	b.n	8009752 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <tcp_enqueue_flags+0xea>
 800967c:	4b37      	ldr	r3, [pc, #220]	; (800975c <tcp_enqueue_flags+0x1bc>)
 800967e:	f240 4242 	movw	r2, #1090	; 0x442
 8009682:	493b      	ldr	r1, [pc, #236]	; (8009770 <tcp_enqueue_flags+0x1d0>)
 8009684:	4837      	ldr	r0, [pc, #220]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 8009686:	f006 fd7b 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	891b      	ldrh	r3, [r3, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d006      	beq.n	80096a0 <tcp_enqueue_flags+0x100>
 8009692:	4b32      	ldr	r3, [pc, #200]	; (800975c <tcp_enqueue_flags+0x1bc>)
 8009694:	f240 4243 	movw	r2, #1091	; 0x443
 8009698:	4936      	ldr	r1, [pc, #216]	; (8009774 <tcp_enqueue_flags+0x1d4>)
 800969a:	4832      	ldr	r0, [pc, #200]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 800969c:	f006 fd70 	bl	8010180 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d103      	bne.n	80096b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80096ae:	e00d      	b.n	80096cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	e002      	b.n	80096be <tcp_enqueue_flags+0x11e>
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	613b      	str	r3, [r7, #16]
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1f8      	bne.n	80096b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d104      	bne.n	80096e8 <tcp_enqueue_flags+0x148>
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8b5b      	ldrh	r3, [r3, #26]
 8009700:	f043 0320 	orr.w	r3, r3, #32
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	4618      	mov	r0, r3
 8009710:	f7fb fc3c 	bl	8004f8c <pbuf_clen>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800971e:	4413      	add	r3, r2
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10a      	bne.n	8009750 <tcp_enqueue_flags+0x1b0>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <tcp_enqueue_flags+0x1b0>
 8009742:	4b06      	ldr	r3, [pc, #24]	; (800975c <tcp_enqueue_flags+0x1bc>)
 8009744:	f240 4266 	movw	r2, #1126	; 0x466
 8009748:	490b      	ldr	r1, [pc, #44]	; (8009778 <tcp_enqueue_flags+0x1d8>)
 800974a:	4806      	ldr	r0, [pc, #24]	; (8009764 <tcp_enqueue_flags+0x1c4>)
 800974c:	f006 fd18 	bl	8010180 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	08012a50 	.word	0x08012a50
 8009760:	08012ed0 	.word	0x08012ed0
 8009764:	08012aa4 	.word	0x08012aa4
 8009768:	08012f28 	.word	0x08012f28
 800976c:	08012f48 	.word	0x08012f48
 8009770:	08012f84 	.word	0x08012f84
 8009774:	08012f9c 	.word	0x08012f9c
 8009778:	08012fc8 	.word	0x08012fc8

0800977c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800977c:	b5b0      	push	{r4, r5, r7, lr}
 800977e:	b08a      	sub	sp, #40	; 0x28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <tcp_output+0x1c>
 800978a:	4ba2      	ldr	r3, [pc, #648]	; (8009a14 <tcp_output+0x298>)
 800978c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009790:	49a1      	ldr	r1, [pc, #644]	; (8009a18 <tcp_output+0x29c>)
 8009792:	48a2      	ldr	r0, [pc, #648]	; (8009a1c <tcp_output+0x2a0>)
 8009794:	f006 fcf4 	bl	8010180 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d106      	bne.n	80097ae <tcp_output+0x32>
 80097a0:	4b9c      	ldr	r3, [pc, #624]	; (8009a14 <tcp_output+0x298>)
 80097a2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80097a6:	499e      	ldr	r1, [pc, #632]	; (8009a20 <tcp_output+0x2a4>)
 80097a8:	489c      	ldr	r0, [pc, #624]	; (8009a1c <tcp_output+0x2a0>)
 80097aa:	f006 fce9 	bl	8010180 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80097ae:	4b9d      	ldr	r3, [pc, #628]	; (8009a24 <tcp_output+0x2a8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d101      	bne.n	80097bc <tcp_output+0x40>
    return ERR_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	e1d6      	b.n	8009b6a <tcp_output+0x3ee>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d203      	bcs.n	80097d4 <tcp_output+0x58>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097d2:	e002      	b.n	80097da <tcp_output+0x5e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097da:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10b      	bne.n	8009800 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	8b5b      	ldrh	r3, [r3, #26]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 81ad 	beq.w	8009b50 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fde4 	bl	800a3c4 <tcp_send_empty_ack>
 80097fc:	4603      	mov	r3, r0
 80097fe:	e1b4      	b.n	8009b6a <tcp_output+0x3ee>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3304      	adds	r3, #4
 8009806:	461a      	mov	r2, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fc71 	bl	80090f0 <tcp_route>
 800980e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <tcp_output+0xa0>
    return ERR_RTE;
 8009816:	f06f 0303 	mvn.w	r3, #3
 800981a:	e1a6      	b.n	8009b6a <tcp_output+0x3ee>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <tcp_output+0xae>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d111      	bne.n	800984e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <tcp_output+0xba>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	3304      	adds	r3, #4
 8009834:	e000      	b.n	8009838 <tcp_output+0xbc>
 8009836:	2300      	movs	r3, #0
 8009838:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <tcp_output+0xca>
      return ERR_RTE;
 8009840:	f06f 0303 	mvn.w	r3, #3
 8009844:	e191      	b.n	8009b6a <tcp_output+0x3ee>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	f7f9 ffb1 	bl	80037bc <lwip_htonl>
 800985a:	4602      	mov	r2, r0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009864:	8912      	ldrh	r2, [r2, #8]
 8009866:	4413      	add	r3, r2
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	429a      	cmp	r2, r3
 800986c:	d227      	bcs.n	80098be <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009874:	461a      	mov	r2, r3
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4293      	cmp	r3, r2
 800987a:	d114      	bne.n	80098a6 <tcp_output+0x12a>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009880:	2b00      	cmp	r3, #0
 8009882:	d110      	bne.n	80098a6 <tcp_output+0x12a>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8b5b      	ldrh	r3, [r3, #26]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8150 	beq.w	8009b54 <tcp_output+0x3d8>
      return tcp_send_empty_ack(pcb);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fd85 	bl	800a3c4 <tcp_send_empty_ack>
 80098ba:	4603      	mov	r3, r0
 80098bc:	e155      	b.n	8009b6a <tcp_output+0x3ee>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 811f 	beq.w	8009b12 <tcp_output+0x396>
    for (; useg->next != NULL; useg = useg->next);
 80098d4:	e002      	b.n	80098dc <tcp_output+0x160>
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	623b      	str	r3, [r7, #32]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1f8      	bne.n	80098d6 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80098e4:	e115      	b.n	8009b12 <tcp_output+0x396>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	899b      	ldrh	r3, [r3, #12]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f9 ff4f 	bl	8003792 <lwip_htons>
 80098f4:	4603      	mov	r3, r0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d006      	beq.n	800990e <tcp_output+0x192>
 8009900:	4b44      	ldr	r3, [pc, #272]	; (8009a14 <tcp_output+0x298>)
 8009902:	f240 5237 	movw	r2, #1335	; 0x537
 8009906:	4948      	ldr	r1, [pc, #288]	; (8009a28 <tcp_output+0x2ac>)
 8009908:	4844      	ldr	r0, [pc, #272]	; (8009a1c <tcp_output+0x2a0>)
 800990a:	f006 fc39 	bl	8010180 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01f      	beq.n	8009956 <tcp_output+0x1da>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8b5b      	ldrh	r3, [r3, #26]
 800991a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800991e:	2b00      	cmp	r3, #0
 8009920:	d119      	bne.n	8009956 <tcp_output+0x1da>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <tcp_output+0x1c6>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d110      	bne.n	8009956 <tcp_output+0x1da>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009938:	891a      	ldrh	r2, [r3, #8]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800993e:	429a      	cmp	r2, r3
 8009940:	d209      	bcs.n	8009956 <tcp_output+0x1da>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <tcp_output+0x1da>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009952:	2b08      	cmp	r3, #8
 8009954:	d901      	bls.n	800995a <tcp_output+0x1de>
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <tcp_output+0x1e0>
 800995a:	2300      	movs	r3, #0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	8b5b      	ldrh	r3, [r3, #26]
 8009964:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 80e7 	beq.w	8009b3c <tcp_output+0x3c0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7d1b      	ldrb	r3, [r3, #20]
 8009972:	2b02      	cmp	r3, #2
 8009974:	d00d      	beq.n	8009992 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	899b      	ldrh	r3, [r3, #12]
 800997c:	b29c      	uxth	r4, r3
 800997e:	2010      	movs	r0, #16
 8009980:	f7f9 ff07 	bl	8003792 <lwip_htons>
 8009984:	4603      	mov	r3, r0
 8009986:	461a      	mov	r2, r3
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	4322      	orrs	r2, r4
 800998e:	b292      	uxth	r2, r2
 8009990:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009998:	f000 f90c 	bl	8009bb4 <tcp_output_segment>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80099a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8b5b      	ldrh	r3, [r3, #26]
 80099ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	835a      	strh	r2, [r3, #26]
      return err;
 80099b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ba:	e0d6      	b.n	8009b6a <tcp_output+0x3ee>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	2200      	movs	r2, #0
 80099c0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7d1b      	ldrb	r3, [r3, #20]
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d006      	beq.n	80099e0 <tcp_output+0x264>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8b5b      	ldrh	r3, [r3, #26]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f9 fee8 	bl	80037bc <lwip_htonl>
 80099ec:	4604      	mov	r4, r0
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	461d      	mov	r5, r3
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	899b      	ldrh	r3, [r3, #12]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f9 fec8 	bl	8003792 <lwip_htons>
 8009a02:	4603      	mov	r3, r0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <tcp_output+0x2b0>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e00d      	b.n	8009a2e <tcp_output+0x2b2>
 8009a12:	bf00      	nop
 8009a14:	08012a50 	.word	0x08012a50
 8009a18:	08012ff0 	.word	0x08012ff0
 8009a1c:	08012aa4 	.word	0x08012aa4
 8009a20:	08013008 	.word	0x08013008
 8009a24:	2000695c 	.word	0x2000695c
 8009a28:	08013030 	.word	0x08013030
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	442b      	add	r3, r5
 8009a30:	4423      	add	r3, r4
 8009a32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da02      	bge.n	8009a46 <tcp_output+0x2ca>
      pcb->snd_nxt = snd_nxt;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	891b      	ldrh	r3, [r3, #8]
 8009a4a:	461c      	mov	r4, r3
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	899b      	ldrh	r3, [r3, #12]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7f9 fe9c 	bl	8003792 <lwip_htons>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <tcp_output+0x2ee>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <tcp_output+0x2f0>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4423      	add	r3, r4
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d049      	beq.n	8009b06 <tcp_output+0x38a>
      seg->next = NULL;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <tcp_output+0x310>
        pcb->unacked = seg;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a84:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	623b      	str	r3, [r7, #32]
 8009a8a:	e03f      	b.n	8009b0c <tcp_output+0x390>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f9 fe92 	bl	80037bc <lwip_htonl>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7f9 fe8b 	bl	80037bc <lwip_htonl>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	1ae3      	subs	r3, r4, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da24      	bge.n	8009af8 <tcp_output+0x37c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3370      	adds	r3, #112	; 0x70
 8009ab2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ab4:	e002      	b.n	8009abc <tcp_output+0x340>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d011      	beq.n	8009ae8 <tcp_output+0x36c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7f9 fe75 	bl	80037bc <lwip_htonl>
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f9 fe6e 	bl	80037bc <lwip_htonl>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dbe6      	blt.n	8009ab6 <tcp_output+0x33a>
          }
          seg->next = (*cur_seg);
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	e009      	b.n	8009b0c <tcp_output+0x390>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	623b      	str	r3, [r7, #32]
 8009b04:	e002      	b.n	8009b0c <tcp_output+0x390>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b08:	f7fc fc30 	bl	800636c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d012      	beq.n	8009b3e <tcp_output+0x3c2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f9 fe4c 	bl	80037bc <lwip_htonl>
 8009b24:	4602      	mov	r2, r0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b2e:	8912      	ldrh	r2, [r2, #8]
 8009b30:	4413      	add	r3, r2
  while (seg != NULL &&
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	f4bf aed6 	bcs.w	80098e6 <tcp_output+0x16a>
 8009b3a:	e000      	b.n	8009b3e <tcp_output+0x3c2>
      break;
 8009b3c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d108      	bne.n	8009b58 <tcp_output+0x3dc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009b4e:	e004      	b.n	8009b5a <tcp_output+0x3de>
    goto output_done;
 8009b50:	bf00      	nop
 8009b52:	e002      	b.n	8009b5a <tcp_output+0x3de>
    goto output_done;
 8009b54:	bf00      	nop
 8009b56:	e000      	b.n	8009b5a <tcp_output+0x3de>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009b58:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8b5b      	ldrh	r3, [r3, #26]
 8009b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3728      	adds	r7, #40	; 0x28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bdb0      	pop	{r4, r5, r7, pc}
 8009b72:	bf00      	nop

08009b74 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <tcp_output_segment_busy+0x1c>
 8009b82:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <tcp_output_segment_busy+0x34>)
 8009b84:	f240 529a 	movw	r2, #1434	; 0x59a
 8009b88:	4908      	ldr	r1, [pc, #32]	; (8009bac <tcp_output_segment_busy+0x38>)
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <tcp_output_segment_busy+0x3c>)
 8009b8c:	f006 faf8 	bl	8010180 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	7b9b      	ldrb	r3, [r3, #14]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d001      	beq.n	8009b9e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	08012a50 	.word	0x08012a50
 8009bac:	08013048 	.word	0x08013048
 8009bb0:	08012aa4 	.word	0x08012aa4

08009bb4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009bb4:	b5b0      	push	{r4, r5, r7, lr}
 8009bb6:	b08c      	sub	sp, #48	; 0x30
 8009bb8:	af04      	add	r7, sp, #16
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_output_segment+0x20>
 8009bc6:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <tcp_output_segment+0x1a4>)
 8009bc8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009bcc:	4963      	ldr	r1, [pc, #396]	; (8009d5c <tcp_output_segment+0x1a8>)
 8009bce:	4864      	ldr	r0, [pc, #400]	; (8009d60 <tcp_output_segment+0x1ac>)
 8009bd0:	f006 fad6 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <tcp_output_segment+0x34>
 8009bda:	4b5f      	ldr	r3, [pc, #380]	; (8009d58 <tcp_output_segment+0x1a4>)
 8009bdc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009be0:	4960      	ldr	r1, [pc, #384]	; (8009d64 <tcp_output_segment+0x1b0>)
 8009be2:	485f      	ldr	r0, [pc, #380]	; (8009d60 <tcp_output_segment+0x1ac>)
 8009be4:	f006 facc 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <tcp_output_segment+0x48>
 8009bee:	4b5a      	ldr	r3, [pc, #360]	; (8009d58 <tcp_output_segment+0x1a4>)
 8009bf0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009bf4:	495c      	ldr	r1, [pc, #368]	; (8009d68 <tcp_output_segment+0x1b4>)
 8009bf6:	485a      	ldr	r0, [pc, #360]	; (8009d60 <tcp_output_segment+0x1ac>)
 8009bf8:	f006 fac2 	bl	8010180 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff ffb9 	bl	8009b74 <tcp_output_segment_busy>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e0a0      	b.n	8009d4e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	691c      	ldr	r4, [r3, #16]
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7f9 fdd1 	bl	80037bc <lwip_htonl>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	691c      	ldr	r4, [r3, #16]
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7f9 fdb3 	bl	8003792 <lwip_htons>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009c38:	441a      	add	r2, r3
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	3314      	adds	r3, #20
 8009c44:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	7b1b      	ldrb	r3, [r3, #12]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d015      	beq.n	8009c7e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	3304      	adds	r3, #4
 8009c56:	461a      	mov	r2, r3
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009c5e:	f7fc fe7b 	bl	8006958 <tcp_eff_send_mss_netif>
 8009c62:	4603      	mov	r3, r0
 8009c64:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009c66:	8b7b      	ldrh	r3, [r7, #26]
 8009c68:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7f9 fda5 	bl	80037bc <lwip_htonl>
 8009c72:	4602      	mov	r2, r0
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da02      	bge.n	8009c8e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10c      	bne.n	8009cb0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009c96:	4b35      	ldr	r3, [pc, #212]	; (8009d6c <tcp_output_segment+0x1b8>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7f9 fd89 	bl	80037bc <lwip_htonl>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	8959      	ldrh	r1, [r3, #10]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	8b3a      	ldrh	r2, [r7, #24]
 8009ccc:	1a8a      	subs	r2, r1, r2
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	8919      	ldrh	r1, [r3, #8]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	8b3a      	ldrh	r2, [r7, #24]
 8009cde:	1a8a      	subs	r2, r1, r2
 8009ce0:	b292      	uxth	r2, r2
 8009ce2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	6912      	ldr	r2, [r2, #16]
 8009cec:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	741a      	strb	r2, [r3, #16]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f103 0214 	add.w	r2, r3, #20
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	7b1b      	ldrb	r3, [r3, #12]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d006      	beq.n	8009d22 <tcp_output_segment+0x16e>
 8009d14:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <tcp_output_segment+0x1a4>)
 8009d16:	f240 621c 	movw	r2, #1564	; 0x61c
 8009d1a:	4915      	ldr	r1, [pc, #84]	; (8009d70 <tcp_output_segment+0x1bc>)
 8009d1c:	4810      	ldr	r0, [pc, #64]	; (8009d60 <tcp_output_segment+0x1ac>)
 8009d1e:	f006 fa2f 	bl	8010180 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6858      	ldr	r0, [r3, #4]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	1d1c      	adds	r4, r3, #4
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	7add      	ldrb	r5, [r3, #11]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	7a9b      	ldrb	r3, [r3, #10]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	9202      	str	r2, [sp, #8]
 8009d38:	2206      	movs	r2, #6
 8009d3a:	9201      	str	r2, [sp, #4]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	462b      	mov	r3, r5
 8009d40:	4622      	mov	r2, r4
 8009d42:	f005 f861 	bl	800ee08 <ip4_output_if>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3720      	adds	r7, #32
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bdb0      	pop	{r4, r5, r7, pc}
 8009d56:	bf00      	nop
 8009d58:	08012a50 	.word	0x08012a50
 8009d5c:	08013070 	.word	0x08013070
 8009d60:	08012aa4 	.word	0x08012aa4
 8009d64:	08013090 	.word	0x08013090
 8009d68:	080130b0 	.word	0x080130b0
 8009d6c:	2000694c 	.word	0x2000694c
 8009d70:	080130d4 	.word	0x080130d4

08009d74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009d74:	b5b0      	push	{r4, r5, r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <tcp_rexmit_rto_prepare+0x1c>
 8009d82:	4b36      	ldr	r3, [pc, #216]	; (8009e5c <tcp_rexmit_rto_prepare+0xe8>)
 8009d84:	f240 6263 	movw	r2, #1635	; 0x663
 8009d88:	4935      	ldr	r1, [pc, #212]	; (8009e60 <tcp_rexmit_rto_prepare+0xec>)
 8009d8a:	4836      	ldr	r0, [pc, #216]	; (8009e64 <tcp_rexmit_rto_prepare+0xf0>)
 8009d8c:	f006 f9f8 	bl	8010180 <iprintf>

  if (pcb->unacked == NULL) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009d98:	f06f 0305 	mvn.w	r3, #5
 8009d9c:	e059      	b.n	8009e52 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e00b      	b.n	8009dbe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff fee4 	bl	8009b74 <tcp_output_segment_busy>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009db2:	f06f 0305 	mvn.w	r3, #5
 8009db6:	e04c      	b.n	8009e52 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1ef      	bne.n	8009da6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff fed4 	bl	8009b74 <tcp_output_segment_busy>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009dd2:	f06f 0305 	mvn.w	r3, #5
 8009dd6:	e03c      	b.n	8009e52 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	895a      	ldrh	r2, [r3, #10]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8b5b      	ldrh	r3, [r3, #26]
 8009e04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7f9 fcd1 	bl	80037bc <lwip_htonl>
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	891b      	ldrh	r3, [r3, #8]
 8009e20:	461d      	mov	r5, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	899b      	ldrh	r3, [r3, #12]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f9 fcb1 	bl	8003792 <lwip_htons>
 8009e30:	4603      	mov	r3, r0
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <tcp_rexmit_rto_prepare+0xcc>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <tcp_rexmit_rto_prepare+0xce>
 8009e40:	2300      	movs	r3, #0
 8009e42:	442b      	add	r3, r5
 8009e44:	18e2      	adds	r2, r4, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bdb0      	pop	{r4, r5, r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	08012a50 	.word	0x08012a50
 8009e60:	080130e8 	.word	0x080130e8
 8009e64:	08012aa4 	.word	0x08012aa4

08009e68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <tcp_rexmit_rto_commit+0x1c>
 8009e76:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <tcp_rexmit_rto_commit+0x44>)
 8009e78:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e7c:	490c      	ldr	r1, [pc, #48]	; (8009eb0 <tcp_rexmit_rto_commit+0x48>)
 8009e7e:	480d      	ldr	r0, [pc, #52]	; (8009eb4 <tcp_rexmit_rto_commit+0x4c>)
 8009e80:	f006 f97e 	bl	8010180 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e8a:	2bff      	cmp	r3, #255	; 0xff
 8009e8c:	d007      	beq.n	8009e9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e94:	3301      	adds	r3, #1
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fc6c 	bl	800977c <tcp_output>
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	08012a50 	.word	0x08012a50
 8009eb0:	0801310c 	.word	0x0801310c
 8009eb4:	08012aa4 	.word	0x08012aa4

08009eb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <tcp_rexmit_rto+0x1c>
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <tcp_rexmit_rto+0x38>)
 8009ec8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009ecc:	4909      	ldr	r1, [pc, #36]	; (8009ef4 <tcp_rexmit_rto+0x3c>)
 8009ece:	480a      	ldr	r0, [pc, #40]	; (8009ef8 <tcp_rexmit_rto+0x40>)
 8009ed0:	f006 f956 	bl	8010180 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff4d 	bl	8009d74 <tcp_rexmit_rto_prepare>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ffc1 	bl	8009e68 <tcp_rexmit_rto_commit>
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	08012a50 	.word	0x08012a50
 8009ef4:	08013130 	.word	0x08013130
 8009ef8:	08012aa4 	.word	0x08012aa4

08009efc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <tcp_rexmit+0x1c>
 8009f0a:	4b2f      	ldr	r3, [pc, #188]	; (8009fc8 <tcp_rexmit+0xcc>)
 8009f0c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009f10:	492e      	ldr	r1, [pc, #184]	; (8009fcc <tcp_rexmit+0xd0>)
 8009f12:	482f      	ldr	r0, [pc, #188]	; (8009fd0 <tcp_rexmit+0xd4>)
 8009f14:	f006 f934 	bl	8010180 <iprintf>

  if (pcb->unacked == NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009f20:	f06f 0305 	mvn.w	r3, #5
 8009f24:	e04c      	b.n	8009fc0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009f2c:	68b8      	ldr	r0, [r7, #8]
 8009f2e:	f7ff fe21 	bl	8009b74 <tcp_output_segment_busy>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009f38:	f06f 0305 	mvn.w	r3, #5
 8009f3c:	e040      	b.n	8009fc0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	336c      	adds	r3, #108	; 0x6c
 8009f4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f4c:	e002      	b.n	8009f54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d011      	beq.n	8009f80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7f9 fc29 	bl	80037bc <lwip_htonl>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 fc22 	bl	80037bc <lwip_htonl>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dbe6      	blt.n	8009f4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fa4:	2bff      	cmp	r3, #255	; 0xff
 8009fa6:	d007      	beq.n	8009fb8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fae:	3301      	adds	r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd90      	pop	{r4, r7, pc}
 8009fc8:	08012a50 	.word	0x08012a50
 8009fcc:	0801314c 	.word	0x0801314c
 8009fd0:	08012aa4 	.word	0x08012aa4

08009fd4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <tcp_rexmit_fast+0x1c>
 8009fe2:	4b2e      	ldr	r3, [pc, #184]	; (800a09c <tcp_rexmit_fast+0xc8>)
 8009fe4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009fe8:	492d      	ldr	r1, [pc, #180]	; (800a0a0 <tcp_rexmit_fast+0xcc>)
 8009fea:	482e      	ldr	r0, [pc, #184]	; (800a0a4 <tcp_rexmit_fast+0xd0>)
 8009fec:	f006 f8c8 	bl	8010180 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d04d      	beq.n	800a094 <tcp_rexmit_fast+0xc0>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	8b5b      	ldrh	r3, [r3, #26]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d147      	bne.n	800a094 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff79 	bl	8009efc <tcp_rexmit>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d141      	bne.n	800a094 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d207      	bcs.n	800a030 <tcp_rexmit_fast+0x5c>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a026:	0fda      	lsrs	r2, r3, #31
 800a028:	4413      	add	r3, r2
 800a02a:	105b      	asrs	r3, r3, #1
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	e006      	b.n	800a03e <tcp_rexmit_fast+0x6a>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a036:	0fda      	lsrs	r2, r3, #31
 800a038:	4413      	add	r3, r2
 800a03a:	105b      	asrs	r3, r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	429a      	cmp	r2, r3
 800a054:	d206      	bcs.n	800a064 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a06e:	4619      	mov	r1, r3
 800a070:	0049      	lsls	r1, r1, #1
 800a072:	440b      	add	r3, r1
 800a074:	b29b      	uxth	r3, r3
 800a076:	4413      	add	r3, r2
 800a078:	b29a      	uxth	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8b5b      	ldrh	r3, [r3, #26]
 800a084:	f043 0304 	orr.w	r3, r3, #4
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	08012a50 	.word	0x08012a50
 800a0a0:	08013164 	.word	0x08013164
 800a0a4:	08012aa4 	.word	0x08012aa4

0800a0a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	607b      	str	r3, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	817b      	strh	r3, [r7, #10]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a0ba:	897a      	ldrh	r2, [r7, #10]
 800a0bc:	893b      	ldrh	r3, [r7, #8]
 800a0be:	4413      	add	r3, r2
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	2022      	movs	r0, #34	; 0x22
 800a0ce:	f7fa fbf5 	bl	80048bc <pbuf_alloc>
 800a0d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d04e      	beq.n	800a178 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	895b      	ldrh	r3, [r3, #10]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	897b      	ldrh	r3, [r7, #10]
 800a0e2:	3314      	adds	r3, #20
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	da06      	bge.n	800a0f6 <tcp_output_alloc_header_common+0x4e>
 800a0e8:	4b26      	ldr	r3, [pc, #152]	; (800a184 <tcp_output_alloc_header_common+0xdc>)
 800a0ea:	f240 7224 	movw	r2, #1828	; 0x724
 800a0ee:	4926      	ldr	r1, [pc, #152]	; (800a188 <tcp_output_alloc_header_common+0xe0>)
 800a0f0:	4826      	ldr	r0, [pc, #152]	; (800a18c <tcp_output_alloc_header_common+0xe4>)
 800a0f2:	f006 f845 	bl	8010180 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a0fc:	8c3b      	ldrh	r3, [r7, #32]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f9 fb47 	bl	8003792 <lwip_htons>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f9 fb3f 	bl	8003792 <lwip_htons>
 800a114:	4603      	mov	r3, r0
 800a116:	461a      	mov	r2, r3
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7f9 fb4a 	bl	80037bc <lwip_htonl>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a12e:	897b      	ldrh	r3, [r7, #10]
 800a130:	089b      	lsrs	r3, r3, #2
 800a132:	b29b      	uxth	r3, r3
 800a134:	3305      	adds	r3, #5
 800a136:	b29b      	uxth	r3, r3
 800a138:	031b      	lsls	r3, r3, #12
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a140:	b29b      	uxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b29b      	uxth	r3, r3
 800a146:	4618      	mov	r0, r3
 800a148:	f7f9 fb23 	bl	8003792 <lwip_htons>
 800a14c:	4603      	mov	r3, r0
 800a14e:	461a      	mov	r2, r3
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a154:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a156:	4618      	mov	r0, r3
 800a158:	f7f9 fb1b 	bl	8003792 <lwip_htons>
 800a15c:	4603      	mov	r3, r0
 800a15e:	461a      	mov	r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2200      	movs	r2, #0
 800a168:	741a      	strb	r2, [r3, #16]
 800a16a:	2200      	movs	r2, #0
 800a16c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2200      	movs	r2, #0
 800a172:	749a      	strb	r2, [r3, #18]
 800a174:	2200      	movs	r2, #0
 800a176:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a178:	697b      	ldr	r3, [r7, #20]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	08012a50 	.word	0x08012a50
 800a188:	08013184 	.word	0x08013184
 800a18c:	08012aa4 	.word	0x08012aa4

0800a190 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a190:	b5b0      	push	{r4, r5, r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af04      	add	r7, sp, #16
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	817b      	strh	r3, [r7, #10]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d106      	bne.n	800a1b6 <tcp_output_alloc_header+0x26>
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <tcp_output_alloc_header+0x70>)
 800a1aa:	f240 7242 	movw	r2, #1858	; 0x742
 800a1ae:	4915      	ldr	r1, [pc, #84]	; (800a204 <tcp_output_alloc_header+0x74>)
 800a1b0:	4815      	ldr	r0, [pc, #84]	; (800a208 <tcp_output_alloc_header+0x78>)
 800a1b2:	f005 ffe5 	bl	8010180 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	8adb      	ldrh	r3, [r3, #22]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	8b12      	ldrh	r2, [r2, #24]
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a1c6:	893d      	ldrh	r5, [r7, #8]
 800a1c8:	897c      	ldrh	r4, [r7, #10]
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	2110      	movs	r1, #16
 800a1ce:	9102      	str	r1, [sp, #8]
 800a1d0:	9201      	str	r2, [sp, #4]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f7ff ff65 	bl	800a0a8 <tcp_output_alloc_header_common>
 800a1de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a1ee:	441a      	add	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a1f4:	697b      	ldr	r3, [r7, #20]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	08012a50 	.word	0x08012a50
 800a204:	080131b4 	.word	0x080131b4
 800a208:	08012aa4 	.word	0x08012aa4

0800a20c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4611      	mov	r1, r2
 800a218:	461a      	mov	r2, r3
 800a21a:	460b      	mov	r3, r1
 800a21c:	71fb      	strb	r3, [r7, #7]
 800a21e:	4613      	mov	r3, r2
 800a220:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <tcp_output_fill_options+0x2e>
 800a22c:	4b13      	ldr	r3, [pc, #76]	; (800a27c <tcp_output_fill_options+0x70>)
 800a22e:	f240 7256 	movw	r2, #1878	; 0x756
 800a232:	4913      	ldr	r1, [pc, #76]	; (800a280 <tcp_output_fill_options+0x74>)
 800a234:	4813      	ldr	r0, [pc, #76]	; (800a284 <tcp_output_fill_options+0x78>)
 800a236:	f005 ffa3 	bl	8010180 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	3314      	adds	r3, #20
 800a244:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	f103 0214 	add.w	r2, r3, #20
 800a24c:	8bfb      	ldrh	r3, [r7, #30]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4619      	mov	r1, r3
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	440b      	add	r3, r1
 800a25c:	4413      	add	r3, r2
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	429a      	cmp	r2, r3
 800a262:	d006      	beq.n	800a272 <tcp_output_fill_options+0x66>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <tcp_output_fill_options+0x70>)
 800a266:	f240 7275 	movw	r2, #1909	; 0x775
 800a26a:	4907      	ldr	r1, [pc, #28]	; (800a288 <tcp_output_fill_options+0x7c>)
 800a26c:	4805      	ldr	r0, [pc, #20]	; (800a284 <tcp_output_fill_options+0x78>)
 800a26e:	f005 ff87 	bl	8010180 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a272:	bf00      	nop
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08012a50 	.word	0x08012a50
 800a280:	080131dc 	.word	0x080131dc
 800a284:	08012aa4 	.word	0x08012aa4
 800a288:	080130d4 	.word	0x080130d4

0800a28c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af04      	add	r7, sp, #16
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <tcp_output_control_segment+0x22>
 800a2a0:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <tcp_output_control_segment+0x88>)
 800a2a2:	f240 7287 	movw	r2, #1927	; 0x787
 800a2a6:	491c      	ldr	r1, [pc, #112]	; (800a318 <tcp_output_control_segment+0x8c>)
 800a2a8:	481c      	ldr	r0, [pc, #112]	; (800a31c <tcp_output_control_segment+0x90>)
 800a2aa:	f005 ff69 	bl	8010180 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7fe ff1c 	bl	80090f0 <tcp_route>
 800a2b8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d102      	bne.n	800a2c6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a2c0:	23fc      	movs	r3, #252	; 0xfc
 800a2c2:	75fb      	strb	r3, [r7, #23]
 800a2c4:	e01c      	b.n	800a300 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	7adb      	ldrb	r3, [r3, #11]
 800a2d0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	7a9b      	ldrb	r3, [r3, #10]
 800a2d6:	757b      	strb	r3, [r7, #21]
 800a2d8:	e003      	b.n	800a2e2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a2da:	23ff      	movs	r3, #255	; 0xff
 800a2dc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a2e2:	7dba      	ldrb	r2, [r7, #22]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	7d7b      	ldrb	r3, [r7, #21]
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	68b8      	ldr	r0, [r7, #8]
 800a2f8:	f004 fd86 	bl	800ee08 <ip4_output_if>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a300:	68b8      	ldr	r0, [r7, #8]
 800a302:	f7fa fdbb 	bl	8004e7c <pbuf_free>
  return err;
 800a306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	08012a50 	.word	0x08012a50
 800a318:	08013204 	.word	0x08013204
 800a31c:	08012aa4 	.word	0x08012aa4

0800a320 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a320:	b590      	push	{r4, r7, lr}
 800a322:	b08b      	sub	sp, #44	; 0x2c
 800a324:	af04      	add	r7, sp, #16
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d106      	bne.n	800a342 <tcp_rst+0x22>
 800a334:	4b1f      	ldr	r3, [pc, #124]	; (800a3b4 <tcp_rst+0x94>)
 800a336:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a33a:	491f      	ldr	r1, [pc, #124]	; (800a3b8 <tcp_rst+0x98>)
 800a33c:	481f      	ldr	r0, [pc, #124]	; (800a3bc <tcp_rst+0x9c>)
 800a33e:	f005 ff1f 	bl	8010180 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	2b00      	cmp	r3, #0
 800a346:	d106      	bne.n	800a356 <tcp_rst+0x36>
 800a348:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <tcp_rst+0x94>)
 800a34a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a34e:	491c      	ldr	r1, [pc, #112]	; (800a3c0 <tcp_rst+0xa0>)
 800a350:	481a      	ldr	r0, [pc, #104]	; (800a3bc <tcp_rst+0x9c>)
 800a352:	f005 ff15 	bl	8010180 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a356:	2300      	movs	r3, #0
 800a358:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a35a:	f246 0308 	movw	r3, #24584	; 0x6008
 800a35e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	b29c      	uxth	r4, r3
 800a364:	68b8      	ldr	r0, [r7, #8]
 800a366:	f7f9 fa29 	bl	80037bc <lwip_htonl>
 800a36a:	4602      	mov	r2, r0
 800a36c:	8abb      	ldrh	r3, [r7, #20]
 800a36e:	9303      	str	r3, [sp, #12]
 800a370:	2314      	movs	r3, #20
 800a372:	9302      	str	r3, [sp, #8]
 800a374:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	4621      	mov	r1, r4
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fe90 	bl	800a0a8 <tcp_output_alloc_header_common>
 800a388:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00c      	beq.n	800a3aa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2200      	movs	r2, #0
 800a394:	6939      	ldr	r1, [r7, #16]
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff ff38 	bl	800a20c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff ff72 	bl	800a28c <tcp_output_control_segment>
 800a3a8:	e000      	b.n	800a3ac <tcp_rst+0x8c>
    return;
 800a3aa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd90      	pop	{r4, r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	08012a50 	.word	0x08012a50
 800a3b8:	08013230 	.word	0x08013230
 800a3bc:	08012aa4 	.word	0x08012aa4
 800a3c0:	0801324c 	.word	0x0801324c

0800a3c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <tcp_send_empty_ack+0x24>
 800a3da:	4b28      	ldr	r3, [pc, #160]	; (800a47c <tcp_send_empty_ack+0xb8>)
 800a3dc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a3e0:	4927      	ldr	r1, [pc, #156]	; (800a480 <tcp_send_empty_ack+0xbc>)
 800a3e2:	4828      	ldr	r0, [pc, #160]	; (800a484 <tcp_send_empty_ack+0xc0>)
 800a3e4:	f005 fecc 	bl	8010180 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0304 	and.w	r3, r3, #4
 800a3f2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a3f4:	7d7b      	ldrb	r3, [r7, #21]
 800a3f6:	b29c      	uxth	r4, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f9 f9dd 	bl	80037bc <lwip_htonl>
 800a402:	4603      	mov	r3, r0
 800a404:	2200      	movs	r2, #0
 800a406:	4621      	mov	r1, r4
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff fec1 	bl	800a190 <tcp_output_alloc_header>
 800a40e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8b5b      	ldrh	r3, [r3, #26]
 800a41a:	f043 0303 	orr.w	r3, r3, #3
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a424:	f06f 0301 	mvn.w	r3, #1
 800a428:	e023      	b.n	800a472 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
 800a42c:	7dfa      	ldrb	r2, [r7, #23]
 800a42e:	6939      	ldr	r1, [r7, #16]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff feeb 	bl	800a20c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	6939      	ldr	r1, [r7, #16]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff ff24 	bl	800a28c <tcp_output_control_segment>
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	8b5b      	ldrh	r3, [r3, #26]
 800a454:	f043 0303 	orr.w	r3, r3, #3
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	835a      	strh	r2, [r3, #26]
 800a45e:	e006      	b.n	800a46e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	8b5b      	ldrh	r3, [r3, #26]
 800a464:	f023 0303 	bic.w	r3, r3, #3
 800a468:	b29a      	uxth	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd90      	pop	{r4, r7, pc}
 800a47a:	bf00      	nop
 800a47c:	08012a50 	.word	0x08012a50
 800a480:	08013268 	.word	0x08013268
 800a484:	08012aa4 	.word	0x08012aa4

0800a488 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a488:	b590      	push	{r4, r7, lr}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a490:	2300      	movs	r3, #0
 800a492:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <tcp_keepalive+0x20>
 800a49a:	4b18      	ldr	r3, [pc, #96]	; (800a4fc <tcp_keepalive+0x74>)
 800a49c:	f640 0224 	movw	r2, #2084	; 0x824
 800a4a0:	4917      	ldr	r1, [pc, #92]	; (800a500 <tcp_keepalive+0x78>)
 800a4a2:	4818      	ldr	r0, [pc, #96]	; (800a504 <tcp_keepalive+0x7c>)
 800a4a4:	f005 fe6c 	bl	8010180 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a4a8:	7abb      	ldrb	r3, [r7, #10]
 800a4aa:	b29c      	uxth	r4, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f9 f982 	bl	80037bc <lwip_htonl>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4621      	mov	r1, r4
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fe66 	bl	800a190 <tcp_output_alloc_header>
 800a4c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d0:	e010      	b.n	800a4f4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a4d2:	7abb      	ldrb	r3, [r7, #10]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fe97 	bl	800a20c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	68f9      	ldr	r1, [r7, #12]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fed0 	bl	800a28c <tcp_output_control_segment>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a4f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd90      	pop	{r4, r7, pc}
 800a4fc:	08012a50 	.word	0x08012a50
 800a500:	08013288 	.word	0x08013288
 800a504:	08012aa4 	.word	0x08012aa4

0800a508 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b08b      	sub	sp, #44	; 0x2c
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a510:	2300      	movs	r3, #0
 800a512:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <tcp_zero_window_probe+0x20>
 800a51a:	4b4d      	ldr	r3, [pc, #308]	; (800a650 <tcp_zero_window_probe+0x148>)
 800a51c:	f640 024f 	movw	r2, #2127	; 0x84f
 800a520:	494c      	ldr	r1, [pc, #304]	; (800a654 <tcp_zero_window_probe+0x14c>)
 800a522:	484d      	ldr	r0, [pc, #308]	; (800a658 <tcp_zero_window_probe+0x150>)
 800a524:	f005 fe2c 	bl	8010180 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	e087      	b.n	800a648 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a53e:	2bff      	cmp	r3, #255	; 0xff
 800a540:	d007      	beq.n	800a552 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a548:	3301      	adds	r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	899b      	ldrh	r3, [r3, #12]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f9 f919 	bl	8003792 <lwip_htons>
 800a560:	4603      	mov	r3, r0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <tcp_zero_window_probe+0x70>
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	891b      	ldrh	r3, [r3, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <tcp_zero_window_probe+0x70>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <tcp_zero_window_probe+0x72>
 800a578:	2300      	movs	r3, #0
 800a57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a57e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf0c      	ite	eq
 800a586:	2301      	moveq	r3, #1
 800a588:	2300      	movne	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a58e:	7cfb      	ldrb	r3, [r7, #19]
 800a590:	b299      	uxth	r1, r3
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	8c3a      	ldrh	r2, [r7, #32]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fdf8 	bl	800a190 <tcp_output_alloc_header>
 800a5a0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ac:	e04c      	b.n	800a648 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800a5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d011      	beq.n	800a5e0 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	899b      	ldrh	r3, [r3, #12]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	b21b      	sxth	r3, r3
 800a5c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5c8:	b21c      	sxth	r4, r3
 800a5ca:	2011      	movs	r0, #17
 800a5cc:	f7f9 f8e1 	bl	8003792 <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	b21b      	sxth	r3, r3
 800a5d4:	4323      	orrs	r3, r4
 800a5d6:	b21b      	sxth	r3, r3
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	819a      	strh	r2, [r3, #12]
 800a5de:	e010      	b.n	800a602 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	3314      	adds	r3, #20
 800a5e6:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	6858      	ldr	r0, [r3, #4]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	891a      	ldrh	r2, [r3, #8]
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	891b      	ldrh	r3, [r3, #8]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	6979      	ldr	r1, [r7, #20]
 800a5fe:	f7fa fe37 	bl	8005270 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f9 f8d7 	bl	80037bc <lwip_htonl>
 800a60e:	4603      	mov	r3, r0
 800a610:	3301      	adds	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da02      	bge.n	800a626 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a626:	7cfb      	ldrb	r3, [r7, #19]
 800a628:	2200      	movs	r2, #0
 800a62a:	69f9      	ldr	r1, [r7, #28]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff fded 	bl	800a20c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3304      	adds	r3, #4
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff fe26 	bl	800a28c <tcp_output_control_segment>
 800a640:	4603      	mov	r3, r0
 800a642:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a644:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	372c      	adds	r7, #44	; 0x2c
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}
 800a650:	08012a50 	.word	0x08012a50
 800a654:	080132a4 	.word	0x080132a4
 800a658:	08012aa4 	.word	0x08012aa4

0800a65c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a664:	f7fa fef2 	bl	800544c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <tcpip_tcp_timer+0x38>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <tcpip_tcp_timer+0x1c>
 800a670:	4b09      	ldr	r3, [pc, #36]	; (800a698 <tcpip_tcp_timer+0x3c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a678:	4b08      	ldr	r3, [pc, #32]	; (800a69c <tcpip_tcp_timer+0x40>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	4908      	ldr	r1, [pc, #32]	; (800a6a0 <tcpip_tcp_timer+0x44>)
 800a67e:	20fa      	movs	r0, #250	; 0xfa
 800a680:	f000 f908 	bl	800a894 <sys_timeout_debug>
 800a684:	e002      	b.n	800a68c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <tcpip_tcp_timer+0x48>)
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]
  }
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20006948 	.word	0x20006948
 800a698:	20006958 	.word	0x20006958
 800a69c:	0801330c 	.word	0x0801330c
 800a6a0:	0800a65d 	.word	0x0800a65d
 800a6a4:	20000110 	.word	0x20000110

0800a6a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <tcp_timer_needed+0x34>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d110      	bne.n	800a6d6 <tcp_timer_needed+0x2e>
 800a6b4:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <tcp_timer_needed+0x38>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <tcp_timer_needed+0x1c>
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <tcp_timer_needed+0x3c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d008      	beq.n	800a6d6 <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <tcp_timer_needed+0x34>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <tcp_timer_needed+0x40>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4907      	ldr	r1, [pc, #28]	; (800a6ec <tcp_timer_needed+0x44>)
 800a6d0:	20fa      	movs	r0, #250	; 0xfa
 800a6d2:	f000 f8df 	bl	800a894 <sys_timeout_debug>
  }
}
 800a6d6:	bf00      	nop
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000110 	.word	0x20000110
 800a6e0:	20006948 	.word	0x20006948
 800a6e4:	20006958 	.word	0x20006958
 800a6e8:	0801330c 	.word	0x0801330c
 800a6ec:	0800a65d 	.word	0x0800a65d

0800a6f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a6fe:	2006      	movs	r0, #6
 800a700:	f7f9 fc9c 	bl	800403c <memp_malloc>
 800a704:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d109      	bne.n	800a720 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d154      	bne.n	800a7bc <sys_timeout_abs+0xcc>
 800a712:	4b2c      	ldr	r3, [pc, #176]	; (800a7c4 <sys_timeout_abs+0xd4>)
 800a714:	22be      	movs	r2, #190	; 0xbe
 800a716:	492c      	ldr	r1, [pc, #176]	; (800a7c8 <sys_timeout_abs+0xd8>)
 800a718:	482c      	ldr	r0, [pc, #176]	; (800a7cc <sys_timeout_abs+0xdc>)
 800a71a:	f005 fd31 	bl	8010180 <iprintf>
    return;
 800a71e:	e04d      	b.n	800a7bc <sys_timeout_abs+0xcc>
  }

  timeout->next = NULL;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a73e:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d103      	bne.n	800a74e <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800a746:	4a22      	ldr	r2, [pc, #136]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6013      	str	r3, [r2, #0]
    return;
 800a74c:	e037      	b.n	800a7be <sys_timeout_abs+0xce>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	0fdb      	lsrs	r3, r3, #31
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <sys_timeout_abs+0x86>
    timeout->next = next_timeout;
 800a766:	4b1a      	ldr	r3, [pc, #104]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a76e:	4a18      	ldr	r2, [pc, #96]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e023      	b.n	800a7be <sys_timeout_abs+0xce>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <sys_timeout_abs+0xe0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	617b      	str	r3, [r7, #20]
 800a77c:	e01a      	b.n	800a7b4 <sys_timeout_abs+0xc4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00b      	beq.n	800a79e <sys_timeout_abs+0xae>
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	0fdb      	lsrs	r3, r3, #31
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d007      	beq.n	800a7ae <sys_timeout_abs+0xbe>
        timeout->next = t->next;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	601a      	str	r2, [r3, #0]
        break;
 800a7ac:	e007      	b.n	800a7be <sys_timeout_abs+0xce>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e1      	bne.n	800a77e <sys_timeout_abs+0x8e>
 800a7ba:	e000      	b.n	800a7be <sys_timeout_abs+0xce>
    return;
 800a7bc:	bf00      	nop
      }
    }
  }
}
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0801331c 	.word	0x0801331c
 800a7c8:	08013350 	.word	0x08013350
 800a7cc:	08013390 	.word	0x08013390
 800a7d0:	20000108 	.word	0x20000108

0800a7d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4798      	blx	r3

  now = sys_now();
 800a7e6:	f7f8 ffcd 	bl	8003784 <sys_now>
 800a7ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	4b11      	ldr	r3, [pc, #68]	; (800a838 <lwip_cyclic_timer+0x64>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	0fdb      	lsrs	r3, r3, #31
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <lwip_cyclic_timer+0x4c>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	18d0      	adds	r0, r2, r3
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	4908      	ldr	r1, [pc, #32]	; (800a83c <lwip_cyclic_timer+0x68>)
 800a81a:	f7ff ff69 	bl	800a6f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a81e:	e006      	b.n	800a82e <lwip_cyclic_timer+0x5a>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	4905      	ldr	r1, [pc, #20]	; (800a83c <lwip_cyclic_timer+0x68>)
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff ff61 	bl	800a6f0 <sys_timeout_abs>
}
 800a82e:	bf00      	nop
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2000010c 	.word	0x2000010c
 800a83c:	0800a7d5 	.word	0x0800a7d5

0800a840 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a846:	2301      	movs	r3, #1
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	e015      	b.n	800a878 <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a84c:	490e      	ldr	r1, [pc, #56]	; (800a888 <sys_timeouts_init+0x48>)
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4a08      	ldr	r2, [pc, #32]	; (800a888 <sys_timeouts_init+0x48>)
 800a868:	441a      	add	r2, r3
 800a86a:	4b08      	ldr	r3, [pc, #32]	; (800a88c <sys_timeouts_init+0x4c>)
 800a86c:	4908      	ldr	r1, [pc, #32]	; (800a890 <sys_timeouts_init+0x50>)
 800a86e:	f000 f811 	bl	800a894 <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3301      	adds	r3, #1
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d9e6      	bls.n	800a84c <sys_timeouts_init+0xc>
  }
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08015cdc 	.word	0x08015cdc
 800a88c:	080133b8 	.word	0x080133b8
 800a890:	0800a7d5 	.word	0x0800a7d5

0800a894 <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a8:	d306      	bcc.n	800a8b8 <sys_timeout_debug+0x24>
 800a8aa:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <sys_timeout_debug+0x44>)
 800a8ac:	f240 1229 	movw	r2, #297	; 0x129
 800a8b0:	490a      	ldr	r1, [pc, #40]	; (800a8dc <sys_timeout_debug+0x48>)
 800a8b2:	480b      	ldr	r0, [pc, #44]	; (800a8e0 <sys_timeout_debug+0x4c>)
 800a8b4:	f005 fc64 	bl	8010180 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a8b8:	f7f8 ff64 	bl	8003784 <sys_now>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff10 	bl	800a6f0 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 800a8d0:	bf00      	nop
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	0801331c 	.word	0x0801331c
 800a8dc:	080133cc 	.word	0x080133cc
 800a8e0:	08013390 	.word	0x08013390

0800a8e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8e8:	f005 fcda 	bl	80102a0 <rand>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	4b01      	ldr	r3, [pc, #4]	; (800a904 <udp_init+0x20>)
 800a8fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a900:	bf00      	nop
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000010 	.word	0x20000010

0800a908 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a912:	4b17      	ldr	r3, [pc, #92]	; (800a970 <udp_new_port+0x68>)
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	b291      	uxth	r1, r2
 800a91a:	4a15      	ldr	r2, [pc, #84]	; (800a970 <udp_new_port+0x68>)
 800a91c:	8011      	strh	r1, [r2, #0]
 800a91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a922:	4293      	cmp	r3, r2
 800a924:	d103      	bne.n	800a92e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a926:	4b12      	ldr	r3, [pc, #72]	; (800a970 <udp_new_port+0x68>)
 800a928:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a92c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a92e:	4b11      	ldr	r3, [pc, #68]	; (800a974 <udp_new_port+0x6c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	e011      	b.n	800a95a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	8a5a      	ldrh	r2, [r3, #18]
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <udp_new_port+0x68>)
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d108      	bne.n	800a954 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	3301      	adds	r3, #1
 800a946:	80fb      	strh	r3, [r7, #6]
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a94e:	d3e0      	bcc.n	800a912 <udp_new_port+0xa>
        return 0;
 800a950:	2300      	movs	r3, #0
 800a952:	e007      	b.n	800a964 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	603b      	str	r3, [r7, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1ea      	bne.n	800a936 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a960:	4b03      	ldr	r3, [pc, #12]	; (800a970 <udp_new_port+0x68>)
 800a962:	881b      	ldrh	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	20000010 	.word	0x20000010
 800a974:	20006960 	.word	0x20006960

0800a978 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	4613      	mov	r3, r2
 800a984:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d105      	bne.n	800a998 <udp_input_local_match+0x20>
 800a98c:	4b27      	ldr	r3, [pc, #156]	; (800aa2c <udp_input_local_match+0xb4>)
 800a98e:	2287      	movs	r2, #135	; 0x87
 800a990:	4927      	ldr	r1, [pc, #156]	; (800aa30 <udp_input_local_match+0xb8>)
 800a992:	4828      	ldr	r0, [pc, #160]	; (800aa34 <udp_input_local_match+0xbc>)
 800a994:	f005 fbf4 	bl	8010180 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <udp_input_local_match+0x32>
 800a99e:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <udp_input_local_match+0xb4>)
 800a9a0:	2288      	movs	r2, #136	; 0x88
 800a9a2:	4925      	ldr	r1, [pc, #148]	; (800aa38 <udp_input_local_match+0xc0>)
 800a9a4:	4823      	ldr	r0, [pc, #140]	; (800aa34 <udp_input_local_match+0xbc>)
 800a9a6:	f005 fbeb 	bl	8010180 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	7a1b      	ldrb	r3, [r3, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	7a1a      	ldrb	r2, [r3, #8]
 800a9b6:	4b21      	ldr	r3, [pc, #132]	; (800aa3c <udp_input_local_match+0xc4>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9be:	3301      	adds	r3, #1
 800a9c0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d001      	beq.n	800a9ca <udp_input_local_match+0x52>
    return 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e02b      	b.n	800aa22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d018      	beq.n	800aa02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d013      	beq.n	800a9fe <udp_input_local_match+0x86>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00f      	beq.n	800a9fe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a9de:	4b17      	ldr	r3, [pc, #92]	; (800aa3c <udp_input_local_match+0xc4>)
 800a9e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e6:	d00a      	beq.n	800a9fe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <udp_input_local_match+0xc4>)
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	405a      	eors	r2, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d110      	bne.n	800aa20 <udp_input_local_match+0xa8>
          return 1;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e00f      	b.n	800aa22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d009      	beq.n	800aa1c <udp_input_local_match+0xa4>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <udp_input_local_match+0xa4>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <udp_input_local_match+0xc4>)
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d101      	bne.n	800aa20 <udp_input_local_match+0xa8>
        return 1;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e000      	b.n	800aa22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	08013418 	.word	0x08013418
 800aa30:	08013448 	.word	0x08013448
 800aa34:	0801346c 	.word	0x0801346c
 800aa38:	08013494 	.word	0x08013494
 800aa3c:	20003390 	.word	0x20003390

0800aa40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b08d      	sub	sp, #52	; 0x34
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <udp_input+0x20>
 800aa54:	4b7c      	ldr	r3, [pc, #496]	; (800ac48 <udp_input+0x208>)
 800aa56:	22cf      	movs	r2, #207	; 0xcf
 800aa58:	497c      	ldr	r1, [pc, #496]	; (800ac4c <udp_input+0x20c>)
 800aa5a:	487d      	ldr	r0, [pc, #500]	; (800ac50 <udp_input+0x210>)
 800aa5c:	f005 fb90 	bl	8010180 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <udp_input+0x32>
 800aa66:	4b78      	ldr	r3, [pc, #480]	; (800ac48 <udp_input+0x208>)
 800aa68:	22d0      	movs	r2, #208	; 0xd0
 800aa6a:	497a      	ldr	r1, [pc, #488]	; (800ac54 <udp_input+0x214>)
 800aa6c:	4878      	ldr	r0, [pc, #480]	; (800ac50 <udp_input+0x210>)
 800aa6e:	f005 fb87 	bl	8010180 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	895b      	ldrh	r3, [r3, #10]
 800aa76:	2b07      	cmp	r3, #7
 800aa78:	d803      	bhi.n	800aa82 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7fa f9fe 	bl	8004e7c <pbuf_free>
    goto end;
 800aa80:	e0de      	b.n	800ac40 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aa88:	4b73      	ldr	r3, [pc, #460]	; (800ac58 <udp_input+0x218>)
 800aa8a:	695a      	ldr	r2, [r3, #20]
 800aa8c:	4b72      	ldr	r3, [pc, #456]	; (800ac58 <udp_input+0x218>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	4610      	mov	r0, r2
 800aa94:	f004 fb76 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f8 fe75 	bl	8003792 <lwip_htons>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	885b      	ldrh	r3, [r3, #2]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f8 fe6d 	bl	8003792 <lwip_htons>
 800aab8:	4603      	mov	r3, r0
 800aaba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 800aac4:	2300      	movs	r3, #0
 800aac6:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aac8:	4b64      	ldr	r3, [pc, #400]	; (800ac5c <udp_input+0x21c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	623b      	str	r3, [r7, #32]
 800aace:	e054      	b.n	800ab7a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	8a5b      	ldrh	r3, [r3, #18]
 800aad4:	89fa      	ldrh	r2, [r7, #14]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d14a      	bne.n	800ab70 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800aada:	7cfb      	ldrb	r3, [r7, #19]
 800aadc:	461a      	mov	r2, r3
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6a38      	ldr	r0, [r7, #32]
 800aae2:	f7ff ff49 	bl	800a978 <udp_input_local_match>
 800aae6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d041      	beq.n	800ab70 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	7c1b      	ldrb	r3, [r3, #16]
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11d      	bne.n	800ab34 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	61bb      	str	r3, [r7, #24]
 800ab02:	e017      	b.n	800ab34 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ab04:	7cfb      	ldrb	r3, [r7, #19]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d014      	beq.n	800ab34 <udp_input+0xf4>
 800ab0a:	4b53      	ldr	r3, [pc, #332]	; (800ac58 <udp_input+0x218>)
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab12:	d10f      	bne.n	800ab34 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d008      	beq.n	800ab34 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d101      	bne.n	800ab34 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	8a9b      	ldrh	r3, [r3, #20]
 800ab38:	8a3a      	ldrh	r2, [r7, #16]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d118      	bne.n	800ab70 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	4b43      	ldr	r3, [pc, #268]	; (800ac58 <udp_input+0x218>)
 800ab4c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d10e      	bne.n	800ab70 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d014      	beq.n	800ab82 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ab60:	4b3e      	ldr	r3, [pc, #248]	; (800ac5c <udp_input+0x21c>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ab68:	4a3c      	ldr	r2, [pc, #240]	; (800ac5c <udp_input+0x21c>)
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ab6e:	e008      	b.n	800ab82 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ab70:	6a3b      	ldr	r3, [r7, #32]
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	623b      	str	r3, [r7, #32]
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1a7      	bne.n	800aad0 <udp_input+0x90>
 800ab80:	e000      	b.n	800ab84 <udp_input+0x144>
        break;
 800ab82:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <udp_input+0x15a>
    for_us = 1;
 800ab94:	2301      	movs	r3, #1
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e00a      	b.n	800abb0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	4b2d      	ldr	r3, [pc, #180]	; (800ac58 <udp_input+0x218>)
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	bf0c      	ite	eq
 800aba8:	2301      	moveq	r3, #1
 800abaa:	2300      	movne	r3, #0
 800abac:	b2db      	uxtb	r3, r3
 800abae:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800abb0:	7ffb      	ldrb	r3, [r7, #31]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d041      	beq.n	800ac3a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800abb6:	2108      	movs	r1, #8
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7fa f8d9 	bl	8004d70 <pbuf_remove_header>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800abc4:	4b20      	ldr	r3, [pc, #128]	; (800ac48 <udp_input+0x208>)
 800abc6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800abca:	4925      	ldr	r1, [pc, #148]	; (800ac60 <udp_input+0x220>)
 800abcc:	4820      	ldr	r0, [pc, #128]	; (800ac50 <udp_input+0x210>)
 800abce:	f005 fad7 	bl	8010180 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fa f952 	bl	8004e7c <pbuf_free>
      goto end;
 800abd8:	e032      	b.n	800ac40 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d012      	beq.n	800ac06 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	699c      	ldr	r4, [r3, #24]
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	69d8      	ldr	r0, [r3, #28]
 800abf0:	8a3b      	ldrh	r3, [r7, #16]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	4b1b      	ldr	r3, [pc, #108]	; (800ac64 <udp_input+0x224>)
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6a39      	ldr	r1, [r7, #32]
 800abfa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800abfc:	e021      	b.n	800ac42 <udp_input+0x202>
        pbuf_free(p);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7fa f93c 	bl	8004e7c <pbuf_free>
        goto end;
 800ac04:	e01c      	b.n	800ac40 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ac06:	7cfb      	ldrb	r3, [r7, #19]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d112      	bne.n	800ac32 <udp_input+0x1f2>
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <udp_input+0x218>)
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac14:	2be0      	cmp	r3, #224	; 0xe0
 800ac16:	d00c      	beq.n	800ac32 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ac18:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <udp_input+0x218>)
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7fa f916 	bl	8004e56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ac2a:	2103      	movs	r1, #3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f003 fda1 	bl	800e774 <icmp_dest_unreach>
      pbuf_free(p);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7fa f922 	bl	8004e7c <pbuf_free>
  return;
 800ac38:	e003      	b.n	800ac42 <udp_input+0x202>
    pbuf_free(p);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fa f91e 	bl	8004e7c <pbuf_free>
  return;
 800ac40:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ac42:	372c      	adds	r7, #44	; 0x2c
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd90      	pop	{r4, r7, pc}
 800ac48:	08013418 	.word	0x08013418
 800ac4c:	080134bc 	.word	0x080134bc
 800ac50:	0801346c 	.word	0x0801346c
 800ac54:	080134d4 	.word	0x080134d4
 800ac58:	20003390 	.word	0x20003390
 800ac5c:	20006960 	.word	0x20006960
 800ac60:	080134f0 	.word	0x080134f0
 800ac64:	200033a0 	.word	0x200033a0

0800ac68 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af02      	add	r7, sp, #8
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d109      	bne.n	800ac90 <udp_sendto_if+0x28>
 800ac7c:	4b2e      	ldr	r3, [pc, #184]	; (800ad38 <udp_sendto_if+0xd0>)
 800ac7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac82:	492e      	ldr	r1, [pc, #184]	; (800ad3c <udp_sendto_if+0xd4>)
 800ac84:	482e      	ldr	r0, [pc, #184]	; (800ad40 <udp_sendto_if+0xd8>)
 800ac86:	f005 fa7b 	bl	8010180 <iprintf>
 800ac8a:	f06f 030f 	mvn.w	r3, #15
 800ac8e:	e04f      	b.n	800ad30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <udp_sendto_if+0x42>
 800ac96:	4b28      	ldr	r3, [pc, #160]	; (800ad38 <udp_sendto_if+0xd0>)
 800ac98:	f240 2281 	movw	r2, #641	; 0x281
 800ac9c:	4929      	ldr	r1, [pc, #164]	; (800ad44 <udp_sendto_if+0xdc>)
 800ac9e:	4828      	ldr	r0, [pc, #160]	; (800ad40 <udp_sendto_if+0xd8>)
 800aca0:	f005 fa6e 	bl	8010180 <iprintf>
 800aca4:	f06f 030f 	mvn.w	r3, #15
 800aca8:	e042      	b.n	800ad30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <udp_sendto_if+0x5c>
 800acb0:	4b21      	ldr	r3, [pc, #132]	; (800ad38 <udp_sendto_if+0xd0>)
 800acb2:	f240 2282 	movw	r2, #642	; 0x282
 800acb6:	4924      	ldr	r1, [pc, #144]	; (800ad48 <udp_sendto_if+0xe0>)
 800acb8:	4821      	ldr	r0, [pc, #132]	; (800ad40 <udp_sendto_if+0xd8>)
 800acba:	f005 fa61 	bl	8010180 <iprintf>
 800acbe:	f06f 030f 	mvn.w	r3, #15
 800acc2:	e035      	b.n	800ad30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <udp_sendto_if+0x76>
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <udp_sendto_if+0xd0>)
 800accc:	f240 2283 	movw	r2, #643	; 0x283
 800acd0:	491e      	ldr	r1, [pc, #120]	; (800ad4c <udp_sendto_if+0xe4>)
 800acd2:	481b      	ldr	r0, [pc, #108]	; (800ad40 <udp_sendto_if+0xd8>)
 800acd4:	f005 fa54 	bl	8010180 <iprintf>
 800acd8:	f06f 030f 	mvn.w	r3, #15
 800acdc:	e028      	b.n	800ad30 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <udp_sendto_if+0x90>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800acf4:	2be0      	cmp	r3, #224	; 0xe0
 800acf6:	d103      	bne.n	800ad00 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	3304      	adds	r3, #4
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	e00b      	b.n	800ad18 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	3304      	adds	r3, #4
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d002      	beq.n	800ad14 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ad0e:	f06f 0303 	mvn.w	r3, #3
 800ad12:	e00d      	b.n	800ad30 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ad18:	887a      	ldrh	r2, [r7, #2]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4613      	mov	r3, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f811 	bl	800ad50 <udp_sendto_if_src>
 800ad2e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	08013418 	.word	0x08013418
 800ad3c:	0801358c 	.word	0x0801358c
 800ad40:	0801346c 	.word	0x0801346c
 800ad44:	080135a8 	.word	0x080135a8
 800ad48:	080135c4 	.word	0x080135c4
 800ad4c:	080135e4 	.word	0x080135e4

0800ad50 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08c      	sub	sp, #48	; 0x30
 800ad54:	af04      	add	r7, sp, #16
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <udp_sendto_if_src+0x28>
 800ad64:	4b65      	ldr	r3, [pc, #404]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800ad66:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ad6a:	4965      	ldr	r1, [pc, #404]	; (800af00 <udp_sendto_if_src+0x1b0>)
 800ad6c:	4865      	ldr	r0, [pc, #404]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800ad6e:	f005 fa07 	bl	8010180 <iprintf>
 800ad72:	f06f 030f 	mvn.w	r3, #15
 800ad76:	e0bc      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d109      	bne.n	800ad92 <udp_sendto_if_src+0x42>
 800ad7e:	4b5f      	ldr	r3, [pc, #380]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800ad80:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ad84:	4960      	ldr	r1, [pc, #384]	; (800af08 <udp_sendto_if_src+0x1b8>)
 800ad86:	485f      	ldr	r0, [pc, #380]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800ad88:	f005 f9fa 	bl	8010180 <iprintf>
 800ad8c:	f06f 030f 	mvn.w	r3, #15
 800ad90:	e0af      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <udp_sendto_if_src+0x5c>
 800ad98:	4b58      	ldr	r3, [pc, #352]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800ad9a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ad9e:	495b      	ldr	r1, [pc, #364]	; (800af0c <udp_sendto_if_src+0x1bc>)
 800ada0:	4858      	ldr	r0, [pc, #352]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800ada2:	f005 f9ed 	bl	8010180 <iprintf>
 800ada6:	f06f 030f 	mvn.w	r3, #15
 800adaa:	e0a2      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d109      	bne.n	800adc6 <udp_sendto_if_src+0x76>
 800adb2:	4b52      	ldr	r3, [pc, #328]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800adb4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800adb8:	4955      	ldr	r1, [pc, #340]	; (800af10 <udp_sendto_if_src+0x1c0>)
 800adba:	4852      	ldr	r0, [pc, #328]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800adbc:	f005 f9e0 	bl	8010180 <iprintf>
 800adc0:	f06f 030f 	mvn.w	r3, #15
 800adc4:	e095      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d109      	bne.n	800ade0 <udp_sendto_if_src+0x90>
 800adcc:	4b4b      	ldr	r3, [pc, #300]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800adce:	f240 22d5 	movw	r2, #725	; 0x2d5
 800add2:	4950      	ldr	r1, [pc, #320]	; (800af14 <udp_sendto_if_src+0x1c4>)
 800add4:	484b      	ldr	r0, [pc, #300]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800add6:	f005 f9d3 	bl	8010180 <iprintf>
 800adda:	f06f 030f 	mvn.w	r3, #15
 800adde:	e088      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8a5b      	ldrh	r3, [r3, #18]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10f      	bne.n	800ae08 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ade8:	68f9      	ldr	r1, [r7, #12]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8a5b      	ldrh	r3, [r3, #18]
 800adee:	461a      	mov	r2, r3
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 f893 	bl	800af1c <udp_bind>
 800adf6:	4603      	mov	r3, r0
 800adf8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800adfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ae02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae06:	e074      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	891b      	ldrh	r3, [r3, #8]
 800ae0c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d902      	bls.n	800ae1a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	e06b      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ae1a:	2108      	movs	r1, #8
 800ae1c:	68b8      	ldr	r0, [r7, #8]
 800ae1e:	f7f9 ff97 	bl	8004d50 <pbuf_add_header>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d015      	beq.n	800ae54 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ae28:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae2c:	2108      	movs	r1, #8
 800ae2e:	2022      	movs	r0, #34	; 0x22
 800ae30:	f7f9 fd44 	bl	80048bc <pbuf_alloc>
 800ae34:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	e057      	b.n	800aef2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	891b      	ldrh	r3, [r3, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	69f8      	ldr	r0, [r7, #28]
 800ae4e:	f7fa f92d 	bl	80050ac <pbuf_chain>
 800ae52:	e001      	b.n	800ae58 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	895b      	ldrh	r3, [r3, #10]
 800ae5c:	2b07      	cmp	r3, #7
 800ae5e:	d806      	bhi.n	800ae6e <udp_sendto_if_src+0x11e>
 800ae60:	4b26      	ldr	r3, [pc, #152]	; (800aefc <udp_sendto_if_src+0x1ac>)
 800ae62:	f240 320e 	movw	r2, #782	; 0x30e
 800ae66:	492c      	ldr	r1, [pc, #176]	; (800af18 <udp_sendto_if_src+0x1c8>)
 800ae68:	4826      	ldr	r0, [pc, #152]	; (800af04 <udp_sendto_if_src+0x1b4>)
 800ae6a:	f005 f989 	bl	8010180 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8a5b      	ldrh	r3, [r3, #18]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7f8 fc8a 	bl	8003792 <lwip_htons>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	461a      	mov	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ae86:	887b      	ldrh	r3, [r7, #2]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7f8 fc82 	bl	8003792 <lwip_htons>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	461a      	mov	r2, r3
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	719a      	strb	r2, [r3, #6]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	891b      	ldrh	r3, [r3, #8]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7f8 fc74 	bl	8003792 <lwip_htons>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800aeb2:	2311      	movs	r3, #17
 800aeb4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7adb      	ldrb	r3, [r3, #11]
 800aeba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	7a9b      	ldrb	r3, [r3, #10]
 800aec0:	7cb9      	ldrb	r1, [r7, #18]
 800aec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec4:	9202      	str	r2, [sp, #8]
 800aec6:	7cfa      	ldrb	r2, [r7, #19]
 800aec8:	9201      	str	r2, [sp, #4]
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	460b      	mov	r3, r1
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aed2:	69f8      	ldr	r0, [r7, #28]
 800aed4:	f003 ffc2 	bl	800ee5c <ip4_output_if_src>
 800aed8:	4603      	mov	r3, r0
 800aeda:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800aedc:	69fa      	ldr	r2, [r7, #28]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d004      	beq.n	800aeee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800aee4:	69f8      	ldr	r0, [r7, #28]
 800aee6:	f7f9 ffc9 	bl	8004e7c <pbuf_free>
    q = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800aeee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	08013418 	.word	0x08013418
 800af00:	08013604 	.word	0x08013604
 800af04:	0801346c 	.word	0x0801346c
 800af08:	08013624 	.word	0x08013624
 800af0c:	08013644 	.word	0x08013644
 800af10:	08013668 	.word	0x08013668
 800af14:	0801368c 	.word	0x0801368c
 800af18:	080136b0 	.word	0x080136b0

0800af1c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	4613      	mov	r3, r2
 800af28:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800af30:	4b39      	ldr	r3, [pc, #228]	; (800b018 <udp_bind+0xfc>)
 800af32:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <udp_bind+0x32>
 800af3a:	4b38      	ldr	r3, [pc, #224]	; (800b01c <udp_bind+0x100>)
 800af3c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800af40:	4937      	ldr	r1, [pc, #220]	; (800b020 <udp_bind+0x104>)
 800af42:	4838      	ldr	r0, [pc, #224]	; (800b024 <udp_bind+0x108>)
 800af44:	f005 f91c 	bl	8010180 <iprintf>
 800af48:	f06f 030f 	mvn.w	r3, #15
 800af4c:	e060      	b.n	800b010 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af52:	4b35      	ldr	r3, [pc, #212]	; (800b028 <udp_bind+0x10c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e009      	b.n	800af6e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d102      	bne.n	800af68 <udp_bind+0x4c>
      rebind = 1;
 800af62:	2301      	movs	r3, #1
 800af64:	74fb      	strb	r3, [r7, #19]
      break;
 800af66:	e005      	b.n	800af74 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1f2      	bne.n	800af5a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d109      	bne.n	800af8e <udp_bind+0x72>
    port = udp_new_port();
 800af7a:	f7ff fcc5 	bl	800a908 <udp_new_port>
 800af7e:	4603      	mov	r3, r0
 800af80:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800af82:	88fb      	ldrh	r3, [r7, #6]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d12c      	bne.n	800afe2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800af88:	f06f 0307 	mvn.w	r3, #7
 800af8c:	e040      	b.n	800b010 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800af8e:	4b26      	ldr	r3, [pc, #152]	; (800b028 <udp_bind+0x10c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e022      	b.n	800afdc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d01b      	beq.n	800afd6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	8a5b      	ldrh	r3, [r3, #18]
 800afa2:	88fa      	ldrh	r2, [r7, #6]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d116      	bne.n	800afd6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d00d      	beq.n	800afd0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00a      	beq.n	800afd0 <udp_bind+0xb4>
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d006      	beq.n	800afd0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800afc2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800afd0:	f06f 0307 	mvn.w	r3, #7
 800afd4:	e01c      	b.n	800b010 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1d9      	bne.n	800af96 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d002      	beq.n	800afee <udp_bind+0xd2>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	e000      	b.n	800aff0 <udp_bind+0xd4>
 800afee:	2300      	movs	r3, #0
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	88fa      	ldrh	r2, [r7, #6]
 800aff8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800affa:	7cfb      	ldrb	r3, [r7, #19]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b000:	4b09      	ldr	r3, [pc, #36]	; (800b028 <udp_bind+0x10c>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b008:	4a07      	ldr	r2, [pc, #28]	; (800b028 <udp_bind+0x10c>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	08015d18 	.word	0x08015d18
 800b01c:	08013418 	.word	0x08013418
 800b020:	080136e0 	.word	0x080136e0
 800b024:	0801346c 	.word	0x0801346c
 800b028:	20006960 	.word	0x20006960

0800b02c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	4613      	mov	r3, r2
 800b038:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <udp_connect+0x28>
 800b040:	4b2c      	ldr	r3, [pc, #176]	; (800b0f4 <udp_connect+0xc8>)
 800b042:	f240 4235 	movw	r2, #1077	; 0x435
 800b046:	492c      	ldr	r1, [pc, #176]	; (800b0f8 <udp_connect+0xcc>)
 800b048:	482c      	ldr	r0, [pc, #176]	; (800b0fc <udp_connect+0xd0>)
 800b04a:	f005 f899 	bl	8010180 <iprintf>
 800b04e:	f06f 030f 	mvn.w	r3, #15
 800b052:	e04b      	b.n	800b0ec <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d109      	bne.n	800b06e <udp_connect+0x42>
 800b05a:	4b26      	ldr	r3, [pc, #152]	; (800b0f4 <udp_connect+0xc8>)
 800b05c:	f240 4236 	movw	r2, #1078	; 0x436
 800b060:	4927      	ldr	r1, [pc, #156]	; (800b100 <udp_connect+0xd4>)
 800b062:	4826      	ldr	r0, [pc, #152]	; (800b0fc <udp_connect+0xd0>)
 800b064:	f005 f88c 	bl	8010180 <iprintf>
 800b068:	f06f 030f 	mvn.w	r3, #15
 800b06c:	e03e      	b.n	800b0ec <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8a5b      	ldrh	r3, [r3, #18]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10f      	bne.n	800b096 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b076:	68f9      	ldr	r1, [r7, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	8a5b      	ldrh	r3, [r3, #18]
 800b07c:	461a      	mov	r2, r3
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff ff4c 	bl	800af1c <udp_bind>
 800b084:	4603      	mov	r3, r0
 800b086:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800b088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <udp_connect+0x6a>
      return err;
 800b090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b094:	e02a      	b.n	800b0ec <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <udp_connect+0x76>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	e000      	b.n	800b0a4 <udp_connect+0x78>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	88fa      	ldrh	r2, [r7, #6]
 800b0ac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	7c1b      	ldrb	r3, [r3, #16]
 800b0b2:	f043 0304 	orr.w	r3, r3, #4
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b0bc:	4b11      	ldr	r3, [pc, #68]	; (800b104 <udp_connect+0xd8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	e008      	b.n	800b0d6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d101      	bne.n	800b0d0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e00d      	b.n	800b0ec <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	613b      	str	r3, [r7, #16]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f3      	bne.n	800b0c4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <udp_connect+0xd8>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b0e4:	4a07      	ldr	r2, [pc, #28]	; (800b104 <udp_connect+0xd8>)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	08013418 	.word	0x08013418
 800b0f8:	080136f8 	.word	0x080136f8
 800b0fc:	0801346c 	.word	0x0801346c
 800b100:	08013714 	.word	0x08013714
 800b104:	20006960 	.word	0x20006960

0800b108 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d107      	bne.n	800b12a <udp_recv+0x22>
 800b11a:	4b08      	ldr	r3, [pc, #32]	; (800b13c <udp_recv+0x34>)
 800b11c:	f240 428a 	movw	r2, #1162	; 0x48a
 800b120:	4907      	ldr	r1, [pc, #28]	; (800b140 <udp_recv+0x38>)
 800b122:	4808      	ldr	r0, [pc, #32]	; (800b144 <udp_recv+0x3c>)
 800b124:	f005 f82c 	bl	8010180 <iprintf>
 800b128:	e005      	b.n	800b136 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	61da      	str	r2, [r3, #28]
}
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	08013418 	.word	0x08013418
 800b140:	0801374c 	.word	0x0801374c
 800b144:	0801346c 	.word	0x0801346c

0800b148 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <udp_remove+0x1e>
 800b156:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <udp_remove+0x74>)
 800b158:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b15c:	4918      	ldr	r1, [pc, #96]	; (800b1c0 <udp_remove+0x78>)
 800b15e:	4819      	ldr	r0, [pc, #100]	; (800b1c4 <udp_remove+0x7c>)
 800b160:	f005 f80e 	bl	8010180 <iprintf>
 800b164:	e026      	b.n	800b1b4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b166:	4b18      	ldr	r3, [pc, #96]	; (800b1c8 <udp_remove+0x80>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d105      	bne.n	800b17c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b170:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <udp_remove+0x80>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	4a14      	ldr	r2, [pc, #80]	; (800b1c8 <udp_remove+0x80>)
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e017      	b.n	800b1ac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <udp_remove+0x80>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	e010      	b.n	800b1a6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d009      	beq.n	800b1a0 <udp_remove+0x58>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	429a      	cmp	r2, r3
 800b194:	d104      	bne.n	800b1a0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	60da      	str	r2, [r3, #12]
        break;
 800b19e:	e005      	b.n	800b1ac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1eb      	bne.n	800b184 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f7f8 ff90 	bl	80040d4 <memp_free>
}
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08013418 	.word	0x08013418
 800b1c0:	08013764 	.word	0x08013764
 800b1c4:	0801346c 	.word	0x0801346c
 800b1c8:	20006960 	.word	0x20006960

0800b1cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	f7f8 ff32 	bl	800403c <memp_malloc>
 800b1d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f004 ffc3 	bl	8010170 <memset>
    pcb->ttl = UDP_TTL;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	22ff      	movs	r2, #255	; 0xff
 800b1ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b1f0:	687b      	ldr	r3, [r7, #4]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01e      	beq.n	800b24a <udp_netif_ip_addr_changed+0x4e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d01a      	beq.n	800b24a <udp_netif_ip_addr_changed+0x4e>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d017      	beq.n	800b24a <udp_netif_ip_addr_changed+0x4e>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d013      	beq.n	800b24a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b222:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <udp_netif_ip_addr_changed+0x5c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	60fb      	str	r3, [r7, #12]
 800b228:	e00c      	b.n	800b244 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d103      	bne.n	800b23e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1ef      	bne.n	800b22a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b24a:	bf00      	nop
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20006960 	.word	0x20006960

0800b25c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b260:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <dhcp_inc_pcb_refcount+0x88>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d133      	bne.n	800b2d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b268:	4b1f      	ldr	r3, [pc, #124]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <dhcp_inc_pcb_refcount+0x20>
 800b270:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <dhcp_inc_pcb_refcount+0x90>)
 800b272:	22e5      	movs	r2, #229	; 0xe5
 800b274:	491e      	ldr	r1, [pc, #120]	; (800b2f0 <dhcp_inc_pcb_refcount+0x94>)
 800b276:	481f      	ldr	r0, [pc, #124]	; (800b2f4 <dhcp_inc_pcb_refcount+0x98>)
 800b278:	f004 ff82 	bl	8010180 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b27c:	f7ff ffa6 	bl	800b1cc <udp_new>
 800b280:	4602      	mov	r2, r0
 800b282:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b284:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800b286:	4b18      	ldr	r3, [pc, #96]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	e024      	b.n	800b2de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	7a5a      	ldrb	r2, [r3, #9]
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f042 0220 	orr.w	r2, r2, #32
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b2a6:	4b10      	ldr	r3, [pc, #64]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2244      	movs	r2, #68	; 0x44
 800b2ac:	4912      	ldr	r1, [pc, #72]	; (800b2f8 <dhcp_inc_pcb_refcount+0x9c>)
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff fe34 	bl	800af1c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b2b4:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2243      	movs	r2, #67	; 0x43
 800b2ba:	490f      	ldr	r1, [pc, #60]	; (800b2f8 <dhcp_inc_pcb_refcount+0x9c>)
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff feb5 	bl	800b02c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b2c2:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	490c      	ldr	r1, [pc, #48]	; (800b2fc <dhcp_inc_pcb_refcount+0xa0>)
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff ff1c 	bl	800b108 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b2d0:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <dhcp_inc_pcb_refcount+0x88>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	4b02      	ldr	r3, [pc, #8]	; (800b2e4 <dhcp_inc_pcb_refcount+0x88>)
 800b2da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000118 	.word	0x20000118
 800b2e8:	20000114 	.word	0x20000114
 800b2ec:	0801377c 	.word	0x0801377c
 800b2f0:	080137b4 	.word	0x080137b4
 800b2f4:	080137dc 	.word	0x080137dc
 800b2f8:	08015d18 	.word	0x08015d18
 800b2fc:	0800cf25 	.word	0x0800cf25

0800b300 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b304:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <dhcp_dec_pcb_refcount+0x40>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d105      	bne.n	800b318 <dhcp_dec_pcb_refcount+0x18>
 800b30c:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <dhcp_dec_pcb_refcount+0x44>)
 800b30e:	22ff      	movs	r2, #255	; 0xff
 800b310:	490d      	ldr	r1, [pc, #52]	; (800b348 <dhcp_dec_pcb_refcount+0x48>)
 800b312:	480e      	ldr	r0, [pc, #56]	; (800b34c <dhcp_dec_pcb_refcount+0x4c>)
 800b314:	f004 ff34 	bl	8010180 <iprintf>
  dhcp_pcb_refcount--;
 800b318:	4b09      	ldr	r3, [pc, #36]	; (800b340 <dhcp_dec_pcb_refcount+0x40>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <dhcp_dec_pcb_refcount+0x40>)
 800b322:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b324:	4b06      	ldr	r3, [pc, #24]	; (800b340 <dhcp_dec_pcb_refcount+0x40>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d107      	bne.n	800b33c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b32c:	4b08      	ldr	r3, [pc, #32]	; (800b350 <dhcp_dec_pcb_refcount+0x50>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ff09 	bl	800b148 <udp_remove>
    dhcp_pcb = NULL;
 800b336:	4b06      	ldr	r3, [pc, #24]	; (800b350 <dhcp_dec_pcb_refcount+0x50>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
  }
}
 800b33c:	bf00      	nop
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20000118 	.word	0x20000118
 800b344:	0801377c 	.word	0x0801377c
 800b348:	08013804 	.word	0x08013804
 800b34c:	080137dc 	.word	0x080137dc
 800b350:	20000114 	.word	0x20000114

0800b354 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a1b      	ldr	r3, [r3, #32]
 800b360:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b368:	461a      	mov	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b370:	4619      	mov	r1, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	460b      	mov	r3, r1
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	480a      	ldr	r0, [pc, #40]	; (800b3a8 <dhcp_handle_nak+0x54>)
 800b380:	f004 fefe 	bl	8010180 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b384:	210c      	movs	r1, #12
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f001 f9f0 	bl	800c76c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <dhcp_handle_nak+0x58>)
 800b38e:	4a07      	ldr	r2, [pc, #28]	; (800b3ac <dhcp_handle_nak+0x58>)
 800b390:	4906      	ldr	r1, [pc, #24]	; (800b3ac <dhcp_handle_nak+0x58>)
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7f9 f91c 	bl	80045d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fd17 	bl	800bdcc <dhcp_discover>
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	08013828 	.word	0x08013828
 800b3ac:	08015d18 	.word	0x08015d18

0800b3b0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	481c      	ldr	r0, [pc, #112]	; (800b440 <dhcp_check+0x90>)
 800b3d0:	f004 fed6 	bl	8010180 <iprintf>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b3d4:	2108      	movs	r1, #8
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f001 f9c8 	bl	800c76c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	331c      	adds	r3, #28
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f002 fe87 	bl	800e0f8 <etharp_query>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800b3ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <dhcp_check+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 800b3f6:	4813      	ldr	r0, [pc, #76]	; (800b444 <dhcp_check+0x94>)
 800b3f8:	f004 ff4a 	bl	8010290 <puts>
  }
  if (dhcp->tries < 255) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	799b      	ldrb	r3, [r3, #6]
 800b400:	2bff      	cmp	r3, #255	; 0xff
 800b402:	d005      	beq.n	800b410 <dhcp_check+0x60>
    dhcp->tries++;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	799b      	ldrb	r3, [r3, #6]
 800b408:	3301      	adds	r3, #1
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800b410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b414:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b416:	893b      	ldrh	r3, [r7, #8]
 800b418:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b41c:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <dhcp_check+0x98>)
 800b41e:	fb82 1203 	smull	r1, r2, r2, r3
 800b422:	1152      	asrs	r2, r2, #5
 800b424:	17db      	asrs	r3, r3, #31
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 800b42e:	893b      	ldrh	r3, [r7, #8]
 800b430:	4619      	mov	r1, r3
 800b432:	4806      	ldr	r0, [pc, #24]	; (800b44c <dhcp_check+0x9c>)
 800b434:	f004 fea4 	bl	8010180 <iprintf>
}
 800b438:	bf00      	nop
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	0801384c 	.word	0x0801384c
 800b444:	08013868 	.word	0x08013868
 800b448:	10624dd3 	.word	0x10624dd3
 800b44c:	08013890 	.word	0x08013890

0800b450 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af02      	add	r7, sp, #8
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b46e:	4619      	mov	r1, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	460b      	mov	r3, r1
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4816      	ldr	r0, [pc, #88]	; (800b4d8 <dhcp_handle_offer+0x88>)
 800b47e:	f004 fe7f 	bl	8010180 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b482:	4b16      	ldr	r3, [pc, #88]	; (800b4dc <dhcp_handle_offer+0x8c>)
 800b484:	789b      	ldrb	r3, [r3, #2]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d01e      	beq.n	800b4c8 <dhcp_handle_offer+0x78>
    dhcp->request_timeout = 0; /* stop timer */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b490:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <dhcp_handle_offer+0x90>)
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	4618      	mov	r0, r3
 800b496:	f7f8 f991 	bl	80037bc <lwip_htonl>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	480f      	ldr	r0, [pc, #60]	; (800b4e4 <dhcp_handle_offer+0x94>)
 800b4a8:	f004 fe6a 	bl	8010180 <iprintf>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	480b      	ldr	r0, [pc, #44]	; (800b4e8 <dhcp_handle_offer+0x98>)
 800b4bc:	f004 fe60 	bl	8010180 <iprintf>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f815 	bl	800b4f0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b4c6:	e003      	b.n	800b4d0 <dhcp_handle_offer+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	4808      	ldr	r0, [pc, #32]	; (800b4ec <dhcp_handle_offer+0x9c>)
 800b4cc:	f004 fe58 	bl	8010180 <iprintf>
}
 800b4d0:	bf00      	nop
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	080138c0 	.word	0x080138c0
 800b4dc:	20006964 	.word	0x20006964
 800b4e0:	2000696c 	.word	0x2000696c
 800b4e4:	080138e8 	.word	0x080138e8
 800b4e8:	08013910 	.word	0x08013910
 800b4ec:	08013938 	.word	0x08013938

0800b4f0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b4f0:	b5b0      	push	{r4, r5, r7, lr}
 800b4f2:	b08a      	sub	sp, #40	; 0x28
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <dhcp_select+0x22>
 800b4fe:	4b7f      	ldr	r3, [pc, #508]	; (800b6fc <dhcp_select+0x20c>)
 800b500:	f240 1277 	movw	r2, #375	; 0x177
 800b504:	497e      	ldr	r1, [pc, #504]	; (800b700 <dhcp_select+0x210>)
 800b506:	487f      	ldr	r0, [pc, #508]	; (800b704 <dhcp_select+0x214>)
 800b508:	f004 fe3a 	bl	8010180 <iprintf>
 800b50c:	f06f 030f 	mvn.w	r3, #15
 800b510:	e0ef      	b.n	800b6f2 <dhcp_select+0x202>
  dhcp = netif_dhcp_data(netif);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <dhcp_select+0x42>
 800b51e:	4b77      	ldr	r3, [pc, #476]	; (800b6fc <dhcp_select+0x20c>)
 800b520:	f240 1279 	movw	r2, #377	; 0x179
 800b524:	4978      	ldr	r1, [pc, #480]	; (800b708 <dhcp_select+0x218>)
 800b526:	4877      	ldr	r0, [pc, #476]	; (800b704 <dhcp_select+0x214>)
 800b528:	f004 fe2a 	bl	8010180 <iprintf>
 800b52c:	f06f 0305 	mvn.w	r3, #5
 800b530:	e0df      	b.n	800b6f2 <dhcp_select+0x202>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b538:	461a      	mov	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b540:	4619      	mov	r1, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	460b      	mov	r3, r1
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	486f      	ldr	r0, [pc, #444]	; (800b70c <dhcp_select+0x21c>)
 800b550:	f004 fe16 	bl	8010180 <iprintf>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b554:	2101      	movs	r1, #1
 800b556:	69b8      	ldr	r0, [r7, #24]
 800b558:	f001 f908 	bl	800c76c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	2203      	movs	r2, #3
 800b562:	69b9      	ldr	r1, [r7, #24]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 fe1b 	bl	800d1a0 <dhcp_create_msg>
 800b56a:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 8088 	beq.w	800b684 <dhcp_select+0x194>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b57a:	89b8      	ldrh	r0, [r7, #12]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b582:	2302      	movs	r3, #2
 800b584:	2239      	movs	r2, #57	; 0x39
 800b586:	f001 f90b 	bl	800c7a0 <dhcp_option>
 800b58a:	4603      	mov	r3, r0
 800b58c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b58e:	89b8      	ldrh	r0, [r7, #12]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b59a:	461a      	mov	r2, r3
 800b59c:	f001 f95a 	bl	800c854 <dhcp_option_short>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b5a4:	89b8      	ldrh	r0, [r7, #12]
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	2232      	movs	r2, #50	; 0x32
 800b5b0:	f001 f8f6 	bl	800c7a0 <dhcp_option>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b5b8:	89bc      	ldrh	r4, [r7, #12]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7f8 f8f9 	bl	80037bc <lwip_htonl>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f001 f971 	bl	800c8b8 <dhcp_option_long>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b5da:	89b8      	ldrh	r0, [r7, #12]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	2236      	movs	r2, #54	; 0x36
 800b5e6:	f001 f8db 	bl	800c7a0 <dhcp_option>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b5ee:	89bc      	ldrh	r4, [r7, #12]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f8 f8de 	bl	80037bc <lwip_htonl>
 800b600:	4603      	mov	r3, r0
 800b602:	461a      	mov	r2, r3
 800b604:	4629      	mov	r1, r5
 800b606:	4620      	mov	r0, r4
 800b608:	f001 f956 	bl	800c8b8 <dhcp_option_long>
 800b60c:	4603      	mov	r3, r0
 800b60e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b610:	89b8      	ldrh	r0, [r7, #12]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b618:	2303      	movs	r3, #3
 800b61a:	2237      	movs	r2, #55	; 0x37
 800b61c:	f001 f8c0 	bl	800c7a0 <dhcp_option>
 800b620:	4603      	mov	r3, r0
 800b622:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b624:	2300      	movs	r3, #0
 800b626:	77bb      	strb	r3, [r7, #30]
 800b628:	e00e      	b.n	800b648 <dhcp_select+0x158>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b62a:	89b8      	ldrh	r0, [r7, #12]
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b632:	7fbb      	ldrb	r3, [r7, #30]
 800b634:	4a36      	ldr	r2, [pc, #216]	; (800b710 <dhcp_select+0x220>)
 800b636:	5cd3      	ldrb	r3, [r2, r3]
 800b638:	461a      	mov	r2, r3
 800b63a:	f001 f8e5 	bl	800c808 <dhcp_option_byte>
 800b63e:	4603      	mov	r3, r0
 800b640:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b642:	7fbb      	ldrb	r3, [r7, #30]
 800b644:	3301      	adds	r3, #1
 800b646:	77bb      	strb	r3, [r7, #30]
 800b648:	7fbb      	ldrb	r3, [r7, #30]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d9ed      	bls.n	800b62a <dhcp_select+0x13a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b64e:	89b8      	ldrh	r0, [r7, #12]
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	33f0      	adds	r3, #240	; 0xf0
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	4619      	mov	r1, r3
 800b658:	f001 fe86 	bl	800d368 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b65c:	4b2d      	ldr	r3, [pc, #180]	; (800b714 <dhcp_select+0x224>)
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	4b2d      	ldr	r3, [pc, #180]	; (800b718 <dhcp_select+0x228>)
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	2343      	movs	r3, #67	; 0x43
 800b66a:	4a2c      	ldr	r2, [pc, #176]	; (800b71c <dhcp_select+0x22c>)
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	f7ff fb6f 	bl	800ad50 <udp_sendto_if_src>
 800b672:	4603      	mov	r3, r0
 800b674:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b676:	6978      	ldr	r0, [r7, #20]
 800b678:	f7f9 fc00 	bl	8004e7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 800b67c:	4828      	ldr	r0, [pc, #160]	; (800b720 <dhcp_select+0x230>)
 800b67e:	f004 fe07 	bl	8010290 <puts>
 800b682:	e004      	b.n	800b68e <dhcp_select+0x19e>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 800b684:	4827      	ldr	r0, [pc, #156]	; (800b724 <dhcp_select+0x234>)
 800b686:	f004 fe03 	bl	8010290 <puts>
    result = ERR_MEM;
 800b68a:	23ff      	movs	r3, #255	; 0xff
 800b68c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	799b      	ldrb	r3, [r3, #6]
 800b692:	2bff      	cmp	r3, #255	; 0xff
 800b694:	d005      	beq.n	800b6a2 <dhcp_select+0x1b2>
    dhcp->tries++;
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	799b      	ldrb	r3, [r3, #6]
 800b69a:	3301      	adds	r3, #1
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	799b      	ldrb	r3, [r3, #6]
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d80d      	bhi.n	800b6c6 <dhcp_select+0x1d6>
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	799b      	ldrb	r3, [r3, #6]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	4093      	lsls	r3, r2
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	0152      	lsls	r2, r2, #5
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	0092      	lsls	r2, r2, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	e001      	b.n	800b6ca <dhcp_select+0x1da>
 800b6c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b6ca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b6cc:	89fb      	ldrh	r3, [r7, #14]
 800b6ce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b6d2:	4a15      	ldr	r2, [pc, #84]	; (800b728 <dhcp_select+0x238>)
 800b6d4:	fb82 1203 	smull	r1, r2, r2, r3
 800b6d8:	1152      	asrs	r2, r2, #5
 800b6da:	17db      	asrs	r3, r3, #31
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 800b6e4:	89fb      	ldrh	r3, [r7, #14]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4810      	ldr	r0, [pc, #64]	; (800b72c <dhcp_select+0x23c>)
 800b6ea:	f004 fd49 	bl	8010180 <iprintf>
  return result;
 800b6ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	0801377c 	.word	0x0801377c
 800b700:	0801396c 	.word	0x0801396c
 800b704:	080137dc 	.word	0x080137dc
 800b708:	08013988 	.word	0x08013988
 800b70c:	080139a4 	.word	0x080139a4
 800b710:	20000014 	.word	0x20000014
 800b714:	20000114 	.word	0x20000114
 800b718:	08015d18 	.word	0x08015d18
 800b71c:	08015d1c 	.word	0x08015d1c
 800b720:	080139c4 	.word	0x080139c4
 800b724:	080139dc 	.word	0x080139dc
 800b728:	10624dd3 	.word	0x10624dd3
 800b72c:	08013a0c 	.word	0x08013a0c

0800b730 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 800b736:	482d      	ldr	r0, [pc, #180]	; (800b7ec <dhcp_coarse_tmr+0xbc>)
 800b738:	f004 fdaa 	bl	8010290 <puts>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800b73c:	4b2c      	ldr	r3, [pc, #176]	; (800b7f0 <dhcp_coarse_tmr+0xc0>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	e04b      	b.n	800b7dc <dhcp_coarse_tmr+0xac>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d042      	beq.n	800b7d6 <dhcp_coarse_tmr+0xa6>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	795b      	ldrb	r3, [r3, #5]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d03e      	beq.n	800b7d6 <dhcp_coarse_tmr+0xa6>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	8a9b      	ldrh	r3, [r3, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d015      	beq.n	800b78c <dhcp_coarse_tmr+0x5c>
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	8a5b      	ldrh	r3, [r3, #18]
 800b764:	3301      	adds	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	825a      	strh	r2, [r3, #18]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	8a5a      	ldrh	r2, [r3, #18]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	8a9b      	ldrh	r3, [r3, #20]
 800b774:	429a      	cmp	r2, r3
 800b776:	d109      	bne.n	800b78c <dhcp_coarse_tmr+0x5c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 800b778:	481e      	ldr	r0, [pc, #120]	; (800b7f4 <dhcp_coarse_tmr+0xc4>)
 800b77a:	f004 fd89 	bl	8010290 <puts>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 ff4a 	bl	800c618 <dhcp_release_and_stop>
        dhcp_start(netif);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f9a7 	bl	800bad8 <dhcp_start>
 800b78a:	e024      	b.n	800b7d6 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	8a1b      	ldrh	r3, [r3, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00e      	beq.n	800b7b2 <dhcp_coarse_tmr+0x82>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	8a1b      	ldrh	r3, [r3, #16]
 800b798:	1e5a      	subs	r2, r3, #1
 800b79a:	b291      	uxth	r1, r2
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	8211      	strh	r1, [r2, #16]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d106      	bne.n	800b7b2 <dhcp_coarse_tmr+0x82>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 800b7a4:	4814      	ldr	r0, [pc, #80]	; (800b7f8 <dhcp_coarse_tmr+0xc8>)
 800b7a6:	f004 fd73 	bl	8010290 <puts>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f8f8 	bl	800b9a0 <dhcp_t2_timeout>
 800b7b0:	e011      	b.n	800b7d6 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	89db      	ldrh	r3, [r3, #14]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00d      	beq.n	800b7d6 <dhcp_coarse_tmr+0xa6>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	89db      	ldrh	r3, [r3, #14]
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	b291      	uxth	r1, r2
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	81d1      	strh	r1, [r2, #14]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d105      	bne.n	800b7d6 <dhcp_coarse_tmr+0xa6>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 800b7ca:	480c      	ldr	r0, [pc, #48]	; (800b7fc <dhcp_coarse_tmr+0xcc>)
 800b7cc:	f004 fd60 	bl	8010290 <puts>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f8ad 	bl	800b930 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	607b      	str	r3, [r7, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1b0      	bne.n	800b744 <dhcp_coarse_tmr+0x14>
      }
    }
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	08013a3c 	.word	0x08013a3c
 800b7f0:	20006938 	.word	0x20006938
 800b7f4:	08013a50 	.word	0x08013a50
 800b7f8:	08013a70 	.word	0x08013a70
 800b7fc:	08013a90 	.word	0x08013a90

0800b800 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800b806:	4b17      	ldr	r3, [pc, #92]	; (800b864 <dhcp_fine_tmr+0x64>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	607b      	str	r3, [r7, #4]
 800b80c:	e023      	b.n	800b856 <dhcp_fine_tmr+0x56>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d01a      	beq.n	800b850 <dhcp_fine_tmr+0x50>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	891b      	ldrh	r3, [r3, #8]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d906      	bls.n	800b830 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	891b      	ldrh	r3, [r3, #8]
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	811a      	strh	r2, [r3, #8]
 800b82e:	e00f      	b.n	800b850 <dhcp_fine_tmr+0x50>
      } else if (dhcp->request_timeout == 1) {
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	891b      	ldrh	r3, [r3, #8]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d10b      	bne.n	800b850 <dhcp_fine_tmr+0x50>
        dhcp->request_timeout--;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	891b      	ldrh	r3, [r3, #8]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b29a      	uxth	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 800b844:	4808      	ldr	r0, [pc, #32]	; (800b868 <dhcp_fine_tmr+0x68>)
 800b846:	f004 fd23 	bl	8010290 <puts>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f80e 	bl	800b86c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1d8      	bne.n	800b80e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20006938 	.word	0x20006938
 800b868:	08013ab0 	.word	0x08013ab0

0800b86c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 800b87a:	4828      	ldr	r0, [pc, #160]	; (800b91c <dhcp_timeout+0xb0>)
 800b87c:	f004 fd08 	bl	8010290 <puts>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	795b      	ldrb	r3, [r3, #5]
 800b884:	2b0c      	cmp	r3, #12
 800b886:	d003      	beq.n	800b890 <dhcp_timeout+0x24>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	795b      	ldrb	r3, [r3, #5]
 800b88c:	2b06      	cmp	r3, #6
 800b88e:	d106      	bne.n	800b89e <dhcp_timeout+0x32>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 800b890:	4823      	ldr	r0, [pc, #140]	; (800b920 <dhcp_timeout+0xb4>)
 800b892:	f004 fcfd 	bl	8010290 <puts>
    dhcp_discover(netif);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa98 	bl	800bdcc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800b89c:	e03a      	b.n	800b914 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	795b      	ldrb	r3, [r3, #5]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d114      	bne.n	800b8d0 <dhcp_timeout+0x64>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 800b8a6:	481f      	ldr	r0, [pc, #124]	; (800b924 <dhcp_timeout+0xb8>)
 800b8a8:	f004 fcf2 	bl	8010290 <puts>
    if (dhcp->tries <= 5) {
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	799b      	ldrb	r3, [r3, #6]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	d803      	bhi.n	800b8bc <dhcp_timeout+0x50>
      dhcp_select(netif);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff fe1b 	bl	800b4f0 <dhcp_select>
}
 800b8ba:	e02b      	b.n	800b914 <dhcp_timeout+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 800b8bc:	481a      	ldr	r0, [pc, #104]	; (800b928 <dhcp_timeout+0xbc>)
 800b8be:	f004 fce7 	bl	8010290 <puts>
      dhcp_release_and_stop(netif);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fea8 	bl	800c618 <dhcp_release_and_stop>
      dhcp_start(netif);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f905 	bl	800bad8 <dhcp_start>
}
 800b8ce:	e021      	b.n	800b914 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	795b      	ldrb	r3, [r3, #5]
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d10e      	bne.n	800b8f6 <dhcp_timeout+0x8a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 800b8d8:	4814      	ldr	r0, [pc, #80]	; (800b92c <dhcp_timeout+0xc0>)
 800b8da:	f004 fcd9 	bl	8010290 <puts>
    if (dhcp->tries <= 1) {
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	799b      	ldrb	r3, [r3, #6]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d803      	bhi.n	800b8ee <dhcp_timeout+0x82>
      dhcp_check(netif);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff fd62 	bl	800b3b0 <dhcp_check>
}
 800b8ec:	e012      	b.n	800b914 <dhcp_timeout+0xa8>
      dhcp_bind(netif);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fb34 	bl	800bf5c <dhcp_bind>
}
 800b8f4:	e00e      	b.n	800b914 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	795b      	ldrb	r3, [r3, #5]
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d10a      	bne.n	800b914 <dhcp_timeout+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	799b      	ldrb	r3, [r3, #6]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d803      	bhi.n	800b90e <dhcp_timeout+0xa2>
      dhcp_reboot(netif);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fdba 	bl	800c480 <dhcp_reboot>
}
 800b90c:	e002      	b.n	800b914 <dhcp_timeout+0xa8>
      dhcp_discover(netif);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa5c 	bl	800bdcc <dhcp_discover>
}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	08013ad4 	.word	0x08013ad4
 800b920:	08013ae4 	.word	0x08013ae4
 800b924:	08013b0c 	.word	0x08013b0c
 800b928:	08013b40 	.word	0x08013b40
 800b92c:	08013b74 	.word	0x08013b74

0800b930 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 800b93e:	4816      	ldr	r0, [pc, #88]	; (800b998 <dhcp_t1_timeout+0x68>)
 800b940:	f004 fca6 	bl	8010290 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	795b      	ldrb	r3, [r3, #5]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d007      	beq.n	800b95c <dhcp_t1_timeout+0x2c>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	795b      	ldrb	r3, [r3, #5]
 800b950:	2b0a      	cmp	r3, #10
 800b952:	d003      	beq.n	800b95c <dhcp_t1_timeout+0x2c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b958:	2b05      	cmp	r3, #5
 800b95a:	d119      	bne.n	800b990 <dhcp_t1_timeout+0x60>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 800b95c:	480f      	ldr	r0, [pc, #60]	; (800b99c <dhcp_t1_timeout+0x6c>)
 800b95e:	f004 fc97 	bl	8010290 <puts>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fc28 	bl	800c1b8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	899b      	ldrh	r3, [r3, #12]
 800b96c:	461a      	mov	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	8a5b      	ldrh	r3, [r3, #18]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	2b01      	cmp	r3, #1
 800b976:	dd0b      	ble.n	800b990 <dhcp_t1_timeout+0x60>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	899b      	ldrh	r3, [r3, #12]
 800b97c:	461a      	mov	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	8a5b      	ldrh	r3, [r3, #18]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	0fda      	lsrs	r2, r3, #31
 800b986:	4413      	add	r3, r2
 800b988:	105b      	asrs	r3, r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	08013ba4 	.word	0x08013ba4
 800b99c:	08013bb8 	.word	0x08013bb8

0800b9a0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 800b9ae:	4818      	ldr	r0, [pc, #96]	; (800ba10 <dhcp_t2_timeout+0x70>)
 800b9b0:	f004 fc6e 	bl	8010290 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	795b      	ldrb	r3, [r3, #5]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d00b      	beq.n	800b9d4 <dhcp_t2_timeout+0x34>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	795b      	ldrb	r3, [r3, #5]
 800b9c0:	2b0a      	cmp	r3, #10
 800b9c2:	d007      	beq.n	800b9d4 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d003      	beq.n	800b9d4 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	795b      	ldrb	r3, [r3, #5]
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d119      	bne.n	800ba08 <dhcp_t2_timeout+0x68>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 800b9d4:	480f      	ldr	r0, [pc, #60]	; (800ba14 <dhcp_t2_timeout+0x74>)
 800b9d6:	f004 fc5b 	bl	8010290 <puts>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fc9e 	bl	800c31c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	8a9b      	ldrh	r3, [r3, #20]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	8a5b      	ldrh	r3, [r3, #18]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	dd0b      	ble.n	800ba08 <dhcp_t2_timeout+0x68>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	8a9b      	ldrh	r3, [r3, #20]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8a5b      	ldrh	r3, [r3, #18]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	0fda      	lsrs	r2, r3, #31
 800b9fe:	4413      	add	r3, r2
 800ba00:	105b      	asrs	r3, r3, #1
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	08013bd8 	.word	0x08013bd8
 800ba14:	08013bec 	.word	0x08013bec

0800ba18 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ba34:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <dhcp_handle_ack+0xb8>)
 800ba36:	78db      	ldrb	r3, [r3, #3]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ba3c:	4b25      	ldr	r3, [pc, #148]	; (800bad4 <dhcp_handle_ack+0xbc>)
 800ba3e:	68da      	ldr	r2, [r3, #12]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ba44:	4b22      	ldr	r3, [pc, #136]	; (800bad0 <dhcp_handle_ack+0xb8>)
 800ba46:	791b      	ldrb	r3, [r3, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ba4c:	4b21      	ldr	r3, [pc, #132]	; (800bad4 <dhcp_handle_ack+0xbc>)
 800ba4e:	691a      	ldr	r2, [r3, #16]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	62da      	str	r2, [r3, #44]	; 0x2c
 800ba54:	e004      	b.n	800ba60 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	085a      	lsrs	r2, r3, #1
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ba60:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <dhcp_handle_ack+0xb8>)
 800ba62:	795b      	ldrb	r3, [r3, #5]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ba68:	4b1a      	ldr	r3, [pc, #104]	; (800bad4 <dhcp_handle_ack+0xbc>)
 800ba6a:	695a      	ldr	r2, [r3, #20]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ba70:	e007      	b.n	800ba82 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba76:	4613      	mov	r3, r2
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	1a9b      	subs	r3, r3, r2
 800ba7c:	08da      	lsrs	r2, r3, #3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ba8a:	4b11      	ldr	r3, [pc, #68]	; (800bad0 <dhcp_handle_ack+0xb8>)
 800ba8c:	799b      	ldrb	r3, [r3, #6]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ba92:	4b10      	ldr	r3, [pc, #64]	; (800bad4 <dhcp_handle_ack+0xbc>)
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f7 fe90 	bl	80037bc <lwip_htonl>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	71da      	strb	r2, [r3, #7]
 800baa8:	e002      	b.n	800bab0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800bab0:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <dhcp_handle_ack+0xb8>)
 800bab2:	79db      	ldrb	r3, [r3, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800bab8:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <dhcp_handle_ack+0xbc>)
 800baba:	69db      	ldr	r3, [r3, #28]
 800babc:	4618      	mov	r0, r3
 800babe:	f7f7 fe7d 	bl	80037bc <lwip_htonl>
 800bac2:	4602      	mov	r2, r0
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800bac8:	bf00      	nop
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20006964 	.word	0x20006964
 800bad4:	2000696c 	.word	0x2000696c

0800bad8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af02      	add	r7, sp, #8
 800bade:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <dhcp_start+0x22>
 800bae6:	4b49      	ldr	r3, [pc, #292]	; (800bc0c <dhcp_start+0x134>)
 800bae8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800baec:	4948      	ldr	r1, [pc, #288]	; (800bc10 <dhcp_start+0x138>)
 800baee:	4849      	ldr	r0, [pc, #292]	; (800bc14 <dhcp_start+0x13c>)
 800baf0:	f004 fb46 	bl	8010180 <iprintf>
 800baf4:	f06f 030f 	mvn.w	r3, #15
 800baf8:	e083      	b.n	800bc02 <dhcp_start+0x12a>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <dhcp_start+0x44>
 800bb08:	4b40      	ldr	r3, [pc, #256]	; (800bc0c <dhcp_start+0x134>)
 800bb0a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800bb0e:	4942      	ldr	r1, [pc, #264]	; (800bc18 <dhcp_start+0x140>)
 800bb10:	4840      	ldr	r0, [pc, #256]	; (800bc14 <dhcp_start+0x13c>)
 800bb12:	f004 fb35 	bl	8010180 <iprintf>
 800bb16:	f06f 030f 	mvn.w	r3, #15
 800bb1a:	e072      	b.n	800bc02 <dhcp_start+0x12a>
  dhcp = netif_dhcp_data(netif);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bb28:	461a      	mov	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb30:	4619      	mov	r1, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	4837      	ldr	r0, [pc, #220]	; (800bc1c <dhcp_start+0x144>)
 800bb40:	f004 fb1e 	bl	8010180 <iprintf>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bb48:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800bb4c:	d205      	bcs.n	800bb5a <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 800bb4e:	4834      	ldr	r0, [pc, #208]	; (800bc20 <dhcp_start+0x148>)
 800bb50:	f004 fb9e 	bl	8010290 <puts>
    return ERR_MEM;
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	e053      	b.n	800bc02 <dhcp_start+0x12a>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d116      	bne.n	800bb8e <dhcp_start+0xb6>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 800bb60:	4830      	ldr	r0, [pc, #192]	; (800bc24 <dhcp_start+0x14c>)
 800bb62:	f004 fb95 	bl	8010290 <puts>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800bb66:	2034      	movs	r0, #52	; 0x34
 800bb68:	f7f8 f8fa 	bl	8003d60 <mem_malloc>
 800bb6c:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d105      	bne.n	800bb80 <dhcp_start+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 800bb74:	482c      	ldr	r0, [pc, #176]	; (800bc28 <dhcp_start+0x150>)
 800bb76:	f004 fb8b 	bl	8010290 <puts>
      return ERR_MEM;
 800bb7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7e:	e040      	b.n	800bc02 <dhcp_start+0x12a>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	621a      	str	r2, [r3, #32]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800bb86:	4829      	ldr	r0, [pc, #164]	; (800bc2c <dhcp_start+0x154>)
 800bb88:	f004 fafa 	bl	8010180 <iprintf>
 800bb8c:	e008      	b.n	800bba0 <dhcp_start+0xc8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 800bb8e:	4828      	ldr	r0, [pc, #160]	; (800bc30 <dhcp_start+0x158>)
 800bb90:	f004 fb7e 	bl	8010290 <puts>

    if (dhcp->pcb_allocated != 0) {
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	791b      	ldrb	r3, [r3, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <dhcp_start+0xc8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bb9c:	f7ff fbb0 	bl	800b300 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bba0:	2234      	movs	r2, #52	; 0x34
 800bba2:	2100      	movs	r1, #0
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f004 fae3 	bl	8010170 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 800bbaa:	4822      	ldr	r0, [pc, #136]	; (800bc34 <dhcp_start+0x15c>)
 800bbac:	f004 fb70 	bl	8010290 <puts>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bbb0:	f7ff fb54 	bl	800b25c <dhcp_inc_pcb_refcount>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <dhcp_start+0xe8>
    return ERR_MEM;
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbe:	e020      	b.n	800bc02 <dhcp_start+0x12a>
  }
  dhcp->pcb_allocated = 1;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbcc:	f003 0304 	and.w	r3, r3, #4
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d105      	bne.n	800bbe0 <dhcp_start+0x108>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800bbd4:	2102      	movs	r1, #2
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 fdc8 	bl	800c76c <dhcp_set_state>
    return ERR_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	e010      	b.n	800bc02 <dhcp_start+0x12a>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f8f3 	bl	800bdcc <dhcp_discover>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800bbea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <dhcp_start+0x126>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fd10 	bl	800c618 <dhcp_release_and_stop>
    return ERR_MEM;
 800bbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfc:	e001      	b.n	800bc02 <dhcp_start+0x12a>
  }
  return result;
 800bbfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0801377c 	.word	0x0801377c
 800bc10:	08013c0c 	.word	0x08013c0c
 800bc14:	080137dc 	.word	0x080137dc
 800bc18:	08013c50 	.word	0x08013c50
 800bc1c:	08013c74 	.word	0x08013c74
 800bc20:	08013c94 	.word	0x08013c94
 800bc24:	08013cd4 	.word	0x08013cd4
 800bc28:	08013cfc 	.word	0x08013cfc
 800bc2c:	08013d24 	.word	0x08013d24
 800bc30:	08013d44 	.word	0x08013d44
 800bc34:	08013d70 	.word	0x08013d70

0800bc38 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d107      	bne.n	800bc58 <dhcp_arp_reply+0x20>
 800bc48:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <dhcp_arp_reply+0x64>)
 800bc4a:	f240 328b 	movw	r2, #907	; 0x38b
 800bc4e:	4914      	ldr	r1, [pc, #80]	; (800bca0 <dhcp_arp_reply+0x68>)
 800bc50:	4814      	ldr	r0, [pc, #80]	; (800bca4 <dhcp_arp_reply+0x6c>)
 800bc52:	f004 fa95 	bl	8010180 <iprintf>
 800bc56:	e01e      	b.n	800bc96 <dhcp_arp_reply+0x5e>
  dhcp = netif_dhcp_data(netif);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 800bc5e:	4812      	ldr	r0, [pc, #72]	; (800bca8 <dhcp_arp_reply+0x70>)
 800bc60:	f004 fb16 	bl	8010290 <puts>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d015      	beq.n	800bc96 <dhcp_arp_reply+0x5e>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	795b      	ldrb	r3, [r3, #5]
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	d111      	bne.n	800bc96 <dhcp_arp_reply+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4619      	mov	r1, r3
 800bc78:	480c      	ldr	r0, [pc, #48]	; (800bcac <dhcp_arp_reply+0x74>)
 800bc7a:	f004 fa81 	bl	8010180 <iprintf>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d105      	bne.n	800bc96 <dhcp_arp_reply+0x5e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 800bc8a:	4809      	ldr	r0, [pc, #36]	; (800bcb0 <dhcp_arp_reply+0x78>)
 800bc8c:	f004 fb00 	bl	8010290 <puts>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f80f 	bl	800bcb4 <dhcp_decline>
    }
  }
}
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	0801377c 	.word	0x0801377c
 800bca0:	08013c0c 	.word	0x08013c0c
 800bca4:	080137dc 	.word	0x080137dc
 800bca8:	08013df8 	.word	0x08013df8
 800bcac:	08013e0c 	.word	0x08013e0c
 800bcb0:	08013e40 	.word	0x08013e40

0800bcb4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800bcb4:	b5b0      	push	{r4, r5, r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 800bcc2:	483a      	ldr	r0, [pc, #232]	; (800bdac <dhcp_decline+0xf8>)
 800bcc4:	f004 fae4 	bl	8010290 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800bcc8:	210c      	movs	r1, #12
 800bcca:	69b8      	ldr	r0, [r7, #24]
 800bccc:	f000 fd4e 	bl	800c76c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800bcd0:	f107 030c 	add.w	r3, r7, #12
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	69b9      	ldr	r1, [r7, #24]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f001 fa61 	bl	800d1a0 <dhcp_create_msg>
 800bcde:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d038      	beq.n	800bd58 <dhcp_decline+0xa4>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800bcec:	89b8      	ldrh	r0, [r7, #12]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	2232      	movs	r2, #50	; 0x32
 800bcf8:	f000 fd52 	bl	800c7a0 <dhcp_option>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800bd00:	89bc      	ldrh	r4, [r7, #12]
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f7 fd55 	bl	80037bc <lwip_htonl>
 800bd12:	4603      	mov	r3, r0
 800bd14:	461a      	mov	r2, r3
 800bd16:	4629      	mov	r1, r5
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fdcd 	bl	800c8b8 <dhcp_option_long>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bd22:	89b8      	ldrh	r0, [r7, #12]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	33f0      	adds	r3, #240	; 0xf0
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f001 fb1c 	bl	800d368 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bd30:	4b1f      	ldr	r3, [pc, #124]	; (800bdb0 <dhcp_decline+0xfc>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	4b1f      	ldr	r3, [pc, #124]	; (800bdb4 <dhcp_decline+0x100>)
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	2343      	movs	r3, #67	; 0x43
 800bd3e:	4a1e      	ldr	r2, [pc, #120]	; (800bdb8 <dhcp_decline+0x104>)
 800bd40:	6979      	ldr	r1, [r7, #20]
 800bd42:	f7ff f805 	bl	800ad50 <udp_sendto_if_src>
 800bd46:	4603      	mov	r3, r0
 800bd48:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	f7f9 f896 	bl	8004e7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 800bd50:	481a      	ldr	r0, [pc, #104]	; (800bdbc <dhcp_decline+0x108>)
 800bd52:	f004 fa9d 	bl	8010290 <puts>
 800bd56:	e004      	b.n	800bd62 <dhcp_decline+0xae>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800bd58:	4819      	ldr	r0, [pc, #100]	; (800bdc0 <dhcp_decline+0x10c>)
 800bd5a:	f004 fa99 	bl	8010290 <puts>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bd5e:	23ff      	movs	r3, #255	; 0xff
 800bd60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	799b      	ldrb	r3, [r3, #6]
 800bd66:	2bff      	cmp	r3, #255	; 0xff
 800bd68:	d005      	beq.n	800bd76 <dhcp_decline+0xc2>
    dhcp->tries++;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	799b      	ldrb	r3, [r3, #6]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800bd76:	f242 7310 	movw	r3, #10000	; 0x2710
 800bd7a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bd7c:	89fb      	ldrh	r3, [r7, #14]
 800bd7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bd82:	4a10      	ldr	r2, [pc, #64]	; (800bdc4 <dhcp_decline+0x110>)
 800bd84:	fb82 1203 	smull	r1, r2, r2, r3
 800bd88:	1152      	asrs	r2, r2, #5
 800bd8a:	17db      	asrs	r3, r3, #31
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 800bd94:	89fb      	ldrh	r3, [r7, #14]
 800bd96:	4619      	mov	r1, r3
 800bd98:	480b      	ldr	r0, [pc, #44]	; (800bdc8 <dhcp_decline+0x114>)
 800bd9a:	f004 f9f1 	bl	8010180 <iprintf>
  return result;
 800bd9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3720      	adds	r7, #32
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bdb0      	pop	{r4, r5, r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	08013e84 	.word	0x08013e84
 800bdb0:	20000114 	.word	0x20000114
 800bdb4:	08015d18 	.word	0x08015d18
 800bdb8:	08015d1c 	.word	0x08015d1c
 800bdbc:	08013e94 	.word	0x08013e94
 800bdc0:	08013eb0 	.word	0x08013eb0
 800bdc4:	10624dd3 	.word	0x10624dd3
 800bdc8:	08013ee0 	.word	0x08013ee0

0800bdcc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	; 0x28
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 800bdde:	4853      	ldr	r0, [pc, #332]	; (800bf2c <dhcp_discover+0x160>)
 800bde0:	f004 fa56 	bl	8010290 <puts>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	2200      	movs	r2, #0
 800bde8:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800bdea:	2106      	movs	r1, #6
 800bdec:	69b8      	ldr	r0, [r7, #24]
 800bdee:	f000 fcbd 	bl	800c76c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	69b9      	ldr	r1, [r7, #24]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 f9d0 	bl	800d1a0 <dhcp_create_msg>
 800be00:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d058      	beq.n	800beba <dhcp_discover+0xee>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 800be0e:	4848      	ldr	r0, [pc, #288]	; (800bf30 <dhcp_discover+0x164>)
 800be10:	f004 fa3e 	bl	8010290 <puts>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800be14:	8938      	ldrh	r0, [r7, #8]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be1c:	2302      	movs	r3, #2
 800be1e:	2239      	movs	r2, #57	; 0x39
 800be20:	f000 fcbe 	bl	800c7a0 <dhcp_option>
 800be24:	4603      	mov	r3, r0
 800be26:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800be28:	8938      	ldrh	r0, [r7, #8]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be34:	461a      	mov	r2, r3
 800be36:	f000 fd0d 	bl	800c854 <dhcp_option_short>
 800be3a:	4603      	mov	r3, r0
 800be3c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800be3e:	8938      	ldrh	r0, [r7, #8]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be46:	2303      	movs	r3, #3
 800be48:	2237      	movs	r2, #55	; 0x37
 800be4a:	f000 fca9 	bl	800c7a0 <dhcp_option>
 800be4e:	4603      	mov	r3, r0
 800be50:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be52:	2300      	movs	r3, #0
 800be54:	77fb      	strb	r3, [r7, #31]
 800be56:	e00e      	b.n	800be76 <dhcp_discover+0xaa>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800be58:	8938      	ldrh	r0, [r7, #8]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be60:	7ffb      	ldrb	r3, [r7, #31]
 800be62:	4a34      	ldr	r2, [pc, #208]	; (800bf34 <dhcp_discover+0x168>)
 800be64:	5cd3      	ldrb	r3, [r2, r3]
 800be66:	461a      	mov	r2, r3
 800be68:	f000 fcce 	bl	800c808 <dhcp_option_byte>
 800be6c:	4603      	mov	r3, r0
 800be6e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be70:	7ffb      	ldrb	r3, [r7, #31]
 800be72:	3301      	adds	r3, #1
 800be74:	77fb      	strb	r3, [r7, #31]
 800be76:	7ffb      	ldrb	r3, [r7, #31]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d9ed      	bls.n	800be58 <dhcp_discover+0x8c>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800be7c:	8938      	ldrh	r0, [r7, #8]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	33f0      	adds	r3, #240	; 0xf0
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4619      	mov	r1, r3
 800be86:	f001 fa6f 	bl	800d368 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 800be8a:	482b      	ldr	r0, [pc, #172]	; (800bf38 <dhcp_discover+0x16c>)
 800be8c:	f004 fa00 	bl	8010290 <puts>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800be90:	4b2a      	ldr	r3, [pc, #168]	; (800bf3c <dhcp_discover+0x170>)
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <dhcp_discover+0x174>)
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2343      	movs	r3, #67	; 0x43
 800be9e:	4a29      	ldr	r2, [pc, #164]	; (800bf44 <dhcp_discover+0x178>)
 800bea0:	6939      	ldr	r1, [r7, #16]
 800bea2:	f7fe ff55 	bl	800ad50 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 800bea6:	4828      	ldr	r0, [pc, #160]	; (800bf48 <dhcp_discover+0x17c>)
 800bea8:	f004 f9f2 	bl	8010290 <puts>
    pbuf_free(p_out);
 800beac:	6938      	ldr	r0, [r7, #16]
 800beae:	f7f8 ffe5 	bl	8004e7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 800beb2:	4826      	ldr	r0, [pc, #152]	; (800bf4c <dhcp_discover+0x180>)
 800beb4:	f004 f9ec 	bl	8010290 <puts>
 800beb8:	e002      	b.n	800bec0 <dhcp_discover+0xf4>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 800beba:	4825      	ldr	r0, [pc, #148]	; (800bf50 <dhcp_discover+0x184>)
 800bebc:	f004 f9e8 	bl	8010290 <puts>
  }
  if (dhcp->tries < 255) {
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	799b      	ldrb	r3, [r3, #6]
 800bec4:	2bff      	cmp	r3, #255	; 0xff
 800bec6:	d005      	beq.n	800bed4 <dhcp_discover+0x108>
    dhcp->tries++;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	799b      	ldrb	r3, [r3, #6]
 800becc:	3301      	adds	r3, #1
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	799b      	ldrb	r3, [r3, #6]
 800bed8:	2b05      	cmp	r3, #5
 800beda:	d80d      	bhi.n	800bef8 <dhcp_discover+0x12c>
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	799b      	ldrb	r3, [r3, #6]
 800bee0:	461a      	mov	r2, r3
 800bee2:	2301      	movs	r3, #1
 800bee4:	4093      	lsls	r3, r2
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	461a      	mov	r2, r3
 800beea:	0152      	lsls	r2, r2, #5
 800beec:	1ad2      	subs	r2, r2, r3
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	e001      	b.n	800befc <dhcp_discover+0x130>
 800bef8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800befc:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800befe:	897b      	ldrh	r3, [r7, #10]
 800bf00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bf04:	4a13      	ldr	r2, [pc, #76]	; (800bf54 <dhcp_discover+0x188>)
 800bf06:	fb82 1203 	smull	r1, r2, r2, r3
 800bf0a:	1152      	asrs	r2, r2, #5
 800bf0c:	17db      	asrs	r3, r3, #31
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 800bf16:	897b      	ldrh	r3, [r7, #10]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	480f      	ldr	r0, [pc, #60]	; (800bf58 <dhcp_discover+0x18c>)
 800bf1c:	f004 f930 	bl	8010180 <iprintf>
  return result;
 800bf20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	08013f10 	.word	0x08013f10
 800bf30:	08013f20 	.word	0x08013f20
 800bf34:	20000014 	.word	0x20000014
 800bf38:	08013f40 	.word	0x08013f40
 800bf3c:	20000114 	.word	0x20000114
 800bf40:	08015d18 	.word	0x08015d18
 800bf44:	08015d1c 	.word	0x08015d1c
 800bf48:	08013f90 	.word	0x08013f90
 800bf4c:	08013fb0 	.word	0x08013fb0
 800bf50:	08013fcc 	.word	0x08013fcc
 800bf54:	10624dd3 	.word	0x10624dd3
 800bf58:	08013ffc 	.word	0x08013ffc

0800bf5c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	; 0x28
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d107      	bne.n	800bf7a <dhcp_bind+0x1e>
 800bf6a:	4b88      	ldr	r3, [pc, #544]	; (800c18c <dhcp_bind+0x230>)
 800bf6c:	f240 4215 	movw	r2, #1045	; 0x415
 800bf70:	4987      	ldr	r1, [pc, #540]	; (800c190 <dhcp_bind+0x234>)
 800bf72:	4888      	ldr	r0, [pc, #544]	; (800c194 <dhcp_bind+0x238>)
 800bf74:	f004 f904 	bl	8010180 <iprintf>
 800bf78:	e104      	b.n	800c184 <dhcp_bind+0x228>
  dhcp = netif_dhcp_data(netif);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d107      	bne.n	800bf96 <dhcp_bind+0x3a>
 800bf86:	4b81      	ldr	r3, [pc, #516]	; (800c18c <dhcp_bind+0x230>)
 800bf88:	f240 4217 	movw	r2, #1047	; 0x417
 800bf8c:	4982      	ldr	r1, [pc, #520]	; (800c198 <dhcp_bind+0x23c>)
 800bf8e:	4881      	ldr	r0, [pc, #516]	; (800c194 <dhcp_bind+0x238>)
 800bf90:	f004 f8f6 	bl	8010180 <iprintf>
 800bf94:	e0f6      	b.n	800c184 <dhcp_bind+0x228>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	487a      	ldr	r0, [pc, #488]	; (800c19c <dhcp_bind+0x240>)
 800bfb4:	f004 f8e4 	bl	8010180 <iprintf>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc6:	d029      	beq.n	800c01c <dhcp_bind+0xc0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4874      	ldr	r0, [pc, #464]	; (800c1a0 <dhcp_bind+0x244>)
 800bfd0:	f004 f8d6 	bl	8010180 <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd8:	331e      	adds	r3, #30
 800bfda:	4a72      	ldr	r2, [pc, #456]	; (800c1a4 <dhcp_bind+0x248>)
 800bfdc:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe0:	095b      	lsrs	r3, r3, #5
 800bfe2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfea:	d302      	bcc.n	800bff2 <dhcp_bind+0x96>
      timeout = 0xffff;
 800bfec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	8a9b      	ldrh	r3, [r3, #20]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <dhcp_bind+0xac>
      dhcp->t0_timeout = 1;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	2201      	movs	r2, #1
 800c006:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	4619      	mov	r1, r3
 800c016:	4864      	ldr	r0, [pc, #400]	; (800c1a8 <dhcp_bind+0x24c>)
 800c018:	f004 f8b2 	bl	8010180 <iprintf>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c024:	d02d      	beq.n	800c082 <dhcp_bind+0x126>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02a:	4619      	mov	r1, r3
 800c02c:	485f      	ldr	r0, [pc, #380]	; (800c1ac <dhcp_bind+0x250>)
 800c02e:	f004 f8a7 	bl	8010180 <iprintf>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	331e      	adds	r3, #30
 800c038:	4a5a      	ldr	r2, [pc, #360]	; (800c1a4 <dhcp_bind+0x248>)
 800c03a:	fba2 2303 	umull	r2, r3, r2, r3
 800c03e:	095b      	lsrs	r3, r3, #5
 800c040:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c048:	d302      	bcc.n	800c050 <dhcp_bind+0xf4>
      timeout = 0xffff;
 800c04a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c04e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	b29a      	uxth	r2, r3
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	895b      	ldrh	r3, [r3, #10]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d102      	bne.n	800c066 <dhcp_bind+0x10a>
      dhcp->t1_timeout = 1;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2201      	movs	r2, #1
 800c064:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
 800c072:	4619      	mov	r1, r3
 800c074:	484c      	ldr	r0, [pc, #304]	; (800c1a8 <dhcp_bind+0x24c>)
 800c076:	f004 f883 	bl	8010180 <iprintf>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	895a      	ldrh	r2, [r3, #10]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08a:	d02d      	beq.n	800c0e8 <dhcp_bind+0x18c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c090:	4619      	mov	r1, r3
 800c092:	4847      	ldr	r0, [pc, #284]	; (800c1b0 <dhcp_bind+0x254>)
 800c094:	f004 f874 	bl	8010180 <iprintf>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09c:	331e      	adds	r3, #30
 800c09e:	4a41      	ldr	r2, [pc, #260]	; (800c1a4 <dhcp_bind+0x248>)
 800c0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a4:	095b      	lsrs	r3, r3, #5
 800c0a6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ae:	d302      	bcc.n	800c0b6 <dhcp_bind+0x15a>
      timeout = 0xffff;
 800c0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0b4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	899b      	ldrh	r3, [r3, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d102      	bne.n	800c0cc <dhcp_bind+0x170>
      dhcp->t2_timeout = 1;
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0d4:	fb02 f303 	mul.w	r3, r2, r3
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4833      	ldr	r0, [pc, #204]	; (800c1a8 <dhcp_bind+0x24c>)
 800c0dc:	f004 f850 	bl	8010180 <iprintf>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	899a      	ldrh	r2, [r3, #12]
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	895a      	ldrh	r2, [r3, #10]
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	899b      	ldrh	r3, [r3, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d306      	bcc.n	800c102 <dhcp_bind+0x1a6>
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	899b      	ldrh	r3, [r3, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <dhcp_bind+0x1a6>
    dhcp->t1_timeout = 0;
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	2200      	movs	r2, #0
 800c100:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	79db      	ldrb	r3, [r3, #7]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <dhcp_bind+0x1b6>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	613b      	str	r3, [r7, #16]
 800c110:	e014      	b.n	800c13c <dhcp_bind+0x1e0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	331c      	adds	r3, #28
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c11a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	db02      	blt.n	800c128 <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c122:	23ff      	movs	r3, #255	; 0xff
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	e009      	b.n	800c13c <dhcp_bind+0x1e0>
    } else if (first_octet >= 192) {
 800c128:	7dfb      	ldrb	r3, [r7, #23]
 800c12a:	2bbf      	cmp	r3, #191	; 0xbf
 800c12c:	d903      	bls.n	800c136 <dhcp_bind+0x1da>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c12e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c132:	613b      	str	r3, [r7, #16]
 800c134:	e002      	b.n	800c13c <dhcp_bind+0x1e0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c13a:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d108      	bne.n	800c15a <dhcp_bind+0x1fe>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	69da      	ldr	r2, [r3, #28]
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4013      	ands	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c158:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	69d9      	ldr	r1, [r3, #28]
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4814      	ldr	r0, [pc, #80]	; (800c1b4 <dhcp_bind+0x258>)
 800c164:	f004 f80c 	bl	8010180 <iprintf>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c168:	210a      	movs	r1, #10
 800c16a:	69b8      	ldr	r0, [r7, #24]
 800c16c:	f000 fafe 	bl	800c76c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	f103 011c 	add.w	r1, r3, #28
 800c176:	f107 030c 	add.w	r3, r7, #12
 800c17a:	f107 0210 	add.w	r2, r7, #16
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7f8 fa26 	bl	80045d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	0801377c 	.word	0x0801377c
 800c190:	0801402c 	.word	0x0801402c
 800c194:	080137dc 	.word	0x080137dc
 800c198:	08014048 	.word	0x08014048
 800c19c:	08014060 	.word	0x08014060
 800c1a0:	08014080 	.word	0x08014080
 800c1a4:	88888889 	.word	0x88888889
 800c1a8:	080140a8 	.word	0x080140a8
 800c1ac:	080140d4 	.word	0x080140d4
 800c1b0:	080140fc 	.word	0x080140fc
 800c1b4:	08014124 	.word	0x08014124

0800c1b8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08a      	sub	sp, #40	; 0x28
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 800c1c6:	484e      	ldr	r0, [pc, #312]	; (800c300 <dhcp_renew+0x148>)
 800c1c8:	f004 f862 	bl	8010290 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c1cc:	2105      	movs	r1, #5
 800c1ce:	69b8      	ldr	r0, [r7, #24]
 800c1d0:	f000 facc 	bl	800c76c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c1d4:	f107 030c 	add.w	r3, r7, #12
 800c1d8:	2203      	movs	r2, #3
 800c1da:	69b9      	ldr	r1, [r7, #24]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 ffdf 	bl	800d1a0 <dhcp_create_msg>
 800c1e2:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d051      	beq.n	800c28e <dhcp_renew+0xd6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c1f0:	89b8      	ldrh	r0, [r7, #12]
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	2239      	movs	r2, #57	; 0x39
 800c1fc:	f000 fad0 	bl	800c7a0 <dhcp_option>
 800c200:	4603      	mov	r3, r0
 800c202:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c204:	89b8      	ldrh	r0, [r7, #12]
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c210:	461a      	mov	r2, r3
 800c212:	f000 fb1f 	bl	800c854 <dhcp_option_short>
 800c216:	4603      	mov	r3, r0
 800c218:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c21a:	89b8      	ldrh	r0, [r7, #12]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c222:	2303      	movs	r3, #3
 800c224:	2237      	movs	r2, #55	; 0x37
 800c226:	f000 fabb 	bl	800c7a0 <dhcp_option>
 800c22a:	4603      	mov	r3, r0
 800c22c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c22e:	2300      	movs	r3, #0
 800c230:	77bb      	strb	r3, [r7, #30]
 800c232:	e00e      	b.n	800c252 <dhcp_renew+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c234:	89b8      	ldrh	r0, [r7, #12]
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c23c:	7fbb      	ldrb	r3, [r7, #30]
 800c23e:	4a31      	ldr	r2, [pc, #196]	; (800c304 <dhcp_renew+0x14c>)
 800c240:	5cd3      	ldrb	r3, [r2, r3]
 800c242:	461a      	mov	r2, r3
 800c244:	f000 fae0 	bl	800c808 <dhcp_option_byte>
 800c248:	4603      	mov	r3, r0
 800c24a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c24c:	7fbb      	ldrb	r3, [r7, #30]
 800c24e:	3301      	adds	r3, #1
 800c250:	77bb      	strb	r3, [r7, #30]
 800c252:	7fbb      	ldrb	r3, [r7, #30]
 800c254:	2b02      	cmp	r3, #2
 800c256:	d9ed      	bls.n	800c234 <dhcp_renew+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c258:	89b8      	ldrh	r0, [r7, #12]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	33f0      	adds	r3, #240	; 0xf0
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4619      	mov	r1, r3
 800c262:	f001 f881 	bl	800d368 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c266:	4b28      	ldr	r3, [pc, #160]	; (800c308 <dhcp_renew+0x150>)
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	f103 0218 	add.w	r2, r3, #24
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	2343      	movs	r3, #67	; 0x43
 800c276:	6979      	ldr	r1, [r7, #20]
 800c278:	f7fe fcf6 	bl	800ac68 <udp_sendto_if>
 800c27c:	4603      	mov	r3, r0
 800c27e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c280:	6978      	ldr	r0, [r7, #20]
 800c282:	f7f8 fdfb 	bl	8004e7c <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 800c286:	4821      	ldr	r0, [pc, #132]	; (800c30c <dhcp_renew+0x154>)
 800c288:	f004 f802 	bl	8010290 <puts>
 800c28c:	e004      	b.n	800c298 <dhcp_renew+0xe0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 800c28e:	4820      	ldr	r0, [pc, #128]	; (800c310 <dhcp_renew+0x158>)
 800c290:	f003 fffe 	bl	8010290 <puts>
    result = ERR_MEM;
 800c294:	23ff      	movs	r3, #255	; 0xff
 800c296:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	799b      	ldrb	r3, [r3, #6]
 800c29c:	2bff      	cmp	r3, #255	; 0xff
 800c29e:	d005      	beq.n	800c2ac <dhcp_renew+0xf4>
    dhcp->tries++;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	799b      	ldrb	r3, [r3, #6]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	799b      	ldrb	r3, [r3, #6]
 800c2b0:	2b09      	cmp	r3, #9
 800c2b2:	d80a      	bhi.n	800c2ca <dhcp_renew+0x112>
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	799b      	ldrb	r3, [r3, #6]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	0152      	lsls	r2, r2, #5
 800c2be:	1ad2      	subs	r2, r2, r3
 800c2c0:	0092      	lsls	r2, r2, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	e001      	b.n	800c2ce <dhcp_renew+0x116>
 800c2ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c2ce:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c2d0:	89fb      	ldrh	r3, [r7, #14]
 800c2d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c2d6:	4a0f      	ldr	r2, [pc, #60]	; (800c314 <dhcp_renew+0x15c>)
 800c2d8:	fb82 1203 	smull	r1, r2, r2, r3
 800c2dc:	1152      	asrs	r2, r2, #5
 800c2de:	17db      	asrs	r3, r3, #31
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	480a      	ldr	r0, [pc, #40]	; (800c318 <dhcp_renew+0x160>)
 800c2ee:	f003 ff47 	bl	8010180 <iprintf>
  return result;
 800c2f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3720      	adds	r7, #32
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08014158 	.word	0x08014158
 800c304:	20000014 	.word	0x20000014
 800c308:	20000114 	.word	0x20000114
 800c30c:	08014168 	.word	0x08014168
 800c310:	08014180 	.word	0x08014180
 800c314:	10624dd3 	.word	0x10624dd3
 800c318:	080141ac 	.word	0x080141ac

0800c31c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	; 0x28
 800c320:	af02      	add	r7, sp, #8
 800c322:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a1b      	ldr	r3, [r3, #32]
 800c328:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 800c32a:	484d      	ldr	r0, [pc, #308]	; (800c460 <dhcp_rebind+0x144>)
 800c32c:	f003 ffb0 	bl	8010290 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c330:	2104      	movs	r1, #4
 800c332:	69b8      	ldr	r0, [r7, #24]
 800c334:	f000 fa1a 	bl	800c76c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c338:	f107 030c 	add.w	r3, r7, #12
 800c33c:	2203      	movs	r2, #3
 800c33e:	69b9      	ldr	r1, [r7, #24]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 ff2d 	bl	800d1a0 <dhcp_create_msg>
 800c346:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d04f      	beq.n	800c3ee <dhcp_rebind+0xd2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c354:	89b8      	ldrh	r0, [r7, #12]
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c35c:	2302      	movs	r3, #2
 800c35e:	2239      	movs	r2, #57	; 0x39
 800c360:	f000 fa1e 	bl	800c7a0 <dhcp_option>
 800c364:	4603      	mov	r3, r0
 800c366:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c368:	89b8      	ldrh	r0, [r7, #12]
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c374:	461a      	mov	r2, r3
 800c376:	f000 fa6d 	bl	800c854 <dhcp_option_short>
 800c37a:	4603      	mov	r3, r0
 800c37c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c37e:	89b8      	ldrh	r0, [r7, #12]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c386:	2303      	movs	r3, #3
 800c388:	2237      	movs	r2, #55	; 0x37
 800c38a:	f000 fa09 	bl	800c7a0 <dhcp_option>
 800c38e:	4603      	mov	r3, r0
 800c390:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c392:	2300      	movs	r3, #0
 800c394:	77bb      	strb	r3, [r7, #30]
 800c396:	e00e      	b.n	800c3b6 <dhcp_rebind+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c398:	89b8      	ldrh	r0, [r7, #12]
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c3a0:	7fbb      	ldrb	r3, [r7, #30]
 800c3a2:	4a30      	ldr	r2, [pc, #192]	; (800c464 <dhcp_rebind+0x148>)
 800c3a4:	5cd3      	ldrb	r3, [r2, r3]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f000 fa2e 	bl	800c808 <dhcp_option_byte>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c3b0:	7fbb      	ldrb	r3, [r7, #30]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	77bb      	strb	r3, [r7, #30]
 800c3b6:	7fbb      	ldrb	r3, [r7, #30]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d9ed      	bls.n	800c398 <dhcp_rebind+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c3bc:	89b8      	ldrh	r0, [r7, #12]
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	33f0      	adds	r3, #240	; 0xf0
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f000 ffcf 	bl	800d368 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c3ca:	4b27      	ldr	r3, [pc, #156]	; (800c468 <dhcp_rebind+0x14c>)
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	2343      	movs	r3, #67	; 0x43
 800c3d4:	4a25      	ldr	r2, [pc, #148]	; (800c46c <dhcp_rebind+0x150>)
 800c3d6:	6979      	ldr	r1, [r7, #20]
 800c3d8:	f7fe fc46 	bl	800ac68 <udp_sendto_if>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c3e0:	6978      	ldr	r0, [r7, #20]
 800c3e2:	f7f8 fd4b 	bl	8004e7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 800c3e6:	4822      	ldr	r0, [pc, #136]	; (800c470 <dhcp_rebind+0x154>)
 800c3e8:	f003 ff52 	bl	8010290 <puts>
 800c3ec:	e004      	b.n	800c3f8 <dhcp_rebind+0xdc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 800c3ee:	4821      	ldr	r0, [pc, #132]	; (800c474 <dhcp_rebind+0x158>)
 800c3f0:	f003 ff4e 	bl	8010290 <puts>
    result = ERR_MEM;
 800c3f4:	23ff      	movs	r3, #255	; 0xff
 800c3f6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	799b      	ldrb	r3, [r3, #6]
 800c3fc:	2bff      	cmp	r3, #255	; 0xff
 800c3fe:	d005      	beq.n	800c40c <dhcp_rebind+0xf0>
    dhcp->tries++;
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	799b      	ldrb	r3, [r3, #6]
 800c404:	3301      	adds	r3, #1
 800c406:	b2da      	uxtb	r2, r3
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	799b      	ldrb	r3, [r3, #6]
 800c410:	2b09      	cmp	r3, #9
 800c412:	d80a      	bhi.n	800c42a <dhcp_rebind+0x10e>
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	799b      	ldrb	r3, [r3, #6]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	461a      	mov	r2, r3
 800c41c:	0152      	lsls	r2, r2, #5
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	4413      	add	r3, r2
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	b29b      	uxth	r3, r3
 800c428:	e001      	b.n	800c42e <dhcp_rebind+0x112>
 800c42a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c42e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c430:	89fb      	ldrh	r3, [r7, #14]
 800c432:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c436:	4a10      	ldr	r2, [pc, #64]	; (800c478 <dhcp_rebind+0x15c>)
 800c438:	fb82 1203 	smull	r1, r2, r2, r3
 800c43c:	1152      	asrs	r2, r2, #5
 800c43e:	17db      	asrs	r3, r3, #31
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	b29a      	uxth	r2, r3
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 800c448:	89fb      	ldrh	r3, [r7, #14]
 800c44a:	4619      	mov	r1, r3
 800c44c:	480b      	ldr	r0, [pc, #44]	; (800c47c <dhcp_rebind+0x160>)
 800c44e:	f003 fe97 	bl	8010180 <iprintf>
  return result;
 800c452:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3720      	adds	r7, #32
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	080141dc 	.word	0x080141dc
 800c464:	20000014 	.word	0x20000014
 800c468:	20000114 	.word	0x20000114
 800c46c:	08015d1c 	.word	0x08015d1c
 800c470:	080141ec 	.word	0x080141ec
 800c474:	08014204 	.word	0x08014204
 800c478:	10624dd3 	.word	0x10624dd3
 800c47c:	08014234 	.word	0x08014234

0800c480 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c480:	b5b0      	push	{r4, r5, r7, lr}
 800c482:	b08a      	sub	sp, #40	; 0x28
 800c484:	af02      	add	r7, sp, #8
 800c486:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a1b      	ldr	r3, [r3, #32]
 800c48c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 800c48e:	485a      	ldr	r0, [pc, #360]	; (800c5f8 <dhcp_reboot+0x178>)
 800c490:	f003 fefe 	bl	8010290 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c494:	2103      	movs	r1, #3
 800c496:	69b8      	ldr	r0, [r7, #24]
 800c498:	f000 f968 	bl	800c76c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c49c:	f107 030c 	add.w	r3, r7, #12
 800c4a0:	2203      	movs	r2, #3
 800c4a2:	69b9      	ldr	r1, [r7, #24]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fe7b 	bl	800d1a0 <dhcp_create_msg>
 800c4aa:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d069      	beq.n	800c586 <dhcp_reboot+0x106>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c4b8:	89b8      	ldrh	r0, [r7, #12]
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	2239      	movs	r2, #57	; 0x39
 800c4c4:	f000 f96c 	bl	800c7a0 <dhcp_option>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c4cc:	89b8      	ldrh	r0, [r7, #12]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	33f0      	adds	r3, #240	; 0xf0
 800c4d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	f000 f9bc 	bl	800c854 <dhcp_option_short>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c4e0:	89b8      	ldrh	r0, [r7, #12]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	2232      	movs	r2, #50	; 0x32
 800c4ec:	f000 f958 	bl	800c7a0 <dhcp_option>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c4f4:	89bc      	ldrh	r4, [r7, #12]
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	4618      	mov	r0, r3
 800c502:	f7f7 f95b 	bl	80037bc <lwip_htonl>
 800c506:	4603      	mov	r3, r0
 800c508:	461a      	mov	r2, r3
 800c50a:	4629      	mov	r1, r5
 800c50c:	4620      	mov	r0, r4
 800c50e:	f000 f9d3 	bl	800c8b8 <dhcp_option_long>
 800c512:	4603      	mov	r3, r0
 800c514:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c516:	89b8      	ldrh	r0, [r7, #12]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c51e:	2303      	movs	r3, #3
 800c520:	2237      	movs	r2, #55	; 0x37
 800c522:	f000 f93d 	bl	800c7a0 <dhcp_option>
 800c526:	4603      	mov	r3, r0
 800c528:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c52a:	2300      	movs	r3, #0
 800c52c:	77bb      	strb	r3, [r7, #30]
 800c52e:	e00e      	b.n	800c54e <dhcp_reboot+0xce>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c530:	89b8      	ldrh	r0, [r7, #12]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c538:	7fbb      	ldrb	r3, [r7, #30]
 800c53a:	4a30      	ldr	r2, [pc, #192]	; (800c5fc <dhcp_reboot+0x17c>)
 800c53c:	5cd3      	ldrb	r3, [r2, r3]
 800c53e:	461a      	mov	r2, r3
 800c540:	f000 f962 	bl	800c808 <dhcp_option_byte>
 800c544:	4603      	mov	r3, r0
 800c546:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c548:	7fbb      	ldrb	r3, [r7, #30]
 800c54a:	3301      	adds	r3, #1
 800c54c:	77bb      	strb	r3, [r7, #30]
 800c54e:	7fbb      	ldrb	r3, [r7, #30]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d9ed      	bls.n	800c530 <dhcp_reboot+0xb0>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c554:	89b8      	ldrh	r0, [r7, #12]
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	33f0      	adds	r3, #240	; 0xf0
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	4619      	mov	r1, r3
 800c55e:	f000 ff03 	bl	800d368 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c562:	4b27      	ldr	r3, [pc, #156]	; (800c600 <dhcp_reboot+0x180>)
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	2343      	movs	r3, #67	; 0x43
 800c56c:	4a25      	ldr	r2, [pc, #148]	; (800c604 <dhcp_reboot+0x184>)
 800c56e:	6979      	ldr	r1, [r7, #20]
 800c570:	f7fe fb7a 	bl	800ac68 <udp_sendto_if>
 800c574:	4603      	mov	r3, r0
 800c576:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c578:	6978      	ldr	r0, [r7, #20]
 800c57a:	f7f8 fc7f 	bl	8004e7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 800c57e:	4822      	ldr	r0, [pc, #136]	; (800c608 <dhcp_reboot+0x188>)
 800c580:	f003 fe86 	bl	8010290 <puts>
 800c584:	e004      	b.n	800c590 <dhcp_reboot+0x110>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 800c586:	4821      	ldr	r0, [pc, #132]	; (800c60c <dhcp_reboot+0x18c>)
 800c588:	f003 fe82 	bl	8010290 <puts>
    result = ERR_MEM;
 800c58c:	23ff      	movs	r3, #255	; 0xff
 800c58e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	799b      	ldrb	r3, [r3, #6]
 800c594:	2bff      	cmp	r3, #255	; 0xff
 800c596:	d005      	beq.n	800c5a4 <dhcp_reboot+0x124>
    dhcp->tries++;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	799b      	ldrb	r3, [r3, #6]
 800c59c:	3301      	adds	r3, #1
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	799b      	ldrb	r3, [r3, #6]
 800c5a8:	2b09      	cmp	r3, #9
 800c5aa:	d80a      	bhi.n	800c5c2 <dhcp_reboot+0x142>
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	799b      	ldrb	r3, [r3, #6]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	0152      	lsls	r2, r2, #5
 800c5b6:	1ad2      	subs	r2, r2, r3
 800c5b8:	0092      	lsls	r2, r2, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	e001      	b.n	800c5c6 <dhcp_reboot+0x146>
 800c5c2:	f242 7310 	movw	r3, #10000	; 0x2710
 800c5c6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c5c8:	89fb      	ldrh	r3, [r7, #14]
 800c5ca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <dhcp_reboot+0x190>)
 800c5d0:	fb82 1203 	smull	r1, r2, r2, r3
 800c5d4:	1152      	asrs	r2, r2, #5
 800c5d6:	17db      	asrs	r3, r3, #31
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 800c5e0:	89fb      	ldrh	r3, [r7, #14]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	480b      	ldr	r0, [pc, #44]	; (800c614 <dhcp_reboot+0x194>)
 800c5e6:	f003 fdcb 	bl	8010180 <iprintf>
  return result;
 800c5ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	08014264 	.word	0x08014264
 800c5fc:	20000014 	.word	0x20000014
 800c600:	20000114 	.word	0x20000114
 800c604:	08015d1c 	.word	0x08015d1c
 800c608:	08014274 	.word	0x08014274
 800c60c:	0801428c 	.word	0x0801428c
 800c610:	10624dd3 	.word	0x10624dd3
 800c614:	080142bc 	.word	0x080142bc

0800c618 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c618:	b5b0      	push	{r4, r5, r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af02      	add	r7, sp, #8
 800c61e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 800c626:	484c      	ldr	r0, [pc, #304]	; (800c758 <dhcp_release_and_stop+0x140>)
 800c628:	f003 fe32 	bl	8010290 <puts>
  if (dhcp == NULL) {
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 808b 	beq.w	800c74a <dhcp_release_and_stop+0x132>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	795b      	ldrb	r3, [r3, #5]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 8088 	beq.w	800c74e <dhcp_release_and_stop+0x136>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	2200      	movs	r2, #0
 800c648:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	2200      	movs	r2, #0
 800c64e:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	2200      	movs	r2, #0
 800c654:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2200      	movs	r2, #0
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	2200      	movs	r2, #0
 800c660:	631a      	str	r2, [r3, #48]	; 0x30
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	62da      	str	r2, [r3, #44]	; 0x2c
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	2200      	movs	r2, #0
 800c676:	829a      	strh	r2, [r3, #20]
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	8a9a      	ldrh	r2, [r3, #20]
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	825a      	strh	r2, [r3, #18]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	8a5a      	ldrh	r2, [r3, #18]
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	821a      	strh	r2, [r3, #16]
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	8a1a      	ldrh	r2, [r3, #16]
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fe97 	bl	800d3c4 <dhcp_supplied_address>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d042      	beq.n	800c722 <dhcp_release_and_stop+0x10a>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800c69c:	f107 030e 	add.w	r3, r7, #14
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	69f9      	ldr	r1, [r7, #28]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fd7b 	bl	800d1a0 <dhcp_create_msg>
 800c6aa:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d034      	beq.n	800c71c <dhcp_release_and_stop+0x104>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c6b8:	89f8      	ldrh	r0, [r7, #14]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	2236      	movs	r2, #54	; 0x36
 800c6c4:	f000 f86c 	bl	800c7a0 <dhcp_option>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c6cc:	89fc      	ldrh	r4, [r7, #14]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f7 f870 	bl	80037bc <lwip_htonl>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 f8e8 	bl	800c8b8 <dhcp_option_long>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c6ec:	89f8      	ldrh	r0, [r7, #14]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	33f0      	adds	r3, #240	; 0xf0
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f000 fe37 	bl	800d368 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c6fa:	4b18      	ldr	r3, [pc, #96]	; (800c75c <dhcp_release_and_stop+0x144>)
 800c6fc:	6818      	ldr	r0, [r3, #0]
 800c6fe:	f107 0210 	add.w	r2, r7, #16
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	2343      	movs	r3, #67	; 0x43
 800c708:	69b9      	ldr	r1, [r7, #24]
 800c70a:	f7fe faad 	bl	800ac68 <udp_sendto_if>
      pbuf_free(p_out);
 800c70e:	69b8      	ldr	r0, [r7, #24]
 800c710:	f7f8 fbb4 	bl	8004e7c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 800c714:	4812      	ldr	r0, [pc, #72]	; (800c760 <dhcp_release_and_stop+0x148>)
 800c716:	f003 fdbb 	bl	8010290 <puts>
 800c71a:	e002      	b.n	800c722 <dhcp_release_and_stop+0x10a>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 800c71c:	4811      	ldr	r0, [pc, #68]	; (800c764 <dhcp_release_and_stop+0x14c>)
 800c71e:	f003 fdb7 	bl	8010290 <puts>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c722:	4b11      	ldr	r3, [pc, #68]	; (800c768 <dhcp_release_and_stop+0x150>)
 800c724:	4a10      	ldr	r2, [pc, #64]	; (800c768 <dhcp_release_and_stop+0x150>)
 800c726:	4910      	ldr	r1, [pc, #64]	; (800c768 <dhcp_release_and_stop+0x150>)
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7f7 ff51 	bl	80045d0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c72e:	2100      	movs	r1, #0
 800c730:	69f8      	ldr	r0, [r7, #28]
 800c732:	f000 f81b 	bl	800c76c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	791b      	ldrb	r3, [r3, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d008      	beq.n	800c750 <dhcp_release_and_stop+0x138>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c73e:	f7fe fddf 	bl	800b300 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	2200      	movs	r2, #0
 800c746:	711a      	strb	r2, [r3, #4]
 800c748:	e002      	b.n	800c750 <dhcp_release_and_stop+0x138>
    return;
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <dhcp_release_and_stop+0x138>
    return;
 800c74e:	bf00      	nop
  }
}
 800c750:	3720      	adds	r7, #32
 800c752:	46bd      	mov	sp, r7
 800c754:	bdb0      	pop	{r4, r5, r7, pc}
 800c756:	bf00      	nop
 800c758:	080142ec 	.word	0x080142ec
 800c75c:	20000114 	.word	0x20000114
 800c760:	08014304 	.word	0x08014304
 800c764:	0801432c 	.word	0x0801432c
 800c768:	08015d18 	.word	0x08015d18

0800c76c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	795b      	ldrb	r3, [r3, #5]
 800c77c:	78fa      	ldrb	r2, [r7, #3]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d008      	beq.n	800c794 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	78fa      	ldrb	r2, [r7, #3]
 800c786:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	811a      	strh	r2, [r3, #8]
  }
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6039      	str	r1, [r7, #0]
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	80fb      	strh	r3, [r7, #6]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	717b      	strb	r3, [r7, #5]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c7b8:	88fa      	ldrh	r2, [r7, #6]
 800c7ba:	793b      	ldrb	r3, [r7, #4]
 800c7bc:	4413      	add	r3, r2
 800c7be:	3302      	adds	r3, #2
 800c7c0:	2b44      	cmp	r3, #68	; 0x44
 800c7c2:	d906      	bls.n	800c7d2 <dhcp_option+0x32>
 800c7c4:	4b0d      	ldr	r3, [pc, #52]	; (800c7fc <dhcp_option+0x5c>)
 800c7c6:	f240 529a 	movw	r2, #1434	; 0x59a
 800c7ca:	490d      	ldr	r1, [pc, #52]	; (800c800 <dhcp_option+0x60>)
 800c7cc:	480d      	ldr	r0, [pc, #52]	; (800c804 <dhcp_option+0x64>)
 800c7ce:	f003 fcd7 	bl	8010180 <iprintf>
  options[options_out_len++] = option_type;
 800c7d2:	88fb      	ldrh	r3, [r7, #6]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	80fa      	strh	r2, [r7, #6]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	4413      	add	r3, r2
 800c7de:	797a      	ldrb	r2, [r7, #5]
 800c7e0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c7e2:	88fb      	ldrh	r3, [r7, #6]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	80fa      	strh	r2, [r7, #6]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	793a      	ldrb	r2, [r7, #4]
 800c7f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c7f2:	88fb      	ldrh	r3, [r7, #6]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	0801377c 	.word	0x0801377c
 800c800:	0801435c 	.word	0x0801435c
 800c804:	080137dc 	.word	0x080137dc

0800c808 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	6039      	str	r1, [r7, #0]
 800c812:	80fb      	strh	r3, [r7, #6]
 800c814:	4613      	mov	r3, r2
 800c816:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c818:	88fb      	ldrh	r3, [r7, #6]
 800c81a:	2b43      	cmp	r3, #67	; 0x43
 800c81c:	d906      	bls.n	800c82c <dhcp_option_byte+0x24>
 800c81e:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <dhcp_option_byte+0x40>)
 800c820:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800c824:	4909      	ldr	r1, [pc, #36]	; (800c84c <dhcp_option_byte+0x44>)
 800c826:	480a      	ldr	r0, [pc, #40]	; (800c850 <dhcp_option_byte+0x48>)
 800c828:	f003 fcaa 	bl	8010180 <iprintf>
  options[options_out_len++] = value;
 800c82c:	88fb      	ldrh	r3, [r7, #6]
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	80fa      	strh	r2, [r7, #6]
 800c832:	461a      	mov	r2, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	4413      	add	r3, r2
 800c838:	797a      	ldrb	r2, [r7, #5]
 800c83a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c83c:	88fb      	ldrh	r3, [r7, #6]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	0801377c 	.word	0x0801377c
 800c84c:	080143a0 	.word	0x080143a0
 800c850:	080137dc 	.word	0x080137dc

0800c854 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	80fb      	strh	r3, [r7, #6]
 800c860:	4613      	mov	r3, r2
 800c862:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	3302      	adds	r3, #2
 800c868:	2b44      	cmp	r3, #68	; 0x44
 800c86a:	d906      	bls.n	800c87a <dhcp_option_short+0x26>
 800c86c:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <dhcp_option_short+0x58>)
 800c86e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800c872:	490f      	ldr	r1, [pc, #60]	; (800c8b0 <dhcp_option_short+0x5c>)
 800c874:	480f      	ldr	r0, [pc, #60]	; (800c8b4 <dhcp_option_short+0x60>)
 800c876:	f003 fc83 	bl	8010180 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c87a:	88bb      	ldrh	r3, [r7, #4]
 800c87c:	0a1b      	lsrs	r3, r3, #8
 800c87e:	b29a      	uxth	r2, r3
 800c880:	88fb      	ldrh	r3, [r7, #6]
 800c882:	1c59      	adds	r1, r3, #1
 800c884:	80f9      	strh	r1, [r7, #6]
 800c886:	4619      	mov	r1, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	440b      	add	r3, r1
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c890:	88fb      	ldrh	r3, [r7, #6]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	80fa      	strh	r2, [r7, #6]
 800c896:	461a      	mov	r2, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	4413      	add	r3, r2
 800c89c:	88ba      	ldrh	r2, [r7, #4]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c8a2:	88fb      	ldrh	r3, [r7, #6]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	0801377c 	.word	0x0801377c
 800c8b0:	080143d8 	.word	0x080143d8
 800c8b4:	080137dc 	.word	0x080137dc

0800c8b8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c8c6:	89fb      	ldrh	r3, [r7, #14]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	2b44      	cmp	r3, #68	; 0x44
 800c8cc:	d906      	bls.n	800c8dc <dhcp_option_long+0x24>
 800c8ce:	4b19      	ldr	r3, [pc, #100]	; (800c934 <dhcp_option_long+0x7c>)
 800c8d0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800c8d4:	4918      	ldr	r1, [pc, #96]	; (800c938 <dhcp_option_long+0x80>)
 800c8d6:	4819      	ldr	r0, [pc, #100]	; (800c93c <dhcp_option_long+0x84>)
 800c8d8:	f003 fc52 	bl	8010180 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	0e1a      	lsrs	r2, r3, #24
 800c8e0:	89fb      	ldrh	r3, [r7, #14]
 800c8e2:	1c59      	adds	r1, r3, #1
 800c8e4:	81f9      	strh	r1, [r7, #14]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	440b      	add	r3, r1
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	0c1a      	lsrs	r2, r3, #16
 800c8f4:	89fb      	ldrh	r3, [r7, #14]
 800c8f6:	1c59      	adds	r1, r3, #1
 800c8f8:	81f9      	strh	r1, [r7, #14]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	440b      	add	r3, r1
 800c900:	b2d2      	uxtb	r2, r2
 800c902:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	0a1a      	lsrs	r2, r3, #8
 800c908:	89fb      	ldrh	r3, [r7, #14]
 800c90a:	1c59      	adds	r1, r3, #1
 800c90c:	81f9      	strh	r1, [r7, #14]
 800c90e:	4619      	mov	r1, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	440b      	add	r3, r1
 800c914:	b2d2      	uxtb	r2, r2
 800c916:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c918:	89fb      	ldrh	r3, [r7, #14]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	81fa      	strh	r2, [r7, #14]
 800c91e:	461a      	mov	r2, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	4413      	add	r3, r2
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c92a:	89fb      	ldrh	r3, [r7, #14]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	0801377c 	.word	0x0801377c
 800c938:	08014414 	.word	0x08014414
 800c93c:	080137dc 	.word	0x080137dc

0800c940 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b090      	sub	sp, #64	; 0x40
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c952:	2208      	movs	r2, #8
 800c954:	2100      	movs	r1, #0
 800c956:	48be      	ldr	r0, [pc, #760]	; (800cc50 <dhcp_parse_reply+0x310>)
 800c958:	f003 fc0a 	bl	8010170 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	895b      	ldrh	r3, [r3, #10]
 800c960:	2b2b      	cmp	r3, #43	; 0x2b
 800c962:	d802      	bhi.n	800c96a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c964:	f06f 0301 	mvn.w	r3, #1
 800c968:	e2bc      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c970:	23f0      	movs	r3, #240	; 0xf0
 800c972:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	891b      	ldrh	r3, [r3, #8]
 800c978:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c97e:	e00c      	b.n	800c99a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800c980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c982:	895b      	ldrh	r3, [r3, #10]
 800c984:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	895b      	ldrh	r3, [r3, #10]
 800c98e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <dhcp_parse_reply+0x6a>
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	895b      	ldrh	r3, [r3, #10]
 800c9a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d2ea      	bcs.n	800c980 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800c9b0:	f06f 0301 	mvn.w	r3, #1
 800c9b4:	e296      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
  }
  offset = options_idx;
 800c9b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800c9ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c9bc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c9c4:	e23f      	b.n	800ce46 <dhcp_parse_reply+0x506>
    u8_t op = options[offset];
 800c9c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ca:	4413      	add	r3, r2
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9da:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800c9dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9de:	3302      	adds	r3, #2
 800c9e0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800c9e2:	8bfa      	ldrh	r2, [r7, #30]
 800c9e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d202      	bcs.n	800c9f0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800c9ea:	f06f 0301 	mvn.w	r3, #1
 800c9ee:	e279      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c9f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f6:	8952      	ldrh	r2, [r2, #10]
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	da07      	bge.n	800ca0c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800c9fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9fe:	3301      	adds	r3, #1
 800ca00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca02:	4413      	add	r3, r2
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca0a:	e00b      	b.n	800ca24 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <dhcp_parse_reply+0xde>
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	e000      	b.n	800ca20 <dhcp_parse_reply+0xe0>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800ca24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b3b      	cmp	r3, #59	; 0x3b
 800ca30:	f200 812d 	bhi.w	800cc8e <dhcp_parse_reply+0x34e>
 800ca34:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <dhcp_parse_reply+0xfc>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800cb2d 	.word	0x0800cb2d
 800ca40:	0800cb3d 	.word	0x0800cb3d
 800ca44:	0800cc8f 	.word	0x0800cc8f
 800ca48:	0800cb5f 	.word	0x0800cb5f
 800ca4c:	0800cc8f 	.word	0x0800cc8f
 800ca50:	0800cc8f 	.word	0x0800cc8f
 800ca54:	0800cc8f 	.word	0x0800cc8f
 800ca58:	0800cc8f 	.word	0x0800cc8f
 800ca5c:	0800cc8f 	.word	0x0800cc8f
 800ca60:	0800cc8f 	.word	0x0800cc8f
 800ca64:	0800cc8f 	.word	0x0800cc8f
 800ca68:	0800cc8f 	.word	0x0800cc8f
 800ca6c:	0800cc8f 	.word	0x0800cc8f
 800ca70:	0800cc8f 	.word	0x0800cc8f
 800ca74:	0800cc8f 	.word	0x0800cc8f
 800ca78:	0800cc8f 	.word	0x0800cc8f
 800ca7c:	0800cc8f 	.word	0x0800cc8f
 800ca80:	0800cc8f 	.word	0x0800cc8f
 800ca84:	0800cc8f 	.word	0x0800cc8f
 800ca88:	0800cc8f 	.word	0x0800cc8f
 800ca8c:	0800cc8f 	.word	0x0800cc8f
 800ca90:	0800cc8f 	.word	0x0800cc8f
 800ca94:	0800cc8f 	.word	0x0800cc8f
 800ca98:	0800cc8f 	.word	0x0800cc8f
 800ca9c:	0800cc8f 	.word	0x0800cc8f
 800caa0:	0800cc8f 	.word	0x0800cc8f
 800caa4:	0800cc8f 	.word	0x0800cc8f
 800caa8:	0800cc8f 	.word	0x0800cc8f
 800caac:	0800cc8f 	.word	0x0800cc8f
 800cab0:	0800cc8f 	.word	0x0800cc8f
 800cab4:	0800cc8f 	.word	0x0800cc8f
 800cab8:	0800cc8f 	.word	0x0800cc8f
 800cabc:	0800cc8f 	.word	0x0800cc8f
 800cac0:	0800cc8f 	.word	0x0800cc8f
 800cac4:	0800cc8f 	.word	0x0800cc8f
 800cac8:	0800cc8f 	.word	0x0800cc8f
 800cacc:	0800cc8f 	.word	0x0800cc8f
 800cad0:	0800cc8f 	.word	0x0800cc8f
 800cad4:	0800cc8f 	.word	0x0800cc8f
 800cad8:	0800cc8f 	.word	0x0800cc8f
 800cadc:	0800cc8f 	.word	0x0800cc8f
 800cae0:	0800cc8f 	.word	0x0800cc8f
 800cae4:	0800cc8f 	.word	0x0800cc8f
 800cae8:	0800cc8f 	.word	0x0800cc8f
 800caec:	0800cc8f 	.word	0x0800cc8f
 800caf0:	0800cc8f 	.word	0x0800cc8f
 800caf4:	0800cc8f 	.word	0x0800cc8f
 800caf8:	0800cc8f 	.word	0x0800cc8f
 800cafc:	0800cc8f 	.word	0x0800cc8f
 800cb00:	0800cc8f 	.word	0x0800cc8f
 800cb04:	0800cc8f 	.word	0x0800cc8f
 800cb08:	0800cb8b 	.word	0x0800cb8b
 800cb0c:	0800cbad 	.word	0x0800cbad
 800cb10:	0800cbe9 	.word	0x0800cbe9
 800cb14:	0800cc0b 	.word	0x0800cc0b
 800cb18:	0800cc8f 	.word	0x0800cc8f
 800cb1c:	0800cc8f 	.word	0x0800cc8f
 800cb20:	0800cc8f 	.word	0x0800cc8f
 800cb24:	0800cc2d 	.word	0x0800cc2d
 800cb28:	0800cc6d 	.word	0x0800cc6d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800cb3a:	e0b1      	b.n	800cca0 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb40:	2b04      	cmp	r3, #4
 800cb42:	d009      	beq.n	800cb58 <dhcp_parse_reply+0x218>
 800cb44:	4b43      	ldr	r3, [pc, #268]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cb46:	f240 622e 	movw	r2, #1582	; 0x62e
 800cb4a:	4943      	ldr	r1, [pc, #268]	; (800cc58 <dhcp_parse_reply+0x318>)
 800cb4c:	4843      	ldr	r0, [pc, #268]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cb4e:	f003 fb17 	bl	8010180 <iprintf>
 800cb52:	f06f 0305 	mvn.w	r3, #5
 800cb56:	e1c5      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800cb58:	2306      	movs	r3, #6
 800cb5a:	623b      	str	r3, [r7, #32]
        break;
 800cb5c:	e0a0      	b.n	800cca0 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800cb5e:	2304      	movs	r3, #4
 800cb60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800cb64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d209      	bcs.n	800cb84 <dhcp_parse_reply+0x244>
 800cb70:	4b38      	ldr	r3, [pc, #224]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cb72:	f240 6233 	movw	r2, #1587	; 0x633
 800cb76:	493a      	ldr	r1, [pc, #232]	; (800cc60 <dhcp_parse_reply+0x320>)
 800cb78:	4838      	ldr	r0, [pc, #224]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cb7a:	f003 fb01 	bl	8010180 <iprintf>
 800cb7e:	f06f 0305 	mvn.w	r3, #5
 800cb82:	e1af      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800cb84:	2307      	movs	r3, #7
 800cb86:	623b      	str	r3, [r7, #32]
        break;
 800cb88:	e08a      	b.n	800cca0 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cb8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	d009      	beq.n	800cba6 <dhcp_parse_reply+0x266>
 800cb92:	4b30      	ldr	r3, [pc, #192]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cb94:	f240 6241 	movw	r2, #1601	; 0x641
 800cb98:	492f      	ldr	r1, [pc, #188]	; (800cc58 <dhcp_parse_reply+0x318>)
 800cb9a:	4830      	ldr	r0, [pc, #192]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cb9c:	f003 faf0 	bl	8010180 <iprintf>
 800cba0:	f06f 0305 	mvn.w	r3, #5
 800cba4:	e19e      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800cba6:	2303      	movs	r3, #3
 800cba8:	623b      	str	r3, [r7, #32]
        break;
 800cbaa:	e079      	b.n	800cca0 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cbac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d009      	beq.n	800cbc8 <dhcp_parse_reply+0x288>
 800cbb4:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cbb6:	f240 624f 	movw	r2, #1615	; 0x64f
 800cbba:	492a      	ldr	r1, [pc, #168]	; (800cc64 <dhcp_parse_reply+0x324>)
 800cbbc:	4827      	ldr	r0, [pc, #156]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cbbe:	f003 fadf 	bl	8010180 <iprintf>
 800cbc2:	f06f 0305 	mvn.w	r3, #5
 800cbc6:	e18d      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800cbc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbca:	2bf0      	cmp	r3, #240	; 0xf0
 800cbcc:	d009      	beq.n	800cbe2 <dhcp_parse_reply+0x2a2>
 800cbce:	4b21      	ldr	r3, [pc, #132]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cbd0:	f240 6251 	movw	r2, #1617	; 0x651
 800cbd4:	4924      	ldr	r1, [pc, #144]	; (800cc68 <dhcp_parse_reply+0x328>)
 800cbd6:	4821      	ldr	r0, [pc, #132]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cbd8:	f003 fad2 	bl	8010180 <iprintf>
 800cbdc:	f06f 0305 	mvn.w	r3, #5
 800cbe0:	e180      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	623b      	str	r3, [r7, #32]
        break;
 800cbe6:	e05b      	b.n	800cca0 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d009      	beq.n	800cc04 <dhcp_parse_reply+0x2c4>
 800cbf0:	4b18      	ldr	r3, [pc, #96]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cbf2:	f240 6255 	movw	r2, #1621	; 0x655
 800cbf6:	491b      	ldr	r1, [pc, #108]	; (800cc64 <dhcp_parse_reply+0x324>)
 800cbf8:	4818      	ldr	r0, [pc, #96]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cbfa:	f003 fac1 	bl	8010180 <iprintf>
 800cbfe:	f06f 0305 	mvn.w	r3, #5
 800cc02:	e16f      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800cc04:	2301      	movs	r3, #1
 800cc06:	623b      	str	r3, [r7, #32]
        break;
 800cc08:	e04a      	b.n	800cca0 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d009      	beq.n	800cc26 <dhcp_parse_reply+0x2e6>
 800cc12:	4b10      	ldr	r3, [pc, #64]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cc14:	f240 6259 	movw	r2, #1625	; 0x659
 800cc18:	490f      	ldr	r1, [pc, #60]	; (800cc58 <dhcp_parse_reply+0x318>)
 800cc1a:	4810      	ldr	r0, [pc, #64]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cc1c:	f003 fab0 	bl	8010180 <iprintf>
 800cc20:	f06f 0305 	mvn.w	r3, #5
 800cc24:	e15e      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800cc26:	2302      	movs	r3, #2
 800cc28:	623b      	str	r3, [r7, #32]
        break;
 800cc2a:	e039      	b.n	800cca0 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d009      	beq.n	800cc48 <dhcp_parse_reply+0x308>
 800cc34:	4b07      	ldr	r3, [pc, #28]	; (800cc54 <dhcp_parse_reply+0x314>)
 800cc36:	f240 625d 	movw	r2, #1629	; 0x65d
 800cc3a:	4907      	ldr	r1, [pc, #28]	; (800cc58 <dhcp_parse_reply+0x318>)
 800cc3c:	4807      	ldr	r0, [pc, #28]	; (800cc5c <dhcp_parse_reply+0x31c>)
 800cc3e:	f003 fa9f 	bl	8010180 <iprintf>
 800cc42:	f06f 0305 	mvn.w	r3, #5
 800cc46:	e14d      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_T1;
 800cc48:	2304      	movs	r3, #4
 800cc4a:	623b      	str	r3, [r7, #32]
        break;
 800cc4c:	e028      	b.n	800cca0 <dhcp_parse_reply+0x360>
 800cc4e:	bf00      	nop
 800cc50:	20006964 	.word	0x20006964
 800cc54:	0801377c 	.word	0x0801377c
 800cc58:	08014450 	.word	0x08014450
 800cc5c:	080137dc 	.word	0x080137dc
 800cc60:	0801445c 	.word	0x0801445c
 800cc64:	08014470 	.word	0x08014470
 800cc68:	0801447c 	.word	0x0801447c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d009      	beq.n	800cc88 <dhcp_parse_reply+0x348>
 800cc74:	4b9d      	ldr	r3, [pc, #628]	; (800ceec <dhcp_parse_reply+0x5ac>)
 800cc76:	f240 6261 	movw	r2, #1633	; 0x661
 800cc7a:	499d      	ldr	r1, [pc, #628]	; (800cef0 <dhcp_parse_reply+0x5b0>)
 800cc7c:	489d      	ldr	r0, [pc, #628]	; (800cef4 <dhcp_parse_reply+0x5b4>)
 800cc7e:	f003 fa7f 	bl	8010180 <iprintf>
 800cc82:	f06f 0305 	mvn.w	r3, #5
 800cc86:	e12d      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_T2;
 800cc88:	2305      	movs	r3, #5
 800cc8a:	623b      	str	r3, [r7, #32]
        break;
 800cc8c:	e008      	b.n	800cca0 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	4619      	mov	r1, r3
 800cc98:	4897      	ldr	r0, [pc, #604]	; (800cef8 <dhcp_parse_reply+0x5b8>)
 800cc9a:	f003 fa71 	bl	8010180 <iprintf>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800cc9e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d103      	bne.n	800ccae <dhcp_parse_reply+0x36e>
      offset++;
 800cca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cca8:	3301      	adds	r3, #1
 800ccaa:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ccac:	e0a1      	b.n	800cdf2 <dhcp_parse_reply+0x4b2>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ccae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb4:	4413      	add	r3, r2
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccbc:	db02      	blt.n	800ccc4 <dhcp_parse_reply+0x384>
        /* overflow */
        return ERR_BUF;
 800ccbe:	f06f 0301 	mvn.w	r3, #1
 800ccc2:	e10f      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
      }
      offset = (u16_t)(offset + len + 2);
 800ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cccc:	4413      	add	r3, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	3302      	adds	r3, #2
 800ccd2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800ccd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 808a 	beq.w	800cdf2 <dhcp_parse_reply+0x4b2>
        u32_t value = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	db02      	blt.n	800ccee <dhcp_parse_reply+0x3ae>
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	2b07      	cmp	r3, #7
 800ccec:	dd06      	ble.n	800ccfc <dhcp_parse_reply+0x3bc>
 800ccee:	4b7f      	ldr	r3, [pc, #508]	; (800ceec <dhcp_parse_reply+0x5ac>)
 800ccf0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800ccf4:	4981      	ldr	r1, [pc, #516]	; (800cefc <dhcp_parse_reply+0x5bc>)
 800ccf6:	487f      	ldr	r0, [pc, #508]	; (800cef4 <dhcp_parse_reply+0x5b4>)
 800ccf8:	f003 fa42 	bl	8010180 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800ccfc:	4a80      	ldr	r2, [pc, #512]	; (800cf00 <dhcp_parse_reply+0x5c0>)
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	4413      	add	r3, r2
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d174      	bne.n	800cdf2 <dhcp_parse_reply+0x4b2>
          copy_len = LWIP_MIN(decode_len, 4);
 800cd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	bf28      	it	cs
 800cd10:	2304      	movcs	r3, #4
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cd16:	8bfb      	ldrh	r3, [r7, #30]
 800cd18:	8aba      	ldrh	r2, [r7, #20]
 800cd1a:	f107 0108 	add.w	r1, r7, #8
 800cd1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd20:	f7f8 faa6 	bl	8005270 <pbuf_copy_partial>
 800cd24:	4603      	mov	r3, r0
 800cd26:	461a      	mov	r2, r3
 800cd28:	8abb      	ldrh	r3, [r7, #20]
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d002      	beq.n	800cd34 <dhcp_parse_reply+0x3f4>
            return ERR_BUF;
 800cd2e:	f06f 0301 	mvn.w	r3, #1
 800cd32:	e0d7      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
          }
          if (decode_len > 4) {
 800cd34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd38:	2b04      	cmp	r3, #4
 800cd3a:	d933      	bls.n	800cda4 <dhcp_parse_reply+0x464>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800cd3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd40:	f003 0303 	and.w	r3, r3, #3
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d009      	beq.n	800cd5e <dhcp_parse_reply+0x41e>
 800cd4a:	4b68      	ldr	r3, [pc, #416]	; (800ceec <dhcp_parse_reply+0x5ac>)
 800cd4c:	f240 6281 	movw	r2, #1665	; 0x681
 800cd50:	496c      	ldr	r1, [pc, #432]	; (800cf04 <dhcp_parse_reply+0x5c4>)
 800cd52:	4868      	ldr	r0, [pc, #416]	; (800cef4 <dhcp_parse_reply+0x5b4>)
 800cd54:	f003 fa14 	bl	8010180 <iprintf>
 800cd58:	f06f 0305 	mvn.w	r3, #5
 800cd5c:	e0c2      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
            dhcp_got_option(dhcp, decode_idx);
 800cd5e:	4a68      	ldr	r2, [pc, #416]	; (800cf00 <dhcp_parse_reply+0x5c0>)
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	4413      	add	r3, r2
 800cd64:	2201      	movs	r2, #1
 800cd66:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7f6 fd26 	bl	80037bc <lwip_htonl>
 800cd70:	4601      	mov	r1, r0
 800cd72:	4a65      	ldr	r2, [pc, #404]	; (800cf08 <dhcp_parse_reply+0x5c8>)
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800cd7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd7e:	3b04      	subs	r3, #4
 800cd80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800cd84:	8bfb      	ldrh	r3, [r7, #30]
 800cd86:	3304      	adds	r3, #4
 800cd88:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800cd8a:	8a7a      	ldrh	r2, [r7, #18]
 800cd8c:	8bfb      	ldrh	r3, [r7, #30]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d202      	bcs.n	800cd98 <dhcp_parse_reply+0x458>
              /* overflow */
              return ERR_BUF;
 800cd92:	f06f 0301 	mvn.w	r3, #1
 800cd96:	e0a5      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
            }
            val_offset = next_val_offset;
 800cd98:	8a7b      	ldrh	r3, [r7, #18]
 800cd9a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800cda2:	e79e      	b.n	800cce2 <dhcp_parse_reply+0x3a2>
          } else if (decode_len == 4) {
 800cda4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	d106      	bne.n	800cdba <dhcp_parse_reply+0x47a>
            value = lwip_ntohl(value);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f6 fd04 	bl	80037bc <lwip_htonl>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	60bb      	str	r3, [r7, #8]
 800cdb8:	e011      	b.n	800cdde <dhcp_parse_reply+0x49e>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800cdba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d009      	beq.n	800cdd6 <dhcp_parse_reply+0x496>
 800cdc2:	4b4a      	ldr	r3, [pc, #296]	; (800ceec <dhcp_parse_reply+0x5ac>)
 800cdc4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800cdc8:	4950      	ldr	r1, [pc, #320]	; (800cf0c <dhcp_parse_reply+0x5cc>)
 800cdca:	484a      	ldr	r0, [pc, #296]	; (800cef4 <dhcp_parse_reply+0x5b4>)
 800cdcc:	f003 f9d8 	bl	8010180 <iprintf>
 800cdd0:	f06f 0305 	mvn.w	r3, #5
 800cdd4:	e086      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
            value = ((u8_t *)&value)[0];
 800cdd6:	f107 0308 	add.w	r3, r7, #8
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800cdde:	4a48      	ldr	r2, [pc, #288]	; (800cf00 <dhcp_parse_reply+0x5c0>)
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	4413      	add	r3, r2
 800cde4:	2201      	movs	r2, #1
 800cde6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	4947      	ldr	r1, [pc, #284]	; (800cf08 <dhcp_parse_reply+0x5c8>)
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf4:	895b      	ldrh	r3, [r3, #10]
 800cdf6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d324      	bcc.n	800ce46 <dhcp_parse_reply+0x506>
      offset = (u16_t)(offset - q->len);
 800cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfe:	895b      	ldrh	r3, [r3, #10]
 800ce00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	895b      	ldrh	r3, [r3, #10]
 800ce0a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ce10:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ce12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d213      	bcs.n	800ce40 <dhcp_parse_reply+0x500>
        q = q->next;
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d109      	bne.n	800ce38 <dhcp_parse_reply+0x4f8>
 800ce24:	4b31      	ldr	r3, [pc, #196]	; (800ceec <dhcp_parse_reply+0x5ac>)
 800ce26:	f240 629d 	movw	r2, #1693	; 0x69d
 800ce2a:	4939      	ldr	r1, [pc, #228]	; (800cf10 <dhcp_parse_reply+0x5d0>)
 800ce2c:	4831      	ldr	r0, [pc, #196]	; (800cef4 <dhcp_parse_reply+0x5b4>)
 800ce2e:	f003 f9a7 	bl	8010180 <iprintf>
 800ce32:	f06f 0305 	mvn.w	r3, #5
 800ce36:	e055      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
        options = (u8_t *)q->payload;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce3e:	e002      	b.n	800ce46 <dhcp_parse_reply+0x506>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ce40:	f06f 0301 	mvn.w	r3, #1
 800ce44:	e04e      	b.n	800cee4 <dhcp_parse_reply+0x5a4>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00a      	beq.n	800ce62 <dhcp_parse_reply+0x522>
 800ce4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ce4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d206      	bcs.n	800ce62 <dhcp_parse_reply+0x522>
 800ce54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ce56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce58:	4413      	add	r3, r2
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2bff      	cmp	r3, #255	; 0xff
 800ce5e:	f47f adb2 	bne.w	800c9c6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ce62:	4b27      	ldr	r3, [pc, #156]	; (800cf00 <dhcp_parse_reply+0x5c0>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d027      	beq.n	800ceba <dhcp_parse_reply+0x57a>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ce6a:	4b27      	ldr	r3, [pc, #156]	; (800cf08 <dhcp_parse_reply+0x5c8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ce70:	4b23      	ldr	r3, [pc, #140]	; (800cf00 <dhcp_parse_reply+0x5c0>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d105      	bne.n	800ce88 <dhcp_parse_reply+0x548>
      parse_file_as_options = 1;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 800ce80:	4824      	ldr	r0, [pc, #144]	; (800cf14 <dhcp_parse_reply+0x5d4>)
 800ce82:	f003 fa05 	bl	8010290 <puts>
 800ce86:	e018      	b.n	800ceba <dhcp_parse_reply+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d105      	bne.n	800ce9a <dhcp_parse_reply+0x55a>
      parse_sname_as_options = 1;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	62bb      	str	r3, [r7, #40]	; 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 800ce92:	4821      	ldr	r0, [pc, #132]	; (800cf18 <dhcp_parse_reply+0x5d8>)
 800ce94:	f003 f9fc 	bl	8010290 <puts>
 800ce98:	e00f      	b.n	800ceba <dhcp_parse_reply+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d107      	bne.n	800ceb0 <dhcp_parse_reply+0x570>
      parse_sname_as_options = 1;
 800cea0:	2301      	movs	r3, #1
 800cea2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800cea4:	2301      	movs	r3, #1
 800cea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 800cea8:	481c      	ldr	r0, [pc, #112]	; (800cf1c <dhcp_parse_reply+0x5dc>)
 800ceaa:	f003 f9f1 	bl	8010290 <puts>
 800ceae:	e004      	b.n	800ceba <dhcp_parse_reply+0x57a>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	481a      	ldr	r0, [pc, #104]	; (800cf20 <dhcp_parse_reply+0x5e0>)
 800ceb6:	f003 f963 	bl	8010180 <iprintf>
    }
  }
  if (parse_file_as_options) {
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d006      	beq.n	800cece <dhcp_parse_reply+0x58e>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800cec4:	236c      	movs	r3, #108	; 0x6c
 800cec6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800cec8:	23ec      	movs	r3, #236	; 0xec
 800ceca:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800cecc:	e555      	b.n	800c97a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d006      	beq.n	800cee2 <dhcp_parse_reply+0x5a2>
    parse_sname_as_options = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800ced8:	232c      	movs	r3, #44	; 0x2c
 800ceda:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800cedc:	236c      	movs	r3, #108	; 0x6c
 800cede:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800cee0:	e54b      	b.n	800c97a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3740      	adds	r7, #64	; 0x40
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	0801377c 	.word	0x0801377c
 800cef0:	08014450 	.word	0x08014450
 800cef4:	080137dc 	.word	0x080137dc
 800cef8:	08014494 	.word	0x08014494
 800cefc:	080144b4 	.word	0x080144b4
 800cf00:	20006964 	.word	0x20006964
 800cf04:	080144c8 	.word	0x080144c8
 800cf08:	2000696c 	.word	0x2000696c
 800cf0c:	080144e0 	.word	0x080144e0
 800cf10:	080144f4 	.word	0x080144f4
 800cf14:	08014508 	.word	0x08014508
 800cf18:	08014520 	.word	0x08014520
 800cf1c:	08014538 	.word	0x08014538
 800cf20:	08014558 	.word	0x08014558

0800cf24 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b08f      	sub	sp, #60	; 0x3c
 800cf28:	af04      	add	r7, sp, #16
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800cf32:	4b8b      	ldr	r3, [pc, #556]	; (800d160 <dhcp_recv+0x23c>)
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8102 	beq.w	800d150 <dhcp_recv+0x22c>
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	791b      	ldrb	r3, [r3, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 80fd 	beq.w	800d150 <dhcp_recv+0x22c>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	461c      	mov	r4, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	3302      	adds	r3, #2
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	3303      	adds	r3, #3
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	4619      	mov	r1, r3
 800cf74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	9101      	str	r1, [sp, #4]
 800cf7a:	9200      	str	r2, [sp, #0]
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	4602      	mov	r2, r0
 800cf80:	6879      	ldr	r1, [r7, #4]
 800cf82:	4878      	ldr	r0, [pc, #480]	; (800d164 <dhcp_recv+0x240>)
 800cf84:	f003 f8fc 	bl	8010180 <iprintf>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	895b      	ldrh	r3, [r3, #10]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4876      	ldr	r0, [pc, #472]	; (800d168 <dhcp_recv+0x244>)
 800cf90:	f003 f8f6 	bl	8010180 <iprintf>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	891b      	ldrh	r3, [r3, #8]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4874      	ldr	r0, [pc, #464]	; (800d16c <dhcp_recv+0x248>)
 800cf9c:	f003 f8f0 	bl	8010180 <iprintf>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	895b      	ldrh	r3, [r3, #10]
 800cfa4:	2b2b      	cmp	r3, #43	; 0x2b
 800cfa6:	d803      	bhi.n	800cfb0 <dhcp_recv+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 800cfa8:	4871      	ldr	r0, [pc, #452]	; (800d170 <dhcp_recv+0x24c>)
 800cfaa:	f003 f971 	bl	8010290 <puts>
    goto free_pbuf_and_return;
 800cfae:	e0d0      	b.n	800d152 <dhcp_recv+0x22e>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d006      	beq.n	800cfc6 <dhcp_recv+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	486d      	ldr	r0, [pc, #436]	; (800d174 <dhcp_recv+0x250>)
 800cfc0:	f003 f8de 	bl	8010180 <iprintf>
    goto free_pbuf_and_return;
 800cfc4:	e0c5      	b.n	800d152 <dhcp_recv+0x22e>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfcc:	e028      	b.n	800d020 <dhcp_recv+0xfc>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cfce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd2:	6a3a      	ldr	r2, [r7, #32]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800cfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfde:	69b9      	ldr	r1, [r7, #24]
 800cfe0:	440b      	add	r3, r1
 800cfe2:	7f1b      	ldrb	r3, [r3, #28]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d016      	beq.n	800d016 <dhcp_recv+0xf2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800cfe8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800cfec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff0:	6a3a      	ldr	r2, [r7, #32]
 800cff2:	4413      	add	r3, r2
 800cff4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800cff8:	461c      	mov	r4, r3
 800cffa:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800cffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	4413      	add	r3, r2
 800d006:	7f1b      	ldrb	r3, [r3, #28]
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	4603      	mov	r3, r0
 800d00c:	4622      	mov	r2, r4
 800d00e:	485a      	ldr	r0, [pc, #360]	; (800d178 <dhcp_recv+0x254>)
 800d010:	f003 f8b6 	bl	8010180 <iprintf>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 800d014:	e09d      	b.n	800d152 <dhcp_recv+0x22e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d01a:	3301      	adds	r3, #1
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d026:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d203      	bcs.n	800d036 <dhcp_recv+0x112>
 800d02e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d032:	2b05      	cmp	r3, #5
 800d034:	d9cb      	bls.n	800cfce <dhcp_recv+0xaa>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f6 fbbe 	bl	80037bc <lwip_htonl>
 800d040:	4602      	mov	r2, r0
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	d00c      	beq.n	800d064 <dhcp_recv+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7f6 fbb4 	bl	80037bc <lwip_htonl>
 800d054:	4601      	mov	r1, r0
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	4847      	ldr	r0, [pc, #284]	; (800d17c <dhcp_recv+0x258>)
 800d05e:	f003 f88f 	bl	8010180 <iprintf>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 800d062:	e076      	b.n	800d152 <dhcp_recv+0x22e>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800d064:	69f9      	ldr	r1, [r7, #28]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fc6a 	bl	800c940 <dhcp_parse_reply>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <dhcp_recv+0x156>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800d072:	4843      	ldr	r0, [pc, #268]	; (800d180 <dhcp_recv+0x25c>)
 800d074:	f003 f90c 	bl	8010290 <puts>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 800d078:	e06b      	b.n	800d152 <dhcp_recv+0x22e>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 800d07a:	4842      	ldr	r0, [pc, #264]	; (800d184 <dhcp_recv+0x260>)
 800d07c:	f003 f908 	bl	8010290 <puts>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800d080:	4b41      	ldr	r3, [pc, #260]	; (800d188 <dhcp_recv+0x264>)
 800d082:	785b      	ldrb	r3, [r3, #1]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d103      	bne.n	800d090 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 800d088:	4840      	ldr	r0, [pc, #256]	; (800d18c <dhcp_recv+0x268>)
 800d08a:	f003 f901 	bl	8010290 <puts>
    goto free_pbuf_and_return;
 800d08e:	e060      	b.n	800d152 <dhcp_recv+0x22e>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d096:	4b3e      	ldr	r3, [pc, #248]	; (800d190 <dhcp_recv+0x26c>)
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800d09c:	7cfb      	ldrb	r3, [r7, #19]
 800d09e:	2b05      	cmp	r3, #5
 800d0a0:	d12d      	bne.n	800d0fe <dhcp_recv+0x1da>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 800d0a2:	483c      	ldr	r0, [pc, #240]	; (800d194 <dhcp_recv+0x270>)
 800d0a4:	f003 f8f4 	bl	8010290 <puts>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	795b      	ldrb	r3, [r3, #5]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d112      	bne.n	800d0d6 <dhcp_recv+0x1b2>
      dhcp_handle_ack(netif, msg_in);
 800d0b0:	6979      	ldr	r1, [r7, #20]
 800d0b2:	6a38      	ldr	r0, [r7, #32]
 800d0b4:	f7fe fcb0 	bl	800ba18 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0be:	f003 0308 	and.w	r3, r3, #8
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d003      	beq.n	800d0ce <dhcp_recv+0x1aa>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800d0c6:	6a38      	ldr	r0, [r7, #32]
 800d0c8:	f7fe f972 	bl	800b3b0 <dhcp_check>
 800d0cc:	e041      	b.n	800d152 <dhcp_recv+0x22e>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800d0ce:	6a38      	ldr	r0, [r7, #32]
 800d0d0:	f7fe ff44 	bl	800bf5c <dhcp_bind>
 800d0d4:	e03d      	b.n	800d152 <dhcp_recv+0x22e>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	795b      	ldrb	r3, [r3, #5]
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d007      	beq.n	800d0ee <dhcp_recv+0x1ca>
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	795b      	ldrb	r3, [r3, #5]
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d003      	beq.n	800d0ee <dhcp_recv+0x1ca>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d131      	bne.n	800d152 <dhcp_recv+0x22e>
      dhcp_handle_ack(netif, msg_in);
 800d0ee:	6979      	ldr	r1, [r7, #20]
 800d0f0:	6a38      	ldr	r0, [r7, #32]
 800d0f2:	f7fe fc91 	bl	800ba18 <dhcp_handle_ack>
      dhcp_bind(netif);
 800d0f6:	6a38      	ldr	r0, [r7, #32]
 800d0f8:	f7fe ff30 	bl	800bf5c <dhcp_bind>
 800d0fc:	e029      	b.n	800d152 <dhcp_recv+0x22e>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800d0fe:	7cfb      	ldrb	r3, [r7, #19]
 800d100:	2b06      	cmp	r3, #6
 800d102:	d116      	bne.n	800d132 <dhcp_recv+0x20e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d00b      	beq.n	800d124 <dhcp_recv+0x200>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	795b      	ldrb	r3, [r3, #5]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d007      	beq.n	800d124 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d118:	2b04      	cmp	r3, #4
 800d11a:	d003      	beq.n	800d124 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	795b      	ldrb	r3, [r3, #5]
 800d120:	2b05      	cmp	r3, #5
 800d122:	d106      	bne.n	800d132 <dhcp_recv+0x20e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 800d124:	481c      	ldr	r0, [pc, #112]	; (800d198 <dhcp_recv+0x274>)
 800d126:	f003 f8b3 	bl	8010290 <puts>
    dhcp_handle_nak(netif);
 800d12a:	6a38      	ldr	r0, [r7, #32]
 800d12c:	f7fe f912 	bl	800b354 <dhcp_handle_nak>
 800d130:	e00f      	b.n	800d152 <dhcp_recv+0x22e>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800d132:	7cfb      	ldrb	r3, [r7, #19]
 800d134:	2b02      	cmp	r3, #2
 800d136:	d10b      	bne.n	800d150 <dhcp_recv+0x22c>
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	795b      	ldrb	r3, [r3, #5]
 800d13c:	2b06      	cmp	r3, #6
 800d13e:	d107      	bne.n	800d150 <dhcp_recv+0x22c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 800d140:	4816      	ldr	r0, [pc, #88]	; (800d19c <dhcp_recv+0x278>)
 800d142:	f003 f8a5 	bl	8010290 <puts>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800d146:	6979      	ldr	r1, [r7, #20]
 800d148:	6a38      	ldr	r0, [r7, #32]
 800d14a:	f7fe f981 	bl	800b450 <dhcp_handle_offer>
 800d14e:	e000      	b.n	800d152 <dhcp_recv+0x22e>
  }

free_pbuf_and_return:
 800d150:	bf00      	nop
  pbuf_free(p);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7f7 fe92 	bl	8004e7c <pbuf_free>
}
 800d158:	bf00      	nop
 800d15a:	372c      	adds	r7, #44	; 0x2c
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd90      	pop	{r4, r7, pc}
 800d160:	20003390 	.word	0x20003390
 800d164:	08014578 	.word	0x08014578
 800d168:	080145b8 	.word	0x080145b8
 800d16c:	080145cc 	.word	0x080145cc
 800d170:	080145e4 	.word	0x080145e4
 800d174:	0801460c 	.word	0x0801460c
 800d178:	08014634 	.word	0x08014634
 800d17c:	08014670 	.word	0x08014670
 800d180:	080146b0 	.word	0x080146b0
 800d184:	080146e8 	.word	0x080146e8
 800d188:	20006964 	.word	0x20006964
 800d18c:	0801470c 	.word	0x0801470c
 800d190:	2000696c 	.word	0x2000696c
 800d194:	08014738 	.word	0x08014738
 800d198:	0801474c 	.word	0x0801474c
 800d19c:	08014760 	.word	0x08014760

0800d1a0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	603b      	str	r3, [r7, #0]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d108      	bne.n	800d1c8 <dhcp_create_msg+0x28>
 800d1b6:	4b64      	ldr	r3, [pc, #400]	; (800d348 <dhcp_create_msg+0x1a8>)
 800d1b8:	f240 7269 	movw	r2, #1897	; 0x769
 800d1bc:	4963      	ldr	r1, [pc, #396]	; (800d34c <dhcp_create_msg+0x1ac>)
 800d1be:	4864      	ldr	r0, [pc, #400]	; (800d350 <dhcp_create_msg+0x1b0>)
 800d1c0:	f002 ffde 	bl	8010180 <iprintf>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e0ba      	b.n	800d33e <dhcp_create_msg+0x19e>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d108      	bne.n	800d1e0 <dhcp_create_msg+0x40>
 800d1ce:	4b5e      	ldr	r3, [pc, #376]	; (800d348 <dhcp_create_msg+0x1a8>)
 800d1d0:	f240 726a 	movw	r2, #1898	; 0x76a
 800d1d4:	495f      	ldr	r1, [pc, #380]	; (800d354 <dhcp_create_msg+0x1b4>)
 800d1d6:	485e      	ldr	r0, [pc, #376]	; (800d350 <dhcp_create_msg+0x1b0>)
 800d1d8:	f002 ffd2 	bl	8010180 <iprintf>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e0ae      	b.n	800d33e <dhcp_create_msg+0x19e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d1e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1e4:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d1e8:	2036      	movs	r0, #54	; 0x36
 800d1ea:	f7f7 fb67 	bl	80048bc <pbuf_alloc>
 800d1ee:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d104      	bne.n	800d200 <dhcp_create_msg+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800d1f6:	4858      	ldr	r0, [pc, #352]	; (800d358 <dhcp_create_msg+0x1b8>)
 800d1f8:	f003 f84a 	bl	8010290 <puts>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e09e      	b.n	800d33e <dhcp_create_msg+0x19e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	895b      	ldrh	r3, [r3, #10]
 800d204:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d208:	d206      	bcs.n	800d218 <dhcp_create_msg+0x78>
 800d20a:	4b4f      	ldr	r3, [pc, #316]	; (800d348 <dhcp_create_msg+0x1a8>)
 800d20c:	f240 7272 	movw	r2, #1906	; 0x772
 800d210:	4952      	ldr	r1, [pc, #328]	; (800d35c <dhcp_create_msg+0x1bc>)
 800d212:	484f      	ldr	r0, [pc, #316]	; (800d350 <dhcp_create_msg+0x1b0>)
 800d214:	f002 ffb4 	bl	8010180 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	d103      	bne.n	800d226 <dhcp_create_msg+0x86>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	795b      	ldrb	r3, [r3, #5]
 800d222:	2b03      	cmp	r3, #3
 800d224:	d10d      	bne.n	800d242 <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	799b      	ldrb	r3, [r3, #6]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d105      	bne.n	800d23a <dhcp_create_msg+0x9a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800d22e:	f003 f837 	bl	80102a0 <rand>
 800d232:	4603      	mov	r3, r0
 800d234:	461a      	mov	r2, r3
 800d236:	4b4a      	ldr	r3, [pc, #296]	; (800d360 <dhcp_create_msg+0x1c0>)
 800d238:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d23a:	4b49      	ldr	r3, [pc, #292]	; (800d360 <dhcp_create_msg+0x1c0>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 800d242:	4b47      	ldr	r3, [pc, #284]	; (800d360 <dhcp_create_msg+0x1c0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4619      	mov	r1, r3
 800d248:	4846      	ldr	r0, [pc, #280]	; (800d364 <dhcp_create_msg+0x1c4>)
 800d24a:	f002 ff99 	bl	8010180 <iprintf>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d254:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d258:	2100      	movs	r1, #0
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f002 ff88 	bl	8010170 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	2201      	movs	r2, #1
 800d264:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2201      	movs	r2, #1
 800d26a:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7f6 fa9e 	bl	80037bc <lwip_htonl>
 800d280:	4602      	mov	r2, r0
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d286:	79fb      	ldrb	r3, [r7, #7]
 800d288:	2b08      	cmp	r3, #8
 800d28a:	d010      	beq.n	800d2ae <dhcp_create_msg+0x10e>
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	2b04      	cmp	r3, #4
 800d290:	d00d      	beq.n	800d2ae <dhcp_create_msg+0x10e>
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	2b07      	cmp	r3, #7
 800d296:	d00a      	beq.n	800d2ae <dhcp_create_msg+0x10e>
 800d298:	79fb      	ldrb	r3, [r7, #7]
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d10c      	bne.n	800d2b8 <dhcp_create_msg+0x118>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d2a2:	2b05      	cmp	r3, #5
 800d2a4:	d003      	beq.n	800d2ae <dhcp_create_msg+0x10e>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	795b      	ldrb	r3, [r3, #5]
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	d104      	bne.n	800d2b8 <dhcp_create_msg+0x118>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	83fb      	strh	r3, [r7, #30]
 800d2bc:	e00c      	b.n	800d2d8 <dhcp_create_msg+0x138>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d2be:	8bfa      	ldrh	r2, [r7, #30]
 800d2c0:	8bfb      	ldrh	r3, [r7, #30]
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	440a      	add	r2, r1
 800d2c6:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	460a      	mov	r2, r1
 800d2d0:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d2d2:	8bfb      	ldrh	r3, [r7, #30]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	83fb      	strh	r3, [r7, #30]
 800d2d8:	8bfb      	ldrh	r3, [r7, #30]
 800d2da:	2b05      	cmp	r3, #5
 800d2dc:	d9ef      	bls.n	800d2be <dhcp_create_msg+0x11e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d2e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d2f0:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d2fa:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d2fe:	2200      	movs	r2, #0
 800d300:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d304:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d30e:	2301      	movs	r3, #1
 800d310:	2235      	movs	r2, #53	; 0x35
 800d312:	2000      	movs	r0, #0
 800d314:	f7ff fa44 	bl	800c7a0 <dhcp_option>
 800d318:	4603      	mov	r3, r0
 800d31a:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d322:	79fa      	ldrb	r2, [r7, #7]
 800d324:	8a7b      	ldrh	r3, [r7, #18]
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fa6e 	bl	800c808 <dhcp_option_byte>
 800d32c:	4603      	mov	r3, r0
 800d32e:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <dhcp_create_msg+0x19c>
    *options_out_len = options_out_len_loc;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	8a7a      	ldrh	r2, [r7, #18]
 800d33a:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800d33c:	69bb      	ldr	r3, [r7, #24]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3720      	adds	r7, #32
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	0801377c 	.word	0x0801377c
 800d34c:	08014794 	.word	0x08014794
 800d350:	080137dc 	.word	0x080137dc
 800d354:	080147b4 	.word	0x080147b4
 800d358:	080147d4 	.word	0x080147d4
 800d35c:	08014800 	.word	0x08014800
 800d360:	2000011c 	.word	0x2000011c
 800d364:	08014840 	.word	0x08014840

0800d368 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	81fa      	strh	r2, [r7, #14]
 800d37c:	461a      	mov	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	4413      	add	r3, r2
 800d382:	22ff      	movs	r2, #255	; 0xff
 800d384:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d386:	e007      	b.n	800d398 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	1c5a      	adds	r2, r3, #1
 800d38c:	81fa      	strh	r2, [r7, #14]
 800d38e:	461a      	mov	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	4413      	add	r3, r2
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d398:	89fb      	ldrh	r3, [r7, #14]
 800d39a:	2b43      	cmp	r3, #67	; 0x43
 800d39c:	d904      	bls.n	800d3a8 <dhcp_option_trailer+0x40>
 800d39e:	89fb      	ldrh	r3, [r7, #14]
 800d3a0:	f003 0303 	and.w	r3, r3, #3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <dhcp_option_trailer+0x46>
 800d3a8:	89fb      	ldrh	r3, [r7, #14]
 800d3aa:	2b43      	cmp	r3, #67	; 0x43
 800d3ac:	d9ec      	bls.n	800d388 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d3ae:	89fb      	ldrh	r3, [r7, #14]
 800d3b0:	33f0      	adds	r3, #240	; 0xf0
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f7 fbda 	bl	8004b70 <pbuf_realloc>
}
 800d3bc:	bf00      	nop
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d017      	beq.n	800d402 <dhcp_supplied_address+0x3e>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d013      	beq.n	800d402 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	795b      	ldrb	r3, [r3, #5]
 800d3e4:	2b0a      	cmp	r3, #10
 800d3e6:	d007      	beq.n	800d3f8 <dhcp_supplied_address+0x34>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	795b      	ldrb	r3, [r3, #5]
 800d3ec:	2b05      	cmp	r3, #5
 800d3ee:	d003      	beq.n	800d3f8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d3f4:	2b04      	cmp	r3, #4
 800d3f6:	d101      	bne.n	800d3fc <dhcp_supplied_address+0x38>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e000      	b.n	800d3fe <dhcp_supplied_address+0x3a>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	e000      	b.n	800d404 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d418:	4933      	ldr	r1, [pc, #204]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	4613      	mov	r3, r2
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	4413      	add	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	440b      	add	r3, r1
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d023      	beq.n	800d474 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4618      	mov	r0, r3
 800d432:	492d      	ldr	r1, [pc, #180]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	4613      	mov	r3, r2
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	4413      	add	r3, r2
 800d43c:	00db      	lsls	r3, r3, #3
 800d43e:	440b      	add	r3, r1
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	4601      	mov	r1, r0
 800d446:	4829      	ldr	r0, [pc, #164]	; (800d4ec <etharp_free_entry+0xdc>)
 800d448:	f002 fe9a 	bl	8010180 <iprintf>
    free_etharp_q(arp_table[i].q);
 800d44c:	4926      	ldr	r1, [pc, #152]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4613      	mov	r3, r2
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	4413      	add	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	440b      	add	r3, r1
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f7 fd0d 	bl	8004e7c <pbuf_free>
    arp_table[i].q = NULL;
 800d462:	4921      	ldr	r1, [pc, #132]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	4613      	mov	r3, r2
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4413      	add	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	440b      	add	r3, r1
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d474:	491c      	ldr	r1, [pc, #112]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	4613      	mov	r3, r2
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	440b      	add	r3, r1
 800d482:	3314      	adds	r3, #20
 800d484:	2200      	movs	r2, #0
 800d486:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800d488:	4917      	ldr	r1, [pc, #92]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	4613      	mov	r3, r2
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	440b      	add	r3, r1
 800d496:	3312      	adds	r3, #18
 800d498:	2200      	movs	r2, #0
 800d49a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800d49c:	4912      	ldr	r1, [pc, #72]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	440b      	add	r3, r1
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800d4b0:	490d      	ldr	r1, [pc, #52]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	4413      	add	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	440b      	add	r3, r1
 800d4be:	3304      	adds	r3, #4
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800d4c4:	4908      	ldr	r1, [pc, #32]	; (800d4e8 <etharp_free_entry+0xd8>)
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	4413      	add	r3, r2
 800d4ce:	00db      	lsls	r3, r3, #3
 800d4d0:	440b      	add	r3, r1
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	4a06      	ldr	r2, [pc, #24]	; (800d4f0 <etharp_free_entry+0xe0>)
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	6810      	ldr	r0, [r2, #0]
 800d4da:	6018      	str	r0, [r3, #0]
 800d4dc:	8892      	ldrh	r2, [r2, #4]
 800d4de:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000120 	.word	0x20000120
 800d4ec:	0801485c 	.word	0x0801485c
 800d4f0:	08015d28 	.word	0x08015d28

0800d4f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 800d4fa:	485c      	ldr	r0, [pc, #368]	; (800d66c <etharp_tmr+0x178>)
 800d4fc:	f002 fec8 	bl	8010290 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d500:	2300      	movs	r3, #0
 800d502:	607b      	str	r3, [r7, #4]
 800d504:	e0a9      	b.n	800d65a <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 800d506:	495a      	ldr	r1, [pc, #360]	; (800d670 <etharp_tmr+0x17c>)
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	440b      	add	r3, r1
 800d514:	3314      	adds	r3, #20
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d51a:	78fb      	ldrb	r3, [r7, #3]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8099 	beq.w	800d654 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d522:	4953      	ldr	r1, [pc, #332]	; (800d670 <etharp_tmr+0x17c>)
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4613      	mov	r3, r2
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	4413      	add	r3, r2
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	440b      	add	r3, r1
 800d530:	3312      	adds	r3, #18
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	3301      	adds	r3, #1
 800d536:	b298      	uxth	r0, r3
 800d538:	494d      	ldr	r1, [pc, #308]	; (800d670 <etharp_tmr+0x17c>)
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	4613      	mov	r3, r2
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	4413      	add	r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	440b      	add	r3, r1
 800d546:	3312      	adds	r3, #18
 800d548:	4602      	mov	r2, r0
 800d54a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d54c:	4948      	ldr	r1, [pc, #288]	; (800d670 <etharp_tmr+0x17c>)
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	4613      	mov	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	4413      	add	r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	440b      	add	r3, r1
 800d55a:	3312      	adds	r3, #18
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d562:	d215      	bcs.n	800d590 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d564:	4942      	ldr	r1, [pc, #264]	; (800d670 <etharp_tmr+0x17c>)
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	4613      	mov	r3, r2
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	4413      	add	r3, r2
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	440b      	add	r3, r1
 800d572:	3314      	adds	r3, #20
 800d574:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d576:	2b01      	cmp	r3, #1
 800d578:	d121      	bne.n	800d5be <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d57a:	493d      	ldr	r1, [pc, #244]	; (800d670 <etharp_tmr+0x17c>)
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	4613      	mov	r3, r2
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	4413      	add	r3, r2
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	440b      	add	r3, r1
 800d588:	3312      	adds	r3, #18
 800d58a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d916      	bls.n	800d5be <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 800d590:	4937      	ldr	r1, [pc, #220]	; (800d670 <etharp_tmr+0x17c>)
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	4613      	mov	r3, r2
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	4413      	add	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	440b      	add	r3, r1
 800d59e:	3314      	adds	r3, #20
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d901      	bls.n	800d5aa <etharp_tmr+0xb6>
 800d5a6:	4b33      	ldr	r3, [pc, #204]	; (800d674 <etharp_tmr+0x180>)
 800d5a8:	e000      	b.n	800d5ac <etharp_tmr+0xb8>
 800d5aa:	4b33      	ldr	r3, [pc, #204]	; (800d678 <etharp_tmr+0x184>)
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4832      	ldr	r0, [pc, #200]	; (800d67c <etharp_tmr+0x188>)
 800d5b2:	f002 fde5 	bl	8010180 <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff ff2a 	bl	800d410 <etharp_free_entry>
 800d5bc:	e04a      	b.n	800d654 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d5be:	492c      	ldr	r1, [pc, #176]	; (800d670 <etharp_tmr+0x17c>)
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	440b      	add	r3, r1
 800d5cc:	3314      	adds	r3, #20
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d10a      	bne.n	800d5ea <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5d4:	4926      	ldr	r1, [pc, #152]	; (800d670 <etharp_tmr+0x17c>)
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	4413      	add	r3, r2
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	440b      	add	r3, r1
 800d5e2:	3314      	adds	r3, #20
 800d5e4:	2204      	movs	r2, #4
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	e034      	b.n	800d654 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5ea:	4921      	ldr	r1, [pc, #132]	; (800d670 <etharp_tmr+0x17c>)
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	4413      	add	r3, r2
 800d5f4:	00db      	lsls	r3, r3, #3
 800d5f6:	440b      	add	r3, r1
 800d5f8:	3314      	adds	r3, #20
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b04      	cmp	r3, #4
 800d5fe:	d10a      	bne.n	800d616 <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d600:	491b      	ldr	r1, [pc, #108]	; (800d670 <etharp_tmr+0x17c>)
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	4613      	mov	r3, r2
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	4413      	add	r3, r2
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	440b      	add	r3, r1
 800d60e:	3314      	adds	r3, #20
 800d610:	2202      	movs	r2, #2
 800d612:	701a      	strb	r2, [r3, #0]
 800d614:	e01e      	b.n	800d654 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d616:	4916      	ldr	r1, [pc, #88]	; (800d670 <etharp_tmr+0x17c>)
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	4613      	mov	r3, r2
 800d61c:	005b      	lsls	r3, r3, #1
 800d61e:	4413      	add	r3, r2
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	440b      	add	r3, r1
 800d624:	3314      	adds	r3, #20
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d113      	bne.n	800d654 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d62c:	4910      	ldr	r1, [pc, #64]	; (800d670 <etharp_tmr+0x17c>)
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	4613      	mov	r3, r2
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	4413      	add	r3, r2
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	440b      	add	r3, r1
 800d63a:	3308      	adds	r3, #8
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	4613      	mov	r3, r2
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	4413      	add	r3, r2
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	4a09      	ldr	r2, [pc, #36]	; (800d670 <etharp_tmr+0x17c>)
 800d64a:	4413      	add	r3, r2
 800d64c:	3304      	adds	r3, #4
 800d64e:	4619      	mov	r1, r3
 800d650:	f000 ff70 	bl	800e534 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	3301      	adds	r3, #1
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	f77f af52 	ble.w	800d506 <etharp_tmr+0x12>
      }
    }
  }
}
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	08014894 	.word	0x08014894
 800d670:	20000120 	.word	0x20000120
 800d674:	080148a4 	.word	0x080148a4
 800d678:	080148ac 	.word	0x080148ac
 800d67c:	080148b4 	.word	0x080148b4

0800d680 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	; 0x28
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	460b      	mov	r3, r1
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d68e:	230a      	movs	r3, #10
 800d690:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d692:	230a      	movs	r3, #10
 800d694:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d696:	230a      	movs	r3, #10
 800d698:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d69e:	230a      	movs	r3, #10
 800d6a0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	83bb      	strh	r3, [r7, #28]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	837b      	strh	r3, [r7, #26]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	843b      	strh	r3, [r7, #32]
 800d6b2:	e0ba      	b.n	800d82a <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 800d6b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6b8:	4993      	ldr	r1, [pc, #588]	; (800d908 <etharp_find_entry+0x288>)
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	4413      	add	r3, r2
 800d6c0:	00db      	lsls	r3, r3, #3
 800d6c2:	440b      	add	r3, r1
 800d6c4:	3314      	adds	r3, #20
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d6ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d6ce:	2b0a      	cmp	r3, #10
 800d6d0:	d10b      	bne.n	800d6ea <etharp_find_entry+0x6a>
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d108      	bne.n	800d6ea <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 800d6d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	488b      	ldr	r0, [pc, #556]	; (800d90c <etharp_find_entry+0x28c>)
 800d6e0:	f002 fd4e 	bl	8010180 <iprintf>
      /* remember first empty entry */
      empty = i;
 800d6e4:	8c3b      	ldrh	r3, [r7, #32]
 800d6e6:	847b      	strh	r3, [r7, #34]	; 0x22
 800d6e8:	e09b      	b.n	800d822 <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f000 8098 	beq.w	800d822 <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d009      	beq.n	800d70c <etharp_find_entry+0x8c>
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d806      	bhi.n	800d70c <etharp_find_entry+0x8c>
 800d6fe:	4b84      	ldr	r3, [pc, #528]	; (800d910 <etharp_find_entry+0x290>)
 800d700:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d704:	4983      	ldr	r1, [pc, #524]	; (800d914 <etharp_find_entry+0x294>)
 800d706:	4884      	ldr	r0, [pc, #528]	; (800d918 <etharp_find_entry+0x298>)
 800d708:	f002 fd3a 	bl	8010180 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d026      	beq.n	800d760 <etharp_find_entry+0xe0>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6819      	ldr	r1, [r3, #0]
 800d716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d71a:	487b      	ldr	r0, [pc, #492]	; (800d908 <etharp_find_entry+0x288>)
 800d71c:	4613      	mov	r3, r2
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	4413      	add	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	4403      	add	r3, r0
 800d726:	3304      	adds	r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4299      	cmp	r1, r3
 800d72c:	d118      	bne.n	800d760 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00c      	beq.n	800d74e <etharp_find_entry+0xce>
 800d734:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d738:	4973      	ldr	r1, [pc, #460]	; (800d908 <etharp_find_entry+0x288>)
 800d73a:	4613      	mov	r3, r2
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4413      	add	r3, r2
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	440b      	add	r3, r1
 800d744:	3308      	adds	r3, #8
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d108      	bne.n	800d760 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 800d74e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d752:	4619      	mov	r1, r3
 800d754:	4871      	ldr	r0, [pc, #452]	; (800d91c <etharp_find_entry+0x29c>)
 800d756:	f002 fd13 	bl	8010180 <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 800d75a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d75e:	e142      	b.n	800d9e6 <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d140      	bne.n	800d7e8 <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d76a:	4967      	ldr	r1, [pc, #412]	; (800d908 <etharp_find_entry+0x288>)
 800d76c:	4613      	mov	r3, r2
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	4413      	add	r3, r2
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	440b      	add	r3, r1
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01a      	beq.n	800d7b2 <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 800d77c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d780:	4961      	ldr	r1, [pc, #388]	; (800d908 <etharp_find_entry+0x288>)
 800d782:	4613      	mov	r3, r2
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	4413      	add	r3, r2
 800d788:	00db      	lsls	r3, r3, #3
 800d78a:	440b      	add	r3, r1
 800d78c:	3312      	adds	r3, #18
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	8bba      	ldrh	r2, [r7, #28]
 800d792:	429a      	cmp	r2, r3
 800d794:	d845      	bhi.n	800d822 <etharp_find_entry+0x1a2>
            old_queue = i;
 800d796:	8c3b      	ldrh	r3, [r7, #32]
 800d798:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d79a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d79e:	495a      	ldr	r1, [pc, #360]	; (800d908 <etharp_find_entry+0x288>)
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	4413      	add	r3, r2
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	440b      	add	r3, r1
 800d7aa:	3312      	adds	r3, #18
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	83bb      	strh	r3, [r7, #28]
 800d7b0:	e037      	b.n	800d822 <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d7b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7b6:	4954      	ldr	r1, [pc, #336]	; (800d908 <etharp_find_entry+0x288>)
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	005b      	lsls	r3, r3, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	440b      	add	r3, r1
 800d7c2:	3312      	adds	r3, #18
 800d7c4:	881b      	ldrh	r3, [r3, #0]
 800d7c6:	8b7a      	ldrh	r2, [r7, #26]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d82a      	bhi.n	800d822 <etharp_find_entry+0x1a2>
            old_pending = i;
 800d7cc:	8c3b      	ldrh	r3, [r7, #32]
 800d7ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d7d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7d4:	494c      	ldr	r1, [pc, #304]	; (800d908 <etharp_find_entry+0x288>)
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	4413      	add	r3, r2
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	440b      	add	r3, r1
 800d7e0:	3312      	adds	r3, #18
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	837b      	strh	r3, [r7, #26]
 800d7e6:	e01c      	b.n	800d822 <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d919      	bls.n	800d822 <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d7ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7f2:	4945      	ldr	r1, [pc, #276]	; (800d908 <etharp_find_entry+0x288>)
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	3312      	adds	r3, #18
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	8b3a      	ldrh	r2, [r7, #24]
 800d804:	429a      	cmp	r2, r3
 800d806:	d80c      	bhi.n	800d822 <etharp_find_entry+0x1a2>
            old_stable = i;
 800d808:	8c3b      	ldrh	r3, [r7, #32]
 800d80a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d80c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d810:	493d      	ldr	r1, [pc, #244]	; (800d908 <etharp_find_entry+0x288>)
 800d812:	4613      	mov	r3, r2
 800d814:	005b      	lsls	r3, r3, #1
 800d816:	4413      	add	r3, r2
 800d818:	00db      	lsls	r3, r3, #3
 800d81a:	440b      	add	r3, r1
 800d81c:	3312      	adds	r3, #18
 800d81e:	881b      	ldrh	r3, [r3, #0]
 800d820:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d822:	8c3b      	ldrh	r3, [r7, #32]
 800d824:	3301      	adds	r3, #1
 800d826:	b29b      	uxth	r3, r3
 800d828:	843b      	strh	r3, [r7, #32]
 800d82a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d82e:	2b09      	cmp	r3, #9
 800d830:	f77f af40 	ble.w	800d6b4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d834:	7afb      	ldrb	r3, [r7, #11]
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d108      	bne.n	800d850 <etharp_find_entry+0x1d0>
 800d83e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d842:	2b0a      	cmp	r3, #10
 800d844:	d10a      	bne.n	800d85c <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d846:	7afb      	ldrb	r3, [r7, #11]
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d105      	bne.n	800d85c <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 800d850:	4833      	ldr	r0, [pc, #204]	; (800d920 <etharp_find_entry+0x2a0>)
 800d852:	f002 fd1d 	bl	8010290 <puts>
    return (s16_t)ERR_MEM;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	e0c4      	b.n	800d9e6 <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d85c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d860:	2b09      	cmp	r3, #9
 800d862:	dc08      	bgt.n	800d876 <etharp_find_entry+0x1f6>
    i = empty;
 800d864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d866:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 800d868:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d86c:	4619      	mov	r1, r3
 800d86e:	482d      	ldr	r0, [pc, #180]	; (800d924 <etharp_find_entry+0x2a4>)
 800d870:	f002 fc86 	bl	8010180 <iprintf>
 800d874:	e072      	b.n	800d95c <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d876:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d87a:	2b09      	cmp	r3, #9
 800d87c:	dc1a      	bgt.n	800d8b4 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 800d87e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d880:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 800d882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d886:	4619      	mov	r1, r3
 800d888:	4827      	ldr	r0, [pc, #156]	; (800d928 <etharp_find_entry+0x2a8>)
 800d88a:	f002 fc79 	bl	8010180 <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d88e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d892:	491d      	ldr	r1, [pc, #116]	; (800d908 <etharp_find_entry+0x288>)
 800d894:	4613      	mov	r3, r2
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	4413      	add	r3, r2
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	440b      	add	r3, r1
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d04b      	beq.n	800d93c <etharp_find_entry+0x2bc>
 800d8a4:	4b1a      	ldr	r3, [pc, #104]	; (800d910 <etharp_find_entry+0x290>)
 800d8a6:	f240 126d 	movw	r2, #365	; 0x16d
 800d8aa:	4920      	ldr	r1, [pc, #128]	; (800d92c <etharp_find_entry+0x2ac>)
 800d8ac:	481a      	ldr	r0, [pc, #104]	; (800d918 <etharp_find_entry+0x298>)
 800d8ae:	f002 fc67 	bl	8010180 <iprintf>
 800d8b2:	e043      	b.n	800d93c <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d8b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d8b8:	2b09      	cmp	r3, #9
 800d8ba:	dc08      	bgt.n	800d8ce <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 800d8bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8be:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 800d8c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	481a      	ldr	r0, [pc, #104]	; (800d930 <etharp_find_entry+0x2b0>)
 800d8c8:	f002 fc5a 	bl	8010180 <iprintf>
 800d8cc:	e036      	b.n	800d93c <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d8ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d8d2:	2b09      	cmp	r3, #9
 800d8d4:	dc12      	bgt.n	800d8fc <etharp_find_entry+0x27c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d8d6:	8bfb      	ldrh	r3, [r7, #30]
 800d8d8:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 800d8da:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d8de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8e2:	4909      	ldr	r1, [pc, #36]	; (800d908 <etharp_find_entry+0x288>)
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	4413      	add	r3, r2
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	440b      	add	r3, r1
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	480f      	ldr	r0, [pc, #60]	; (800d934 <etharp_find_entry+0x2b4>)
 800d8f6:	f002 fc43 	bl	8010180 <iprintf>
 800d8fa:	e01f      	b.n	800d93c <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 800d8fc:	480e      	ldr	r0, [pc, #56]	; (800d938 <etharp_find_entry+0x2b8>)
 800d8fe:	f002 fcc7 	bl	8010290 <puts>
      return (s16_t)ERR_MEM;
 800d902:	f04f 33ff 	mov.w	r3, #4294967295
 800d906:	e06e      	b.n	800d9e6 <etharp_find_entry+0x366>
 800d908:	20000120 	.word	0x20000120
 800d90c:	080148d8 	.word	0x080148d8
 800d910:	08014904 	.word	0x08014904
 800d914:	0801493c 	.word	0x0801493c
 800d918:	0801497c 	.word	0x0801497c
 800d91c:	080149a4 	.word	0x080149a4
 800d920:	080149d0 	.word	0x080149d0
 800d924:	08014a14 	.word	0x08014a14
 800d928:	08014a44 	.word	0x08014a44
 800d92c:	08014a7c 	.word	0x08014a7c
 800d930:	08014a94 	.word	0x08014a94
 800d934:	08014adc 	.word	0x08014adc
 800d938:	08014b2c 	.word	0x08014b2c
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d93c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d940:	2b09      	cmp	r3, #9
 800d942:	dd06      	ble.n	800d952 <etharp_find_entry+0x2d2>
 800d944:	4b2a      	ldr	r3, [pc, #168]	; (800d9f0 <etharp_find_entry+0x370>)
 800d946:	f240 127f 	movw	r2, #383	; 0x17f
 800d94a:	492a      	ldr	r1, [pc, #168]	; (800d9f4 <etharp_find_entry+0x374>)
 800d94c:	482a      	ldr	r0, [pc, #168]	; (800d9f8 <etharp_find_entry+0x378>)
 800d94e:	f002 fc17 	bl	8010180 <iprintf>
    etharp_free_entry(i);
 800d952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d956:	4618      	mov	r0, r3
 800d958:	f7ff fd5a 	bl	800d410 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d95c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d960:	2b09      	cmp	r3, #9
 800d962:	dd06      	ble.n	800d972 <etharp_find_entry+0x2f2>
 800d964:	4b22      	ldr	r3, [pc, #136]	; (800d9f0 <etharp_find_entry+0x370>)
 800d966:	f240 1283 	movw	r2, #387	; 0x183
 800d96a:	4922      	ldr	r1, [pc, #136]	; (800d9f4 <etharp_find_entry+0x374>)
 800d96c:	4822      	ldr	r0, [pc, #136]	; (800d9f8 <etharp_find_entry+0x378>)
 800d96e:	f002 fc07 	bl	8010180 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d976:	4921      	ldr	r1, [pc, #132]	; (800d9fc <etharp_find_entry+0x37c>)
 800d978:	4613      	mov	r3, r2
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	4413      	add	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	440b      	add	r3, r1
 800d982:	3314      	adds	r3, #20
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d006      	beq.n	800d998 <etharp_find_entry+0x318>
 800d98a:	4b19      	ldr	r3, [pc, #100]	; (800d9f0 <etharp_find_entry+0x370>)
 800d98c:	f240 1285 	movw	r2, #389	; 0x185
 800d990:	491b      	ldr	r1, [pc, #108]	; (800da00 <etharp_find_entry+0x380>)
 800d992:	4819      	ldr	r0, [pc, #100]	; (800d9f8 <etharp_find_entry+0x378>)
 800d994:	f002 fbf4 	bl	8010180 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00b      	beq.n	800d9b6 <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d99e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6819      	ldr	r1, [r3, #0]
 800d9a6:	4815      	ldr	r0, [pc, #84]	; (800d9fc <etharp_find_entry+0x37c>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	4413      	add	r3, r2
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	4403      	add	r3, r0
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d9b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9ba:	4910      	ldr	r1, [pc, #64]	; (800d9fc <etharp_find_entry+0x37c>)
 800d9bc:	4613      	mov	r3, r2
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	440b      	add	r3, r1
 800d9c6:	3312      	adds	r3, #18
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d9cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9d0:	490a      	ldr	r1, [pc, #40]	; (800d9fc <etharp_find_entry+0x37c>)
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	440b      	add	r3, r1
 800d9dc:	3308      	adds	r3, #8
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d9e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3728      	adds	r7, #40	; 0x28
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	08014904 	.word	0x08014904
 800d9f4:	08014b64 	.word	0x08014b64
 800d9f8:	0801497c 	.word	0x0801497c
 800d9fc:	20000120 	.word	0x20000120
 800da00:	08014b78 	.word	0x08014b78

0800da04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	b08e      	sub	sp, #56	; 0x38
 800da0a:	af08      	add	r7, sp, #32
 800da0c:	60f8      	str	r0, [r7, #12]
 800da0e:	60b9      	str	r1, [r7, #8]
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da1a:	2b06      	cmp	r3, #6
 800da1c:	d006      	beq.n	800da2c <etharp_update_arp_entry+0x28>
 800da1e:	4b64      	ldr	r3, [pc, #400]	; (800dbb0 <etharp_update_arp_entry+0x1ac>)
 800da20:	f240 12a9 	movw	r2, #425	; 0x1a9
 800da24:	4963      	ldr	r1, [pc, #396]	; (800dbb4 <etharp_update_arp_entry+0x1b0>)
 800da26:	4864      	ldr	r0, [pc, #400]	; (800dbb8 <etharp_update_arp_entry+0x1b4>)
 800da28:	f002 fbaa 	bl	8010180 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	469c      	mov	ip, r3
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	3301      	adds	r3, #1
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	469e      	mov	lr, r3
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	3302      	adds	r3, #2
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	4698      	mov	r8, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	3303      	adds	r3, #3
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	461a      	mov	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	4619      	mov	r1, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	785b      	ldrb	r3, [r3, #1]
 800da54:	4618      	mov	r0, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	789b      	ldrb	r3, [r3, #2]
 800da5a:	461c      	mov	r4, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	78db      	ldrb	r3, [r3, #3]
 800da60:	461d      	mov	r5, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	791b      	ldrb	r3, [r3, #4]
 800da66:	461e      	mov	r6, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	795b      	ldrb	r3, [r3, #5]
 800da6c:	9306      	str	r3, [sp, #24]
 800da6e:	9605      	str	r6, [sp, #20]
 800da70:	9504      	str	r5, [sp, #16]
 800da72:	9403      	str	r4, [sp, #12]
 800da74:	9002      	str	r0, [sp, #8]
 800da76:	9101      	str	r1, [sp, #4]
 800da78:	9200      	str	r2, [sp, #0]
 800da7a:	4643      	mov	r3, r8
 800da7c:	4672      	mov	r2, lr
 800da7e:	4661      	mov	r1, ip
 800da80:	484e      	ldr	r0, [pc, #312]	; (800dbbc <etharp_update_arp_entry+0x1b8>)
 800da82:	f002 fb7d 	bl	8010180 <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d012      	beq.n	800dab2 <etharp_update_arp_entry+0xae>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00e      	beq.n	800dab2 <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68f9      	ldr	r1, [r7, #12]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f001 fb72 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800daa0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d105      	bne.n	800dab2 <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800daae:	2be0      	cmp	r3, #224	; 0xe0
 800dab0:	d105      	bne.n	800dabe <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 800dab2:	4843      	ldr	r0, [pc, #268]	; (800dbc0 <etharp_update_arp_entry+0x1bc>)
 800dab4:	f002 fbec 	bl	8010290 <puts>
    return ERR_ARG;
 800dab8:	f06f 030f 	mvn.w	r3, #15
 800dabc:	e072      	b.n	800dba4 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dabe:	78fb      	ldrb	r3, [r7, #3]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	4619      	mov	r1, r3
 800dac4:	68b8      	ldr	r0, [r7, #8]
 800dac6:	f7ff fddb 	bl	800d680 <etharp_find_entry>
 800daca:	4603      	mov	r3, r0
 800dacc:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dace:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	da02      	bge.n	800dadc <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 800dad6:	8afb      	ldrh	r3, [r7, #22]
 800dad8:	b25b      	sxtb	r3, r3
 800dada:	e063      	b.n	800dba4 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dadc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dae0:	4938      	ldr	r1, [pc, #224]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800dae2:	4613      	mov	r3, r2
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	4413      	add	r3, r2
 800dae8:	00db      	lsls	r3, r3, #3
 800daea:	440b      	add	r3, r1
 800daec:	3314      	adds	r3, #20
 800daee:	2202      	movs	r2, #2
 800daf0:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800daf2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800daf6:	4933      	ldr	r1, [pc, #204]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800daf8:	4613      	mov	r3, r2
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	4413      	add	r3, r2
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	440b      	add	r3, r1
 800db02:	3308      	adds	r3, #8
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 800db08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db0c:	4619      	mov	r1, r3
 800db0e:	482e      	ldr	r0, [pc, #184]	; (800dbc8 <etharp_update_arp_entry+0x1c4>)
 800db10:	f002 fb36 	bl	8010180 <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800db14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db18:	4613      	mov	r3, r2
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	4413      	add	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	3308      	adds	r3, #8
 800db22:	4a28      	ldr	r2, [pc, #160]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800db24:	4413      	add	r3, r2
 800db26:	3304      	adds	r3, #4
 800db28:	2206      	movs	r2, #6
 800db2a:	6879      	ldr	r1, [r7, #4]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f002 fb14 	bl	801015a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800db32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db36:	4923      	ldr	r1, [pc, #140]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800db38:	4613      	mov	r3, r2
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	4413      	add	r3, r2
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	440b      	add	r3, r1
 800db42:	3312      	adds	r3, #18
 800db44:	2200      	movs	r2, #0
 800db46:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800db48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db4c:	491d      	ldr	r1, [pc, #116]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800db4e:	4613      	mov	r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	4413      	add	r3, r2
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	440b      	add	r3, r1
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d021      	beq.n	800dba2 <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 800db5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db62:	4918      	ldr	r1, [pc, #96]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800db64:	4613      	mov	r3, r2
 800db66:	005b      	lsls	r3, r3, #1
 800db68:	4413      	add	r3, r2
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	440b      	add	r3, r1
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800db72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db76:	4913      	ldr	r1, [pc, #76]	; (800dbc4 <etharp_update_arp_entry+0x1c0>)
 800db78:	4613      	mov	r3, r2
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800db8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6939      	ldr	r1, [r7, #16]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f002 fa5a 	bl	8010050 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800db9c:	6938      	ldr	r0, [r7, #16]
 800db9e:	f7f7 f96d 	bl	8004e7c <pbuf_free>
  }
  return ERR_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbae:	bf00      	nop
 800dbb0:	08014904 	.word	0x08014904
 800dbb4:	08014ba4 	.word	0x08014ba4
 800dbb8:	0801497c 	.word	0x0801497c
 800dbbc:	08014bc8 	.word	0x08014bc8
 800dbc0:	08014c18 	.word	0x08014c18
 800dbc4:	20000120 	.word	0x20000120
 800dbc8:	08014c64 	.word	0x08014c64

0800dbcc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e01e      	b.n	800dc18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dbda:	4913      	ldr	r1, [pc, #76]	; (800dc28 <etharp_cleanup_netif+0x5c>)
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	4413      	add	r3, r2
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3314      	adds	r3, #20
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <etharp_cleanup_netif+0x46>
 800dbf4:	490c      	ldr	r1, [pc, #48]	; (800dc28 <etharp_cleanup_netif+0x5c>)
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	4413      	add	r3, r2
 800dbfe:	00db      	lsls	r3, r3, #3
 800dc00:	440b      	add	r3, r1
 800dc02:	3308      	adds	r3, #8
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d102      	bne.n	800dc12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dc0c:	68f8      	ldr	r0, [r7, #12]
 800dc0e:	f7ff fbff 	bl	800d410 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	3301      	adds	r3, #1
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b09      	cmp	r3, #9
 800dc1c:	dddd      	ble.n	800dbda <etharp_cleanup_netif+0xe>
    }
  }
}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20000120 	.word	0x20000120

0800dc2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dc2c:	b5b0      	push	{r4, r5, r7, lr}
 800dc2e:	b08a      	sub	sp, #40	; 0x28
 800dc30:	af04      	add	r7, sp, #16
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d107      	bne.n	800dc4c <etharp_input+0x20>
 800dc3c:	4b57      	ldr	r3, [pc, #348]	; (800dd9c <etharp_input+0x170>)
 800dc3e:	f240 228a 	movw	r2, #650	; 0x28a
 800dc42:	4957      	ldr	r1, [pc, #348]	; (800dda0 <etharp_input+0x174>)
 800dc44:	4857      	ldr	r0, [pc, #348]	; (800dda4 <etharp_input+0x178>)
 800dc46:	f002 fa9b 	bl	8010180 <iprintf>
 800dc4a:	e0a4      	b.n	800dd96 <etharp_input+0x16a>

  hdr = (struct etharp_hdr *)p->payload;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc5c:	d10c      	bne.n	800dc78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc62:	2b06      	cmp	r3, #6
 800dc64:	d108      	bne.n	800dc78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d104      	bne.n	800dc78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	885b      	ldrh	r3, [r3, #2]
 800dc72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d015      	beq.n	800dca4 <etharp_input+0x78>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4619      	mov	r1, r3
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	791b      	ldrb	r3, [r3, #4]
 800dc84:	461a      	mov	r2, r3
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	885b      	ldrh	r3, [r3, #2]
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	795b      	ldrb	r3, [r3, #5]
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	4603      	mov	r3, r0
 800dc96:	4844      	ldr	r0, [pc, #272]	; (800dda8 <etharp_input+0x17c>)
 800dc98:	f002 fa72 	bl	8010180 <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7f7 f8ed 	bl	8004e7c <pbuf_free>
    return;
 800dca2:	e078      	b.n	800dd96 <etharp_input+0x16a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	330e      	adds	r3, #14
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3318      	adds	r3, #24
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d102      	bne.n	800dcc4 <etharp_input+0x98>
    for_us = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]
 800dcc2:	e009      	b.n	800dcd8 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	bf0c      	ite	eq
 800dcd0:	2301      	moveq	r3, #1
 800dcd2:	2300      	movne	r3, #0
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	f103 0208 	add.w	r2, r3, #8
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <etharp_input+0xbc>
 800dce4:	2301      	movs	r3, #1
 800dce6:	e000      	b.n	800dcea <etharp_input+0xbe>
 800dce8:	2302      	movs	r3, #2
 800dcea:	f107 010c 	add.w	r1, r7, #12
 800dcee:	6838      	ldr	r0, [r7, #0]
 800dcf0:	f7ff fe88 	bl	800da04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	88db      	ldrh	r3, [r3, #6]
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcfe:	d003      	beq.n	800dd08 <etharp_input+0xdc>
 800dd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd04:	d02e      	beq.n	800dd64 <etharp_input+0x138>
 800dd06:	e037      	b.n	800dd78 <etharp_input+0x14c>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 800dd08:	4828      	ldr	r0, [pc, #160]	; (800ddac <etharp_input+0x180>)
 800dd0a:	f002 fac1 	bl	8010290 <puts>
      /* ARP request for our address? */
      if (for_us) {
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01a      	beq.n	800dd4a <etharp_input+0x11e>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dd2e:	2102      	movs	r1, #2
 800dd30:	9103      	str	r1, [sp, #12]
 800dd32:	f107 010c 	add.w	r1, r7, #12
 800dd36:	9102      	str	r1, [sp, #8]
 800dd38:	9201      	str	r2, [sp, #4]
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	4622      	mov	r2, r4
 800dd40:	4601      	mov	r1, r0
 800dd42:	6838      	ldr	r0, [r7, #0]
 800dd44:	f000 fb3e 	bl	800e3c4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 800dd48:	e022      	b.n	800dd90 <etharp_input+0x164>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d103      	bne.n	800dd5c <etharp_input+0x130>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 800dd54:	4816      	ldr	r0, [pc, #88]	; (800ddb0 <etharp_input+0x184>)
 800dd56:	f002 fa9b 	bl	8010290 <puts>
      break;
 800dd5a:	e019      	b.n	800dd90 <etharp_input+0x164>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 800dd5c:	4815      	ldr	r0, [pc, #84]	; (800ddb4 <etharp_input+0x188>)
 800dd5e:	f002 fa97 	bl	8010290 <puts>
      break;
 800dd62:	e015      	b.n	800dd90 <etharp_input+0x164>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 800dd64:	4814      	ldr	r0, [pc, #80]	; (800ddb8 <etharp_input+0x18c>)
 800dd66:	f002 fa93 	bl	8010290 <puts>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 800dd6a:	f107 030c 	add.w	r3, r7, #12
 800dd6e:	4619      	mov	r1, r3
 800dd70:	6838      	ldr	r0, [r7, #0]
 800dd72:	f7fd ff61 	bl	800bc38 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 800dd76:	e00b      	b.n	800dd90 <etharp_input+0x164>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	88db      	ldrh	r3, [r3, #6]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f5 fd07 	bl	8003792 <lwip_htons>
 800dd84:	4603      	mov	r3, r0
 800dd86:	4619      	mov	r1, r3
 800dd88:	480c      	ldr	r0, [pc, #48]	; (800ddbc <etharp_input+0x190>)
 800dd8a:	f002 f9f9 	bl	8010180 <iprintf>
      ETHARP_STATS_INC(etharp.err);
      break;
 800dd8e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7f7 f873 	bl	8004e7c <pbuf_free>
}
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd9c:	08014904 	.word	0x08014904
 800dda0:	08014ccc 	.word	0x08014ccc
 800dda4:	0801497c 	.word	0x0801497c
 800dda8:	08014cec 	.word	0x08014cec
 800ddac:	08014d54 	.word	0x08014d54
 800ddb0:	08014d78 	.word	0x08014d78
 800ddb4:	08014db0 	.word	0x08014db0
 800ddb8:	08014ddc 	.word	0x08014ddc
 800ddbc:	08014e00 	.word	0x08014e00

0800ddc0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b086      	sub	sp, #24
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	4613      	mov	r3, r2
 800ddcc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ddce:	79fa      	ldrb	r2, [r7, #7]
 800ddd0:	4944      	ldr	r1, [pc, #272]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	4413      	add	r3, r2
 800ddd8:	00db      	lsls	r3, r3, #3
 800ddda:	440b      	add	r3, r1
 800dddc:	3314      	adds	r3, #20
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d806      	bhi.n	800ddf2 <etharp_output_to_arp_index+0x32>
 800dde4:	4b40      	ldr	r3, [pc, #256]	; (800dee8 <etharp_output_to_arp_index+0x128>)
 800dde6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800ddea:	4940      	ldr	r1, [pc, #256]	; (800deec <etharp_output_to_arp_index+0x12c>)
 800ddec:	4840      	ldr	r0, [pc, #256]	; (800def0 <etharp_output_to_arp_index+0x130>)
 800ddee:	f002 f9c7 	bl	8010180 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ddf2:	79fa      	ldrb	r2, [r7, #7]
 800ddf4:	493b      	ldr	r1, [pc, #236]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	440b      	add	r3, r1
 800de00:	3314      	adds	r3, #20
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d153      	bne.n	800deb0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800de08:	79fa      	ldrb	r2, [r7, #7]
 800de0a:	4936      	ldr	r1, [pc, #216]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de0c:	4613      	mov	r3, r2
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	4413      	add	r3, r2
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	440b      	add	r3, r1
 800de16:	3312      	adds	r3, #18
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800de1e:	d919      	bls.n	800de54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800de20:	79fa      	ldrb	r2, [r7, #7]
 800de22:	4613      	mov	r3, r2
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	4413      	add	r3, r2
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	4a2e      	ldr	r2, [pc, #184]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de2c:	4413      	add	r3, r2
 800de2e:	3304      	adds	r3, #4
 800de30:	4619      	mov	r1, r3
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f000 fb7e 	bl	800e534 <etharp_request>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d138      	bne.n	800deb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de3e:	79fa      	ldrb	r2, [r7, #7]
 800de40:	4928      	ldr	r1, [pc, #160]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	440b      	add	r3, r1
 800de4c:	3314      	adds	r3, #20
 800de4e:	2203      	movs	r2, #3
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	e02d      	b.n	800deb0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800de54:	79fa      	ldrb	r2, [r7, #7]
 800de56:	4923      	ldr	r1, [pc, #140]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de58:	4613      	mov	r3, r2
 800de5a:	005b      	lsls	r3, r3, #1
 800de5c:	4413      	add	r3, r2
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	440b      	add	r3, r1
 800de62:	3312      	adds	r3, #18
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800de6a:	d321      	bcc.n	800deb0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800de6c:	79fa      	ldrb	r2, [r7, #7]
 800de6e:	4613      	mov	r3, r2
 800de70:	005b      	lsls	r3, r3, #1
 800de72:	4413      	add	r3, r2
 800de74:	00db      	lsls	r3, r3, #3
 800de76:	4a1b      	ldr	r2, [pc, #108]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de78:	4413      	add	r3, r2
 800de7a:	1d19      	adds	r1, r3, #4
 800de7c:	79fa      	ldrb	r2, [r7, #7]
 800de7e:	4613      	mov	r3, r2
 800de80:	005b      	lsls	r3, r3, #1
 800de82:	4413      	add	r3, r2
 800de84:	00db      	lsls	r3, r3, #3
 800de86:	3308      	adds	r3, #8
 800de88:	4a16      	ldr	r2, [pc, #88]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800de8a:	4413      	add	r3, r2
 800de8c:	3304      	adds	r3, #4
 800de8e:	461a      	mov	r2, r3
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 fb2d 	bl	800e4f0 <etharp_request_dst>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d109      	bne.n	800deb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de9c:	79fa      	ldrb	r2, [r7, #7]
 800de9e:	4911      	ldr	r1, [pc, #68]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800dea0:	4613      	mov	r3, r2
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	4413      	add	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	440b      	add	r3, r1
 800deaa:	3314      	adds	r3, #20
 800deac:	2203      	movs	r2, #3
 800deae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800deb6:	79fa      	ldrb	r2, [r7, #7]
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	3308      	adds	r3, #8
 800dec2:	4a08      	ldr	r2, [pc, #32]	; (800dee4 <etharp_output_to_arp_index+0x124>)
 800dec4:	4413      	add	r3, r2
 800dec6:	1d1a      	adds	r2, r3, #4
 800dec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	4613      	mov	r3, r2
 800ded0:	460a      	mov	r2, r1
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f002 f8bb 	bl	8010050 <ethernet_output>
 800deda:	4603      	mov	r3, r0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	20000120 	.word	0x20000120
 800dee8:	08014904 	.word	0x08014904
 800deec:	08014e2c 	.word	0x08014e2c
 800def0:	0801497c 	.word	0x0801497c

0800def4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08a      	sub	sp, #40	; 0x28
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <etharp_output+0x24>
 800df0a:	4b73      	ldr	r3, [pc, #460]	; (800e0d8 <etharp_output+0x1e4>)
 800df0c:	f240 321e 	movw	r2, #798	; 0x31e
 800df10:	4972      	ldr	r1, [pc, #456]	; (800e0dc <etharp_output+0x1e8>)
 800df12:	4873      	ldr	r0, [pc, #460]	; (800e0e0 <etharp_output+0x1ec>)
 800df14:	f002 f934 	bl	8010180 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <etharp_output+0x38>
 800df1e:	4b6e      	ldr	r3, [pc, #440]	; (800e0d8 <etharp_output+0x1e4>)
 800df20:	f240 321f 	movw	r2, #799	; 0x31f
 800df24:	496f      	ldr	r1, [pc, #444]	; (800e0e4 <etharp_output+0x1f0>)
 800df26:	486e      	ldr	r0, [pc, #440]	; (800e0e0 <etharp_output+0x1ec>)
 800df28:	f002 f92a 	bl	8010180 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d106      	bne.n	800df40 <etharp_output+0x4c>
 800df32:	4b69      	ldr	r3, [pc, #420]	; (800e0d8 <etharp_output+0x1e4>)
 800df34:	f44f 7248 	mov.w	r2, #800	; 0x320
 800df38:	496b      	ldr	r1, [pc, #428]	; (800e0e8 <etharp_output+0x1f4>)
 800df3a:	4869      	ldr	r0, [pc, #420]	; (800e0e0 <etharp_output+0x1ec>)
 800df3c:	f002 f920 	bl	8010180 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68f9      	ldr	r1, [r7, #12]
 800df46:	4618      	mov	r0, r3
 800df48:	f001 f91c 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800df52:	4b66      	ldr	r3, [pc, #408]	; (800e0ec <etharp_output+0x1f8>)
 800df54:	61fb      	str	r3, [r7, #28]
 800df56:	e0af      	b.n	800e0b8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df60:	2be0      	cmp	r3, #224	; 0xe0
 800df62:	d118      	bne.n	800df96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800df64:	2301      	movs	r3, #1
 800df66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800df68:	2300      	movs	r3, #0
 800df6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800df6c:	235e      	movs	r3, #94	; 0x5e
 800df6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	3301      	adds	r3, #1
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3302      	adds	r3, #2
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	3303      	adds	r3, #3
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800df8e:	f107 0310 	add.w	r3, r7, #16
 800df92:	61fb      	str	r3, [r7, #28]
 800df94:	e090      	b.n	800e0b8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3304      	adds	r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	405a      	eors	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d012      	beq.n	800dfd4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dfb4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00b      	beq.n	800dfd4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	330c      	adds	r3, #12
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d003      	beq.n	800dfce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	330c      	adds	r3, #12
 800dfca:	61bb      	str	r3, [r7, #24]
 800dfcc:	e002      	b.n	800dfd4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dfce:	f06f 0303 	mvn.w	r3, #3
 800dfd2:	e07d      	b.n	800e0d0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dfd4:	4b46      	ldr	r3, [pc, #280]	; (800e0f0 <etharp_output+0x1fc>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	4a46      	ldr	r2, [pc, #280]	; (800e0f4 <etharp_output+0x200>)
 800dfdc:	460b      	mov	r3, r1
 800dfde:	005b      	lsls	r3, r3, #1
 800dfe0:	440b      	add	r3, r1
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	4413      	add	r3, r2
 800dfe6:	3314      	adds	r3, #20
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d925      	bls.n	800e03a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dfee:	4b40      	ldr	r3, [pc, #256]	; (800e0f0 <etharp_output+0x1fc>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	4619      	mov	r1, r3
 800dff4:	4a3f      	ldr	r2, [pc, #252]	; (800e0f4 <etharp_output+0x200>)
 800dff6:	460b      	mov	r3, r1
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	440b      	add	r3, r1
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	4413      	add	r3, r2
 800e000:	3308      	adds	r3, #8
 800e002:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	429a      	cmp	r2, r3
 800e008:	d117      	bne.n	800e03a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	4b38      	ldr	r3, [pc, #224]	; (800e0f0 <etharp_output+0x1fc>)
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	4618      	mov	r0, r3
 800e014:	4937      	ldr	r1, [pc, #220]	; (800e0f4 <etharp_output+0x200>)
 800e016:	4603      	mov	r3, r0
 800e018:	005b      	lsls	r3, r3, #1
 800e01a:	4403      	add	r3, r0
 800e01c:	00db      	lsls	r3, r3, #3
 800e01e:	440b      	add	r3, r1
 800e020:	3304      	adds	r3, #4
 800e022:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e024:	429a      	cmp	r2, r3
 800e026:	d108      	bne.n	800e03a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e028:	4b31      	ldr	r3, [pc, #196]	; (800e0f0 <etharp_output+0x1fc>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	461a      	mov	r2, r3
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff fec5 	bl	800ddc0 <etharp_output_to_arp_index>
 800e036:	4603      	mov	r3, r0
 800e038:	e04a      	b.n	800e0d0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]
 800e03e:	e031      	b.n	800e0a4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e040:	7dfa      	ldrb	r2, [r7, #23]
 800e042:	492c      	ldr	r1, [pc, #176]	; (800e0f4 <etharp_output+0x200>)
 800e044:	4613      	mov	r3, r2
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	4413      	add	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	440b      	add	r3, r1
 800e04e:	3314      	adds	r3, #20
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d923      	bls.n	800e09e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e056:	7dfa      	ldrb	r2, [r7, #23]
 800e058:	4926      	ldr	r1, [pc, #152]	; (800e0f4 <etharp_output+0x200>)
 800e05a:	4613      	mov	r3, r2
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	4413      	add	r3, r2
 800e060:	00db      	lsls	r3, r3, #3
 800e062:	440b      	add	r3, r1
 800e064:	3308      	adds	r3, #8
 800e066:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d117      	bne.n	800e09e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	6819      	ldr	r1, [r3, #0]
 800e072:	7dfa      	ldrb	r2, [r7, #23]
 800e074:	481f      	ldr	r0, [pc, #124]	; (800e0f4 <etharp_output+0x200>)
 800e076:	4613      	mov	r3, r2
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	4413      	add	r3, r2
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	4403      	add	r3, r0
 800e080:	3304      	adds	r3, #4
 800e082:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e084:	4299      	cmp	r1, r3
 800e086:	d10a      	bne.n	800e09e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e088:	4a19      	ldr	r2, [pc, #100]	; (800e0f0 <etharp_output+0x1fc>)
 800e08a:	7dfb      	ldrb	r3, [r7, #23]
 800e08c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	461a      	mov	r2, r3
 800e092:	68b9      	ldr	r1, [r7, #8]
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f7ff fe93 	bl	800ddc0 <etharp_output_to_arp_index>
 800e09a:	4603      	mov	r3, r0
 800e09c:	e018      	b.n	800e0d0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	75fb      	strb	r3, [r7, #23]
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	2b09      	cmp	r3, #9
 800e0a8:	d9ca      	bls.n	800e040 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	69b9      	ldr	r1, [r7, #24]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f000 f822 	bl	800e0f8 <etharp_query>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	e00b      	b.n	800e0d0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e0be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f001 ffc1 	bl	8010050 <ethernet_output>
 800e0ce:	4603      	mov	r3, r0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	08014904 	.word	0x08014904
 800e0dc:	08014ccc 	.word	0x08014ccc
 800e0e0:	0801497c 	.word	0x0801497c
 800e0e4:	08014e5c 	.word	0x08014e5c
 800e0e8:	08014cbc 	.word	0x08014cbc
 800e0ec:	08015d20 	.word	0x08015d20
 800e0f0:	20000210 	.word	0x20000210
 800e0f4:	20000120 	.word	0x20000120

0800e0f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af02      	add	r7, sp, #8
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3326      	adds	r3, #38	; 0x26
 800e108:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e10a:	23ff      	movs	r3, #255	; 0xff
 800e10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e110:	2300      	movs	r3, #0
 800e112:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68f9      	ldr	r1, [r7, #12]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f001 f832 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10c      	bne.n	800e140 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e12e:	2be0      	cmp	r3, #224	; 0xe0
 800e130:	d006      	beq.n	800e140 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d105      	bne.n	800e14c <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 800e140:	4892      	ldr	r0, [pc, #584]	; (800e38c <etharp_query+0x294>)
 800e142:	f002 f8a5 	bl	8010290 <puts>
    return ERR_ARG;
 800e146:	f06f 030f 	mvn.w	r3, #15
 800e14a:	e11b      	b.n	800e384 <etharp_query+0x28c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	2101      	movs	r1, #1
 800e150:	68b8      	ldr	r0, [r7, #8]
 800e152:	f7ff fa95 	bl	800d680 <etharp_find_entry>
 800e156:	4603      	mov	r3, r0
 800e158:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e15a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	da0b      	bge.n	800e17a <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 800e162:	488b      	ldr	r0, [pc, #556]	; (800e390 <etharp_query+0x298>)
 800e164:	f002 f894 	bl	8010290 <puts>
    if (q) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <etharp_query+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 800e16e:	4889      	ldr	r0, [pc, #548]	; (800e394 <etharp_query+0x29c>)
 800e170:	f002 f88e 	bl	8010290 <puts>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e174:	8a7b      	ldrh	r3, [r7, #18]
 800e176:	b25b      	sxtb	r3, r3
 800e178:	e104      	b.n	800e384 <etharp_query+0x28c>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e17a:	8a7b      	ldrh	r3, [r7, #18]
 800e17c:	2b7e      	cmp	r3, #126	; 0x7e
 800e17e:	d906      	bls.n	800e18e <etharp_query+0x96>
 800e180:	4b85      	ldr	r3, [pc, #532]	; (800e398 <etharp_query+0x2a0>)
 800e182:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e186:	4985      	ldr	r1, [pc, #532]	; (800e39c <etharp_query+0x2a4>)
 800e188:	4885      	ldr	r0, [pc, #532]	; (800e3a0 <etharp_query+0x2a8>)
 800e18a:	f001 fff9 	bl	8010180 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e18e:	8a7b      	ldrh	r3, [r7, #18]
 800e190:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e192:	7c7a      	ldrb	r2, [r7, #17]
 800e194:	4983      	ldr	r1, [pc, #524]	; (800e3a4 <etharp_query+0x2ac>)
 800e196:	4613      	mov	r3, r2
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	4413      	add	r3, r2
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	440b      	add	r3, r1
 800e1a0:	3314      	adds	r3, #20
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d115      	bne.n	800e1d4 <etharp_query+0xdc>
    is_new_entry = 1;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e1ac:	7c7a      	ldrb	r2, [r7, #17]
 800e1ae:	497d      	ldr	r1, [pc, #500]	; (800e3a4 <etharp_query+0x2ac>)
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	4413      	add	r3, r2
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	440b      	add	r3, r1
 800e1ba:	3314      	adds	r3, #20
 800e1bc:	2201      	movs	r2, #1
 800e1be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e1c0:	7c7a      	ldrb	r2, [r7, #17]
 800e1c2:	4978      	ldr	r1, [pc, #480]	; (800e3a4 <etharp_query+0x2ac>)
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	4413      	add	r3, r2
 800e1ca:	00db      	lsls	r3, r3, #3
 800e1cc:	440b      	add	r3, r1
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e1d4:	7c7a      	ldrb	r2, [r7, #17]
 800e1d6:	4973      	ldr	r1, [pc, #460]	; (800e3a4 <etharp_query+0x2ac>)
 800e1d8:	4613      	mov	r3, r2
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	4413      	add	r3, r2
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	440b      	add	r3, r1
 800e1e2:	3314      	adds	r3, #20
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d011      	beq.n	800e20e <etharp_query+0x116>
 800e1ea:	7c7a      	ldrb	r2, [r7, #17]
 800e1ec:	496d      	ldr	r1, [pc, #436]	; (800e3a4 <etharp_query+0x2ac>)
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	005b      	lsls	r3, r3, #1
 800e1f2:	4413      	add	r3, r2
 800e1f4:	00db      	lsls	r3, r3, #3
 800e1f6:	440b      	add	r3, r1
 800e1f8:	3314      	adds	r3, #20
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d806      	bhi.n	800e20e <etharp_query+0x116>
 800e200:	4b65      	ldr	r3, [pc, #404]	; (800e398 <etharp_query+0x2a0>)
 800e202:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e206:	4968      	ldr	r1, [pc, #416]	; (800e3a8 <etharp_query+0x2b0>)
 800e208:	4865      	ldr	r0, [pc, #404]	; (800e3a0 <etharp_query+0x2a8>)
 800e20a:	f001 ffb9 	bl	8010180 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <etharp_query+0x122>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10c      	bne.n	800e234 <etharp_query+0x13c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e21a:	68b9      	ldr	r1, [r7, #8]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 f989 	bl	800e534 <etharp_request>
 800e222:	4603      	mov	r3, r0
 800e224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d102      	bne.n	800e234 <etharp_query+0x13c>
      return result;
 800e22e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e232:	e0a7      	b.n	800e384 <etharp_query+0x28c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <etharp_query+0x150>
 800e23a:	4b57      	ldr	r3, [pc, #348]	; (800e398 <etharp_query+0x2a0>)
 800e23c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e240:	495a      	ldr	r1, [pc, #360]	; (800e3ac <etharp_query+0x2b4>)
 800e242:	4857      	ldr	r0, [pc, #348]	; (800e3a0 <etharp_query+0x2a8>)
 800e244:	f001 ff9c 	bl	8010180 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e248:	7c7a      	ldrb	r2, [r7, #17]
 800e24a:	4956      	ldr	r1, [pc, #344]	; (800e3a4 <etharp_query+0x2ac>)
 800e24c:	4613      	mov	r3, r2
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	4413      	add	r3, r2
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	440b      	add	r3, r1
 800e256:	3314      	adds	r3, #20
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d918      	bls.n	800e290 <etharp_query+0x198>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e25e:	4a54      	ldr	r2, [pc, #336]	; (800e3b0 <etharp_query+0x2b8>)
 800e260:	7c7b      	ldrb	r3, [r7, #17]
 800e262:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e264:	7c7a      	ldrb	r2, [r7, #17]
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	3308      	adds	r3, #8
 800e270:	4a4c      	ldr	r2, [pc, #304]	; (800e3a4 <etharp_query+0x2ac>)
 800e272:	4413      	add	r3, r2
 800e274:	1d1a      	adds	r2, r3, #4
 800e276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	4613      	mov	r3, r2
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	6879      	ldr	r1, [r7, #4]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f001 fee4 	bl	8010050 <ethernet_output>
 800e288:	4603      	mov	r3, r0
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e28e:	e077      	b.n	800e380 <etharp_query+0x288>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e290:	7c7a      	ldrb	r2, [r7, #17]
 800e292:	4944      	ldr	r1, [pc, #272]	; (800e3a4 <etharp_query+0x2ac>)
 800e294:	4613      	mov	r3, r2
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	4413      	add	r3, r2
 800e29a:	00db      	lsls	r3, r3, #3
 800e29c:	440b      	add	r3, r1
 800e29e:	3314      	adds	r3, #20
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d16c      	bne.n	800e380 <etharp_query+0x288>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e2ae:	e01c      	b.n	800e2ea <etharp_query+0x1f2>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	895a      	ldrh	r2, [r3, #10]
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	891b      	ldrh	r3, [r3, #8]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d10a      	bne.n	800e2d2 <etharp_query+0x1da>
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d006      	beq.n	800e2d2 <etharp_query+0x1da>
 800e2c4:	4b34      	ldr	r3, [pc, #208]	; (800e398 <etharp_query+0x2a0>)
 800e2c6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e2ca:	493a      	ldr	r1, [pc, #232]	; (800e3b4 <etharp_query+0x2bc>)
 800e2cc:	4834      	ldr	r0, [pc, #208]	; (800e3a0 <etharp_query+0x2a8>)
 800e2ce:	f001 ff57 	bl	8010180 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	7b1b      	ldrb	r3, [r3, #12]
 800e2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <etharp_query+0x1ec>
        copy_needed = 1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	61bb      	str	r3, [r7, #24]
        break;
 800e2e2:	e005      	b.n	800e2f0 <etharp_query+0x1f8>
      }
      p = p->next;
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1df      	bne.n	800e2b0 <etharp_query+0x1b8>
    }
    if (copy_needed) {
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d007      	beq.n	800e306 <etharp_query+0x20e>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e2fc:	200e      	movs	r0, #14
 800e2fe:	f7f7 f829 	bl	8005354 <pbuf_clone>
 800e302:	61f8      	str	r0, [r7, #28]
 800e304:	e004      	b.n	800e310 <etharp_query+0x218>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e30a:	69f8      	ldr	r0, [r7, #28]
 800e30c:	f7f6 fe56 	bl	8004fbc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d02d      	beq.n	800e372 <etharp_query+0x27a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e316:	7c7a      	ldrb	r2, [r7, #17]
 800e318:	4922      	ldr	r1, [pc, #136]	; (800e3a4 <etharp_query+0x2ac>)
 800e31a:	4613      	mov	r3, r2
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	4413      	add	r3, r2
 800e320:	00db      	lsls	r3, r3, #3
 800e322:	440b      	add	r3, r1
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d010      	beq.n	800e34c <etharp_query+0x254>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800e32a:	7c7b      	ldrb	r3, [r7, #17]
 800e32c:	461a      	mov	r2, r3
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	4821      	ldr	r0, [pc, #132]	; (800e3b8 <etharp_query+0x2c0>)
 800e332:	f001 ff25 	bl	8010180 <iprintf>
        pbuf_free(arp_table[i].q);
 800e336:	7c7a      	ldrb	r2, [r7, #17]
 800e338:	491a      	ldr	r1, [pc, #104]	; (800e3a4 <etharp_query+0x2ac>)
 800e33a:	4613      	mov	r3, r2
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	4413      	add	r3, r2
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	440b      	add	r3, r1
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f7f6 fd98 	bl	8004e7c <pbuf_free>
      }
      arp_table[i].q = p;
 800e34c:	7c7a      	ldrb	r2, [r7, #17]
 800e34e:	4915      	ldr	r1, [pc, #84]	; (800e3a4 <etharp_query+0x2ac>)
 800e350:	4613      	mov	r3, r2
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	4413      	add	r3, r2
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	440b      	add	r3, r1
 800e35a:	69fa      	ldr	r2, [r7, #28]
 800e35c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800e364:	7c7b      	ldrb	r3, [r7, #17]
 800e366:	461a      	mov	r2, r3
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4814      	ldr	r0, [pc, #80]	; (800e3bc <etharp_query+0x2c4>)
 800e36c:	f001 ff08 	bl	8010180 <iprintf>
 800e370:	e006      	b.n	800e380 <etharp_query+0x288>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 800e372:	6879      	ldr	r1, [r7, #4]
 800e374:	4812      	ldr	r0, [pc, #72]	; (800e3c0 <etharp_query+0x2c8>)
 800e376:	f001 ff03 	bl	8010180 <iprintf>
      result = ERR_MEM;
 800e37a:	23ff      	movs	r3, #255	; 0xff
 800e37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e384:	4618      	mov	r0, r3
 800e386:	3728      	adds	r7, #40	; 0x28
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	08014e68 	.word	0x08014e68
 800e390:	08014ea8 	.word	0x08014ea8
 800e394:	08014ed4 	.word	0x08014ed4
 800e398:	08014904 	.word	0x08014904
 800e39c:	08014ef4 	.word	0x08014ef4
 800e3a0:	0801497c 	.word	0x0801497c
 800e3a4:	20000120 	.word	0x20000120
 800e3a8:	08014f04 	.word	0x08014f04
 800e3ac:	08014e5c 	.word	0x08014e5c
 800e3b0:	20000210 	.word	0x20000210
 800e3b4:	08014f2c 	.word	0x08014f2c
 800e3b8:	08014f48 	.word	0x08014f48
 800e3bc:	08014f90 	.word	0x08014f90
 800e3c0:	08014fc4 	.word	0x08014fc4

0800e3c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08a      	sub	sp, #40	; 0x28
 800e3c8:	af02      	add	r7, sp, #8
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d106      	bne.n	800e3ea <etharp_raw+0x26>
 800e3dc:	4b3d      	ldr	r3, [pc, #244]	; (800e4d4 <etharp_raw+0x110>)
 800e3de:	f240 4257 	movw	r2, #1111	; 0x457
 800e3e2:	493d      	ldr	r1, [pc, #244]	; (800e4d8 <etharp_raw+0x114>)
 800e3e4:	483d      	ldr	r0, [pc, #244]	; (800e4dc <etharp_raw+0x118>)
 800e3e6:	f001 fecb 	bl	8010180 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e3ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3ee:	211c      	movs	r1, #28
 800e3f0:	200e      	movs	r0, #14
 800e3f2:	f7f6 fa63 	bl	80048bc <pbuf_alloc>
 800e3f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d105      	bne.n	800e40a <etharp_raw+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800e3fe:	4838      	ldr	r0, [pc, #224]	; (800e4e0 <etharp_raw+0x11c>)
 800e400:	f001 ff46 	bl	8010290 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e404:	f04f 33ff 	mov.w	r3, #4294967295
 800e408:	e060      	b.n	800e4cc <etharp_raw+0x108>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	895b      	ldrh	r3, [r3, #10]
 800e40e:	2b1b      	cmp	r3, #27
 800e410:	d806      	bhi.n	800e420 <etharp_raw+0x5c>
 800e412:	4b30      	ldr	r3, [pc, #192]	; (800e4d4 <etharp_raw+0x110>)
 800e414:	f240 4263 	movw	r2, #1123	; 0x463
 800e418:	4932      	ldr	r1, [pc, #200]	; (800e4e4 <etharp_raw+0x120>)
 800e41a:	4830      	ldr	r0, [pc, #192]	; (800e4dc <etharp_raw+0x118>)
 800e41c:	f001 feb0 	bl	8010180 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 800e426:	4830      	ldr	r0, [pc, #192]	; (800e4e8 <etharp_raw+0x124>)
 800e428:	f001 ff32 	bl	8010290 <puts>
  hdr->opcode = lwip_htons(opcode);
 800e42c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f5 f9af 	bl	8003792 <lwip_htons>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e442:	2b06      	cmp	r3, #6
 800e444:	d006      	beq.n	800e454 <etharp_raw+0x90>
 800e446:	4b23      	ldr	r3, [pc, #140]	; (800e4d4 <etharp_raw+0x110>)
 800e448:	f240 426a 	movw	r2, #1130	; 0x46a
 800e44c:	4927      	ldr	r1, [pc, #156]	; (800e4ec <etharp_raw+0x128>)
 800e44e:	4823      	ldr	r0, [pc, #140]	; (800e4dc <etharp_raw+0x118>)
 800e450:	f001 fe96 	bl	8010180 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	3308      	adds	r3, #8
 800e458:	2206      	movs	r2, #6
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f001 fe7c 	bl	801015a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	3312      	adds	r3, #18
 800e466:	2206      	movs	r2, #6
 800e468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e46a:	4618      	mov	r0, r3
 800e46c:	f001 fe75 	bl	801015a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	330e      	adds	r3, #14
 800e474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e476:	6812      	ldr	r2, [r2, #0]
 800e478:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	3318      	adds	r3, #24
 800e47e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e480:	6812      	ldr	r2, [r2, #0]
 800e482:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	2200      	movs	r2, #0
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f042 0201 	orr.w	r2, r2, #1
 800e490:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2200      	movs	r2, #0
 800e496:	f042 0208 	orr.w	r2, r2, #8
 800e49a:	709a      	strb	r2, [r3, #2]
 800e49c:	2200      	movs	r2, #0
 800e49e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2206      	movs	r2, #6
 800e4a4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	2204      	movs	r2, #4
 800e4aa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e4ac:	f640 0306 	movw	r3, #2054	; 0x806
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	69b9      	ldr	r1, [r7, #24]
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f001 fdc9 	bl	8010050 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e4be:	69b8      	ldr	r0, [r7, #24]
 800e4c0:	f7f6 fcdc 	bl	8004e7c <pbuf_free>
  p = NULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e4c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3720      	adds	r7, #32
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	08014904 	.word	0x08014904
 800e4d8:	08014ccc 	.word	0x08014ccc
 800e4dc:	0801497c 	.word	0x0801497c
 800e4e0:	08015010 	.word	0x08015010
 800e4e4:	08015048 	.word	0x08015048
 800e4e8:	0801507c 	.word	0x0801507c
 800e4ec:	080150a0 	.word	0x080150a0

0800e4f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b088      	sub	sp, #32
 800e4f4:	af04      	add	r7, sp, #16
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e50c:	2201      	movs	r2, #1
 800e50e:	9203      	str	r2, [sp, #12]
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	9202      	str	r2, [sp, #8]
 800e514:	4a06      	ldr	r2, [pc, #24]	; (800e530 <etharp_request_dst+0x40>)
 800e516:	9201      	str	r2, [sp, #4]
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	4603      	mov	r3, r0
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f7ff ff50 	bl	800e3c4 <etharp_raw>
 800e524:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08015d28 	.word	0x08015d28

0800e534 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 800e53e:	4806      	ldr	r0, [pc, #24]	; (800e558 <etharp_request+0x24>)
 800e540:	f001 fea6 	bl	8010290 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e544:	4a05      	ldr	r2, [pc, #20]	; (800e55c <etharp_request+0x28>)
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff ffd1 	bl	800e4f0 <etharp_request_dst>
 800e54e:	4603      	mov	r3, r0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	080150e4 	.word	0x080150e4
 800e55c:	08015d20 	.word	0x08015d20

0800e560 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08e      	sub	sp, #56	; 0x38
 800e564:	af04      	add	r7, sp, #16
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e56a:	4b7c      	ldr	r3, [pc, #496]	; (800e75c <icmp_input+0x1fc>)
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	f003 030f 	and.w	r3, r3, #15
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e582:	2b13      	cmp	r3, #19
 800e584:	f240 80d2 	bls.w	800e72c <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	895b      	ldrh	r3, [r3, #10]
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	f240 80cf 	bls.w	800e730 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	785b      	ldrb	r3, [r3, #1]
 800e5a2:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e5a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 80b7 	beq.w	800e71e <icmp_input+0x1be>
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	f040 80b7 	bne.w	800e724 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e5b6:	4b6a      	ldr	r3, [pc, #424]	; (800e760 <icmp_input+0x200>)
 800e5b8:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5ba:	4b68      	ldr	r3, [pc, #416]	; (800e75c <icmp_input+0x1fc>)
 800e5bc:	695b      	ldr	r3, [r3, #20]
 800e5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5c2:	2be0      	cmp	r3, #224	; 0xe0
 800e5c4:	f000 80bb 	beq.w	800e73e <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e5c8:	4b64      	ldr	r3, [pc, #400]	; (800e75c <icmp_input+0x1fc>)
 800e5ca:	695a      	ldr	r2, [r3, #20]
 800e5cc:	4b63      	ldr	r3, [pc, #396]	; (800e75c <icmp_input+0x1fc>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	f000 fdd6 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f040 80b1 	bne.w	800e742 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	891b      	ldrh	r3, [r3, #8]
 800e5e4:	2b07      	cmp	r3, #7
 800e5e6:	f240 80a5 	bls.w	800e734 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e5ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5ec:	330e      	adds	r3, #14
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7f6 fbad 	bl	8004d50 <pbuf_add_header>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d04b      	beq.n	800e694 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	891a      	ldrh	r2, [r3, #8]
 800e600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e602:	4413      	add	r3, r2
 800e604:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	891b      	ldrh	r3, [r3, #8]
 800e60a:	8b7a      	ldrh	r2, [r7, #26]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	f0c0 809a 	bcc.w	800e746 <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e612:	8b7b      	ldrh	r3, [r7, #26]
 800e614:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e618:	4619      	mov	r1, r3
 800e61a:	200e      	movs	r0, #14
 800e61c:	f7f6 f94e 	bl	80048bc <pbuf_alloc>
 800e620:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 8090 	beq.w	800e74a <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	895b      	ldrh	r3, [r3, #10]
 800e62e:	461a      	mov	r2, r3
 800e630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e632:	3308      	adds	r3, #8
 800e634:	429a      	cmp	r2, r3
 800e636:	d203      	bcs.n	800e640 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e638:	6978      	ldr	r0, [r7, #20]
 800e63a:	f7f6 fc1f 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800e63e:	e085      	b.n	800e74c <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e648:	4618      	mov	r0, r3
 800e64a:	f001 fd86 	bl	801015a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e650:	4619      	mov	r1, r3
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	f7f6 fb8c 	bl	8004d70 <pbuf_remove_header>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d009      	beq.n	800e672 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e65e:	4b41      	ldr	r3, [pc, #260]	; (800e764 <icmp_input+0x204>)
 800e660:	22b6      	movs	r2, #182	; 0xb6
 800e662:	4941      	ldr	r1, [pc, #260]	; (800e768 <icmp_input+0x208>)
 800e664:	4841      	ldr	r0, [pc, #260]	; (800e76c <icmp_input+0x20c>)
 800e666:	f001 fd8b 	bl	8010180 <iprintf>
          pbuf_free(r);
 800e66a:	6978      	ldr	r0, [r7, #20]
 800e66c:	f7f6 fc06 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800e670:	e06c      	b.n	800e74c <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e672:	6879      	ldr	r1, [r7, #4]
 800e674:	6978      	ldr	r0, [r7, #20]
 800e676:	f7f6 fd29 	bl	80050cc <pbuf_copy>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e680:	6978      	ldr	r0, [r7, #20]
 800e682:	f7f6 fbfb 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800e686:	e061      	b.n	800e74c <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7f6 fbf7 	bl	8004e7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	607b      	str	r3, [r7, #4]
 800e692:	e00f      	b.n	800e6b4 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e696:	330e      	adds	r3, #14
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7f6 fb68 	bl	8004d70 <pbuf_remove_header>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e6a6:	4b2f      	ldr	r3, [pc, #188]	; (800e764 <icmp_input+0x204>)
 800e6a8:	22c7      	movs	r2, #199	; 0xc7
 800e6aa:	4931      	ldr	r1, [pc, #196]	; (800e770 <icmp_input+0x210>)
 800e6ac:	482f      	ldr	r0, [pc, #188]	; (800e76c <icmp_input+0x20c>)
 800e6ae:	f001 fd67 	bl	8010180 <iprintf>
          goto icmperr;
 800e6b2:	e04b      	b.n	800e74c <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e6ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7f6 fb46 	bl	8004d50 <pbuf_add_header>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d12b      	bne.n	800e722 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e6d8:	4b20      	ldr	r3, [pc, #128]	; (800e75c <icmp_input+0x1fc>)
 800e6da:	691a      	ldr	r2, [r3, #16]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	709a      	strb	r2, [r3, #2]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	22ff      	movs	r2, #255	; 0xff
 800e6f4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	729a      	strb	r2, [r3, #10]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	9302      	str	r3, [sp, #8]
 800e704:	2301      	movs	r3, #1
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	2300      	movs	r3, #0
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	23ff      	movs	r3, #255	; 0xff
 800e70e:	2200      	movs	r2, #0
 800e710:	69f9      	ldr	r1, [r7, #28]
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fb78 	bl	800ee08 <ip4_output_if>
 800e718:	4603      	mov	r3, r0
 800e71a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e71c:	e001      	b.n	800e722 <icmp_input+0x1c2>
      break;
 800e71e:	bf00      	nop
 800e720:	e000      	b.n	800e724 <icmp_input+0x1c4>
      break;
 800e722:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7f6 fba9 	bl	8004e7c <pbuf_free>
  return;
 800e72a:	e013      	b.n	800e754 <icmp_input+0x1f4>
    goto lenerr;
 800e72c:	bf00      	nop
 800e72e:	e002      	b.n	800e736 <icmp_input+0x1d6>
    goto lenerr;
 800e730:	bf00      	nop
 800e732:	e000      	b.n	800e736 <icmp_input+0x1d6>
        goto lenerr;
 800e734:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7f6 fba0 	bl	8004e7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e73c:	e00a      	b.n	800e754 <icmp_input+0x1f4>
        goto icmperr;
 800e73e:	bf00      	nop
 800e740:	e004      	b.n	800e74c <icmp_input+0x1ec>
        goto icmperr;
 800e742:	bf00      	nop
 800e744:	e002      	b.n	800e74c <icmp_input+0x1ec>
          goto icmperr;
 800e746:	bf00      	nop
 800e748:	e000      	b.n	800e74c <icmp_input+0x1ec>
          goto icmperr;
 800e74a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7f6 fb95 	bl	8004e7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e752:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e754:	3728      	adds	r7, #40	; 0x28
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	20003390 	.word	0x20003390
 800e760:	200033a4 	.word	0x200033a4
 800e764:	0801510c 	.word	0x0801510c
 800e768:	08015144 	.word	0x08015144
 800e76c:	0801517c 	.word	0x0801517c
 800e770:	080151a4 	.word	0x080151a4

0800e774 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e780:	78fb      	ldrb	r3, [r7, #3]
 800e782:	461a      	mov	r2, r3
 800e784:	2103      	movs	r1, #3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f814 	bl	800e7b4 <icmp_send_response>
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e7a0:	78fb      	ldrb	r3, [r7, #3]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	210b      	movs	r1, #11
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f804 	bl	800e7b4 <icmp_send_response>
}
 800e7ac:	bf00      	nop
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08c      	sub	sp, #48	; 0x30
 800e7b8:	af04      	add	r7, sp, #16
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e7c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7c8:	2124      	movs	r1, #36	; 0x24
 800e7ca:	2022      	movs	r0, #34	; 0x22
 800e7cc:	f7f6 f876 	bl	80048bc <pbuf_alloc>
 800e7d0:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d04c      	beq.n	800e872 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	895b      	ldrh	r3, [r3, #10]
 800e7dc:	2b23      	cmp	r3, #35	; 0x23
 800e7de:	d806      	bhi.n	800e7ee <icmp_send_response+0x3a>
 800e7e0:	4b26      	ldr	r3, [pc, #152]	; (800e87c <icmp_send_response+0xc8>)
 800e7e2:	f240 1269 	movw	r2, #361	; 0x169
 800e7e6:	4926      	ldr	r1, [pc, #152]	; (800e880 <icmp_send_response+0xcc>)
 800e7e8:	4826      	ldr	r0, [pc, #152]	; (800e884 <icmp_send_response+0xd0>)
 800e7ea:	f001 fcc9 	bl	8010180 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	78fa      	ldrb	r2, [r7, #3]
 800e7fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	78ba      	ldrb	r2, [r7, #2]
 800e804:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	2200      	movs	r2, #0
 800e80a:	711a      	strb	r2, [r3, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	2200      	movs	r2, #0
 800e814:	719a      	strb	r2, [r3, #6]
 800e816:	2200      	movs	r2, #0
 800e818:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f103 0008 	add.w	r0, r3, #8
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	221c      	movs	r2, #28
 800e828:	4619      	mov	r1, r3
 800e82a:	f001 fc96 	bl	801015a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e834:	f107 030c 	add.w	r3, r7, #12
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 f825 	bl	800e888 <ip4_route>
 800e83e:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d011      	beq.n	800e86a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	2200      	movs	r2, #0
 800e84a:	709a      	strb	r2, [r3, #2]
 800e84c:	2200      	movs	r2, #0
 800e84e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e850:	f107 020c 	add.w	r2, r7, #12
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	9302      	str	r3, [sp, #8]
 800e858:	2301      	movs	r3, #1
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	2300      	movs	r3, #0
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	23ff      	movs	r3, #255	; 0xff
 800e862:	2100      	movs	r1, #0
 800e864:	69b8      	ldr	r0, [r7, #24]
 800e866:	f000 facf 	bl	800ee08 <ip4_output_if>
  }
  pbuf_free(q);
 800e86a:	69b8      	ldr	r0, [r7, #24]
 800e86c:	f7f6 fb06 	bl	8004e7c <pbuf_free>
 800e870:	e000      	b.n	800e874 <icmp_send_response+0xc0>
    return;
 800e872:	bf00      	nop
}
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	0801510c 	.word	0x0801510c
 800e880:	080151d8 	.word	0x080151d8
 800e884:	0801517c 	.word	0x0801517c

0800e888 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af02      	add	r7, sp, #8
 800e88e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e890:	4b3b      	ldr	r3, [pc, #236]	; (800e980 <ip4_route+0xf8>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	60fb      	str	r3, [r7, #12]
 800e896:	e036      	b.n	800e906 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d02b      	beq.n	800e900 <ip4_route+0x78>
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ae:	089b      	lsrs	r3, r3, #2
 800e8b0:	f003 0301 	and.w	r3, r3, #1
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d022      	beq.n	800e900 <ip4_route+0x78>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d01d      	beq.n	800e900 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	405a      	eors	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	3308      	adds	r3, #8
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	e04b      	b.n	800e978 <ip4_route+0xf0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8e6:	f003 0302 	and.w	r3, r3, #2
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d108      	bne.n	800e900 <ip4_route+0x78>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	330c      	adds	r3, #12
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d101      	bne.n	800e900 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	e03b      	b.n	800e978 <ip4_route+0xf0>
  NETIF_FOREACH(netif) {
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	60fb      	str	r3, [r7, #12]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1c5      	bne.n	800e898 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e90c:	4b1d      	ldr	r3, [pc, #116]	; (800e984 <ip4_route+0xfc>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d01a      	beq.n	800e94a <ip4_route+0xc2>
 800e914:	4b1b      	ldr	r3, [pc, #108]	; (800e984 <ip4_route+0xfc>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e91c:	f003 0301 	and.w	r3, r3, #1
 800e920:	2b00      	cmp	r3, #0
 800e922:	d012      	beq.n	800e94a <ip4_route+0xc2>
 800e924:	4b17      	ldr	r3, [pc, #92]	; (800e984 <ip4_route+0xfc>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e92c:	f003 0304 	and.w	r3, r3, #4
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00a      	beq.n	800e94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e934:	4b13      	ldr	r3, [pc, #76]	; (800e984 <ip4_route+0xfc>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	3304      	adds	r3, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b7f      	cmp	r3, #127	; 0x7f
 800e948:	d114      	bne.n	800e974 <ip4_route+0xec>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	4619      	mov	r1, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	3301      	adds	r3, #1
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3302      	adds	r3, #2
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	4618      	mov	r0, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3303      	adds	r3, #3
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	4603      	mov	r3, r0
 800e96a:	4807      	ldr	r0, [pc, #28]	; (800e988 <ip4_route+0x100>)
 800e96c:	f001 fc08 	bl	8010180 <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e970:	2300      	movs	r3, #0
 800e972:	e001      	b.n	800e978 <ip4_route+0xf0>
  }

  return netif_default;
 800e974:	4b03      	ldr	r3, [pc, #12]	; (800e984 <ip4_route+0xfc>)
 800e976:	681b      	ldr	r3, [r3, #0]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	20006938 	.word	0x20006938
 800e984:	2000693c 	.word	0x2000693c
 800e988:	08015204 	.word	0x08015204

0800e98c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e98c:	b5b0      	push	{r4, r5, r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af02      	add	r7, sp, #8
 800e992:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 800e994:	4b28      	ldr	r3, [pc, #160]	; (800ea38 <ip4_input_accept+0xac>)
 800e996:	6958      	ldr	r0, [r3, #20]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	3304      	adds	r3, #4
 800e99c:	681c      	ldr	r4, [r3, #0]
 800e99e:	4b26      	ldr	r3, [pc, #152]	; (800ea38 <ip4_input_accept+0xac>)
 800e9a0:	695a      	ldr	r2, [r3, #20]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	ea02 0503 	and.w	r5, r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	4a1f      	ldr	r2, [pc, #124]	; (800ea38 <ip4_input_accept+0xac>)
 800e9bc:	6951      	ldr	r1, [r2, #20]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	3208      	adds	r2, #8
 800e9c2:	6812      	ldr	r2, [r2, #0]
 800e9c4:	43d2      	mvns	r2, r2
 800e9c6:	400a      	ands	r2, r1
 800e9c8:	9201      	str	r2, [sp, #4]
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	462b      	mov	r3, r5
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	4601      	mov	r1, r0
 800e9d2:	481a      	ldr	r0, [pc, #104]	; (800ea3c <ip4_input_accept+0xb0>)
 800e9d4:	f001 fbd4 	bl	8010180 <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d021      	beq.n	800ea2c <ip4_input_accept+0xa0>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d01c      	beq.n	800ea2c <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e9f2:	4b11      	ldr	r3, [pc, #68]	; (800ea38 <ip4_input_accept+0xac>)
 800e9f4:	695a      	ldr	r2, [r3, #20]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d008      	beq.n	800ea12 <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ea00:	4b0d      	ldr	r3, [pc, #52]	; (800ea38 <ip4_input_accept+0xac>)
 800ea02:	695b      	ldr	r3, [r3, #20]
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 fbbc 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800ea0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00c      	beq.n	800ea2c <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ea18:	4619      	mov	r1, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea20:	461a      	mov	r2, r3
 800ea22:	4807      	ldr	r0, [pc, #28]	; (800ea40 <ip4_input_accept+0xb4>)
 800ea24:	f001 fbac 	bl	8010180 <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e000      	b.n	800ea2e <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bdb0      	pop	{r4, r5, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20003390 	.word	0x20003390
 800ea3c:	0801522c 	.word	0x0801522c
 800ea40:	08015274 	.word	0x08015274

0800ea44 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ea44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea48:	b08a      	sub	sp, #40	; 0x28
 800ea4a:	af02      	add	r7, sp, #8
 800ea4c:	6078      	str	r0, [r7, #4]
 800ea4e:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800ea50:	2301      	movs	r3, #1
 800ea52:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	091b      	lsrs	r3, r3, #4
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b04      	cmp	r3, #4
 800ea64:	d00f      	beq.n	800ea86 <ip4_input+0x42>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	091b      	lsrs	r3, r3, #4
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	4619      	mov	r1, r3
 800ea70:	4897      	ldr	r0, [pc, #604]	; (800ecd0 <ip4_input+0x28c>)
 800ea72:	f001 fb85 	bl	8010180 <iprintf>
    ip4_debug_print(p);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fac0 	bl	800effc <ip4_debug_print>
    pbuf_free(p);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7f6 f9fd 	bl	8004e7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	e1b2      	b.n	800edec <ip4_input+0x3a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 030f 	and.w	r3, r3, #15
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f4 fe78 	bl	8003792 <lwip_htons>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	891b      	ldrh	r3, [r3, #8]
 800eaaa:	8a3a      	ldrh	r2, [r7, #16]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d204      	bcs.n	800eaba <ip4_input+0x76>
    pbuf_realloc(p, iphdr_len);
 800eab0:	8a3b      	ldrh	r3, [r7, #16]
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7f6 f85b 	bl	8004b70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	8a7a      	ldrh	r2, [r7, #18]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d807      	bhi.n	800ead4 <ip4_input+0x90>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	891b      	ldrh	r3, [r3, #8]
 800eac8:	8a3a      	ldrh	r2, [r7, #16]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d802      	bhi.n	800ead4 <ip4_input+0x90>
 800eace:	8a7b      	ldrh	r3, [r7, #18]
 800ead0:	2b13      	cmp	r3, #19
 800ead2:	d824      	bhi.n	800eb1e <ip4_input+0xda>
    if (iphdr_hlen < IP_HLEN) {
 800ead4:	8a7b      	ldrh	r3, [r7, #18]
 800ead6:	2b13      	cmp	r3, #19
 800ead8:	d804      	bhi.n	800eae4 <ip4_input+0xa0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800eada:	8a7b      	ldrh	r3, [r7, #18]
 800eadc:	4619      	mov	r1, r3
 800eade:	487d      	ldr	r0, [pc, #500]	; (800ecd4 <ip4_input+0x290>)
 800eae0:	f001 fb4e 	bl	8010180 <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	895b      	ldrh	r3, [r3, #10]
 800eae8:	8a7a      	ldrh	r2, [r7, #18]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d906      	bls.n	800eafc <ip4_input+0xb8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800eaee:	8a79      	ldrh	r1, [r7, #18]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	895b      	ldrh	r3, [r3, #10]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	4878      	ldr	r0, [pc, #480]	; (800ecd8 <ip4_input+0x294>)
 800eaf8:	f001 fb42 	bl	8010180 <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	891b      	ldrh	r3, [r3, #8]
 800eb00:	8a3a      	ldrh	r2, [r7, #16]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d906      	bls.n	800eb14 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800eb06:	8a39      	ldrh	r1, [r7, #16]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4873      	ldr	r0, [pc, #460]	; (800ecdc <ip4_input+0x298>)
 800eb10:	f001 fb36 	bl	8010180 <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7f6 f9b1 	bl	8004e7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e166      	b.n	800edec <ip4_input+0x3a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	4a6f      	ldr	r2, [pc, #444]	; (800ece0 <ip4_input+0x29c>)
 800eb24:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	4a6d      	ldr	r2, [pc, #436]	; (800ece0 <ip4_input+0x29c>)
 800eb2c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eb2e:	4b6c      	ldr	r3, [pc, #432]	; (800ece0 <ip4_input+0x29c>)
 800eb30:	695b      	ldr	r3, [r3, #20]
 800eb32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb36:	2be0      	cmp	r3, #224	; 0xe0
 800eb38:	d112      	bne.n	800eb60 <ip4_input+0x11c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <ip4_input+0x116>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d002      	beq.n	800eb5a <ip4_input+0x116>
      netif = inp;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	61bb      	str	r3, [r7, #24]
 800eb58:	e02a      	b.n	800ebb0 <ip4_input+0x16c>
    } else {
      netif = NULL;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	e027      	b.n	800ebb0 <ip4_input+0x16c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800eb60:	6838      	ldr	r0, [r7, #0]
 800eb62:	f7ff ff13 	bl	800e98c <ip4_input_accept>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <ip4_input+0x12e>
      netif = inp;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	61bb      	str	r3, [r7, #24]
 800eb70:	e01e      	b.n	800ebb0 <ip4_input+0x16c>
    } else {
      netif = NULL;
 800eb72:	2300      	movs	r3, #0
 800eb74:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eb76:	4b5a      	ldr	r3, [pc, #360]	; (800ece0 <ip4_input+0x29c>)
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb7e:	d017      	beq.n	800ebb0 <ip4_input+0x16c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800eb80:	4b58      	ldr	r3, [pc, #352]	; (800ece4 <ip4_input+0x2a0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	61bb      	str	r3, [r7, #24]
 800eb86:	e00e      	b.n	800eba6 <ip4_input+0x162>
          if (netif == inp) {
 800eb88:	69ba      	ldr	r2, [r7, #24]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d006      	beq.n	800eb9e <ip4_input+0x15a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800eb90:	69b8      	ldr	r0, [r7, #24]
 800eb92:	f7ff fefb 	bl	800e98c <ip4_input_accept>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d108      	bne.n	800ebae <ip4_input+0x16a>
 800eb9c:	e000      	b.n	800eba0 <ip4_input+0x15c>
            continue;
 800eb9e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	61bb      	str	r3, [r7, #24]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1ed      	bne.n	800eb88 <ip4_input+0x144>
 800ebac:	e000      	b.n	800ebb0 <ip4_input+0x16c>
            break;
 800ebae:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d11f      	bne.n	800ebf6 <ip4_input+0x1b2>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	7a5b      	ldrb	r3, [r3, #9]
 800ebba:	2b11      	cmp	r3, #17
 800ebbc:	d11b      	bne.n	800ebf6 <ip4_input+0x1b2>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800ebbe:	8a7b      	ldrh	r3, [r7, #18]
 800ebc0:	69fa      	ldr	r2, [r7, #28]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	885b      	ldrh	r3, [r3, #2]
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7f4 fde0 	bl	8003792 <lwip_htons>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4844      	ldr	r0, [pc, #272]	; (800ece8 <ip4_input+0x2a4>)
 800ebd8:	f001 fad2 	bl	8010180 <iprintf>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	885b      	ldrh	r3, [r3, #2]
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800ebe6:	d106      	bne.n	800ebf6 <ip4_input+0x1b2>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 800ebe8:	4840      	ldr	r0, [pc, #256]	; (800ecec <ip4_input+0x2a8>)
 800ebea:	f001 fb51 	bl	8010290 <puts>
        netif = inp;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01a      	beq.n	800ec32 <ip4_input+0x1ee>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ebfc:	4b38      	ldr	r3, [pc, #224]	; (800ece0 <ip4_input+0x29c>)
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d016      	beq.n	800ec32 <ip4_input+0x1ee>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec04:	4b36      	ldr	r3, [pc, #216]	; (800ece0 <ip4_input+0x29c>)
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	6839      	ldr	r1, [r7, #0]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 faba 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d105      	bne.n	800ec22 <ip4_input+0x1de>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ec16:	4b32      	ldr	r3, [pc, #200]	; (800ece0 <ip4_input+0x29c>)
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec1e:	2be0      	cmp	r3, #224	; 0xe0
 800ec20:	d107      	bne.n	800ec32 <ip4_input+0x1ee>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 800ec22:	4833      	ldr	r0, [pc, #204]	; (800ecf0 <ip4_input+0x2ac>)
 800ec24:	f001 fb34 	bl	8010290 <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7f6 f927 	bl	8004e7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e0dc      	b.n	800edec <ip4_input+0x3a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d107      	bne.n	800ec48 <ip4_input+0x204>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 800ec38:	482e      	ldr	r0, [pc, #184]	; (800ecf4 <ip4_input+0x2b0>)
 800ec3a:	f001 fb29 	bl	8010290 <puts>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7f6 f91c 	bl	8004e7c <pbuf_free>
    return ERR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e0d1      	b.n	800edec <ip4_input+0x3a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	88db      	ldrh	r3, [r3, #6]
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	461a      	mov	r2, r3
 800ec50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ec54:	4013      	ands	r3, r2
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d053      	beq.n	800ed02 <ip4_input+0x2be>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	889b      	ldrh	r3, [r3, #4]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7f4 fd96 	bl	8003792 <lwip_htons>
 800ec66:	4603      	mov	r3, r0
 800ec68:	461d      	mov	r5, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	891b      	ldrh	r3, [r3, #8]
 800ec6e:	461e      	mov	r6, r3
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	885b      	ldrh	r3, [r3, #2]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f4 fd8b 	bl	8003792 <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	4698      	mov	r8, r3
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	88db      	ldrh	r3, [r3, #6]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f003 0320 	and.w	r3, r3, #32
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	bf14      	ite	ne
 800ec8e:	2301      	movne	r3, #1
 800ec90:	2300      	moveq	r3, #0
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	461c      	mov	r4, r3
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7f4 fd78 	bl	8003792 <lwip_htons>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	9301      	str	r3, [sp, #4]
 800ecb0:	9400      	str	r4, [sp, #0]
 800ecb2:	4643      	mov	r3, r8
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	480f      	ldr	r0, [pc, #60]	; (800ecf8 <ip4_input+0x2b4>)
 800ecba:	f001 fa61 	bl	8010180 <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fda6 	bl	800f810 <ip4_reass>
 800ecc4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d117      	bne.n	800ecfc <ip4_input+0x2b8>
      return ERR_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	e08d      	b.n	800edec <ip4_input+0x3a8>
 800ecd0:	080152a4 	.word	0x080152a4
 800ecd4:	080152d8 	.word	0x080152d8
 800ecd8:	0801531c 	.word	0x0801531c
 800ecdc:	0801536c 	.word	0x0801536c
 800ece0:	20003390 	.word	0x20003390
 800ece4:	20006938 	.word	0x20006938
 800ece8:	080153ac 	.word	0x080153ac
 800ecec:	080153dc 	.word	0x080153dc
 800ecf0:	08015400 	.word	0x08015400
 800ecf4:	08015428 	.word	0x08015428
 800ecf8:	08015448 	.word	0x08015448
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 800ed02:	483d      	ldr	r0, [pc, #244]	; (800edf8 <ip4_input+0x3b4>)
 800ed04:	f001 fac4 	bl	8010290 <puts>
  ip4_debug_print(p);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f977 	bl	800effc <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	895b      	ldrh	r3, [r3, #10]
 800ed12:	4619      	mov	r1, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	891b      	ldrh	r3, [r3, #8]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4838      	ldr	r0, [pc, #224]	; (800edfc <ip4_input+0x3b8>)
 800ed1c:	f001 fa30 	bl	8010180 <iprintf>

  ip_data.current_netif = netif;
 800ed20:	4a37      	ldr	r2, [pc, #220]	; (800ee00 <ip4_input+0x3bc>)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ed26:	4a36      	ldr	r2, [pc, #216]	; (800ee00 <ip4_input+0x3bc>)
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ed2c:	4a34      	ldr	r2, [pc, #208]	; (800ee00 <ip4_input+0x3bc>)
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	f003 030f 	and.w	r3, r3, #15
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	4b2f      	ldr	r3, [pc, #188]	; (800ee00 <ip4_input+0x3bc>)
 800ed44:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ed46:	8a7b      	ldrh	r3, [r7, #18]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7f6 f810 	bl	8004d70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	7a5b      	ldrb	r3, [r3, #9]
 800ed54:	2b06      	cmp	r3, #6
 800ed56:	d009      	beq.n	800ed6c <ip4_input+0x328>
 800ed58:	2b11      	cmp	r3, #17
 800ed5a:	d002      	beq.n	800ed62 <ip4_input+0x31e>
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d00a      	beq.n	800ed76 <ip4_input+0x332>
 800ed60:	e00e      	b.n	800ed80 <ip4_input+0x33c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7fb fe6b 	bl	800aa40 <udp_input>
        break;
 800ed6a:	e02c      	b.n	800edc6 <ip4_input+0x382>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f7f7 feb6 	bl	8006ae0 <tcp_input>
        break;
 800ed74:	e027      	b.n	800edc6 <ip4_input+0x382>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff fbf1 	bl	800e560 <icmp_input>
        break;
 800ed7e:	e022      	b.n	800edc6 <ip4_input+0x382>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed80:	4b1f      	ldr	r3, [pc, #124]	; (800ee00 <ip4_input+0x3bc>)
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	69b9      	ldr	r1, [r7, #24]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f000 f9fc 	bl	800f184 <ip4_addr_isbroadcast_u32>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10f      	bne.n	800edb2 <ip4_input+0x36e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed92:	4b1b      	ldr	r3, [pc, #108]	; (800ee00 <ip4_input+0x3bc>)
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ed9a:	2be0      	cmp	r3, #224	; 0xe0
 800ed9c:	d009      	beq.n	800edb2 <ip4_input+0x36e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ed9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7f6 f856 	bl	8004e56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800edaa:	2102      	movs	r1, #2
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff fce1 	bl	800e774 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	7a5b      	ldrb	r3, [r3, #9]
 800edb6:	4619      	mov	r1, r3
 800edb8:	4812      	ldr	r0, [pc, #72]	; (800ee04 <ip4_input+0x3c0>)
 800edba:	f001 f9e1 	bl	8010180 <iprintf>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7f6 f85c 	bl	8004e7c <pbuf_free>
        break;
 800edc4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800edc6:	4b0e      	ldr	r3, [pc, #56]	; (800ee00 <ip4_input+0x3bc>)
 800edc8:	2200      	movs	r2, #0
 800edca:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800edcc:	4b0c      	ldr	r3, [pc, #48]	; (800ee00 <ip4_input+0x3bc>)
 800edce:	2200      	movs	r2, #0
 800edd0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800edd2:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <ip4_input+0x3bc>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800edd8:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <ip4_input+0x3bc>)
 800edda:	2200      	movs	r2, #0
 800eddc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800edde:	4b08      	ldr	r3, [pc, #32]	; (800ee00 <ip4_input+0x3bc>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ede4:	4b06      	ldr	r3, [pc, #24]	; (800ee00 <ip4_input+0x3bc>)
 800ede6:	2200      	movs	r2, #0
 800ede8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3720      	adds	r7, #32
 800edf0:	46bd      	mov	sp, r7
 800edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf6:	bf00      	nop
 800edf8:	080154ac 	.word	0x080154ac
 800edfc:	080154b8 	.word	0x080154b8
 800ee00:	20003390 	.word	0x20003390
 800ee04:	080154e0 	.word	0x080154e0

0800ee08 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08a      	sub	sp, #40	; 0x28
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d009      	beq.n	800ee34 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d003      	beq.n	800ee2e <ip4_output_if+0x26>
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	3304      	adds	r3, #4
 800ee32:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ee34:	78fa      	ldrb	r2, [r7, #3]
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	9302      	str	r3, [sp, #8]
 800ee3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	4613      	mov	r3, r2
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6979      	ldr	r1, [r7, #20]
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 f805 	bl	800ee5c <ip4_output_if_src>
 800ee52:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
 800ee68:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	7b9b      	ldrb	r3, [r3, #14]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d006      	beq.n	800ee80 <ip4_output_if_src+0x24>
 800ee72:	4b58      	ldr	r3, [pc, #352]	; (800efd4 <ip4_output_if_src+0x178>)
 800ee74:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ee78:	4957      	ldr	r1, [pc, #348]	; (800efd8 <ip4_output_if_src+0x17c>)
 800ee7a:	4858      	ldr	r0, [pc, #352]	; (800efdc <ip4_output_if_src+0x180>)
 800ee7c:	f001 f980 	bl	8010180 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d063      	beq.n	800ef4e <ip4_output_if_src+0xf2>
    u16_t ip_hlen = IP_HLEN;
 800ee86:	2314      	movs	r3, #20
 800ee88:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ee8a:	2114      	movs	r1, #20
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7f5 ff5f 	bl	8004d50 <pbuf_add_header>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 800ee98:	4851      	ldr	r0, [pc, #324]	; (800efe0 <ip4_output_if_src+0x184>)
 800ee9a:	f001 f9f9 	bl	8010290 <puts>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ee9e:	f06f 0301 	mvn.w	r3, #1
 800eea2:	e093      	b.n	800efcc <ip4_output_if_src+0x170>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	895b      	ldrh	r3, [r3, #10]
 800eeae:	2b13      	cmp	r3, #19
 800eeb0:	d806      	bhi.n	800eec0 <ip4_output_if_src+0x64>
 800eeb2:	4b48      	ldr	r3, [pc, #288]	; (800efd4 <ip4_output_if_src+0x178>)
 800eeb4:	f240 3289 	movw	r2, #905	; 0x389
 800eeb8:	494a      	ldr	r1, [pc, #296]	; (800efe4 <ip4_output_if_src+0x188>)
 800eeba:	4848      	ldr	r0, [pc, #288]	; (800efdc <ip4_output_if_src+0x180>)
 800eebc:	f001 f960 	bl	8010180 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	78fa      	ldrb	r2, [r7, #3]
 800eec4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eecc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eed6:	8b7b      	ldrh	r3, [r7, #26]
 800eed8:	089b      	lsrs	r3, r3, #2
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eeee:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	891b      	ldrh	r3, [r3, #8]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7f4 fc4c 	bl	8003792 <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	461a      	mov	r2, r3
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	2200      	movs	r2, #0
 800ef06:	719a      	strb	r2, [r3, #6]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ef0c:	4b36      	ldr	r3, [pc, #216]	; (800efe8 <ip4_output_if_src+0x18c>)
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f4 fc3e 	bl	8003792 <lwip_htons>
 800ef16:	4603      	mov	r3, r0
 800ef18:	461a      	mov	r2, r3
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ef1e:	4b32      	ldr	r3, [pc, #200]	; (800efe8 <ip4_output_if_src+0x18c>)
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	3301      	adds	r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	4b30      	ldr	r3, [pc, #192]	; (800efe8 <ip4_output_if_src+0x18c>)
 800ef28:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d104      	bne.n	800ef3a <ip4_output_if_src+0xde>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ef30:	4b2e      	ldr	r3, [pc, #184]	; (800efec <ip4_output_if_src+0x190>)
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	60da      	str	r2, [r3, #12]
 800ef38:	e003      	b.n	800ef42 <ip4_output_if_src+0xe6>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	2200      	movs	r2, #0
 800ef46:	729a      	strb	r2, [r3, #10]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	72da      	strb	r2, [r3, #11]
 800ef4c:	e012      	b.n	800ef74 <ip4_output_if_src+0x118>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	895b      	ldrh	r3, [r3, #10]
 800ef52:	2b13      	cmp	r3, #19
 800ef54:	d805      	bhi.n	800ef62 <ip4_output_if_src+0x106>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 800ef56:	4826      	ldr	r0, [pc, #152]	; (800eff0 <ip4_output_if_src+0x194>)
 800ef58:	f001 f99a 	bl	8010290 <puts>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ef5c:	f06f 0301 	mvn.w	r3, #1
 800ef60:	e034      	b.n	800efcc <ip4_output_if_src+0x170>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ef6e:	f107 0314 	add.w	r3, r7, #20
 800ef72:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ef82:	461a      	mov	r2, r3
 800ef84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef8a:	481a      	ldr	r0, [pc, #104]	; (800eff4 <ip4_output_if_src+0x198>)
 800ef8c:	f001 f8f8 	bl	8010180 <iprintf>
  ip4_debug_print(p);
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f000 f833 	bl	800effc <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00c      	beq.n	800efb8 <ip4_output_if_src+0x15c>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	891a      	ldrh	r2, [r3, #8]
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d906      	bls.n	800efb8 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 fe1c 	bl	800fbec <ip4_frag>
 800efb4:	4603      	mov	r3, r0
 800efb6:	e009      	b.n	800efcc <ip4_output_if_src+0x170>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 800efb8:	480f      	ldr	r0, [pc, #60]	; (800eff8 <ip4_output_if_src+0x19c>)
 800efba:	f001 f969 	bl	8010290 <puts>
  return netif->output(netif, p, dest);
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	68f9      	ldr	r1, [r7, #12]
 800efc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efc8:	4798      	blx	r3
 800efca:	4603      	mov	r3, r0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3720      	adds	r7, #32
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	08015504 	.word	0x08015504
 800efd8:	08015538 	.word	0x08015538
 800efdc:	08015544 	.word	0x08015544
 800efe0:	0801556c 	.word	0x0801556c
 800efe4:	080155a0 	.word	0x080155a0
 800efe8:	20000212 	.word	0x20000212
 800efec:	08015d18 	.word	0x08015d18
 800eff0:	080155d0 	.word	0x080155d0
 800eff4:	08015604 	.word	0x08015604
 800eff8:	0801561c 	.word	0x0801561c

0800effc <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	b086      	sub	sp, #24
 800f002:	af02      	add	r7, sp, #8
 800f004:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 800f00c:	4856      	ldr	r0, [pc, #344]	; (800f168 <ip4_debug_print+0x16c>)
 800f00e:	f001 f93f 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f012:	4856      	ldr	r0, [pc, #344]	; (800f16c <ip4_debug_print+0x170>)
 800f014:	f001 f93c 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	091b      	lsrs	r3, r3, #4
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	461d      	mov	r5, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	f003 040f 	and.w	r4, r3, #15
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	785b      	ldrb	r3, [r3, #1]
 800f02e:	461e      	mov	r6, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	885b      	ldrh	r3, [r3, #2]
 800f034:	b29b      	uxth	r3, r3
 800f036:	4618      	mov	r0, r3
 800f038:	f7f4 fbab 	bl	8003792 <lwip_htons>
 800f03c:	4603      	mov	r3, r0
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	4633      	mov	r3, r6
 800f042:	4622      	mov	r2, r4
 800f044:	4629      	mov	r1, r5
 800f046:	484a      	ldr	r0, [pc, #296]	; (800f170 <ip4_debug_print+0x174>)
 800f048:	f001 f89a 	bl	8010180 <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f04c:	4847      	ldr	r0, [pc, #284]	; (800f16c <ip4_debug_print+0x170>)
 800f04e:	f001 f91f 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	889b      	ldrh	r3, [r3, #4]
 800f056:	b29b      	uxth	r3, r3
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f4 fb9a 	bl	8003792 <lwip_htons>
 800f05e:	4603      	mov	r3, r0
 800f060:	4698      	mov	r8, r3
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	88db      	ldrh	r3, [r3, #6]
 800f066:	b29b      	uxth	r3, r3
 800f068:	4618      	mov	r0, r3
 800f06a:	f7f4 fb92 	bl	8003792 <lwip_htons>
 800f06e:	4603      	mov	r3, r0
 800f070:	0bdb      	lsrs	r3, r3, #15
 800f072:	b29b      	uxth	r3, r3
 800f074:	f003 0501 	and.w	r5, r3, #1
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	88db      	ldrh	r3, [r3, #6]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	4618      	mov	r0, r3
 800f080:	f7f4 fb87 	bl	8003792 <lwip_htons>
 800f084:	4603      	mov	r3, r0
 800f086:	0b9b      	lsrs	r3, r3, #14
 800f088:	b29b      	uxth	r3, r3
 800f08a:	f003 0601 	and.w	r6, r3, #1
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	88db      	ldrh	r3, [r3, #6]
 800f092:	b29b      	uxth	r3, r3
 800f094:	4618      	mov	r0, r3
 800f096:	f7f4 fb7c 	bl	8003792 <lwip_htons>
 800f09a:	4603      	mov	r3, r0
 800f09c:	0b5b      	lsrs	r3, r3, #13
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	f003 0401 	and.w	r4, r3, #1
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	88db      	ldrh	r3, [r3, #6]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f4 fb71 	bl	8003792 <lwip_htons>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0b6:	9301      	str	r3, [sp, #4]
 800f0b8:	9400      	str	r4, [sp, #0]
 800f0ba:	4633      	mov	r3, r6
 800f0bc:	462a      	mov	r2, r5
 800f0be:	4641      	mov	r1, r8
 800f0c0:	482c      	ldr	r0, [pc, #176]	; (800f174 <ip4_debug_print+0x178>)
 800f0c2:	f001 f85d 	bl	8010180 <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f0c6:	4829      	ldr	r0, [pc, #164]	; (800f16c <ip4_debug_print+0x170>)
 800f0c8:	f001 f8e2 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	7a1b      	ldrb	r3, [r3, #8]
 800f0d0:	461c      	mov	r4, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	7a5b      	ldrb	r3, [r3, #9]
 800f0d6:	461d      	mov	r5, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	895b      	ldrh	r3, [r3, #10]
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7f4 fb57 	bl	8003792 <lwip_htons>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	462a      	mov	r2, r5
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4823      	ldr	r0, [pc, #140]	; (800f178 <ip4_debug_print+0x17c>)
 800f0ec:	f001 f848 	bl	8010180 <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f0f0:	481e      	ldr	r0, [pc, #120]	; (800f16c <ip4_debug_print+0x170>)
 800f0f2:	f001 f8cd 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	0a1b      	lsrs	r3, r3, #8
 800f104:	b2db      	uxtb	r3, r3
 800f106:	461a      	mov	r2, r3
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	0c1b      	lsrs	r3, r3, #16
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	4618      	mov	r0, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	0e1b      	lsrs	r3, r3, #24
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	4603      	mov	r3, r0
 800f11e:	4817      	ldr	r0, [pc, #92]	; (800f17c <ip4_debug_print+0x180>)
 800f120:	f001 f82e 	bl	8010180 <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f124:	4811      	ldr	r0, [pc, #68]	; (800f16c <ip4_debug_print+0x170>)
 800f126:	f001 f8b3 	bl	8010290 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	4619      	mov	r1, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	0a1b      	lsrs	r3, r3, #8
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	461a      	mov	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	0c1b      	lsrs	r3, r3, #16
 800f142:	b2db      	uxtb	r3, r3
 800f144:	4618      	mov	r0, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	0e1b      	lsrs	r3, r3, #24
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	4603      	mov	r3, r0
 800f152:	480b      	ldr	r0, [pc, #44]	; (800f180 <ip4_debug_print+0x184>)
 800f154:	f001 f814 	bl	8010180 <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 800f158:	4804      	ldr	r0, [pc, #16]	; (800f16c <ip4_debug_print+0x170>)
 800f15a:	f001 f899 	bl	8010290 <puts>
}
 800f15e:	bf00      	nop
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f168:	0801566c 	.word	0x0801566c
 800f16c:	08015678 	.word	0x08015678
 800f170:	0801569c 	.word	0x0801569c
 800f174:	080156d8 	.word	0x080156d8
 800f178:	08015714 	.word	0x08015714
 800f17c:	08015750 	.word	0x08015750
 800f180:	08015780 	.word	0x08015780

0800f184 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f198:	d002      	beq.n	800f1a0 <ip4_addr_isbroadcast_u32+0x1c>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d101      	bne.n	800f1a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e02a      	b.n	800f1fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e021      	b.n	800f1fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d101      	bne.n	800f1c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	e019      	b.n	800f1fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	405a      	eors	r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10d      	bne.n	800f1f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	3308      	adds	r3, #8
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	43da      	mvns	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d101      	bne.n	800f1f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e000      	b.n	800f1fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f1f8:	2300      	movs	r3, #0
  }
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3714      	adds	r7, #20
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
	...

0800f208 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f212:	4b12      	ldr	r3, [pc, #72]	; (800f25c <ip_reass_tmr+0x54>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f218:	e018      	b.n	800f24c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7fdb      	ldrb	r3, [r3, #31]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00b      	beq.n	800f23a <ip_reass_tmr+0x32>
      r->timer--;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	7fdb      	ldrb	r3, [r3, #31]
 800f226:	3b01      	subs	r3, #1
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	e008      	b.n	800f24c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f244:	68b9      	ldr	r1, [r7, #8]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f80a 	bl	800f260 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1e3      	bne.n	800f21a <ip_reass_tmr+0x12>
    }
  }
}
 800f252:	bf00      	nop
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20000214 	.word	0x20000214

0800f260 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f26a:	2300      	movs	r3, #0
 800f26c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	429a      	cmp	r2, r3
 800f274:	d105      	bne.n	800f282 <ip_reass_free_complete_datagram+0x22>
 800f276:	4b45      	ldr	r3, [pc, #276]	; (800f38c <ip_reass_free_complete_datagram+0x12c>)
 800f278:	22ab      	movs	r2, #171	; 0xab
 800f27a:	4945      	ldr	r1, [pc, #276]	; (800f390 <ip_reass_free_complete_datagram+0x130>)
 800f27c:	4845      	ldr	r0, [pc, #276]	; (800f394 <ip_reass_free_complete_datagram+0x134>)
 800f27e:	f000 ff7f 	bl	8010180 <iprintf>
  if (prev != NULL) {
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00a      	beq.n	800f29e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d005      	beq.n	800f29e <ip_reass_free_complete_datagram+0x3e>
 800f292:	4b3e      	ldr	r3, [pc, #248]	; (800f38c <ip_reass_free_complete_datagram+0x12c>)
 800f294:	22ad      	movs	r2, #173	; 0xad
 800f296:	4940      	ldr	r1, [pc, #256]	; (800f398 <ip_reass_free_complete_datagram+0x138>)
 800f298:	483e      	ldr	r0, [pc, #248]	; (800f394 <ip_reass_free_complete_datagram+0x134>)
 800f29a:	f000 ff71 	bl	8010180 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	889b      	ldrh	r3, [r3, #4]
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d12a      	bne.n	800f306 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	6858      	ldr	r0, [r3, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	2214      	movs	r2, #20
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f000 ff46 	bl	801015a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	69b8      	ldr	r0, [r7, #24]
 800f2d2:	f7ff fa5f 	bl	800e794 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f2d6:	69b8      	ldr	r0, [r7, #24]
 800f2d8:	f7f5 fe58 	bl	8004f8c <pbuf_clen>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f2e0:	8bfa      	ldrh	r2, [r7, #30]
 800f2e2:	8a7b      	ldrh	r3, [r7, #18]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ea:	db05      	blt.n	800f2f8 <ip_reass_free_complete_datagram+0x98>
 800f2ec:	4b27      	ldr	r3, [pc, #156]	; (800f38c <ip_reass_free_complete_datagram+0x12c>)
 800f2ee:	22bc      	movs	r2, #188	; 0xbc
 800f2f0:	492a      	ldr	r1, [pc, #168]	; (800f39c <ip_reass_free_complete_datagram+0x13c>)
 800f2f2:	4828      	ldr	r0, [pc, #160]	; (800f394 <ip_reass_free_complete_datagram+0x134>)
 800f2f4:	f000 ff44 	bl	8010180 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f2f8:	8bfa      	ldrh	r2, [r7, #30]
 800f2fa:	8a7b      	ldrh	r3, [r7, #18]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f300:	69b8      	ldr	r0, [r7, #24]
 800f302:	f7f5 fdbb 	bl	8004e7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f30c:	e01f      	b.n	800f34e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f7f5 fe34 	bl	8004f8c <pbuf_clen>
 800f324:	4603      	mov	r3, r0
 800f326:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f328:	8bfa      	ldrh	r2, [r7, #30]
 800f32a:	8a7b      	ldrh	r3, [r7, #18]
 800f32c:	4413      	add	r3, r2
 800f32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f332:	db05      	blt.n	800f340 <ip_reass_free_complete_datagram+0xe0>
 800f334:	4b15      	ldr	r3, [pc, #84]	; (800f38c <ip_reass_free_complete_datagram+0x12c>)
 800f336:	22cc      	movs	r2, #204	; 0xcc
 800f338:	4918      	ldr	r1, [pc, #96]	; (800f39c <ip_reass_free_complete_datagram+0x13c>)
 800f33a:	4816      	ldr	r0, [pc, #88]	; (800f394 <ip_reass_free_complete_datagram+0x134>)
 800f33c:	f000 ff20 	bl	8010180 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f340:	8bfa      	ldrh	r2, [r7, #30]
 800f342:	8a7b      	ldrh	r3, [r7, #18]
 800f344:	4413      	add	r3, r2
 800f346:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7f5 fd97 	bl	8004e7c <pbuf_free>
  while (p != NULL) {
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1dc      	bne.n	800f30e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f354:	6839      	ldr	r1, [r7, #0]
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f8c2 	bl	800f4e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f35c:	4b10      	ldr	r3, [pc, #64]	; (800f3a0 <ip_reass_free_complete_datagram+0x140>)
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	8bfa      	ldrh	r2, [r7, #30]
 800f362:	429a      	cmp	r2, r3
 800f364:	d905      	bls.n	800f372 <ip_reass_free_complete_datagram+0x112>
 800f366:	4b09      	ldr	r3, [pc, #36]	; (800f38c <ip_reass_free_complete_datagram+0x12c>)
 800f368:	22d2      	movs	r2, #210	; 0xd2
 800f36a:	490e      	ldr	r1, [pc, #56]	; (800f3a4 <ip_reass_free_complete_datagram+0x144>)
 800f36c:	4809      	ldr	r0, [pc, #36]	; (800f394 <ip_reass_free_complete_datagram+0x134>)
 800f36e:	f000 ff07 	bl	8010180 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f372:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <ip_reass_free_complete_datagram+0x140>)
 800f374:	881a      	ldrh	r2, [r3, #0]
 800f376:	8bfb      	ldrh	r3, [r7, #30]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	4b08      	ldr	r3, [pc, #32]	; (800f3a0 <ip_reass_free_complete_datagram+0x140>)
 800f37e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f380:	8bfb      	ldrh	r3, [r7, #30]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	080157b0 	.word	0x080157b0
 800f390:	080157ec 	.word	0x080157ec
 800f394:	080157f8 	.word	0x080157f8
 800f398:	08015820 	.word	0x08015820
 800f39c:	08015834 	.word	0x08015834
 800f3a0:	20000218 	.word	0x20000218
 800f3a4:	08015854 	.word	0x08015854

0800f3a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08a      	sub	sp, #40	; 0x28
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f3c6:	4b28      	ldr	r3, [pc, #160]	; (800f468 <ip_reass_remove_oldest_datagram+0xc0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f3cc:	e030      	b.n	800f430 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	695a      	ldr	r2, [r3, #20]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d10c      	bne.n	800f3f4 <ip_reass_remove_oldest_datagram+0x4c>
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	699a      	ldr	r2, [r3, #24]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d106      	bne.n	800f3f4 <ip_reass_remove_oldest_datagram+0x4c>
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	899a      	ldrh	r2, [r3, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	889b      	ldrh	r3, [r3, #4]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d014      	beq.n	800f41e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d104      	bne.n	800f40a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f402:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e009      	b.n	800f41e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	7fda      	ldrb	r2, [r3, #31]
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	7fdb      	ldrb	r3, [r3, #31]
 800f412:	429a      	cmp	r2, r3
 800f414:	d803      	bhi.n	800f41e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f428:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1cb      	bne.n	800f3ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f436:	6a3b      	ldr	r3, [r7, #32]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d008      	beq.n	800f44e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f43c:	69b9      	ldr	r1, [r7, #24]
 800f43e:	6a38      	ldr	r0, [r7, #32]
 800f440:	f7ff ff0e 	bl	800f260 <ip_reass_free_complete_datagram>
 800f444:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	4413      	add	r3, r2
 800f44c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	da02      	bge.n	800f45c <ip_reass_remove_oldest_datagram+0xb4>
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	dcac      	bgt.n	800f3b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f45c:	697b      	ldr	r3, [r7, #20]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3728      	adds	r7, #40	; 0x28
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20000214 	.word	0x20000214

0800f46c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f476:	2004      	movs	r0, #4
 800f478:	f7f4 fde0 	bl	800403c <memp_malloc>
 800f47c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d110      	bne.n	800f4a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7ff ff8e 	bl	800f3a8 <ip_reass_remove_oldest_datagram>
 800f48c:	4602      	mov	r2, r0
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	4293      	cmp	r3, r2
 800f492:	dc03      	bgt.n	800f49c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f494:	2004      	movs	r0, #4
 800f496:	f7f4 fdd1 	bl	800403c <memp_malloc>
 800f49a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e016      	b.n	800f4d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f4a6:	2220      	movs	r2, #32
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f000 fe60 	bl	8010170 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	220f      	movs	r2, #15
 800f4b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f4b6:	4b09      	ldr	r3, [pc, #36]	; (800f4dc <ip_reass_enqueue_new_datagram+0x70>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f4be:	4a07      	ldr	r2, [pc, #28]	; (800f4dc <ip_reass_enqueue_new_datagram+0x70>)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	2214      	movs	r2, #20
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 fe44 	bl	801015a <memcpy>
  return ipr;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3710      	adds	r7, #16
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20000214 	.word	0x20000214

0800f4e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f4ea:	4b10      	ldr	r3, [pc, #64]	; (800f52c <ip_reass_dequeue_datagram+0x4c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d104      	bne.n	800f4fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a0c      	ldr	r2, [pc, #48]	; (800f52c <ip_reass_dequeue_datagram+0x4c>)
 800f4fa:	6013      	str	r3, [r2, #0]
 800f4fc:	e00d      	b.n	800f51a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d106      	bne.n	800f512 <ip_reass_dequeue_datagram+0x32>
 800f504:	4b0a      	ldr	r3, [pc, #40]	; (800f530 <ip_reass_dequeue_datagram+0x50>)
 800f506:	f240 1245 	movw	r2, #325	; 0x145
 800f50a:	490a      	ldr	r1, [pc, #40]	; (800f534 <ip_reass_dequeue_datagram+0x54>)
 800f50c:	480a      	ldr	r0, [pc, #40]	; (800f538 <ip_reass_dequeue_datagram+0x58>)
 800f50e:	f000 fe37 	bl	8010180 <iprintf>
    prev->next = ipr->next;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f51a:	6879      	ldr	r1, [r7, #4]
 800f51c:	2004      	movs	r0, #4
 800f51e:	f7f4 fdd9 	bl	80040d4 <memp_free>
}
 800f522:	bf00      	nop
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	20000214 	.word	0x20000214
 800f530:	080157b0 	.word	0x080157b0
 800f534:	08015878 	.word	0x08015878
 800f538:	080157f8 	.word	0x080157f8

0800f53c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08c      	sub	sp, #48	; 0x30
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f548:	2300      	movs	r3, #0
 800f54a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f54c:	2301      	movs	r3, #1
 800f54e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	885b      	ldrh	r3, [r3, #2]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7f4 f918 	bl	8003792 <lwip_htons>
 800f562:	4603      	mov	r3, r0
 800f564:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	f003 030f 	and.w	r3, r3, #15
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f574:	7e7b      	ldrb	r3, [r7, #25]
 800f576:	b29b      	uxth	r3, r3
 800f578:	8b7a      	ldrh	r2, [r7, #26]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d202      	bcs.n	800f584 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f57e:	f04f 33ff 	mov.w	r3, #4294967295
 800f582:	e135      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f584:	7e7b      	ldrb	r3, [r7, #25]
 800f586:	b29b      	uxth	r3, r3
 800f588:	8b7a      	ldrh	r2, [r7, #26]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	88db      	ldrh	r3, [r3, #6]
 800f592:	b29b      	uxth	r3, r3
 800f594:	4618      	mov	r0, r3
 800f596:	f7f4 f8fc 	bl	8003792 <lwip_htons>
 800f59a:	4603      	mov	r3, r0
 800f59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	701a      	strb	r2, [r3, #0]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	705a      	strb	r2, [r3, #1]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	709a      	strb	r2, [r3, #2]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	8afa      	ldrh	r2, [r7, #22]
 800f5c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f5c4:	8afa      	ldrh	r2, [r7, #22]
 800f5c6:	8b7b      	ldrh	r3, [r7, #26]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d2:	88db      	ldrh	r3, [r3, #6]
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	8afa      	ldrh	r2, [r7, #22]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d902      	bls.n	800f5e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e0:	e106      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5e8:	e068      	b.n	800f6bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f2:	889b      	ldrh	r3, [r3, #4]
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	889b      	ldrh	r3, [r3, #4]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d235      	bcs.n	800f66c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f604:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d020      	beq.n	800f64e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60e:	889b      	ldrh	r3, [r3, #4]
 800f610:	b29a      	uxth	r2, r3
 800f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f614:	88db      	ldrh	r3, [r3, #6]
 800f616:	b29b      	uxth	r3, r3
 800f618:	429a      	cmp	r2, r3
 800f61a:	d307      	bcc.n	800f62c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	88db      	ldrh	r3, [r3, #6]
 800f620:	b29a      	uxth	r2, r3
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	889b      	ldrh	r3, [r3, #4]
 800f626:	b29b      	uxth	r3, r3
 800f628:	429a      	cmp	r2, r3
 800f62a:	d902      	bls.n	800f632 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f62c:	f04f 33ff 	mov.w	r3, #4294967295
 800f630:	e0de      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63a:	88db      	ldrh	r3, [r3, #6]
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	889b      	ldrh	r3, [r3, #4]
 800f642:	b29b      	uxth	r3, r3
 800f644:	429a      	cmp	r2, r3
 800f646:	d03d      	beq.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f64c:	e03a      	b.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f650:	88db      	ldrh	r3, [r3, #6]
 800f652:	b29a      	uxth	r2, r3
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	889b      	ldrh	r3, [r3, #4]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d902      	bls.n	800f664 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f65e:	f04f 33ff 	mov.w	r3, #4294967295
 800f662:	e0c5      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	605a      	str	r2, [r3, #4]
      break;
 800f66a:	e02b      	b.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	889b      	ldrh	r3, [r3, #4]
 800f670:	b29a      	uxth	r2, r3
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	889b      	ldrh	r3, [r3, #4]
 800f676:	b29b      	uxth	r3, r3
 800f678:	429a      	cmp	r2, r3
 800f67a:	d102      	bne.n	800f682 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f67c:	f04f 33ff 	mov.w	r3, #4294967295
 800f680:	e0b6      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f684:	889b      	ldrh	r3, [r3, #4]
 800f686:	b29a      	uxth	r2, r3
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	88db      	ldrh	r3, [r3, #6]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	429a      	cmp	r2, r3
 800f690:	d202      	bcs.n	800f698 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f692:	f04f 33ff 	mov.w	r3, #4294967295
 800f696:	e0ab      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d009      	beq.n	800f6b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a0:	88db      	ldrh	r3, [r3, #6]
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	889b      	ldrh	r3, [r3, #4]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d001      	beq.n	800f6b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d193      	bne.n	800f5ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f6c2:	e000      	b.n	800f6c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f6c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d12d      	bne.n	800f728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d01c      	beq.n	800f70c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	88db      	ldrh	r3, [r3, #6]
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	889b      	ldrh	r3, [r3, #4]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d906      	bls.n	800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f6e2:	4b45      	ldr	r3, [pc, #276]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f6e8:	4944      	ldr	r1, [pc, #272]	; (800f7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f6ea:	4845      	ldr	r0, [pc, #276]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f6ec:	f000 fd48 	bl	8010180 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	88db      	ldrh	r3, [r3, #6]
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	889b      	ldrh	r3, [r3, #4]
 800f700:	b29b      	uxth	r3, r3
 800f702:	429a      	cmp	r2, r3
 800f704:	d010      	beq.n	800f728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	623b      	str	r3, [r7, #32]
 800f70a:	e00d      	b.n	800f728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d006      	beq.n	800f722 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f714:	4b38      	ldr	r3, [pc, #224]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f716:	f240 12bf 	movw	r2, #447	; 0x1bf
 800f71a:	493a      	ldr	r1, [pc, #232]	; (800f804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f71c:	4838      	ldr	r0, [pc, #224]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f71e:	f000 fd2f 	bl	8010180 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d105      	bne.n	800f73a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	7f9b      	ldrb	r3, [r3, #30]
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d059      	beq.n	800f7ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d04f      	beq.n	800f7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	889b      	ldrh	r3, [r3, #4]
 800f750:	b29b      	uxth	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	623b      	str	r3, [r7, #32]
 800f75a:	e041      	b.n	800f7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f766:	e012      	b.n	800f78e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	88db      	ldrh	r3, [r3, #6]
 800f772:	b29a      	uxth	r2, r3
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	889b      	ldrh	r3, [r3, #4]
 800f778:	b29b      	uxth	r3, r3
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d002      	beq.n	800f784 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	623b      	str	r3, [r7, #32]
            break;
 800f782:	e007      	b.n	800f794 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1e9      	bne.n	800f768 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d022      	beq.n	800f7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d106      	bne.n	800f7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f7a2:	4b15      	ldr	r3, [pc, #84]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7a4:	f240 12df 	movw	r2, #479	; 0x1df
 800f7a8:	4917      	ldr	r1, [pc, #92]	; (800f808 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f7aa:	4815      	ldr	r0, [pc, #84]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7ac:	f000 fce8 	bl	8010180 <iprintf>
          LWIP_ASSERT("sanity check",
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d106      	bne.n	800f7ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f7bc:	4b0e      	ldr	r3, [pc, #56]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7be:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f7c2:	4911      	ldr	r1, [pc, #68]	; (800f808 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f7c4:	480e      	ldr	r0, [pc, #56]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7c6:	f000 fcdb 	bl	8010180 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d006      	beq.n	800f7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f7d2:	4b09      	ldr	r3, [pc, #36]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7d4:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f7d8:	490c      	ldr	r1, [pc, #48]	; (800f80c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f7da:	4809      	ldr	r0, [pc, #36]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7dc:	f000 fcd0 	bl	8010180 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bf14      	ite	ne
 800f7e6:	2301      	movne	r3, #1
 800f7e8:	2300      	moveq	r3, #0
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	e000      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3730      	adds	r7, #48	; 0x30
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	080157b0 	.word	0x080157b0
 800f7fc:	08015894 	.word	0x08015894
 800f800:	080157f8 	.word	0x080157f8
 800f804:	080158b4 	.word	0x080158b4
 800f808:	080158ec 	.word	0x080158ec
 800f80c:	080158fc 	.word	0x080158fc

0800f810 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08e      	sub	sp, #56	; 0x38
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	f003 030f 	and.w	r3, r3, #15
 800f826:	b2db      	uxtb	r3, r3
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b14      	cmp	r3, #20
 800f82e:	f040 8167 	bne.w	800fb00 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	88db      	ldrh	r3, [r3, #6]
 800f836:	b29b      	uxth	r3, r3
 800f838:	4618      	mov	r0, r3
 800f83a:	f7f3 ffaa 	bl	8003792 <lwip_htons>
 800f83e:	4603      	mov	r3, r0
 800f840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f844:	b29b      	uxth	r3, r3
 800f846:	00db      	lsls	r3, r3, #3
 800f848:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	885b      	ldrh	r3, [r3, #2]
 800f84e:	b29b      	uxth	r3, r3
 800f850:	4618      	mov	r0, r3
 800f852:	f7f3 ff9e 	bl	8003792 <lwip_htons>
 800f856:	4603      	mov	r3, r0
 800f858:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f003 030f 	and.w	r3, r3, #15
 800f862:	b2db      	uxtb	r3, r3
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f86a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f86e:	b29b      	uxth	r3, r3
 800f870:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f872:	429a      	cmp	r2, r3
 800f874:	f0c0 8146 	bcc.w	800fb04 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7f5 fb81 	bl	8004f8c <pbuf_clen>
 800f88a:	4603      	mov	r3, r0
 800f88c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f88e:	4b9f      	ldr	r3, [pc, #636]	; (800fb0c <ip4_reass+0x2fc>)
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	461a      	mov	r2, r3
 800f894:	8c3b      	ldrh	r3, [r7, #32]
 800f896:	4413      	add	r3, r2
 800f898:	2b0a      	cmp	r3, #10
 800f89a:	dd10      	ble.n	800f8be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f89c:	8c3b      	ldrh	r3, [r7, #32]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a2:	f7ff fd81 	bl	800f3a8 <ip_reass_remove_oldest_datagram>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 812d 	beq.w	800fb08 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f8ae:	4b97      	ldr	r3, [pc, #604]	; (800fb0c <ip4_reass+0x2fc>)
 800f8b0:	881b      	ldrh	r3, [r3, #0]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	8c3b      	ldrh	r3, [r7, #32]
 800f8b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f8b8:	2b0a      	cmp	r3, #10
 800f8ba:	f300 8125 	bgt.w	800fb08 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f8be:	4b94      	ldr	r3, [pc, #592]	; (800fb10 <ip4_reass+0x300>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8c4:	e015      	b.n	800f8f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	695a      	ldr	r2, [r3, #20]
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d10c      	bne.n	800f8ec <ip4_reass+0xdc>
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	699a      	ldr	r2, [r3, #24]
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	691b      	ldr	r3, [r3, #16]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d106      	bne.n	800f8ec <ip4_reass+0xdc>
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	899a      	ldrh	r2, [r3, #12]
 800f8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e4:	889b      	ldrh	r3, [r3, #4]
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d006      	beq.n	800f8fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	633b      	str	r3, [r7, #48]	; 0x30
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1e6      	bne.n	800f8c6 <ip4_reass+0xb6>
 800f8f8:	e000      	b.n	800f8fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f8fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d109      	bne.n	800f916 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f902:	8c3b      	ldrh	r3, [r7, #32]
 800f904:	4619      	mov	r1, r3
 800f906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f908:	f7ff fdb0 	bl	800f46c <ip_reass_enqueue_new_datagram>
 800f90c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f910:	2b00      	cmp	r3, #0
 800f912:	d11c      	bne.n	800f94e <ip4_reass+0x13e>
      goto nullreturn;
 800f914:	e109      	b.n	800fb2a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f918:	88db      	ldrh	r3, [r3, #6]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f3 ff38 	bl	8003792 <lwip_htons>
 800f922:	4603      	mov	r3, r0
 800f924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d110      	bne.n	800f94e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	89db      	ldrh	r3, [r3, #14]
 800f930:	4618      	mov	r0, r3
 800f932:	f7f3 ff2e 	bl	8003792 <lwip_htons>
 800f936:	4603      	mov	r3, r0
 800f938:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d006      	beq.n	800f94e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	3308      	adds	r3, #8
 800f944:	2214      	movs	r2, #20
 800f946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 fc06 	bl	801015a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f950:	88db      	ldrh	r3, [r3, #6]
 800f952:	b29b      	uxth	r3, r3
 800f954:	f003 0320 	and.w	r3, r3, #32
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bf0c      	ite	eq
 800f95c:	2301      	moveq	r3, #1
 800f95e:	2300      	movne	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00e      	beq.n	800f988 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f96a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f96c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f96e:	4413      	add	r3, r2
 800f970:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f972:	8b7a      	ldrh	r2, [r7, #26]
 800f974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f976:	429a      	cmp	r2, r3
 800f978:	f0c0 80a0 	bcc.w	800fabc <ip4_reass+0x2ac>
 800f97c:	8b7b      	ldrh	r3, [r7, #26]
 800f97e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f982:	4293      	cmp	r3, r2
 800f984:	f200 809a 	bhi.w	800fabc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f988:	69fa      	ldr	r2, [r7, #28]
 800f98a:	6879      	ldr	r1, [r7, #4]
 800f98c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f98e:	f7ff fdd5 	bl	800f53c <ip_reass_chain_frag_into_datagram_and_validate>
 800f992:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99a:	f000 8091 	beq.w	800fac0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f99e:	4b5b      	ldr	r3, [pc, #364]	; (800fb0c <ip4_reass+0x2fc>)
 800f9a0:	881a      	ldrh	r2, [r3, #0]
 800f9a2:	8c3b      	ldrh	r3, [r7, #32]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	4b58      	ldr	r3, [pc, #352]	; (800fb0c <ip4_reass+0x2fc>)
 800f9aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00d      	beq.n	800f9ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9b6:	4413      	add	r3, r2
 800f9b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	8a7a      	ldrh	r2, [r7, #18]
 800f9be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	7f9b      	ldrb	r3, [r3, #30]
 800f9c4:	f043 0301 	orr.w	r3, r3, #1
 800f9c8:	b2da      	uxtb	r2, r3
 800f9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d171      	bne.n	800fab8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d6:	8b9b      	ldrh	r3, [r3, #28]
 800f9d8:	3314      	adds	r3, #20
 800f9da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f0:	3308      	adds	r3, #8
 800f9f2:	2214      	movs	r2, #20
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9f8:	f000 fbaf 	bl	801015a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f9fc:	8a3b      	ldrh	r3, [r7, #16]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f3 fec7 	bl	8003792 <lwip_htons>
 800fa04:	4603      	mov	r3, r0
 800fa06:	461a      	mov	r2, r3
 800fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	2200      	movs	r2, #0
 800fa10:	719a      	strb	r2, [r3, #6]
 800fa12:	2200      	movs	r2, #0
 800fa14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa18:	2200      	movs	r2, #0
 800fa1a:	729a      	strb	r2, [r3, #10]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fa26:	e00d      	b.n	800fa44 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fa2e:	2114      	movs	r1, #20
 800fa30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa32:	f7f5 f99d 	bl	8004d70 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fa36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7f5 fae1 	bl	8005000 <pbuf_cat>
      r = iprh->next_pbuf;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800fa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1ee      	bne.n	800fa28 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fa4a:	4b31      	ldr	r3, [pc, #196]	; (800fb10 <ip4_reass+0x300>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d102      	bne.n	800fa5a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fa54:	2300      	movs	r3, #0
 800fa56:	637b      	str	r3, [r7, #52]	; 0x34
 800fa58:	e010      	b.n	800fa7c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa5a:	4b2d      	ldr	r3, [pc, #180]	; (800fb10 <ip4_reass+0x300>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa60:	e007      	b.n	800fa72 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d006      	beq.n	800fa7a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	637b      	str	r3, [r7, #52]	; 0x34
 800fa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1f4      	bne.n	800fa62 <ip4_reass+0x252>
 800fa78:	e000      	b.n	800fa7c <ip4_reass+0x26c>
          break;
 800fa7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fa7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa80:	f7ff fd2e 	bl	800f4e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7f5 fa81 	bl	8004f8c <pbuf_clen>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fa8e:	4b1f      	ldr	r3, [pc, #124]	; (800fb0c <ip4_reass+0x2fc>)
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	8c3a      	ldrh	r2, [r7, #32]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d906      	bls.n	800faa6 <ip4_reass+0x296>
 800fa98:	4b1e      	ldr	r3, [pc, #120]	; (800fb14 <ip4_reass+0x304>)
 800fa9a:	f240 229b 	movw	r2, #667	; 0x29b
 800fa9e:	491e      	ldr	r1, [pc, #120]	; (800fb18 <ip4_reass+0x308>)
 800faa0:	481e      	ldr	r0, [pc, #120]	; (800fb1c <ip4_reass+0x30c>)
 800faa2:	f000 fb6d 	bl	8010180 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800faa6:	4b19      	ldr	r3, [pc, #100]	; (800fb0c <ip4_reass+0x2fc>)
 800faa8:	881a      	ldrh	r2, [r3, #0]
 800faaa:	8c3b      	ldrh	r3, [r7, #32]
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	b29a      	uxth	r2, r3
 800fab0:	4b16      	ldr	r3, [pc, #88]	; (800fb0c <ip4_reass+0x2fc>)
 800fab2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	e03c      	b.n	800fb32 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fab8:	2300      	movs	r3, #0
 800faba:	e03a      	b.n	800fb32 <ip4_reass+0x322>

nullreturn_ipr:
 800fabc:	bf00      	nop
 800fabe:	e000      	b.n	800fac2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fac0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d106      	bne.n	800fad6 <ip4_reass+0x2c6>
 800fac8:	4b12      	ldr	r3, [pc, #72]	; (800fb14 <ip4_reass+0x304>)
 800faca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800face:	4914      	ldr	r1, [pc, #80]	; (800fb20 <ip4_reass+0x310>)
 800fad0:	4812      	ldr	r0, [pc, #72]	; (800fb1c <ip4_reass+0x30c>)
 800fad2:	f000 fb55 	bl	8010180 <iprintf>
  if (ipr->p == NULL) {
 800fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d124      	bne.n	800fb28 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fade:	4b0c      	ldr	r3, [pc, #48]	; (800fb10 <ip4_reass+0x300>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d006      	beq.n	800faf6 <ip4_reass+0x2e6>
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <ip4_reass+0x304>)
 800faea:	f240 22ab 	movw	r2, #683	; 0x2ab
 800faee:	490d      	ldr	r1, [pc, #52]	; (800fb24 <ip4_reass+0x314>)
 800faf0:	480a      	ldr	r0, [pc, #40]	; (800fb1c <ip4_reass+0x30c>)
 800faf2:	f000 fb45 	bl	8010180 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800faf6:	2100      	movs	r1, #0
 800faf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fafa:	f7ff fcf1 	bl	800f4e0 <ip_reass_dequeue_datagram>
 800fafe:	e014      	b.n	800fb2a <ip4_reass+0x31a>
    goto nullreturn;
 800fb00:	bf00      	nop
 800fb02:	e012      	b.n	800fb2a <ip4_reass+0x31a>
    goto nullreturn;
 800fb04:	bf00      	nop
 800fb06:	e010      	b.n	800fb2a <ip4_reass+0x31a>
      goto nullreturn;
 800fb08:	bf00      	nop
 800fb0a:	e00e      	b.n	800fb2a <ip4_reass+0x31a>
 800fb0c:	20000218 	.word	0x20000218
 800fb10:	20000214 	.word	0x20000214
 800fb14:	080157b0 	.word	0x080157b0
 800fb18:	08015920 	.word	0x08015920
 800fb1c:	080157f8 	.word	0x080157f8
 800fb20:	0801593c 	.word	0x0801593c
 800fb24:	08015948 	.word	0x08015948
  }

nullreturn:
 800fb28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7f5 f9a6 	bl	8004e7c <pbuf_free>
  return NULL;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3738      	adds	r7, #56	; 0x38
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop

0800fb3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fb40:	2005      	movs	r0, #5
 800fb42:	f7f4 fa7b 	bl	800403c <memp_malloc>
 800fb46:	4603      	mov	r3, r0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d106      	bne.n	800fb68 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fb5a:	4b07      	ldr	r3, [pc, #28]	; (800fb78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fb5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fb60:	4906      	ldr	r1, [pc, #24]	; (800fb7c <ip_frag_free_pbuf_custom_ref+0x30>)
 800fb62:	4807      	ldr	r0, [pc, #28]	; (800fb80 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fb64:	f000 fb0c 	bl	8010180 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fb68:	6879      	ldr	r1, [r7, #4]
 800fb6a:	2005      	movs	r0, #5
 800fb6c:	f7f4 fab2 	bl	80040d4 <memp_free>
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	080157b0 	.word	0x080157b0
 800fb7c:	08015968 	.word	0x08015968
 800fb80:	080157f8 	.word	0x080157f8

0800fb84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d106      	bne.n	800fba4 <ipfrag_free_pbuf_custom+0x20>
 800fb96:	4b11      	ldr	r3, [pc, #68]	; (800fbdc <ipfrag_free_pbuf_custom+0x58>)
 800fb98:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fb9c:	4910      	ldr	r1, [pc, #64]	; (800fbe0 <ipfrag_free_pbuf_custom+0x5c>)
 800fb9e:	4811      	ldr	r0, [pc, #68]	; (800fbe4 <ipfrag_free_pbuf_custom+0x60>)
 800fba0:	f000 faee 	bl	8010180 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d006      	beq.n	800fbba <ipfrag_free_pbuf_custom+0x36>
 800fbac:	4b0b      	ldr	r3, [pc, #44]	; (800fbdc <ipfrag_free_pbuf_custom+0x58>)
 800fbae:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fbb2:	490d      	ldr	r1, [pc, #52]	; (800fbe8 <ipfrag_free_pbuf_custom+0x64>)
 800fbb4:	480b      	ldr	r0, [pc, #44]	; (800fbe4 <ipfrag_free_pbuf_custom+0x60>)
 800fbb6:	f000 fae3 	bl	8010180 <iprintf>
  if (pcr->original != NULL) {
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	695b      	ldr	r3, [r3, #20]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d004      	beq.n	800fbcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f5 f958 	bl	8004e7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff ffbd 	bl	800fb4c <ip_frag_free_pbuf_custom_ref>
}
 800fbd2:	bf00      	nop
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	080157b0 	.word	0x080157b0
 800fbe0:	08015974 	.word	0x08015974
 800fbe4:	080157f8 	.word	0x080157f8
 800fbe8:	08015980 	.word	0x08015980

0800fbec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b094      	sub	sp, #80	; 0x50
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc02:	3b14      	subs	r3, #20
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	da00      	bge.n	800fc0a <ip4_frag+0x1e>
 800fc08:	3307      	adds	r3, #7
 800fc0a:	10db      	asrs	r3, r3, #3
 800fc0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fc0e:	2314      	movs	r3, #20
 800fc10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	f003 030f 	and.w	r3, r3, #15
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b14      	cmp	r3, #20
 800fc2c:	d002      	beq.n	800fc34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fc2e:	f06f 0305 	mvn.w	r3, #5
 800fc32:	e10f      	b.n	800fe54 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	895b      	ldrh	r3, [r3, #10]
 800fc38:	2b13      	cmp	r3, #19
 800fc3a:	d809      	bhi.n	800fc50 <ip4_frag+0x64>
 800fc3c:	4b87      	ldr	r3, [pc, #540]	; (800fe5c <ip4_frag+0x270>)
 800fc3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fc42:	4987      	ldr	r1, [pc, #540]	; (800fe60 <ip4_frag+0x274>)
 800fc44:	4887      	ldr	r0, [pc, #540]	; (800fe64 <ip4_frag+0x278>)
 800fc46:	f000 fa9b 	bl	8010180 <iprintf>
 800fc4a:	f06f 0305 	mvn.w	r3, #5
 800fc4e:	e101      	b.n	800fe54 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc52:	88db      	ldrh	r3, [r3, #6]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f3 fd9b 	bl	8003792 <lwip_htons>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fc60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fc6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	891b      	ldrh	r3, [r3, #8]
 800fc76:	3b14      	subs	r3, #20
 800fc78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fc7c:	e0e0      	b.n	800fe40 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fc7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc80:	00db      	lsls	r3, r3, #3
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	bf28      	it	cs
 800fc8c:	4613      	movcs	r3, r2
 800fc8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fc90:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc94:	2114      	movs	r1, #20
 800fc96:	200e      	movs	r0, #14
 800fc98:	f7f4 fe10 	bl	80048bc <pbuf_alloc>
 800fc9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 80d4 	beq.w	800fe4e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	895b      	ldrh	r3, [r3, #10]
 800fcaa:	2b13      	cmp	r3, #19
 800fcac:	d806      	bhi.n	800fcbc <ip4_frag+0xd0>
 800fcae:	4b6b      	ldr	r3, [pc, #428]	; (800fe5c <ip4_frag+0x270>)
 800fcb0:	f240 3225 	movw	r2, #805	; 0x325
 800fcb4:	496c      	ldr	r1, [pc, #432]	; (800fe68 <ip4_frag+0x27c>)
 800fcb6:	486b      	ldr	r0, [pc, #428]	; (800fe64 <ip4_frag+0x278>)
 800fcb8:	f000 fa62 	bl	8010180 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	2214      	movs	r2, #20
 800fcc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f000 fa48 	bl	801015a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fcd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fcd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fcd6:	e064      	b.n	800fda2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	895a      	ldrh	r2, [r3, #10]
 800fcdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	895b      	ldrh	r3, [r3, #10]
 800fce6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d906      	bls.n	800fcfa <ip4_frag+0x10e>
 800fcec:	4b5b      	ldr	r3, [pc, #364]	; (800fe5c <ip4_frag+0x270>)
 800fcee:	f240 322d 	movw	r2, #813	; 0x32d
 800fcf2:	495e      	ldr	r1, [pc, #376]	; (800fe6c <ip4_frag+0x280>)
 800fcf4:	485b      	ldr	r0, [pc, #364]	; (800fe64 <ip4_frag+0x278>)
 800fcf6:	f000 fa43 	bl	8010180 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fcfa:	8bfa      	ldrh	r2, [r7, #30]
 800fcfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd00:	4293      	cmp	r3, r2
 800fd02:	bf28      	it	cs
 800fd04:	4613      	movcs	r3, r2
 800fd06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fd0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d105      	bne.n	800fd1e <ip4_frag+0x132>
        poff = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	60fb      	str	r3, [r7, #12]
        continue;
 800fd1c:	e041      	b.n	800fda2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fd1e:	f7ff ff0d 	bl	800fb3c <ip_frag_alloc_pbuf_custom_ref>
 800fd22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d103      	bne.n	800fd32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fd2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd2c:	f7f5 f8a6 	bl	8004e7c <pbuf_free>
        goto memerr;
 800fd30:	e08e      	b.n	800fe50 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fd40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fd44:	9201      	str	r2, [sp, #4]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2241      	movs	r2, #65	; 0x41
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f7f4 fedb 	bl	8004b08 <pbuf_alloced_custom>
 800fd52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fd5a:	69b8      	ldr	r0, [r7, #24]
 800fd5c:	f7ff fef6 	bl	800fb4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fd60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd62:	f7f5 f88b 	bl	8004e7c <pbuf_free>
        goto memerr;
 800fd66:	e073      	b.n	800fe50 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f7f5 f927 	bl	8004fbc <pbuf_ref>
      pcr->original = p;
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	4a3e      	ldr	r2, [pc, #248]	; (800fe70 <ip4_frag+0x284>)
 800fd78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fd7a:	6979      	ldr	r1, [r7, #20]
 800fd7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd7e:	f7f5 f93f 	bl	8005000 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fd82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fd86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fd90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d004      	beq.n	800fda2 <ip4_frag+0x1b6>
        poff = 0;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fda2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d196      	bne.n	800fcd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fdaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fdac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fdb0:	4413      	add	r3, r2
 800fdb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fdb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fdbc:	3b14      	subs	r3, #20
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	bfd4      	ite	le
 800fdc2:	2301      	movle	r3, #1
 800fdc4:	2300      	movgt	r3, #0
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fdca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fdce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <ip4_frag+0x1f4>
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fde0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fde2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fde6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fde8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7f3 fcd1 	bl	8003792 <lwip_htons>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fdf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fdfa:	3314      	adds	r3, #20
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7f3 fcc7 	bl	8003792 <lwip_htons>
 800fe04:	4603      	mov	r3, r0
 800fe06:	461a      	mov	r2, r3
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0e:	2200      	movs	r2, #0
 800fe10:	729a      	strb	r2, [r3, #10]
 800fe12:	2200      	movs	r2, #0
 800fe14:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	695b      	ldr	r3, [r3, #20]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe1e:	68b8      	ldr	r0, [r7, #8]
 800fe20:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fe22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe24:	f7f5 f82a 	bl	8004e7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fe28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe2e:	1ad3      	subs	r3, r2, r3
 800fe30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fe34:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fe38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe3a:	4413      	add	r3, r2
 800fe3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fe40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f47f af1a 	bne.w	800fc7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e002      	b.n	800fe54 <ip4_frag+0x268>
      goto memerr;
 800fe4e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3748      	adds	r7, #72	; 0x48
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	080157b0 	.word	0x080157b0
 800fe60:	0801598c 	.word	0x0801598c
 800fe64:	080157f8 	.word	0x080157f8
 800fe68:	080159a8 	.word	0x080159a8
 800fe6c:	080159c8 	.word	0x080159c8
 800fe70:	0800fb85 	.word	0x0800fb85

0800fe74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fe74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe78:	b096      	sub	sp, #88	; 0x58
 800fe7a:	af0a      	add	r7, sp, #40	; 0x28
 800fe7c:	61f8      	str	r0, [r7, #28]
 800fe7e:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fe80:	230e      	movs	r3, #14
 800fe82:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	895b      	ldrh	r3, [r3, #10]
 800fe88:	2b0e      	cmp	r3, #14
 800fe8a:	f240 80c8 	bls.w	801001e <ethernet_input+0x1aa>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	7bdb      	ldrb	r3, [r3, #15]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d106      	bne.n	800fea4 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	4698      	mov	r8, r3
 800feb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb2:	785b      	ldrb	r3, [r3, #1]
 800feb4:	4699      	mov	r9, r3
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	789b      	ldrb	r3, [r3, #2]
 800feba:	469a      	mov	sl, r3
 800febc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febe:	78db      	ldrb	r3, [r3, #3]
 800fec0:	461c      	mov	r4, r3
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	791b      	ldrb	r3, [r3, #4]
 800fec6:	461d      	mov	r5, r3
 800fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feca:	795b      	ldrb	r3, [r3, #5]
 800fecc:	461e      	mov	r6, r3
 800fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed0:	799b      	ldrb	r3, [r3, #6]
 800fed2:	617b      	str	r3, [r7, #20]
 800fed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed6:	79db      	ldrb	r3, [r3, #7]
 800fed8:	613b      	str	r3, [r7, #16]
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	7a1b      	ldrb	r3, [r3, #8]
 800fede:	60fb      	str	r3, [r7, #12]
 800fee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee2:	7a5b      	ldrb	r3, [r3, #9]
 800fee4:	60bb      	str	r3, [r7, #8]
 800fee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee8:	7a9b      	ldrb	r3, [r3, #10]
 800feea:	607b      	str	r3, [r7, #4]
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	7adb      	ldrb	r3, [r3, #11]
 800fef0:	603b      	str	r3, [r7, #0]
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	899b      	ldrh	r3, [r3, #12]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7f3 fc4a 	bl	8003792 <lwip_htons>
 800fefe:	4603      	mov	r3, r0
 800ff00:	9309      	str	r3, [sp, #36]	; 0x24
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	9208      	str	r2, [sp, #32]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	9207      	str	r2, [sp, #28]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	9206      	str	r2, [sp, #24]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	9205      	str	r2, [sp, #20]
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	9204      	str	r2, [sp, #16]
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	9303      	str	r3, [sp, #12]
 800ff1a:	9602      	str	r6, [sp, #8]
 800ff1c:	9501      	str	r5, [sp, #4]
 800ff1e:	9400      	str	r4, [sp, #0]
 800ff20:	4653      	mov	r3, sl
 800ff22:	464a      	mov	r2, r9
 800ff24:	4641      	mov	r1, r8
 800ff26:	4845      	ldr	r0, [pc, #276]	; (801003c <ethernet_input+0x1c8>)
 800ff28:	f000 f92a 	bl	8010180 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ff2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2e:	7b1a      	ldrb	r2, [r3, #12]
 800ff30:	7b5b      	ldrb	r3, [r3, #13]
 800ff32:	021b      	lsls	r3, r3, #8
 800ff34:	4313      	orrs	r3, r2
 800ff36:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 0301 	and.w	r3, r3, #1
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d023      	beq.n	800ff8c <ethernet_input+0x118>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d10f      	bne.n	800ff6c <ethernet_input+0xf8>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	785b      	ldrb	r3, [r3, #1]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d11b      	bne.n	800ff8c <ethernet_input+0x118>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ff54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff56:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff58:	2b5e      	cmp	r3, #94	; 0x5e
 800ff5a:	d117      	bne.n	800ff8c <ethernet_input+0x118>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	7b5b      	ldrb	r3, [r3, #13]
 800ff60:	f043 0310 	orr.w	r3, r3, #16
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	735a      	strb	r2, [r3, #13]
 800ff6a:	e00f      	b.n	800ff8c <ethernet_input+0x118>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ff6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6e:	2206      	movs	r2, #6
 800ff70:	4933      	ldr	r1, [pc, #204]	; (8010040 <ethernet_input+0x1cc>)
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 f8e2 	bl	801013c <memcmp>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d106      	bne.n	800ff8c <ethernet_input+0x118>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	7b5b      	ldrb	r3, [r3, #13]
 800ff82:	f043 0308 	orr.w	r3, r3, #8
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ff8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff8e:	2b08      	cmp	r3, #8
 800ff90:	d003      	beq.n	800ff9a <ethernet_input+0x126>
 800ff92:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ff96:	d020      	beq.n	800ffda <ethernet_input+0x166>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ff98:	e046      	b.n	8010028 <ethernet_input+0x1b4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffa0:	f003 0308 	and.w	r3, r3, #8
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d03c      	beq.n	8010022 <ethernet_input+0x1ae>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffaa:	4619      	mov	r1, r3
 800ffac:	69f8      	ldr	r0, [r7, #28]
 800ffae:	f7f4 fedf 	bl	8004d70 <pbuf_remove_header>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00b      	beq.n	800ffd0 <ethernet_input+0x15c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	891b      	ldrh	r3, [r3, #8]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4820      	ldr	r0, [pc, #128]	; (8010044 <ethernet_input+0x1d0>)
 800ffc4:	f000 f8dc 	bl	8010180 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 800ffc8:	481f      	ldr	r0, [pc, #124]	; (8010048 <ethernet_input+0x1d4>)
 800ffca:	f000 f8d9 	bl	8010180 <iprintf>
        goto free_and_return;
 800ffce:	e02b      	b.n	8010028 <ethernet_input+0x1b4>
        ip4_input(p, netif);
 800ffd0:	69b9      	ldr	r1, [r7, #24]
 800ffd2:	69f8      	ldr	r0, [r7, #28]
 800ffd4:	f7fe fd36 	bl	800ea44 <ip4_input>
      break;
 800ffd8:	e01f      	b.n	801001a <ethernet_input+0x1a6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffe0:	f003 0308 	and.w	r3, r3, #8
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d01e      	beq.n	8010026 <ethernet_input+0x1b2>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffea:	4619      	mov	r1, r3
 800ffec:	69f8      	ldr	r0, [r7, #28]
 800ffee:	f7f4 febf 	bl	8004d70 <pbuf_remove_header>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00b      	beq.n	8010010 <ethernet_input+0x19c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	891b      	ldrh	r3, [r3, #8]
 800fffc:	4619      	mov	r1, r3
 800fffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010000:	461a      	mov	r2, r3
 8010002:	4812      	ldr	r0, [pc, #72]	; (801004c <ethernet_input+0x1d8>)
 8010004:	f000 f8bc 	bl	8010180 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 8010008:	480f      	ldr	r0, [pc, #60]	; (8010048 <ethernet_input+0x1d4>)
 801000a:	f000 f8b9 	bl	8010180 <iprintf>
        goto free_and_return;
 801000e:	e00b      	b.n	8010028 <ethernet_input+0x1b4>
        etharp_input(p, netif);
 8010010:	69b9      	ldr	r1, [r7, #24]
 8010012:	69f8      	ldr	r0, [r7, #28]
 8010014:	f7fd fe0a 	bl	800dc2c <etharp_input>
      break;
 8010018:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	e008      	b.n	8010030 <ethernet_input+0x1bc>
    goto free_and_return;
 801001e:	bf00      	nop
 8010020:	e002      	b.n	8010028 <ethernet_input+0x1b4>
        goto free_and_return;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <ethernet_input+0x1b4>
        goto free_and_return;
 8010026:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010028:	69f8      	ldr	r0, [r7, #28]
 801002a:	f7f4 ff27 	bl	8004e7c <pbuf_free>
  return ERR_OK;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3730      	adds	r7, #48	; 0x30
 8010034:	46bd      	mov	sp, r7
 8010036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801003a:	bf00      	nop
 801003c:	080159d8 	.word	0x080159d8
 8010040:	08015d20 	.word	0x08015d20
 8010044:	08015a54 	.word	0x08015a54
 8010048:	08015a90 	.word	0x08015a90
 801004c:	08015ab4 	.word	0x08015ab4

08010050 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
 801005c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801005e:	8c3b      	ldrh	r3, [r7, #32]
 8010060:	4618      	mov	r0, r3
 8010062:	f7f3 fb96 	bl	8003792 <lwip_htons>
 8010066:	4603      	mov	r3, r0
 8010068:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801006a:	210e      	movs	r1, #14
 801006c:	68b8      	ldr	r0, [r7, #8]
 801006e:	f7f4 fe6f 	bl	8004d50 <pbuf_add_header>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d129      	bne.n	80100cc <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	8afa      	ldrh	r2, [r7, #22]
 8010082:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	2206      	movs	r2, #6
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 f865 	bl	801015a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	3306      	adds	r3, #6
 8010094:	2206      	movs	r2, #6
 8010096:	6879      	ldr	r1, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 f85e 	bl	801015a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100a4:	2b06      	cmp	r3, #6
 80100a6:	d006      	beq.n	80100b6 <ethernet_output+0x66>
 80100a8:	4b0d      	ldr	r3, [pc, #52]	; (80100e0 <ethernet_output+0x90>)
 80100aa:	f240 1233 	movw	r2, #307	; 0x133
 80100ae:	490d      	ldr	r1, [pc, #52]	; (80100e4 <ethernet_output+0x94>)
 80100b0:	480d      	ldr	r0, [pc, #52]	; (80100e8 <ethernet_output+0x98>)
 80100b2:	f000 f865 	bl	8010180 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 80100b6:	68b9      	ldr	r1, [r7, #8]
 80100b8:	480c      	ldr	r0, [pc, #48]	; (80100ec <ethernet_output+0x9c>)
 80100ba:	f000 f861 	bl	8010180 <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	4798      	blx	r3
 80100c8:	4603      	mov	r3, r0
 80100ca:	e005      	b.n	80100d8 <ethernet_output+0x88>
      goto pbuf_header_failed;
 80100cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80100ce:	4808      	ldr	r0, [pc, #32]	; (80100f0 <ethernet_output+0xa0>)
 80100d0:	f000 f8de 	bl	8010290 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80100d4:	f06f 0301 	mvn.w	r3, #1
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	08015af8 	.word	0x08015af8
 80100e4:	08015b30 	.word	0x08015b30
 80100e8:	08015b64 	.word	0x08015b64
 80100ec:	08015b8c 	.word	0x08015b8c
 80100f0:	08015bb0 	.word	0x08015bb0

080100f4 <__libc_init_array>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	4e0d      	ldr	r6, [pc, #52]	; (801012c <__libc_init_array+0x38>)
 80100f8:	4c0d      	ldr	r4, [pc, #52]	; (8010130 <__libc_init_array+0x3c>)
 80100fa:	1ba4      	subs	r4, r4, r6
 80100fc:	10a4      	asrs	r4, r4, #2
 80100fe:	2500      	movs	r5, #0
 8010100:	42a5      	cmp	r5, r4
 8010102:	d109      	bne.n	8010118 <__libc_init_array+0x24>
 8010104:	4e0b      	ldr	r6, [pc, #44]	; (8010134 <__libc_init_array+0x40>)
 8010106:	4c0c      	ldr	r4, [pc, #48]	; (8010138 <__libc_init_array+0x44>)
 8010108:	f001 f808 	bl	801111c <_init>
 801010c:	1ba4      	subs	r4, r4, r6
 801010e:	10a4      	asrs	r4, r4, #2
 8010110:	2500      	movs	r5, #0
 8010112:	42a5      	cmp	r5, r4
 8010114:	d105      	bne.n	8010122 <__libc_init_array+0x2e>
 8010116:	bd70      	pop	{r4, r5, r6, pc}
 8010118:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801011c:	4798      	blx	r3
 801011e:	3501      	adds	r5, #1
 8010120:	e7ee      	b.n	8010100 <__libc_init_array+0xc>
 8010122:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010126:	4798      	blx	r3
 8010128:	3501      	adds	r5, #1
 801012a:	e7f2      	b.n	8010112 <__libc_init_array+0x1e>
 801012c:	08015dd0 	.word	0x08015dd0
 8010130:	08015dd0 	.word	0x08015dd0
 8010134:	08015dd0 	.word	0x08015dd0
 8010138:	08015dd4 	.word	0x08015dd4

0801013c <memcmp>:
 801013c:	b530      	push	{r4, r5, lr}
 801013e:	2400      	movs	r4, #0
 8010140:	42a2      	cmp	r2, r4
 8010142:	d101      	bne.n	8010148 <memcmp+0xc>
 8010144:	2000      	movs	r0, #0
 8010146:	e007      	b.n	8010158 <memcmp+0x1c>
 8010148:	5d03      	ldrb	r3, [r0, r4]
 801014a:	3401      	adds	r4, #1
 801014c:	190d      	adds	r5, r1, r4
 801014e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010152:	42ab      	cmp	r3, r5
 8010154:	d0f4      	beq.n	8010140 <memcmp+0x4>
 8010156:	1b58      	subs	r0, r3, r5
 8010158:	bd30      	pop	{r4, r5, pc}

0801015a <memcpy>:
 801015a:	b510      	push	{r4, lr}
 801015c:	1e43      	subs	r3, r0, #1
 801015e:	440a      	add	r2, r1
 8010160:	4291      	cmp	r1, r2
 8010162:	d100      	bne.n	8010166 <memcpy+0xc>
 8010164:	bd10      	pop	{r4, pc}
 8010166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801016a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801016e:	e7f7      	b.n	8010160 <memcpy+0x6>

08010170 <memset>:
 8010170:	4402      	add	r2, r0
 8010172:	4603      	mov	r3, r0
 8010174:	4293      	cmp	r3, r2
 8010176:	d100      	bne.n	801017a <memset+0xa>
 8010178:	4770      	bx	lr
 801017a:	f803 1b01 	strb.w	r1, [r3], #1
 801017e:	e7f9      	b.n	8010174 <memset+0x4>

08010180 <iprintf>:
 8010180:	b40f      	push	{r0, r1, r2, r3}
 8010182:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <iprintf+0x2c>)
 8010184:	b513      	push	{r0, r1, r4, lr}
 8010186:	681c      	ldr	r4, [r3, #0]
 8010188:	b124      	cbz	r4, 8010194 <iprintf+0x14>
 801018a:	69a3      	ldr	r3, [r4, #24]
 801018c:	b913      	cbnz	r3, 8010194 <iprintf+0x14>
 801018e:	4620      	mov	r0, r4
 8010190:	f000 fa6a 	bl	8010668 <__sinit>
 8010194:	ab05      	add	r3, sp, #20
 8010196:	9a04      	ldr	r2, [sp, #16]
 8010198:	68a1      	ldr	r1, [r4, #8]
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	4620      	mov	r0, r4
 801019e:	f000 fc2b 	bl	80109f8 <_vfiprintf_r>
 80101a2:	b002      	add	sp, #8
 80101a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a8:	b004      	add	sp, #16
 80101aa:	4770      	bx	lr
 80101ac:	20000018 	.word	0x20000018

080101b0 <putchar>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	4b08      	ldr	r3, [pc, #32]	; (80101d4 <putchar+0x24>)
 80101b4:	681c      	ldr	r4, [r3, #0]
 80101b6:	4605      	mov	r5, r0
 80101b8:	b124      	cbz	r4, 80101c4 <putchar+0x14>
 80101ba:	69a3      	ldr	r3, [r4, #24]
 80101bc:	b913      	cbnz	r3, 80101c4 <putchar+0x14>
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 fa52 	bl	8010668 <__sinit>
 80101c4:	68a2      	ldr	r2, [r4, #8]
 80101c6:	4629      	mov	r1, r5
 80101c8:	4620      	mov	r0, r4
 80101ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ce:	f000 beb1 	b.w	8010f34 <_putc_r>
 80101d2:	bf00      	nop
 80101d4:	20000018 	.word	0x20000018

080101d8 <_puts_r>:
 80101d8:	b570      	push	{r4, r5, r6, lr}
 80101da:	460e      	mov	r6, r1
 80101dc:	4605      	mov	r5, r0
 80101de:	b118      	cbz	r0, 80101e8 <_puts_r+0x10>
 80101e0:	6983      	ldr	r3, [r0, #24]
 80101e2:	b90b      	cbnz	r3, 80101e8 <_puts_r+0x10>
 80101e4:	f000 fa40 	bl	8010668 <__sinit>
 80101e8:	69ab      	ldr	r3, [r5, #24]
 80101ea:	68ac      	ldr	r4, [r5, #8]
 80101ec:	b913      	cbnz	r3, 80101f4 <_puts_r+0x1c>
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 fa3a 	bl	8010668 <__sinit>
 80101f4:	4b23      	ldr	r3, [pc, #140]	; (8010284 <_puts_r+0xac>)
 80101f6:	429c      	cmp	r4, r3
 80101f8:	d117      	bne.n	801022a <_puts_r+0x52>
 80101fa:	686c      	ldr	r4, [r5, #4]
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	071b      	lsls	r3, r3, #28
 8010200:	d51d      	bpl.n	801023e <_puts_r+0x66>
 8010202:	6923      	ldr	r3, [r4, #16]
 8010204:	b1db      	cbz	r3, 801023e <_puts_r+0x66>
 8010206:	3e01      	subs	r6, #1
 8010208:	68a3      	ldr	r3, [r4, #8]
 801020a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801020e:	3b01      	subs	r3, #1
 8010210:	60a3      	str	r3, [r4, #8]
 8010212:	b9e9      	cbnz	r1, 8010250 <_puts_r+0x78>
 8010214:	2b00      	cmp	r3, #0
 8010216:	da2e      	bge.n	8010276 <_puts_r+0x9e>
 8010218:	4622      	mov	r2, r4
 801021a:	210a      	movs	r1, #10
 801021c:	4628      	mov	r0, r5
 801021e:	f000 f873 	bl	8010308 <__swbuf_r>
 8010222:	3001      	adds	r0, #1
 8010224:	d011      	beq.n	801024a <_puts_r+0x72>
 8010226:	200a      	movs	r0, #10
 8010228:	e011      	b.n	801024e <_puts_r+0x76>
 801022a:	4b17      	ldr	r3, [pc, #92]	; (8010288 <_puts_r+0xb0>)
 801022c:	429c      	cmp	r4, r3
 801022e:	d101      	bne.n	8010234 <_puts_r+0x5c>
 8010230:	68ac      	ldr	r4, [r5, #8]
 8010232:	e7e3      	b.n	80101fc <_puts_r+0x24>
 8010234:	4b15      	ldr	r3, [pc, #84]	; (801028c <_puts_r+0xb4>)
 8010236:	429c      	cmp	r4, r3
 8010238:	bf08      	it	eq
 801023a:	68ec      	ldreq	r4, [r5, #12]
 801023c:	e7de      	b.n	80101fc <_puts_r+0x24>
 801023e:	4621      	mov	r1, r4
 8010240:	4628      	mov	r0, r5
 8010242:	f000 f8b3 	bl	80103ac <__swsetup_r>
 8010246:	2800      	cmp	r0, #0
 8010248:	d0dd      	beq.n	8010206 <_puts_r+0x2e>
 801024a:	f04f 30ff 	mov.w	r0, #4294967295
 801024e:	bd70      	pop	{r4, r5, r6, pc}
 8010250:	2b00      	cmp	r3, #0
 8010252:	da04      	bge.n	801025e <_puts_r+0x86>
 8010254:	69a2      	ldr	r2, [r4, #24]
 8010256:	429a      	cmp	r2, r3
 8010258:	dc06      	bgt.n	8010268 <_puts_r+0x90>
 801025a:	290a      	cmp	r1, #10
 801025c:	d004      	beq.n	8010268 <_puts_r+0x90>
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	6022      	str	r2, [r4, #0]
 8010264:	7019      	strb	r1, [r3, #0]
 8010266:	e7cf      	b.n	8010208 <_puts_r+0x30>
 8010268:	4622      	mov	r2, r4
 801026a:	4628      	mov	r0, r5
 801026c:	f000 f84c 	bl	8010308 <__swbuf_r>
 8010270:	3001      	adds	r0, #1
 8010272:	d1c9      	bne.n	8010208 <_puts_r+0x30>
 8010274:	e7e9      	b.n	801024a <_puts_r+0x72>
 8010276:	6823      	ldr	r3, [r4, #0]
 8010278:	200a      	movs	r0, #10
 801027a:	1c5a      	adds	r2, r3, #1
 801027c:	6022      	str	r2, [r4, #0]
 801027e:	7018      	strb	r0, [r3, #0]
 8010280:	e7e5      	b.n	801024e <_puts_r+0x76>
 8010282:	bf00      	nop
 8010284:	08015d54 	.word	0x08015d54
 8010288:	08015d74 	.word	0x08015d74
 801028c:	08015d34 	.word	0x08015d34

08010290 <puts>:
 8010290:	4b02      	ldr	r3, [pc, #8]	; (801029c <puts+0xc>)
 8010292:	4601      	mov	r1, r0
 8010294:	6818      	ldr	r0, [r3, #0]
 8010296:	f7ff bf9f 	b.w	80101d8 <_puts_r>
 801029a:	bf00      	nop
 801029c:	20000018 	.word	0x20000018

080102a0 <rand>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4b13      	ldr	r3, [pc, #76]	; (80102f0 <rand+0x50>)
 80102a4:	681c      	ldr	r4, [r3, #0]
 80102a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80102a8:	b97b      	cbnz	r3, 80102ca <rand+0x2a>
 80102aa:	2018      	movs	r0, #24
 80102ac:	f000 faca 	bl	8010844 <malloc>
 80102b0:	4a10      	ldr	r2, [pc, #64]	; (80102f4 <rand+0x54>)
 80102b2:	4b11      	ldr	r3, [pc, #68]	; (80102f8 <rand+0x58>)
 80102b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80102b6:	e9c0 2300 	strd	r2, r3, [r0]
 80102ba:	4b10      	ldr	r3, [pc, #64]	; (80102fc <rand+0x5c>)
 80102bc:	6083      	str	r3, [r0, #8]
 80102be:	230b      	movs	r3, #11
 80102c0:	8183      	strh	r3, [r0, #12]
 80102c2:	2201      	movs	r2, #1
 80102c4:	2300      	movs	r3, #0
 80102c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80102ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80102cc:	480c      	ldr	r0, [pc, #48]	; (8010300 <rand+0x60>)
 80102ce:	690a      	ldr	r2, [r1, #16]
 80102d0:	694b      	ldr	r3, [r1, #20]
 80102d2:	4c0c      	ldr	r4, [pc, #48]	; (8010304 <rand+0x64>)
 80102d4:	4350      	muls	r0, r2
 80102d6:	fb04 0003 	mla	r0, r4, r3, r0
 80102da:	fba2 2304 	umull	r2, r3, r2, r4
 80102de:	4403      	add	r3, r0
 80102e0:	1c54      	adds	r4, r2, #1
 80102e2:	f143 0500 	adc.w	r5, r3, #0
 80102e6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80102ea:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	20000018 	.word	0x20000018
 80102f4:	abcd330e 	.word	0xabcd330e
 80102f8:	e66d1234 	.word	0xe66d1234
 80102fc:	0005deec 	.word	0x0005deec
 8010300:	5851f42d 	.word	0x5851f42d
 8010304:	4c957f2d 	.word	0x4c957f2d

08010308 <__swbuf_r>:
 8010308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030a:	460e      	mov	r6, r1
 801030c:	4614      	mov	r4, r2
 801030e:	4605      	mov	r5, r0
 8010310:	b118      	cbz	r0, 801031a <__swbuf_r+0x12>
 8010312:	6983      	ldr	r3, [r0, #24]
 8010314:	b90b      	cbnz	r3, 801031a <__swbuf_r+0x12>
 8010316:	f000 f9a7 	bl	8010668 <__sinit>
 801031a:	4b21      	ldr	r3, [pc, #132]	; (80103a0 <__swbuf_r+0x98>)
 801031c:	429c      	cmp	r4, r3
 801031e:	d12a      	bne.n	8010376 <__swbuf_r+0x6e>
 8010320:	686c      	ldr	r4, [r5, #4]
 8010322:	69a3      	ldr	r3, [r4, #24]
 8010324:	60a3      	str	r3, [r4, #8]
 8010326:	89a3      	ldrh	r3, [r4, #12]
 8010328:	071a      	lsls	r2, r3, #28
 801032a:	d52e      	bpl.n	801038a <__swbuf_r+0x82>
 801032c:	6923      	ldr	r3, [r4, #16]
 801032e:	b363      	cbz	r3, 801038a <__swbuf_r+0x82>
 8010330:	6923      	ldr	r3, [r4, #16]
 8010332:	6820      	ldr	r0, [r4, #0]
 8010334:	1ac0      	subs	r0, r0, r3
 8010336:	6963      	ldr	r3, [r4, #20]
 8010338:	b2f6      	uxtb	r6, r6
 801033a:	4283      	cmp	r3, r0
 801033c:	4637      	mov	r7, r6
 801033e:	dc04      	bgt.n	801034a <__swbuf_r+0x42>
 8010340:	4621      	mov	r1, r4
 8010342:	4628      	mov	r0, r5
 8010344:	f000 f926 	bl	8010594 <_fflush_r>
 8010348:	bb28      	cbnz	r0, 8010396 <__swbuf_r+0x8e>
 801034a:	68a3      	ldr	r3, [r4, #8]
 801034c:	3b01      	subs	r3, #1
 801034e:	60a3      	str	r3, [r4, #8]
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	1c5a      	adds	r2, r3, #1
 8010354:	6022      	str	r2, [r4, #0]
 8010356:	701e      	strb	r6, [r3, #0]
 8010358:	6963      	ldr	r3, [r4, #20]
 801035a:	3001      	adds	r0, #1
 801035c:	4283      	cmp	r3, r0
 801035e:	d004      	beq.n	801036a <__swbuf_r+0x62>
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	07db      	lsls	r3, r3, #31
 8010364:	d519      	bpl.n	801039a <__swbuf_r+0x92>
 8010366:	2e0a      	cmp	r6, #10
 8010368:	d117      	bne.n	801039a <__swbuf_r+0x92>
 801036a:	4621      	mov	r1, r4
 801036c:	4628      	mov	r0, r5
 801036e:	f000 f911 	bl	8010594 <_fflush_r>
 8010372:	b190      	cbz	r0, 801039a <__swbuf_r+0x92>
 8010374:	e00f      	b.n	8010396 <__swbuf_r+0x8e>
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <__swbuf_r+0x9c>)
 8010378:	429c      	cmp	r4, r3
 801037a:	d101      	bne.n	8010380 <__swbuf_r+0x78>
 801037c:	68ac      	ldr	r4, [r5, #8]
 801037e:	e7d0      	b.n	8010322 <__swbuf_r+0x1a>
 8010380:	4b09      	ldr	r3, [pc, #36]	; (80103a8 <__swbuf_r+0xa0>)
 8010382:	429c      	cmp	r4, r3
 8010384:	bf08      	it	eq
 8010386:	68ec      	ldreq	r4, [r5, #12]
 8010388:	e7cb      	b.n	8010322 <__swbuf_r+0x1a>
 801038a:	4621      	mov	r1, r4
 801038c:	4628      	mov	r0, r5
 801038e:	f000 f80d 	bl	80103ac <__swsetup_r>
 8010392:	2800      	cmp	r0, #0
 8010394:	d0cc      	beq.n	8010330 <__swbuf_r+0x28>
 8010396:	f04f 37ff 	mov.w	r7, #4294967295
 801039a:	4638      	mov	r0, r7
 801039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801039e:	bf00      	nop
 80103a0:	08015d54 	.word	0x08015d54
 80103a4:	08015d74 	.word	0x08015d74
 80103a8:	08015d34 	.word	0x08015d34

080103ac <__swsetup_r>:
 80103ac:	4b32      	ldr	r3, [pc, #200]	; (8010478 <__swsetup_r+0xcc>)
 80103ae:	b570      	push	{r4, r5, r6, lr}
 80103b0:	681d      	ldr	r5, [r3, #0]
 80103b2:	4606      	mov	r6, r0
 80103b4:	460c      	mov	r4, r1
 80103b6:	b125      	cbz	r5, 80103c2 <__swsetup_r+0x16>
 80103b8:	69ab      	ldr	r3, [r5, #24]
 80103ba:	b913      	cbnz	r3, 80103c2 <__swsetup_r+0x16>
 80103bc:	4628      	mov	r0, r5
 80103be:	f000 f953 	bl	8010668 <__sinit>
 80103c2:	4b2e      	ldr	r3, [pc, #184]	; (801047c <__swsetup_r+0xd0>)
 80103c4:	429c      	cmp	r4, r3
 80103c6:	d10f      	bne.n	80103e8 <__swsetup_r+0x3c>
 80103c8:	686c      	ldr	r4, [r5, #4]
 80103ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	0715      	lsls	r5, r2, #28
 80103d2:	d42c      	bmi.n	801042e <__swsetup_r+0x82>
 80103d4:	06d0      	lsls	r0, r2, #27
 80103d6:	d411      	bmi.n	80103fc <__swsetup_r+0x50>
 80103d8:	2209      	movs	r2, #9
 80103da:	6032      	str	r2, [r6, #0]
 80103dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103e0:	81a3      	strh	r3, [r4, #12]
 80103e2:	f04f 30ff 	mov.w	r0, #4294967295
 80103e6:	e03e      	b.n	8010466 <__swsetup_r+0xba>
 80103e8:	4b25      	ldr	r3, [pc, #148]	; (8010480 <__swsetup_r+0xd4>)
 80103ea:	429c      	cmp	r4, r3
 80103ec:	d101      	bne.n	80103f2 <__swsetup_r+0x46>
 80103ee:	68ac      	ldr	r4, [r5, #8]
 80103f0:	e7eb      	b.n	80103ca <__swsetup_r+0x1e>
 80103f2:	4b24      	ldr	r3, [pc, #144]	; (8010484 <__swsetup_r+0xd8>)
 80103f4:	429c      	cmp	r4, r3
 80103f6:	bf08      	it	eq
 80103f8:	68ec      	ldreq	r4, [r5, #12]
 80103fa:	e7e6      	b.n	80103ca <__swsetup_r+0x1e>
 80103fc:	0751      	lsls	r1, r2, #29
 80103fe:	d512      	bpl.n	8010426 <__swsetup_r+0x7a>
 8010400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010402:	b141      	cbz	r1, 8010416 <__swsetup_r+0x6a>
 8010404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010408:	4299      	cmp	r1, r3
 801040a:	d002      	beq.n	8010412 <__swsetup_r+0x66>
 801040c:	4630      	mov	r0, r6
 801040e:	f000 fa21 	bl	8010854 <_free_r>
 8010412:	2300      	movs	r3, #0
 8010414:	6363      	str	r3, [r4, #52]	; 0x34
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801041c:	81a3      	strh	r3, [r4, #12]
 801041e:	2300      	movs	r3, #0
 8010420:	6063      	str	r3, [r4, #4]
 8010422:	6923      	ldr	r3, [r4, #16]
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	f043 0308 	orr.w	r3, r3, #8
 801042c:	81a3      	strh	r3, [r4, #12]
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	b94b      	cbnz	r3, 8010446 <__swsetup_r+0x9a>
 8010432:	89a3      	ldrh	r3, [r4, #12]
 8010434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801043c:	d003      	beq.n	8010446 <__swsetup_r+0x9a>
 801043e:	4621      	mov	r1, r4
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f9bf 	bl	80107c4 <__smakebuf_r>
 8010446:	89a2      	ldrh	r2, [r4, #12]
 8010448:	f012 0301 	ands.w	r3, r2, #1
 801044c:	d00c      	beq.n	8010468 <__swsetup_r+0xbc>
 801044e:	2300      	movs	r3, #0
 8010450:	60a3      	str	r3, [r4, #8]
 8010452:	6963      	ldr	r3, [r4, #20]
 8010454:	425b      	negs	r3, r3
 8010456:	61a3      	str	r3, [r4, #24]
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	b953      	cbnz	r3, 8010472 <__swsetup_r+0xc6>
 801045c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010460:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010464:	d1ba      	bne.n	80103dc <__swsetup_r+0x30>
 8010466:	bd70      	pop	{r4, r5, r6, pc}
 8010468:	0792      	lsls	r2, r2, #30
 801046a:	bf58      	it	pl
 801046c:	6963      	ldrpl	r3, [r4, #20]
 801046e:	60a3      	str	r3, [r4, #8]
 8010470:	e7f2      	b.n	8010458 <__swsetup_r+0xac>
 8010472:	2000      	movs	r0, #0
 8010474:	e7f7      	b.n	8010466 <__swsetup_r+0xba>
 8010476:	bf00      	nop
 8010478:	20000018 	.word	0x20000018
 801047c:	08015d54 	.word	0x08015d54
 8010480:	08015d74 	.word	0x08015d74
 8010484:	08015d34 	.word	0x08015d34

08010488 <__sflush_r>:
 8010488:	898a      	ldrh	r2, [r1, #12]
 801048a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801048e:	4605      	mov	r5, r0
 8010490:	0710      	lsls	r0, r2, #28
 8010492:	460c      	mov	r4, r1
 8010494:	d458      	bmi.n	8010548 <__sflush_r+0xc0>
 8010496:	684b      	ldr	r3, [r1, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	dc05      	bgt.n	80104a8 <__sflush_r+0x20>
 801049c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801049e:	2b00      	cmp	r3, #0
 80104a0:	dc02      	bgt.n	80104a8 <__sflush_r+0x20>
 80104a2:	2000      	movs	r0, #0
 80104a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104aa:	2e00      	cmp	r6, #0
 80104ac:	d0f9      	beq.n	80104a2 <__sflush_r+0x1a>
 80104ae:	2300      	movs	r3, #0
 80104b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104b4:	682f      	ldr	r7, [r5, #0]
 80104b6:	6a21      	ldr	r1, [r4, #32]
 80104b8:	602b      	str	r3, [r5, #0]
 80104ba:	d032      	beq.n	8010522 <__sflush_r+0x9a>
 80104bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104be:	89a3      	ldrh	r3, [r4, #12]
 80104c0:	075a      	lsls	r2, r3, #29
 80104c2:	d505      	bpl.n	80104d0 <__sflush_r+0x48>
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	1ac0      	subs	r0, r0, r3
 80104c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ca:	b10b      	cbz	r3, 80104d0 <__sflush_r+0x48>
 80104cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104ce:	1ac0      	subs	r0, r0, r3
 80104d0:	2300      	movs	r3, #0
 80104d2:	4602      	mov	r2, r0
 80104d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104d6:	6a21      	ldr	r1, [r4, #32]
 80104d8:	4628      	mov	r0, r5
 80104da:	47b0      	blx	r6
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	89a3      	ldrh	r3, [r4, #12]
 80104e0:	d106      	bne.n	80104f0 <__sflush_r+0x68>
 80104e2:	6829      	ldr	r1, [r5, #0]
 80104e4:	291d      	cmp	r1, #29
 80104e6:	d848      	bhi.n	801057a <__sflush_r+0xf2>
 80104e8:	4a29      	ldr	r2, [pc, #164]	; (8010590 <__sflush_r+0x108>)
 80104ea:	40ca      	lsrs	r2, r1
 80104ec:	07d6      	lsls	r6, r2, #31
 80104ee:	d544      	bpl.n	801057a <__sflush_r+0xf2>
 80104f0:	2200      	movs	r2, #0
 80104f2:	6062      	str	r2, [r4, #4]
 80104f4:	04d9      	lsls	r1, r3, #19
 80104f6:	6922      	ldr	r2, [r4, #16]
 80104f8:	6022      	str	r2, [r4, #0]
 80104fa:	d504      	bpl.n	8010506 <__sflush_r+0x7e>
 80104fc:	1c42      	adds	r2, r0, #1
 80104fe:	d101      	bne.n	8010504 <__sflush_r+0x7c>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	b903      	cbnz	r3, 8010506 <__sflush_r+0x7e>
 8010504:	6560      	str	r0, [r4, #84]	; 0x54
 8010506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010508:	602f      	str	r7, [r5, #0]
 801050a:	2900      	cmp	r1, #0
 801050c:	d0c9      	beq.n	80104a2 <__sflush_r+0x1a>
 801050e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010512:	4299      	cmp	r1, r3
 8010514:	d002      	beq.n	801051c <__sflush_r+0x94>
 8010516:	4628      	mov	r0, r5
 8010518:	f000 f99c 	bl	8010854 <_free_r>
 801051c:	2000      	movs	r0, #0
 801051e:	6360      	str	r0, [r4, #52]	; 0x34
 8010520:	e7c0      	b.n	80104a4 <__sflush_r+0x1c>
 8010522:	2301      	movs	r3, #1
 8010524:	4628      	mov	r0, r5
 8010526:	47b0      	blx	r6
 8010528:	1c41      	adds	r1, r0, #1
 801052a:	d1c8      	bne.n	80104be <__sflush_r+0x36>
 801052c:	682b      	ldr	r3, [r5, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d0c5      	beq.n	80104be <__sflush_r+0x36>
 8010532:	2b1d      	cmp	r3, #29
 8010534:	d001      	beq.n	801053a <__sflush_r+0xb2>
 8010536:	2b16      	cmp	r3, #22
 8010538:	d101      	bne.n	801053e <__sflush_r+0xb6>
 801053a:	602f      	str	r7, [r5, #0]
 801053c:	e7b1      	b.n	80104a2 <__sflush_r+0x1a>
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010544:	81a3      	strh	r3, [r4, #12]
 8010546:	e7ad      	b.n	80104a4 <__sflush_r+0x1c>
 8010548:	690f      	ldr	r7, [r1, #16]
 801054a:	2f00      	cmp	r7, #0
 801054c:	d0a9      	beq.n	80104a2 <__sflush_r+0x1a>
 801054e:	0793      	lsls	r3, r2, #30
 8010550:	680e      	ldr	r6, [r1, #0]
 8010552:	bf08      	it	eq
 8010554:	694b      	ldreq	r3, [r1, #20]
 8010556:	600f      	str	r7, [r1, #0]
 8010558:	bf18      	it	ne
 801055a:	2300      	movne	r3, #0
 801055c:	eba6 0807 	sub.w	r8, r6, r7
 8010560:	608b      	str	r3, [r1, #8]
 8010562:	f1b8 0f00 	cmp.w	r8, #0
 8010566:	dd9c      	ble.n	80104a2 <__sflush_r+0x1a>
 8010568:	4643      	mov	r3, r8
 801056a:	463a      	mov	r2, r7
 801056c:	6a21      	ldr	r1, [r4, #32]
 801056e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010570:	4628      	mov	r0, r5
 8010572:	47b0      	blx	r6
 8010574:	2800      	cmp	r0, #0
 8010576:	dc06      	bgt.n	8010586 <__sflush_r+0xfe>
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801057e:	81a3      	strh	r3, [r4, #12]
 8010580:	f04f 30ff 	mov.w	r0, #4294967295
 8010584:	e78e      	b.n	80104a4 <__sflush_r+0x1c>
 8010586:	4407      	add	r7, r0
 8010588:	eba8 0800 	sub.w	r8, r8, r0
 801058c:	e7e9      	b.n	8010562 <__sflush_r+0xda>
 801058e:	bf00      	nop
 8010590:	20400001 	.word	0x20400001

08010594 <_fflush_r>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	690b      	ldr	r3, [r1, #16]
 8010598:	4605      	mov	r5, r0
 801059a:	460c      	mov	r4, r1
 801059c:	b1db      	cbz	r3, 80105d6 <_fflush_r+0x42>
 801059e:	b118      	cbz	r0, 80105a8 <_fflush_r+0x14>
 80105a0:	6983      	ldr	r3, [r0, #24]
 80105a2:	b90b      	cbnz	r3, 80105a8 <_fflush_r+0x14>
 80105a4:	f000 f860 	bl	8010668 <__sinit>
 80105a8:	4b0c      	ldr	r3, [pc, #48]	; (80105dc <_fflush_r+0x48>)
 80105aa:	429c      	cmp	r4, r3
 80105ac:	d109      	bne.n	80105c2 <_fflush_r+0x2e>
 80105ae:	686c      	ldr	r4, [r5, #4]
 80105b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b4:	b17b      	cbz	r3, 80105d6 <_fflush_r+0x42>
 80105b6:	4621      	mov	r1, r4
 80105b8:	4628      	mov	r0, r5
 80105ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105be:	f7ff bf63 	b.w	8010488 <__sflush_r>
 80105c2:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <_fflush_r+0x4c>)
 80105c4:	429c      	cmp	r4, r3
 80105c6:	d101      	bne.n	80105cc <_fflush_r+0x38>
 80105c8:	68ac      	ldr	r4, [r5, #8]
 80105ca:	e7f1      	b.n	80105b0 <_fflush_r+0x1c>
 80105cc:	4b05      	ldr	r3, [pc, #20]	; (80105e4 <_fflush_r+0x50>)
 80105ce:	429c      	cmp	r4, r3
 80105d0:	bf08      	it	eq
 80105d2:	68ec      	ldreq	r4, [r5, #12]
 80105d4:	e7ec      	b.n	80105b0 <_fflush_r+0x1c>
 80105d6:	2000      	movs	r0, #0
 80105d8:	bd38      	pop	{r3, r4, r5, pc}
 80105da:	bf00      	nop
 80105dc:	08015d54 	.word	0x08015d54
 80105e0:	08015d74 	.word	0x08015d74
 80105e4:	08015d34 	.word	0x08015d34

080105e8 <std>:
 80105e8:	2300      	movs	r3, #0
 80105ea:	b510      	push	{r4, lr}
 80105ec:	4604      	mov	r4, r0
 80105ee:	e9c0 3300 	strd	r3, r3, [r0]
 80105f2:	6083      	str	r3, [r0, #8]
 80105f4:	8181      	strh	r1, [r0, #12]
 80105f6:	6643      	str	r3, [r0, #100]	; 0x64
 80105f8:	81c2      	strh	r2, [r0, #14]
 80105fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105fe:	6183      	str	r3, [r0, #24]
 8010600:	4619      	mov	r1, r3
 8010602:	2208      	movs	r2, #8
 8010604:	305c      	adds	r0, #92	; 0x5c
 8010606:	f7ff fdb3 	bl	8010170 <memset>
 801060a:	4b05      	ldr	r3, [pc, #20]	; (8010620 <std+0x38>)
 801060c:	6263      	str	r3, [r4, #36]	; 0x24
 801060e:	4b05      	ldr	r3, [pc, #20]	; (8010624 <std+0x3c>)
 8010610:	62a3      	str	r3, [r4, #40]	; 0x28
 8010612:	4b05      	ldr	r3, [pc, #20]	; (8010628 <std+0x40>)
 8010614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010616:	4b05      	ldr	r3, [pc, #20]	; (801062c <std+0x44>)
 8010618:	6224      	str	r4, [r4, #32]
 801061a:	6323      	str	r3, [r4, #48]	; 0x30
 801061c:	bd10      	pop	{r4, pc}
 801061e:	bf00      	nop
 8010620:	08010fc1 	.word	0x08010fc1
 8010624:	08010fe3 	.word	0x08010fe3
 8010628:	0801101b 	.word	0x0801101b
 801062c:	0801103f 	.word	0x0801103f

08010630 <_cleanup_r>:
 8010630:	4901      	ldr	r1, [pc, #4]	; (8010638 <_cleanup_r+0x8>)
 8010632:	f000 b885 	b.w	8010740 <_fwalk_reent>
 8010636:	bf00      	nop
 8010638:	08010595 	.word	0x08010595

0801063c <__sfmoreglue>:
 801063c:	b570      	push	{r4, r5, r6, lr}
 801063e:	1e4a      	subs	r2, r1, #1
 8010640:	2568      	movs	r5, #104	; 0x68
 8010642:	4355      	muls	r5, r2
 8010644:	460e      	mov	r6, r1
 8010646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801064a:	f000 f951 	bl	80108f0 <_malloc_r>
 801064e:	4604      	mov	r4, r0
 8010650:	b140      	cbz	r0, 8010664 <__sfmoreglue+0x28>
 8010652:	2100      	movs	r1, #0
 8010654:	e9c0 1600 	strd	r1, r6, [r0]
 8010658:	300c      	adds	r0, #12
 801065a:	60a0      	str	r0, [r4, #8]
 801065c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010660:	f7ff fd86 	bl	8010170 <memset>
 8010664:	4620      	mov	r0, r4
 8010666:	bd70      	pop	{r4, r5, r6, pc}

08010668 <__sinit>:
 8010668:	6983      	ldr	r3, [r0, #24]
 801066a:	b510      	push	{r4, lr}
 801066c:	4604      	mov	r4, r0
 801066e:	bb33      	cbnz	r3, 80106be <__sinit+0x56>
 8010670:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010674:	6503      	str	r3, [r0, #80]	; 0x50
 8010676:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <__sinit+0x58>)
 8010678:	4a12      	ldr	r2, [pc, #72]	; (80106c4 <__sinit+0x5c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	6282      	str	r2, [r0, #40]	; 0x28
 801067e:	4298      	cmp	r0, r3
 8010680:	bf04      	itt	eq
 8010682:	2301      	moveq	r3, #1
 8010684:	6183      	streq	r3, [r0, #24]
 8010686:	f000 f81f 	bl	80106c8 <__sfp>
 801068a:	6060      	str	r0, [r4, #4]
 801068c:	4620      	mov	r0, r4
 801068e:	f000 f81b 	bl	80106c8 <__sfp>
 8010692:	60a0      	str	r0, [r4, #8]
 8010694:	4620      	mov	r0, r4
 8010696:	f000 f817 	bl	80106c8 <__sfp>
 801069a:	2200      	movs	r2, #0
 801069c:	60e0      	str	r0, [r4, #12]
 801069e:	2104      	movs	r1, #4
 80106a0:	6860      	ldr	r0, [r4, #4]
 80106a2:	f7ff ffa1 	bl	80105e8 <std>
 80106a6:	2201      	movs	r2, #1
 80106a8:	2109      	movs	r1, #9
 80106aa:	68a0      	ldr	r0, [r4, #8]
 80106ac:	f7ff ff9c 	bl	80105e8 <std>
 80106b0:	2202      	movs	r2, #2
 80106b2:	2112      	movs	r1, #18
 80106b4:	68e0      	ldr	r0, [r4, #12]
 80106b6:	f7ff ff97 	bl	80105e8 <std>
 80106ba:	2301      	movs	r3, #1
 80106bc:	61a3      	str	r3, [r4, #24]
 80106be:	bd10      	pop	{r4, pc}
 80106c0:	08015d30 	.word	0x08015d30
 80106c4:	08010631 	.word	0x08010631

080106c8 <__sfp>:
 80106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ca:	4b1b      	ldr	r3, [pc, #108]	; (8010738 <__sfp+0x70>)
 80106cc:	681e      	ldr	r6, [r3, #0]
 80106ce:	69b3      	ldr	r3, [r6, #24]
 80106d0:	4607      	mov	r7, r0
 80106d2:	b913      	cbnz	r3, 80106da <__sfp+0x12>
 80106d4:	4630      	mov	r0, r6
 80106d6:	f7ff ffc7 	bl	8010668 <__sinit>
 80106da:	3648      	adds	r6, #72	; 0x48
 80106dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	d503      	bpl.n	80106ec <__sfp+0x24>
 80106e4:	6833      	ldr	r3, [r6, #0]
 80106e6:	b133      	cbz	r3, 80106f6 <__sfp+0x2e>
 80106e8:	6836      	ldr	r6, [r6, #0]
 80106ea:	e7f7      	b.n	80106dc <__sfp+0x14>
 80106ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106f0:	b16d      	cbz	r5, 801070e <__sfp+0x46>
 80106f2:	3468      	adds	r4, #104	; 0x68
 80106f4:	e7f4      	b.n	80106e0 <__sfp+0x18>
 80106f6:	2104      	movs	r1, #4
 80106f8:	4638      	mov	r0, r7
 80106fa:	f7ff ff9f 	bl	801063c <__sfmoreglue>
 80106fe:	6030      	str	r0, [r6, #0]
 8010700:	2800      	cmp	r0, #0
 8010702:	d1f1      	bne.n	80106e8 <__sfp+0x20>
 8010704:	230c      	movs	r3, #12
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4604      	mov	r4, r0
 801070a:	4620      	mov	r0, r4
 801070c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801070e:	4b0b      	ldr	r3, [pc, #44]	; (801073c <__sfp+0x74>)
 8010710:	6665      	str	r5, [r4, #100]	; 0x64
 8010712:	e9c4 5500 	strd	r5, r5, [r4]
 8010716:	60a5      	str	r5, [r4, #8]
 8010718:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801071c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010720:	2208      	movs	r2, #8
 8010722:	4629      	mov	r1, r5
 8010724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010728:	f7ff fd22 	bl	8010170 <memset>
 801072c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010734:	e7e9      	b.n	801070a <__sfp+0x42>
 8010736:	bf00      	nop
 8010738:	08015d30 	.word	0x08015d30
 801073c:	ffff0001 	.word	0xffff0001

08010740 <_fwalk_reent>:
 8010740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010744:	4680      	mov	r8, r0
 8010746:	4689      	mov	r9, r1
 8010748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801074c:	2600      	movs	r6, #0
 801074e:	b914      	cbnz	r4, 8010756 <_fwalk_reent+0x16>
 8010750:	4630      	mov	r0, r6
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801075a:	3f01      	subs	r7, #1
 801075c:	d501      	bpl.n	8010762 <_fwalk_reent+0x22>
 801075e:	6824      	ldr	r4, [r4, #0]
 8010760:	e7f5      	b.n	801074e <_fwalk_reent+0xe>
 8010762:	89ab      	ldrh	r3, [r5, #12]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d907      	bls.n	8010778 <_fwalk_reent+0x38>
 8010768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801076c:	3301      	adds	r3, #1
 801076e:	d003      	beq.n	8010778 <_fwalk_reent+0x38>
 8010770:	4629      	mov	r1, r5
 8010772:	4640      	mov	r0, r8
 8010774:	47c8      	blx	r9
 8010776:	4306      	orrs	r6, r0
 8010778:	3568      	adds	r5, #104	; 0x68
 801077a:	e7ee      	b.n	801075a <_fwalk_reent+0x1a>

0801077c <__swhatbuf_r>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	460e      	mov	r6, r1
 8010780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010784:	2900      	cmp	r1, #0
 8010786:	b096      	sub	sp, #88	; 0x58
 8010788:	4614      	mov	r4, r2
 801078a:	461d      	mov	r5, r3
 801078c:	da07      	bge.n	801079e <__swhatbuf_r+0x22>
 801078e:	2300      	movs	r3, #0
 8010790:	602b      	str	r3, [r5, #0]
 8010792:	89b3      	ldrh	r3, [r6, #12]
 8010794:	061a      	lsls	r2, r3, #24
 8010796:	d410      	bmi.n	80107ba <__swhatbuf_r+0x3e>
 8010798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801079c:	e00e      	b.n	80107bc <__swhatbuf_r+0x40>
 801079e:	466a      	mov	r2, sp
 80107a0:	f000 fc74 	bl	801108c <_fstat_r>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	dbf2      	blt.n	801078e <__swhatbuf_r+0x12>
 80107a8:	9a01      	ldr	r2, [sp, #4]
 80107aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107b2:	425a      	negs	r2, r3
 80107b4:	415a      	adcs	r2, r3
 80107b6:	602a      	str	r2, [r5, #0]
 80107b8:	e7ee      	b.n	8010798 <__swhatbuf_r+0x1c>
 80107ba:	2340      	movs	r3, #64	; 0x40
 80107bc:	2000      	movs	r0, #0
 80107be:	6023      	str	r3, [r4, #0]
 80107c0:	b016      	add	sp, #88	; 0x58
 80107c2:	bd70      	pop	{r4, r5, r6, pc}

080107c4 <__smakebuf_r>:
 80107c4:	898b      	ldrh	r3, [r1, #12]
 80107c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107c8:	079d      	lsls	r5, r3, #30
 80107ca:	4606      	mov	r6, r0
 80107cc:	460c      	mov	r4, r1
 80107ce:	d507      	bpl.n	80107e0 <__smakebuf_r+0x1c>
 80107d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	6123      	str	r3, [r4, #16]
 80107d8:	2301      	movs	r3, #1
 80107da:	6163      	str	r3, [r4, #20]
 80107dc:	b002      	add	sp, #8
 80107de:	bd70      	pop	{r4, r5, r6, pc}
 80107e0:	ab01      	add	r3, sp, #4
 80107e2:	466a      	mov	r2, sp
 80107e4:	f7ff ffca 	bl	801077c <__swhatbuf_r>
 80107e8:	9900      	ldr	r1, [sp, #0]
 80107ea:	4605      	mov	r5, r0
 80107ec:	4630      	mov	r0, r6
 80107ee:	f000 f87f 	bl	80108f0 <_malloc_r>
 80107f2:	b948      	cbnz	r0, 8010808 <__smakebuf_r+0x44>
 80107f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107f8:	059a      	lsls	r2, r3, #22
 80107fa:	d4ef      	bmi.n	80107dc <__smakebuf_r+0x18>
 80107fc:	f023 0303 	bic.w	r3, r3, #3
 8010800:	f043 0302 	orr.w	r3, r3, #2
 8010804:	81a3      	strh	r3, [r4, #12]
 8010806:	e7e3      	b.n	80107d0 <__smakebuf_r+0xc>
 8010808:	4b0d      	ldr	r3, [pc, #52]	; (8010840 <__smakebuf_r+0x7c>)
 801080a:	62b3      	str	r3, [r6, #40]	; 0x28
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	6020      	str	r0, [r4, #0]
 8010810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010814:	81a3      	strh	r3, [r4, #12]
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	6163      	str	r3, [r4, #20]
 801081a:	9b01      	ldr	r3, [sp, #4]
 801081c:	6120      	str	r0, [r4, #16]
 801081e:	b15b      	cbz	r3, 8010838 <__smakebuf_r+0x74>
 8010820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010824:	4630      	mov	r0, r6
 8010826:	f000 fc43 	bl	80110b0 <_isatty_r>
 801082a:	b128      	cbz	r0, 8010838 <__smakebuf_r+0x74>
 801082c:	89a3      	ldrh	r3, [r4, #12]
 801082e:	f023 0303 	bic.w	r3, r3, #3
 8010832:	f043 0301 	orr.w	r3, r3, #1
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	89a3      	ldrh	r3, [r4, #12]
 801083a:	431d      	orrs	r5, r3
 801083c:	81a5      	strh	r5, [r4, #12]
 801083e:	e7cd      	b.n	80107dc <__smakebuf_r+0x18>
 8010840:	08010631 	.word	0x08010631

08010844 <malloc>:
 8010844:	4b02      	ldr	r3, [pc, #8]	; (8010850 <malloc+0xc>)
 8010846:	4601      	mov	r1, r0
 8010848:	6818      	ldr	r0, [r3, #0]
 801084a:	f000 b851 	b.w	80108f0 <_malloc_r>
 801084e:	bf00      	nop
 8010850:	20000018 	.word	0x20000018

08010854 <_free_r>:
 8010854:	b538      	push	{r3, r4, r5, lr}
 8010856:	4605      	mov	r5, r0
 8010858:	2900      	cmp	r1, #0
 801085a:	d045      	beq.n	80108e8 <_free_r+0x94>
 801085c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010860:	1f0c      	subs	r4, r1, #4
 8010862:	2b00      	cmp	r3, #0
 8010864:	bfb8      	it	lt
 8010866:	18e4      	addlt	r4, r4, r3
 8010868:	f000 fc44 	bl	80110f4 <__malloc_lock>
 801086c:	4a1f      	ldr	r2, [pc, #124]	; (80108ec <_free_r+0x98>)
 801086e:	6813      	ldr	r3, [r2, #0]
 8010870:	4610      	mov	r0, r2
 8010872:	b933      	cbnz	r3, 8010882 <_free_r+0x2e>
 8010874:	6063      	str	r3, [r4, #4]
 8010876:	6014      	str	r4, [r2, #0]
 8010878:	4628      	mov	r0, r5
 801087a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801087e:	f000 bc3a 	b.w	80110f6 <__malloc_unlock>
 8010882:	42a3      	cmp	r3, r4
 8010884:	d90c      	bls.n	80108a0 <_free_r+0x4c>
 8010886:	6821      	ldr	r1, [r4, #0]
 8010888:	1862      	adds	r2, r4, r1
 801088a:	4293      	cmp	r3, r2
 801088c:	bf04      	itt	eq
 801088e:	681a      	ldreq	r2, [r3, #0]
 8010890:	685b      	ldreq	r3, [r3, #4]
 8010892:	6063      	str	r3, [r4, #4]
 8010894:	bf04      	itt	eq
 8010896:	1852      	addeq	r2, r2, r1
 8010898:	6022      	streq	r2, [r4, #0]
 801089a:	6004      	str	r4, [r0, #0]
 801089c:	e7ec      	b.n	8010878 <_free_r+0x24>
 801089e:	4613      	mov	r3, r2
 80108a0:	685a      	ldr	r2, [r3, #4]
 80108a2:	b10a      	cbz	r2, 80108a8 <_free_r+0x54>
 80108a4:	42a2      	cmp	r2, r4
 80108a6:	d9fa      	bls.n	801089e <_free_r+0x4a>
 80108a8:	6819      	ldr	r1, [r3, #0]
 80108aa:	1858      	adds	r0, r3, r1
 80108ac:	42a0      	cmp	r0, r4
 80108ae:	d10b      	bne.n	80108c8 <_free_r+0x74>
 80108b0:	6820      	ldr	r0, [r4, #0]
 80108b2:	4401      	add	r1, r0
 80108b4:	1858      	adds	r0, r3, r1
 80108b6:	4282      	cmp	r2, r0
 80108b8:	6019      	str	r1, [r3, #0]
 80108ba:	d1dd      	bne.n	8010878 <_free_r+0x24>
 80108bc:	6810      	ldr	r0, [r2, #0]
 80108be:	6852      	ldr	r2, [r2, #4]
 80108c0:	605a      	str	r2, [r3, #4]
 80108c2:	4401      	add	r1, r0
 80108c4:	6019      	str	r1, [r3, #0]
 80108c6:	e7d7      	b.n	8010878 <_free_r+0x24>
 80108c8:	d902      	bls.n	80108d0 <_free_r+0x7c>
 80108ca:	230c      	movs	r3, #12
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	e7d3      	b.n	8010878 <_free_r+0x24>
 80108d0:	6820      	ldr	r0, [r4, #0]
 80108d2:	1821      	adds	r1, r4, r0
 80108d4:	428a      	cmp	r2, r1
 80108d6:	bf04      	itt	eq
 80108d8:	6811      	ldreq	r1, [r2, #0]
 80108da:	6852      	ldreq	r2, [r2, #4]
 80108dc:	6062      	str	r2, [r4, #4]
 80108de:	bf04      	itt	eq
 80108e0:	1809      	addeq	r1, r1, r0
 80108e2:	6021      	streq	r1, [r4, #0]
 80108e4:	605c      	str	r4, [r3, #4]
 80108e6:	e7c7      	b.n	8010878 <_free_r+0x24>
 80108e8:	bd38      	pop	{r3, r4, r5, pc}
 80108ea:	bf00      	nop
 80108ec:	2000021c 	.word	0x2000021c

080108f0 <_malloc_r>:
 80108f0:	b570      	push	{r4, r5, r6, lr}
 80108f2:	1ccd      	adds	r5, r1, #3
 80108f4:	f025 0503 	bic.w	r5, r5, #3
 80108f8:	3508      	adds	r5, #8
 80108fa:	2d0c      	cmp	r5, #12
 80108fc:	bf38      	it	cc
 80108fe:	250c      	movcc	r5, #12
 8010900:	2d00      	cmp	r5, #0
 8010902:	4606      	mov	r6, r0
 8010904:	db01      	blt.n	801090a <_malloc_r+0x1a>
 8010906:	42a9      	cmp	r1, r5
 8010908:	d903      	bls.n	8010912 <_malloc_r+0x22>
 801090a:	230c      	movs	r3, #12
 801090c:	6033      	str	r3, [r6, #0]
 801090e:	2000      	movs	r0, #0
 8010910:	bd70      	pop	{r4, r5, r6, pc}
 8010912:	f000 fbef 	bl	80110f4 <__malloc_lock>
 8010916:	4a21      	ldr	r2, [pc, #132]	; (801099c <_malloc_r+0xac>)
 8010918:	6814      	ldr	r4, [r2, #0]
 801091a:	4621      	mov	r1, r4
 801091c:	b991      	cbnz	r1, 8010944 <_malloc_r+0x54>
 801091e:	4c20      	ldr	r4, [pc, #128]	; (80109a0 <_malloc_r+0xb0>)
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	b91b      	cbnz	r3, 801092c <_malloc_r+0x3c>
 8010924:	4630      	mov	r0, r6
 8010926:	f000 fb3b 	bl	8010fa0 <_sbrk_r>
 801092a:	6020      	str	r0, [r4, #0]
 801092c:	4629      	mov	r1, r5
 801092e:	4630      	mov	r0, r6
 8010930:	f000 fb36 	bl	8010fa0 <_sbrk_r>
 8010934:	1c43      	adds	r3, r0, #1
 8010936:	d124      	bne.n	8010982 <_malloc_r+0x92>
 8010938:	230c      	movs	r3, #12
 801093a:	6033      	str	r3, [r6, #0]
 801093c:	4630      	mov	r0, r6
 801093e:	f000 fbda 	bl	80110f6 <__malloc_unlock>
 8010942:	e7e4      	b.n	801090e <_malloc_r+0x1e>
 8010944:	680b      	ldr	r3, [r1, #0]
 8010946:	1b5b      	subs	r3, r3, r5
 8010948:	d418      	bmi.n	801097c <_malloc_r+0x8c>
 801094a:	2b0b      	cmp	r3, #11
 801094c:	d90f      	bls.n	801096e <_malloc_r+0x7e>
 801094e:	600b      	str	r3, [r1, #0]
 8010950:	50cd      	str	r5, [r1, r3]
 8010952:	18cc      	adds	r4, r1, r3
 8010954:	4630      	mov	r0, r6
 8010956:	f000 fbce 	bl	80110f6 <__malloc_unlock>
 801095a:	f104 000b 	add.w	r0, r4, #11
 801095e:	1d23      	adds	r3, r4, #4
 8010960:	f020 0007 	bic.w	r0, r0, #7
 8010964:	1ac3      	subs	r3, r0, r3
 8010966:	d0d3      	beq.n	8010910 <_malloc_r+0x20>
 8010968:	425a      	negs	r2, r3
 801096a:	50e2      	str	r2, [r4, r3]
 801096c:	e7d0      	b.n	8010910 <_malloc_r+0x20>
 801096e:	428c      	cmp	r4, r1
 8010970:	684b      	ldr	r3, [r1, #4]
 8010972:	bf16      	itet	ne
 8010974:	6063      	strne	r3, [r4, #4]
 8010976:	6013      	streq	r3, [r2, #0]
 8010978:	460c      	movne	r4, r1
 801097a:	e7eb      	b.n	8010954 <_malloc_r+0x64>
 801097c:	460c      	mov	r4, r1
 801097e:	6849      	ldr	r1, [r1, #4]
 8010980:	e7cc      	b.n	801091c <_malloc_r+0x2c>
 8010982:	1cc4      	adds	r4, r0, #3
 8010984:	f024 0403 	bic.w	r4, r4, #3
 8010988:	42a0      	cmp	r0, r4
 801098a:	d005      	beq.n	8010998 <_malloc_r+0xa8>
 801098c:	1a21      	subs	r1, r4, r0
 801098e:	4630      	mov	r0, r6
 8010990:	f000 fb06 	bl	8010fa0 <_sbrk_r>
 8010994:	3001      	adds	r0, #1
 8010996:	d0cf      	beq.n	8010938 <_malloc_r+0x48>
 8010998:	6025      	str	r5, [r4, #0]
 801099a:	e7db      	b.n	8010954 <_malloc_r+0x64>
 801099c:	2000021c 	.word	0x2000021c
 80109a0:	20000220 	.word	0x20000220

080109a4 <__sfputc_r>:
 80109a4:	6893      	ldr	r3, [r2, #8]
 80109a6:	3b01      	subs	r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	b410      	push	{r4}
 80109ac:	6093      	str	r3, [r2, #8]
 80109ae:	da08      	bge.n	80109c2 <__sfputc_r+0x1e>
 80109b0:	6994      	ldr	r4, [r2, #24]
 80109b2:	42a3      	cmp	r3, r4
 80109b4:	db01      	blt.n	80109ba <__sfputc_r+0x16>
 80109b6:	290a      	cmp	r1, #10
 80109b8:	d103      	bne.n	80109c2 <__sfputc_r+0x1e>
 80109ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109be:	f7ff bca3 	b.w	8010308 <__swbuf_r>
 80109c2:	6813      	ldr	r3, [r2, #0]
 80109c4:	1c58      	adds	r0, r3, #1
 80109c6:	6010      	str	r0, [r2, #0]
 80109c8:	7019      	strb	r1, [r3, #0]
 80109ca:	4608      	mov	r0, r1
 80109cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <__sfputs_r>:
 80109d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d4:	4606      	mov	r6, r0
 80109d6:	460f      	mov	r7, r1
 80109d8:	4614      	mov	r4, r2
 80109da:	18d5      	adds	r5, r2, r3
 80109dc:	42ac      	cmp	r4, r5
 80109de:	d101      	bne.n	80109e4 <__sfputs_r+0x12>
 80109e0:	2000      	movs	r0, #0
 80109e2:	e007      	b.n	80109f4 <__sfputs_r+0x22>
 80109e4:	463a      	mov	r2, r7
 80109e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ffda 	bl	80109a4 <__sfputc_r>
 80109f0:	1c43      	adds	r3, r0, #1
 80109f2:	d1f3      	bne.n	80109dc <__sfputs_r+0xa>
 80109f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109f8 <_vfiprintf_r>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	460c      	mov	r4, r1
 80109fe:	b09d      	sub	sp, #116	; 0x74
 8010a00:	4617      	mov	r7, r2
 8010a02:	461d      	mov	r5, r3
 8010a04:	4606      	mov	r6, r0
 8010a06:	b118      	cbz	r0, 8010a10 <_vfiprintf_r+0x18>
 8010a08:	6983      	ldr	r3, [r0, #24]
 8010a0a:	b90b      	cbnz	r3, 8010a10 <_vfiprintf_r+0x18>
 8010a0c:	f7ff fe2c 	bl	8010668 <__sinit>
 8010a10:	4b7c      	ldr	r3, [pc, #496]	; (8010c04 <_vfiprintf_r+0x20c>)
 8010a12:	429c      	cmp	r4, r3
 8010a14:	d158      	bne.n	8010ac8 <_vfiprintf_r+0xd0>
 8010a16:	6874      	ldr	r4, [r6, #4]
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	0718      	lsls	r0, r3, #28
 8010a1c:	d55e      	bpl.n	8010adc <_vfiprintf_r+0xe4>
 8010a1e:	6923      	ldr	r3, [r4, #16]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d05b      	beq.n	8010adc <_vfiprintf_r+0xe4>
 8010a24:	2300      	movs	r3, #0
 8010a26:	9309      	str	r3, [sp, #36]	; 0x24
 8010a28:	2320      	movs	r3, #32
 8010a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a2e:	2330      	movs	r3, #48	; 0x30
 8010a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a34:	9503      	str	r5, [sp, #12]
 8010a36:	f04f 0b01 	mov.w	fp, #1
 8010a3a:	46b8      	mov	r8, r7
 8010a3c:	4645      	mov	r5, r8
 8010a3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010a42:	b10b      	cbz	r3, 8010a48 <_vfiprintf_r+0x50>
 8010a44:	2b25      	cmp	r3, #37	; 0x25
 8010a46:	d154      	bne.n	8010af2 <_vfiprintf_r+0xfa>
 8010a48:	ebb8 0a07 	subs.w	sl, r8, r7
 8010a4c:	d00b      	beq.n	8010a66 <_vfiprintf_r+0x6e>
 8010a4e:	4653      	mov	r3, sl
 8010a50:	463a      	mov	r2, r7
 8010a52:	4621      	mov	r1, r4
 8010a54:	4630      	mov	r0, r6
 8010a56:	f7ff ffbc 	bl	80109d2 <__sfputs_r>
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	f000 80c2 	beq.w	8010be4 <_vfiprintf_r+0x1ec>
 8010a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a62:	4453      	add	r3, sl
 8010a64:	9309      	str	r3, [sp, #36]	; 0x24
 8010a66:	f898 3000 	ldrb.w	r3, [r8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 80ba 	beq.w	8010be4 <_vfiprintf_r+0x1ec>
 8010a70:	2300      	movs	r3, #0
 8010a72:	f04f 32ff 	mov.w	r2, #4294967295
 8010a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a7a:	9304      	str	r3, [sp, #16]
 8010a7c:	9307      	str	r3, [sp, #28]
 8010a7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a82:	931a      	str	r3, [sp, #104]	; 0x68
 8010a84:	46a8      	mov	r8, r5
 8010a86:	2205      	movs	r2, #5
 8010a88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010a8c:	485e      	ldr	r0, [pc, #376]	; (8010c08 <_vfiprintf_r+0x210>)
 8010a8e:	f7ef fbaf 	bl	80001f0 <memchr>
 8010a92:	9b04      	ldr	r3, [sp, #16]
 8010a94:	bb78      	cbnz	r0, 8010af6 <_vfiprintf_r+0xfe>
 8010a96:	06d9      	lsls	r1, r3, #27
 8010a98:	bf44      	itt	mi
 8010a9a:	2220      	movmi	r2, #32
 8010a9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010aa0:	071a      	lsls	r2, r3, #28
 8010aa2:	bf44      	itt	mi
 8010aa4:	222b      	movmi	r2, #43	; 0x2b
 8010aa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010aaa:	782a      	ldrb	r2, [r5, #0]
 8010aac:	2a2a      	cmp	r2, #42	; 0x2a
 8010aae:	d02a      	beq.n	8010b06 <_vfiprintf_r+0x10e>
 8010ab0:	9a07      	ldr	r2, [sp, #28]
 8010ab2:	46a8      	mov	r8, r5
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	250a      	movs	r5, #10
 8010ab8:	4641      	mov	r1, r8
 8010aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010abe:	3b30      	subs	r3, #48	; 0x30
 8010ac0:	2b09      	cmp	r3, #9
 8010ac2:	d969      	bls.n	8010b98 <_vfiprintf_r+0x1a0>
 8010ac4:	b360      	cbz	r0, 8010b20 <_vfiprintf_r+0x128>
 8010ac6:	e024      	b.n	8010b12 <_vfiprintf_r+0x11a>
 8010ac8:	4b50      	ldr	r3, [pc, #320]	; (8010c0c <_vfiprintf_r+0x214>)
 8010aca:	429c      	cmp	r4, r3
 8010acc:	d101      	bne.n	8010ad2 <_vfiprintf_r+0xda>
 8010ace:	68b4      	ldr	r4, [r6, #8]
 8010ad0:	e7a2      	b.n	8010a18 <_vfiprintf_r+0x20>
 8010ad2:	4b4f      	ldr	r3, [pc, #316]	; (8010c10 <_vfiprintf_r+0x218>)
 8010ad4:	429c      	cmp	r4, r3
 8010ad6:	bf08      	it	eq
 8010ad8:	68f4      	ldreq	r4, [r6, #12]
 8010ada:	e79d      	b.n	8010a18 <_vfiprintf_r+0x20>
 8010adc:	4621      	mov	r1, r4
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f7ff fc64 	bl	80103ac <__swsetup_r>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d09d      	beq.n	8010a24 <_vfiprintf_r+0x2c>
 8010ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aec:	b01d      	add	sp, #116	; 0x74
 8010aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af2:	46a8      	mov	r8, r5
 8010af4:	e7a2      	b.n	8010a3c <_vfiprintf_r+0x44>
 8010af6:	4a44      	ldr	r2, [pc, #272]	; (8010c08 <_vfiprintf_r+0x210>)
 8010af8:	1a80      	subs	r0, r0, r2
 8010afa:	fa0b f000 	lsl.w	r0, fp, r0
 8010afe:	4318      	orrs	r0, r3
 8010b00:	9004      	str	r0, [sp, #16]
 8010b02:	4645      	mov	r5, r8
 8010b04:	e7be      	b.n	8010a84 <_vfiprintf_r+0x8c>
 8010b06:	9a03      	ldr	r2, [sp, #12]
 8010b08:	1d11      	adds	r1, r2, #4
 8010b0a:	6812      	ldr	r2, [r2, #0]
 8010b0c:	9103      	str	r1, [sp, #12]
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	db01      	blt.n	8010b16 <_vfiprintf_r+0x11e>
 8010b12:	9207      	str	r2, [sp, #28]
 8010b14:	e004      	b.n	8010b20 <_vfiprintf_r+0x128>
 8010b16:	4252      	negs	r2, r2
 8010b18:	f043 0302 	orr.w	r3, r3, #2
 8010b1c:	9207      	str	r2, [sp, #28]
 8010b1e:	9304      	str	r3, [sp, #16]
 8010b20:	f898 3000 	ldrb.w	r3, [r8]
 8010b24:	2b2e      	cmp	r3, #46	; 0x2e
 8010b26:	d10e      	bne.n	8010b46 <_vfiprintf_r+0x14e>
 8010b28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b2e:	d138      	bne.n	8010ba2 <_vfiprintf_r+0x1aa>
 8010b30:	9b03      	ldr	r3, [sp, #12]
 8010b32:	1d1a      	adds	r2, r3, #4
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	9203      	str	r2, [sp, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bfb8      	it	lt
 8010b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b40:	f108 0802 	add.w	r8, r8, #2
 8010b44:	9305      	str	r3, [sp, #20]
 8010b46:	4d33      	ldr	r5, [pc, #204]	; (8010c14 <_vfiprintf_r+0x21c>)
 8010b48:	f898 1000 	ldrb.w	r1, [r8]
 8010b4c:	2203      	movs	r2, #3
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f7ef fb4e 	bl	80001f0 <memchr>
 8010b54:	b140      	cbz	r0, 8010b68 <_vfiprintf_r+0x170>
 8010b56:	2340      	movs	r3, #64	; 0x40
 8010b58:	1b40      	subs	r0, r0, r5
 8010b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8010b5e:	9b04      	ldr	r3, [sp, #16]
 8010b60:	4303      	orrs	r3, r0
 8010b62:	f108 0801 	add.w	r8, r8, #1
 8010b66:	9304      	str	r3, [sp, #16]
 8010b68:	f898 1000 	ldrb.w	r1, [r8]
 8010b6c:	482a      	ldr	r0, [pc, #168]	; (8010c18 <_vfiprintf_r+0x220>)
 8010b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b72:	2206      	movs	r2, #6
 8010b74:	f108 0701 	add.w	r7, r8, #1
 8010b78:	f7ef fb3a 	bl	80001f0 <memchr>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d037      	beq.n	8010bf0 <_vfiprintf_r+0x1f8>
 8010b80:	4b26      	ldr	r3, [pc, #152]	; (8010c1c <_vfiprintf_r+0x224>)
 8010b82:	bb1b      	cbnz	r3, 8010bcc <_vfiprintf_r+0x1d4>
 8010b84:	9b03      	ldr	r3, [sp, #12]
 8010b86:	3307      	adds	r3, #7
 8010b88:	f023 0307 	bic.w	r3, r3, #7
 8010b8c:	3308      	adds	r3, #8
 8010b8e:	9303      	str	r3, [sp, #12]
 8010b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b92:	444b      	add	r3, r9
 8010b94:	9309      	str	r3, [sp, #36]	; 0x24
 8010b96:	e750      	b.n	8010a3a <_vfiprintf_r+0x42>
 8010b98:	fb05 3202 	mla	r2, r5, r2, r3
 8010b9c:	2001      	movs	r0, #1
 8010b9e:	4688      	mov	r8, r1
 8010ba0:	e78a      	b.n	8010ab8 <_vfiprintf_r+0xc0>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f108 0801 	add.w	r8, r8, #1
 8010ba8:	9305      	str	r3, [sp, #20]
 8010baa:	4619      	mov	r1, r3
 8010bac:	250a      	movs	r5, #10
 8010bae:	4640      	mov	r0, r8
 8010bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bb4:	3a30      	subs	r2, #48	; 0x30
 8010bb6:	2a09      	cmp	r2, #9
 8010bb8:	d903      	bls.n	8010bc2 <_vfiprintf_r+0x1ca>
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d0c3      	beq.n	8010b46 <_vfiprintf_r+0x14e>
 8010bbe:	9105      	str	r1, [sp, #20]
 8010bc0:	e7c1      	b.n	8010b46 <_vfiprintf_r+0x14e>
 8010bc2:	fb05 2101 	mla	r1, r5, r1, r2
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	4680      	mov	r8, r0
 8010bca:	e7f0      	b.n	8010bae <_vfiprintf_r+0x1b6>
 8010bcc:	ab03      	add	r3, sp, #12
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	4b13      	ldr	r3, [pc, #76]	; (8010c20 <_vfiprintf_r+0x228>)
 8010bd4:	a904      	add	r1, sp, #16
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f3af 8000 	nop.w
 8010bdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010be0:	4681      	mov	r9, r0
 8010be2:	d1d5      	bne.n	8010b90 <_vfiprintf_r+0x198>
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	065b      	lsls	r3, r3, #25
 8010be8:	f53f af7e 	bmi.w	8010ae8 <_vfiprintf_r+0xf0>
 8010bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bee:	e77d      	b.n	8010aec <_vfiprintf_r+0xf4>
 8010bf0:	ab03      	add	r3, sp, #12
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <_vfiprintf_r+0x228>)
 8010bf8:	a904      	add	r1, sp, #16
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	f000 f888 	bl	8010d10 <_printf_i>
 8010c00:	e7ec      	b.n	8010bdc <_vfiprintf_r+0x1e4>
 8010c02:	bf00      	nop
 8010c04:	08015d54 	.word	0x08015d54
 8010c08:	08015d94 	.word	0x08015d94
 8010c0c:	08015d74 	.word	0x08015d74
 8010c10:	08015d34 	.word	0x08015d34
 8010c14:	08015d9a 	.word	0x08015d9a
 8010c18:	08015d9e 	.word	0x08015d9e
 8010c1c:	00000000 	.word	0x00000000
 8010c20:	080109d3 	.word	0x080109d3

08010c24 <_printf_common>:
 8010c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c28:	4691      	mov	r9, r2
 8010c2a:	461f      	mov	r7, r3
 8010c2c:	688a      	ldr	r2, [r1, #8]
 8010c2e:	690b      	ldr	r3, [r1, #16]
 8010c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c34:	4293      	cmp	r3, r2
 8010c36:	bfb8      	it	lt
 8010c38:	4613      	movlt	r3, r2
 8010c3a:	f8c9 3000 	str.w	r3, [r9]
 8010c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c42:	4606      	mov	r6, r0
 8010c44:	460c      	mov	r4, r1
 8010c46:	b112      	cbz	r2, 8010c4e <_printf_common+0x2a>
 8010c48:	3301      	adds	r3, #1
 8010c4a:	f8c9 3000 	str.w	r3, [r9]
 8010c4e:	6823      	ldr	r3, [r4, #0]
 8010c50:	0699      	lsls	r1, r3, #26
 8010c52:	bf42      	ittt	mi
 8010c54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c58:	3302      	addmi	r3, #2
 8010c5a:	f8c9 3000 	strmi.w	r3, [r9]
 8010c5e:	6825      	ldr	r5, [r4, #0]
 8010c60:	f015 0506 	ands.w	r5, r5, #6
 8010c64:	d107      	bne.n	8010c76 <_printf_common+0x52>
 8010c66:	f104 0a19 	add.w	sl, r4, #25
 8010c6a:	68e3      	ldr	r3, [r4, #12]
 8010c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8010c70:	1a9b      	subs	r3, r3, r2
 8010c72:	42ab      	cmp	r3, r5
 8010c74:	dc28      	bgt.n	8010cc8 <_printf_common+0xa4>
 8010c76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	3300      	adds	r3, #0
 8010c7e:	bf18      	it	ne
 8010c80:	2301      	movne	r3, #1
 8010c82:	0692      	lsls	r2, r2, #26
 8010c84:	d42d      	bmi.n	8010ce2 <_printf_common+0xbe>
 8010c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	47c0      	blx	r8
 8010c90:	3001      	adds	r0, #1
 8010c92:	d020      	beq.n	8010cd6 <_printf_common+0xb2>
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	68e5      	ldr	r5, [r4, #12]
 8010c98:	f8d9 2000 	ldr.w	r2, [r9]
 8010c9c:	f003 0306 	and.w	r3, r3, #6
 8010ca0:	2b04      	cmp	r3, #4
 8010ca2:	bf08      	it	eq
 8010ca4:	1aad      	subeq	r5, r5, r2
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	6922      	ldr	r2, [r4, #16]
 8010caa:	bf0c      	ite	eq
 8010cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cb0:	2500      	movne	r5, #0
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	bfc4      	itt	gt
 8010cb6:	1a9b      	subgt	r3, r3, r2
 8010cb8:	18ed      	addgt	r5, r5, r3
 8010cba:	f04f 0900 	mov.w	r9, #0
 8010cbe:	341a      	adds	r4, #26
 8010cc0:	454d      	cmp	r5, r9
 8010cc2:	d11a      	bne.n	8010cfa <_printf_common+0xd6>
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e008      	b.n	8010cda <_printf_common+0xb6>
 8010cc8:	2301      	movs	r3, #1
 8010cca:	4652      	mov	r2, sl
 8010ccc:	4639      	mov	r1, r7
 8010cce:	4630      	mov	r0, r6
 8010cd0:	47c0      	blx	r8
 8010cd2:	3001      	adds	r0, #1
 8010cd4:	d103      	bne.n	8010cde <_printf_common+0xba>
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cde:	3501      	adds	r5, #1
 8010ce0:	e7c3      	b.n	8010c6a <_printf_common+0x46>
 8010ce2:	18e1      	adds	r1, r4, r3
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	2030      	movs	r0, #48	; 0x30
 8010ce8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cec:	4422      	add	r2, r4
 8010cee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cf6:	3302      	adds	r3, #2
 8010cf8:	e7c5      	b.n	8010c86 <_printf_common+0x62>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	4622      	mov	r2, r4
 8010cfe:	4639      	mov	r1, r7
 8010d00:	4630      	mov	r0, r6
 8010d02:	47c0      	blx	r8
 8010d04:	3001      	adds	r0, #1
 8010d06:	d0e6      	beq.n	8010cd6 <_printf_common+0xb2>
 8010d08:	f109 0901 	add.w	r9, r9, #1
 8010d0c:	e7d8      	b.n	8010cc0 <_printf_common+0x9c>
	...

08010d10 <_printf_i>:
 8010d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d18:	460c      	mov	r4, r1
 8010d1a:	7e09      	ldrb	r1, [r1, #24]
 8010d1c:	b085      	sub	sp, #20
 8010d1e:	296e      	cmp	r1, #110	; 0x6e
 8010d20:	4617      	mov	r7, r2
 8010d22:	4606      	mov	r6, r0
 8010d24:	4698      	mov	r8, r3
 8010d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d28:	f000 80b3 	beq.w	8010e92 <_printf_i+0x182>
 8010d2c:	d822      	bhi.n	8010d74 <_printf_i+0x64>
 8010d2e:	2963      	cmp	r1, #99	; 0x63
 8010d30:	d036      	beq.n	8010da0 <_printf_i+0x90>
 8010d32:	d80a      	bhi.n	8010d4a <_printf_i+0x3a>
 8010d34:	2900      	cmp	r1, #0
 8010d36:	f000 80b9 	beq.w	8010eac <_printf_i+0x19c>
 8010d3a:	2958      	cmp	r1, #88	; 0x58
 8010d3c:	f000 8083 	beq.w	8010e46 <_printf_i+0x136>
 8010d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d48:	e032      	b.n	8010db0 <_printf_i+0xa0>
 8010d4a:	2964      	cmp	r1, #100	; 0x64
 8010d4c:	d001      	beq.n	8010d52 <_printf_i+0x42>
 8010d4e:	2969      	cmp	r1, #105	; 0x69
 8010d50:	d1f6      	bne.n	8010d40 <_printf_i+0x30>
 8010d52:	6820      	ldr	r0, [r4, #0]
 8010d54:	6813      	ldr	r3, [r2, #0]
 8010d56:	0605      	lsls	r5, r0, #24
 8010d58:	f103 0104 	add.w	r1, r3, #4
 8010d5c:	d52a      	bpl.n	8010db4 <_printf_i+0xa4>
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	6011      	str	r1, [r2, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	da03      	bge.n	8010d6e <_printf_i+0x5e>
 8010d66:	222d      	movs	r2, #45	; 0x2d
 8010d68:	425b      	negs	r3, r3
 8010d6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d6e:	486f      	ldr	r0, [pc, #444]	; (8010f2c <_printf_i+0x21c>)
 8010d70:	220a      	movs	r2, #10
 8010d72:	e039      	b.n	8010de8 <_printf_i+0xd8>
 8010d74:	2973      	cmp	r1, #115	; 0x73
 8010d76:	f000 809d 	beq.w	8010eb4 <_printf_i+0x1a4>
 8010d7a:	d808      	bhi.n	8010d8e <_printf_i+0x7e>
 8010d7c:	296f      	cmp	r1, #111	; 0x6f
 8010d7e:	d020      	beq.n	8010dc2 <_printf_i+0xb2>
 8010d80:	2970      	cmp	r1, #112	; 0x70
 8010d82:	d1dd      	bne.n	8010d40 <_printf_i+0x30>
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	f043 0320 	orr.w	r3, r3, #32
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	e003      	b.n	8010d96 <_printf_i+0x86>
 8010d8e:	2975      	cmp	r1, #117	; 0x75
 8010d90:	d017      	beq.n	8010dc2 <_printf_i+0xb2>
 8010d92:	2978      	cmp	r1, #120	; 0x78
 8010d94:	d1d4      	bne.n	8010d40 <_printf_i+0x30>
 8010d96:	2378      	movs	r3, #120	; 0x78
 8010d98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d9c:	4864      	ldr	r0, [pc, #400]	; (8010f30 <_printf_i+0x220>)
 8010d9e:	e055      	b.n	8010e4c <_printf_i+0x13c>
 8010da0:	6813      	ldr	r3, [r2, #0]
 8010da2:	1d19      	adds	r1, r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6011      	str	r1, [r2, #0]
 8010da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010db0:	2301      	movs	r3, #1
 8010db2:	e08c      	b.n	8010ece <_printf_i+0x1be>
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6011      	str	r1, [r2, #0]
 8010db8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dbc:	bf18      	it	ne
 8010dbe:	b21b      	sxthne	r3, r3
 8010dc0:	e7cf      	b.n	8010d62 <_printf_i+0x52>
 8010dc2:	6813      	ldr	r3, [r2, #0]
 8010dc4:	6825      	ldr	r5, [r4, #0]
 8010dc6:	1d18      	adds	r0, r3, #4
 8010dc8:	6010      	str	r0, [r2, #0]
 8010dca:	0628      	lsls	r0, r5, #24
 8010dcc:	d501      	bpl.n	8010dd2 <_printf_i+0xc2>
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	e002      	b.n	8010dd8 <_printf_i+0xc8>
 8010dd2:	0668      	lsls	r0, r5, #25
 8010dd4:	d5fb      	bpl.n	8010dce <_printf_i+0xbe>
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	4854      	ldr	r0, [pc, #336]	; (8010f2c <_printf_i+0x21c>)
 8010dda:	296f      	cmp	r1, #111	; 0x6f
 8010ddc:	bf14      	ite	ne
 8010dde:	220a      	movne	r2, #10
 8010de0:	2208      	moveq	r2, #8
 8010de2:	2100      	movs	r1, #0
 8010de4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010de8:	6865      	ldr	r5, [r4, #4]
 8010dea:	60a5      	str	r5, [r4, #8]
 8010dec:	2d00      	cmp	r5, #0
 8010dee:	f2c0 8095 	blt.w	8010f1c <_printf_i+0x20c>
 8010df2:	6821      	ldr	r1, [r4, #0]
 8010df4:	f021 0104 	bic.w	r1, r1, #4
 8010df8:	6021      	str	r1, [r4, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d13d      	bne.n	8010e7a <_printf_i+0x16a>
 8010dfe:	2d00      	cmp	r5, #0
 8010e00:	f040 808e 	bne.w	8010f20 <_printf_i+0x210>
 8010e04:	4665      	mov	r5, ip
 8010e06:	2a08      	cmp	r2, #8
 8010e08:	d10b      	bne.n	8010e22 <_printf_i+0x112>
 8010e0a:	6823      	ldr	r3, [r4, #0]
 8010e0c:	07db      	lsls	r3, r3, #31
 8010e0e:	d508      	bpl.n	8010e22 <_printf_i+0x112>
 8010e10:	6923      	ldr	r3, [r4, #16]
 8010e12:	6862      	ldr	r2, [r4, #4]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	bfde      	ittt	le
 8010e18:	2330      	movle	r3, #48	; 0x30
 8010e1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e22:	ebac 0305 	sub.w	r3, ip, r5
 8010e26:	6123      	str	r3, [r4, #16]
 8010e28:	f8cd 8000 	str.w	r8, [sp]
 8010e2c:	463b      	mov	r3, r7
 8010e2e:	aa03      	add	r2, sp, #12
 8010e30:	4621      	mov	r1, r4
 8010e32:	4630      	mov	r0, r6
 8010e34:	f7ff fef6 	bl	8010c24 <_printf_common>
 8010e38:	3001      	adds	r0, #1
 8010e3a:	d14d      	bne.n	8010ed8 <_printf_i+0x1c8>
 8010e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e40:	b005      	add	sp, #20
 8010e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e46:	4839      	ldr	r0, [pc, #228]	; (8010f2c <_printf_i+0x21c>)
 8010e48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e4c:	6813      	ldr	r3, [r2, #0]
 8010e4e:	6821      	ldr	r1, [r4, #0]
 8010e50:	1d1d      	adds	r5, r3, #4
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	6015      	str	r5, [r2, #0]
 8010e56:	060a      	lsls	r2, r1, #24
 8010e58:	d50b      	bpl.n	8010e72 <_printf_i+0x162>
 8010e5a:	07ca      	lsls	r2, r1, #31
 8010e5c:	bf44      	itt	mi
 8010e5e:	f041 0120 	orrmi.w	r1, r1, #32
 8010e62:	6021      	strmi	r1, [r4, #0]
 8010e64:	b91b      	cbnz	r3, 8010e6e <_printf_i+0x15e>
 8010e66:	6822      	ldr	r2, [r4, #0]
 8010e68:	f022 0220 	bic.w	r2, r2, #32
 8010e6c:	6022      	str	r2, [r4, #0]
 8010e6e:	2210      	movs	r2, #16
 8010e70:	e7b7      	b.n	8010de2 <_printf_i+0xd2>
 8010e72:	064d      	lsls	r5, r1, #25
 8010e74:	bf48      	it	mi
 8010e76:	b29b      	uxthmi	r3, r3
 8010e78:	e7ef      	b.n	8010e5a <_printf_i+0x14a>
 8010e7a:	4665      	mov	r5, ip
 8010e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e80:	fb02 3311 	mls	r3, r2, r1, r3
 8010e84:	5cc3      	ldrb	r3, [r0, r3]
 8010e86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	2900      	cmp	r1, #0
 8010e8e:	d1f5      	bne.n	8010e7c <_printf_i+0x16c>
 8010e90:	e7b9      	b.n	8010e06 <_printf_i+0xf6>
 8010e92:	6813      	ldr	r3, [r2, #0]
 8010e94:	6825      	ldr	r5, [r4, #0]
 8010e96:	6961      	ldr	r1, [r4, #20]
 8010e98:	1d18      	adds	r0, r3, #4
 8010e9a:	6010      	str	r0, [r2, #0]
 8010e9c:	0628      	lsls	r0, r5, #24
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	d501      	bpl.n	8010ea6 <_printf_i+0x196>
 8010ea2:	6019      	str	r1, [r3, #0]
 8010ea4:	e002      	b.n	8010eac <_printf_i+0x19c>
 8010ea6:	066a      	lsls	r2, r5, #25
 8010ea8:	d5fb      	bpl.n	8010ea2 <_printf_i+0x192>
 8010eaa:	8019      	strh	r1, [r3, #0]
 8010eac:	2300      	movs	r3, #0
 8010eae:	6123      	str	r3, [r4, #16]
 8010eb0:	4665      	mov	r5, ip
 8010eb2:	e7b9      	b.n	8010e28 <_printf_i+0x118>
 8010eb4:	6813      	ldr	r3, [r2, #0]
 8010eb6:	1d19      	adds	r1, r3, #4
 8010eb8:	6011      	str	r1, [r2, #0]
 8010eba:	681d      	ldr	r5, [r3, #0]
 8010ebc:	6862      	ldr	r2, [r4, #4]
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f7ef f995 	bl	80001f0 <memchr>
 8010ec6:	b108      	cbz	r0, 8010ecc <_printf_i+0x1bc>
 8010ec8:	1b40      	subs	r0, r0, r5
 8010eca:	6060      	str	r0, [r4, #4]
 8010ecc:	6863      	ldr	r3, [r4, #4]
 8010ece:	6123      	str	r3, [r4, #16]
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ed6:	e7a7      	b.n	8010e28 <_printf_i+0x118>
 8010ed8:	6923      	ldr	r3, [r4, #16]
 8010eda:	462a      	mov	r2, r5
 8010edc:	4639      	mov	r1, r7
 8010ede:	4630      	mov	r0, r6
 8010ee0:	47c0      	blx	r8
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	d0aa      	beq.n	8010e3c <_printf_i+0x12c>
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	079b      	lsls	r3, r3, #30
 8010eea:	d413      	bmi.n	8010f14 <_printf_i+0x204>
 8010eec:	68e0      	ldr	r0, [r4, #12]
 8010eee:	9b03      	ldr	r3, [sp, #12]
 8010ef0:	4298      	cmp	r0, r3
 8010ef2:	bfb8      	it	lt
 8010ef4:	4618      	movlt	r0, r3
 8010ef6:	e7a3      	b.n	8010e40 <_printf_i+0x130>
 8010ef8:	2301      	movs	r3, #1
 8010efa:	464a      	mov	r2, r9
 8010efc:	4639      	mov	r1, r7
 8010efe:	4630      	mov	r0, r6
 8010f00:	47c0      	blx	r8
 8010f02:	3001      	adds	r0, #1
 8010f04:	d09a      	beq.n	8010e3c <_printf_i+0x12c>
 8010f06:	3501      	adds	r5, #1
 8010f08:	68e3      	ldr	r3, [r4, #12]
 8010f0a:	9a03      	ldr	r2, [sp, #12]
 8010f0c:	1a9b      	subs	r3, r3, r2
 8010f0e:	42ab      	cmp	r3, r5
 8010f10:	dcf2      	bgt.n	8010ef8 <_printf_i+0x1e8>
 8010f12:	e7eb      	b.n	8010eec <_printf_i+0x1dc>
 8010f14:	2500      	movs	r5, #0
 8010f16:	f104 0919 	add.w	r9, r4, #25
 8010f1a:	e7f5      	b.n	8010f08 <_printf_i+0x1f8>
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d1ac      	bne.n	8010e7a <_printf_i+0x16a>
 8010f20:	7803      	ldrb	r3, [r0, #0]
 8010f22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f2a:	e76c      	b.n	8010e06 <_printf_i+0xf6>
 8010f2c:	08015da5 	.word	0x08015da5
 8010f30:	08015db6 	.word	0x08015db6

08010f34 <_putc_r>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	460d      	mov	r5, r1
 8010f38:	4614      	mov	r4, r2
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	b118      	cbz	r0, 8010f46 <_putc_r+0x12>
 8010f3e:	6983      	ldr	r3, [r0, #24]
 8010f40:	b90b      	cbnz	r3, 8010f46 <_putc_r+0x12>
 8010f42:	f7ff fb91 	bl	8010668 <__sinit>
 8010f46:	4b13      	ldr	r3, [pc, #76]	; (8010f94 <_putc_r+0x60>)
 8010f48:	429c      	cmp	r4, r3
 8010f4a:	d112      	bne.n	8010f72 <_putc_r+0x3e>
 8010f4c:	6874      	ldr	r4, [r6, #4]
 8010f4e:	68a3      	ldr	r3, [r4, #8]
 8010f50:	3b01      	subs	r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	60a3      	str	r3, [r4, #8]
 8010f56:	da16      	bge.n	8010f86 <_putc_r+0x52>
 8010f58:	69a2      	ldr	r2, [r4, #24]
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	db02      	blt.n	8010f64 <_putc_r+0x30>
 8010f5e:	b2eb      	uxtb	r3, r5
 8010f60:	2b0a      	cmp	r3, #10
 8010f62:	d110      	bne.n	8010f86 <_putc_r+0x52>
 8010f64:	4622      	mov	r2, r4
 8010f66:	4629      	mov	r1, r5
 8010f68:	4630      	mov	r0, r6
 8010f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f6e:	f7ff b9cb 	b.w	8010308 <__swbuf_r>
 8010f72:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <_putc_r+0x64>)
 8010f74:	429c      	cmp	r4, r3
 8010f76:	d101      	bne.n	8010f7c <_putc_r+0x48>
 8010f78:	68b4      	ldr	r4, [r6, #8]
 8010f7a:	e7e8      	b.n	8010f4e <_putc_r+0x1a>
 8010f7c:	4b07      	ldr	r3, [pc, #28]	; (8010f9c <_putc_r+0x68>)
 8010f7e:	429c      	cmp	r4, r3
 8010f80:	bf08      	it	eq
 8010f82:	68f4      	ldreq	r4, [r6, #12]
 8010f84:	e7e3      	b.n	8010f4e <_putc_r+0x1a>
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	6022      	str	r2, [r4, #0]
 8010f8c:	701d      	strb	r5, [r3, #0]
 8010f8e:	b2e8      	uxtb	r0, r5
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	bf00      	nop
 8010f94:	08015d54 	.word	0x08015d54
 8010f98:	08015d74 	.word	0x08015d74
 8010f9c:	08015d34 	.word	0x08015d34

08010fa0 <_sbrk_r>:
 8010fa0:	b538      	push	{r3, r4, r5, lr}
 8010fa2:	4c06      	ldr	r4, [pc, #24]	; (8010fbc <_sbrk_r+0x1c>)
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	4608      	mov	r0, r1
 8010faa:	6023      	str	r3, [r4, #0]
 8010fac:	f7ef fd24 	bl	80009f8 <_sbrk>
 8010fb0:	1c43      	adds	r3, r0, #1
 8010fb2:	d102      	bne.n	8010fba <_sbrk_r+0x1a>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	b103      	cbz	r3, 8010fba <_sbrk_r+0x1a>
 8010fb8:	602b      	str	r3, [r5, #0]
 8010fba:	bd38      	pop	{r3, r4, r5, pc}
 8010fbc:	2000698c 	.word	0x2000698c

08010fc0 <__sread>:
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc8:	f000 f896 	bl	80110f8 <_read_r>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	bfab      	itete	ge
 8010fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8010fd4:	181b      	addge	r3, r3, r0
 8010fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010fda:	bfac      	ite	ge
 8010fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fde:	81a3      	strhlt	r3, [r4, #12]
 8010fe0:	bd10      	pop	{r4, pc}

08010fe2 <__swrite>:
 8010fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe6:	461f      	mov	r7, r3
 8010fe8:	898b      	ldrh	r3, [r1, #12]
 8010fea:	05db      	lsls	r3, r3, #23
 8010fec:	4605      	mov	r5, r0
 8010fee:	460c      	mov	r4, r1
 8010ff0:	4616      	mov	r6, r2
 8010ff2:	d505      	bpl.n	8011000 <__swrite+0x1e>
 8010ff4:	2302      	movs	r3, #2
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ffc:	f000 f868 	bl	80110d0 <_lseek_r>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801100a:	81a3      	strh	r3, [r4, #12]
 801100c:	4632      	mov	r2, r6
 801100e:	463b      	mov	r3, r7
 8011010:	4628      	mov	r0, r5
 8011012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011016:	f000 b817 	b.w	8011048 <_write_r>

0801101a <__sseek>:
 801101a:	b510      	push	{r4, lr}
 801101c:	460c      	mov	r4, r1
 801101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011022:	f000 f855 	bl	80110d0 <_lseek_r>
 8011026:	1c43      	adds	r3, r0, #1
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	bf15      	itete	ne
 801102c:	6560      	strne	r0, [r4, #84]	; 0x54
 801102e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011036:	81a3      	strheq	r3, [r4, #12]
 8011038:	bf18      	it	ne
 801103a:	81a3      	strhne	r3, [r4, #12]
 801103c:	bd10      	pop	{r4, pc}

0801103e <__sclose>:
 801103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011042:	f000 b813 	b.w	801106c <_close_r>
	...

08011048 <_write_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4c07      	ldr	r4, [pc, #28]	; (8011068 <_write_r+0x20>)
 801104c:	4605      	mov	r5, r0
 801104e:	4608      	mov	r0, r1
 8011050:	4611      	mov	r1, r2
 8011052:	2200      	movs	r2, #0
 8011054:	6022      	str	r2, [r4, #0]
 8011056:	461a      	mov	r2, r3
 8011058:	f7ef fc7d 	bl	8000956 <_write>
 801105c:	1c43      	adds	r3, r0, #1
 801105e:	d102      	bne.n	8011066 <_write_r+0x1e>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	b103      	cbz	r3, 8011066 <_write_r+0x1e>
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	bd38      	pop	{r3, r4, r5, pc}
 8011068:	2000698c 	.word	0x2000698c

0801106c <_close_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4c06      	ldr	r4, [pc, #24]	; (8011088 <_close_r+0x1c>)
 8011070:	2300      	movs	r3, #0
 8011072:	4605      	mov	r5, r0
 8011074:	4608      	mov	r0, r1
 8011076:	6023      	str	r3, [r4, #0]
 8011078:	f7ef fc89 	bl	800098e <_close>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_close_r+0x1a>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	b103      	cbz	r3, 8011086 <_close_r+0x1a>
 8011084:	602b      	str	r3, [r5, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	2000698c 	.word	0x2000698c

0801108c <_fstat_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4c07      	ldr	r4, [pc, #28]	; (80110ac <_fstat_r+0x20>)
 8011090:	2300      	movs	r3, #0
 8011092:	4605      	mov	r5, r0
 8011094:	4608      	mov	r0, r1
 8011096:	4611      	mov	r1, r2
 8011098:	6023      	str	r3, [r4, #0]
 801109a:	f7ef fc84 	bl	80009a6 <_fstat>
 801109e:	1c43      	adds	r3, r0, #1
 80110a0:	d102      	bne.n	80110a8 <_fstat_r+0x1c>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	b103      	cbz	r3, 80110a8 <_fstat_r+0x1c>
 80110a6:	602b      	str	r3, [r5, #0]
 80110a8:	bd38      	pop	{r3, r4, r5, pc}
 80110aa:	bf00      	nop
 80110ac:	2000698c 	.word	0x2000698c

080110b0 <_isatty_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4c06      	ldr	r4, [pc, #24]	; (80110cc <_isatty_r+0x1c>)
 80110b4:	2300      	movs	r3, #0
 80110b6:	4605      	mov	r5, r0
 80110b8:	4608      	mov	r0, r1
 80110ba:	6023      	str	r3, [r4, #0]
 80110bc:	f7ef fc83 	bl	80009c6 <_isatty>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_isatty_r+0x1a>
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_isatty_r+0x1a>
 80110c8:	602b      	str	r3, [r5, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	2000698c 	.word	0x2000698c

080110d0 <_lseek_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4c07      	ldr	r4, [pc, #28]	; (80110f0 <_lseek_r+0x20>)
 80110d4:	4605      	mov	r5, r0
 80110d6:	4608      	mov	r0, r1
 80110d8:	4611      	mov	r1, r2
 80110da:	2200      	movs	r2, #0
 80110dc:	6022      	str	r2, [r4, #0]
 80110de:	461a      	mov	r2, r3
 80110e0:	f7ef fc7c 	bl	80009dc <_lseek>
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	d102      	bne.n	80110ee <_lseek_r+0x1e>
 80110e8:	6823      	ldr	r3, [r4, #0]
 80110ea:	b103      	cbz	r3, 80110ee <_lseek_r+0x1e>
 80110ec:	602b      	str	r3, [r5, #0]
 80110ee:	bd38      	pop	{r3, r4, r5, pc}
 80110f0:	2000698c 	.word	0x2000698c

080110f4 <__malloc_lock>:
 80110f4:	4770      	bx	lr

080110f6 <__malloc_unlock>:
 80110f6:	4770      	bx	lr

080110f8 <_read_r>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	4c07      	ldr	r4, [pc, #28]	; (8011118 <_read_r+0x20>)
 80110fc:	4605      	mov	r5, r0
 80110fe:	4608      	mov	r0, r1
 8011100:	4611      	mov	r1, r2
 8011102:	2200      	movs	r2, #0
 8011104:	6022      	str	r2, [r4, #0]
 8011106:	461a      	mov	r2, r3
 8011108:	f7ef fc08 	bl	800091c <_read>
 801110c:	1c43      	adds	r3, r0, #1
 801110e:	d102      	bne.n	8011116 <_read_r+0x1e>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	b103      	cbz	r3, 8011116 <_read_r+0x1e>
 8011114:	602b      	str	r3, [r5, #0]
 8011116:	bd38      	pop	{r3, r4, r5, pc}
 8011118:	2000698c 	.word	0x2000698c

0801111c <_init>:
 801111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111e:	bf00      	nop
 8011120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011122:	bc08      	pop	{r3}
 8011124:	469e      	mov	lr, r3
 8011126:	4770      	bx	lr

08011128 <_fini>:
 8011128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801112a:	bf00      	nop
 801112c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801112e:	bc08      	pop	{r3}
 8011130:	469e      	mov	lr, r3
 8011132:	4770      	bx	lr
