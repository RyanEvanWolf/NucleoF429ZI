
basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c64  0800f13c  0800f13c  0001f13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011da0  08011da0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011da0  08011da0  00021da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011da8  08011da8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011da8  08011da8  00021da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dac  08011dac  00021dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f8  20000078  08011e28  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006970  08011e28  00036970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002da00  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055ae  00000000  00000000  0005daa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  00063058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  00064758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fbc1  00000000  00000000  00065d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001efca  00000000  00000000  00095921  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f10ac  00000000  00000000  000b48eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a5997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006420  00000000  00000000  001a5a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f124 	.word	0x0800f124

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800f124 	.word	0x0800f124

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <MX_GPIO_Init+0x184>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a59      	ldr	r2, [pc, #356]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b57      	ldr	r3, [pc, #348]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b53      	ldr	r3, [pc, #332]	; (8000714 <MX_GPIO_Init+0x184>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a52      	ldr	r2, [pc, #328]	; (8000714 <MX_GPIO_Init+0x184>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <MX_GPIO_Init+0x184>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a4b      	ldr	r2, [pc, #300]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <MX_GPIO_Init+0x184>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <MX_GPIO_Init+0x184>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a44      	ldr	r2, [pc, #272]	; (8000714 <MX_GPIO_Init+0x184>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b42      	ldr	r3, [pc, #264]	; (8000714 <MX_GPIO_Init+0x184>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_GPIO_Init+0x184>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <MX_GPIO_Init+0x184>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <MX_GPIO_Init+0x184>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0x184>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0x184>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0x184>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|uC_DEBUG_LED_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0101 	movw	r1, #16385	; 0x4001
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <MX_GPIO_Init+0x188>)
 8000656:	f001 fde7 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	482f      	ldr	r0, [pc, #188]	; (800071c <MX_GPIO_Init+0x18c>)
 8000660:	f001 fde2 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_GPIO_Init+0x190>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	482a      	ldr	r0, [pc, #168]	; (8000724 <MX_GPIO_Init+0x194>)
 800067a:	f001 fc2b 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|uC_DEBUG_LED_Pin;
 800067e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_GPIO_Init+0x188>)
 8000698:	f001 fc1c 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <MX_GPIO_Init+0x18c>)
 80006b4:	f001 fc0e 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_GPIO_Init+0x18c>)
 80006cc:	f001 fc02 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e2:	230a      	movs	r3, #10
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_GPIO_Init+0x198>)
 80006ee:	f001 fbf1 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <MX_GPIO_Init+0x198>)
 8000708:	f001 fbe4 	bl	8001ed4 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	40021800 	.word	0x40021800
 8000720:	10110000 	.word	0x10110000
 8000724:	40020800 	.word	0x40020800
 8000728:	40020000 	.word	0x40020000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fb1a 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f81a 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ff2a 	bl	8000590 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073c:	f000 fa78 	bl	8000c30 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000740:	f003 fd9c 	bl	800427c <MX_LWIP_Init>
  MX_TIM4_Init();
 8000744:	f000 f99a 	bl	8000a7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <main+0x38>)
 800074c:	f002 fa62 	bl	8002c14 <HAL_TIM_OC_Start_IT>
	  //MX_LWIP_Process();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LWIP_DEBUGF(LWIP_DBG_TRACE,("DEBUGLOOP\n"));
	  HAL_GPIO_TogglePin(uC_DEBUG_LED_GPIO_Port,uC_DEBUG_LED_Pin);
 8000750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <main+0x3c>)
 8000756:	f001 fd80 	bl	800225a <HAL_GPIO_TogglePin>
	  HAL_Delay(1500);
 800075a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800075e:	f000 fb75 	bl	8000e4c <HAL_Delay>
	  LWIP_DEBUGF(LWIP_DBG_TRACE,("DEBUGLOOP\n"));
 8000762:	e7f5      	b.n	8000750 <main+0x24>
 8000764:	20000214 	.word	0x20000214
 8000768:	40020400 	.word	0x40020400

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00d fd46 	bl	800e20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xd0>)
 80007b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e0:	23a8      	movs	r3, #168	; 0xa8
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fd4d 	bl	8002290 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 f820 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f001 ffa6 	bl	8002770 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 f809 	bl	8000840 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 fa8a 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	LWIP_PLATFORM_DIAG(("Tim4\n"));
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <TIM4_IRQHandler+0x14>)
 8000902:	f00d fcff 	bl	800e304 <puts>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <TIM4_IRQHandler+0x18>)
 8000908:	f002 fa08 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	0800f13c 	.word	0x0800f13c
 8000914:	20000214 	.word	0x20000214

08000918 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00a      	b.n	8000940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092a:	f3af 8000 	nop.w
 800092e:	4601      	mov	r1, r0
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	b2ca      	uxtb	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf0      	blt.n	800092a <_read+0x12>
	}

return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e009      	b.n	8000978 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	60ba      	str	r2, [r7, #8]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fc73 	bl	8004258 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf1      	blt.n	8000964 <_write+0x12>
	}
	return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_close>:

int _close(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	return -1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b2:	605a      	str	r2, [r3, #4]
	return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <_isatty>:

int _isatty(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x50>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x16>
		heap_end = &end;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <_sbrk+0x50>)
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <_sbrk+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <_sbrk+0x50>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <_sbrk+0x50>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	466a      	mov	r2, sp
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d905      	bls.n	8000a2a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <_sbrk+0x58>)
 8000a20:	220c      	movs	r2, #12
 8000a22:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e006      	b.n	8000a38 <_sbrk+0x44>
	}

	heap_end += incr;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <_sbrk+0x50>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <_sbrk+0x50>)
 8000a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20000094 	.word	0x20000094
 8000a48:	20006970 	.word	0x20006970
 8000a4c:	2000696c 	.word	0x2000696c

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SystemInit+0x28>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SystemInit+0x28>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SystemInit+0x28>)
 8000a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <MX_TIM4_Init+0xec>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0xFFFF;
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000ac2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ad4:	4823      	ldr	r0, [pc, #140]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000ad6:	f002 f83d 	bl	8002b54 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ae0:	f7ff feae 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	4619      	mov	r1, r3
 8000af0:	481c      	ldr	r0, [pc, #112]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000af2:	f002 fa7b 	bl	8002fec <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000afc:	f7ff fea0 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b00:	4818      	ldr	r0, [pc, #96]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000b02:	f002 f852 	bl	8002baa <HAL_TIM_OC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b0c:	f7ff fe98 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000b20:	f002 fe5e 	bl	80037e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b2a:	f7ff fe89 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b2e:	2330      	movs	r3, #48	; 0x30
 8000b30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2204      	movs	r2, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000b46:	f002 f9f1 	bl	8002f2c <HAL_TIM_OC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b50:	f7ff fe76 	bl	8000840 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM4_Init+0xe8>)
 8000b56:	f000 f831 	bl	8000bbc <HAL_TIM_MspPostInit>

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000214 	.word	0x20000214
 8000b68:	40000800 	.word	0x40000800

08000b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_TIM_Base_MspInit+0x48>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d115      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201e      	movs	r0, #30
 8000ba0:	f000 fa51 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ba4:	201e      	movs	r0, #30
 8000ba6:	f000 fa6a 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40000800 	.word	0x40000800
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_TIM_MspPostInit+0x68>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d11d      	bne.n	8000c1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_TIM_MspPostInit+0x6c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_TIM_MspPostInit+0x6c>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_TIM_MspPostInit+0x6c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = uC_Status_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(uC_Status_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_TIM_MspPostInit+0x70>)
 8000c16:	f001 f95d 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40000800 	.word	0x40000800
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART3_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x4c>)
 8000c68:	f002 fe4a 	bl	8003900 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f7ff fde5 	bl	8000840 <Error_Handler>
  }

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000254 	.word	0x20000254
 8000c80:	40004800 	.word	0x40004800

08000c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfc:	f001 f8ea 	bl	8001ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
  ldr  r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff fe87 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f00d fa25 	bl	800e190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fcf1 	bl	800072c <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d4c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d50:	08011db0 	.word	0x08011db0
  ldr  r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d58:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000d5c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000d60:	20006970 	.word	0x20006970

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f94d 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fd58 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f965 	bl	800109a <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f92d 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000294 	.word	0x20000294

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000294 	.word	0x20000294

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_Delay+0x40>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000008 	.word	0x20000008

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010c4:	4baa      	ldr	r3, [pc, #680]	; (8001370 <HAL_ETH_Init+0x2bc>)
 80010c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e185      	b.n	80013e6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f003 f9cc 	bl	800448c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_ETH_Init+0x2c0>)
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	4a9d      	ldr	r2, [pc, #628]	; (8001374 <HAL_ETH_Init+0x2c0>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001102:	6453      	str	r3, [r2, #68]	; 0x44
 8001104:	4b9b      	ldr	r3, [pc, #620]	; (8001374 <HAL_ETH_Init+0x2c0>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001110:	4b99      	ldr	r3, [pc, #612]	; (8001378 <HAL_ETH_Init+0x2c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_ETH_Init+0x2c4>)
 8001116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800111a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800111c:	4b96      	ldr	r3, [pc, #600]	; (8001378 <HAL_ETH_Init+0x2c4>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4994      	ldr	r1, [pc, #592]	; (8001378 <HAL_ETH_Init+0x2c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0201 	orr.w	r2, r2, #1
 800113c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001140:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001142:	f7ff fe77 	bl	8000e34 <HAL_GetTick>
 8001146:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001148:	e011      	b.n	800116e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800114a:	f7ff fe73 	bl	8000e34 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001158:	d909      	bls.n	800116e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e13b      	b.n	80013e6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e4      	bne.n	800114a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f023 031c 	bic.w	r3, r3, #28
 800118e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001190:	f001 fcac 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8001194:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4a78      	ldr	r2, [pc, #480]	; (800137c <HAL_ETH_Init+0x2c8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d908      	bls.n	80011b0 <HAL_ETH_Init+0xfc>
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4a77      	ldr	r2, [pc, #476]	; (8001380 <HAL_ETH_Init+0x2cc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d804      	bhi.n	80011b0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e027      	b.n	8001200 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	4a73      	ldr	r2, [pc, #460]	; (8001380 <HAL_ETH_Init+0x2cc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d908      	bls.n	80011ca <HAL_ETH_Init+0x116>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	4a72      	ldr	r2, [pc, #456]	; (8001384 <HAL_ETH_Init+0x2d0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d804      	bhi.n	80011ca <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f043 030c 	orr.w	r3, r3, #12
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	e01a      	b.n	8001200 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4a6d      	ldr	r2, [pc, #436]	; (8001384 <HAL_ETH_Init+0x2d0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d903      	bls.n	80011da <HAL_ETH_Init+0x126>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4a6c      	ldr	r2, [pc, #432]	; (8001388 <HAL_ETH_Init+0x2d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d911      	bls.n	80011fe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_ETH_Init+0x2d4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d908      	bls.n	80011f4 <HAL_ETH_Init+0x140>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4a69      	ldr	r2, [pc, #420]	; (800138c <HAL_ETH_Init+0x2d8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d804      	bhi.n	80011f4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e005      	b.n	8001200 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e000      	b.n	8001200 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80011fe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fb16 	bl	8001840 <HAL_ETH_WritePHYRegister>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00b      	beq.n	8001232 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fba3 	bl	800196c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0d9      	b.n	80013e6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f7ff fe0a 	bl	8000e4c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a7 	beq.w	8001390 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001242:	f7ff fdf7 	bl	8000e34 <HAL_GetTick>
 8001246:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	461a      	mov	r2, r3
 800124e:	2101      	movs	r1, #1
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fa8d 	bl	8001770 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001256:	f7ff fded 	bl	8000e34 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d90f      	bls.n	8001288 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fb7c 	bl	800196c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0ae      	b.n	80013e6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0da      	beq.n	8001248 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fad1 	bl	8001840 <HAL_ETH_WritePHYRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb5e 	bl	800196c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012b8:	2301      	movs	r3, #1
 80012ba:	e094      	b.n	80013e6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fdba 	bl	8000e34 <HAL_GetTick>
 80012c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa50 	bl	8001770 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012d0:	f7ff fdb0 	bl	8000e34 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d90f      	bls.n	8001302 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fb3f 	bl	800196c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e071      	b.n	80013e6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0da      	beq.n	80012c2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	461a      	mov	r2, r3
 8001312:	211f      	movs	r1, #31
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa2b 	bl	8001770 <HAL_ETH_ReadPHYRegister>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fb20 	bl	800196c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001334:	2301      	movs	r3, #1
 8001336:	e056      	b.n	80013e6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	e002      	b.n	8001352 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	e037      	b.n	80013d4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e032      	b.n	80013d4 <HAL_ETH_Init+0x320>
 800136e:	bf00      	nop
 8001370:	03938700 	.word	0x03938700
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	01312cff 	.word	0x01312cff
 8001380:	02160ebf 	.word	0x02160ebf
 8001384:	039386ff 	.word	0x039386ff
 8001388:	05f5e0ff 	.word	0x05f5e0ff
 800138c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fa49 	bl	8001840 <HAL_ETH_WritePHYRegister>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fad6 	bl	800196c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00c      	b.n	80013e6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013cc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013d0:	f7ff fd3c 	bl	8000e4c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fac8 	bl	800196c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop

080013f0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ETH_DMATxDescListInit+0x20>
 800140c:	2302      	movs	r3, #2
 800140e:	e052      	b.n	80014b6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e030      	b.n	800148e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800143c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	461a      	mov	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	d208      	bcs.n	8001482 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	e002      	b.n	8001488 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3ca      	bcc.n	800142c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	3310      	adds	r3, #16
 80014a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_ETH_DMARxDescListInit+0x20>
 80014de:	2302      	movs	r3, #2
 80014e0:	e056      	b.n	8001590 <HAL_ETH_DMARxDescListInit+0xce>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e034      	b.n	8001568 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800150e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001516:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	461a      	mov	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	429a      	cmp	r2, r3
 8001548:	d208      	bcs.n	800155c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4413      	add	r3, r2
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e002      	b.n	8001562 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d3c6      	bcc.n	80014fe <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	330c      	adds	r3, #12
 800157c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ETH_TransmitFrame+0x24>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cd      	b.n	800175c <HAL_ETH_TransmitFrame+0x1c0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0b8      	b.n	800175c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da09      	bge.n	8001608 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2212      	movs	r2, #18
 80015f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0a9      	b.n	800175c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800160e:	4293      	cmp	r3, r2
 8001610:	d915      	bls.n	800163e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_ETH_TransmitFrame+0x1cc>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a9b      	lsrs	r3, r3, #10
 800161c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_ETH_TransmitFrame+0x1cc>)
 8001622:	fba3 1302 	umull	r1, r3, r3, r2
 8001626:	0a9b      	lsrs	r3, r3, #10
 8001628:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e001      	b.n	8001642 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11c      	bne.n	8001682 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001656:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001662:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001672:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001680:	e04b      	b.n	800171a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e044      	b.n	8001712 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001696:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ac:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016b6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d116      	bne.n	80016f0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016d0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <HAL_ETH_TransmitFrame+0x1d0>)
 80016d6:	fb02 f203 	mul.w	r2, r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80016e2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ee:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3301      	adds	r3, #1
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3b6      	bcc.n	8001688 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	3314      	adds	r3, #20
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	3314      	adds	r3, #20
 8001738:	2204      	movs	r2, #4
 800173a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001744:	3304      	adds	r3, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	ac02b00b 	.word	0xac02b00b
 800176c:	fffffa0c 	.word	0xfffffa0c

08001770 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	460b      	mov	r3, r1
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b82      	cmp	r3, #130	; 0x82
 8001790:	d101      	bne.n	8001796 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
 8001794:	e050      	b.n	8001838 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2282      	movs	r2, #130	; 0x82
 800179a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 031c 	and.w	r3, r3, #28
 80017ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8a1b      	ldrh	r3, [r3, #16]
 80017b2:	02db      	lsls	r3, r3, #11
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017bc:	897b      	ldrh	r3, [r7, #10]
 80017be:	019b      	lsls	r3, r3, #6
 80017c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f023 0302 	bic.w	r3, r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017e2:	f7ff fb27 	bl	8000e34 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017e8:	e015      	b.n	8001816 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80017ea:	f7ff fb23 	bl	8000e34 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d309      	bcc.n	800180e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e014      	b.n	8001838 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e4      	bne.n	80017ea <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	460b      	mov	r3, r1
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b42      	cmp	r3, #66	; 0x42
 8001860:	d101      	bne.n	8001866 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001862:	2302      	movs	r3, #2
 8001864:	e04e      	b.n	8001904 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2242      	movs	r2, #66	; 0x42
 800186a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 031c 	and.w	r3, r3, #28
 800187c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8a1b      	ldrh	r3, [r3, #16]
 8001882:	02db      	lsls	r3, r3, #11
 8001884:	b29b      	uxth	r3, r3
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800188c:	897b      	ldrh	r3, [r7, #10]
 800188e:	019b      	lsls	r3, r3, #6
 8001890:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018bc:	f7ff faba 	bl	8000e34 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018c2:	e015      	b.n	80018f0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018c4:	f7ff fab6 	bl	8000e34 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d309      	bcc.n	80018e8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e00d      	b.n	8001904 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1e4      	bne.n	80018c4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ETH_Start+0x16>
 800191e:	2302      	movs	r3, #2
 8001920:	e01f      	b.n	8001962 <HAL_ETH_Start+0x56>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fa1c 	bl	8001d70 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fa36 	bl	8001daa <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa80 	bl	8001e44 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fa4d 	bl	8001de4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa62 	bl	8001e14 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0b0      	sub	sp, #192	; 0xc0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001988:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001990:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800199a:	2300      	movs	r3, #0
 800199c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	663b      	str	r3, [r7, #96]	; 0x60
 80019b8:	e001      	b.n	80019be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019c8:	2300      	movs	r3, #0
 80019ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a44:	4bac      	ldr	r3, [pc, #688]	; (8001cf8 <ETH_MACDMAConfig+0x38c>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a50:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a54:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a58:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a5e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a62:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a66:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a6c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a70:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a74:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a78:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a7c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a80:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff f9d3 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ab0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ab4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ab8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001abe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ac4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001aca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ad4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001adc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ade:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff f9ae 	bl	8000e4c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001af8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b02:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b0c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b20:	4013      	ands	r3, r2
 8001b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b2a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b30:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b36:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b3c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b42:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b48:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b5c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff f96f 	bl	8000e4c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b76:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff f95a 	bl	8000e4c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001baa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001bb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bb4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	3318      	adds	r3, #24
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <ETH_MACDMAConfig+0x390>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c0a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c0e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c10:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c12:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c14:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c16:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c18:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c1a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c1c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c1e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c20:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c22:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c26:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	3318      	adds	r3, #24
 8001c40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4e:	3318      	adds	r3, #24
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff f8f8 	bl	8000e4c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	3318      	adds	r3, #24
 8001c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c6a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c70:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c74:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c78:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c7c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c80:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c82:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c86:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c94:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f8d1 	bl	8000e4c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d10f      	bne.n	8001ce0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc8:	331c      	adds	r3, #28
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cdc:	331c      	adds	r3, #28
 8001cde:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f809 	bl	8001d00 <ETH_MACAddressConfig>
}
 8001cee:	bf00      	nop
 8001cf0:	37c0      	adds	r7, #192	; 0xc0
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	ff20810f 	.word	0xff20810f
 8001cfc:	f8de3f23 	.word	0xf8de3f23

08001d00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3305      	adds	r3, #5
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	3204      	adds	r2, #4
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <ETH_MACAddressConfig+0x68>)
 8001d22:	4413      	add	r3, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	061a      	lsls	r2, r3, #24
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3302      	adds	r3, #2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4313      	orrs	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <ETH_MACAddressConfig+0x6c>)
 8001d52:	4413      	add	r3, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	6013      	str	r3, [r2, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40028040 	.word	0x40028040
 8001d6c:	40028044 	.word	0x40028044

08001d70 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f000 f87f 	bl	8001e98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0204 	orr.w	r2, r2, #4
 8001dc4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 f862 	bl	8001e98 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	3318      	adds	r3, #24
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	3318      	adds	r3, #24
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	3318      	adds	r3, #24
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0202 	orr.w	r2, r2, #2
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	3318      	adds	r3, #24
 8001e36:	601a      	str	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	3318      	adds	r3, #24
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	3318      	adds	r3, #24
 8001e6a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	3318      	adds	r3, #24
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 f80c 	bl	8001e98 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	3318      	adds	r3, #24
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <ETH_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <ETH_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001eb4:	bf00      	nop
  } 
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <ETH_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e177      	b.n	80021e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8166 	bne.w	80021da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d00b      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d130      	bne.n	8001f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0201 	and.w	r2, r3, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0xfc>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80c0 	beq.w	80021da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_GPIO_Init+0x320>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <HAL_GPIO_Init+0x320>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <HAL_GPIO_Init+0x320>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_GPIO_Init+0x328>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d037      	beq.n	8002112 <HAL_GPIO_Init+0x23e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_GPIO_Init+0x32c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_GPIO_Init+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a55      	ldr	r2, [pc, #340]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x236>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a54      	ldr	r2, [pc, #336]	; (8002208 <HAL_GPIO_Init+0x334>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x232>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_GPIO_Init+0x338>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x33c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x340>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x344>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x348>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x34c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ea:	2309      	movs	r3, #9
 80020ec:	e012      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020ee:	230a      	movs	r3, #10
 80020f0:	e010      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4934      	ldr	r1, [pc, #208]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002132:	4b3c      	ldr	r3, [pc, #240]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002156:	4a33      	ldr	r2, [pc, #204]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_GPIO_Init+0x350>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002186:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_GPIO_Init+0x350>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_GPIO_Init+0x350>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae84 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	3724      	adds	r7, #36	; 0x24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40021c00 	.word	0x40021c00
 800221c:	40022000 	.word	0x40022000
 8002220:	40022400 	.word	0x40022400
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	401a      	ands	r2, r3
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	429a      	cmp	r2, r3
 8002272:	d104      	bne.n	800227e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	041a      	lsls	r2, r3, #16
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e25b      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	4ba3      	ldr	r3, [pc, #652]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4ba0      	ldr	r3, [pc, #640]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b9d      	ldr	r3, [pc, #628]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b99      	ldr	r3, [pc, #612]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e236      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b91      	ldr	r3, [pc, #580]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a90      	ldr	r2, [pc, #576]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a8a      	ldr	r2, [pc, #552]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a87      	ldr	r2, [pc, #540]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b84      	ldr	r3, [pc, #528]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a83      	ldr	r2, [pc, #524]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a80      	ldr	r2, [pc, #512]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fd74 	bl	8000e34 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fd70 	bl	8000e34 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1fb      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fd60 	bl	8000e34 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fd5c 	bl	8000e34 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1e7      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b62      	ldr	r3, [pc, #392]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1bb      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4952      	ldr	r1, [pc, #328]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <HAL_RCC_OscConfig+0x2b0>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fd15 	bl	8000e34 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fd11 	bl	8000e34 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e19c      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4940      	ldr	r1, [pc, #256]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x2b0>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fcf4 	bl	8000e34 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fcf0 	bl	8000e34 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e17b      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d030      	beq.n	80024dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x2b4>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe fcd4 	bl	8000e34 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fcd0 	bl	8000e34 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e15b      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 80024ae:	e015      	b.n	80024dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x2b4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fcbd 	bl	8000e34 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe fcb9 	bl	8000e34 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e144      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a0 	beq.w	800262a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d121      	bne.n	800256a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fc7f 	bl	8000e34 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e011      	b.n	800255e <HAL_RCC_OscConfig+0x2ce>
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
 8002548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254c:	f7fe fc72 	bl	8000e34 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0fd      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x4d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 8002572:	4b7d      	ldr	r3, [pc, #500]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a7c      	ldr	r2, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x32a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x312>
 8002588:	4b77      	ldr	r3, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a76      	ldr	r2, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	4b74      	ldr	r3, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a73      	ldr	r2, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x32a>
 80025a2:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a70      	ldr	r2, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b6e      	ldr	r3, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc37 	bl	8000e34 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fc33 	bl	8000e34 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0bc      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x33a>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fc21 	bl	8000e34 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fc1d 	bl	8000e34 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0a6      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b56      	ldr	r3, [pc, #344]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b52      	ldr	r3, [pc, #328]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a51      	ldr	r2, [pc, #324]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8092 	beq.w	8002758 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d05c      	beq.n	80026fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d141      	bne.n	80026cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCC_OscConfig+0x4dc>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe fbf1 	bl	8000e34 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fbed 	bl	8000e34 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e078      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	019b      	lsls	r3, r3, #6
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	3b01      	subs	r3, #1
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4933      	ldr	r1, [pc, #204]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269e:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x4dc>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fbc6 	bl	8000e34 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fbc2 	bl	8000e34 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04d      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x41c>
 80026ca:	e045      	b.n	8002758 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fbaf 	bl	8000e34 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fbab 	bl	8000e34 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e036      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x44a>
 80026f8:	e02e      	b.n	8002758 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e029      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x4d8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	429a      	cmp	r2, r3
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002734:	4293      	cmp	r3, r2
 8002736:	d10d      	bne.n	8002754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40007000 	.word	0x40007000
 8002768:	40023800 	.word	0x40023800
 800276c:	42470060 	.word	0x42470060

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0cc      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d90c      	bls.n	80027ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d044      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d119      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282a:	2b03      	cmp	r3, #3
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e067      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b37      	ldr	r3, [pc, #220]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4934      	ldr	r1, [pc, #208]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fae8 	bl	8000e34 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fae4 	bl	8000e34 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e04f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d20c      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	fa21 f303 	lsr.w	r3, r1, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa48 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	08011be8 	.word	0x08011be8
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d007      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x32>
 800295e:	2b08      	cmp	r3, #8
 8002960:	d008      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x38>
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80b4 	bne.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800296a:	60bb      	str	r3, [r7, #8]
       break;
 800296c:	e0b3      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002970:	60bb      	str	r3, [r7, #8]
      break;
 8002972:	e0b0      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04a      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	ea03 0501 	and.w	r5, r3, r1
 80029a0:	ea04 0602 	and.w	r6, r4, r2
 80029a4:	4629      	mov	r1, r5
 80029a6:	4632      	mov	r2, r6
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	0154      	lsls	r4, r2, #5
 80029b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029b6:	014b      	lsls	r3, r1, #5
 80029b8:	4619      	mov	r1, r3
 80029ba:	4622      	mov	r2, r4
 80029bc:	1b49      	subs	r1, r1, r5
 80029be:	eb62 0206 	sbc.w	r2, r2, r6
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	0194      	lsls	r4, r2, #6
 80029cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029d0:	018b      	lsls	r3, r1, #6
 80029d2:	1a5b      	subs	r3, r3, r1
 80029d4:	eb64 0402 	sbc.w	r4, r4, r2
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	00e2      	lsls	r2, r4, #3
 80029e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	460b      	mov	r3, r1
 80029ea:	4614      	mov	r4, r2
 80029ec:	195b      	adds	r3, r3, r5
 80029ee:	eb44 0406 	adc.w	r4, r4, r6
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	0262      	lsls	r2, r4, #9
 80029fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a00:	0259      	lsls	r1, r3, #9
 8002a02:	460b      	mov	r3, r1
 8002a04:	4614      	mov	r4, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	4621      	mov	r1, r4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f04f 0400 	mov.w	r4, #0
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	f7fd fc3c 	bl	8000290 <__aeabi_uldivmod>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e049      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	f04f 0400 	mov.w	r4, #0
 8002a2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	ea03 0501 	and.w	r5, r3, r1
 8002a36:	ea04 0602 	and.w	r6, r4, r2
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	4632      	mov	r2, r6
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	0154      	lsls	r4, r2, #5
 8002a48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a4c:	014b      	lsls	r3, r1, #5
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4622      	mov	r2, r4
 8002a52:	1b49      	subs	r1, r1, r5
 8002a54:	eb62 0206 	sbc.w	r2, r2, r6
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	0194      	lsls	r4, r2, #6
 8002a62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a66:	018b      	lsls	r3, r1, #6
 8002a68:	1a5b      	subs	r3, r3, r1
 8002a6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	00e2      	lsls	r2, r4, #3
 8002a78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a7c:	00d9      	lsls	r1, r3, #3
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	195b      	adds	r3, r3, r5
 8002a84:	eb44 0406 	adc.w	r4, r4, r6
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	02a2      	lsls	r2, r4, #10
 8002a92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a96:	0299      	lsls	r1, r3, #10
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	f7fd fbf1 	bl	8000290 <__aeabi_uldivmod>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ad2:	60bb      	str	r3, [r7, #8]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08011bf8 	.word	0x08011bf8

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4601      	mov	r1, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08011bf8 	.word	0x08011bf8

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01d      	b.n	8002ba2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd fff6 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 fb14 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e01d      	b.n	8002bf8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f815 	bl	8002c00 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f000 fae9 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d841      	bhi.n	8002ca8 <HAL_TIM_OC_Start_IT+0x94>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_TIM_OC_Start_IT+0x18>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002ca9 	.word	0x08002ca9
 8002c34:	08002ca9 	.word	0x08002ca9
 8002c38:	08002ca9 	.word	0x08002ca9
 8002c3c:	08002c73 	.word	0x08002c73
 8002c40:	08002ca9 	.word	0x08002ca9
 8002c44:	08002ca9 	.word	0x08002ca9
 8002c48:	08002ca9 	.word	0x08002ca9
 8002c4c:	08002c85 	.word	0x08002c85
 8002c50:	08002ca9 	.word	0x08002ca9
 8002c54:	08002ca9 	.word	0x08002ca9
 8002c58:	08002ca9 	.word	0x08002ca9
 8002c5c:	08002c97 	.word	0x08002c97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0202 	orr.w	r2, r2, #2
 8002c6e:	60da      	str	r2, [r3, #12]
      break;
 8002c70:	e01b      	b.n	8002caa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0204 	orr.w	r2, r2, #4
 8002c80:	60da      	str	r2, [r3, #12]
      break;
 8002c82:	e012      	b.n	8002caa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	60da      	str	r2, [r3, #12]
      break;
 8002c94:	e009      	b.n	8002caa <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0210 	orr.w	r2, r2, #16
 8002ca4:	60da      	str	r2, [r3, #12]
      break;
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8002ca8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fd6e 	bl	8003794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_TIM_OC_Start_IT+0x100>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_TIM_OC_Start_IT+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_TIM_OC_Start_IT+0x104>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIM_OC_Start_IT+0xbc>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_TIM_OC_Start_IT+0xbe>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d007      	beq.n	8002d08 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa0f 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa01 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa12 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9e5 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9d7 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9e8 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9bb 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9ad 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f9be 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f991 	bl	8003182 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f983 	bl	800316e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f994 	bl	8003196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f95d 	bl	800315a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fd10 	bl	80038ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f959 	bl	80031aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0220 	mvn.w	r2, #32
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fcda 	bl	80038d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e04e      	b.n	8002fe4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d839      	bhi.n	8002fd0 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	08002fd1 	.word	0x08002fd1
 8002f6c:	08002fd1 	.word	0x08002fd1
 8002f70:	08002fd1 	.word	0x08002fd1
 8002f74:	08002fa7 	.word	0x08002fa7
 8002f78:	08002fd1 	.word	0x08002fd1
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fd1 	.word	0x08002fd1
 8002f8c:	08002fd1 	.word	0x08002fd1
 8002f90:	08002fd1 	.word	0x08002fd1
 8002f94:	08002fc3 	.word	0x08002fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9ae 	bl	8003300 <TIM_OC1_SetConfig>
      break;
 8002fa4:	e015      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fa17 	bl	80033e0 <TIM_OC2_SetConfig>
      break;
 8002fb2:	e00e      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa86 	bl	80034cc <TIM_OC3_SetConfig>
      break;
 8002fc0:	e007      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 faf3 	bl	80035b4 <TIM_OC4_SetConfig>
      break;
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002fd0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_ConfigClockSource+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e0a6      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x166>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800302a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d067      	beq.n	800310c <HAL_TIM_ConfigClockSource+0x120>
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d80b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x6c>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d073      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x140>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d802      	bhi.n	800304e <HAL_TIM_ConfigClockSource+0x62>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d06f      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800304c:	e078      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800304e:	2b20      	cmp	r3, #32
 8003050:	d06c      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x140>
 8003052:	2b30      	cmp	r3, #48	; 0x30
 8003054:	d06a      	beq.n	800312c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003056:	e073      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003058:	2b70      	cmp	r3, #112	; 0x70
 800305a:	d00d      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0x8c>
 800305c:	2b70      	cmp	r3, #112	; 0x70
 800305e:	d804      	bhi.n	800306a <HAL_TIM_ConfigClockSource+0x7e>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d033      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xe0>
 8003064:	2b60      	cmp	r3, #96	; 0x60
 8003066:	d041      	beq.n	80030ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003068:	e06a      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d066      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x152>
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003074:	d017      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003076:	e063      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f000 fb64 	bl	8003754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800309a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e04c      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f000 fb4d 	bl	8003754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c8:	609a      	str	r2, [r3, #8]
      break;
 80030ca:	e039      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	461a      	mov	r2, r3
 80030da:	f000 fac1 	bl	8003660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2150      	movs	r1, #80	; 0x50
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fb1a 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 80030ea:	e029      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f000 fae0 	bl	80036be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2160      	movs	r1, #96	; 0x60
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fb0a 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 800310a:	e019      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	461a      	mov	r2, r3
 800311a:	f000 faa1 	bl	8003660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fafa 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 800312a:	e009      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 faf1 	bl	800371e <TIM_ITRx_SetConfig>
      break;
 800313c:	e000      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800313e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d00f      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00b      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3c      	ldr	r2, [pc, #240]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3a      	ldr	r2, [pc, #232]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2f      	ldr	r2, [pc, #188]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d027      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <TIM_Base_SetConfig+0x118>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d023      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <TIM_Base_SetConfig+0x11c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <TIM_Base_SetConfig+0x120>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d017      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <TIM_Base_SetConfig+0x128>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <TIM_Base_SetConfig+0x12c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0x130>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <TIM_Base_SetConfig+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <TIM_Base_SetConfig+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <TIM_Base_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0xf8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <TIM_Base_SetConfig+0x124>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40010400 	.word	0x40010400
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	40001800 	.word	0x40001800
 80032f8:	40001c00 	.word	0x40001c00
 80032fc:	40002000 	.word	0x40002000

08003300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0302 	bic.w	r3, r3, #2
 8003348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <TIM_OC1_SetConfig+0xd8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC1_SetConfig+0x64>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <TIM_OC1_SetConfig+0xdc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10c      	bne.n	800337e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0308 	bic.w	r3, r3, #8
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <TIM_OC1_SetConfig+0xd8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_OC1_SetConfig+0x8e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <TIM_OC1_SetConfig+0xdc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d111      	bne.n	80033b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800339c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	621a      	str	r2, [r3, #32]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010400 	.word	0x40010400

080033e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <TIM_OC2_SetConfig+0xe4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC2_SetConfig+0x68>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <TIM_OC2_SetConfig+0xe8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d10d      	bne.n	8003464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <TIM_OC2_SetConfig+0xe4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC2_SetConfig+0x94>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <TIM_OC2_SetConfig+0xe8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d113      	bne.n	800349c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800347a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010400 	.word	0x40010400

080034cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a21      	ldr	r2, [pc, #132]	; (80035ac <TIM_OC3_SetConfig+0xe0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_OC3_SetConfig+0x66>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <TIM_OC3_SetConfig+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10d      	bne.n	800354e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <TIM_OC3_SetConfig+0xe0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC3_SetConfig+0x92>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a15      	ldr	r2, [pc, #84]	; (80035b0 <TIM_OC3_SetConfig+0xe4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d113      	bne.n	8003586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800356c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40010400 	.word	0x40010400

080035b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <TIM_OC4_SetConfig+0xa4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_OC4_SetConfig+0x68>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <TIM_OC4_SetConfig+0xa8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d109      	bne.n	8003630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40010400 	.word	0x40010400

08003660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 030a 	bic.w	r3, r3, #10
 800369c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036be:	b480      	push	{r7}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0210 	bic.w	r2, r3, #16
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	031b      	lsls	r3, r3, #12
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	f043 0307 	orr.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	021a      	lsls	r2, r3, #8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	431a      	orrs	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2201      	movs	r2, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e05a      	b.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d01d      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10c      	bne.n	800389c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4313      	orrs	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40010400 	.word	0x40010400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40001800 	.word	0x40001800

080038d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e03f      	b.n	8003992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f9ac 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f90b 	bl	8003b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b088      	sub	sp, #32
 800399e:	af02      	add	r7, sp, #8
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	f040 8083 	bne.w	8003ac2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Transmit+0x2e>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e07b      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_UART_Transmit+0x40>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e074      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2221      	movs	r2, #33	; 0x21
 80039ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039f0:	f7fd fa20 	bl	8000e34 <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a0a:	e042      	b.n	8003a92 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d122      	bne.n	8003a6a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f84c 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e042      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	e017      	b.n	8003a92 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	e013      	b.n	8003a92 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f829 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e01f      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	60ba      	str	r2, [r7, #8]
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1b7      	bne.n	8003a0c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f810 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003adc:	e02c      	b.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d028      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x30>
 8003aec:	f7fd f9a2 	bl	8000e34 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d21d      	bcs.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00f      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d0c3      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ba2:	f023 030c 	bic.w	r3, r3, #12
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	68f9      	ldr	r1, [r7, #12]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bce:	f040 818b 	bne.w	8003ee8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4ac1      	ldr	r2, [pc, #772]	; (8003edc <UART_SetConfig+0x37c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d005      	beq.n	8003be8 <UART_SetConfig+0x88>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4abf      	ldr	r2, [pc, #764]	; (8003ee0 <UART_SetConfig+0x380>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f040 80bd 	bne.w	8003d62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7fe ffa0 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003bec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	f04f 0600 	mov.w	r6, #0
 8003bf6:	46a8      	mov	r8, r5
 8003bf8:	46b1      	mov	r9, r6
 8003bfa:	eb18 0308 	adds.w	r3, r8, r8
 8003bfe:	eb49 0409 	adc.w	r4, r9, r9
 8003c02:	4698      	mov	r8, r3
 8003c04:	46a1      	mov	r9, r4
 8003c06:	eb18 0805 	adds.w	r8, r8, r5
 8003c0a:	eb49 0906 	adc.w	r9, r9, r6
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c22:	4688      	mov	r8, r1
 8003c24:	4691      	mov	r9, r2
 8003c26:	eb18 0005 	adds.w	r0, r8, r5
 8003c2a:	eb49 0106 	adc.w	r1, r9, r6
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	461d      	mov	r5, r3
 8003c34:	f04f 0600 	mov.w	r6, #0
 8003c38:	196b      	adds	r3, r5, r5
 8003c3a:	eb46 0406 	adc.w	r4, r6, r6
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	f7fc fb25 	bl	8000290 <__aeabi_uldivmod>
 8003c46:	4603      	mov	r3, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4ba5      	ldr	r3, [pc, #660]	; (8003ee4 <UART_SetConfig+0x384>)
 8003c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	f04f 0600 	mov.w	r6, #0
 8003c60:	46a9      	mov	r9, r5
 8003c62:	46b2      	mov	sl, r6
 8003c64:	eb19 0309 	adds.w	r3, r9, r9
 8003c68:	eb4a 040a 	adc.w	r4, sl, sl
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	46a2      	mov	sl, r4
 8003c70:	eb19 0905 	adds.w	r9, r9, r5
 8003c74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c8c:	4689      	mov	r9, r1
 8003c8e:	4692      	mov	sl, r2
 8003c90:	eb19 0005 	adds.w	r0, r9, r5
 8003c94:	eb4a 0106 	adc.w	r1, sl, r6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	461d      	mov	r5, r3
 8003c9e:	f04f 0600 	mov.w	r6, #0
 8003ca2:	196b      	adds	r3, r5, r5
 8003ca4:	eb46 0406 	adc.w	r4, r6, r6
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc faf0 	bl	8000290 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <UART_SetConfig+0x384>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a86      	ldr	r2, [pc, #536]	; (8003ee4 <UART_SetConfig+0x384>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cd8:	4498      	add	r8, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	461d      	mov	r5, r3
 8003cde:	f04f 0600 	mov.w	r6, #0
 8003ce2:	46a9      	mov	r9, r5
 8003ce4:	46b2      	mov	sl, r6
 8003ce6:	eb19 0309 	adds.w	r3, r9, r9
 8003cea:	eb4a 040a 	adc.w	r4, sl, sl
 8003cee:	4699      	mov	r9, r3
 8003cf0:	46a2      	mov	sl, r4
 8003cf2:	eb19 0905 	adds.w	r9, r9, r5
 8003cf6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d0e:	4689      	mov	r9, r1
 8003d10:	4692      	mov	sl, r2
 8003d12:	eb19 0005 	adds.w	r0, r9, r5
 8003d16:	eb4a 0106 	adc.w	r1, sl, r6
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	461d      	mov	r5, r3
 8003d20:	f04f 0600 	mov.w	r6, #0
 8003d24:	196b      	adds	r3, r5, r5
 8003d26:	eb46 0406 	adc.w	r4, r6, r6
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	f7fc faaf 	bl	8000290 <__aeabi_uldivmod>
 8003d32:	4603      	mov	r3, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <UART_SetConfig+0x384>)
 8003d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2164      	movs	r1, #100	; 0x64
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	3332      	adds	r3, #50	; 0x32
 8003d4c:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <UART_SetConfig+0x384>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	f003 0207 	and.w	r2, r3, #7
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4442      	add	r2, r8
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e26f      	b.n	8004242 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d62:	f7fe fecf 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8003d66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	f04f 0600 	mov.w	r6, #0
 8003d70:	46a8      	mov	r8, r5
 8003d72:	46b1      	mov	r9, r6
 8003d74:	eb18 0308 	adds.w	r3, r8, r8
 8003d78:	eb49 0409 	adc.w	r4, r9, r9
 8003d7c:	4698      	mov	r8, r3
 8003d7e:	46a1      	mov	r9, r4
 8003d80:	eb18 0805 	adds.w	r8, r8, r5
 8003d84:	eb49 0906 	adc.w	r9, r9, r6
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d9c:	4688      	mov	r8, r1
 8003d9e:	4691      	mov	r9, r2
 8003da0:	eb18 0005 	adds.w	r0, r8, r5
 8003da4:	eb49 0106 	adc.w	r1, r9, r6
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	461d      	mov	r5, r3
 8003dae:	f04f 0600 	mov.w	r6, #0
 8003db2:	196b      	adds	r3, r5, r5
 8003db4:	eb46 0406 	adc.w	r4, r6, r6
 8003db8:	461a      	mov	r2, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	f7fc fa68 	bl	8000290 <__aeabi_uldivmod>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <UART_SetConfig+0x384>)
 8003dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	f04f 0600 	mov.w	r6, #0
 8003dda:	46a9      	mov	r9, r5
 8003ddc:	46b2      	mov	sl, r6
 8003dde:	eb19 0309 	adds.w	r3, r9, r9
 8003de2:	eb4a 040a 	adc.w	r4, sl, sl
 8003de6:	4699      	mov	r9, r3
 8003de8:	46a2      	mov	sl, r4
 8003dea:	eb19 0905 	adds.w	r9, r9, r5
 8003dee:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e06:	4689      	mov	r9, r1
 8003e08:	4692      	mov	sl, r2
 8003e0a:	eb19 0005 	adds.w	r0, r9, r5
 8003e0e:	eb4a 0106 	adc.w	r1, sl, r6
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	461d      	mov	r5, r3
 8003e18:	f04f 0600 	mov.w	r6, #0
 8003e1c:	196b      	adds	r3, r5, r5
 8003e1e:	eb46 0406 	adc.w	r4, r6, r6
 8003e22:	461a      	mov	r2, r3
 8003e24:	4623      	mov	r3, r4
 8003e26:	f7fc fa33 	bl	8000290 <__aeabi_uldivmod>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <UART_SetConfig+0x384>)
 8003e32:	fba3 1302 	umull	r1, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2164      	movs	r1, #100	; 0x64
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	3332      	adds	r3, #50	; 0x32
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <UART_SetConfig+0x384>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e52:	4498      	add	r8, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	461d      	mov	r5, r3
 8003e58:	f04f 0600 	mov.w	r6, #0
 8003e5c:	46a9      	mov	r9, r5
 8003e5e:	46b2      	mov	sl, r6
 8003e60:	eb19 0309 	adds.w	r3, r9, r9
 8003e64:	eb4a 040a 	adc.w	r4, sl, sl
 8003e68:	4699      	mov	r9, r3
 8003e6a:	46a2      	mov	sl, r4
 8003e6c:	eb19 0905 	adds.w	r9, r9, r5
 8003e70:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e88:	4689      	mov	r9, r1
 8003e8a:	4692      	mov	sl, r2
 8003e8c:	eb19 0005 	adds.w	r0, r9, r5
 8003e90:	eb4a 0106 	adc.w	r1, sl, r6
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	461d      	mov	r5, r3
 8003e9a:	f04f 0600 	mov.w	r6, #0
 8003e9e:	196b      	adds	r3, r5, r5
 8003ea0:	eb46 0406 	adc.w	r4, r6, r6
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f7fc f9f2 	bl	8000290 <__aeabi_uldivmod>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <UART_SetConfig+0x384>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <UART_SetConfig+0x384>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 0207 	and.w	r2, r3, #7
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4442      	add	r2, r8
 8003ed8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eda:	e1b2      	b.n	8004242 <UART_SetConfig+0x6e2>
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4ad7      	ldr	r2, [pc, #860]	; (800424c <UART_SetConfig+0x6ec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d005      	beq.n	8003efe <UART_SetConfig+0x39e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4ad6      	ldr	r2, [pc, #856]	; (8004250 <UART_SetConfig+0x6f0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	f040 80d1 	bne.w	80040a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003efe:	f7fe fe15 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003f02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	469a      	mov	sl, r3
 8003f08:	f04f 0b00 	mov.w	fp, #0
 8003f0c:	46d0      	mov	r8, sl
 8003f0e:	46d9      	mov	r9, fp
 8003f10:	eb18 0308 	adds.w	r3, r8, r8
 8003f14:	eb49 0409 	adc.w	r4, r9, r9
 8003f18:	4698      	mov	r8, r3
 8003f1a:	46a1      	mov	r9, r4
 8003f1c:	eb18 080a 	adds.w	r8, r8, sl
 8003f20:	eb49 090b 	adc.w	r9, r9, fp
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f38:	4688      	mov	r8, r1
 8003f3a:	4691      	mov	r9, r2
 8003f3c:	eb1a 0508 	adds.w	r5, sl, r8
 8003f40:	eb4b 0609 	adc.w	r6, fp, r9
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0094      	lsls	r4, r2, #2
 8003f58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4623      	mov	r3, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	4631      	mov	r1, r6
 8003f66:	f7fc f993 	bl	8000290 <__aeabi_uldivmod>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4bb8      	ldr	r3, [pc, #736]	; (8004254 <UART_SetConfig+0x6f4>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	469b      	mov	fp, r3
 8003f80:	f04f 0c00 	mov.w	ip, #0
 8003f84:	46d9      	mov	r9, fp
 8003f86:	46e2      	mov	sl, ip
 8003f88:	eb19 0309 	adds.w	r3, r9, r9
 8003f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f90:	4699      	mov	r9, r3
 8003f92:	46a2      	mov	sl, r4
 8003f94:	eb19 090b 	adds.w	r9, r9, fp
 8003f98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb0:	4689      	mov	r9, r1
 8003fb2:	4692      	mov	sl, r2
 8003fb4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fb8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	0094      	lsls	r4, r2, #2
 8003fd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd4:	008b      	lsls	r3, r1, #2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4623      	mov	r3, r4
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4631      	mov	r1, r6
 8003fde:	f7fc f957 	bl	8000290 <__aeabi_uldivmod>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b9a      	ldr	r3, [pc, #616]	; (8004254 <UART_SetConfig+0x6f4>)
 8003fea:	fba3 1302 	umull	r1, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2164      	movs	r1, #100	; 0x64
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	3332      	adds	r3, #50	; 0x32
 8003ffc:	4a95      	ldr	r2, [pc, #596]	; (8004254 <UART_SetConfig+0x6f4>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004008:	4498      	add	r8, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	469b      	mov	fp, r3
 800400e:	f04f 0c00 	mov.w	ip, #0
 8004012:	46d9      	mov	r9, fp
 8004014:	46e2      	mov	sl, ip
 8004016:	eb19 0309 	adds.w	r3, r9, r9
 800401a:	eb4a 040a 	adc.w	r4, sl, sl
 800401e:	4699      	mov	r9, r3
 8004020:	46a2      	mov	sl, r4
 8004022:	eb19 090b 	adds.w	r9, r9, fp
 8004026:	eb4a 0a0c 	adc.w	sl, sl, ip
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004036:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800403a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800403e:	4689      	mov	r9, r1
 8004040:	4692      	mov	sl, r2
 8004042:	eb1b 0509 	adds.w	r5, fp, r9
 8004046:	eb4c 060a 	adc.w	r6, ip, sl
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	0094      	lsls	r4, r2, #2
 800405e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004062:	008b      	lsls	r3, r1, #2
 8004064:	461a      	mov	r2, r3
 8004066:	4623      	mov	r3, r4
 8004068:	4628      	mov	r0, r5
 800406a:	4631      	mov	r1, r6
 800406c:	f7fc f910 	bl	8000290 <__aeabi_uldivmod>
 8004070:	4603      	mov	r3, r0
 8004072:	460c      	mov	r4, r1
 8004074:	461a      	mov	r2, r3
 8004076:	4b77      	ldr	r3, [pc, #476]	; (8004254 <UART_SetConfig+0x6f4>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a72      	ldr	r2, [pc, #456]	; (8004254 <UART_SetConfig+0x6f4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4442      	add	r2, r8
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	e0d0      	b.n	8004242 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe fd30 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 80040a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	469a      	mov	sl, r3
 80040aa:	f04f 0b00 	mov.w	fp, #0
 80040ae:	46d0      	mov	r8, sl
 80040b0:	46d9      	mov	r9, fp
 80040b2:	eb18 0308 	adds.w	r3, r8, r8
 80040b6:	eb49 0409 	adc.w	r4, r9, r9
 80040ba:	4698      	mov	r8, r3
 80040bc:	46a1      	mov	r9, r4
 80040be:	eb18 080a 	adds.w	r8, r8, sl
 80040c2:	eb49 090b 	adc.w	r9, r9, fp
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040da:	4688      	mov	r8, r1
 80040dc:	4691      	mov	r9, r2
 80040de:	eb1a 0508 	adds.w	r5, sl, r8
 80040e2:	eb4b 0609 	adc.w	r6, fp, r9
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0094      	lsls	r4, r2, #2
 80040fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	4628      	mov	r0, r5
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc f8c2 	bl	8000290 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	461a      	mov	r2, r3
 8004112:	4b50      	ldr	r3, [pc, #320]	; (8004254 <UART_SetConfig+0x6f4>)
 8004114:	fba3 2302 	umull	r2, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	469b      	mov	fp, r3
 8004122:	f04f 0c00 	mov.w	ip, #0
 8004126:	46d9      	mov	r9, fp
 8004128:	46e2      	mov	sl, ip
 800412a:	eb19 0309 	adds.w	r3, r9, r9
 800412e:	eb4a 040a 	adc.w	r4, sl, sl
 8004132:	4699      	mov	r9, r3
 8004134:	46a2      	mov	sl, r4
 8004136:	eb19 090b 	adds.w	r9, r9, fp
 800413a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800414e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004152:	4689      	mov	r9, r1
 8004154:	4692      	mov	sl, r2
 8004156:	eb1b 0509 	adds.w	r5, fp, r9
 800415a:	eb4c 060a 	adc.w	r6, ip, sl
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4619      	mov	r1, r3
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	f04f 0400 	mov.w	r4, #0
 8004170:	0094      	lsls	r4, r2, #2
 8004172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004176:	008b      	lsls	r3, r1, #2
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	4628      	mov	r0, r5
 800417e:	4631      	mov	r1, r6
 8004180:	f7fc f886 	bl	8000290 <__aeabi_uldivmod>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	461a      	mov	r2, r3
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <UART_SetConfig+0x6f4>)
 800418c:	fba3 1302 	umull	r1, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	2164      	movs	r1, #100	; 0x64
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	3332      	adds	r3, #50	; 0x32
 800419e:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <UART_SetConfig+0x6f4>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	4498      	add	r8, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	469b      	mov	fp, r3
 80041b0:	f04f 0c00 	mov.w	ip, #0
 80041b4:	46d9      	mov	r9, fp
 80041b6:	46e2      	mov	sl, ip
 80041b8:	eb19 0309 	adds.w	r3, r9, r9
 80041bc:	eb4a 040a 	adc.w	r4, sl, sl
 80041c0:	4699      	mov	r9, r3
 80041c2:	46a2      	mov	sl, r4
 80041c4:	eb19 090b 	adds.w	r9, r9, fp
 80041c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041e0:	4689      	mov	r9, r1
 80041e2:	4692      	mov	sl, r2
 80041e4:	eb1b 0509 	adds.w	r5, fp, r9
 80041e8:	eb4c 060a 	adc.w	r6, ip, sl
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f04f 0400 	mov.w	r4, #0
 80041fe:	0094      	lsls	r4, r2, #2
 8004200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	4628      	mov	r0, r5
 800420c:	4631      	mov	r1, r6
 800420e:	f7fc f83f 	bl	8000290 <__aeabi_uldivmod>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	461a      	mov	r2, r3
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <UART_SetConfig+0x6f4>)
 800421a:	fba3 1302 	umull	r1, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2164      	movs	r1, #100	; 0x64
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	3332      	adds	r3, #50	; 0x32
 800422c:	4a09      	ldr	r2, [pc, #36]	; (8004254 <UART_SetConfig+0x6f4>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4442      	add	r2, r8
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	e7ff      	b.n	8004242 <UART_SetConfig+0x6e2>
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <__io_putchar>:
/* USER CODE BEGIN 2 */
//redirect printf to Uart;


int __io_putchar(int ch)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8004260:	1d39      	adds	r1, r7, #4
 8004262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004266:	2201      	movs	r2, #1
 8004268:	4803      	ldr	r0, [pc, #12]	; (8004278 <__io_putchar+0x20>)
 800426a:	f7ff fb96 	bl	800399a <HAL_UART_Transmit>

	  return ch;
 800426e:	687b      	ldr	r3, [r7, #4]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000254 	.word	0x20000254

0800427c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004282:	f000 fb70 	bl	8004966 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004286:	4b78      	ldr	r3, [pc, #480]	; (8004468 <MX_LWIP_Init+0x1ec>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	061a      	lsls	r2, r3, #24
 800428c:	4b76      	ldr	r3, [pc, #472]	; (8004468 <MX_LWIP_Init+0x1ec>)
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	4b74      	ldr	r3, [pc, #464]	; (8004468 <MX_LWIP_Init+0x1ec>)
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	4313      	orrs	r3, r2
 800429c:	4a72      	ldr	r2, [pc, #456]	; (8004468 <MX_LWIP_Init+0x1ec>)
 800429e:	78d2      	ldrb	r2, [r2, #3]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	061a      	lsls	r2, r3, #24
 80042a4:	4b70      	ldr	r3, [pc, #448]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	0619      	lsls	r1, r3, #24
 80042aa:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	4319      	orrs	r1, r3
 80042b2:	4b6d      	ldr	r3, [pc, #436]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042b4:	789b      	ldrb	r3, [r3, #2]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	430b      	orrs	r3, r1
 80042ba:	496b      	ldr	r1, [pc, #428]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042bc:	78c9      	ldrb	r1, [r1, #3]
 80042be:	430b      	orrs	r3, r1
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042c6:	431a      	orrs	r2, r3
 80042c8:	4b67      	ldr	r3, [pc, #412]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	0619      	lsls	r1, r3, #24
 80042ce:	4b66      	ldr	r3, [pc, #408]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	4319      	orrs	r1, r3
 80042d6:	4b64      	ldr	r3, [pc, #400]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	430b      	orrs	r3, r1
 80042de:	4962      	ldr	r1, [pc, #392]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042e0:	78c9      	ldrb	r1, [r1, #3]
 80042e2:	430b      	orrs	r3, r1
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042ea:	431a      	orrs	r2, r3
 80042ec:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	0619      	lsls	r1, r3, #24
 80042f2:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	4319      	orrs	r1, r3
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <MX_LWIP_Init+0x1ec>)
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	430b      	orrs	r3, r1
 8004302:	4959      	ldr	r1, [pc, #356]	; (8004468 <MX_LWIP_Init+0x1ec>)
 8004304:	78c9      	ldrb	r1, [r1, #3]
 8004306:	430b      	orrs	r3, r1
 8004308:	0e1b      	lsrs	r3, r3, #24
 800430a:	4313      	orrs	r3, r2
 800430c:	4a57      	ldr	r2, [pc, #348]	; (800446c <MX_LWIP_Init+0x1f0>)
 800430e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	061a      	lsls	r2, r3, #24
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004320:	789b      	ldrb	r3, [r3, #2]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	4313      	orrs	r3, r2
 8004326:	4a52      	ldr	r2, [pc, #328]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004328:	78d2      	ldrb	r2, [r2, #3]
 800432a:	4313      	orrs	r3, r2
 800432c:	061a      	lsls	r2, r3, #24
 800432e:	4b50      	ldr	r3, [pc, #320]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	0619      	lsls	r1, r3, #24
 8004334:	4b4e      	ldr	r3, [pc, #312]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	4319      	orrs	r1, r3
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <MX_LWIP_Init+0x1f4>)
 800433e:	789b      	ldrb	r3, [r3, #2]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	430b      	orrs	r3, r1
 8004344:	494a      	ldr	r1, [pc, #296]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004346:	78c9      	ldrb	r1, [r1, #3]
 8004348:	430b      	orrs	r3, r1
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004350:	431a      	orrs	r2, r3
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	0619      	lsls	r1, r3, #24
 8004358:	4b45      	ldr	r3, [pc, #276]	; (8004470 <MX_LWIP_Init+0x1f4>)
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	4319      	orrs	r1, r3
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004362:	789b      	ldrb	r3, [r3, #2]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	430b      	orrs	r3, r1
 8004368:	4941      	ldr	r1, [pc, #260]	; (8004470 <MX_LWIP_Init+0x1f4>)
 800436a:	78c9      	ldrb	r1, [r1, #3]
 800436c:	430b      	orrs	r3, r1
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004374:	431a      	orrs	r2, r3
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	0619      	lsls	r1, r3, #24
 800437c:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <MX_LWIP_Init+0x1f4>)
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	4319      	orrs	r1, r3
 8004384:	4b3a      	ldr	r3, [pc, #232]	; (8004470 <MX_LWIP_Init+0x1f4>)
 8004386:	789b      	ldrb	r3, [r3, #2]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	430b      	orrs	r3, r1
 800438c:	4938      	ldr	r1, [pc, #224]	; (8004470 <MX_LWIP_Init+0x1f4>)
 800438e:	78c9      	ldrb	r1, [r1, #3]
 8004390:	430b      	orrs	r3, r1
 8004392:	0e1b      	lsrs	r3, r3, #24
 8004394:	4313      	orrs	r3, r2
 8004396:	4a37      	ldr	r2, [pc, #220]	; (8004474 <MX_LWIP_Init+0x1f8>)
 8004398:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800439a:	4b37      	ldr	r3, [pc, #220]	; (8004478 <MX_LWIP_Init+0x1fc>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	061a      	lsls	r2, r3, #24
 80043a0:	4b35      	ldr	r3, [pc, #212]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4313      	orrs	r3, r2
 80043b0:	4a31      	ldr	r2, [pc, #196]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043b2:	78d2      	ldrb	r2, [r2, #3]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	061a      	lsls	r2, r3, #24
 80043b8:	4b2f      	ldr	r3, [pc, #188]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	0619      	lsls	r1, r3, #24
 80043be:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	4319      	orrs	r1, r3
 80043c6:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043c8:	789b      	ldrb	r3, [r3, #2]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	430b      	orrs	r3, r1
 80043ce:	492a      	ldr	r1, [pc, #168]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043d0:	78c9      	ldrb	r1, [r1, #3]
 80043d2:	430b      	orrs	r3, r1
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043da:	431a      	orrs	r2, r3
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	0619      	lsls	r1, r3, #24
 80043e2:	4b25      	ldr	r3, [pc, #148]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	4319      	orrs	r1, r3
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043ec:	789b      	ldrb	r3, [r3, #2]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	430b      	orrs	r3, r1
 80043f2:	4921      	ldr	r1, [pc, #132]	; (8004478 <MX_LWIP_Init+0x1fc>)
 80043f4:	78c9      	ldrb	r1, [r1, #3]
 80043f6:	430b      	orrs	r3, r1
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043fe:	431a      	orrs	r2, r3
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <MX_LWIP_Init+0x1fc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0619      	lsls	r1, r3, #24
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <MX_LWIP_Init+0x1fc>)
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	4319      	orrs	r1, r3
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <MX_LWIP_Init+0x1fc>)
 8004410:	789b      	ldrb	r3, [r3, #2]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	430b      	orrs	r3, r1
 8004416:	4918      	ldr	r1, [pc, #96]	; (8004478 <MX_LWIP_Init+0x1fc>)
 8004418:	78c9      	ldrb	r1, [r1, #3]
 800441a:	430b      	orrs	r3, r1
 800441c:	0e1b      	lsrs	r3, r3, #24
 800441e:	4313      	orrs	r3, r2
 8004420:	4a16      	ldr	r2, [pc, #88]	; (800447c <MX_LWIP_Init+0x200>)
 8004422:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004424:	4b16      	ldr	r3, [pc, #88]	; (8004480 <MX_LWIP_Init+0x204>)
 8004426:	9302      	str	r3, [sp, #8]
 8004428:	4b16      	ldr	r3, [pc, #88]	; (8004484 <MX_LWIP_Init+0x208>)
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <MX_LWIP_Init+0x200>)
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <MX_LWIP_Init+0x1f8>)
 8004434:	490d      	ldr	r1, [pc, #52]	; (800446c <MX_LWIP_Init+0x1f0>)
 8004436:	4814      	ldr	r0, [pc, #80]	; (8004488 <MX_LWIP_Init+0x20c>)
 8004438:	f000 ff3a 	bl	80052b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800443c:	4812      	ldr	r0, [pc, #72]	; (8004488 <MX_LWIP_Init+0x20c>)
 800443e:	f001 f8f1 	bl	8005624 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_LWIP_Init+0x20c>)
 8004444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <MX_LWIP_Init+0x1e0>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <MX_LWIP_Init+0x20c>)
 8004456:	f001 f8f5 	bl	8005644 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800445a:	e002      	b.n	8004462 <MX_LWIP_Init+0x1e6>
    netif_set_down(&gnetif);
 800445c:	480a      	ldr	r0, [pc, #40]	; (8004488 <MX_LWIP_Init+0x20c>)
 800445e:	f001 f965 	bl	800572c <netif_set_down>
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200002d8 	.word	0x200002d8
 800446c:	200002d0 	.word	0x200002d0
 8004470:	200002d4 	.word	0x200002d4
 8004474:	200002dc 	.word	0x200002dc
 8004478:	20000298 	.word	0x20000298
 800447c:	200002e0 	.word	0x200002e0
 8004480:	0800dfe5 	.word	0x0800dfe5
 8004484:	080048a1 	.word	0x080048a1
 8004488:	2000029c 	.word	0x2000029c

0800448c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08e      	sub	sp, #56	; 0x38
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a55      	ldr	r2, [pc, #340]	; (8004600 <HAL_ETH_MspInit+0x174>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f040 80a4 	bne.w	80045f8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044b0:	2300      	movs	r3, #0
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044be:	6313      	str	r3, [r2, #48]	; 0x30
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	4a4b      	ldr	r2, [pc, #300]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044da:	6313      	str	r3, [r2, #48]	; 0x30
 80044dc:	4b49      	ldr	r3, [pc, #292]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	4b45      	ldr	r3, [pc, #276]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	4a44      	ldr	r2, [pc, #272]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044f6:	6313      	str	r3, [r2, #48]	; 0x30
 80044f8:	4b42      	ldr	r3, [pc, #264]	; (8004604 <HAL_ETH_MspInit+0x178>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800450e:	f043 0304 	orr.w	r3, r3, #4
 8004512:	6313      	str	r3, [r2, #48]	; 0x30
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a36      	ldr	r2, [pc, #216]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6313      	str	r3, [r2, #48]	; 0x30
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	6313      	str	r3, [r2, #48]	; 0x30
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4a28      	ldr	r2, [pc, #160]	; (8004604 <HAL_ETH_MspInit+0x178>)
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	6313      	str	r3, [r2, #48]	; 0x30
 8004568:	4b26      	ldr	r3, [pc, #152]	; (8004604 <HAL_ETH_MspInit+0x178>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004574:	2332      	movs	r3, #50	; 0x32
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004584:	230b      	movs	r3, #11
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	481e      	ldr	r0, [pc, #120]	; (8004608 <HAL_ETH_MspInit+0x17c>)
 8004590:	f7fd fca0 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004594:	2386      	movs	r3, #134	; 0x86
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	2302      	movs	r3, #2
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045a4:	230b      	movs	r3, #11
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ac:	4619      	mov	r1, r3
 80045ae:	4817      	ldr	r0, [pc, #92]	; (800460c <HAL_ETH_MspInit+0x180>)
 80045b0:	f7fd fc90 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80045b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	2302      	movs	r3, #2
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c2:	2303      	movs	r3, #3
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045c6:	230b      	movs	r3, #11
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80045ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ce:	4619      	mov	r1, r3
 80045d0:	480f      	ldr	r0, [pc, #60]	; (8004610 <HAL_ETH_MspInit+0x184>)
 80045d2:	f7fd fc7f 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80045d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045e8:	230b      	movs	r3, #11
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f0:	4619      	mov	r1, r3
 80045f2:	4808      	ldr	r0, [pc, #32]	; (8004614 <HAL_ETH_MspInit+0x188>)
 80045f4:	f7fd fc6e 	bl	8001ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80045f8:	bf00      	nop
 80045fa:	3738      	adds	r7, #56	; 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40028000 	.word	0x40028000
 8004604:	40023800 	.word	0x40023800
 8004608:	40020800 	.word	0x40020800
 800460c:	40020000 	.word	0x40020000
 8004610:	40020400 	.word	0x40020400
 8004614:	40021800 	.word	0x40021800

08004618 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004624:	4b49      	ldr	r3, [pc, #292]	; (800474c <low_level_init+0x134>)
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <low_level_init+0x138>)
 8004628:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800462a:	4b48      	ldr	r3, [pc, #288]	; (800474c <low_level_init+0x134>)
 800462c:	2201      	movs	r2, #1
 800462e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <low_level_init+0x134>)
 8004632:	2200      	movs	r2, #0
 8004634:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004636:	2300      	movs	r3, #0
 8004638:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800463e:	23e1      	movs	r3, #225	; 0xe1
 8004640:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004642:	2300      	movs	r3, #0
 8004644:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004646:	2300      	movs	r3, #0
 8004648:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <low_level_init+0x134>)
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <low_level_init+0x134>)
 8004658:	2200      	movs	r2, #0
 800465a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <low_level_init+0x134>)
 800465e:	2200      	movs	r2, #0
 8004660:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <low_level_init+0x134>)
 8004664:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004668:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800466a:	4838      	ldr	r0, [pc, #224]	; (800474c <low_level_init+0x134>)
 800466c:	f7fc fd22 	bl	80010b4 <HAL_ETH_Init>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	b2da      	uxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800468c:	2304      	movs	r3, #4
 800468e:	4a31      	ldr	r2, [pc, #196]	; (8004754 <low_level_init+0x13c>)
 8004690:	4931      	ldr	r1, [pc, #196]	; (8004758 <low_level_init+0x140>)
 8004692:	482e      	ldr	r0, [pc, #184]	; (800474c <low_level_init+0x134>)
 8004694:	f7fc feac 	bl	80013f0 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004698:	2304      	movs	r3, #4
 800469a:	4a30      	ldr	r2, [pc, #192]	; (800475c <low_level_init+0x144>)
 800469c:	4930      	ldr	r1, [pc, #192]	; (8004760 <low_level_init+0x148>)
 800469e:	482b      	ldr	r0, [pc, #172]	; (800474c <low_level_init+0x134>)
 80046a0:	f7fc ff0f 	bl	80014c2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2206      	movs	r2, #6
 80046a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <low_level_init+0x134>)
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <low_level_init+0x134>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	785a      	ldrb	r2, [r3, #1]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <low_level_init+0x134>)
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	789a      	ldrb	r2, [r3, #2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80046d0:	4b1e      	ldr	r3, [pc, #120]	; (800474c <low_level_init+0x134>)
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	78da      	ldrb	r2, [r3, #3]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <low_level_init+0x134>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	791a      	ldrb	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <low_level_init+0x134>)
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	795a      	ldrb	r2, [r3, #5]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80046fa:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004702:	f043 030a 	orr.w	r3, r3, #10
 8004706:	b2da      	uxtb	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800470e:	480f      	ldr	r0, [pc, #60]	; (800474c <low_level_init+0x134>)
 8004710:	f7fd f8fc 	bl	800190c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	461a      	mov	r2, r3
 800471a:	211d      	movs	r1, #29
 800471c:	480b      	ldr	r0, [pc, #44]	; (800474c <low_level_init+0x134>)
 800471e:	f7fd f827 	bl	8001770 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f043 030b 	orr.w	r3, r3, #11
 8004728:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	461a      	mov	r2, r3
 800472e:	211d      	movs	r1, #29
 8004730:	4806      	ldr	r0, [pc, #24]	; (800474c <low_level_init+0x134>)
 8004732:	f7fd f885 	bl	8001840 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	461a      	mov	r2, r3
 800473c:	211d      	movs	r1, #29
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <low_level_init+0x134>)
 8004740:	f7fd f816 	bl	8001770 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20001bb4 	.word	0x20001bb4
 8004750:	40028000 	.word	0x40028000
 8004754:	20001bfc 	.word	0x20001bfc
 8004758:	200002e4 	.word	0x200002e4
 800475c:	20000364 	.word	0x20000364
 8004760:	20001b34 	.word	0x20001b34

08004764 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800476e:	4b4b      	ldr	r3, [pc, #300]	; (800489c <low_level_output+0x138>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004786:	4b45      	ldr	r3, [pc, #276]	; (800489c <low_level_output+0x138>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	e05a      	b.n	800484c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	da03      	bge.n	80047a6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800479e:	23f8      	movs	r3, #248	; 0xf8
 80047a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80047a4:	e05c      	b.n	8004860 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	895b      	ldrh	r3, [r3, #10]
 80047aa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047b0:	e02f      	b.n	8004812 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	18d0      	adds	r0, r2, r3
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	18d1      	adds	r1, r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80047c6:	3304      	adds	r3, #4
 80047c8:	461a      	mov	r2, r3
 80047ca:	f009 fd14 	bl	800e1f6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da03      	bge.n	80047e4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80047dc:	23f8      	movs	r3, #248	; 0xf8
 80047de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80047e2:	e03d      	b.n	8004860 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80047f4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004800:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800480c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800481c:	4293      	cmp	r3, r2
 800481e:	d8c8      	bhi.n	80047b2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	18d0      	adds	r0, r2, r3
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4413      	add	r3, r2
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4619      	mov	r1, r3
 8004832:	f009 fce0 	bl	800e1f6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	623b      	str	r3, [r7, #32]
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1a1      	bne.n	8004796 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	4811      	ldr	r0, [pc, #68]	; (800489c <low_level_output+0x138>)
 8004856:	f7fc fea1 	bl	800159c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <low_level_output+0x138>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	3314      	adds	r3, #20
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <low_level_output+0x138>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	3314      	adds	r3, #20
 800487e:	2220      	movs	r2, #32
 8004880:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <low_level_output+0x138>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	3304      	adds	r3, #4
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20001bb4 	.word	0x20001bb4

080048a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <ethernetif_init+0x1c>
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <ethernetif_init+0x48>)
 80048b0:	f240 2211 	movw	r2, #529	; 0x211
 80048b4:	490d      	ldr	r1, [pc, #52]	; (80048ec <ethernetif_init+0x4c>)
 80048b6:	480e      	ldr	r0, [pc, #56]	; (80048f0 <ethernetif_init+0x50>)
 80048b8:	f009 fcb0 	bl	800e21c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2273      	movs	r2, #115	; 0x73
 80048c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2274      	movs	r2, #116	; 0x74
 80048c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <ethernetif_init+0x54>)
 80048d0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <ethernetif_init+0x58>)
 80048d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff fe9d 	bl	8004618 <low_level_init>

  return ERR_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	0800f144 	.word	0x0800f144
 80048ec:	0800f160 	.word	0x0800f160
 80048f0:	0800f170 	.word	0x0800f170
 80048f4:	0800c4a5 	.word	0x0800c4a5
 80048f8:	08004765 	.word	0x08004765

080048fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004900:	f7fc fa98 	bl	8000e34 <HAL_GetTick>
 8004904:	4603      	mov	r3, r0
}
 8004906:	4618      	mov	r0, r3
 8004908:	bd80      	pop	{r7, pc}

0800490a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	b21a      	sxth	r2, r3
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	b29b      	uxth	r3, r3
 8004920:	b21b      	sxth	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	b21b      	sxth	r3, r3
 8004926:	b29b      	uxth	r3, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	061a      	lsls	r2, r3, #24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0e1b      	lsrs	r3, r3, #24
 8004958:	4313      	orrs	r3, r2
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004970:	f000 f8d4 	bl	8004b1c <mem_init>
  memp_init();
 8004974:	f000 fbda 	bl	800512c <memp_init>
  pbuf_init();
  netif_init();
 8004978:	f000 fc92 	bl	80052a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800497c:	f006 ff5e 	bl	800b83c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004980:	f001 fce6 	bl	8006350 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004984:	f006 ff14 	bl	800b7b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <ptr_to_mem+0x20>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	4413      	add	r3, r2
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000098 	.word	0x20000098

080049b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <mem_to_ptr+0x20>)
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	b29b      	uxth	r3, r3
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000098 	.word	0x20000098

080049d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80049e0:	4b45      	ldr	r3, [pc, #276]	; (8004af8 <plug_holes+0x120>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d206      	bcs.n	80049f8 <plug_holes+0x20>
 80049ea:	4b44      	ldr	r3, [pc, #272]	; (8004afc <plug_holes+0x124>)
 80049ec:	f240 12df 	movw	r2, #479	; 0x1df
 80049f0:	4943      	ldr	r1, [pc, #268]	; (8004b00 <plug_holes+0x128>)
 80049f2:	4844      	ldr	r0, [pc, #272]	; (8004b04 <plug_holes+0x12c>)
 80049f4:	f009 fc12 	bl	800e21c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80049f8:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <plug_holes+0x130>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d306      	bcc.n	8004a10 <plug_holes+0x38>
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <plug_holes+0x124>)
 8004a04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a08:	4940      	ldr	r1, [pc, #256]	; (8004b0c <plug_holes+0x134>)
 8004a0a:	483e      	ldr	r0, [pc, #248]	; (8004b04 <plug_holes+0x12c>)
 8004a0c:	f009 fc06 	bl	800e21c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	791b      	ldrb	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <plug_holes+0x4e>
 8004a18:	4b38      	ldr	r3, [pc, #224]	; (8004afc <plug_holes+0x124>)
 8004a1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a1e:	493c      	ldr	r1, [pc, #240]	; (8004b10 <plug_holes+0x138>)
 8004a20:	4838      	ldr	r0, [pc, #224]	; (8004b04 <plug_holes+0x12c>)
 8004a22:	f009 fbfb 	bl	800e21c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a2e:	d906      	bls.n	8004a3e <plug_holes+0x66>
 8004a30:	4b32      	ldr	r3, [pc, #200]	; (8004afc <plug_holes+0x124>)
 8004a32:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a36:	4937      	ldr	r1, [pc, #220]	; (8004b14 <plug_holes+0x13c>)
 8004a38:	4832      	ldr	r0, [pc, #200]	; (8004b04 <plug_holes+0x12c>)
 8004a3a:	f009 fbef 	bl	800e21c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ffa4 	bl	8004990 <ptr_to_mem>
 8004a48:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d024      	beq.n	8004a9c <plug_holes+0xc4>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	791b      	ldrb	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d120      	bne.n	8004a9c <plug_holes+0xc4>
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <plug_holes+0x130>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d01b      	beq.n	8004a9c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <plug_holes+0x140>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d102      	bne.n	8004a74 <plug_holes+0x9c>
      lfree = mem;
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <plug_holes+0x140>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a84:	d00a      	beq.n	8004a9c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ff80 	bl	8004990 <ptr_to_mem>
 8004a90:	4604      	mov	r4, r0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ff8e 	bl	80049b4 <mem_to_ptr>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	885b      	ldrh	r3, [r3, #2]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ff75 	bl	8004990 <ptr_to_mem>
 8004aa6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d01f      	beq.n	8004af0 <plug_holes+0x118>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11b      	bne.n	8004af0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <plug_holes+0x140>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d102      	bne.n	8004ac8 <plug_holes+0xf0>
      lfree = pmem;
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <plug_holes+0x140>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	881a      	ldrh	r2, [r3, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ad8:	d00a      	beq.n	8004af0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff ff56 	bl	8004990 <ptr_to_mem>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	68b8      	ldr	r0, [r7, #8]
 8004ae8:	f7ff ff64 	bl	80049b4 <mem_to_ptr>
 8004aec:	4603      	mov	r3, r0
 8004aee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd90      	pop	{r4, r7, pc}
 8004af8:	20000098 	.word	0x20000098
 8004afc:	0800f198 	.word	0x0800f198
 8004b00:	0800f1c8 	.word	0x0800f1c8
 8004b04:	0800f1e0 	.word	0x0800f1e0
 8004b08:	2000009c 	.word	0x2000009c
 8004b0c:	0800f208 	.word	0x0800f208
 8004b10:	0800f224 	.word	0x0800f224
 8004b14:	0800f240 	.word	0x0800f240
 8004b18:	200000a0 	.word	0x200000a0

08004b1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <mem_init+0x68>)
 8004b24:	3303      	adds	r3, #3
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <mem_init+0x6c>)
 8004b2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <mem_init+0x6c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b4a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b4e:	f7ff ff1f 	bl	8004990 <ptr_to_mem>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <mem_init+0x70>)
 8004b56:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <mem_init+0x70>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <mem_init+0x70>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b68:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <mem_init+0x70>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b72:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b74:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <mem_init+0x6c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <mem_init+0x74>)
 8004b7a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200033e4 	.word	0x200033e4
 8004b88:	20000098 	.word	0x20000098
 8004b8c:	2000009c 	.word	0x2000009c
 8004b90:	200000a0 	.word	0x200000a0

08004b94 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff09 	bl	80049b4 <mem_to_ptr>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fef0 	bl	8004990 <ptr_to_mem>
 8004bb0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	885b      	ldrh	r3, [r3, #2]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff feea 	bl	8004990 <ptr_to_mem>
 8004bbc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bc6:	d818      	bhi.n	8004bfa <mem_link_valid+0x66>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	885b      	ldrh	r3, [r3, #2]
 8004bcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bd0:	d813      	bhi.n	8004bfa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d004      	beq.n	8004be6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	8afa      	ldrh	r2, [r7, #22]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d109      	bne.n	8004bfa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <mem_link_valid+0x74>)
 8004be8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d006      	beq.n	8004bfe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	885b      	ldrh	r3, [r3, #2]
 8004bf4:	8afa      	ldrh	r2, [r7, #22]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d001      	beq.n	8004bfe <mem_link_valid+0x6a>
    return 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <mem_link_valid+0x6c>
  }
  return 1;
 8004bfe:	2301      	movs	r3, #1
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000009c 	.word	0x2000009c

08004c0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04c      	beq.n	8004cb4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c24:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <mem_free+0xb0>)
 8004c26:	f240 2273 	movw	r2, #627	; 0x273
 8004c2a:	4925      	ldr	r1, [pc, #148]	; (8004cc0 <mem_free+0xb4>)
 8004c2c:	4825      	ldr	r0, [pc, #148]	; (8004cc4 <mem_free+0xb8>)
 8004c2e:	f009 faf5 	bl	800e21c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c32:	e040      	b.n	8004cb6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b08      	subs	r3, #8
 8004c38:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <mem_free+0xbc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d306      	bcc.n	8004c52 <mem_free+0x46>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f103 020c 	add.w	r2, r3, #12
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <mem_free+0xc0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d907      	bls.n	8004c62 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <mem_free+0xb0>)
 8004c54:	f240 227f 	movw	r2, #639	; 0x27f
 8004c58:	491d      	ldr	r1, [pc, #116]	; (8004cd0 <mem_free+0xc4>)
 8004c5a:	481a      	ldr	r0, [pc, #104]	; (8004cc4 <mem_free+0xb8>)
 8004c5c:	f009 fade 	bl	800e21c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c60:	e029      	b.n	8004cb6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	791b      	ldrb	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <mem_free+0xb0>)
 8004c6c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004c70:	4918      	ldr	r1, [pc, #96]	; (8004cd4 <mem_free+0xc8>)
 8004c72:	4814      	ldr	r0, [pc, #80]	; (8004cc4 <mem_free+0xb8>)
 8004c74:	f009 fad2 	bl	800e21c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c78:	e01d      	b.n	8004cb6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ff8a 	bl	8004b94 <mem_link_valid>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <mem_free+0xb0>)
 8004c88:	f240 2295 	movw	r2, #661	; 0x295
 8004c8c:	4912      	ldr	r1, [pc, #72]	; (8004cd8 <mem_free+0xcc>)
 8004c8e:	480d      	ldr	r0, [pc, #52]	; (8004cc4 <mem_free+0xb8>)
 8004c90:	f009 fac4 	bl	800e21c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c94:	e00f      	b.n	8004cb6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <mem_free+0xd0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d202      	bcs.n	8004cac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <mem_free+0xd0>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7ff fe93 	bl	80049d8 <plug_holes>
 8004cb2:	e000      	b.n	8004cb6 <mem_free+0xaa>
    return;
 8004cb4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0800f198 	.word	0x0800f198
 8004cc0:	0800f26c 	.word	0x0800f26c
 8004cc4:	0800f1e0 	.word	0x0800f1e0
 8004cc8:	20000098 	.word	0x20000098
 8004ccc:	2000009c 	.word	0x2000009c
 8004cd0:	0800f290 	.word	0x0800f290
 8004cd4:	0800f2ac 	.word	0x0800f2ac
 8004cd8:	0800f2d4 	.word	0x0800f2d4
 8004cdc:	200000a0 	.word	0x200000a0

08004ce0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	3303      	adds	r3, #3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004cf8:	8bfb      	ldrh	r3, [r7, #30]
 8004cfa:	2b0b      	cmp	r3, #11
 8004cfc:	d801      	bhi.n	8004d02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d02:	8bfb      	ldrh	r3, [r7, #30]
 8004d04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d08:	d803      	bhi.n	8004d12 <mem_trim+0x32>
 8004d0a:	8bfa      	ldrh	r2, [r7, #30]
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d201      	bcs.n	8004d16 <mem_trim+0x36>
    return NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e0cc      	b.n	8004eb0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d16:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <mem_trim+0x1d8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d304      	bcc.n	8004d2a <mem_trim+0x4a>
 8004d20:	4b66      	ldr	r3, [pc, #408]	; (8004ebc <mem_trim+0x1dc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d306      	bcc.n	8004d38 <mem_trim+0x58>
 8004d2a:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <mem_trim+0x1e0>)
 8004d2c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004d30:	4964      	ldr	r1, [pc, #400]	; (8004ec4 <mem_trim+0x1e4>)
 8004d32:	4865      	ldr	r0, [pc, #404]	; (8004ec8 <mem_trim+0x1e8>)
 8004d34:	f009 fa72 	bl	800e21c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d38:	4b5f      	ldr	r3, [pc, #380]	; (8004eb8 <mem_trim+0x1d8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d304      	bcc.n	8004d4c <mem_trim+0x6c>
 8004d42:	4b5e      	ldr	r3, [pc, #376]	; (8004ebc <mem_trim+0x1dc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d301      	bcc.n	8004d50 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	e0af      	b.n	8004eb0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b08      	subs	r3, #8
 8004d54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d56:	69b8      	ldr	r0, [r7, #24]
 8004d58:	f7ff fe2c 	bl	80049b4 <mem_to_ptr>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	8afb      	ldrh	r3, [r7, #22]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b08      	subs	r3, #8
 8004d6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d6e:	8bfa      	ldrh	r2, [r7, #30]
 8004d70:	8abb      	ldrh	r3, [r7, #20]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d906      	bls.n	8004d84 <mem_trim+0xa4>
 8004d76:	4b52      	ldr	r3, [pc, #328]	; (8004ec0 <mem_trim+0x1e0>)
 8004d78:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004d7c:	4953      	ldr	r1, [pc, #332]	; (8004ecc <mem_trim+0x1ec>)
 8004d7e:	4852      	ldr	r0, [pc, #328]	; (8004ec8 <mem_trim+0x1e8>)
 8004d80:	f009 fa4c 	bl	800e21c <iprintf>
  if (newsize > size) {
 8004d84:	8bfa      	ldrh	r2, [r7, #30]
 8004d86:	8abb      	ldrh	r3, [r7, #20]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d901      	bls.n	8004d90 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e08f      	b.n	8004eb0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004d90:	8bfa      	ldrh	r2, [r7, #30]
 8004d92:	8abb      	ldrh	r3, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d101      	bne.n	8004d9c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	e089      	b.n	8004eb0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fdf5 	bl	8004990 <ptr_to_mem>
 8004da6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13f      	bne.n	8004e30 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004db8:	d106      	bne.n	8004dc8 <mem_trim+0xe8>
 8004dba:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <mem_trim+0x1e0>)
 8004dbc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004dc0:	4943      	ldr	r1, [pc, #268]	; (8004ed0 <mem_trim+0x1f0>)
 8004dc2:	4841      	ldr	r0, [pc, #260]	; (8004ec8 <mem_trim+0x1e8>)
 8004dc4:	f009 fa2a 	bl	800e21c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004dce:	8afa      	ldrh	r2, [r7, #22]
 8004dd0:	8bfb      	ldrh	r3, [r7, #30]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004dda:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <mem_trim+0x1f4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d106      	bne.n	8004df2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004de4:	89fb      	ldrh	r3, [r7, #14]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fdd2 	bl	8004990 <ptr_to_mem>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <mem_trim+0x1f4>)
 8004df0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004df2:	89fb      	ldrh	r3, [r7, #14]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fdcb 	bl	8004990 <ptr_to_mem>
 8004dfa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	89ba      	ldrh	r2, [r7, #12]
 8004e06:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	8afa      	ldrh	r2, [r7, #22]
 8004e0c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	89fa      	ldrh	r2, [r7, #14]
 8004e12:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e1c:	d047      	beq.n	8004eae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fdb4 	bl	8004990 <ptr_to_mem>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	89fb      	ldrh	r3, [r7, #14]
 8004e2c:	8053      	strh	r3, [r2, #2]
 8004e2e:	e03e      	b.n	8004eae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e30:	8bfb      	ldrh	r3, [r7, #30]
 8004e32:	f103 0214 	add.w	r2, r3, #20
 8004e36:	8abb      	ldrh	r3, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d838      	bhi.n	8004eae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e3c:	8afa      	ldrh	r2, [r7, #22]
 8004e3e:	8bfb      	ldrh	r3, [r7, #30]
 8004e40:	4413      	add	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3308      	adds	r3, #8
 8004e46:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e50:	d106      	bne.n	8004e60 <mem_trim+0x180>
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <mem_trim+0x1e0>)
 8004e54:	f240 3216 	movw	r2, #790	; 0x316
 8004e58:	491d      	ldr	r1, [pc, #116]	; (8004ed0 <mem_trim+0x1f0>)
 8004e5a:	481b      	ldr	r0, [pc, #108]	; (8004ec8 <mem_trim+0x1e8>)
 8004e5c:	f009 f9de 	bl	800e21c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004e60:	89fb      	ldrh	r3, [r7, #14]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fd94 	bl	8004990 <ptr_to_mem>
 8004e68:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <mem_trim+0x1f4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d202      	bcs.n	8004e7a <mem_trim+0x19a>
      lfree = mem2;
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <mem_trim+0x1f4>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	8afa      	ldrh	r2, [r7, #22]
 8004e8c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	89fa      	ldrh	r2, [r7, #14]
 8004e92:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e9c:	d007      	beq.n	8004eae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fd74 	bl	8004990 <ptr_to_mem>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000098 	.word	0x20000098
 8004ebc:	2000009c 	.word	0x2000009c
 8004ec0:	0800f198 	.word	0x0800f198
 8004ec4:	0800f308 	.word	0x0800f308
 8004ec8:	0800f1e0 	.word	0x0800f1e0
 8004ecc:	0800f320 	.word	0x0800f320
 8004ed0:	0800f340 	.word	0x0800f340
 8004ed4:	200000a0 	.word	0x200000a0

08004ed8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <mem_malloc+0x14>
    return NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e0d9      	b.n	80050a0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004ef8:	8bbb      	ldrh	r3, [r7, #28]
 8004efa:	2b0b      	cmp	r3, #11
 8004efc:	d801      	bhi.n	8004f02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004efe:	230c      	movs	r3, #12
 8004f00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f02:	8bbb      	ldrh	r3, [r7, #28]
 8004f04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f08:	d803      	bhi.n	8004f12 <mem_malloc+0x3a>
 8004f0a:	8bba      	ldrh	r2, [r7, #28]
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d201      	bcs.n	8004f16 <mem_malloc+0x3e>
    return NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e0c4      	b.n	80050a0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f16:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <mem_malloc+0x1d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd4a 	bl	80049b4 <mem_to_ptr>
 8004f20:	4603      	mov	r3, r0
 8004f22:	83fb      	strh	r3, [r7, #30]
 8004f24:	e0b4      	b.n	8005090 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f26:	8bfb      	ldrh	r3, [r7, #30]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fd31 	bl	8004990 <ptr_to_mem>
 8004f2e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 80a4 	bne.w	8005082 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f1a3 0208 	sub.w	r2, r3, #8
 8004f48:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	f0c0 8099 	bcc.w	8005082 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	8bfb      	ldrh	r3, [r7, #30]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f1a3 0208 	sub.w	r2, r3, #8
 8004f5e:	8bbb      	ldrh	r3, [r7, #28]
 8004f60:	3314      	adds	r3, #20
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d333      	bcc.n	8004fce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004f66:	8bfa      	ldrh	r2, [r7, #30]
 8004f68:	8bbb      	ldrh	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3308      	adds	r3, #8
 8004f70:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004f72:	8a7b      	ldrh	r3, [r7, #18]
 8004f74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f78:	d106      	bne.n	8004f88 <mem_malloc+0xb0>
 8004f7a:	4b4c      	ldr	r3, [pc, #304]	; (80050ac <mem_malloc+0x1d4>)
 8004f7c:	f240 3287 	movw	r2, #903	; 0x387
 8004f80:	494b      	ldr	r1, [pc, #300]	; (80050b0 <mem_malloc+0x1d8>)
 8004f82:	484c      	ldr	r0, [pc, #304]	; (80050b4 <mem_malloc+0x1dc>)
 8004f84:	f009 f94a 	bl	800e21c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004f88:	8a7b      	ldrh	r3, [r7, #18]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fd00 	bl	8004990 <ptr_to_mem>
 8004f90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	881a      	ldrh	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8bfa      	ldrh	r2, [r7, #30]
 8004fa4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	8a7a      	ldrh	r2, [r7, #18]
 8004faa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fba:	d00b      	beq.n	8004fd4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fce5 	bl	8004990 <ptr_to_mem>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	8a7b      	ldrh	r3, [r7, #18]
 8004fca:	8053      	strh	r3, [r2, #2]
 8004fcc:	e002      	b.n	8004fd4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <mem_malloc+0x1d0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d127      	bne.n	800502e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004fde:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <mem_malloc+0x1d0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004fe4:	e005      	b.n	8004ff2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fcd0 	bl	8004990 <ptr_to_mem>
 8004ff0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	791b      	ldrb	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <mem_malloc+0x12c>
 8004ffa:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <mem_malloc+0x1e0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d1f0      	bne.n	8004fe6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <mem_malloc+0x1d0>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800500a:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <mem_malloc+0x1d0>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <mem_malloc+0x1e0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d00b      	beq.n	800502e <mem_malloc+0x156>
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <mem_malloc+0x1d0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	791b      	ldrb	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <mem_malloc+0x156>
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <mem_malloc+0x1d4>)
 8005022:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005026:	4925      	ldr	r1, [pc, #148]	; (80050bc <mem_malloc+0x1e4>)
 8005028:	4822      	ldr	r0, [pc, #136]	; (80050b4 <mem_malloc+0x1dc>)
 800502a:	f009 f8f7 	bl	800e21c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800502e:	8bba      	ldrh	r2, [r7, #28]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	3308      	adds	r3, #8
 8005036:	4a20      	ldr	r2, [pc, #128]	; (80050b8 <mem_malloc+0x1e0>)
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	4293      	cmp	r3, r2
 800503c:	d906      	bls.n	800504c <mem_malloc+0x174>
 800503e:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <mem_malloc+0x1d4>)
 8005040:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005044:	491e      	ldr	r1, [pc, #120]	; (80050c0 <mem_malloc+0x1e8>)
 8005046:	481b      	ldr	r0, [pc, #108]	; (80050b4 <mem_malloc+0x1dc>)
 8005048:	f009 f8e8 	bl	800e21c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <mem_malloc+0x18c>
 8005056:	4b15      	ldr	r3, [pc, #84]	; (80050ac <mem_malloc+0x1d4>)
 8005058:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800505c:	4919      	ldr	r1, [pc, #100]	; (80050c4 <mem_malloc+0x1ec>)
 800505e:	4815      	ldr	r0, [pc, #84]	; (80050b4 <mem_malloc+0x1dc>)
 8005060:	f009 f8dc 	bl	800e21c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <mem_malloc+0x1a4>
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <mem_malloc+0x1d4>)
 8005070:	f240 32be 	movw	r2, #958	; 0x3be
 8005074:	4914      	ldr	r1, [pc, #80]	; (80050c8 <mem_malloc+0x1f0>)
 8005076:	480f      	ldr	r0, [pc, #60]	; (80050b4 <mem_malloc+0x1dc>)
 8005078:	f009 f8d0 	bl	800e21c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3308      	adds	r3, #8
 8005080:	e00e      	b.n	80050a0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005082:	8bfb      	ldrh	r3, [r7, #30]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fc83 	bl	8004990 <ptr_to_mem>
 800508a:	4603      	mov	r3, r0
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005090:	8bfa      	ldrh	r2, [r7, #30]
 8005092:	8bbb      	ldrh	r3, [r7, #28]
 8005094:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005098:	429a      	cmp	r2, r3
 800509a:	f4ff af44 	bcc.w	8004f26 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200000a0 	.word	0x200000a0
 80050ac:	0800f198 	.word	0x0800f198
 80050b0:	0800f340 	.word	0x0800f340
 80050b4:	0800f1e0 	.word	0x0800f1e0
 80050b8:	2000009c 	.word	0x2000009c
 80050bc:	0800f354 	.word	0x0800f354
 80050c0:	0800f370 	.word	0x0800f370
 80050c4:	0800f3a0 	.word	0x0800f3a0
 80050c8:	0800f3d0 	.word	0x0800f3d0

080050cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	3303      	adds	r3, #3
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e011      	b.n	8005112 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	889b      	ldrh	r3, [r3, #4]
 8005104:	461a      	mov	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4413      	add	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	88db      	ldrh	r3, [r3, #6]
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4293      	cmp	r3, r2
 800511c:	dbe7      	blt.n	80050ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005132:	2300      	movs	r3, #0
 8005134:	80fb      	strh	r3, [r7, #6]
 8005136:	e009      	b.n	800514c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <memp_init+0x30>)
 800513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ffc3 	bl	80050cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	3301      	adds	r3, #1
 800514a:	80fb      	strh	r3, [r7, #6]
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b08      	cmp	r3, #8
 8005150:	d9f2      	bls.n	8005138 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	08011c90 	.word	0x08011c90

08005160 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d012      	beq.n	800519c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <do_memp_malloc_pool+0x38>
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <do_memp_malloc_pool+0x48>)
 800518c:	f240 1219 	movw	r2, #281	; 0x119
 8005190:	4906      	ldr	r1, [pc, #24]	; (80051ac <do_memp_malloc_pool+0x4c>)
 8005192:	4807      	ldr	r0, [pc, #28]	; (80051b0 <do_memp_malloc_pool+0x50>)
 8005194:	f009 f842 	bl	800e21c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	e000      	b.n	800519e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	0800f45c 	.word	0x0800f45c
 80051ac:	0800f48c 	.word	0x0800f48c
 80051b0:	0800f4b0 	.word	0x0800f4b0

080051b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d908      	bls.n	80051d6 <memp_malloc+0x22>
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <memp_malloc+0x3c>)
 80051c6:	f240 1257 	movw	r2, #343	; 0x157
 80051ca:	490a      	ldr	r1, [pc, #40]	; (80051f4 <memp_malloc+0x40>)
 80051cc:	480a      	ldr	r0, [pc, #40]	; (80051f8 <memp_malloc+0x44>)
 80051ce:	f009 f825 	bl	800e21c <iprintf>
 80051d2:	2300      	movs	r3, #0
 80051d4:	e008      	b.n	80051e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <memp_malloc+0x48>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ffbe 	bl	8005160 <do_memp_malloc_pool>
 80051e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	0800f45c 	.word	0x0800f45c
 80051f4:	0800f4ec 	.word	0x0800f4ec
 80051f8:	0800f4b0 	.word	0x0800f4b0
 80051fc:	08011c90 	.word	0x08011c90

08005200 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <do_memp_free_pool+0x22>
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <do_memp_free_pool+0x40>)
 8005216:	f240 126d 	movw	r2, #365	; 0x16d
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <do_memp_free_pool+0x44>)
 800521c:	480a      	ldr	r0, [pc, #40]	; (8005248 <do_memp_free_pool+0x48>)
 800521e:	f008 fffd 	bl	800e21c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800f45c 	.word	0x0800f45c
 8005244:	0800f50c 	.word	0x0800f50c
 8005248:	0800f4b0 	.word	0x0800f4b0

0800524c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	6039      	str	r1, [r7, #0]
 8005256:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d907      	bls.n	800526e <memp_free+0x22>
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <memp_free+0x44>)
 8005260:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005264:	490b      	ldr	r1, [pc, #44]	; (8005294 <memp_free+0x48>)
 8005266:	480c      	ldr	r0, [pc, #48]	; (8005298 <memp_free+0x4c>)
 8005268:	f008 ffd8 	bl	800e21c <iprintf>
 800526c:	e00c      	b.n	8005288 <memp_free+0x3c>

  if (mem == NULL) {
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <memp_free+0x50>)
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ffbe 	bl	8005200 <do_memp_free_pool>
 8005284:	e000      	b.n	8005288 <memp_free+0x3c>
    return;
 8005286:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0800f45c 	.word	0x0800f45c
 8005294:	0800f52c 	.word	0x0800f52c
 8005298:	0800f4b0 	.word	0x0800f4b0
 800529c:	08011c90 	.word	0x08011c90

080052a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d108      	bne.n	80052d6 <netif_add+0x26>
 80052c4:	4b57      	ldr	r3, [pc, #348]	; (8005424 <netif_add+0x174>)
 80052c6:	f240 1227 	movw	r2, #295	; 0x127
 80052ca:	4957      	ldr	r1, [pc, #348]	; (8005428 <netif_add+0x178>)
 80052cc:	4857      	ldr	r0, [pc, #348]	; (800542c <netif_add+0x17c>)
 80052ce:	f008 ffa5 	bl	800e21c <iprintf>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e0a2      	b.n	800541c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <netif_add+0x3e>
 80052dc:	4b51      	ldr	r3, [pc, #324]	; (8005424 <netif_add+0x174>)
 80052de:	f44f 7294 	mov.w	r2, #296	; 0x128
 80052e2:	4953      	ldr	r1, [pc, #332]	; (8005430 <netif_add+0x180>)
 80052e4:	4851      	ldr	r0, [pc, #324]	; (800542c <netif_add+0x17c>)
 80052e6:	f008 ff99 	bl	800e21c <iprintf>
 80052ea:	2300      	movs	r3, #0
 80052ec:	e096      	b.n	800541c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80052f4:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <netif_add+0x184>)
 80052f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80052fe:	4b4d      	ldr	r3, [pc, #308]	; (8005434 <netif_add+0x184>)
 8005300:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005308:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <netif_add+0x184>)
 800530a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a45      	ldr	r2, [pc, #276]	; (8005438 <netif_add+0x188>)
 8005322:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <netif_add+0x18c>)
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f91b 	bl	8005590 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <netif_add+0xba>
    return NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	e058      	b.n	800541c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005370:	2bff      	cmp	r3, #255	; 0xff
 8005372:	d103      	bne.n	800537c <netif_add+0xcc>
        netif->num = 0;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005380:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <netif_add+0x190>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e02b      	b.n	80053e0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d106      	bne.n	800539e <netif_add+0xee>
 8005390:	4b24      	ldr	r3, [pc, #144]	; (8005424 <netif_add+0x174>)
 8005392:	f240 128b 	movw	r2, #395	; 0x18b
 8005396:	492b      	ldr	r1, [pc, #172]	; (8005444 <netif_add+0x194>)
 8005398:	4824      	ldr	r0, [pc, #144]	; (800542c <netif_add+0x17c>)
 800539a:	f008 ff3f 	bl	800e21c <iprintf>
        num_netifs++;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3301      	adds	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2bff      	cmp	r3, #255	; 0xff
 80053a8:	dd06      	ble.n	80053b8 <netif_add+0x108>
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <netif_add+0x174>)
 80053ac:	f240 128d 	movw	r2, #397	; 0x18d
 80053b0:	4925      	ldr	r1, [pc, #148]	; (8005448 <netif_add+0x198>)
 80053b2:	481e      	ldr	r0, [pc, #120]	; (800542c <netif_add+0x17c>)
 80053b4:	f008 ff32 	bl	800e21c <iprintf>
        if (netif2->num == netif->num) {
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d108      	bne.n	80053da <netif_add+0x12a>
          netif->num++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053ce:	3301      	adds	r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80053d8:	e005      	b.n	80053e6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1d0      	bne.n	8005388 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1be      	bne.n	800536a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053f2:	2bfe      	cmp	r3, #254	; 0xfe
 80053f4:	d103      	bne.n	80053fe <netif_add+0x14e>
    netif_num = 0;
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <netif_add+0x18c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e006      	b.n	800540c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005404:	3301      	adds	r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <netif_add+0x18c>)
 800540a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <netif_add+0x190>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <netif_add+0x190>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	0800f548 	.word	0x0800f548
 8005428:	0800f5dc 	.word	0x0800f5dc
 800542c:	0800f598 	.word	0x0800f598
 8005430:	0800f5f8 	.word	0x0800f5f8
 8005434:	08011cf4 	.word	0x08011cf4
 8005438:	080057a1 	.word	0x080057a1
 800543c:	200000c8 	.word	0x200000c8
 8005440:	20006940 	.word	0x20006940
 8005444:	0800f61c 	.word	0x0800f61c
 8005448:	0800f630 	.word	0x0800f630

0800544c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f002 fab5 	bl	80079c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f006 fb75 	bl	800bb50 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <netif_do_set_ipaddr+0x20>
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <netif_do_set_ipaddr+0x98>)
 8005484:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005488:	4920      	ldr	r1, [pc, #128]	; (800550c <netif_do_set_ipaddr+0x9c>)
 800548a:	4821      	ldr	r0, [pc, #132]	; (8005510 <netif_do_set_ipaddr+0xa0>)
 800548c:	f008 fec6 	bl	800e21c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <netif_do_set_ipaddr+0x34>
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <netif_do_set_ipaddr+0x98>)
 8005498:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800549c:	491b      	ldr	r1, [pc, #108]	; (800550c <netif_do_set_ipaddr+0x9c>)
 800549e:	481c      	ldr	r0, [pc, #112]	; (8005510 <netif_do_set_ipaddr+0xa0>)
 80054a0:	f008 febc 	bl	800e21c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d024      	beq.n	80054fc <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3304      	adds	r3, #4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ffbf 	bl	800544c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <netif_do_set_ipaddr+0x6a>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	e000      	b.n	80054dc <netif_do_set_ipaddr+0x6c>
 80054da:	2300      	movs	r3, #0
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80054e0:	2101      	movs	r1, #1
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f8e2 	bl	80056ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <netif_do_set_ipaddr+0x88>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	4798      	blx	r3
    return 1; /* address changed */
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	0800f548 	.word	0x0800f548
 800550c:	0800f660 	.word	0x0800f660
 8005510:	0800f598 	.word	0x0800f598

08005514 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3308      	adds	r3, #8
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00a      	beq.n	8005544 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <netif_do_set_netmask+0x26>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	e000      	b.n	800553c <netif_do_set_netmask+0x28>
 800553a:	2300      	movs	r3, #0
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	330c      	adds	r3, #12
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d00a      	beq.n	8005582 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <netif_do_set_gw+0x26>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	e000      	b.n	800557a <netif_do_set_gw+0x28>
 8005578:	2300      	movs	r3, #0
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80055ac:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <netif_set_addr+0x90>)
 80055ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <netif_set_addr+0x90>)
 80055b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <netif_set_addr+0x90>)
 80055c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <netif_set_addr+0x42>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <netif_set_addr+0x46>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <netif_set_addr+0x48>
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	461a      	mov	r2, r3
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff41 	bl	8005470 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff ff8e 	bl	8005514 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff ffa8 	bl	8005552 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	461a      	mov	r2, r3
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff2d 	bl	8005470 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005616:	bf00      	nop
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08011cf4 	.word	0x08011cf4

08005624 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <netif_set_default+0x1c>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20006944 	.word	0x20006944

08005644 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d107      	bne.n	8005662 <netif_set_up+0x1e>
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <netif_set_up+0x5c>)
 8005654:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005658:	4912      	ldr	r1, [pc, #72]	; (80056a4 <netif_set_up+0x60>)
 800565a:	4813      	ldr	r0, [pc, #76]	; (80056a8 <netif_set_up+0x64>)
 800565c:	f008 fdde 	bl	800e21c <iprintf>
 8005660:	e01b      	b.n	800569a <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d114      	bne.n	800569a <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <netif_set_up+0x4e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005692:	2103      	movs	r1, #3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f809 	bl	80056ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	0800f548 	.word	0x0800f548
 80056a4:	0800f6d0 	.word	0x0800f6d0
 80056a8:	0800f598 	.word	0x0800f598

080056ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <netif_issue_reports+0x20>
 80056be:	4b18      	ldr	r3, [pc, #96]	; (8005720 <netif_issue_reports+0x74>)
 80056c0:	f240 326d 	movw	r2, #877	; 0x36d
 80056c4:	4917      	ldr	r1, [pc, #92]	; (8005724 <netif_issue_reports+0x78>)
 80056c6:	4818      	ldr	r0, [pc, #96]	; (8005728 <netif_issue_reports+0x7c>)
 80056c8:	f008 fda8 	bl	800e21c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01e      	beq.n	8005718 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d017      	beq.n	8005718 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f007 f9b5 	bl	800ca80 <etharp_request>
 8005716:	e000      	b.n	800571a <netif_issue_reports+0x6e>
    return;
 8005718:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	0800f548 	.word	0x0800f548
 8005724:	0800f6ec 	.word	0x0800f6ec
 8005728:	0800f598 	.word	0x0800f598

0800572c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <netif_set_down+0x1e>
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <netif_set_down+0x68>)
 800573c:	f240 329b 	movw	r2, #923	; 0x39b
 8005740:	4915      	ldr	r1, [pc, #84]	; (8005798 <netif_set_down+0x6c>)
 8005742:	4816      	ldr	r0, [pc, #88]	; (800579c <netif_set_down+0x70>)
 8005744:	f008 fd6a 	bl	800e21c <iprintf>
 8005748:	e021      	b.n	800578e <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f006 fd3f 	bl	800c1fc <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <netif_set_down+0x62>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
  }
}
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	0800f548 	.word	0x0800f548
 8005798:	0800f710 	.word	0x0800f710
 800579c:	0800f598 	.word	0x0800f598

080057a0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80057ac:	f06f 030b 	mvn.w	r3, #11
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d013      	beq.n	80057f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <netif_get_by_index+0x48>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e00c      	b.n	80057ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057da:	3301      	adds	r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	79fa      	ldrb	r2, [r7, #7]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d101      	bne.n	80057e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	e006      	b.n	80057f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ef      	bne.n	80057d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20006940 	.word	0x20006940

08005808 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <pbuf_pool_is_empty+0x14>)
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20006948 	.word	0x20006948

08005820 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4611      	mov	r1, r2
 800582c:	461a      	mov	r2, r3
 800582e:	460b      	mov	r3, r1
 8005830:	80fb      	strh	r3, [r7, #6]
 8005832:	4613      	mov	r3, r2
 8005834:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88ba      	ldrh	r2, [r7, #4]
 800584c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800584e:	8b3b      	ldrh	r3, [r7, #24]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	7f3a      	ldrb	r2, [r7, #28]
 800585a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	73da      	strb	r2, [r3, #15]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	; 0x30
 8005878:	af02      	add	r7, sp, #8
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	460b      	mov	r3, r1
 8005880:	80bb      	strh	r3, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800588a:	887b      	ldrh	r3, [r7, #2]
 800588c:	2b41      	cmp	r3, #65	; 0x41
 800588e:	d00b      	beq.n	80058a8 <pbuf_alloc+0x34>
 8005890:	2b41      	cmp	r3, #65	; 0x41
 8005892:	dc02      	bgt.n	800589a <pbuf_alloc+0x26>
 8005894:	2b01      	cmp	r3, #1
 8005896:	d007      	beq.n	80058a8 <pbuf_alloc+0x34>
 8005898:	e0c2      	b.n	8005a20 <pbuf_alloc+0x1ac>
 800589a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800589e:	d00b      	beq.n	80058b8 <pbuf_alloc+0x44>
 80058a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80058a4:	d070      	beq.n	8005988 <pbuf_alloc+0x114>
 80058a6:	e0bb      	b.n	8005a20 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80058a8:	887a      	ldrh	r2, [r7, #2]
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	4619      	mov	r1, r3
 80058ae:	2000      	movs	r0, #0
 80058b0:	f000 f8d2 	bl	8005a58 <pbuf_alloc_reference>
 80058b4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80058b6:	e0bd      	b.n	8005a34 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80058c0:	88bb      	ldrh	r3, [r7, #4]
 80058c2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80058c4:	2008      	movs	r0, #8
 80058c6:	f7ff fc75 	bl	80051b4 <memp_malloc>
 80058ca:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80058d2:	f7ff ff99 	bl	8005808 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80058dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058de:	f000 faa9 	bl	8005e34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e0a7      	b.n	8005a36 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80058e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058e8:	3303      	adds	r3, #3
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f023 0303 	bic.w	r3, r3, #3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8b7a      	ldrh	r2, [r7, #26]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf28      	it	cs
 80058fe:	4613      	movcs	r3, r2
 8005900:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005904:	3310      	adds	r3, #16
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	3303      	adds	r3, #3
 800590c:	f023 0303 	bic.w	r3, r3, #3
 8005910:	4618      	mov	r0, r3
 8005912:	89f9      	ldrh	r1, [r7, #14]
 8005914:	8b7a      	ldrh	r2, [r7, #26]
 8005916:	2300      	movs	r3, #0
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	887b      	ldrh	r3, [r7, #2]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	460b      	mov	r3, r1
 8005920:	4601      	mov	r1, r0
 8005922:	6938      	ldr	r0, [r7, #16]
 8005924:	f7ff ff7c 	bl	8005820 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <pbuf_alloc+0xce>
 8005934:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <pbuf_alloc+0x1cc>)
 8005936:	f240 1201 	movw	r2, #257	; 0x101
 800593a:	4942      	ldr	r1, [pc, #264]	; (8005a44 <pbuf_alloc+0x1d0>)
 800593c:	4842      	ldr	r0, [pc, #264]	; (8005a48 <pbuf_alloc+0x1d4>)
 800593e:	f008 fc6d 	bl	800e21c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005944:	3303      	adds	r3, #3
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800594e:	d106      	bne.n	800595e <pbuf_alloc+0xea>
 8005950:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <pbuf_alloc+0x1cc>)
 8005952:	f240 1203 	movw	r2, #259	; 0x103
 8005956:	493d      	ldr	r1, [pc, #244]	; (8005a4c <pbuf_alloc+0x1d8>)
 8005958:	483b      	ldr	r0, [pc, #236]	; (8005a48 <pbuf_alloc+0x1d4>)
 800595a:	f008 fc5f 	bl	800e21c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	e002      	b.n	8005970 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005974:	8b7a      	ldrh	r2, [r7, #26]
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d19e      	bne.n	80058c4 <pbuf_alloc+0x50>
      break;
 8005986:	e055      	b.n	8005a34 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800598a:	3303      	adds	r3, #3
 800598c:	b29b      	uxth	r3, r3
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	b29a      	uxth	r2, r3
 8005994:	88bb      	ldrh	r3, [r7, #4]
 8005996:	3303      	adds	r3, #3
 8005998:	b29b      	uxth	r3, r3
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80059a4:	8b3b      	ldrh	r3, [r7, #24]
 80059a6:	3310      	adds	r3, #16
 80059a8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80059aa:	8b3a      	ldrh	r2, [r7, #24]
 80059ac:	88bb      	ldrh	r3, [r7, #4]
 80059ae:	3303      	adds	r3, #3
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d306      	bcc.n	80059c6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80059b8:	8afa      	ldrh	r2, [r7, #22]
 80059ba:	88bb      	ldrh	r3, [r7, #4]
 80059bc:	3303      	adds	r3, #3
 80059be:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d201      	bcs.n	80059ca <pbuf_alloc+0x156>
        return NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e035      	b.n	8005a36 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80059ca:	8afb      	ldrh	r3, [r7, #22]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fa83 	bl	8004ed8 <mem_malloc>
 80059d2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <pbuf_alloc+0x16a>
        return NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	e02b      	b.n	8005a36 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80059de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059e0:	3310      	adds	r3, #16
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	4413      	add	r3, r2
 80059e6:	3303      	adds	r3, #3
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	4618      	mov	r0, r3
 80059ee:	88b9      	ldrh	r1, [r7, #4]
 80059f0:	88ba      	ldrh	r2, [r7, #4]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	887b      	ldrh	r3, [r7, #2]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	460b      	mov	r3, r1
 80059fc:	4601      	mov	r1, r0
 80059fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a00:	f7ff ff0e 	bl	8005820 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <pbuf_alloc+0x1be>
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <pbuf_alloc+0x1cc>)
 8005a12:	f240 1223 	movw	r2, #291	; 0x123
 8005a16:	490e      	ldr	r1, [pc, #56]	; (8005a50 <pbuf_alloc+0x1dc>)
 8005a18:	480b      	ldr	r0, [pc, #44]	; (8005a48 <pbuf_alloc+0x1d4>)
 8005a1a:	f008 fbff 	bl	800e21c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005a1e:	e008      	b.n	8005a32 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <pbuf_alloc+0x1cc>)
 8005a22:	f240 1227 	movw	r2, #295	; 0x127
 8005a26:	490b      	ldr	r1, [pc, #44]	; (8005a54 <pbuf_alloc+0x1e0>)
 8005a28:	4807      	ldr	r0, [pc, #28]	; (8005a48 <pbuf_alloc+0x1d4>)
 8005a2a:	f008 fbf7 	bl	800e21c <iprintf>
      return NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e001      	b.n	8005a36 <pbuf_alloc+0x1c2>
      break;
 8005a32:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	0800f778 	.word	0x0800f778
 8005a44:	0800f7a8 	.word	0x0800f7a8
 8005a48:	0800f7d8 	.word	0x0800f7d8
 8005a4c:	0800f800 	.word	0x0800f800
 8005a50:	0800f834 	.word	0x0800f834
 8005a54:	0800f860 	.word	0x0800f860

08005a58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	807b      	strh	r3, [r7, #2]
 8005a64:	4613      	mov	r3, r2
 8005a66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005a68:	883b      	ldrh	r3, [r7, #0]
 8005a6a:	2b41      	cmp	r3, #65	; 0x41
 8005a6c:	d009      	beq.n	8005a82 <pbuf_alloc_reference+0x2a>
 8005a6e:	883b      	ldrh	r3, [r7, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d006      	beq.n	8005a82 <pbuf_alloc_reference+0x2a>
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <pbuf_alloc_reference+0x5c>)
 8005a76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005a7a:	490f      	ldr	r1, [pc, #60]	; (8005ab8 <pbuf_alloc_reference+0x60>)
 8005a7c:	480f      	ldr	r0, [pc, #60]	; (8005abc <pbuf_alloc_reference+0x64>)
 8005a7e:	f008 fbcd 	bl	800e21c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005a82:	2007      	movs	r0, #7
 8005a84:	f7ff fb96 	bl	80051b4 <memp_malloc>
 8005a88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e00b      	b.n	8005aac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005a94:	8879      	ldrh	r1, [r7, #2]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	883b      	ldrh	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff febb 	bl	8005820 <pbuf_init_alloced_pbuf>
  return p;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	0800f778 	.word	0x0800f778
 8005ab8:	0800f87c 	.word	0x0800f87c
 8005abc:	0800f7d8 	.word	0x0800f7d8

08005ac0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	460b      	mov	r3, r1
 8005ace:	81bb      	strh	r3, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005ad8:	8a7b      	ldrh	r3, [r7, #18]
 8005ada:	3303      	adds	r3, #3
 8005adc:	f023 0203 	bic.w	r2, r3, #3
 8005ae0:	89bb      	ldrh	r3, [r7, #12]
 8005ae2:	441a      	add	r2, r3
 8005ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d901      	bls.n	8005aee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e018      	b.n	8005b20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005af4:	8a7b      	ldrh	r3, [r7, #18]
 8005af6:	3303      	adds	r3, #3
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	4413      	add	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	89b9      	ldrh	r1, [r7, #12]
 8005b0c:	89ba      	ldrh	r2, [r7, #12]
 8005b0e:	2302      	movs	r3, #2
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	460b      	mov	r3, r1
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	f7ff fe81 	bl	8005820 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005b1e:	687b      	ldr	r3, [r7, #4]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <pbuf_realloc+0x20>
 8005b3a:	4b3a      	ldr	r3, [pc, #232]	; (8005c24 <pbuf_realloc+0xfc>)
 8005b3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005b40:	4939      	ldr	r1, [pc, #228]	; (8005c28 <pbuf_realloc+0x100>)
 8005b42:	483a      	ldr	r0, [pc, #232]	; (8005c2c <pbuf_realloc+0x104>)
 8005b44:	f008 fb6a 	bl	800e21c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	891b      	ldrh	r3, [r3, #8]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d264      	bcs.n	8005c1c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	891a      	ldrh	r2, [r3, #8]
 8005b56:	887b      	ldrh	r3, [r7, #2]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005b5c:	887b      	ldrh	r3, [r7, #2]
 8005b5e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005b64:	e018      	b.n	8005b98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	895b      	ldrh	r3, [r3, #10]
 8005b6a:	897a      	ldrh	r2, [r7, #10]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	891a      	ldrh	r2, [r3, #8]
 8005b74:	893b      	ldrh	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <pbuf_realloc+0x70>
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <pbuf_realloc+0xfc>)
 8005b8c:	f240 12af 	movw	r2, #431	; 0x1af
 8005b90:	4927      	ldr	r1, [pc, #156]	; (8005c30 <pbuf_realloc+0x108>)
 8005b92:	4826      	ldr	r0, [pc, #152]	; (8005c2c <pbuf_realloc+0x104>)
 8005b94:	f008 fb42 	bl	800e21c <iprintf>
  while (rem_len > q->len) {
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	895b      	ldrh	r3, [r3, #10]
 8005b9c:	897a      	ldrh	r2, [r7, #10]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d8e1      	bhi.n	8005b66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	7b1b      	ldrb	r3, [r3, #12]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d122      	bne.n	8005bf4 <pbuf_realloc+0xcc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	895b      	ldrh	r3, [r3, #10]
 8005bb2:	897a      	ldrh	r2, [r7, #10]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d01d      	beq.n	8005bf4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	7b5b      	ldrb	r3, [r3, #13]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d117      	bne.n	8005bf4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	897b      	ldrh	r3, [r7, #10]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff f881 	bl	8004ce0 <mem_trim>
 8005bde:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <pbuf_realloc+0xcc>
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <pbuf_realloc+0xfc>)
 8005be8:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005bec:	4911      	ldr	r1, [pc, #68]	; (8005c34 <pbuf_realloc+0x10c>)
 8005bee:	480f      	ldr	r0, [pc, #60]	; (8005c2c <pbuf_realloc+0x104>)
 8005bf0:	f008 fb14 	bl	800e21c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	897a      	ldrh	r2, [r7, #10]
 8005bf8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	895a      	ldrh	r2, [r3, #10]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f910 	bl	8005e34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e000      	b.n	8005c1e <pbuf_realloc+0xf6>
    return;
 8005c1c:	bf00      	nop

}
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	0800f778 	.word	0x0800f778
 8005c28:	0800f890 	.word	0x0800f890
 8005c2c:	0800f7d8 	.word	0x0800f7d8
 8005c30:	0800f8a8 	.word	0x0800f8a8
 8005c34:	0800f8c0 	.word	0x0800f8c0

08005c38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <pbuf_add_header_impl+0x22>
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <pbuf_add_header_impl+0xc4>)
 8005c4e:	f240 12df 	movw	r2, #479	; 0x1df
 8005c52:	492b      	ldr	r1, [pc, #172]	; (8005d00 <pbuf_add_header_impl+0xc8>)
 8005c54:	482b      	ldr	r0, [pc, #172]	; (8005d04 <pbuf_add_header_impl+0xcc>)
 8005c56:	f008 fae1 	bl	800e21c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <pbuf_add_header_impl+0x30>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d301      	bcc.n	8005c6c <pbuf_add_header_impl+0x34>
    return 1;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e043      	b.n	8005cf4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <pbuf_add_header_impl+0x3e>
    return 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e03e      	b.n	8005cf4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	891a      	ldrh	r2, [r3, #8]
 8005c7e:	8a7b      	ldrh	r3, [r7, #18]
 8005c80:	4413      	add	r3, r2
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8a7a      	ldrh	r2, [r7, #18]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d901      	bls.n	8005c8e <pbuf_add_header_impl+0x56>
    return 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e032      	b.n	8005cf4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	7b1b      	ldrb	r3, [r3, #12]
 8005c92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005c94:	8a3b      	ldrh	r3, [r7, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	425b      	negs	r3, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3310      	adds	r3, #16
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d20d      	bcs.n	8005cd0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e01d      	b.n	8005cf4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e001      	b.n	8005cd0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e011      	b.n	8005cf4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	895a      	ldrh	r2, [r3, #10]
 8005cda:	8a7b      	ldrh	r3, [r7, #18]
 8005cdc:	4413      	add	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	891a      	ldrh	r2, [r3, #8]
 8005ce8:	8a7b      	ldrh	r3, [r7, #18]
 8005cea:	4413      	add	r3, r2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	811a      	strh	r2, [r3, #8]


  return 0;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	0800f778 	.word	0x0800f778
 8005d00:	0800f8dc 	.word	0x0800f8dc
 8005d04:	0800f7d8 	.word	0x0800f7d8

08005d08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005d12:	2200      	movs	r2, #0
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ff8e 	bl	8005c38 <pbuf_add_header_impl>
 8005d1c:	4603      	mov	r3, r0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <pbuf_remove_header+0x1e>
 8005d38:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <pbuf_remove_header+0x94>)
 8005d3a:	f240 224b 	movw	r2, #587	; 0x24b
 8005d3e:	4920      	ldr	r1, [pc, #128]	; (8005dc0 <pbuf_remove_header+0x98>)
 8005d40:	4820      	ldr	r0, [pc, #128]	; (8005dc4 <pbuf_remove_header+0x9c>)
 8005d42:	f008 fa6b 	bl	800e21c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <pbuf_remove_header+0x2c>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d52:	d301      	bcc.n	8005d58 <pbuf_remove_header+0x30>
    return 1;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e02c      	b.n	8005db2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <pbuf_remove_header+0x3a>
    return 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e027      	b.n	8005db2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	895b      	ldrh	r3, [r3, #10]
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d908      	bls.n	8005d82 <pbuf_remove_header+0x5a>
 8005d70:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <pbuf_remove_header+0x94>)
 8005d72:	f240 2255 	movw	r2, #597	; 0x255
 8005d76:	4914      	ldr	r1, [pc, #80]	; (8005dc8 <pbuf_remove_header+0xa0>)
 8005d78:	4812      	ldr	r0, [pc, #72]	; (8005dc4 <pbuf_remove_header+0x9c>)
 8005d7a:	f008 fa4f 	bl	800e21c <iprintf>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e017      	b.n	8005db2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	895a      	ldrh	r2, [r3, #10]
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	891a      	ldrh	r2, [r3, #8]
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	0800f778 	.word	0x0800f778
 8005dc0:	0800f8dc 	.word	0x0800f8dc
 8005dc4:	0800f7d8 	.word	0x0800f7d8
 8005dc8:	0800f8e8 	.word	0x0800f8e8

08005dcc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da08      	bge.n	8005df6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005de8:	425b      	negs	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff9b 	bl	8005d28 <pbuf_remove_header>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e007      	b.n	8005e06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dfa:	787a      	ldrb	r2, [r7, #1]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff1a 	bl	8005c38 <pbuf_add_header_impl>
 8005e04:	4603      	mov	r3, r0
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	460b      	mov	r3, r1
 8005e18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005e1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ffd2 	bl	8005dcc <pbuf_header_impl>
 8005e28:	4603      	mov	r3, r0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <pbuf_free+0x22>
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <pbuf_free+0xf8>)
 8005e4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005e4e:	4938      	ldr	r1, [pc, #224]	; (8005f30 <pbuf_free+0xfc>)
 8005e50:	4838      	ldr	r0, [pc, #224]	; (8005f34 <pbuf_free+0x100>)
 8005e52:	f008 f9e3 	bl	800e21c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e063      	b.n	8005f22 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005e5e:	e05c      	b.n	8005f1a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7b9b      	ldrb	r3, [r3, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <pbuf_free+0x42>
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <pbuf_free+0xf8>)
 8005e6a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005e6e:	4932      	ldr	r1, [pc, #200]	; (8005f38 <pbuf_free+0x104>)
 8005e70:	4830      	ldr	r0, [pc, #192]	; (8005f34 <pbuf_free+0x100>)
 8005e72:	f008 f9d3 	bl	800e21c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7b9b      	ldrb	r3, [r3, #14]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	739a      	strb	r2, [r3, #14]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7b9b      	ldrb	r3, [r3, #14]
 8005e86:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005e88:	7dbb      	ldrb	r3, [r7, #22]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d143      	bne.n	8005f16 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7b1b      	ldrb	r3, [r3, #12]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7b5b      	ldrb	r3, [r3, #13]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <pbuf_free+0x90>
 8005eb6:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <pbuf_free+0xf8>)
 8005eb8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005ebc:	491f      	ldr	r1, [pc, #124]	; (8005f3c <pbuf_free+0x108>)
 8005ebe:	481d      	ldr	r0, [pc, #116]	; (8005f34 <pbuf_free+0x100>)
 8005ec0:	f008 f9ac 	bl	800e21c <iprintf>
        pc->custom_free_function(p);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
 8005ecc:	e01d      	b.n	8005f0a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d104      	bne.n	8005ede <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	2008      	movs	r0, #8
 8005ed8:	f7ff f9b8 	bl	800524c <memp_free>
 8005edc:	e015      	b.n	8005f0a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d104      	bne.n	8005eee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	2007      	movs	r0, #7
 8005ee8:	f7ff f9b0 	bl	800524c <memp_free>
 8005eec:	e00d      	b.n	8005f0a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <pbuf_free+0xc8>
          mem_free(p);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fe fe89 	bl	8004c0c <mem_free>
 8005efa:	e006      	b.n	8005f0a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <pbuf_free+0xf8>)
 8005efe:	f240 320f 	movw	r2, #783	; 0x30f
 8005f02:	490f      	ldr	r1, [pc, #60]	; (8005f40 <pbuf_free+0x10c>)
 8005f04:	480b      	ldr	r0, [pc, #44]	; (8005f34 <pbuf_free+0x100>)
 8005f06:	f008 f989 	bl	800e21c <iprintf>
        }
      }
      count++;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e001      	b.n	8005f1a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d19f      	bne.n	8005e60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	0800f778 	.word	0x0800f778
 8005f30:	0800f8dc 	.word	0x0800f8dc
 8005f34:	0800f7d8 	.word	0x0800f7d8
 8005f38:	0800f908 	.word	0x0800f908
 8005f3c:	0800f920 	.word	0x0800f920
 8005f40:	0800f944 	.word	0x0800f944

08005f44 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005f50:	e005      	b.n	8005f5e <pbuf_clen+0x1a>
    ++len;
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	3301      	adds	r3, #1
 8005f56:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f6      	bne.n	8005f52 <pbuf_clen+0xe>
  }
  return len;
 8005f64:	89fb      	ldrh	r3, [r7, #14]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
	...

08005f74 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7b9b      	ldrb	r3, [r3, #14]
 8005f86:	3301      	adds	r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7b9b      	ldrb	r3, [r3, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <pbuf_ref+0x30>
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <pbuf_ref+0x38>)
 8005f98:	f240 3242 	movw	r2, #834	; 0x342
 8005f9c:	4904      	ldr	r1, [pc, #16]	; (8005fb0 <pbuf_ref+0x3c>)
 8005f9e:	4805      	ldr	r0, [pc, #20]	; (8005fb4 <pbuf_ref+0x40>)
 8005fa0:	f008 f93c 	bl	800e21c <iprintf>
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	0800f778 	.word	0x0800f778
 8005fb0:	0800f958 	.word	0x0800f958
 8005fb4:	0800f7d8 	.word	0x0800f7d8

08005fb8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <pbuf_cat+0x16>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d107      	bne.n	8005fde <pbuf_cat+0x26>
 8005fce:	4b20      	ldr	r3, [pc, #128]	; (8006050 <pbuf_cat+0x98>)
 8005fd0:	f240 325a 	movw	r2, #858	; 0x35a
 8005fd4:	491f      	ldr	r1, [pc, #124]	; (8006054 <pbuf_cat+0x9c>)
 8005fd6:	4820      	ldr	r0, [pc, #128]	; (8006058 <pbuf_cat+0xa0>)
 8005fd8:	f008 f920 	bl	800e21c <iprintf>
 8005fdc:	e034      	b.n	8006048 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e00a      	b.n	8005ffa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	891a      	ldrh	r2, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	891b      	ldrh	r3, [r3, #8]
 8005fec:	4413      	add	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	891a      	ldrh	r2, [r3, #8]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	895b      	ldrh	r3, [r3, #10]
 800600a:	429a      	cmp	r2, r3
 800600c:	d006      	beq.n	800601c <pbuf_cat+0x64>
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <pbuf_cat+0x98>)
 8006010:	f240 3262 	movw	r2, #866	; 0x362
 8006014:	4911      	ldr	r1, [pc, #68]	; (800605c <pbuf_cat+0xa4>)
 8006016:	4810      	ldr	r0, [pc, #64]	; (8006058 <pbuf_cat+0xa0>)
 8006018:	f008 f900 	bl	800e21c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <pbuf_cat+0x7a>
 8006024:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <pbuf_cat+0x98>)
 8006026:	f240 3263 	movw	r2, #867	; 0x363
 800602a:	490d      	ldr	r1, [pc, #52]	; (8006060 <pbuf_cat+0xa8>)
 800602c:	480a      	ldr	r0, [pc, #40]	; (8006058 <pbuf_cat+0xa0>)
 800602e:	f008 f8f5 	bl	800e21c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	891a      	ldrh	r2, [r3, #8]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	891b      	ldrh	r3, [r3, #8]
 800603a:	4413      	add	r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	0800f778 	.word	0x0800f778
 8006054:	0800f96c 	.word	0x0800f96c
 8006058:	0800f7d8 	.word	0x0800f7d8
 800605c:	0800f9a4 	.word	0x0800f9a4
 8006060:	0800f9d4 	.word	0x0800f9d4

08006064 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <pbuf_copy+0x2a>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <pbuf_copy+0x2a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	891a      	ldrh	r2, [r3, #8]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	891b      	ldrh	r3, [r3, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	d209      	bcs.n	80060a2 <pbuf_copy+0x3e>
 800608e:	4b57      	ldr	r3, [pc, #348]	; (80061ec <pbuf_copy+0x188>)
 8006090:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006094:	4956      	ldr	r1, [pc, #344]	; (80061f0 <pbuf_copy+0x18c>)
 8006096:	4857      	ldr	r0, [pc, #348]	; (80061f4 <pbuf_copy+0x190>)
 8006098:	f008 f8c0 	bl	800e21c <iprintf>
 800609c:	f06f 030f 	mvn.w	r3, #15
 80060a0:	e09f      	b.n	80061e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	895b      	ldrh	r3, [r3, #10]
 80060a6:	461a      	mov	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad2      	subs	r2, r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	895b      	ldrh	r3, [r3, #10]
 80060b0:	4619      	mov	r1, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1acb      	subs	r3, r1, r3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d306      	bcc.n	80060c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	895b      	ldrh	r3, [r3, #10]
 80060be:	461a      	mov	r2, r3
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e005      	b.n	80060d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	895b      	ldrh	r3, [r3, #10]
 80060cc:	461a      	mov	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	18d0      	adds	r0, r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4619      	mov	r1, r3
 80060e8:	f008 f885 	bl	800e1f6 <memcpy>
    offset_to += len;
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	895b      	ldrh	r3, [r3, #10]
 8006100:	461a      	mov	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4293      	cmp	r3, r2
 8006106:	d906      	bls.n	8006116 <pbuf_copy+0xb2>
 8006108:	4b38      	ldr	r3, [pc, #224]	; (80061ec <pbuf_copy+0x188>)
 800610a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800610e:	493a      	ldr	r1, [pc, #232]	; (80061f8 <pbuf_copy+0x194>)
 8006110:	4838      	ldr	r0, [pc, #224]	; (80061f4 <pbuf_copy+0x190>)
 8006112:	f008 f883 	bl	800e21c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	895b      	ldrh	r3, [r3, #10]
 800611a:	461a      	mov	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4293      	cmp	r3, r2
 8006120:	d906      	bls.n	8006130 <pbuf_copy+0xcc>
 8006122:	4b32      	ldr	r3, [pc, #200]	; (80061ec <pbuf_copy+0x188>)
 8006124:	f240 32da 	movw	r2, #986	; 0x3da
 8006128:	4934      	ldr	r1, [pc, #208]	; (80061fc <pbuf_copy+0x198>)
 800612a:	4832      	ldr	r0, [pc, #200]	; (80061f4 <pbuf_copy+0x190>)
 800612c:	f008 f876 	bl	800e21c <iprintf>
    if (offset_from >= p_from->len) {
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	895b      	ldrh	r3, [r3, #10]
 8006134:	461a      	mov	r2, r3
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4293      	cmp	r3, r2
 800613a:	d304      	bcc.n	8006146 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	895b      	ldrh	r3, [r3, #10]
 800614a:	461a      	mov	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4293      	cmp	r3, r2
 8006150:	d114      	bne.n	800617c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <pbuf_copy+0x118>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <pbuf_copy+0x118>
 8006168:	4b20      	ldr	r3, [pc, #128]	; (80061ec <pbuf_copy+0x188>)
 800616a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800616e:	4924      	ldr	r1, [pc, #144]	; (8006200 <pbuf_copy+0x19c>)
 8006170:	4820      	ldr	r0, [pc, #128]	; (80061f4 <pbuf_copy+0x190>)
 8006172:	f008 f853 	bl	800e21c <iprintf>
 8006176:	f06f 030f 	mvn.w	r3, #15
 800617a:	e032      	b.n	80061e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <pbuf_copy+0x146>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	895a      	ldrh	r2, [r3, #10]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	891b      	ldrh	r3, [r3, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d10d      	bne.n	80061aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <pbuf_copy+0x146>
 8006196:	4b15      	ldr	r3, [pc, #84]	; (80061ec <pbuf_copy+0x188>)
 8006198:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800619c:	4919      	ldr	r1, [pc, #100]	; (8006204 <pbuf_copy+0x1a0>)
 800619e:	4815      	ldr	r0, [pc, #84]	; (80061f4 <pbuf_copy+0x190>)
 80061a0:	f008 f83c 	bl	800e21c <iprintf>
 80061a4:	f06f 0305 	mvn.w	r3, #5
 80061a8:	e01b      	b.n	80061e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <pbuf_copy+0x174>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	895a      	ldrh	r2, [r3, #10]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	891b      	ldrh	r3, [r3, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d10d      	bne.n	80061d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <pbuf_copy+0x174>
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <pbuf_copy+0x188>)
 80061c6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80061ca:	490e      	ldr	r1, [pc, #56]	; (8006204 <pbuf_copy+0x1a0>)
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <pbuf_copy+0x190>)
 80061ce:	f008 f825 	bl	800e21c <iprintf>
 80061d2:	f06f 0305 	mvn.w	r3, #5
 80061d6:	e004      	b.n	80061e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f47f af61 	bne.w	80060a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	0800f778 	.word	0x0800f778
 80061f0:	0800fa20 	.word	0x0800fa20
 80061f4:	0800f7d8 	.word	0x0800f7d8
 80061f8:	0800fa50 	.word	0x0800fa50
 80061fc:	0800fa68 	.word	0x0800fa68
 8006200:	0800fa84 	.word	0x0800fa84
 8006204:	0800fa94 	.word	0x0800fa94

08006208 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	460b      	mov	r3, r1
 8006218:	80fb      	strh	r3, [r7, #6]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <pbuf_copy_partial+0x36>
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <pbuf_copy_partial+0xd4>)
 800622e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006232:	492b      	ldr	r1, [pc, #172]	; (80062e0 <pbuf_copy_partial+0xd8>)
 8006234:	482b      	ldr	r0, [pc, #172]	; (80062e4 <pbuf_copy_partial+0xdc>)
 8006236:	f007 fff1 	bl	800e21c <iprintf>
 800623a:	2300      	movs	r3, #0
 800623c:	e04a      	b.n	80062d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <pbuf_copy_partial+0x4e>
 8006244:	4b25      	ldr	r3, [pc, #148]	; (80062dc <pbuf_copy_partial+0xd4>)
 8006246:	f240 420b 	movw	r2, #1035	; 0x40b
 800624a:	4927      	ldr	r1, [pc, #156]	; (80062e8 <pbuf_copy_partial+0xe0>)
 800624c:	4825      	ldr	r0, [pc, #148]	; (80062e4 <pbuf_copy_partial+0xdc>)
 800624e:	f007 ffe5 	bl	800e21c <iprintf>
 8006252:	2300      	movs	r3, #0
 8006254:	e03e      	b.n	80062d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e034      	b.n	80062c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <pbuf_copy_partial+0x70>
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	895b      	ldrh	r3, [r3, #10]
 8006266:	88ba      	ldrh	r2, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d305      	bcc.n	8006278 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	895b      	ldrh	r3, [r3, #10]
 8006270:	88ba      	ldrh	r2, [r7, #4]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	80bb      	strh	r3, [r7, #4]
 8006276:	e023      	b.n	80062c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	895a      	ldrh	r2, [r3, #10]
 800627c:	88bb      	ldrh	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006282:	8b3a      	ldrh	r2, [r7, #24]
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	429a      	cmp	r2, r3
 8006288:	d901      	bls.n	800628e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800628e:	8b7b      	ldrh	r3, [r7, #26]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	18d0      	adds	r0, r2, r3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	88bb      	ldrh	r3, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	8b3a      	ldrh	r2, [r7, #24]
 800629e:	4619      	mov	r1, r3
 80062a0:	f007 ffa9 	bl	800e1f6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80062a4:	8afa      	ldrh	r2, [r7, #22]
 80062a6:	8b3b      	ldrh	r3, [r7, #24]
 80062a8:	4413      	add	r3, r2
 80062aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80062ac:	8b7a      	ldrh	r2, [r7, #26]
 80062ae:	8b3b      	ldrh	r3, [r7, #24]
 80062b0:	4413      	add	r3, r2
 80062b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	8b3b      	ldrh	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <pbuf_copy_partial+0xca>
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1c4      	bne.n	800625c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80062d2:	8afb      	ldrh	r3, [r7, #22]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	0800f778 	.word	0x0800f778
 80062e0:	0800fac0 	.word	0x0800fac0
 80062e4:	0800f7d8 	.word	0x0800f7d8
 80062e8:	0800fae0 	.word	0x0800fae0

080062ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	603a      	str	r2, [r7, #0]
 80062f6:	71fb      	strb	r3, [r7, #7]
 80062f8:	460b      	mov	r3, r1
 80062fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	8919      	ldrh	r1, [r3, #8]
 8006300:	88ba      	ldrh	r2, [r7, #4]
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fab5 	bl	8005874 <pbuf_alloc>
 800630a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <pbuf_clone+0x2a>
    return NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	e011      	b.n	800633a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff fea3 	bl	8006064 <pbuf_copy>
 800631e:	4603      	mov	r3, r0
 8006320:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006322:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <pbuf_clone+0x4c>
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <pbuf_clone+0x58>)
 800632c:	f240 5224 	movw	r2, #1316	; 0x524
 8006330:	4905      	ldr	r1, [pc, #20]	; (8006348 <pbuf_clone+0x5c>)
 8006332:	4806      	ldr	r0, [pc, #24]	; (800634c <pbuf_clone+0x60>)
 8006334:	f007 ff72 	bl	800e21c <iprintf>
  return q;
 8006338:	68fb      	ldr	r3, [r7, #12]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	0800f778 	.word	0x0800f778
 8006348:	0800fbec 	.word	0x0800fbec
 800634c:	0800f7d8 	.word	0x0800f7d8

08006350 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006354:	f007 ffde 	bl	800e314 <rand>
 8006358:	4603      	mov	r3, r0
 800635a:	b29b      	uxth	r3, r3
 800635c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006360:	b29b      	uxth	r3, r3
 8006362:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006366:	b29a      	uxth	r2, r3
 8006368:	4b01      	ldr	r3, [pc, #4]	; (8006370 <tcp_init+0x20>)
 800636a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800636c:	bf00      	nop
 800636e:	bd80      	pop	{r7, pc}
 8006370:	2000000a 	.word	0x2000000a

08006374 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7d1b      	ldrb	r3, [r3, #20]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d105      	bne.n	8006390 <tcp_free+0x1c>
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <tcp_free+0x2c>)
 8006386:	22d4      	movs	r2, #212	; 0xd4
 8006388:	4906      	ldr	r1, [pc, #24]	; (80063a4 <tcp_free+0x30>)
 800638a:	4807      	ldr	r0, [pc, #28]	; (80063a8 <tcp_free+0x34>)
 800638c:	f007 ff46 	bl	800e21c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	2001      	movs	r0, #1
 8006394:	f7fe ff5a 	bl	800524c <memp_free>
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	0800fc78 	.word	0x0800fc78
 80063a4:	0800fca8 	.word	0x0800fca8
 80063a8:	0800fcbc 	.word	0x0800fcbc

080063ac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7d1b      	ldrb	r3, [r3, #20]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d105      	bne.n	80063c8 <tcp_free_listen+0x1c>
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <tcp_free_listen+0x2c>)
 80063be:	22df      	movs	r2, #223	; 0xdf
 80063c0:	4906      	ldr	r1, [pc, #24]	; (80063dc <tcp_free_listen+0x30>)
 80063c2:	4807      	ldr	r0, [pc, #28]	; (80063e0 <tcp_free_listen+0x34>)
 80063c4:	f007 ff2a 	bl	800e21c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	2002      	movs	r0, #2
 80063cc:	f7fe ff3e 	bl	800524c <memp_free>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	0800fc78 	.word	0x0800fc78
 80063dc:	0800fce4 	.word	0x0800fce4
 80063e0:	0800fcbc 	.word	0x0800fcbc

080063e4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80063e8:	f000 fe98 	bl	800711c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80063ec:	4b07      	ldr	r3, [pc, #28]	; (800640c <tcp_tmr+0x28>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <tcp_tmr+0x28>)
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <tcp_tmr+0x28>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006404:	f000 fb4c 	bl	8006aa0 <tcp_slowtmr>
  }
}
 8006408:	bf00      	nop
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200000c9 	.word	0x200000c9

08006410 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <tcp_remove_listener+0x1c>
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <tcp_remove_listener+0x48>)
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	490d      	ldr	r1, [pc, #52]	; (800645c <tcp_remove_listener+0x4c>)
 8006426:	480e      	ldr	r0, [pc, #56]	; (8006460 <tcp_remove_listener+0x50>)
 8006428:	f007 fef8 	bl	800e21c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e00a      	b.n	8006448 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d102      	bne.n	8006442 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f1      	bne.n	8006432 <tcp_remove_listener+0x22>
    }
  }
}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	0800fc78 	.word	0x0800fc78
 800645c:	0800fd00 	.word	0x0800fd00
 8006460:	0800fcbc 	.word	0x0800fcbc

08006464 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <tcp_listen_closed+0x1c>
 8006472:	4b14      	ldr	r3, [pc, #80]	; (80064c4 <tcp_listen_closed+0x60>)
 8006474:	f240 1211 	movw	r2, #273	; 0x111
 8006478:	4913      	ldr	r1, [pc, #76]	; (80064c8 <tcp_listen_closed+0x64>)
 800647a:	4814      	ldr	r0, [pc, #80]	; (80064cc <tcp_listen_closed+0x68>)
 800647c:	f007 fece 	bl	800e21c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7d1b      	ldrb	r3, [r3, #20]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d006      	beq.n	8006496 <tcp_listen_closed+0x32>
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <tcp_listen_closed+0x60>)
 800648a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800648e:	4910      	ldr	r1, [pc, #64]	; (80064d0 <tcp_listen_closed+0x6c>)
 8006490:	480e      	ldr	r0, [pc, #56]	; (80064cc <tcp_listen_closed+0x68>)
 8006492:	f007 fec3 	bl	800e21c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006496:	2301      	movs	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e00b      	b.n	80064b4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800649c:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <tcp_listen_closed+0x70>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff ffb1 	bl	8006410 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d9f0      	bls.n	800649c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	0800fc78 	.word	0x0800fc78
 80064c8:	0800fd28 	.word	0x0800fd28
 80064cc:	0800fcbc 	.word	0x0800fcbc
 80064d0:	0800fd34 	.word	0x0800fd34
 80064d4:	08011ccc 	.word	0x08011ccc

080064d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80064d8:	b5b0      	push	{r4, r5, r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af04      	add	r7, sp, #16
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <tcp_close_shutdown+0x20>
 80064ea:	4b61      	ldr	r3, [pc, #388]	; (8006670 <tcp_close_shutdown+0x198>)
 80064ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80064f0:	4960      	ldr	r1, [pc, #384]	; (8006674 <tcp_close_shutdown+0x19c>)
 80064f2:	4861      	ldr	r0, [pc, #388]	; (8006678 <tcp_close_shutdown+0x1a0>)
 80064f4:	f007 fe92 	bl	800e21c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d066      	beq.n	80065cc <tcp_close_shutdown+0xf4>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7d1b      	ldrb	r3, [r3, #20]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d003      	beq.n	800650e <tcp_close_shutdown+0x36>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7d1b      	ldrb	r3, [r3, #20]
 800650a:	2b07      	cmp	r3, #7
 800650c:	d15e      	bne.n	80065cc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <tcp_close_shutdown+0x48>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800651e:	d055      	beq.n	80065cc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8b5b      	ldrh	r3, [r3, #26]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <tcp_close_shutdown+0x62>
 800652c:	4b50      	ldr	r3, [pc, #320]	; (8006670 <tcp_close_shutdown+0x198>)
 800652e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006532:	4952      	ldr	r1, [pc, #328]	; (800667c <tcp_close_shutdown+0x1a4>)
 8006534:	4850      	ldr	r0, [pc, #320]	; (8006678 <tcp_close_shutdown+0x1a0>)
 8006536:	f007 fe71 	bl	800e21c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006542:	687d      	ldr	r5, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	8ad2      	ldrh	r2, [r2, #22]
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	8b09      	ldrh	r1, [r1, #24]
 8006550:	9102      	str	r1, [sp, #8]
 8006552:	9201      	str	r2, [sp, #4]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462b      	mov	r3, r5
 8006558:	4622      	mov	r2, r4
 800655a:	4601      	mov	r1, r0
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f004 fea5 	bl	800b2ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 f8ba 	bl	80076dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006568:	4b45      	ldr	r3, [pc, #276]	; (8006680 <tcp_close_shutdown+0x1a8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d105      	bne.n	800657e <tcp_close_shutdown+0xa6>
 8006572:	4b43      	ldr	r3, [pc, #268]	; (8006680 <tcp_close_shutdown+0x1a8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a41      	ldr	r2, [pc, #260]	; (8006680 <tcp_close_shutdown+0x1a8>)
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e013      	b.n	80065a6 <tcp_close_shutdown+0xce>
 800657e:	4b40      	ldr	r3, [pc, #256]	; (8006680 <tcp_close_shutdown+0x1a8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e00c      	b.n	80065a0 <tcp_close_shutdown+0xc8>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d104      	bne.n	800659a <tcp_close_shutdown+0xc2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	60da      	str	r2, [r3, #12]
 8006598:	e005      	b.n	80065a6 <tcp_close_shutdown+0xce>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ef      	bne.n	8006586 <tcp_close_shutdown+0xae>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	4b35      	ldr	r3, [pc, #212]	; (8006684 <tcp_close_shutdown+0x1ac>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80065b2:	4b35      	ldr	r3, [pc, #212]	; (8006688 <tcp_close_shutdown+0x1b0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d102      	bne.n	80065c2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80065bc:	f003 fd4e 	bl	800a05c <tcp_trigger_input_pcb_close>
 80065c0:	e002      	b.n	80065c8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fed6 	bl	8006374 <tcp_free>
      }
      return ERR_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e04d      	b.n	8006668 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7d1b      	ldrb	r3, [r3, #20]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d02d      	beq.n	8006630 <tcp_close_shutdown+0x158>
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d036      	beq.n	8006646 <tcp_close_shutdown+0x16e>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d13f      	bne.n	800665c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8adb      	ldrh	r3, [r3, #22]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d021      	beq.n	8006628 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80065e4:	4b29      	ldr	r3, [pc, #164]	; (800668c <tcp_close_shutdown+0x1b4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d105      	bne.n	80065fa <tcp_close_shutdown+0x122>
 80065ee:	4b27      	ldr	r3, [pc, #156]	; (800668c <tcp_close_shutdown+0x1b4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <tcp_close_shutdown+0x1b4>)
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e013      	b.n	8006622 <tcp_close_shutdown+0x14a>
 80065fa:	4b24      	ldr	r3, [pc, #144]	; (800668c <tcp_close_shutdown+0x1b4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	e00c      	b.n	800661c <tcp_close_shutdown+0x144>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	429a      	cmp	r2, r3
 800660a:	d104      	bne.n	8006616 <tcp_close_shutdown+0x13e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	60da      	str	r2, [r3, #12]
 8006614:	e005      	b.n	8006622 <tcp_close_shutdown+0x14a>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ef      	bne.n	8006602 <tcp_close_shutdown+0x12a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fea3 	bl	8006374 <tcp_free>
      break;
 800662e:	e01a      	b.n	8006666 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff17 	bl	8006464 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4815      	ldr	r0, [pc, #84]	; (8006690 <tcp_close_shutdown+0x1b8>)
 800663a:	f001 f89f 	bl	800777c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff feb4 	bl	80063ac <tcp_free_listen>
      break;
 8006644:	e00f      	b.n	8006666 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	480d      	ldr	r0, [pc, #52]	; (8006680 <tcp_close_shutdown+0x1a8>)
 800664a:	f001 f897 	bl	800777c <tcp_pcb_remove>
 800664e:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <tcp_close_shutdown+0x1ac>)
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff fe8d 	bl	8006374 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800665a:	e004      	b.n	8006666 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f819 	bl	8006694 <tcp_close_shutdown_fin>
 8006662:	4603      	mov	r3, r0
 8006664:	e000      	b.n	8006668 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bdb0      	pop	{r4, r5, r7, pc}
 8006670:	0800fc78 	.word	0x0800fc78
 8006674:	0800fd4c 	.word	0x0800fd4c
 8006678:	0800fcbc 	.word	0x0800fcbc
 800667c:	0800fd6c 	.word	0x0800fd6c
 8006680:	20006950 	.word	0x20006950
 8006684:	2000694c 	.word	0x2000694c
 8006688:	20006964 	.word	0x20006964
 800668c:	2000695c 	.word	0x2000695c
 8006690:	20006958 	.word	0x20006958

08006694 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <tcp_close_shutdown_fin+0x1c>
 80066a2:	4b2c      	ldr	r3, [pc, #176]	; (8006754 <tcp_close_shutdown_fin+0xc0>)
 80066a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80066a8:	492b      	ldr	r1, [pc, #172]	; (8006758 <tcp_close_shutdown_fin+0xc4>)
 80066aa:	482c      	ldr	r0, [pc, #176]	; (800675c <tcp_close_shutdown_fin+0xc8>)
 80066ac:	f007 fdb6 	bl	800e21c <iprintf>

  switch (pcb->state) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7d1b      	ldrb	r3, [r3, #20]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d010      	beq.n	80066da <tcp_close_shutdown_fin+0x46>
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	d01b      	beq.n	80066f4 <tcp_close_shutdown_fin+0x60>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d126      	bne.n	800670e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f003 fee3 	bl	800a48c <tcp_send_fin>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11f      	bne.n	8006712 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2205      	movs	r2, #5
 80066d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066d8:	e01b      	b.n	8006712 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f003 fed6 	bl	800a48c <tcp_send_fin>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d114      	bne.n	8006716 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2205      	movs	r2, #5
 80066f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80066f2:	e010      	b.n	8006716 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f003 fec9 	bl	800a48c <tcp_send_fin>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80066fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2209      	movs	r2, #9
 800670a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800670c:	e005      	b.n	800671a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e01c      	b.n	800674c <tcp_close_shutdown_fin+0xb8>
      break;
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <tcp_close_shutdown_fin+0x88>
      break;
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <tcp_close_shutdown_fin+0x88>
      break;
 800671a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800671c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f003 ffef 	bl	800a708 <tcp_output>
 800672a:	e00d      	b.n	8006748 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800672c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d108      	bne.n	8006748 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8b5b      	ldrh	r3, [r3, #26]
 800673a:	f043 0308 	orr.w	r3, r3, #8
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e001      	b.n	800674c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8006748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	0800fc78 	.word	0x0800fc78
 8006758:	0800fd28 	.word	0x0800fd28
 800675c:	0800fcbc 	.word	0x0800fcbc

08006760 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <tcp_close+0x22>
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <tcp_close+0x4c>)
 8006770:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006774:	490e      	ldr	r1, [pc, #56]	; (80067b0 <tcp_close+0x50>)
 8006776:	480f      	ldr	r0, [pc, #60]	; (80067b4 <tcp_close+0x54>)
 8006778:	f007 fd50 	bl	800e21c <iprintf>
 800677c:	f06f 030f 	mvn.w	r3, #15
 8006780:	e00f      	b.n	80067a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7d1b      	ldrb	r3, [r3, #20]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d006      	beq.n	8006798 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8b5b      	ldrh	r3, [r3, #26]
 800678e:	f043 0310 	orr.w	r3, r3, #16
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fe9c 	bl	80064d8 <tcp_close_shutdown>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	0800fc78 	.word	0x0800fc78
 80067b0:	0800fd88 	.word	0x0800fd88
 80067b4:	0800fcbc 	.word	0x0800fcbc

080067b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af04      	add	r7, sp, #16
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <tcp_abandon+0x20>
 80067c8:	4b52      	ldr	r3, [pc, #328]	; (8006914 <tcp_abandon+0x15c>)
 80067ca:	f240 223d 	movw	r2, #573	; 0x23d
 80067ce:	4952      	ldr	r1, [pc, #328]	; (8006918 <tcp_abandon+0x160>)
 80067d0:	4852      	ldr	r0, [pc, #328]	; (800691c <tcp_abandon+0x164>)
 80067d2:	f007 fd23 	bl	800e21c <iprintf>
 80067d6:	e099      	b.n	800690c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7d1b      	ldrb	r3, [r3, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d106      	bne.n	80067ee <tcp_abandon+0x36>
 80067e0:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <tcp_abandon+0x15c>)
 80067e2:	f240 2241 	movw	r2, #577	; 0x241
 80067e6:	494e      	ldr	r1, [pc, #312]	; (8006920 <tcp_abandon+0x168>)
 80067e8:	484c      	ldr	r0, [pc, #304]	; (800691c <tcp_abandon+0x164>)
 80067ea:	f007 fd17 	bl	800e21c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7d1b      	ldrb	r3, [r3, #20]
 80067f2:	2b0a      	cmp	r3, #10
 80067f4:	d107      	bne.n	8006806 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	484a      	ldr	r0, [pc, #296]	; (8006924 <tcp_abandon+0x16c>)
 80067fa:	f000 ffbf 	bl	800777c <tcp_pcb_remove>
    tcp_free(pcb);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fdb8 	bl	8006374 <tcp_free>
 8006804:	e082      	b.n	800690c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006812:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006820:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7d1b      	ldrb	r3, [r3, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d126      	bne.n	800687e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8adb      	ldrh	r3, [r3, #22]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d02e      	beq.n	8006896 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006838:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <tcp_abandon+0x170>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d105      	bne.n	800684e <tcp_abandon+0x96>
 8006842:	4b39      	ldr	r3, [pc, #228]	; (8006928 <tcp_abandon+0x170>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	4a37      	ldr	r2, [pc, #220]	; (8006928 <tcp_abandon+0x170>)
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e013      	b.n	8006876 <tcp_abandon+0xbe>
 800684e:	4b36      	ldr	r3, [pc, #216]	; (8006928 <tcp_abandon+0x170>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e00c      	b.n	8006870 <tcp_abandon+0xb8>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d104      	bne.n	800686a <tcp_abandon+0xb2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	60da      	str	r2, [r3, #12]
 8006868:	e005      	b.n	8006876 <tcp_abandon+0xbe>
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ef      	bne.n	8006856 <tcp_abandon+0x9e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e00b      	b.n	8006896 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8adb      	ldrh	r3, [r3, #22]
 8006886:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4828      	ldr	r0, [pc, #160]	; (800692c <tcp_abandon+0x174>)
 800688c:	f000 ff76 	bl	800777c <tcp_pcb_remove>
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <tcp_abandon+0x178>)
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fd1a 	bl	80072dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd11 	bl	80072dc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fd08 	bl	80072dc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3304      	adds	r3, #4
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	8b12      	ldrh	r2, [r2, #24]
 80068dc:	9202      	str	r2, [sp, #8]
 80068de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068e0:	9201      	str	r2, [sp, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	460b      	mov	r3, r1
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	69b9      	ldr	r1, [r7, #24]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f004 fcde 	bl	800b2ac <tcp_rst>
    }
    last_state = pcb->state;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7d1b      	ldrb	r3, [r3, #20]
 80068f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fd3c 	bl	8006374 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <tcp_abandon+0x154>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f06f 010c 	mvn.w	r1, #12
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	4798      	blx	r3
  }
}
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	0800fc78 	.word	0x0800fc78
 8006918:	0800fdbc 	.word	0x0800fdbc
 800691c:	0800fcbc 	.word	0x0800fcbc
 8006920:	0800fdd8 	.word	0x0800fdd8
 8006924:	20006960 	.word	0x20006960
 8006928:	2000695c 	.word	0x2000695c
 800692c:	20006950 	.word	0x20006950
 8006930:	2000694c 	.word	0x2000694c

08006934 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800693c:	2101      	movs	r1, #1
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff3a 	bl	80067b8 <tcp_abandon>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <tcp_update_rcv_ann_wnd+0x1c>
 800695a:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800695c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006960:	4924      	ldr	r1, [pc, #144]	; (80069f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006962:	4825      	ldr	r0, [pc, #148]	; (80069f8 <tcp_update_rcv_ann_wnd+0xac>)
 8006964:	f007 fc5a 	bl	800e21c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006970:	4413      	add	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800697c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006980:	bf28      	it	cs
 8006982:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006986:	b292      	uxth	r2, r2
 8006988:	4413      	add	r3, r2
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	db08      	blt.n	80069a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	e020      	b.n	80069e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd03      	ble.n	80069ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069b8:	e014      	b.n	80069e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069cc:	d306      	bcc.n	80069dc <tcp_update_rcv_ann_wnd+0x90>
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80069d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80069d4:	4909      	ldr	r1, [pc, #36]	; (80069fc <tcp_update_rcv_ann_wnd+0xb0>)
 80069d6:	4808      	ldr	r0, [pc, #32]	; (80069f8 <tcp_update_rcv_ann_wnd+0xac>)
 80069d8:	f007 fc20 	bl	800e21c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80069e4:	2300      	movs	r3, #0
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	0800fc78 	.word	0x0800fc78
 80069f4:	0800fed4 	.word	0x0800fed4
 80069f8:	0800fcbc 	.word	0x0800fcbc
 80069fc:	0800fef8 	.word	0x0800fef8

08006a00 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <tcp_recved+0x22>
 8006a12:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <tcp_recved+0x90>)
 8006a14:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006a18:	491e      	ldr	r1, [pc, #120]	; (8006a94 <tcp_recved+0x94>)
 8006a1a:	481f      	ldr	r0, [pc, #124]	; (8006a98 <tcp_recved+0x98>)
 8006a1c:	f007 fbfe 	bl	800e21c <iprintf>
 8006a20:	e032      	b.n	8006a88 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7d1b      	ldrb	r3, [r3, #20]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d106      	bne.n	8006a38 <tcp_recved+0x38>
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <tcp_recved+0x90>)
 8006a2c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8006a30:	491a      	ldr	r1, [pc, #104]	; (8006a9c <tcp_recved+0x9c>)
 8006a32:	4819      	ldr	r0, [pc, #100]	; (8006a98 <tcp_recved+0x98>)
 8006a34:	f007 fbf2 	bl	800e21c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006a3c:	887b      	ldrh	r3, [r7, #2]
 8006a3e:	4413      	add	r3, r2
 8006a40:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a48:	d804      	bhi.n	8006a54 <tcp_recved+0x54>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	89fa      	ldrh	r2, [r7, #14]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d204      	bcs.n	8006a5e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a5c:	e002      	b.n	8006a64 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	89fa      	ldrh	r2, [r7, #14]
 8006a62:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff71 	bl	800694c <tcp_update_rcv_ann_wnd>
 8006a6a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006a72:	d309      	bcc.n	8006a88 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8b5b      	ldrh	r3, [r3, #26]
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f003 fe40 	bl	800a708 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	0800fc78 	.word	0x0800fc78
 8006a94:	0800ff14 	.word	0x0800ff14
 8006a98:	0800fcbc 	.word	0x0800fcbc
 8006a9c:	0800ff2c 	.word	0x0800ff2c

08006aa0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b090      	sub	sp, #64	; 0x40
 8006aa4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006aac:	4b94      	ldr	r3, [pc, #592]	; (8006d00 <tcp_slowtmr+0x260>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	4a93      	ldr	r2, [pc, #588]	; (8006d00 <tcp_slowtmr+0x260>)
 8006ab4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006ab6:	4b93      	ldr	r3, [pc, #588]	; (8006d04 <tcp_slowtmr+0x264>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b91      	ldr	r3, [pc, #580]	; (8006d04 <tcp_slowtmr+0x264>)
 8006ac0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006ac6:	4b90      	ldr	r3, [pc, #576]	; (8006d08 <tcp_slowtmr+0x268>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006acc:	e29f      	b.n	800700e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	7d1b      	ldrb	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <tcp_slowtmr+0x44>
 8006ad6:	4b8d      	ldr	r3, [pc, #564]	; (8006d0c <tcp_slowtmr+0x26c>)
 8006ad8:	f240 42be 	movw	r2, #1214	; 0x4be
 8006adc:	498c      	ldr	r1, [pc, #560]	; (8006d10 <tcp_slowtmr+0x270>)
 8006ade:	488d      	ldr	r0, [pc, #564]	; (8006d14 <tcp_slowtmr+0x274>)
 8006ae0:	f007 fb9c 	bl	800e21c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	7d1b      	ldrb	r3, [r3, #20]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <tcp_slowtmr+0x5a>
 8006aec:	4b87      	ldr	r3, [pc, #540]	; (8006d0c <tcp_slowtmr+0x26c>)
 8006aee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006af2:	4989      	ldr	r1, [pc, #548]	; (8006d18 <tcp_slowtmr+0x278>)
 8006af4:	4887      	ldr	r0, [pc, #540]	; (8006d14 <tcp_slowtmr+0x274>)
 8006af6:	f007 fb91 	bl	800e21c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	7d1b      	ldrb	r3, [r3, #20]
 8006afe:	2b0a      	cmp	r3, #10
 8006b00:	d106      	bne.n	8006b10 <tcp_slowtmr+0x70>
 8006b02:	4b82      	ldr	r3, [pc, #520]	; (8006d0c <tcp_slowtmr+0x26c>)
 8006b04:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006b08:	4984      	ldr	r1, [pc, #528]	; (8006d1c <tcp_slowtmr+0x27c>)
 8006b0a:	4882      	ldr	r0, [pc, #520]	; (8006d14 <tcp_slowtmr+0x274>)
 8006b0c:	f007 fb86 	bl	800e21c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	7f9a      	ldrb	r2, [r3, #30]
 8006b14:	4b7b      	ldr	r3, [pc, #492]	; (8006d04 <tcp_slowtmr+0x264>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d105      	bne.n	8006b28 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006b26:	e272      	b.n	800700e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006b28:	4b76      	ldr	r3, [pc, #472]	; (8006d04 <tcp_slowtmr+0x264>)
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	7d1b      	ldrb	r3, [r3, #20]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d10a      	bne.n	8006b5a <tcp_slowtmr+0xba>
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d905      	bls.n	8006b5a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b52:	3301      	adds	r3, #1
 8006b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8006b58:	e11e      	b.n	8006d98 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b60:	2b0b      	cmp	r3, #11
 8006b62:	d905      	bls.n	8006b70 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b68:	3301      	adds	r3, #1
 8006b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b6e:	e113      	b.n	8006d98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d075      	beq.n	8006c66 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <tcp_slowtmr+0xf0>
 8006b82:	4b62      	ldr	r3, [pc, #392]	; (8006d0c <tcp_slowtmr+0x26c>)
 8006b84:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006b88:	4965      	ldr	r1, [pc, #404]	; (8006d20 <tcp_slowtmr+0x280>)
 8006b8a:	4862      	ldr	r0, [pc, #392]	; (8006d14 <tcp_slowtmr+0x274>)
 8006b8c:	f007 fb46 	bl	800e21c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <tcp_slowtmr+0x106>
 8006b98:	4b5c      	ldr	r3, [pc, #368]	; (8006d0c <tcp_slowtmr+0x26c>)
 8006b9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006b9e:	4961      	ldr	r1, [pc, #388]	; (8006d24 <tcp_slowtmr+0x284>)
 8006ba0:	485c      	ldr	r0, [pc, #368]	; (8006d14 <tcp_slowtmr+0x274>)
 8006ba2:	f007 fb3b 	bl	800e21c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006bac:	2b0b      	cmp	r3, #11
 8006bae:	d905      	bls.n	8006bbc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bba:	e0ed      	b.n	8006d98 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	4a58      	ldr	r2, [pc, #352]	; (8006d28 <tcp_slowtmr+0x288>)
 8006bc6:	5cd3      	ldrb	r3, [r2, r3]
 8006bc8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bd0:	7c7a      	ldrb	r2, [r7, #17]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d907      	bls.n	8006be6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bdc:	3301      	adds	r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006bec:	7c7a      	ldrb	r2, [r7, #17]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	f200 80d2 	bhi.w	8006d98 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d108      	bne.n	8006c14 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c04:	f004 fc46 	bl	800b494 <tcp_zero_window_probe>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d014      	beq.n	8006c38 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006c0e:	2300      	movs	r3, #0
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	e011      	b.n	8006c38 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c1e:	f003 fae9 	bl	800a1f4 <tcp_split_unsent_seg>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c2a:	f003 fd6d 	bl	800a708 <tcp_output>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80ac 	beq.w	8006d98 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	f200 80a2 	bhi.w	8006d98 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006c64:	e098      	b.n	8006d98 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	db0f      	blt.n	8006c90 <tcp_slowtmr+0x1f0>
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d008      	beq.n	8006c90 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3301      	adds	r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	b21a      	sxth	r2, r3
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	db7b      	blt.n	8006d98 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca2:	f004 f82d 	bl	800ad00 <tcp_rexmit_rto_prepare>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <tcp_slowtmr+0x21c>
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d171      	bne.n	8006d98 <tcp_slowtmr+0x2f8>
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d06d      	beq.n	8006d98 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	7d1b      	ldrb	r3, [r3, #20]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d03a      	beq.n	8006d3a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	bf28      	it	cs
 8006cce:	230c      	movcs	r3, #12
 8006cd0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006cd8:	10db      	asrs	r3, r3, #3
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ce4:	4413      	add	r3, r2
 8006ce6:	7efa      	ldrb	r2, [r7, #27]
 8006ce8:	4910      	ldr	r1, [pc, #64]	; (8006d2c <tcp_slowtmr+0x28c>)
 8006cea:	5c8a      	ldrb	r2, [r1, r2]
 8006cec:	4093      	lsls	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	dc1a      	bgt.n	8006d30 <tcp_slowtmr+0x290>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	b21a      	sxth	r2, r3
 8006cfe:	e019      	b.n	8006d34 <tcp_slowtmr+0x294>
 8006d00:	20006954 	.word	0x20006954
 8006d04:	200000ca 	.word	0x200000ca
 8006d08:	20006950 	.word	0x20006950
 8006d0c:	0800fc78 	.word	0x0800fc78
 8006d10:	0800ffbc 	.word	0x0800ffbc
 8006d14:	0800fcbc 	.word	0x0800fcbc
 8006d18:	0800ffe8 	.word	0x0800ffe8
 8006d1c:	08010014 	.word	0x08010014
 8006d20:	08010044 	.word	0x08010044
 8006d24:	08010078 	.word	0x08010078
 8006d28:	08011cc4 	.word	0x08011cc4
 8006d2c:	08011cb4 	.word	0x08011cb4
 8006d30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bf28      	it	cs
 8006d50:	4613      	movcs	r3, r2
 8006d52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006d54:	8a7b      	ldrh	r3, [r7, #18]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d206      	bcs.n	8006d80 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d94:	f004 f82e 	bl	800adf4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	7d1b      	ldrb	r3, [r3, #20]
 8006d9c:	2b06      	cmp	r3, #6
 8006d9e:	d111      	bne.n	8006dc4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	8b5b      	ldrh	r3, [r3, #26]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dac:	4b9d      	ldr	r3, [pc, #628]	; (8007024 <tcp_slowtmr+0x584>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b28      	cmp	r3, #40	; 0x28
 8006db8:	d904      	bls.n	8006dc4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	7a5b      	ldrb	r3, [r3, #9]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d04c      	beq.n	8006e6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d003      	beq.n	8006de0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	d144      	bne.n	8006e6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006de0:	4b90      	ldr	r3, [pc, #576]	; (8007024 <tcp_slowtmr+0x584>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006df4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006df8:	498b      	ldr	r1, [pc, #556]	; (8007028 <tcp_slowtmr+0x588>)
 8006dfa:	fba1 1303 	umull	r1, r3, r1, r3
 8006dfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d90a      	bls.n	8006e1a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e12:	3301      	adds	r3, #1
 8006e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e18:	e027      	b.n	8006e6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e1a:	4b82      	ldr	r3, [pc, #520]	; (8007024 <tcp_slowtmr+0x584>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006e30:	4618      	mov	r0, r3
 8006e32:	4b7e      	ldr	r3, [pc, #504]	; (800702c <tcp_slowtmr+0x58c>)
 8006e34:	fb03 f300 	mul.w	r3, r3, r0
 8006e38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006e3a:	497b      	ldr	r1, [pc, #492]	; (8007028 <tcp_slowtmr+0x588>)
 8006e3c:	fba1 1303 	umull	r1, r3, r1, r3
 8006e40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d911      	bls.n	8006e6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e48:	f004 fae4 	bl	800b414 <tcp_keepalive>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006e52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d107      	bne.n	8006e6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006e60:	3301      	adds	r3, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d011      	beq.n	8006e96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006e72:	4b6c      	ldr	r3, [pc, #432]	; (8007024 <tcp_slowtmr+0x584>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e82:	4619      	mov	r1, r3
 8006e84:	460b      	mov	r3, r1
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	440b      	add	r3, r1
 8006e8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e92:	f000 fdd7 	bl	8007a44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	7d1b      	ldrb	r3, [r3, #20]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d10b      	bne.n	8006eb6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e9e:	4b61      	ldr	r3, [pc, #388]	; (8007024 <tcp_slowtmr+0x584>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b28      	cmp	r3, #40	; 0x28
 8006eaa:	d904      	bls.n	8006eb6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d10b      	bne.n	8006ed6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ebe:	4b59      	ldr	r3, [pc, #356]	; (8007024 <tcp_slowtmr+0x584>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2bf0      	cmp	r3, #240	; 0xf0
 8006eca:	d904      	bls.n	8006ed6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d060      	beq.n	8006fa0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee8:	f000 fbf8 	bl	80076dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006ef2:	4b4f      	ldr	r3, [pc, #316]	; (8007030 <tcp_slowtmr+0x590>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d106      	bne.n	8006f0a <tcp_slowtmr+0x46a>
 8006efc:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <tcp_slowtmr+0x594>)
 8006efe:	f240 526d 	movw	r2, #1389	; 0x56d
 8006f02:	494d      	ldr	r1, [pc, #308]	; (8007038 <tcp_slowtmr+0x598>)
 8006f04:	484d      	ldr	r0, [pc, #308]	; (800703c <tcp_slowtmr+0x59c>)
 8006f06:	f007 f989 	bl	800e21c <iprintf>
        prev->next = pcb->next;
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	e00f      	b.n	8006f34 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006f14:	4b46      	ldr	r3, [pc, #280]	; (8007030 <tcp_slowtmr+0x590>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d006      	beq.n	8006f2c <tcp_slowtmr+0x48c>
 8006f1e:	4b45      	ldr	r3, [pc, #276]	; (8007034 <tcp_slowtmr+0x594>)
 8006f20:	f240 5271 	movw	r2, #1393	; 0x571
 8006f24:	4946      	ldr	r1, [pc, #280]	; (8007040 <tcp_slowtmr+0x5a0>)
 8006f26:	4845      	ldr	r0, [pc, #276]	; (800703c <tcp_slowtmr+0x59c>)
 8006f28:	f007 f978 	bl	800e21c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4a3f      	ldr	r2, [pc, #252]	; (8007030 <tcp_slowtmr+0x590>)
 8006f32:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d013      	beq.n	8006f64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f44:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	3304      	adds	r3, #4
 8006f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4c:	8ad2      	ldrh	r2, [r2, #22]
 8006f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f50:	8b09      	ldrh	r1, [r1, #24]
 8006f52:	9102      	str	r1, [sp, #8]
 8006f54:	9201      	str	r2, [sp, #4]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	462b      	mov	r3, r5
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f60:	f004 f9a4 	bl	800b2ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	7d1b      	ldrb	r3, [r3, #20]
 8006f6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006f7a:	6838      	ldr	r0, [r7, #0]
 8006f7c:	f7ff f9fa 	bl	8006374 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006f80:	4b30      	ldr	r3, [pc, #192]	; (8007044 <tcp_slowtmr+0x5a4>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <tcp_slowtmr+0x4f6>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f06f 010c 	mvn.w	r1, #12
 8006f92:	68b8      	ldr	r0, [r7, #8]
 8006f94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <tcp_slowtmr+0x5a4>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d037      	beq.n	800700e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006f9e:	e590      	b.n	8006ac2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	7f1b      	ldrb	r3, [r3, #28]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	7f1a      	ldrb	r2, [r3, #28]
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	7f5b      	ldrb	r3, [r3, #29]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d325      	bcc.n	800700e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <tcp_slowtmr+0x5a4>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <tcp_slowtmr+0x550>
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe0:	6912      	ldr	r2, [r2, #16]
 8006fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4798      	blx	r3
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006fee:	e002      	b.n	8006ff6 <tcp_slowtmr+0x556>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006ff6:	4b13      	ldr	r3, [pc, #76]	; (8007044 <tcp_slowtmr+0x5a4>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d000      	beq.n	8007000 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006ffe:	e560      	b.n	8006ac2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007000:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700a:	f003 fb7d 	bl	800a708 <tcp_output>
  while (pcb != NULL) {
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f ad5c 	bne.w	8006ace <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <tcp_slowtmr+0x5a8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007020:	e067      	b.n	80070f2 <tcp_slowtmr+0x652>
 8007022:	bf00      	nop
 8007024:	20006954 	.word	0x20006954
 8007028:	10624dd3 	.word	0x10624dd3
 800702c:	000124f8 	.word	0x000124f8
 8007030:	20006950 	.word	0x20006950
 8007034:	0800fc78 	.word	0x0800fc78
 8007038:	080100b0 	.word	0x080100b0
 800703c:	0800fcbc 	.word	0x0800fcbc
 8007040:	080100dc 	.word	0x080100dc
 8007044:	2000694c 	.word	0x2000694c
 8007048:	20006960 	.word	0x20006960
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	7d1b      	ldrb	r3, [r3, #20]
 8007050:	2b0a      	cmp	r3, #10
 8007052:	d006      	beq.n	8007062 <tcp_slowtmr+0x5c2>
 8007054:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <tcp_slowtmr+0x660>)
 8007056:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800705a:	492a      	ldr	r1, [pc, #168]	; (8007104 <tcp_slowtmr+0x664>)
 800705c:	482a      	ldr	r0, [pc, #168]	; (8007108 <tcp_slowtmr+0x668>)
 800705e:	f007 f8dd 	bl	800e21c <iprintf>
    pcb_remove = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007068:	4b28      	ldr	r3, [pc, #160]	; (800710c <tcp_slowtmr+0x66c>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2bf0      	cmp	r3, #240	; 0xf0
 8007074:	d904      	bls.n	8007080 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707a:	3301      	adds	r3, #1
 800707c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02f      	beq.n	80070e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800708a:	f000 fb27 	bl	80076dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007094:	4b1e      	ldr	r3, [pc, #120]	; (8007110 <tcp_slowtmr+0x670>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709a:	429a      	cmp	r2, r3
 800709c:	d106      	bne.n	80070ac <tcp_slowtmr+0x60c>
 800709e:	4b18      	ldr	r3, [pc, #96]	; (8007100 <tcp_slowtmr+0x660>)
 80070a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80070a4:	491b      	ldr	r1, [pc, #108]	; (8007114 <tcp_slowtmr+0x674>)
 80070a6:	4818      	ldr	r0, [pc, #96]	; (8007108 <tcp_slowtmr+0x668>)
 80070a8:	f007 f8b8 	bl	800e21c <iprintf>
        prev->next = pcb->next;
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	60da      	str	r2, [r3, #12]
 80070b4:	e00f      	b.n	80070d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <tcp_slowtmr+0x670>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070bc:	429a      	cmp	r2, r3
 80070be:	d006      	beq.n	80070ce <tcp_slowtmr+0x62e>
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <tcp_slowtmr+0x660>)
 80070c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80070c6:	4914      	ldr	r1, [pc, #80]	; (8007118 <tcp_slowtmr+0x678>)
 80070c8:	480f      	ldr	r0, [pc, #60]	; (8007108 <tcp_slowtmr+0x668>)
 80070ca:	f007 f8a7 	bl	800e21c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <tcp_slowtmr+0x670>)
 80070d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f7ff f947 	bl	8006374 <tcp_free>
 80070e6:	e004      	b.n	80070f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1a9      	bne.n	800704c <tcp_slowtmr+0x5ac>
    }
  }
}
 80070f8:	bf00      	nop
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007100:	0800fc78 	.word	0x0800fc78
 8007104:	08010108 	.word	0x08010108
 8007108:	0800fcbc 	.word	0x0800fcbc
 800710c:	20006954 	.word	0x20006954
 8007110:	20006960 	.word	0x20006960
 8007114:	08010138 	.word	0x08010138
 8007118:	08010160 	.word	0x08010160

0800711c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007122:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <tcp_fasttmr+0xbc>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <tcp_fasttmr+0xbc>)
 800712c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800712e:	4b2b      	ldr	r3, [pc, #172]	; (80071dc <tcp_fasttmr+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007134:	e048      	b.n	80071c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7f9a      	ldrb	r2, [r3, #30]
 800713a:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <tcp_fasttmr+0xbc>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d03f      	beq.n	80071c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007142:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <tcp_fasttmr+0xbc>)
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8b5b      	ldrh	r3, [r3, #26]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d010      	beq.n	8007178 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8b5b      	ldrh	r3, [r3, #26]
 800715a:	f043 0302 	orr.w	r3, r3, #2
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f003 facf 	bl	800a708 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8b5b      	ldrh	r3, [r3, #26]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8b5b      	ldrh	r3, [r3, #26]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8b5b      	ldrh	r3, [r3, #26]
 8007188:	f023 0308 	bic.w	r3, r3, #8
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fa7e 	bl	8006694 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <tcp_fasttmr+0xc4>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f819 	bl	80071e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <tcp_fasttmr+0xc4>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d000      	beq.n	80071bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80071ba:	e7b8      	b.n	800712e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	e002      	b.n	80071c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1b3      	bne.n	8007136 <tcp_fasttmr+0x1a>
    }
  }
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200000ca 	.word	0x200000ca
 80071dc:	20006950 	.word	0x20006950
 80071e0:	2000694c 	.word	0x2000694c

080071e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <tcp_process_refused_data+0x22>
 80071f2:	4b37      	ldr	r3, [pc, #220]	; (80072d0 <tcp_process_refused_data+0xec>)
 80071f4:	f240 6209 	movw	r2, #1545	; 0x609
 80071f8:	4936      	ldr	r1, [pc, #216]	; (80072d4 <tcp_process_refused_data+0xf0>)
 80071fa:	4837      	ldr	r0, [pc, #220]	; (80072d8 <tcp_process_refused_data+0xf4>)
 80071fc:	f007 f80e 	bl	800e21c <iprintf>
 8007200:	f06f 030f 	mvn.w	r3, #15
 8007204:	e060      	b.n	80072c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800720a:	7b5b      	ldrb	r3, [r3, #13]
 800720c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007212:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <tcp_process_refused_data+0x58>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6918      	ldr	r0, [r3, #16]
 800722e:	2300      	movs	r3, #0
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	47a0      	blx	r4
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
 800723a:	e007      	b.n	800724c <tcp_process_refused_data+0x68>
 800723c:	2300      	movs	r3, #0
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	2000      	movs	r0, #0
 8007244:	f000 f8a2 	bl	800738c <tcp_recv_null>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800724c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12a      	bne.n	80072aa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d033      	beq.n	80072c6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007262:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007266:	d005      	beq.n	8007274 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	3301      	adds	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <tcp_process_refused_data+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6918      	ldr	r0, [r3, #16]
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	47a0      	blx	r4
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
 8007294:	e001      	b.n	800729a <tcp_process_refused_data+0xb6>
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	f113 0f0d 	cmn.w	r3, #13
 80072a2:	d110      	bne.n	80072c6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80072a4:	f06f 030c 	mvn.w	r3, #12
 80072a8:	e00e      	b.n	80072c8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80072aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ae:	f113 0f0d 	cmn.w	r3, #13
 80072b2:	d102      	bne.n	80072ba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80072b4:	f06f 030c 	mvn.w	r3, #12
 80072b8:	e006      	b.n	80072c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80072c0:	f06f 0304 	mvn.w	r3, #4
 80072c4:	e000      	b.n	80072c8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd90      	pop	{r4, r7, pc}
 80072d0:	0800fc78 	.word	0x0800fc78
 80072d4:	08010188 	.word	0x08010188
 80072d8:	0800fcbc 	.word	0x0800fcbc

080072dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80072e4:	e007      	b.n	80072f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f809 	bl	8007304 <tcp_seg_free>
    seg = next;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1f4      	bne.n	80072e6 <tcp_segs_free+0xa>
  }
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fd88 	bl	8005e34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	2003      	movs	r0, #3
 8007328:	f7fd ff90 	bl	800524c <memp_free>
  }
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <tcp_seg_copy+0x1c>
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <tcp_seg_copy+0x4c>)
 8007344:	f240 6282 	movw	r2, #1666	; 0x682
 8007348:	490e      	ldr	r1, [pc, #56]	; (8007384 <tcp_seg_copy+0x50>)
 800734a:	480f      	ldr	r0, [pc, #60]	; (8007388 <tcp_seg_copy+0x54>)
 800734c:	f006 ff66 	bl	800e21c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007350:	2003      	movs	r0, #3
 8007352:	f7fd ff2f 	bl	80051b4 <memp_malloc>
 8007356:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <tcp_seg_copy+0x2e>
    return NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	e00a      	b.n	8007378 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007362:	2214      	movs	r2, #20
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f006 ff45 	bl	800e1f6 <memcpy>
  pbuf_ref(cseg->p);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fdff 	bl	8005f74 <pbuf_ref>
  return cseg;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	0800fc78 	.word	0x0800fc78
 8007384:	080101cc 	.word	0x080101cc
 8007388:	0800fcbc 	.word	0x0800fcbc

0800738c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d109      	bne.n	80073b4 <tcp_recv_null+0x28>
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <tcp_recv_null+0x60>)
 80073a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80073a6:	4912      	ldr	r1, [pc, #72]	; (80073f0 <tcp_recv_null+0x64>)
 80073a8:	4812      	ldr	r0, [pc, #72]	; (80073f4 <tcp_recv_null+0x68>)
 80073aa:	f006 ff37 	bl	800e21c <iprintf>
 80073ae:	f06f 030f 	mvn.w	r3, #15
 80073b2:	e016      	b.n	80073e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	891b      	ldrh	r3, [r3, #8]
 80073be:	4619      	mov	r1, r3
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f7ff fb1d 	bl	8006a00 <tcp_recved>
    pbuf_free(p);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fe fd34 	bl	8005e34 <pbuf_free>
 80073cc:	e008      	b.n	80073e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80073ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80073d6:	68b8      	ldr	r0, [r7, #8]
 80073d8:	f7ff f9c2 	bl	8006760 <tcp_close>
 80073dc:	4603      	mov	r3, r0
 80073de:	e000      	b.n	80073e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	0800fc78 	.word	0x0800fc78
 80073f0:	080101e8 	.word	0x080101e8
 80073f4:	0800fcbc 	.word	0x0800fcbc

080073f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007406:	2b00      	cmp	r3, #0
 8007408:	db01      	blt.n	800740e <tcp_kill_prio+0x16>
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	e000      	b.n	8007410 <tcp_kill_prio+0x18>
 800740e:	237f      	movs	r3, #127	; 0x7f
 8007410:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d034      	beq.n	8007482 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3b01      	subs	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <tcp_kill_prio+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e01f      	b.n	800746e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	7d5b      	ldrb	r3, [r3, #21]
 8007432:	7afa      	ldrb	r2, [r7, #11]
 8007434:	429a      	cmp	r2, r3
 8007436:	d80c      	bhi.n	8007452 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800743c:	7afa      	ldrb	r2, [r7, #11]
 800743e:	429a      	cmp	r2, r3
 8007440:	d112      	bne.n	8007468 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007442:	4b13      	ldr	r3, [pc, #76]	; (8007490 <tcp_kill_prio+0x98>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	429a      	cmp	r2, r3
 8007450:	d80a      	bhi.n	8007468 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <tcp_kill_prio+0x98>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	7d5b      	ldrb	r3, [r3, #21]
 8007466:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1dc      	bne.n	800742e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800747a:	6938      	ldr	r0, [r7, #16]
 800747c:	f7ff fa5a 	bl	8006934 <tcp_abort>
 8007480:	e000      	b.n	8007484 <tcp_kill_prio+0x8c>
    return;
 8007482:	bf00      	nop
  }
}
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20006950 	.word	0x20006950
 8007490:	20006954 	.word	0x20006954

08007494 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d009      	beq.n	80074b8 <tcp_kill_state+0x24>
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d006      	beq.n	80074b8 <tcp_kill_state+0x24>
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <tcp_kill_state+0x80>)
 80074ac:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80074b0:	4919      	ldr	r1, [pc, #100]	; (8007518 <tcp_kill_state+0x84>)
 80074b2:	481a      	ldr	r0, [pc, #104]	; (800751c <tcp_kill_state+0x88>)
 80074b4:	f006 feb2 	bl	800e21c <iprintf>

  inactivity = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074c0:	4b17      	ldr	r3, [pc, #92]	; (8007520 <tcp_kill_state+0x8c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e017      	b.n	80074f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	7d1b      	ldrb	r3, [r3, #20]
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d10f      	bne.n	80074f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074d2:	4b14      	ldr	r3, [pc, #80]	; (8007524 <tcp_kill_state+0x90>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d807      	bhi.n	80074f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80074e2:	4b10      	ldr	r3, [pc, #64]	; (8007524 <tcp_kill_state+0x90>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e4      	bne.n	80074c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007504:	2100      	movs	r1, #0
 8007506:	6938      	ldr	r0, [r7, #16]
 8007508:	f7ff f956 	bl	80067b8 <tcp_abandon>
  }
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	0800fc78 	.word	0x0800fc78
 8007518:	08010204 	.word	0x08010204
 800751c:	0800fcbc 	.word	0x0800fcbc
 8007520:	20006950 	.word	0x20006950
 8007524:	20006954 	.word	0x20006954

08007528 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <tcp_kill_timewait+0x58>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e012      	b.n	8007564 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <tcp_kill_timewait+0x5c>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d807      	bhi.n	800755e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <tcp_kill_timewait+0x5c>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e9      	bne.n	800753e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007570:	68b8      	ldr	r0, [r7, #8]
 8007572:	f7ff f9df 	bl	8006934 <tcp_abort>
  }
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20006960 	.word	0x20006960
 8007584:	20006954 	.word	0x20006954

08007588 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <tcp_handle_closepend+0x48>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007594:	e014      	b.n	80075c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8b5b      	ldrh	r3, [r3, #26]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8b5b      	ldrh	r3, [r3, #26]
 80075ac:	f023 0308 	bic.w	r3, r3, #8
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff f86c 	bl	8006694 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e7      	bne.n	8007596 <tcp_handle_closepend+0xe>
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20006950 	.word	0x20006950

080075d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075de:	2001      	movs	r0, #1
 80075e0:	f7fd fde8 	bl	80051b4 <memp_malloc>
 80075e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d126      	bne.n	800763a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80075ec:	f7ff ffcc 	bl	8007588 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80075f0:	f7ff ff9a 	bl	8007528 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075f4:	2001      	movs	r0, #1
 80075f6:	f7fd fddd 	bl	80051b4 <memp_malloc>
 80075fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11b      	bne.n	800763a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007602:	2009      	movs	r0, #9
 8007604:	f7ff ff46 	bl	8007494 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007608:	2001      	movs	r0, #1
 800760a:	f7fd fdd3 	bl	80051b4 <memp_malloc>
 800760e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d111      	bne.n	800763a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007616:	2008      	movs	r0, #8
 8007618:	f7ff ff3c 	bl	8007494 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800761c:	2001      	movs	r0, #1
 800761e:	f7fd fdc9 	bl	80051b4 <memp_malloc>
 8007622:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d107      	bne.n	800763a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fee3 	bl	80073f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007632:	2001      	movs	r0, #1
 8007634:	f7fd fdbe 	bl	80051b4 <memp_malloc>
 8007638:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d03f      	beq.n	80076c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007640:	229c      	movs	r2, #156	; 0x9c
 8007642:	2100      	movs	r1, #0
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f006 fde1 	bl	800e20c <memset>
    pcb->prio = prio;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	79fa      	ldrb	r2, [r7, #7]
 800764e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007656:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007676:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2206      	movs	r2, #6
 800767c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2206      	movs	r2, #6
 8007684:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800768c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <tcp_alloc+0xf8>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <tcp_alloc+0xfc>)
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80076ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <tcp_alloc+0x100>)
 80076b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <tcp_alloc+0x104>)
 80076bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20006954 	.word	0x20006954
 80076d0:	200000ca 	.word	0x200000ca
 80076d4:	0800738d 	.word	0x0800738d
 80076d8:	006ddd00 	.word	0x006ddd00

080076dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <tcp_pcb_purge+0x1e>
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <tcp_pcb_purge+0x94>)
 80076ec:	f640 0251 	movw	r2, #2129	; 0x851
 80076f0:	4920      	ldr	r1, [pc, #128]	; (8007774 <tcp_pcb_purge+0x98>)
 80076f2:	4821      	ldr	r0, [pc, #132]	; (8007778 <tcp_pcb_purge+0x9c>)
 80076f4:	f006 fd92 	bl	800e21c <iprintf>
 80076f8:	e037      	b.n	800776a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7d1b      	ldrb	r3, [r3, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d033      	beq.n	800776a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007706:	2b0a      	cmp	r3, #10
 8007708:	d02f      	beq.n	800776a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800770e:	2b01      	cmp	r3, #1
 8007710:	d02b      	beq.n	800776a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fb88 	bl	8005e34 <pbuf_free>
      pcb->refused_data = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f986 	bl	8007a44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800773e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fdc9 	bl	80072dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fdc4 	bl	80072dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	66da      	str	r2, [r3, #108]	; 0x6c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	0800fc78 	.word	0x0800fc78
 8007774:	080102c4 	.word	0x080102c4
 8007778:	0800fcbc 	.word	0x0800fcbc

0800777c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <tcp_pcb_remove+0x1e>
 800778c:	4b3e      	ldr	r3, [pc, #248]	; (8007888 <tcp_pcb_remove+0x10c>)
 800778e:	f640 0283 	movw	r2, #2179	; 0x883
 8007792:	493e      	ldr	r1, [pc, #248]	; (800788c <tcp_pcb_remove+0x110>)
 8007794:	483e      	ldr	r0, [pc, #248]	; (8007890 <tcp_pcb_remove+0x114>)
 8007796:	f006 fd41 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <tcp_pcb_remove+0x32>
 80077a0:	4b39      	ldr	r3, [pc, #228]	; (8007888 <tcp_pcb_remove+0x10c>)
 80077a2:	f640 0284 	movw	r2, #2180	; 0x884
 80077a6:	493b      	ldr	r1, [pc, #236]	; (8007894 <tcp_pcb_remove+0x118>)
 80077a8:	4839      	ldr	r0, [pc, #228]	; (8007890 <tcp_pcb_remove+0x114>)
 80077aa:	f006 fd37 	bl	800e21c <iprintf>

  TCP_RMV(pcblist, pcb);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d105      	bne.n	80077c4 <tcp_pcb_remove+0x48>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	e013      	b.n	80077ec <tcp_pcb_remove+0x70>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e00c      	b.n	80077e6 <tcp_pcb_remove+0x6a>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d104      	bne.n	80077e0 <tcp_pcb_remove+0x64>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	60da      	str	r2, [r3, #12]
 80077de:	e005      	b.n	80077ec <tcp_pcb_remove+0x70>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1ef      	bne.n	80077cc <tcp_pcb_remove+0x50>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f7ff ff72 	bl	80076dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	7d1b      	ldrb	r3, [r3, #20]
 80077fc:	2b0a      	cmp	r3, #10
 80077fe:	d013      	beq.n	8007828 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007804:	2b01      	cmp	r3, #1
 8007806:	d00f      	beq.n	8007828 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	8b5b      	ldrh	r3, [r3, #26]
 800780c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	8b5b      	ldrh	r3, [r3, #26]
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	b29a      	uxth	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007822:	6838      	ldr	r0, [r7, #0]
 8007824:	f002 ff70 	bl	800a708 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	7d1b      	ldrb	r3, [r3, #20]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d020      	beq.n	8007872 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <tcp_pcb_remove+0xca>
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <tcp_pcb_remove+0x10c>)
 800783a:	f640 0293 	movw	r2, #2195	; 0x893
 800783e:	4916      	ldr	r1, [pc, #88]	; (8007898 <tcp_pcb_remove+0x11c>)
 8007840:	4813      	ldr	r0, [pc, #76]	; (8007890 <tcp_pcb_remove+0x114>)
 8007842:	f006 fceb 	bl	800e21c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <tcp_pcb_remove+0xe0>
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <tcp_pcb_remove+0x10c>)
 8007850:	f640 0294 	movw	r2, #2196	; 0x894
 8007854:	4911      	ldr	r1, [pc, #68]	; (800789c <tcp_pcb_remove+0x120>)
 8007856:	480e      	ldr	r0, [pc, #56]	; (8007890 <tcp_pcb_remove+0x114>)
 8007858:	f006 fce0 	bl	800e21c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <tcp_pcb_remove+0xf6>
 8007864:	4b08      	ldr	r3, [pc, #32]	; (8007888 <tcp_pcb_remove+0x10c>)
 8007866:	f640 0296 	movw	r2, #2198	; 0x896
 800786a:	490d      	ldr	r1, [pc, #52]	; (80078a0 <tcp_pcb_remove+0x124>)
 800786c:	4808      	ldr	r0, [pc, #32]	; (8007890 <tcp_pcb_remove+0x114>)
 800786e:	f006 fcd5 	bl	800e21c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2200      	movs	r2, #0
 8007876:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	0800fc78 	.word	0x0800fc78
 800788c:	080102e0 	.word	0x080102e0
 8007890:	0800fcbc 	.word	0x0800fcbc
 8007894:	080102fc 	.word	0x080102fc
 8007898:	0801031c 	.word	0x0801031c
 800789c:	08010334 	.word	0x08010334
 80078a0:	08010350 	.word	0x08010350

080078a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <tcp_next_iss+0x1c>
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <tcp_next_iss+0x38>)
 80078b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80078b8:	4909      	ldr	r1, [pc, #36]	; (80078e0 <tcp_next_iss+0x3c>)
 80078ba:	480a      	ldr	r0, [pc, #40]	; (80078e4 <tcp_next_iss+0x40>)
 80078bc:	f006 fcae 	bl	800e21c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80078c0:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <tcp_next_iss+0x44>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <tcp_next_iss+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4413      	add	r3, r2
 80078ca:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <tcp_next_iss+0x44>)
 80078cc:	6013      	str	r3, [r2, #0]
  return iss;
 80078ce:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <tcp_next_iss+0x44>)
 80078d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	0800fc78 	.word	0x0800fc78
 80078e0:	08010368 	.word	0x08010368
 80078e4:	0800fcbc 	.word	0x0800fcbc
 80078e8:	2000000c 	.word	0x2000000c
 80078ec:	20006954 	.word	0x20006954

080078f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <tcp_eff_send_mss_netif+0x22>
 8007904:	4b14      	ldr	r3, [pc, #80]	; (8007958 <tcp_eff_send_mss_netif+0x68>)
 8007906:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800790a:	4914      	ldr	r1, [pc, #80]	; (800795c <tcp_eff_send_mss_netif+0x6c>)
 800790c:	4814      	ldr	r0, [pc, #80]	; (8007960 <tcp_eff_send_mss_netif+0x70>)
 800790e:	f006 fc85 	bl	800e21c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007918:	89fb      	ldrh	r3, [r7, #14]
 800791a:	e019      	b.n	8007950 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007920:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007922:	8afb      	ldrh	r3, [r7, #22]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d012      	beq.n	800794e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007928:	2328      	movs	r3, #40	; 0x28
 800792a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800792c:	8afa      	ldrh	r2, [r7, #22]
 800792e:	8abb      	ldrh	r3, [r7, #20]
 8007930:	429a      	cmp	r2, r3
 8007932:	d904      	bls.n	800793e <tcp_eff_send_mss_netif+0x4e>
 8007934:	8afa      	ldrh	r2, [r7, #22]
 8007936:	8abb      	ldrh	r3, [r7, #20]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	b29b      	uxth	r3, r3
 800793c:	e000      	b.n	8007940 <tcp_eff_send_mss_netif+0x50>
 800793e:	2300      	movs	r3, #0
 8007940:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007942:	8a7a      	ldrh	r2, [r7, #18]
 8007944:	89fb      	ldrh	r3, [r7, #14]
 8007946:	4293      	cmp	r3, r2
 8007948:	bf28      	it	cs
 800794a:	4613      	movcs	r3, r2
 800794c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800794e:	89fb      	ldrh	r3, [r7, #14]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	0800fc78 	.word	0x0800fc78
 800795c:	08010384 	.word	0x08010384
 8007960:	0800fcbc 	.word	0x0800fcbc

08007964 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d119      	bne.n	80079ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800797a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800797e:	4910      	ldr	r1, [pc, #64]	; (80079c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007980:	4810      	ldr	r0, [pc, #64]	; (80079c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007982:	f006 fc4b 	bl	800e21c <iprintf>

  while (pcb != NULL) {
 8007986:	e011      	b.n	80079ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d108      	bne.n	80079a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7fe ffca 	bl	8006934 <tcp_abort>
      pcb = next;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e002      	b.n	80079ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1ea      	bne.n	8007988 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	0800fc78 	.word	0x0800fc78
 80079c0:	080103ac 	.word	0x080103ac
 80079c4:	0800fcbc 	.word	0x0800fcbc

080079c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d02a      	beq.n	8007a2e <tcp_netif_ip_addr_changed+0x66>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d026      	beq.n	8007a2e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80079e0:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <tcp_netif_ip_addr_changed+0x70>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff ffbc 	bl	8007964 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <tcp_netif_ip_addr_changed+0x74>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffb6 	bl	8007964 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <tcp_netif_ip_addr_changed+0x66>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <tcp_netif_ip_addr_changed+0x78>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e00c      	b.n	8007a28 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d103      	bne.n	8007a22 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1ef      	bne.n	8007a0e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20006950 	.word	0x20006950
 8007a3c:	2000695c 	.word	0x2000695c
 8007a40:	20006958 	.word	0x20006958

08007a44 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fc3f 	bl	80072dc <tcp_segs_free>
    pcb->ooseq = NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b08d      	sub	sp, #52	; 0x34
 8007a70:	af04      	add	r7, sp, #16
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d105      	bne.n	8007a88 <tcp_input+0x1c>
 8007a7c:	4b9b      	ldr	r3, [pc, #620]	; (8007cec <tcp_input+0x280>)
 8007a7e:	2283      	movs	r2, #131	; 0x83
 8007a80:	499b      	ldr	r1, [pc, #620]	; (8007cf0 <tcp_input+0x284>)
 8007a82:	489c      	ldr	r0, [pc, #624]	; (8007cf4 <tcp_input+0x288>)
 8007a84:	f006 fbca 	bl	800e21c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a9a      	ldr	r2, [pc, #616]	; (8007cf8 <tcp_input+0x28c>)
 8007a8e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	2b13      	cmp	r3, #19
 8007a96:	f240 83c4 	bls.w	8008222 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a9a:	4b98      	ldr	r3, [pc, #608]	; (8007cfc <tcp_input+0x290>)
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	4b97      	ldr	r3, [pc, #604]	; (8007cfc <tcp_input+0x290>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f005 fc25 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 83ba 	bne.w	8008226 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007ab2:	4b92      	ldr	r3, [pc, #584]	; (8007cfc <tcp_input+0x290>)
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007aba:	2be0      	cmp	r3, #224	; 0xe0
 8007abc:	f000 83b3 	beq.w	8008226 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007ac0:	4b8d      	ldr	r3, [pc, #564]	; (8007cf8 <tcp_input+0x28c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	899b      	ldrh	r3, [r3, #12]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fc ff1e 	bl	800490a <lwip_htons>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	0b1b      	lsrs	r3, r3, #12
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ada:	7cbb      	ldrb	r3, [r7, #18]
 8007adc:	2b13      	cmp	r3, #19
 8007ade:	f240 83a4 	bls.w	800822a <tcp_input+0x7be>
 8007ae2:	7cbb      	ldrb	r3, [r7, #18]
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	891b      	ldrh	r3, [r3, #8]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f200 839d 	bhi.w	800822a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007af0:	7cbb      	ldrb	r3, [r7, #18]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b14      	subs	r3, #20
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	4b81      	ldr	r3, [pc, #516]	; (8007d00 <tcp_input+0x294>)
 8007afa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007afc:	4b81      	ldr	r3, [pc, #516]	; (8007d04 <tcp_input+0x298>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	895a      	ldrh	r2, [r3, #10]
 8007b06:	7cbb      	ldrb	r3, [r7, #18]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d309      	bcc.n	8007b22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007b0e:	4b7c      	ldr	r3, [pc, #496]	; (8007d00 <tcp_input+0x294>)
 8007b10:	881a      	ldrh	r2, [r3, #0]
 8007b12:	4b7d      	ldr	r3, [pc, #500]	; (8007d08 <tcp_input+0x29c>)
 8007b14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007b16:	7cbb      	ldrb	r3, [r7, #18]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe f904 	bl	8005d28 <pbuf_remove_header>
 8007b20:	e04e      	b.n	8007bc0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <tcp_input+0xca>
 8007b2a:	4b70      	ldr	r3, [pc, #448]	; (8007cec <tcp_input+0x280>)
 8007b2c:	22c2      	movs	r2, #194	; 0xc2
 8007b2e:	4977      	ldr	r1, [pc, #476]	; (8007d0c <tcp_input+0x2a0>)
 8007b30:	4870      	ldr	r0, [pc, #448]	; (8007cf4 <tcp_input+0x288>)
 8007b32:	f006 fb73 	bl	800e21c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007b36:	2114      	movs	r1, #20
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fe f8f5 	bl	8005d28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	895a      	ldrh	r2, [r3, #10]
 8007b42:	4b71      	ldr	r3, [pc, #452]	; (8007d08 <tcp_input+0x29c>)
 8007b44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007b46:	4b6e      	ldr	r3, [pc, #440]	; (8007d00 <tcp_input+0x294>)
 8007b48:	881a      	ldrh	r2, [r3, #0]
 8007b4a:	4b6f      	ldr	r3, [pc, #444]	; (8007d08 <tcp_input+0x29c>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007b52:	4b6d      	ldr	r3, [pc, #436]	; (8007d08 <tcp_input+0x29c>)
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fe f8e5 	bl	8005d28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	895b      	ldrh	r3, [r3, #10]
 8007b64:	8a3a      	ldrh	r2, [r7, #16]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	f200 8361 	bhi.w	800822e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	4a64      	ldr	r2, [pc, #400]	; (8007d04 <tcp_input+0x298>)
 8007b74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	8a3a      	ldrh	r2, [r7, #16]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe f8d2 	bl	8005d28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	891a      	ldrh	r2, [r3, #8]
 8007b88:	8a3b      	ldrh	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	895b      	ldrh	r3, [r3, #10]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <tcp_input+0x13a>
 8007b9a:	4b54      	ldr	r3, [pc, #336]	; (8007cec <tcp_input+0x280>)
 8007b9c:	22df      	movs	r2, #223	; 0xdf
 8007b9e:	495c      	ldr	r1, [pc, #368]	; (8007d10 <tcp_input+0x2a4>)
 8007ba0:	4854      	ldr	r0, [pc, #336]	; (8007cf4 <tcp_input+0x288>)
 8007ba2:	f006 fb3b 	bl	800e21c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	891a      	ldrh	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	891b      	ldrh	r3, [r3, #8]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d005      	beq.n	8007bc0 <tcp_input+0x154>
 8007bb4:	4b4d      	ldr	r3, [pc, #308]	; (8007cec <tcp_input+0x280>)
 8007bb6:	22e0      	movs	r2, #224	; 0xe0
 8007bb8:	4956      	ldr	r1, [pc, #344]	; (8007d14 <tcp_input+0x2a8>)
 8007bba:	484e      	ldr	r0, [pc, #312]	; (8007cf4 <tcp_input+0x288>)
 8007bbc:	f006 fb2e 	bl	800e21c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007bc0:	4b4d      	ldr	r3, [pc, #308]	; (8007cf8 <tcp_input+0x28c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <tcp_input+0x28c>)
 8007bca:	681c      	ldr	r4, [r3, #0]
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fc fe9c 	bl	800490a <lwip_htons>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007bd6:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <tcp_input+0x28c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	4b46      	ldr	r3, [pc, #280]	; (8007cf8 <tcp_input+0x28c>)
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fc fe91 	bl	800490a <lwip_htons>
 8007be8:	4603      	mov	r3, r0
 8007bea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007bec:	4b42      	ldr	r3, [pc, #264]	; (8007cf8 <tcp_input+0x28c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	4b41      	ldr	r3, [pc, #260]	; (8007cf8 <tcp_input+0x28c>)
 8007bf4:	681c      	ldr	r4, [r3, #0]
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7fc fe9c 	bl	8004934 <lwip_htonl>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	6863      	ldr	r3, [r4, #4]
 8007c02:	4a45      	ldr	r2, [pc, #276]	; (8007d18 <tcp_input+0x2ac>)
 8007c04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007c06:	4b3c      	ldr	r3, [pc, #240]	; (8007cf8 <tcp_input+0x28c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	4b3a      	ldr	r3, [pc, #232]	; (8007cf8 <tcp_input+0x28c>)
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	4610      	mov	r0, r2
 8007c12:	f7fc fe8f 	bl	8004934 <lwip_htonl>
 8007c16:	4603      	mov	r3, r0
 8007c18:	60a3      	str	r3, [r4, #8]
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	4a3f      	ldr	r2, [pc, #252]	; (8007d1c <tcp_input+0x2b0>)
 8007c1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007c20:	4b35      	ldr	r3, [pc, #212]	; (8007cf8 <tcp_input+0x28c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	89db      	ldrh	r3, [r3, #14]
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	4b33      	ldr	r3, [pc, #204]	; (8007cf8 <tcp_input+0x28c>)
 8007c2a:	681c      	ldr	r4, [r3, #0]
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fc fe6c 	bl	800490a <lwip_htons>
 8007c32:	4603      	mov	r3, r0
 8007c34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007c36:	4b30      	ldr	r3, [pc, #192]	; (8007cf8 <tcp_input+0x28c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	899b      	ldrh	r3, [r3, #12]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fc fe63 	bl	800490a <lwip_htons>
 8007c44:	4603      	mov	r3, r0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	4b34      	ldr	r3, [pc, #208]	; (8007d20 <tcp_input+0x2b4>)
 8007c50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	891a      	ldrh	r2, [r3, #8]
 8007c56:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <tcp_input+0x2b8>)
 8007c58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <tcp_input+0x2b4>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00c      	beq.n	8007c80 <tcp_input+0x214>
    tcplen++;
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <tcp_input+0x2b8>)
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <tcp_input+0x2b8>)
 8007c70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	891a      	ldrh	r2, [r3, #8]
 8007c76:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <tcp_input+0x2b8>)
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f200 82d9 	bhi.w	8008232 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c84:	4b28      	ldr	r3, [pc, #160]	; (8007d28 <tcp_input+0x2bc>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	e09d      	b.n	8007dc8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	7d1b      	ldrb	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <tcp_input+0x234>
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <tcp_input+0x280>)
 8007c96:	22fb      	movs	r2, #251	; 0xfb
 8007c98:	4924      	ldr	r1, [pc, #144]	; (8007d2c <tcp_input+0x2c0>)
 8007c9a:	4816      	ldr	r0, [pc, #88]	; (8007cf4 <tcp_input+0x288>)
 8007c9c:	f006 fabe 	bl	800e21c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	7d1b      	ldrb	r3, [r3, #20]
 8007ca4:	2b0a      	cmp	r3, #10
 8007ca6:	d105      	bne.n	8007cb4 <tcp_input+0x248>
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <tcp_input+0x280>)
 8007caa:	22fc      	movs	r2, #252	; 0xfc
 8007cac:	4920      	ldr	r1, [pc, #128]	; (8007d30 <tcp_input+0x2c4>)
 8007cae:	4811      	ldr	r0, [pc, #68]	; (8007cf4 <tcp_input+0x288>)
 8007cb0:	f006 fab4 	bl	800e21c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	7d1b      	ldrb	r3, [r3, #20]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <tcp_input+0x25c>
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <tcp_input+0x280>)
 8007cbe:	22fd      	movs	r2, #253	; 0xfd
 8007cc0:	491c      	ldr	r1, [pc, #112]	; (8007d34 <tcp_input+0x2c8>)
 8007cc2:	480c      	ldr	r0, [pc, #48]	; (8007cf4 <tcp_input+0x288>)
 8007cc4:	f006 faaa 	bl	800e21c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	7a1b      	ldrb	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d033      	beq.n	8007d38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	7a1a      	ldrb	r2, [r3, #8]
 8007cd4:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <tcp_input+0x290>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cdc:	3301      	adds	r3, #1
 8007cde:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d029      	beq.n	8007d38 <tcp_input+0x2cc>
      prev = pcb;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	61fb      	str	r3, [r7, #28]
      continue;
 8007ce8:	e06b      	b.n	8007dc2 <tcp_input+0x356>
 8007cea:	bf00      	nop
 8007cec:	080103e0 	.word	0x080103e0
 8007cf0:	08010414 	.word	0x08010414
 8007cf4:	0801042c 	.word	0x0801042c
 8007cf8:	200000e0 	.word	0x200000e0
 8007cfc:	200033cc 	.word	0x200033cc
 8007d00:	200000e4 	.word	0x200000e4
 8007d04:	200000e8 	.word	0x200000e8
 8007d08:	200000e6 	.word	0x200000e6
 8007d0c:	08010454 	.word	0x08010454
 8007d10:	08010464 	.word	0x08010464
 8007d14:	08010470 	.word	0x08010470
 8007d18:	200000f0 	.word	0x200000f0
 8007d1c:	200000f4 	.word	0x200000f4
 8007d20:	200000fc 	.word	0x200000fc
 8007d24:	200000fa 	.word	0x200000fa
 8007d28:	20006950 	.word	0x20006950
 8007d2c:	08010490 	.word	0x08010490
 8007d30:	080104b8 	.word	0x080104b8
 8007d34:	080104e4 	.word	0x080104e4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	8b1a      	ldrh	r2, [r3, #24]
 8007d3c:	4b94      	ldr	r3, [pc, #592]	; (8007f90 <tcp_input+0x524>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d13a      	bne.n	8007dbe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	8ada      	ldrh	r2, [r3, #22]
 8007d4c:	4b90      	ldr	r3, [pc, #576]	; (8007f90 <tcp_input+0x524>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d132      	bne.n	8007dbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4b8d      	ldr	r3, [pc, #564]	; (8007f94 <tcp_input+0x528>)
 8007d5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d12c      	bne.n	8007dbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4b8a      	ldr	r3, [pc, #552]	; (8007f94 <tcp_input+0x528>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d126      	bne.n	8007dbe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d106      	bne.n	8007d88 <tcp_input+0x31c>
 8007d7a:	4b87      	ldr	r3, [pc, #540]	; (8007f98 <tcp_input+0x52c>)
 8007d7c:	f240 120d 	movw	r2, #269	; 0x10d
 8007d80:	4986      	ldr	r1, [pc, #536]	; (8007f9c <tcp_input+0x530>)
 8007d82:	4887      	ldr	r0, [pc, #540]	; (8007fa0 <tcp_input+0x534>)
 8007d84:	f006 fa4a 	bl	800e21c <iprintf>
      if (prev != NULL) {
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <tcp_input+0x338>
        prev->next = pcb->next;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007d96:	4b83      	ldr	r3, [pc, #524]	; (8007fa4 <tcp_input+0x538>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007d9e:	4a81      	ldr	r2, [pc, #516]	; (8007fa4 <tcp_input+0x538>)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d111      	bne.n	8007dd2 <tcp_input+0x366>
 8007dae:	4b7a      	ldr	r3, [pc, #488]	; (8007f98 <tcp_input+0x52c>)
 8007db0:	f240 1215 	movw	r2, #277	; 0x115
 8007db4:	497c      	ldr	r1, [pc, #496]	; (8007fa8 <tcp_input+0x53c>)
 8007db6:	487a      	ldr	r0, [pc, #488]	; (8007fa0 <tcp_input+0x534>)
 8007db8:	f006 fa30 	bl	800e21c <iprintf>
      break;
 8007dbc:	e009      	b.n	8007dd2 <tcp_input+0x366>
    }
    prev = pcb;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f47f af5e 	bne.w	8007c8c <tcp_input+0x220>
 8007dd0:	e000      	b.n	8007dd4 <tcp_input+0x368>
      break;
 8007dd2:	bf00      	nop
  }

  if (pcb == NULL) {
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 8095 	bne.w	8007f06 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ddc:	4b73      	ldr	r3, [pc, #460]	; (8007fac <tcp_input+0x540>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e03f      	b.n	8007e64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	7d1b      	ldrb	r3, [r3, #20]
 8007de8:	2b0a      	cmp	r3, #10
 8007dea:	d006      	beq.n	8007dfa <tcp_input+0x38e>
 8007dec:	4b6a      	ldr	r3, [pc, #424]	; (8007f98 <tcp_input+0x52c>)
 8007dee:	f240 121f 	movw	r2, #287	; 0x11f
 8007df2:	496f      	ldr	r1, [pc, #444]	; (8007fb0 <tcp_input+0x544>)
 8007df4:	486a      	ldr	r0, [pc, #424]	; (8007fa0 <tcp_input+0x534>)
 8007df6:	f006 fa11 	bl	800e21c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	7a1b      	ldrb	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	7a1a      	ldrb	r2, [r3, #8]
 8007e06:	4b63      	ldr	r3, [pc, #396]	; (8007f94 <tcp_input+0x528>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d122      	bne.n	8007e5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	8b1a      	ldrh	r2, [r3, #24]
 8007e1a:	4b5d      	ldr	r3, [pc, #372]	; (8007f90 <tcp_input+0x524>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d11b      	bne.n	8007e5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	8ada      	ldrh	r2, [r3, #22]
 8007e2a:	4b59      	ldr	r3, [pc, #356]	; (8007f90 <tcp_input+0x524>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	885b      	ldrh	r3, [r3, #2]
 8007e30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d113      	bne.n	8007e5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	4b56      	ldr	r3, [pc, #344]	; (8007f94 <tcp_input+0x528>)
 8007e3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d10d      	bne.n	8007e5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <tcp_input+0x528>)
 8007e48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d107      	bne.n	8007e5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007e4e:	69b8      	ldr	r0, [r7, #24]
 8007e50:	f000 fb54 	bl	80084fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fd ffed 	bl	8005e34 <pbuf_free>
        return;
 8007e5a:	e1f0      	b.n	800823e <tcp_input+0x7d2>
        continue;
 8007e5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1bc      	bne.n	8007de4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e6e:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <tcp_input+0x548>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e02a      	b.n	8007ecc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	7a1b      	ldrb	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	7a1a      	ldrb	r2, [r3, #8]
 8007e82:	4b44      	ldr	r3, [pc, #272]	; (8007f94 <tcp_input+0x528>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d002      	beq.n	8007e98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	61fb      	str	r3, [r7, #28]
        continue;
 8007e96:	e016      	b.n	8007ec6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	8ada      	ldrh	r2, [r3, #22]
 8007e9c:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <tcp_input+0x524>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	885b      	ldrh	r3, [r3, #2]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d10c      	bne.n	8007ec2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <tcp_input+0x528>)
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d00f      	beq.n	8007ed4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <tcp_input+0x46a>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1d1      	bne.n	8007e76 <tcp_input+0x40a>
 8007ed2:	e000      	b.n	8007ed6 <tcp_input+0x46a>
            break;
 8007ed4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d014      	beq.n	8007f06 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007eea:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <tcp_input+0x548>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007ef2:	4a30      	ldr	r2, [pc, #192]	; (8007fb4 <tcp_input+0x548>)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f000 fa01 	bl	8008300 <tcp_listen_input>
      }
      pbuf_free(p);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fd ff98 	bl	8005e34 <pbuf_free>
      return;
 8007f04:	e19b      	b.n	800823e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8160 	beq.w	80081ce <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007f0e:	4b2a      	ldr	r3, [pc, #168]	; (8007fb8 <tcp_input+0x54c>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	891a      	ldrh	r2, [r3, #8]
 8007f18:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <tcp_input+0x54c>)
 8007f1a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007f1c:	4a26      	ldr	r2, [pc, #152]	; (8007fb8 <tcp_input+0x54c>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007f22:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <tcp_input+0x524>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <tcp_input+0x54c>)
 8007f28:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8007f2a:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <tcp_input+0x550>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007f30:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <tcp_input+0x554>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007f36:	4b23      	ldr	r3, [pc, #140]	; (8007fc4 <tcp_input+0x558>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007f3c:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <tcp_input+0x55c>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d006      	beq.n	8007f56 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	7b5b      	ldrb	r3, [r3, #13]
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d038      	beq.n	8007fd0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f5e:	69b8      	ldr	r0, [r7, #24]
 8007f60:	f7ff f940 	bl	80071e4 <tcp_process_refused_data>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f113 0f0d 	cmn.w	r3, #13
 8007f6a:	d007      	beq.n	8007f7c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02d      	beq.n	8007fd0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f74:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <tcp_input+0x560>)
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d029      	beq.n	8007fd0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8104 	bne.w	800818e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007f86:	69b8      	ldr	r0, [r7, #24]
 8007f88:	f003 f9e2 	bl	800b350 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007f8c:	e0ff      	b.n	800818e <tcp_input+0x722>
 8007f8e:	bf00      	nop
 8007f90:	200000e0 	.word	0x200000e0
 8007f94:	200033cc 	.word	0x200033cc
 8007f98:	080103e0 	.word	0x080103e0
 8007f9c:	0801050c 	.word	0x0801050c
 8007fa0:	0801042c 	.word	0x0801042c
 8007fa4:	20006950 	.word	0x20006950
 8007fa8:	08010538 	.word	0x08010538
 8007fac:	20006960 	.word	0x20006960
 8007fb0:	08010564 	.word	0x08010564
 8007fb4:	20006958 	.word	0x20006958
 8007fb8:	200000cc 	.word	0x200000cc
 8007fbc:	20000100 	.word	0x20000100
 8007fc0:	200000fd 	.word	0x200000fd
 8007fc4:	200000f8 	.word	0x200000f8
 8007fc8:	200000fc 	.word	0x200000fc
 8007fcc:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8007fd0:	4a9c      	ldr	r2, [pc, #624]	; (8008244 <tcp_input+0x7d8>)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007fd6:	69b8      	ldr	r0, [r7, #24]
 8007fd8:	f000 fb0c 	bl	80085f4 <tcp_process>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007fe0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fe4:	f113 0f0d 	cmn.w	r3, #13
 8007fe8:	f000 80d3 	beq.w	8008192 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007fec:	4b96      	ldr	r3, [pc, #600]	; (8008248 <tcp_input+0x7dc>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d015      	beq.n	8008024 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <tcp_input+0x5a8>
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	6912      	ldr	r2, [r2, #16]
 800800c:	f06f 010d 	mvn.w	r1, #13
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008014:	69b9      	ldr	r1, [r7, #24]
 8008016:	488d      	ldr	r0, [pc, #564]	; (800824c <tcp_input+0x7e0>)
 8008018:	f7ff fbb0 	bl	800777c <tcp_pcb_remove>
        tcp_free(pcb);
 800801c:	69b8      	ldr	r0, [r7, #24]
 800801e:	f7fe f9a9 	bl	8006374 <tcp_free>
 8008022:	e0c1      	b.n	80081a8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008028:	4b89      	ldr	r3, [pc, #548]	; (8008250 <tcp_input+0x7e4>)
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01d      	beq.n	800806c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008030:	4b87      	ldr	r3, [pc, #540]	; (8008250 <tcp_input+0x7e4>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <tcp_input+0x5ea>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	6910      	ldr	r0, [r2, #16]
 800804a:	89fa      	ldrh	r2, [r7, #14]
 800804c:	69b9      	ldr	r1, [r7, #24]
 800804e:	4798      	blx	r3
 8008050:	4603      	mov	r3, r0
 8008052:	74fb      	strb	r3, [r7, #19]
 8008054:	e001      	b.n	800805a <tcp_input+0x5ee>
 8008056:	2300      	movs	r3, #0
 8008058:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800805a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800805e:	f113 0f0d 	cmn.w	r3, #13
 8008062:	f000 8098 	beq.w	8008196 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008066:	4b7a      	ldr	r3, [pc, #488]	; (8008250 <tcp_input+0x7e4>)
 8008068:	2200      	movs	r2, #0
 800806a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800806c:	69b8      	ldr	r0, [r7, #24]
 800806e:	f000 f907 	bl	8008280 <tcp_input_delayed_close>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	f040 8090 	bne.w	800819a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800807a:	4b76      	ldr	r3, [pc, #472]	; (8008254 <tcp_input+0x7e8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d041      	beq.n	8008106 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008086:	2b00      	cmp	r3, #0
 8008088:	d006      	beq.n	8008098 <tcp_input+0x62c>
 800808a:	4b73      	ldr	r3, [pc, #460]	; (8008258 <tcp_input+0x7ec>)
 800808c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008090:	4972      	ldr	r1, [pc, #456]	; (800825c <tcp_input+0x7f0>)
 8008092:	4873      	ldr	r0, [pc, #460]	; (8008260 <tcp_input+0x7f4>)
 8008094:	f006 f8c2 	bl	800e21c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	8b5b      	ldrh	r3, [r3, #26]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80080a4:	4b6b      	ldr	r3, [pc, #428]	; (8008254 <tcp_input+0x7e8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd fec3 	bl	8005e34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80080ae:	69b8      	ldr	r0, [r7, #24]
 80080b0:	f7fe fc40 	bl	8006934 <tcp_abort>
            goto aborted;
 80080b4:	e078      	b.n	80081a8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00c      	beq.n	80080da <tcp_input+0x66e>
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	6918      	ldr	r0, [r3, #16]
 80080ca:	4b62      	ldr	r3, [pc, #392]	; (8008254 <tcp_input+0x7e8>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	69b9      	ldr	r1, [r7, #24]
 80080d2:	47a0      	blx	r4
 80080d4:	4603      	mov	r3, r0
 80080d6:	74fb      	strb	r3, [r7, #19]
 80080d8:	e008      	b.n	80080ec <tcp_input+0x680>
 80080da:	4b5e      	ldr	r3, [pc, #376]	; (8008254 <tcp_input+0x7e8>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	2000      	movs	r0, #0
 80080e4:	f7ff f952 	bl	800738c <tcp_recv_null>
 80080e8:	4603      	mov	r3, r0
 80080ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80080ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080f0:	f113 0f0d 	cmn.w	r3, #13
 80080f4:	d053      	beq.n	800819e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80080f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80080fe:	4b55      	ldr	r3, [pc, #340]	; (8008254 <tcp_input+0x7e8>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008106:	4b50      	ldr	r3, [pc, #320]	; (8008248 <tcp_input+0x7dc>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d030      	beq.n	8008174 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811e:	7b5a      	ldrb	r2, [r3, #13]
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008124:	f042 0220 	orr.w	r2, r2, #32
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	735a      	strb	r2, [r3, #13]
 800812c:	e022      	b.n	8008174 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008132:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008136:	d005      	beq.n	8008144 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	3301      	adds	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <tcp_input+0x6fa>
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6918      	ldr	r0, [r3, #16]
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	69b9      	ldr	r1, [r7, #24]
 800815e:	47a0      	blx	r4
 8008160:	4603      	mov	r3, r0
 8008162:	74fb      	strb	r3, [r7, #19]
 8008164:	e001      	b.n	800816a <tcp_input+0x6fe>
 8008166:	2300      	movs	r3, #0
 8008168:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800816a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800816e:	f113 0f0d 	cmn.w	r3, #13
 8008172:	d016      	beq.n	80081a2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008174:	4b33      	ldr	r3, [pc, #204]	; (8008244 <tcp_input+0x7d8>)
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800817a:	69b8      	ldr	r0, [r7, #24]
 800817c:	f000 f880 	bl	8008280 <tcp_input_delayed_close>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008186:	69b8      	ldr	r0, [r7, #24]
 8008188:	f002 fabe 	bl	800a708 <tcp_output>
 800818c:	e00c      	b.n	80081a8 <tcp_input+0x73c>
        goto aborted;
 800818e:	bf00      	nop
 8008190:	e00a      	b.n	80081a8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008192:	bf00      	nop
 8008194:	e008      	b.n	80081a8 <tcp_input+0x73c>
              goto aborted;
 8008196:	bf00      	nop
 8008198:	e006      	b.n	80081a8 <tcp_input+0x73c>
          goto aborted;
 800819a:	bf00      	nop
 800819c:	e004      	b.n	80081a8 <tcp_input+0x73c>
            goto aborted;
 800819e:	bf00      	nop
 80081a0:	e002      	b.n	80081a8 <tcp_input+0x73c>
              goto aborted;
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <tcp_input+0x73c>
          goto aborted;
 80081a6:	bf00      	nop
    tcp_input_pcb = NULL;
 80081a8:	4b26      	ldr	r3, [pc, #152]	; (8008244 <tcp_input+0x7d8>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80081ae:	4b29      	ldr	r3, [pc, #164]	; (8008254 <tcp_input+0x7e8>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80081b4:	4b2b      	ldr	r3, [pc, #172]	; (8008264 <tcp_input+0x7f8>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d03f      	beq.n	800823c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80081bc:	4b29      	ldr	r3, [pc, #164]	; (8008264 <tcp_input+0x7f8>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd fe37 	bl	8005e34 <pbuf_free>
      inseg.p = NULL;
 80081c6:	4b27      	ldr	r3, [pc, #156]	; (8008264 <tcp_input+0x7f8>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80081cc:	e036      	b.n	800823c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80081ce:	4b26      	ldr	r3, [pc, #152]	; (8008268 <tcp_input+0x7fc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	899b      	ldrh	r3, [r3, #12]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fc fb97 	bl	800490a <lwip_htons>
 80081dc:	4603      	mov	r3, r0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d118      	bne.n	800821a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081e8:	4b20      	ldr	r3, [pc, #128]	; (800826c <tcp_input+0x800>)
 80081ea:	6819      	ldr	r1, [r3, #0]
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <tcp_input+0x804>)
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <tcp_input+0x808>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <tcp_input+0x7fc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008200:	4a19      	ldr	r2, [pc, #100]	; (8008268 <tcp_input+0x7fc>)
 8008202:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008204:	8812      	ldrh	r2, [r2, #0]
 8008206:	b292      	uxth	r2, r2
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <tcp_input+0x80c>)
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	4b1a      	ldr	r3, [pc, #104]	; (800827c <tcp_input+0x810>)
 8008212:	4602      	mov	r2, r0
 8008214:	2000      	movs	r0, #0
 8008216:	f003 f849 	bl	800b2ac <tcp_rst>
    pbuf_free(p);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fd fe0a 	bl	8005e34 <pbuf_free>
  return;
 8008220:	e00c      	b.n	800823c <tcp_input+0x7d0>
    goto dropped;
 8008222:	bf00      	nop
 8008224:	e006      	b.n	8008234 <tcp_input+0x7c8>
dropped:
 8008226:	bf00      	nop
 8008228:	e004      	b.n	8008234 <tcp_input+0x7c8>
    goto dropped;
 800822a:	bf00      	nop
 800822c:	e002      	b.n	8008234 <tcp_input+0x7c8>
      goto dropped;
 800822e:	bf00      	nop
 8008230:	e000      	b.n	8008234 <tcp_input+0x7c8>
      goto dropped;
 8008232:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7fd fdfd 	bl	8005e34 <pbuf_free>
 800823a:	e000      	b.n	800823e <tcp_input+0x7d2>
  return;
 800823c:	bf00      	nop
}
 800823e:	3724      	adds	r7, #36	; 0x24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd90      	pop	{r4, r7, pc}
 8008244:	20006964 	.word	0x20006964
 8008248:	200000fd 	.word	0x200000fd
 800824c:	20006950 	.word	0x20006950
 8008250:	200000f8 	.word	0x200000f8
 8008254:	20000100 	.word	0x20000100
 8008258:	080103e0 	.word	0x080103e0
 800825c:	08010594 	.word	0x08010594
 8008260:	0801042c 	.word	0x0801042c
 8008264:	200000cc 	.word	0x200000cc
 8008268:	200000e0 	.word	0x200000e0
 800826c:	200000f4 	.word	0x200000f4
 8008270:	200000fa 	.word	0x200000fa
 8008274:	200000f0 	.word	0x200000f0
 8008278:	200033dc 	.word	0x200033dc
 800827c:	200033e0 	.word	0x200033e0

08008280 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <tcp_input_delayed_close+0x1c>
 800828e:	4b17      	ldr	r3, [pc, #92]	; (80082ec <tcp_input_delayed_close+0x6c>)
 8008290:	f240 225a 	movw	r2, #602	; 0x25a
 8008294:	4916      	ldr	r1, [pc, #88]	; (80082f0 <tcp_input_delayed_close+0x70>)
 8008296:	4817      	ldr	r0, [pc, #92]	; (80082f4 <tcp_input_delayed_close+0x74>)
 8008298:	f005 ffc0 	bl	800e21c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800829c:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <tcp_input_delayed_close+0x78>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01c      	beq.n	80082e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8b5b      	ldrh	r3, [r3, #26]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <tcp_input_delayed_close+0x50>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6912      	ldr	r2, [r2, #16]
 80082c8:	f06f 010e 	mvn.w	r1, #14
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	480a      	ldr	r0, [pc, #40]	; (80082fc <tcp_input_delayed_close+0x7c>)
 80082d4:	f7ff fa52 	bl	800777c <tcp_pcb_remove>
    tcp_free(pcb);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7fe f84b 	bl	8006374 <tcp_free>
    return 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	080103e0 	.word	0x080103e0
 80082f0:	080105b0 	.word	0x080105b0
 80082f4:	0801042c 	.word	0x0801042c
 80082f8:	200000fd 	.word	0x200000fd
 80082fc:	20006950 	.word	0x20006950

08008300 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b08b      	sub	sp, #44	; 0x2c
 8008304:	af04      	add	r7, sp, #16
 8008306:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008308:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <tcp_listen_input+0x1c8>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 80d3 	bne.w	80084bc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <tcp_listen_input+0x2a>
 800831c:	4b6b      	ldr	r3, [pc, #428]	; (80084cc <tcp_listen_input+0x1cc>)
 800831e:	f240 2281 	movw	r2, #641	; 0x281
 8008322:	496b      	ldr	r1, [pc, #428]	; (80084d0 <tcp_listen_input+0x1d0>)
 8008324:	486b      	ldr	r0, [pc, #428]	; (80084d4 <tcp_listen_input+0x1d4>)
 8008326:	f005 ff79 	bl	800e21c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <tcp_listen_input+0x1c8>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	d019      	beq.n	800836a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008336:	4b68      	ldr	r3, [pc, #416]	; (80084d8 <tcp_listen_input+0x1d8>)
 8008338:	6819      	ldr	r1, [r3, #0]
 800833a:	4b68      	ldr	r3, [pc, #416]	; (80084dc <tcp_listen_input+0x1dc>)
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	4b67      	ldr	r3, [pc, #412]	; (80084e0 <tcp_listen_input+0x1e0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008346:	4b67      	ldr	r3, [pc, #412]	; (80084e4 <tcp_listen_input+0x1e4>)
 8008348:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800834e:	4a65      	ldr	r2, [pc, #404]	; (80084e4 <tcp_listen_input+0x1e4>)
 8008350:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008352:	8812      	ldrh	r2, [r2, #0]
 8008354:	b292      	uxth	r2, r2
 8008356:	9202      	str	r2, [sp, #8]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	4b63      	ldr	r3, [pc, #396]	; (80084e8 <tcp_listen_input+0x1e8>)
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	4b63      	ldr	r3, [pc, #396]	; (80084ec <tcp_listen_input+0x1ec>)
 8008360:	4602      	mov	r2, r0
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f002 ffa2 	bl	800b2ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008368:	e0aa      	b.n	80084c0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800836a:	4b57      	ldr	r3, [pc, #348]	; (80084c8 <tcp_listen_input+0x1c8>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80a4 	beq.w	80084c0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7d5b      	ldrb	r3, [r3, #21]
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff f929 	bl	80075d4 <tcp_alloc>
 8008382:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d111      	bne.n	80083ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <tcp_listen_input+0xa8>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6910      	ldr	r0, [r2, #16]
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	2100      	movs	r1, #0
 80083a0:	4798      	blx	r3
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]
      return;
 80083a6:	e08c      	b.n	80084c2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80083a8:	23f0      	movs	r3, #240	; 0xf0
 80083aa:	73bb      	strb	r3, [r7, #14]
      return;
 80083ac:	e089      	b.n	80084c2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80083ae:	4b50      	ldr	r3, [pc, #320]	; (80084f0 <tcp_listen_input+0x1f0>)
 80083b0:	695a      	ldr	r2, [r3, #20]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80083b6:	4b4e      	ldr	r3, [pc, #312]	; (80084f0 <tcp_listen_input+0x1f0>)
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8ada      	ldrh	r2, [r3, #22]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80083c6:	4b47      	ldr	r3, [pc, #284]	; (80084e4 <tcp_listen_input+0x1e4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2203      	movs	r2, #3
 80083d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80083d8:	4b41      	ldr	r3, [pc, #260]	; (80084e0 <tcp_listen_input+0x1e0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80083ea:	6978      	ldr	r0, [r7, #20]
 80083ec:	f7ff fa5a 	bl	80078a4 <tcp_next_iss>
 80083f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800840a:	4b35      	ldr	r3, [pc, #212]	; (80084e0 <tcp_listen_input+0x1e0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	1e5a      	subs	r2, r3, #1
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7a5b      	ldrb	r3, [r3, #9]
 8008426:	f003 030c 	and.w	r3, r3, #12
 800842a:	b2da      	uxtb	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	7a1a      	ldrb	r2, [r3, #8]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008438:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <tcp_listen_input+0x1f4>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	4a2c      	ldr	r2, [pc, #176]	; (80084f4 <tcp_listen_input+0x1f4>)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	f003 f8f3 	bl	800b630 <tcp_timer_needed>
 800844a:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <tcp_listen_input+0x1f8>)
 800844c:	2201      	movs	r2, #1
 800844e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008450:	6978      	ldr	r0, [r7, #20]
 8008452:	f001 fd8f 	bl	8009f74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008456:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <tcp_listen_input+0x1e4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	89db      	ldrh	r3, [r3, #14]
 800845c:	b29a      	uxth	r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f004 fca7 	bl	800cdcc <ip4_route>
 800847e:	4601      	mov	r1, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3304      	adds	r3, #4
 8008484:	461a      	mov	r2, r3
 8008486:	4620      	mov	r0, r4
 8008488:	f7ff fa32 	bl	80078f0 <tcp_eff_send_mss_netif>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008494:	2112      	movs	r1, #18
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f002 f848 	bl	800a52c <tcp_enqueue_flags>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80084a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80084a8:	2100      	movs	r1, #0
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f7fe f984 	bl	80067b8 <tcp_abandon>
      return;
 80084b0:	e007      	b.n	80084c2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80084b2:	6978      	ldr	r0, [r7, #20]
 80084b4:	f002 f928 	bl	800a708 <tcp_output>
  return;
 80084b8:	bf00      	nop
 80084ba:	e001      	b.n	80084c0 <tcp_listen_input+0x1c0>
    return;
 80084bc:	bf00      	nop
 80084be:	e000      	b.n	80084c2 <tcp_listen_input+0x1c2>
  return;
 80084c0:	bf00      	nop
}
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd90      	pop	{r4, r7, pc}
 80084c8:	200000fc 	.word	0x200000fc
 80084cc:	080103e0 	.word	0x080103e0
 80084d0:	080105d8 	.word	0x080105d8
 80084d4:	0801042c 	.word	0x0801042c
 80084d8:	200000f4 	.word	0x200000f4
 80084dc:	200000fa 	.word	0x200000fa
 80084e0:	200000f0 	.word	0x200000f0
 80084e4:	200000e0 	.word	0x200000e0
 80084e8:	200033dc 	.word	0x200033dc
 80084ec:	200033e0 	.word	0x200033e0
 80084f0:	200033cc 	.word	0x200033cc
 80084f4:	20006950 	.word	0x20006950
 80084f8:	2000694c 	.word	0x2000694c

080084fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af04      	add	r7, sp, #16
 8008502:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008504:	4b30      	ldr	r3, [pc, #192]	; (80085c8 <tcp_timewait_input+0xcc>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d154      	bne.n	80085ba <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <tcp_timewait_input+0x28>
 8008516:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <tcp_timewait_input+0xd0>)
 8008518:	f240 22ee 	movw	r2, #750	; 0x2ee
 800851c:	492c      	ldr	r1, [pc, #176]	; (80085d0 <tcp_timewait_input+0xd4>)
 800851e:	482d      	ldr	r0, [pc, #180]	; (80085d4 <tcp_timewait_input+0xd8>)
 8008520:	f005 fe7c 	bl	800e21c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008524:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <tcp_timewait_input+0xcc>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d02a      	beq.n	8008586 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008530:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <tcp_timewait_input+0xdc>)
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	db2d      	blt.n	800859a <tcp_timewait_input+0x9e>
 800853e:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <tcp_timewait_input+0xdc>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800854a:	440b      	add	r3, r1
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	dc23      	bgt.n	800859a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008552:	4b22      	ldr	r3, [pc, #136]	; (80085dc <tcp_timewait_input+0xe0>)
 8008554:	6819      	ldr	r1, [r3, #0]
 8008556:	4b22      	ldr	r3, [pc, #136]	; (80085e0 <tcp_timewait_input+0xe4>)
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <tcp_timewait_input+0xdc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008562:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <tcp_timewait_input+0xe8>)
 8008564:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800856a:	4a1e      	ldr	r2, [pc, #120]	; (80085e4 <tcp_timewait_input+0xe8>)
 800856c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800856e:	8812      	ldrh	r2, [r2, #0]
 8008570:	b292      	uxth	r2, r2
 8008572:	9202      	str	r2, [sp, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <tcp_timewait_input+0xec>)
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4b1c      	ldr	r3, [pc, #112]	; (80085ec <tcp_timewait_input+0xf0>)
 800857c:	4602      	mov	r2, r0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f002 fe94 	bl	800b2ac <tcp_rst>
      return;
 8008584:	e01c      	b.n	80085c0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8008586:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <tcp_timewait_input+0xcc>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <tcp_timewait_input+0xf4>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800859a:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <tcp_timewait_input+0xe4>)
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00d      	beq.n	80085be <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8b5b      	ldrh	r3, [r3, #26]
 80085a6:	f043 0302 	orr.w	r3, r3, #2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f002 f8a9 	bl	800a708 <tcp_output>
  }
  return;
 80085b6:	bf00      	nop
 80085b8:	e001      	b.n	80085be <tcp_timewait_input+0xc2>
    return;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <tcp_timewait_input+0xc4>
  return;
 80085be:	bf00      	nop
}
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200000fc 	.word	0x200000fc
 80085cc:	080103e0 	.word	0x080103e0
 80085d0:	080105f8 	.word	0x080105f8
 80085d4:	0801042c 	.word	0x0801042c
 80085d8:	200000f0 	.word	0x200000f0
 80085dc:	200000f4 	.word	0x200000f4
 80085e0:	200000fa 	.word	0x200000fa
 80085e4:	200000e0 	.word	0x200000e0
 80085e8:	200033dc 	.word	0x200033dc
 80085ec:	200033e0 	.word	0x200033e0
 80085f0:	20006954 	.word	0x20006954

080085f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b08d      	sub	sp, #52	; 0x34
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <tcp_process+0x24>
 800860a:	4ba5      	ldr	r3, [pc, #660]	; (80088a0 <tcp_process+0x2ac>)
 800860c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008610:	49a4      	ldr	r1, [pc, #656]	; (80088a4 <tcp_process+0x2b0>)
 8008612:	48a5      	ldr	r0, [pc, #660]	; (80088a8 <tcp_process+0x2b4>)
 8008614:	f005 fe02 	bl	800e21c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008618:	4ba4      	ldr	r3, [pc, #656]	; (80088ac <tcp_process+0x2b8>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	d04e      	beq.n	80086c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7d1b      	ldrb	r3, [r3, #20]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d108      	bne.n	800863e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008630:	4b9f      	ldr	r3, [pc, #636]	; (80088b0 <tcp_process+0x2bc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d123      	bne.n	8008680 <tcp_process+0x8c>
        acceptable = 1;
 8008638:	2301      	movs	r3, #1
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e020      	b.n	8008680 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008642:	4b9c      	ldr	r3, [pc, #624]	; (80088b4 <tcp_process+0x2c0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d102      	bne.n	8008650 <tcp_process+0x5c>
        acceptable = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	77fb      	strb	r3, [r7, #31]
 800864e:	e017      	b.n	8008680 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008650:	4b98      	ldr	r3, [pc, #608]	; (80088b4 <tcp_process+0x2c0>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	db10      	blt.n	8008680 <tcp_process+0x8c>
 800865e:	4b95      	ldr	r3, [pc, #596]	; (80088b4 <tcp_process+0x2c0>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800866a:	440b      	add	r3, r1
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	dc06      	bgt.n	8008680 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	8b5b      	ldrh	r3, [r3, #26]
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	b29a      	uxth	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008680:	7ffb      	ldrb	r3, [r7, #31]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01b      	beq.n	80086be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <tcp_process+0xa8>
 800868e:	4b84      	ldr	r3, [pc, #528]	; (80088a0 <tcp_process+0x2ac>)
 8008690:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008694:	4988      	ldr	r1, [pc, #544]	; (80088b8 <tcp_process+0x2c4>)
 8008696:	4884      	ldr	r0, [pc, #528]	; (80088a8 <tcp_process+0x2b4>)
 8008698:	f005 fdc0 	bl	800e21c <iprintf>
      recv_flags |= TF_RESET;
 800869c:	4b87      	ldr	r3, [pc, #540]	; (80088bc <tcp_process+0x2c8>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f043 0308 	orr.w	r3, r3, #8
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	4b85      	ldr	r3, [pc, #532]	; (80088bc <tcp_process+0x2c8>)
 80086a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8b5b      	ldrh	r3, [r3, #26]
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80086b8:	f06f 030d 	mvn.w	r3, #13
 80086bc:	e37a      	b.n	8008db4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	e378      	b.n	8008db4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80086c2:	4b7a      	ldr	r3, [pc, #488]	; (80088ac <tcp_process+0x2b8>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <tcp_process+0xfc>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7d1b      	ldrb	r3, [r3, #20]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d00c      	beq.n	80086f0 <tcp_process+0xfc>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	7d1b      	ldrb	r3, [r3, #20]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d008      	beq.n	80086f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	8b5b      	ldrh	r3, [r3, #26]
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e361      	b.n	8008db4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	8b5b      	ldrh	r3, [r3, #26]
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80086fc:	4b70      	ldr	r3, [pc, #448]	; (80088c0 <tcp_process+0x2cc>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fc2d 	bl	8009f74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7d1b      	ldrb	r3, [r3, #20]
 800871e:	3b02      	subs	r3, #2
 8008720:	2b07      	cmp	r3, #7
 8008722:	f200 8337 	bhi.w	8008d94 <tcp_process+0x7a0>
 8008726:	a201      	add	r2, pc, #4	; (adr r2, 800872c <tcp_process+0x138>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	0800874d 	.word	0x0800874d
 8008730:	0800897d 	.word	0x0800897d
 8008734:	08008af5 	.word	0x08008af5
 8008738:	08008b1f 	.word	0x08008b1f
 800873c:	08008c43 	.word	0x08008c43
 8008740:	08008af5 	.word	0x08008af5
 8008744:	08008ccf 	.word	0x08008ccf
 8008748:	08008d5f 	.word	0x08008d5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800874c:	4b57      	ldr	r3, [pc, #348]	; (80088ac <tcp_process+0x2b8>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80e4 	beq.w	8008922 <tcp_process+0x32e>
 800875a:	4b54      	ldr	r3, [pc, #336]	; (80088ac <tcp_process+0x2b8>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80dd 	beq.w	8008922 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	4b50      	ldr	r3, [pc, #320]	; (80088b0 <tcp_process+0x2bc>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	f040 80d5 	bne.w	8008922 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008778:	4b4e      	ldr	r3, [pc, #312]	; (80088b4 <tcp_process+0x2c0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800878a:	4b49      	ldr	r3, [pc, #292]	; (80088b0 <tcp_process+0x2bc>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008792:	4b4c      	ldr	r3, [pc, #304]	; (80088c4 <tcp_process+0x2d0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	89db      	ldrh	r3, [r3, #14]
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80087ac:	4b41      	ldr	r3, [pc, #260]	; (80088b4 <tcp_process+0x2c0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2204      	movs	r2, #4
 80087ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f004 fb01 	bl	800cdcc <ip4_route>
 80087ca:	4601      	mov	r1, r0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	461a      	mov	r2, r3
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff f88c 	bl	80078f0 <tcp_eff_send_mss_netif>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087e4:	009a      	lsls	r2, r3, #2
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf38      	it	cc
 80087f4:	460b      	movcc	r3, r1
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d204      	bcs.n	8008804 <tcp_process+0x210>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	b29b      	uxth	r3, r3
 8008802:	e00d      	b.n	8008820 <tcp_process+0x22c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	f241 121c 	movw	r2, #4380	; 0x111c
 800880e:	4293      	cmp	r3, r2
 8008810:	d904      	bls.n	800881c <tcp_process+0x228>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	e001      	b.n	8008820 <tcp_process+0x22c>
 800881c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <tcp_process+0x24a>
 8008830:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <tcp_process+0x2ac>)
 8008832:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008836:	4924      	ldr	r1, [pc, #144]	; (80088c8 <tcp_process+0x2d4>)
 8008838:	481b      	ldr	r0, [pc, #108]	; (80088a8 <tcp_process+0x2b4>)
 800883a:	f005 fcef 	bl	800e21c <iprintf>
        --pcb->snd_queuelen;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d111      	bne.n	800887e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800885e:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <tcp_process+0x280>
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <tcp_process+0x2ac>)
 8008868:	f44f 725d 	mov.w	r2, #884	; 0x374
 800886c:	4917      	ldr	r1, [pc, #92]	; (80088cc <tcp_process+0x2d8>)
 800886e:	480e      	ldr	r0, [pc, #56]	; (80088a8 <tcp_process+0x2b4>)
 8008870:	f005 fcd4 	bl	800e21c <iprintf>
          pcb->unsent = rseg->next;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	66da      	str	r2, [r3, #108]	; 0x6c
 800887c:	e003      	b.n	8008886 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008886:	6938      	ldr	r0, [r7, #16]
 8008888:	f7fe fd3c 	bl	8007304 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008890:	2b00      	cmp	r3, #0
 8008892:	d11d      	bne.n	80088d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889a:	861a      	strh	r2, [r3, #48]	; 0x30
 800889c:	e01f      	b.n	80088de <tcp_process+0x2ea>
 800889e:	bf00      	nop
 80088a0:	080103e0 	.word	0x080103e0
 80088a4:	08010618 	.word	0x08010618
 80088a8:	0801042c 	.word	0x0801042c
 80088ac:	200000fc 	.word	0x200000fc
 80088b0:	200000f4 	.word	0x200000f4
 80088b4:	200000f0 	.word	0x200000f0
 80088b8:	08010634 	.word	0x08010634
 80088bc:	200000fd 	.word	0x200000fd
 80088c0:	20006954 	.word	0x20006954
 80088c4:	200000e0 	.word	0x200000e0
 80088c8:	08010654 	.word	0x08010654
 80088cc:	0801066c 	.word	0x0801066c
        } else {
          pcb->rtime = 0;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00a      	beq.n	80088fe <tcp_process+0x30a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6910      	ldr	r0, [r2, #16]
 80088f2:	2200      	movs	r2, #0
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4798      	blx	r3
 80088f8:	4603      	mov	r3, r0
 80088fa:	77bb      	strb	r3, [r7, #30]
 80088fc:	e001      	b.n	8008902 <tcp_process+0x30e>
 80088fe:	2300      	movs	r3, #0
 8008900:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8008902:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008906:	f113 0f0d 	cmn.w	r3, #13
 800890a:	d102      	bne.n	8008912 <tcp_process+0x31e>
          return ERR_ABRT;
 800890c:	f06f 030c 	mvn.w	r3, #12
 8008910:	e250      	b.n	8008db4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	8b5b      	ldrh	r3, [r3, #26]
 8008916:	f043 0302 	orr.w	r3, r3, #2
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008920:	e23a      	b.n	8008d98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008922:	4b9d      	ldr	r3, [pc, #628]	; (8008b98 <tcp_process+0x5a4>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 8234 	beq.w	8008d98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008930:	4b9a      	ldr	r3, [pc, #616]	; (8008b9c <tcp_process+0x5a8>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	4b9a      	ldr	r3, [pc, #616]	; (8008ba0 <tcp_process+0x5ac>)
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	4b9a      	ldr	r3, [pc, #616]	; (8008ba4 <tcp_process+0x5b0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008940:	4b99      	ldr	r3, [pc, #612]	; (8008ba8 <tcp_process+0x5b4>)
 8008942:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008948:	4a97      	ldr	r2, [pc, #604]	; (8008ba8 <tcp_process+0x5b4>)
 800894a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800894c:	8812      	ldrh	r2, [r2, #0]
 800894e:	b292      	uxth	r2, r2
 8008950:	9202      	str	r2, [sp, #8]
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	4b95      	ldr	r3, [pc, #596]	; (8008bac <tcp_process+0x5b8>)
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4b95      	ldr	r3, [pc, #596]	; (8008bb0 <tcp_process+0x5bc>)
 800895a:	4602      	mov	r2, r0
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fca5 	bl	800b2ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008968:	2b05      	cmp	r3, #5
 800896a:	f200 8215 	bhi.w	8008d98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f002 fa65 	bl	800ae44 <tcp_rexmit_rto>
      break;
 800897a:	e20d      	b.n	8008d98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800897c:	4b86      	ldr	r3, [pc, #536]	; (8008b98 <tcp_process+0x5a4>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 80a1 	beq.w	8008acc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800898a:	4b84      	ldr	r3, [pc, #528]	; (8008b9c <tcp_process+0x5a8>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	db7e      	blt.n	8008a98 <tcp_process+0x4a4>
 800899a:	4b80      	ldr	r3, [pc, #512]	; (8008b9c <tcp_process+0x5a8>)
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dc77      	bgt.n	8008a98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2204      	movs	r2, #4
 80089ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80089b6:	23fa      	movs	r3, #250	; 0xfa
 80089b8:	77bb      	strb	r3, [r7, #30]
 80089ba:	e01d      	b.n	80089f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <tcp_process+0x3e0>
 80089c6:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <tcp_process+0x5c0>)
 80089c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80089cc:	497a      	ldr	r1, [pc, #488]	; (8008bb8 <tcp_process+0x5c4>)
 80089ce:	487b      	ldr	r0, [pc, #492]	; (8008bbc <tcp_process+0x5c8>)
 80089d0:	f005 fc24 	bl	800e21c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <tcp_process+0x400>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6910      	ldr	r0, [r2, #16]
 80089e8:	2200      	movs	r2, #0
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	4798      	blx	r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	77bb      	strb	r3, [r7, #30]
 80089f2:	e001      	b.n	80089f8 <tcp_process+0x404>
 80089f4:	23f0      	movs	r3, #240	; 0xf0
 80089f6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80089f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008a00:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008a04:	f113 0f0d 	cmn.w	r3, #13
 8008a08:	d002      	beq.n	8008a10 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7fd ff92 	bl	8006934 <tcp_abort>
            }
            return ERR_ABRT;
 8008a10:	f06f 030c 	mvn.w	r3, #12
 8008a14:	e1ce      	b.n	8008db4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fae0 	bl	8008fdc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008a1c:	4b68      	ldr	r3, [pc, #416]	; (8008bc0 <tcp_process+0x5cc>)
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <tcp_process+0x43c>
            recv_acked--;
 8008a24:	4b66      	ldr	r3, [pc, #408]	; (8008bc0 <tcp_process+0x5cc>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	4b64      	ldr	r3, [pc, #400]	; (8008bc0 <tcp_process+0x5cc>)
 8008a2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a34:	009a      	lsls	r2, r3, #2
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf38      	it	cc
 8008a44:	460b      	movcc	r3, r1
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d204      	bcs.n	8008a54 <tcp_process+0x460>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	e00d      	b.n	8008a70 <tcp_process+0x47c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d904      	bls.n	8008a6c <tcp_process+0x478>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	e001      	b.n	8008a70 <tcp_process+0x47c>
 8008a6c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008a76:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <tcp_process+0x5d0>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d037      	beq.n	8008af2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8b5b      	ldrh	r3, [r3, #26]
 8008a86:	f043 0302 	orr.w	r3, r3, #2
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2207      	movs	r2, #7
 8008a94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008a96:	e02c      	b.n	8008af2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a98:	4b40      	ldr	r3, [pc, #256]	; (8008b9c <tcp_process+0x5a8>)
 8008a9a:	6819      	ldr	r1, [r3, #0]
 8008a9c:	4b40      	ldr	r3, [pc, #256]	; (8008ba0 <tcp_process+0x5ac>)
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4b40      	ldr	r3, [pc, #256]	; (8008ba4 <tcp_process+0x5b0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008aa8:	4b3f      	ldr	r3, [pc, #252]	; (8008ba8 <tcp_process+0x5b4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ab0:	4a3d      	ldr	r2, [pc, #244]	; (8008ba8 <tcp_process+0x5b4>)
 8008ab2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ab4:	8812      	ldrh	r2, [r2, #0]
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	9202      	str	r2, [sp, #8]
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	4b3b      	ldr	r3, [pc, #236]	; (8008bac <tcp_process+0x5b8>)
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	; (8008bb0 <tcp_process+0x5bc>)
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 fbf1 	bl	800b2ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008aca:	e167      	b.n	8008d9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <tcp_process+0x5a4>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8161 	beq.w	8008d9c <tcp_process+0x7a8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	1e5a      	subs	r2, r3, #1
 8008ae0:	4b30      	ldr	r3, [pc, #192]	; (8008ba4 <tcp_process+0x5b0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	f040 8159 	bne.w	8008d9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f002 f9cc 	bl	800ae88 <tcp_rexmit>
      break;
 8008af0:	e154      	b.n	8008d9c <tcp_process+0x7a8>
 8008af2:	e153      	b.n	8008d9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fa71 	bl	8008fdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008afa:	4b32      	ldr	r3, [pc, #200]	; (8008bc4 <tcp_process+0x5d0>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 814c 	beq.w	8008da0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8b5b      	ldrh	r3, [r3, #26]
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2207      	movs	r2, #7
 8008b1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008b1c:	e140      	b.n	8008da0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa5c 	bl	8008fdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008b24:	4b27      	ldr	r3, [pc, #156]	; (8008bc4 <tcp_process+0x5d0>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 0320 	and.w	r3, r3, #32
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d071      	beq.n	8008c14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b30:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <tcp_process+0x5a4>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d060      	beq.n	8008bfe <tcp_process+0x60a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b40:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <tcp_process+0x5a8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d15a      	bne.n	8008bfe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d156      	bne.n	8008bfe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	8b5b      	ldrh	r3, [r3, #26]
 8008b54:	f043 0302 	orr.w	r3, r3, #2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fe fdbc 	bl	80076dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <tcp_process+0x5d4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d105      	bne.n	8008b7a <tcp_process+0x586>
 8008b6e:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <tcp_process+0x5d4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	4a14      	ldr	r2, [pc, #80]	; (8008bc8 <tcp_process+0x5d4>)
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	e02e      	b.n	8008bd8 <tcp_process+0x5e4>
 8008b7a:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <tcp_process+0x5d4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e027      	b.n	8008bd2 <tcp_process+0x5de>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d11f      	bne.n	8008bcc <tcp_process+0x5d8>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	e020      	b.n	8008bd8 <tcp_process+0x5e4>
 8008b96:	bf00      	nop
 8008b98:	200000fc 	.word	0x200000fc
 8008b9c:	200000f4 	.word	0x200000f4
 8008ba0:	200000fa 	.word	0x200000fa
 8008ba4:	200000f0 	.word	0x200000f0
 8008ba8:	200000e0 	.word	0x200000e0
 8008bac:	200033dc 	.word	0x200033dc
 8008bb0:	200033e0 	.word	0x200033e0
 8008bb4:	080103e0 	.word	0x080103e0
 8008bb8:	08010680 	.word	0x08010680
 8008bbc:	0801042c 	.word	0x0801042c
 8008bc0:	200000f8 	.word	0x200000f8
 8008bc4:	200000fd 	.word	0x200000fd
 8008bc8:	20006950 	.word	0x20006950
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1d4      	bne.n	8008b82 <tcp_process+0x58e>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	4b77      	ldr	r3, [pc, #476]	; (8008dbc <tcp_process+0x7c8>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220a      	movs	r2, #10
 8008be8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008bea:	4b75      	ldr	r3, [pc, #468]	; (8008dc0 <tcp_process+0x7cc>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	4a73      	ldr	r2, [pc, #460]	; (8008dc0 <tcp_process+0x7cc>)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	f002 fd1a 	bl	800b630 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008bfc:	e0d2      	b.n	8008da4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8b5b      	ldrh	r3, [r3, #26]
 8008c02:	f043 0302 	orr.w	r3, r3, #2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2208      	movs	r2, #8
 8008c10:	751a      	strb	r2, [r3, #20]
      break;
 8008c12:	e0c7      	b.n	8008da4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008c14:	4b6b      	ldr	r3, [pc, #428]	; (8008dc4 <tcp_process+0x7d0>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 80c1 	beq.w	8008da4 <tcp_process+0x7b0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c26:	4b68      	ldr	r3, [pc, #416]	; (8008dc8 <tcp_process+0x7d4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	f040 80ba 	bne.w	8008da4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 80b5 	bne.w	8008da4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2206      	movs	r2, #6
 8008c3e:	751a      	strb	r2, [r3, #20]
      break;
 8008c40:	e0b0      	b.n	8008da4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9ca 	bl	8008fdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008c48:	4b60      	ldr	r3, [pc, #384]	; (8008dcc <tcp_process+0x7d8>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80a9 	beq.w	8008da8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8b5b      	ldrh	r3, [r3, #26]
 8008c5a:	f043 0302 	orr.w	r3, r3, #2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fe fd39 	bl	80076dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008c6a:	4b59      	ldr	r3, [pc, #356]	; (8008dd0 <tcp_process+0x7dc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d105      	bne.n	8008c80 <tcp_process+0x68c>
 8008c74:	4b56      	ldr	r3, [pc, #344]	; (8008dd0 <tcp_process+0x7dc>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	4a55      	ldr	r2, [pc, #340]	; (8008dd0 <tcp_process+0x7dc>)
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	e013      	b.n	8008ca8 <tcp_process+0x6b4>
 8008c80:	4b53      	ldr	r3, [pc, #332]	; (8008dd0 <tcp_process+0x7dc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e00c      	b.n	8008ca2 <tcp_process+0x6ae>
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d104      	bne.n	8008c9c <tcp_process+0x6a8>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	e005      	b.n	8008ca8 <tcp_process+0x6b4>
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1ef      	bne.n	8008c88 <tcp_process+0x694>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	60da      	str	r2, [r3, #12]
 8008cae:	4b43      	ldr	r3, [pc, #268]	; (8008dbc <tcp_process+0x7c8>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	220a      	movs	r2, #10
 8008cb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008cba:	4b41      	ldr	r3, [pc, #260]	; (8008dc0 <tcp_process+0x7cc>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	4a3f      	ldr	r2, [pc, #252]	; (8008dc0 <tcp_process+0x7cc>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	f002 fcb2 	bl	800b630 <tcp_timer_needed>
      }
      break;
 8008ccc:	e06c      	b.n	8008da8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f984 	bl	8008fdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008cd4:	4b3b      	ldr	r3, [pc, #236]	; (8008dc4 <tcp_process+0x7d0>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d065      	beq.n	8008dac <tcp_process+0x7b8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ce4:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <tcp_process+0x7d4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d15f      	bne.n	8008dac <tcp_process+0x7b8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d15b      	bne.n	8008dac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe fcf1 	bl	80076dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008cfa:	4b35      	ldr	r3, [pc, #212]	; (8008dd0 <tcp_process+0x7dc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d105      	bne.n	8008d10 <tcp_process+0x71c>
 8008d04:	4b32      	ldr	r3, [pc, #200]	; (8008dd0 <tcp_process+0x7dc>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	4a31      	ldr	r2, [pc, #196]	; (8008dd0 <tcp_process+0x7dc>)
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	e013      	b.n	8008d38 <tcp_process+0x744>
 8008d10:	4b2f      	ldr	r3, [pc, #188]	; (8008dd0 <tcp_process+0x7dc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e00c      	b.n	8008d32 <tcp_process+0x73e>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d104      	bne.n	8008d2c <tcp_process+0x738>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	e005      	b.n	8008d38 <tcp_process+0x744>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1ef      	bne.n	8008d18 <tcp_process+0x724>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60da      	str	r2, [r3, #12]
 8008d3e:	4b1f      	ldr	r3, [pc, #124]	; (8008dbc <tcp_process+0x7c8>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	220a      	movs	r2, #10
 8008d48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <tcp_process+0x7cc>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60da      	str	r2, [r3, #12]
 8008d52:	4a1b      	ldr	r2, [pc, #108]	; (8008dc0 <tcp_process+0x7cc>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	f002 fc6a 	bl	800b630 <tcp_timer_needed>
      }
      break;
 8008d5c:	e026      	b.n	8008dac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f93c 	bl	8008fdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008d64:	4b17      	ldr	r3, [pc, #92]	; (8008dc4 <tcp_process+0x7d0>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01f      	beq.n	8008db0 <tcp_process+0x7bc>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d74:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <tcp_process+0x7d4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d119      	bne.n	8008db0 <tcp_process+0x7bc>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d115      	bne.n	8008db0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008d84:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <tcp_process+0x7d8>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f043 0310 	orr.w	r3, r3, #16
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <tcp_process+0x7d8>)
 8008d90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d92:	e00d      	b.n	8008db0 <tcp_process+0x7bc>
    default:
      break;
 8008d94:	bf00      	nop
 8008d96:	e00c      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008d98:	bf00      	nop
 8008d9a:	e00a      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008d9c:	bf00      	nop
 8008d9e:	e008      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008da0:	bf00      	nop
 8008da2:	e006      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008da4:	bf00      	nop
 8008da6:	e004      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008da8:	bf00      	nop
 8008daa:	e002      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008dac:	bf00      	nop
 8008dae:	e000      	b.n	8008db2 <tcp_process+0x7be>
      break;
 8008db0:	bf00      	nop
  }
  return ERR_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3724      	adds	r7, #36	; 0x24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd90      	pop	{r4, r7, pc}
 8008dbc:	2000694c 	.word	0x2000694c
 8008dc0:	20006960 	.word	0x20006960
 8008dc4:	200000fc 	.word	0x200000fc
 8008dc8:	200000f4 	.word	0x200000f4
 8008dcc:	200000fd 	.word	0x200000fd
 8008dd0:	20006950 	.word	0x20006950

08008dd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008dd4:	b590      	push	{r4, r7, lr}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <tcp_oos_insert_segment+0x1e>
 8008de4:	4b3b      	ldr	r3, [pc, #236]	; (8008ed4 <tcp_oos_insert_segment+0x100>)
 8008de6:	f240 421f 	movw	r2, #1055	; 0x41f
 8008dea:	493b      	ldr	r1, [pc, #236]	; (8008ed8 <tcp_oos_insert_segment+0x104>)
 8008dec:	483b      	ldr	r0, [pc, #236]	; (8008edc <tcp_oos_insert_segment+0x108>)
 8008dee:	f005 fa15 	bl	800e21c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	899b      	ldrh	r3, [r3, #12]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fb fd85 	bl	800490a <lwip_htons>
 8008e00:	4603      	mov	r3, r0
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d028      	beq.n	8008e5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008e0c:	6838      	ldr	r0, [r7, #0]
 8008e0e:	f7fe fa65 	bl	80072dc <tcp_segs_free>
    next = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	603b      	str	r3, [r7, #0]
 8008e16:	e056      	b.n	8008ec6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	899b      	ldrh	r3, [r3, #12]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fb fd72 	bl	800490a <lwip_htons>
 8008e26:	4603      	mov	r3, r0
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00d      	beq.n	8008e4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	899b      	ldrh	r3, [r3, #12]
 8008e38:	b29c      	uxth	r4, r3
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f7fb fd65 	bl	800490a <lwip_htons>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	4322      	orrs	r2, r4
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7fe fa53 	bl	8007304 <tcp_seg_free>
    while (next &&
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00e      	beq.n	8008e82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <tcp_oos_insert_segment+0x10c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	441a      	add	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	8909      	ldrh	r1, [r1, #8]
 8008e7a:	440b      	add	r3, r1
 8008e7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daca      	bge.n	8008e18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01e      	beq.n	8008ec6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	891b      	ldrh	r3, [r3, #8]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <tcp_oos_insert_segment+0x10c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	441a      	add	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd12      	ble.n	8008ec6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <tcp_oos_insert_segment+0x10c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	891b      	ldrh	r3, [r3, #8]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fc fe31 	bl	8005b28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	601a      	str	r2, [r3, #0]
}
 8008ecc:	bf00      	nop
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd90      	pop	{r4, r7, pc}
 8008ed4:	080103e0 	.word	0x080103e0
 8008ed8:	080106a0 	.word	0x080106a0
 8008edc:	0801042c 	.word	0x0801042c
 8008ee0:	200000f0 	.word	0x200000f0

08008ee4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008ee4:	b5b0      	push	{r4, r5, r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008ef2:	e03e      	b.n	8008f72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fd f81e 	bl	8005f44 <pbuf_clen>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f12:	8a7a      	ldrh	r2, [r7, #18]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d906      	bls.n	8008f26 <tcp_free_acked_segments+0x42>
 8008f18:	4b2a      	ldr	r3, [pc, #168]	; (8008fc4 <tcp_free_acked_segments+0xe0>)
 8008f1a:	f240 4257 	movw	r2, #1111	; 0x457
 8008f1e:	492a      	ldr	r1, [pc, #168]	; (8008fc8 <tcp_free_acked_segments+0xe4>)
 8008f20:	482a      	ldr	r0, [pc, #168]	; (8008fcc <tcp_free_acked_segments+0xe8>)
 8008f22:	f005 f97b 	bl	800e21c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008f2c:	8a7b      	ldrh	r3, [r7, #18]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	891a      	ldrh	r2, [r3, #8]
 8008f3c:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <tcp_free_acked_segments+0xec>)
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	4b22      	ldr	r3, [pc, #136]	; (8008fd0 <tcp_free_acked_segments+0xec>)
 8008f46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f7fe f9db 	bl	8007304 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00c      	beq.n	8008f72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <tcp_free_acked_segments+0x8e>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <tcp_free_acked_segments+0x8e>
 8008f64:	4b17      	ldr	r3, [pc, #92]	; (8008fc4 <tcp_free_acked_segments+0xe0>)
 8008f66:	f240 4262 	movw	r2, #1122	; 0x462
 8008f6a:	491a      	ldr	r1, [pc, #104]	; (8008fd4 <tcp_free_acked_segments+0xf0>)
 8008f6c:	4817      	ldr	r0, [pc, #92]	; (8008fcc <tcp_free_acked_segments+0xe8>)
 8008f6e:	f005 f955 	bl	800e21c <iprintf>
  while (seg_list != NULL &&
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d020      	beq.n	8008fba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fb fcd8 	bl	8004934 <lwip_htonl>
 8008f84:	4604      	mov	r4, r0
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	891b      	ldrh	r3, [r3, #8]
 8008f8a:	461d      	mov	r5, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fb fcb8 	bl	800490a <lwip_htons>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <tcp_free_acked_segments+0xc6>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e000      	b.n	8008fac <tcp_free_acked_segments+0xc8>
 8008faa:	2300      	movs	r3, #0
 8008fac:	442b      	add	r3, r5
 8008fae:	18e2      	adds	r2, r4, r3
 8008fb0:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <tcp_free_acked_segments+0xf4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd9c      	ble.n	8008ef4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008fba:	68bb      	ldr	r3, [r7, #8]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc4:	080103e0 	.word	0x080103e0
 8008fc8:	080106c8 	.word	0x080106c8
 8008fcc:	0801042c 	.word	0x0801042c
 8008fd0:	200000f8 	.word	0x200000f8
 8008fd4:	080106f0 	.word	0x080106f0
 8008fd8:	200000f4 	.word	0x200000f4

08008fdc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008fdc:	b5b0      	push	{r4, r5, r7, lr}
 8008fde:	b094      	sub	sp, #80	; 0x50
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <tcp_receive+0x20>
 8008fee:	4ba6      	ldr	r3, [pc, #664]	; (8009288 <tcp_receive+0x2ac>)
 8008ff0:	f240 427b 	movw	r2, #1147	; 0x47b
 8008ff4:	49a5      	ldr	r1, [pc, #660]	; (800928c <tcp_receive+0x2b0>)
 8008ff6:	48a6      	ldr	r0, [pc, #664]	; (8009290 <tcp_receive+0x2b4>)
 8008ff8:	f005 f910 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7d1b      	ldrb	r3, [r3, #20]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d806      	bhi.n	8009012 <tcp_receive+0x36>
 8009004:	4ba0      	ldr	r3, [pc, #640]	; (8009288 <tcp_receive+0x2ac>)
 8009006:	f240 427c 	movw	r2, #1148	; 0x47c
 800900a:	49a2      	ldr	r1, [pc, #648]	; (8009294 <tcp_receive+0x2b8>)
 800900c:	48a0      	ldr	r0, [pc, #640]	; (8009290 <tcp_receive+0x2b4>)
 800900e:	f005 f905 	bl	800e21c <iprintf>

  if (flags & TCP_ACK) {
 8009012:	4ba1      	ldr	r3, [pc, #644]	; (8009298 <tcp_receive+0x2bc>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0310 	and.w	r3, r3, #16
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8263 	beq.w	80094e6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	4413      	add	r3, r2
 800902e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009034:	4b99      	ldr	r3, [pc, #612]	; (800929c <tcp_receive+0x2c0>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	db1b      	blt.n	8009076 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009042:	4b96      	ldr	r3, [pc, #600]	; (800929c <tcp_receive+0x2c0>)
 8009044:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009046:	429a      	cmp	r2, r3
 8009048:	d106      	bne.n	8009058 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800904e:	4b94      	ldr	r3, [pc, #592]	; (80092a0 <tcp_receive+0x2c4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	db0e      	blt.n	8009076 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800905c:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <tcp_receive+0x2c4>)
 800905e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d125      	bne.n	80090b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009064:	4b8f      	ldr	r3, [pc, #572]	; (80092a4 <tcp_receive+0x2c8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	89db      	ldrh	r3, [r3, #14]
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009072:	429a      	cmp	r2, r3
 8009074:	d91c      	bls.n	80090b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009076:	4b8b      	ldr	r3, [pc, #556]	; (80092a4 <tcp_receive+0x2c8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	89db      	ldrh	r3, [r3, #14]
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009090:	429a      	cmp	r2, r3
 8009092:	d205      	bcs.n	80090a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80090a0:	4b7e      	ldr	r3, [pc, #504]	; (800929c <tcp_receive+0x2c0>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80090a8:	4b7d      	ldr	r3, [pc, #500]	; (80092a0 <tcp_receive+0x2c4>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80090b0:	4b7b      	ldr	r3, [pc, #492]	; (80092a0 <tcp_receive+0x2c4>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dc58      	bgt.n	8009170 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80090be:	4b7a      	ldr	r3, [pc, #488]	; (80092a8 <tcp_receive+0x2cc>)
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d14b      	bne.n	800915e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80090d0:	4413      	add	r3, r2
 80090d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d142      	bne.n	800915e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090de:	2b00      	cmp	r3, #0
 80090e0:	db3d      	blt.n	800915e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090e6:	4b6e      	ldr	r3, [pc, #440]	; (80092a0 <tcp_receive+0x2c4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d137      	bne.n	800915e <tcp_receive+0x182>
              found_dupack = 1;
 80090ee:	2301      	movs	r3, #1
 80090f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090f8:	2bff      	cmp	r3, #255	; 0xff
 80090fa:	d007      	beq.n	800910c <tcp_receive+0x130>
                ++pcb->dupacks;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009102:	3301      	adds	r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009112:	2b03      	cmp	r3, #3
 8009114:	d91b      	bls.n	800914e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009120:	4413      	add	r3, r2
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800912a:	429a      	cmp	r2, r3
 800912c:	d30a      	bcc.n	8009144 <tcp_receive+0x168>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009138:	4413      	add	r3, r2
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009142:	e004      	b.n	800914e <tcp_receive+0x172>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800914a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009154:	2b02      	cmp	r3, #2
 8009156:	d902      	bls.n	800915e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff01 	bl	800af60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800915e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009160:	2b00      	cmp	r3, #0
 8009162:	f040 8160 	bne.w	8009426 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800916e:	e15a      	b.n	8009426 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009170:	4b4b      	ldr	r3, [pc, #300]	; (80092a0 <tcp_receive+0x2c4>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	f2c0 814d 	blt.w	800941c <tcp_receive+0x440>
 8009182:	4b47      	ldr	r3, [pc, #284]	; (80092a0 <tcp_receive+0x2c4>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	f300 8145 	bgt.w	800941c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8b5b      	ldrh	r3, [r3, #26]
 8009196:	f003 0304 	and.w	r3, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d010      	beq.n	80091c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	8b5b      	ldrh	r3, [r3, #26]
 80091a2:	f023 0304 	bic.w	r3, r3, #4
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80091ce:	10db      	asrs	r3, r3, #3
 80091d0:	b21b      	sxth	r3, r3
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4413      	add	r3, r2
 80091de:	b29b      	uxth	r3, r3
 80091e0:	b21a      	sxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80091e8:	4b2d      	ldr	r3, [pc, #180]	; (80092a0 <tcp_receive+0x2c4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009200:	4b27      	ldr	r3, [pc, #156]	; (80092a0 <tcp_receive+0x2c4>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7d1b      	ldrb	r3, [r3, #20]
 800920c:	2b03      	cmp	r3, #3
 800920e:	f240 8096 	bls.w	800933e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800921e:	429a      	cmp	r2, r3
 8009220:	d244      	bcs.n	80092ac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	8b5b      	ldrh	r3, [r3, #26]
 8009226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <tcp_receive+0x256>
 800922e:	2301      	movs	r3, #1
 8009230:	e000      	b.n	8009234 <tcp_receive+0x258>
 8009232:	2302      	movs	r3, #2
 8009234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800923c:	b29a      	uxth	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009242:	fb12 f303 	smulbb	r3, r2, r3
 8009246:	b29b      	uxth	r3, r3
 8009248:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800924a:	4293      	cmp	r3, r2
 800924c:	bf28      	it	cs
 800924e:	4613      	movcs	r3, r2
 8009250:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800925a:	4413      	add	r3, r2
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009264:	429a      	cmp	r2, r3
 8009266:	d309      	bcc.n	800927c <tcp_receive+0x2a0>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800926e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009270:	4413      	add	r3, r2
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800927a:	e060      	b.n	800933e <tcp_receive+0x362>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009286:	e05a      	b.n	800933e <tcp_receive+0x362>
 8009288:	080103e0 	.word	0x080103e0
 800928c:	08010710 	.word	0x08010710
 8009290:	0801042c 	.word	0x0801042c
 8009294:	0801072c 	.word	0x0801072c
 8009298:	200000fc 	.word	0x200000fc
 800929c:	200000f0 	.word	0x200000f0
 80092a0:	200000f4 	.word	0x200000f4
 80092a4:	200000e0 	.word	0x200000e0
 80092a8:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092b4:	4413      	add	r3, r2
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092be:	429a      	cmp	r2, r3
 80092c0:	d309      	bcc.n	80092d6 <tcp_receive+0x2fa>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092ca:	4413      	add	r3, r2
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80092d4:	e004      	b.n	80092e0 <tcp_receive+0x304>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d326      	bcc.n	800933e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009310:	4413      	add	r3, r2
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800931a:	429a      	cmp	r2, r3
 800931c:	d30a      	bcc.n	8009334 <tcp_receive+0x358>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009328:	4413      	add	r3, r2
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009332:	e004      	b.n	800933e <tcp_receive+0x362>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800933a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009346:	4a98      	ldr	r2, [pc, #608]	; (80095a8 <tcp_receive+0x5cc>)
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff fdcb 	bl	8008ee4 <tcp_free_acked_segments>
 800934e:	4602      	mov	r2, r0
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935c:	4a93      	ldr	r2, [pc, #588]	; (80095ac <tcp_receive+0x5d0>)
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fdc0 	bl	8008ee4 <tcp_free_acked_segments>
 8009364:	4602      	mov	r2, r0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	2b00      	cmp	r3, #0
 8009370:	d104      	bne.n	800937c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009378:	861a      	strh	r2, [r3, #48]	; 0x30
 800937a:	e002      	b.n	8009382 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800939e:	4b84      	ldr	r3, [pc, #528]	; (80095b0 <tcp_receive+0x5d4>)
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	4413      	add	r3, r2
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8b5b      	ldrh	r3, [r3, #26]
 80093b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d035      	beq.n	8009424 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d118      	bne.n	80093f2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00c      	beq.n	80093e2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fb faad 	bl	8004934 <lwip_htonl>
 80093da:	4603      	mov	r3, r0
 80093dc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc20      	bgt.n	8009424 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8b5b      	ldrh	r3, [r3, #26]
 80093e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093f0:	e018      	b.n	8009424 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fb fa98 	bl	8004934 <lwip_htonl>
 8009404:	4603      	mov	r3, r0
 8009406:	1ae3      	subs	r3, r4, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	dc0b      	bgt.n	8009424 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8b5b      	ldrh	r3, [r3, #26]
 8009410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009414:	b29a      	uxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800941a:	e003      	b.n	8009424 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 ff97 	bl	800b350 <tcp_send_empty_ack>
 8009422:	e000      	b.n	8009426 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009424:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942a:	2b00      	cmp	r3, #0
 800942c:	d05b      	beq.n	80094e6 <tcp_receive+0x50a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009432:	4b60      	ldr	r3, [pc, #384]	; (80095b4 <tcp_receive+0x5d8>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	da54      	bge.n	80094e6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800943c:	4b5e      	ldr	r3, [pc, #376]	; (80095b8 <tcp_receive+0x5dc>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	b29b      	uxth	r3, r3
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	b29b      	uxth	r3, r3
 800944c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009450:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800945a:	10db      	asrs	r3, r3, #3
 800945c:	b21b      	sxth	r3, r3
 800945e:	b29b      	uxth	r3, r3
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800946e:	b29a      	uxth	r2, r3
 8009470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009474:	4413      	add	r3, r2
 8009476:	b29b      	uxth	r3, r3
 8009478:	b21a      	sxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800947e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009482:	2b00      	cmp	r3, #0
 8009484:	da05      	bge.n	8009492 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800948a:	425b      	negs	r3, r3
 800948c:	b29b      	uxth	r3, r3
 800948e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009492:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800949c:	109b      	asrs	r3, r3, #2
 800949e:	b21b      	sxth	r3, r3
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80094b6:	4413      	add	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	b21a      	sxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094c6:	10db      	asrs	r3, r3, #3
 80094c8:	b21b      	sxth	r3, r3
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	4413      	add	r3, r2
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	b21a      	sxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80094e6:	4b35      	ldr	r3, [pc, #212]	; (80095bc <tcp_receive+0x5e0>)
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 84e1 	beq.w	8009eb2 <tcp_receive+0xed6>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7d1b      	ldrb	r3, [r3, #20]
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	f200 84dc 	bhi.w	8009eb2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094fe:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <tcp_receive+0x5e4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	f2c0 808e 	blt.w	8009628 <tcp_receive+0x64c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009510:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <tcp_receive+0x5e0>)
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	4619      	mov	r1, r3
 8009516:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <tcp_receive+0x5e4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	440b      	add	r3, r1
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	3301      	adds	r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	f300 8081 	bgt.w	8009628 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009526:	4b27      	ldr	r3, [pc, #156]	; (80095c4 <tcp_receive+0x5e8>)
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009530:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <tcp_receive+0x5e4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009538:	4b22      	ldr	r3, [pc, #136]	; (80095c4 <tcp_receive+0x5e8>)
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <tcp_receive+0x572>
 8009540:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <tcp_receive+0x5ec>)
 8009542:	f240 5294 	movw	r2, #1428	; 0x594
 8009546:	4921      	ldr	r1, [pc, #132]	; (80095cc <tcp_receive+0x5f0>)
 8009548:	4821      	ldr	r0, [pc, #132]	; (80095d0 <tcp_receive+0x5f4>)
 800954a:	f004 fe67 	bl	800e21c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009554:	4293      	cmp	r3, r2
 8009556:	d906      	bls.n	8009566 <tcp_receive+0x58a>
 8009558:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <tcp_receive+0x5ec>)
 800955a:	f240 5295 	movw	r2, #1429	; 0x595
 800955e:	491d      	ldr	r1, [pc, #116]	; (80095d4 <tcp_receive+0x5f8>)
 8009560:	481b      	ldr	r0, [pc, #108]	; (80095d0 <tcp_receive+0x5f4>)
 8009562:	f004 fe5b 	bl	800e21c <iprintf>
      off = (u16_t)off32;
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800956c:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <tcp_receive+0x5e8>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	891b      	ldrh	r3, [r3, #8]
 8009572:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009576:	429a      	cmp	r2, r3
 8009578:	d906      	bls.n	8009588 <tcp_receive+0x5ac>
 800957a:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <tcp_receive+0x5ec>)
 800957c:	f240 5297 	movw	r2, #1431	; 0x597
 8009580:	4915      	ldr	r1, [pc, #84]	; (80095d8 <tcp_receive+0x5fc>)
 8009582:	4813      	ldr	r0, [pc, #76]	; (80095d0 <tcp_receive+0x5f4>)
 8009584:	f004 fe4a 	bl	800e21c <iprintf>
      inseg.len -= off;
 8009588:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <tcp_receive+0x5e8>)
 800958a:	891a      	ldrh	r2, [r3, #8]
 800958c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	b29a      	uxth	r2, r3
 8009594:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <tcp_receive+0x5e8>)
 8009596:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <tcp_receive+0x5e8>)
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	891a      	ldrh	r2, [r3, #8]
 800959e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80095a6:	e029      	b.n	80095fc <tcp_receive+0x620>
 80095a8:	08010748 	.word	0x08010748
 80095ac:	08010750 	.word	0x08010750
 80095b0:	200000f8 	.word	0x200000f8
 80095b4:	200000f4 	.word	0x200000f4
 80095b8:	20006954 	.word	0x20006954
 80095bc:	200000fa 	.word	0x200000fa
 80095c0:	200000f0 	.word	0x200000f0
 80095c4:	200000cc 	.word	0x200000cc
 80095c8:	080103e0 	.word	0x080103e0
 80095cc:	08010758 	.word	0x08010758
 80095d0:	0801042c 	.word	0x0801042c
 80095d4:	08010768 	.word	0x08010768
 80095d8:	08010778 	.word	0x08010778
        off -= p->len;
 80095dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80095ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80095f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f2:	2200      	movs	r2, #0
 80095f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80095fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095fe:	895b      	ldrh	r3, [r3, #10]
 8009600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009604:	429a      	cmp	r2, r3
 8009606:	d8e9      	bhi.n	80095dc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800960c:	4619      	mov	r1, r3
 800960e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009610:	f7fc fb8a 	bl	8005d28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	4a91      	ldr	r2, [pc, #580]	; (8009860 <tcp_receive+0x884>)
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	4b91      	ldr	r3, [pc, #580]	; (8009864 <tcp_receive+0x888>)
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	4a8f      	ldr	r2, [pc, #572]	; (8009860 <tcp_receive+0x884>)
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009626:	e00d      	b.n	8009644 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009628:	4b8d      	ldr	r3, [pc, #564]	; (8009860 <tcp_receive+0x884>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	da06      	bge.n	8009644 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8b5b      	ldrh	r3, [r3, #26]
 800963a:	f043 0302 	orr.w	r3, r3, #2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009644:	4b86      	ldr	r3, [pc, #536]	; (8009860 <tcp_receive+0x884>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	f2c0 842a 	blt.w	8009ea8 <tcp_receive+0xecc>
 8009654:	4b82      	ldr	r3, [pc, #520]	; (8009860 <tcp_receive+0x884>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009660:	440b      	add	r3, r1
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	3301      	adds	r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	f300 841e 	bgt.w	8009ea8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009670:	4b7b      	ldr	r3, [pc, #492]	; (8009860 <tcp_receive+0x884>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	f040 829a 	bne.w	8009bae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800967a:	4b7a      	ldr	r3, [pc, #488]	; (8009864 <tcp_receive+0x888>)
 800967c:	891c      	ldrh	r4, [r3, #8]
 800967e:	4b79      	ldr	r3, [pc, #484]	; (8009864 <tcp_receive+0x888>)
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	899b      	ldrh	r3, [r3, #12]
 8009684:	b29b      	uxth	r3, r3
 8009686:	4618      	mov	r0, r3
 8009688:	f7fb f93f 	bl	800490a <lwip_htons>
 800968c:	4603      	mov	r3, r0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <tcp_receive+0x6c0>
 8009698:	2301      	movs	r3, #1
 800969a:	e000      	b.n	800969e <tcp_receive+0x6c2>
 800969c:	2300      	movs	r3, #0
 800969e:	4423      	add	r3, r4
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	4b71      	ldr	r3, [pc, #452]	; (8009868 <tcp_receive+0x88c>)
 80096a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80096aa:	4b6f      	ldr	r3, [pc, #444]	; (8009868 <tcp_receive+0x88c>)
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d275      	bcs.n	800979e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80096b2:	4b6c      	ldr	r3, [pc, #432]	; (8009864 <tcp_receive+0x888>)
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	899b      	ldrh	r3, [r3, #12]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fb f925 	bl	800490a <lwip_htons>
 80096c0:	4603      	mov	r3, r0
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d01f      	beq.n	800970c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80096cc:	4b65      	ldr	r3, [pc, #404]	; (8009864 <tcp_receive+0x888>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	899b      	ldrh	r3, [r3, #12]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096da:	b21c      	sxth	r4, r3
 80096dc:	4b61      	ldr	r3, [pc, #388]	; (8009864 <tcp_receive+0x888>)
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	899b      	ldrh	r3, [r3, #12]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fb f910 	bl	800490a <lwip_htons>
 80096ea:	4603      	mov	r3, r0
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb f907 	bl	800490a <lwip_htons>
 80096fc:	4603      	mov	r3, r0
 80096fe:	b21b      	sxth	r3, r3
 8009700:	4323      	orrs	r3, r4
 8009702:	b21a      	sxth	r2, r3
 8009704:	4b57      	ldr	r3, [pc, #348]	; (8009864 <tcp_receive+0x888>)
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	b292      	uxth	r2, r2
 800970a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009710:	4b54      	ldr	r3, [pc, #336]	; (8009864 <tcp_receive+0x888>)
 8009712:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009714:	4b53      	ldr	r3, [pc, #332]	; (8009864 <tcp_receive+0x888>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	899b      	ldrh	r3, [r3, #12]
 800971a:	b29b      	uxth	r3, r3
 800971c:	4618      	mov	r0, r3
 800971e:	f7fb f8f4 	bl	800490a <lwip_htons>
 8009722:	4603      	mov	r3, r0
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <tcp_receive+0x75e>
            inseg.len -= 1;
 800972e:	4b4d      	ldr	r3, [pc, #308]	; (8009864 <tcp_receive+0x888>)
 8009730:	891b      	ldrh	r3, [r3, #8]
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	4b4b      	ldr	r3, [pc, #300]	; (8009864 <tcp_receive+0x888>)
 8009738:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800973a:	4b4a      	ldr	r3, [pc, #296]	; (8009864 <tcp_receive+0x888>)
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	4b49      	ldr	r3, [pc, #292]	; (8009864 <tcp_receive+0x888>)
 8009740:	891b      	ldrh	r3, [r3, #8]
 8009742:	4619      	mov	r1, r3
 8009744:	4610      	mov	r0, r2
 8009746:	f7fc f9ef 	bl	8005b28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800974a:	4b46      	ldr	r3, [pc, #280]	; (8009864 <tcp_receive+0x888>)
 800974c:	891c      	ldrh	r4, [r3, #8]
 800974e:	4b45      	ldr	r3, [pc, #276]	; (8009864 <tcp_receive+0x888>)
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	899b      	ldrh	r3, [r3, #12]
 8009754:	b29b      	uxth	r3, r3
 8009756:	4618      	mov	r0, r3
 8009758:	f7fb f8d7 	bl	800490a <lwip_htons>
 800975c:	4603      	mov	r3, r0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <tcp_receive+0x790>
 8009768:	2301      	movs	r3, #1
 800976a:	e000      	b.n	800976e <tcp_receive+0x792>
 800976c:	2300      	movs	r3, #0
 800976e:	4423      	add	r3, r4
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <tcp_receive+0x88c>)
 8009774:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009776:	4b3c      	ldr	r3, [pc, #240]	; (8009868 <tcp_receive+0x88c>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	4b38      	ldr	r3, [pc, #224]	; (8009860 <tcp_receive+0x884>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	441a      	add	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800978a:	440b      	add	r3, r1
 800978c:	429a      	cmp	r2, r3
 800978e:	d006      	beq.n	800979e <tcp_receive+0x7c2>
 8009790:	4b36      	ldr	r3, [pc, #216]	; (800986c <tcp_receive+0x890>)
 8009792:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009796:	4936      	ldr	r1, [pc, #216]	; (8009870 <tcp_receive+0x894>)
 8009798:	4836      	ldr	r0, [pc, #216]	; (8009874 <tcp_receive+0x898>)
 800979a:	f004 fd3f 	bl	800e21c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 80e7 	beq.w	8009976 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80097a8:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <tcp_receive+0x888>)
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	899b      	ldrh	r3, [r3, #12]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb f8aa 	bl	800490a <lwip_htons>
 80097b6:	4603      	mov	r3, r0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80097c2:	e00a      	b.n	80097da <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7fd fd95 	bl	8007304 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f0      	bne.n	80097c4 <tcp_receive+0x7e8>
 80097e2:	e0c8      	b.n	8009976 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80097ea:	e052      	b.n	8009892 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80097ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	899b      	ldrh	r3, [r3, #12]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fb f888 	bl	800490a <lwip_htons>
 80097fa:	4603      	mov	r3, r0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d03d      	beq.n	8009882 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009806:	4b17      	ldr	r3, [pc, #92]	; (8009864 <tcp_receive+0x888>)
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	899b      	ldrh	r3, [r3, #12]
 800980c:	b29b      	uxth	r3, r3
 800980e:	4618      	mov	r0, r3
 8009810:	f7fb f87b 	bl	800490a <lwip_htons>
 8009814:	4603      	mov	r3, r0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800981c:	2b00      	cmp	r3, #0
 800981e:	d130      	bne.n	8009882 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009820:	4b10      	ldr	r3, [pc, #64]	; (8009864 <tcp_receive+0x888>)
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	b29c      	uxth	r4, r3
 8009828:	2001      	movs	r0, #1
 800982a:	f7fb f86e 	bl	800490a <lwip_htons>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <tcp_receive+0x888>)
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	4322      	orrs	r2, r4
 8009838:	b292      	uxth	r2, r2
 800983a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <tcp_receive+0x888>)
 800983e:	891c      	ldrh	r4, [r3, #8]
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <tcp_receive+0x888>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	899b      	ldrh	r3, [r3, #12]
 8009846:	b29b      	uxth	r3, r3
 8009848:	4618      	mov	r0, r3
 800984a:	f7fb f85e 	bl	800490a <lwip_htons>
 800984e:	4603      	mov	r3, r0
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00e      	beq.n	8009878 <tcp_receive+0x89c>
 800985a:	2301      	movs	r3, #1
 800985c:	e00d      	b.n	800987a <tcp_receive+0x89e>
 800985e:	bf00      	nop
 8009860:	200000f0 	.word	0x200000f0
 8009864:	200000cc 	.word	0x200000cc
 8009868:	200000fa 	.word	0x200000fa
 800986c:	080103e0 	.word	0x080103e0
 8009870:	08010788 	.word	0x08010788
 8009874:	0801042c 	.word	0x0801042c
 8009878:	2300      	movs	r3, #0
 800987a:	4423      	add	r3, r4
 800987c:	b29a      	uxth	r2, r3
 800987e:	4b98      	ldr	r3, [pc, #608]	; (8009ae0 <tcp_receive+0xb04>)
 8009880:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009884:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800988c:	6938      	ldr	r0, [r7, #16]
 800988e:	f7fd fd39 	bl	8007304 <tcp_seg_free>
            while (next &&
 8009892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009898:	4b91      	ldr	r3, [pc, #580]	; (8009ae0 <tcp_receive+0xb04>)
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	4b91      	ldr	r3, [pc, #580]	; (8009ae4 <tcp_receive+0xb08>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	441a      	add	r2, r3
 80098a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ac:	8909      	ldrh	r1, [r1, #8]
 80098ae:	440b      	add	r3, r1
 80098b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da9a      	bge.n	80097ec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80098b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d059      	beq.n	8009970 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80098bc:	4b88      	ldr	r3, [pc, #544]	; (8009ae0 <tcp_receive+0xb04>)
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b88      	ldr	r3, [pc, #544]	; (8009ae4 <tcp_receive+0xb08>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	441a      	add	r2, r3
 80098c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dd4d      	ble.n	8009970 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80098d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	4b81      	ldr	r3, [pc, #516]	; (8009ae4 <tcp_receive+0xb08>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	4b80      	ldr	r3, [pc, #512]	; (8009ae8 <tcp_receive+0xb0c>)
 80098e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098ea:	4b7f      	ldr	r3, [pc, #508]	; (8009ae8 <tcp_receive+0xb0c>)
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	899b      	ldrh	r3, [r3, #12]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fb f809 	bl	800490a <lwip_htons>
 80098f8:	4603      	mov	r3, r0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <tcp_receive+0x934>
                inseg.len -= 1;
 8009904:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <tcp_receive+0xb0c>)
 8009906:	891b      	ldrh	r3, [r3, #8]
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	4b76      	ldr	r3, [pc, #472]	; (8009ae8 <tcp_receive+0xb0c>)
 800990e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009910:	4b75      	ldr	r3, [pc, #468]	; (8009ae8 <tcp_receive+0xb0c>)
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	4b74      	ldr	r3, [pc, #464]	; (8009ae8 <tcp_receive+0xb0c>)
 8009916:	891b      	ldrh	r3, [r3, #8]
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7fc f904 	bl	8005b28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009920:	4b71      	ldr	r3, [pc, #452]	; (8009ae8 <tcp_receive+0xb0c>)
 8009922:	891c      	ldrh	r4, [r3, #8]
 8009924:	4b70      	ldr	r3, [pc, #448]	; (8009ae8 <tcp_receive+0xb0c>)
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	b29b      	uxth	r3, r3
 800992c:	4618      	mov	r0, r3
 800992e:	f7fa ffec 	bl	800490a <lwip_htons>
 8009932:	4603      	mov	r3, r0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <tcp_receive+0x966>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <tcp_receive+0x968>
 8009942:	2300      	movs	r3, #0
 8009944:	4423      	add	r3, r4
 8009946:	b29a      	uxth	r2, r3
 8009948:	4b65      	ldr	r3, [pc, #404]	; (8009ae0 <tcp_receive+0xb04>)
 800994a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800994c:	4b64      	ldr	r3, [pc, #400]	; (8009ae0 <tcp_receive+0xb04>)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	4b64      	ldr	r3, [pc, #400]	; (8009ae4 <tcp_receive+0xb08>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	441a      	add	r2, r3
 8009958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	429a      	cmp	r2, r3
 8009960:	d006      	beq.n	8009970 <tcp_receive+0x994>
 8009962:	4b62      	ldr	r3, [pc, #392]	; (8009aec <tcp_receive+0xb10>)
 8009964:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8009968:	4961      	ldr	r1, [pc, #388]	; (8009af0 <tcp_receive+0xb14>)
 800996a:	4862      	ldr	r0, [pc, #392]	; (8009af4 <tcp_receive+0xb18>)
 800996c:	f004 fc56 	bl	800e21c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009974:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009976:	4b5a      	ldr	r3, [pc, #360]	; (8009ae0 <tcp_receive+0xb04>)
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	4b59      	ldr	r3, [pc, #356]	; (8009ae4 <tcp_receive+0xb08>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	441a      	add	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800998a:	4b55      	ldr	r3, [pc, #340]	; (8009ae0 <tcp_receive+0xb04>)
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d206      	bcs.n	80099a0 <tcp_receive+0x9c4>
 8009992:	4b56      	ldr	r3, [pc, #344]	; (8009aec <tcp_receive+0xb10>)
 8009994:	f240 6207 	movw	r2, #1543	; 0x607
 8009998:	4957      	ldr	r1, [pc, #348]	; (8009af8 <tcp_receive+0xb1c>)
 800999a:	4856      	ldr	r0, [pc, #344]	; (8009af4 <tcp_receive+0xb18>)
 800999c:	f004 fc3e 	bl	800e21c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80099a4:	4b4e      	ldr	r3, [pc, #312]	; (8009ae0 <tcp_receive+0xb04>)
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fc ffcb 	bl	800694c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80099b6:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <tcp_receive+0xb0c>)
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80099c0:	4b49      	ldr	r3, [pc, #292]	; (8009ae8 <tcp_receive+0xb0c>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4a4d      	ldr	r2, [pc, #308]	; (8009afc <tcp_receive+0xb20>)
 80099c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80099c8:	4b47      	ldr	r3, [pc, #284]	; (8009ae8 <tcp_receive+0xb0c>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80099ce:	4b46      	ldr	r3, [pc, #280]	; (8009ae8 <tcp_receive+0xb0c>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	899b      	ldrh	r3, [r3, #12]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fa ff97 	bl	800490a <lwip_htons>
 80099dc:	4603      	mov	r3, r0
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80b8 	beq.w	8009b5a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80099ea:	4b45      	ldr	r3, [pc, #276]	; (8009b00 <tcp_receive+0xb24>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	f043 0320 	orr.w	r3, r3, #32
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	4b42      	ldr	r3, [pc, #264]	; (8009b00 <tcp_receive+0xb24>)
 80099f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80099f8:	e0af      	b.n	8009b5a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4a36      	ldr	r2, [pc, #216]	; (8009ae4 <tcp_receive+0xb08>)
 8009a0a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	891b      	ldrh	r3, [r3, #8]
 8009a10:	461c      	mov	r4, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	899b      	ldrh	r3, [r3, #12]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fa ff75 	bl	800490a <lwip_htons>
 8009a20:	4603      	mov	r3, r0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 0303 	and.w	r3, r3, #3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <tcp_receive+0xa54>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e000      	b.n	8009a32 <tcp_receive+0xa56>
 8009a30:	2300      	movs	r3, #0
 8009a32:	191a      	adds	r2, r3, r4
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	441a      	add	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a42:	461c      	mov	r4, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	891b      	ldrh	r3, [r3, #8]
 8009a48:	461d      	mov	r5, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	899b      	ldrh	r3, [r3, #12]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fa ff59 	bl	800490a <lwip_htons>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0303 	and.w	r3, r3, #3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <tcp_receive+0xa8c>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <tcp_receive+0xa8e>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	442b      	add	r3, r5
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d206      	bcs.n	8009a7e <tcp_receive+0xaa2>
 8009a70:	4b1e      	ldr	r3, [pc, #120]	; (8009aec <tcp_receive+0xb10>)
 8009a72:	f240 622c 	movw	r2, #1580	; 0x62c
 8009a76:	4923      	ldr	r1, [pc, #140]	; (8009b04 <tcp_receive+0xb28>)
 8009a78:	481e      	ldr	r0, [pc, #120]	; (8009af4 <tcp_receive+0xb18>)
 8009a7a:	f004 fbcf 	bl	800e21c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	891b      	ldrh	r3, [r3, #8]
 8009a82:	461c      	mov	r4, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	899b      	ldrh	r3, [r3, #12]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fa ff3c 	bl	800490a <lwip_htons>
 8009a92:	4603      	mov	r3, r0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <tcp_receive+0xac6>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e000      	b.n	8009aa4 <tcp_receive+0xac8>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	1919      	adds	r1, r3, r4
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009aaa:	b28b      	uxth	r3, r1
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7fc ff49 	bl	800694c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	891b      	ldrh	r3, [r3, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d028      	beq.n	8009b16 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <tcp_receive+0xb20>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01d      	beq.n	8009b08 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <tcp_receive+0xb20>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7fc fa6e 	bl	8005fb8 <pbuf_cat>
 8009adc:	e018      	b.n	8009b10 <tcp_receive+0xb34>
 8009ade:	bf00      	nop
 8009ae0:	200000fa 	.word	0x200000fa
 8009ae4:	200000f0 	.word	0x200000f0
 8009ae8:	200000cc 	.word	0x200000cc
 8009aec:	080103e0 	.word	0x080103e0
 8009af0:	080107c0 	.word	0x080107c0
 8009af4:	0801042c 	.word	0x0801042c
 8009af8:	080107fc 	.word	0x080107fc
 8009afc:	20000100 	.word	0x20000100
 8009b00:	200000fd 	.word	0x200000fd
 8009b04:	0801081c 	.word	0x0801081c
            } else {
              recv_data = cseg->p;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	4a70      	ldr	r2, [pc, #448]	; (8009cd0 <tcp_receive+0xcf4>)
 8009b0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	899b      	ldrh	r3, [r3, #12]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa fef3 	bl	800490a <lwip_htons>
 8009b24:	4603      	mov	r3, r0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00d      	beq.n	8009b4c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009b30:	4b68      	ldr	r3, [pc, #416]	; (8009cd4 <tcp_receive+0xcf8>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f043 0320 	orr.w	r3, r3, #32
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	4b66      	ldr	r3, [pc, #408]	; (8009cd4 <tcp_receive+0xcf8>)
 8009b3c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7d1b      	ldrb	r3, [r3, #20]
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d102      	bne.n	8009b4c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2207      	movs	r2, #7
 8009b4a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	f7fd fbd5 	bl	8007304 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d008      	beq.n	8009b74 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	f43f af43 	beq.w	80099fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8b5b      	ldrh	r3, [r3, #26]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00e      	beq.n	8009b9e <tcp_receive+0xbc2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8b5b      	ldrh	r3, [r3, #26]
 8009b84:	f023 0301 	bic.w	r3, r3, #1
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	835a      	strh	r2, [r3, #26]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	8b5b      	ldrh	r3, [r3, #26]
 8009b92:	f043 0302 	orr.w	r3, r3, #2
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b9c:	e188      	b.n	8009eb0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	f043 0301 	orr.w	r3, r3, #1
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009bac:	e180      	b.n	8009eb0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009bb6:	4848      	ldr	r0, [pc, #288]	; (8009cd8 <tcp_receive+0xcfc>)
 8009bb8:	f7fd fbbc 	bl	8007334 <tcp_seg_copy>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	675a      	str	r2, [r3, #116]	; 0x74
 8009bc2:	e16d      	b.n	8009ea0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bce:	e157      	b.n	8009e80 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4b41      	ldr	r3, [pc, #260]	; (8009cdc <tcp_receive+0xd00>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d11d      	bne.n	8009c1a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009bde:	4b3e      	ldr	r3, [pc, #248]	; (8009cd8 <tcp_receive+0xcfc>)
 8009be0:	891a      	ldrh	r2, [r3, #8]
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	891b      	ldrh	r3, [r3, #8]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	f240 814f 	bls.w	8009e8a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009bec:	483a      	ldr	r0, [pc, #232]	; (8009cd8 <tcp_receive+0xcfc>)
 8009bee:	f7fd fba1 	bl	8007334 <tcp_seg_copy>
 8009bf2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8149 	beq.w	8009e8e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e002      	b.n	8009c10 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c12:	6978      	ldr	r0, [r7, #20]
 8009c14:	f7ff f8de 	bl	8008dd4 <tcp_oos_insert_segment>
                }
                break;
 8009c18:	e139      	b.n	8009e8e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d117      	bne.n	8009c50 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009c20:	4b2e      	ldr	r3, [pc, #184]	; (8009cdc <tcp_receive+0xd00>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da57      	bge.n	8009ce0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c30:	4829      	ldr	r0, [pc, #164]	; (8009cd8 <tcp_receive+0xcfc>)
 8009c32:	f7fd fb7f 	bl	8007334 <tcp_seg_copy>
 8009c36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 8129 	beq.w	8009e92 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c48:	69b8      	ldr	r0, [r7, #24]
 8009c4a:	f7ff f8c3 	bl	8008dd4 <tcp_oos_insert_segment>
                  }
                  break;
 8009c4e:	e120      	b.n	8009e92 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009c50:	4b22      	ldr	r3, [pc, #136]	; (8009cdc <tcp_receive+0xd00>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	db3e      	blt.n	8009ce0 <tcp_receive+0xd04>
 8009c62:	4b1e      	ldr	r3, [pc, #120]	; (8009cdc <tcp_receive+0xd00>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	3301      	adds	r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc35      	bgt.n	8009ce0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009c74:	4818      	ldr	r0, [pc, #96]	; (8009cd8 <tcp_receive+0xcfc>)
 8009c76:	f7fd fb5d 	bl	8007334 <tcp_seg_copy>
 8009c7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8109 	beq.w	8009e96 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c8c:	8912      	ldrh	r2, [r2, #8]
 8009c8e:	441a      	add	r2, r3
 8009c90:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <tcp_receive+0xd00>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd12      	ble.n	8009cc0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <tcp_receive+0xd00>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb6:	891b      	ldrh	r3, [r3, #8]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fb ff34 	bl	8005b28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009cc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cc8:	69f8      	ldr	r0, [r7, #28]
 8009cca:	f7ff f883 	bl	8008dd4 <tcp_oos_insert_segment>
                  }
                  break;
 8009cce:	e0e2      	b.n	8009e96 <tcp_receive+0xeba>
 8009cd0:	20000100 	.word	0x20000100
 8009cd4:	200000fd 	.word	0x200000fd
 8009cd8:	200000cc 	.word	0x200000cc
 8009cdc:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 80c6 	bne.w	8009e7a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009cee:	4b80      	ldr	r3, [pc, #512]	; (8009ef0 <tcp_receive+0xf14>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f340 80bd 	ble.w	8009e7a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	899b      	ldrh	r3, [r3, #12]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fa fdfe 	bl	800490a <lwip_htons>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f040 80bf 	bne.w	8009e9a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009d1c:	4875      	ldr	r0, [pc, #468]	; (8009ef4 <tcp_receive+0xf18>)
 8009d1e:	f7fd fb09 	bl	8007334 <tcp_seg_copy>
 8009d22:	4602      	mov	r2, r0
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80b6 	beq.w	8009e9e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d3a:	8912      	ldrh	r2, [r2, #8]
 8009d3c:	441a      	add	r2, r3
 8009d3e:	4b6c      	ldr	r3, [pc, #432]	; (8009ef0 <tcp_receive+0xf14>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd12      	ble.n	8009d6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009d48:	4b69      	ldr	r3, [pc, #420]	; (8009ef0 <tcp_receive+0xf14>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	891b      	ldrh	r3, [r3, #8]
 8009d66:	4619      	mov	r1, r3
 8009d68:	4610      	mov	r0, r2
 8009d6a:	f7fb fedd 	bl	8005b28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009d6e:	4b62      	ldr	r3, [pc, #392]	; (8009ef8 <tcp_receive+0xf1c>)
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b5e      	ldr	r3, [pc, #376]	; (8009ef0 <tcp_receive+0xf14>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	441a      	add	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d82:	440b      	add	r3, r1
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f340 8089 	ble.w	8009e9e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fa fdb7 	bl	800490a <lwip_htons>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d022      	beq.n	8009dee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	899b      	ldrh	r3, [r3, #12]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	b21b      	sxth	r3, r3
 8009db4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009db8:	b21c      	sxth	r4, r3
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	899b      	ldrh	r3, [r3, #12]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fa fda0 	bl	800490a <lwip_htons>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fa fd97 	bl	800490a <lwip_htons>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	b21b      	sxth	r3, r3
 8009de0:	4323      	orrs	r3, r4
 8009de2:	b21a      	sxth	r2, r3
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	b292      	uxth	r2, r2
 8009dec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df8:	4413      	add	r3, r2
 8009dfa:	b299      	uxth	r1, r3
 8009dfc:	4b3c      	ldr	r3, [pc, #240]	; (8009ef0 <tcp_receive+0xf14>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	1a8a      	subs	r2, r1, r2
 8009e08:	b292      	uxth	r2, r2
 8009e0a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	891b      	ldrh	r3, [r3, #8]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7fb fe84 	bl	8005b28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	891c      	ldrh	r4, [r3, #8]
 8009e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	899b      	ldrh	r3, [r3, #12]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fa fd6a 	bl	800490a <lwip_htons>
 8009e36:	4603      	mov	r3, r0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <tcp_receive+0xe6a>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <tcp_receive+0xe6c>
 8009e46:	2300      	movs	r3, #0
 8009e48:	4423      	add	r3, r4
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <tcp_receive+0xf1c>)
 8009e4e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e50:	4b29      	ldr	r3, [pc, #164]	; (8009ef8 <tcp_receive+0xf1c>)
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <tcp_receive+0xf14>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	441a      	add	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e64:	440b      	add	r3, r1
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d019      	beq.n	8009e9e <tcp_receive+0xec2>
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <tcp_receive+0xf20>)
 8009e6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009e70:	4923      	ldr	r1, [pc, #140]	; (8009f00 <tcp_receive+0xf24>)
 8009e72:	4824      	ldr	r0, [pc, #144]	; (8009f04 <tcp_receive+0xf28>)
 8009e74:	f004 f9d2 	bl	800e21c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009e78:	e011      	b.n	8009e9e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f47f aea4 	bne.w	8009bd0 <tcp_receive+0xbf4>
 8009e88:	e00a      	b.n	8009ea0 <tcp_receive+0xec4>
                break;
 8009e8a:	bf00      	nop
 8009e8c:	e008      	b.n	8009ea0 <tcp_receive+0xec4>
                break;
 8009e8e:	bf00      	nop
 8009e90:	e006      	b.n	8009ea0 <tcp_receive+0xec4>
                  break;
 8009e92:	bf00      	nop
 8009e94:	e004      	b.n	8009ea0 <tcp_receive+0xec4>
                  break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <tcp_receive+0xec4>
                  break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <tcp_receive+0xec4>
                break;
 8009e9e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 fa55 	bl	800b350 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009ea6:	e003      	b.n	8009eb0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 fa51 	bl	800b350 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009eae:	e01a      	b.n	8009ee6 <tcp_receive+0xf0a>
 8009eb0:	e019      	b.n	8009ee6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009eb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ef0 <tcp_receive+0xf14>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	db0a      	blt.n	8009ed6 <tcp_receive+0xefa>
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <tcp_receive+0xf14>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ecc:	440b      	add	r3, r1
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dd07      	ble.n	8009ee6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	8b5b      	ldrh	r3, [r3, #26]
 8009eda:	f043 0302 	orr.w	r3, r3, #2
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009ee4:	e7ff      	b.n	8009ee6 <tcp_receive+0xf0a>
 8009ee6:	bf00      	nop
 8009ee8:	3750      	adds	r7, #80	; 0x50
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bdb0      	pop	{r4, r5, r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200000f0 	.word	0x200000f0
 8009ef4:	200000cc 	.word	0x200000cc
 8009ef8:	200000fa 	.word	0x200000fa
 8009efc:	080103e0 	.word	0x080103e0
 8009f00:	08010788 	.word	0x08010788
 8009f04:	0801042c 	.word	0x0801042c

08009f08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009f0e:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <tcp_get_next_optbyte+0x5c>)
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	b291      	uxth	r1, r2
 8009f16:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <tcp_get_next_optbyte+0x5c>)
 8009f18:	8011      	strh	r1, [r2, #0]
 8009f1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f1c:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <tcp_get_next_optbyte+0x60>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d004      	beq.n	8009f2e <tcp_get_next_optbyte+0x26>
 8009f24:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <tcp_get_next_optbyte+0x64>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	88fa      	ldrh	r2, [r7, #6]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d208      	bcs.n	8009f40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <tcp_get_next_optbyte+0x68>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3314      	adds	r3, #20
 8009f34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	e00b      	b.n	8009f58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <tcp_get_next_optbyte+0x64>)
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009f4e:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <tcp_get_next_optbyte+0x60>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	797b      	ldrb	r3, [r7, #5]
 8009f54:	4413      	add	r3, r2
 8009f56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	200000ec 	.word	0x200000ec
 8009f68:	200000e8 	.word	0x200000e8
 8009f6c:	200000e6 	.word	0x200000e6
 8009f70:	200000e0 	.word	0x200000e0

08009f74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <tcp_parseopt+0x1c>
 8009f82:	4b31      	ldr	r3, [pc, #196]	; (800a048 <tcp_parseopt+0xd4>)
 8009f84:	f240 727d 	movw	r2, #1917	; 0x77d
 8009f88:	4930      	ldr	r1, [pc, #192]	; (800a04c <tcp_parseopt+0xd8>)
 8009f8a:	4831      	ldr	r0, [pc, #196]	; (800a050 <tcp_parseopt+0xdc>)
 8009f8c:	f004 f946 	bl	800e21c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009f90:	4b30      	ldr	r3, [pc, #192]	; (800a054 <tcp_parseopt+0xe0>)
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d053      	beq.n	800a040 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f98:	4b2f      	ldr	r3, [pc, #188]	; (800a058 <tcp_parseopt+0xe4>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	801a      	strh	r2, [r3, #0]
 8009f9e:	e043      	b.n	800a028 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8009fa0:	f7ff ffb2 	bl	8009f08 <tcp_get_next_optbyte>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d03c      	beq.n	800a028 <tcp_parseopt+0xb4>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d002      	beq.n	8009fb8 <tcp_parseopt+0x44>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d03f      	beq.n	800a036 <tcp_parseopt+0xc2>
 8009fb6:	e026      	b.n	800a006 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009fb8:	f7ff ffa6 	bl	8009f08 <tcp_get_next_optbyte>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	d13b      	bne.n	800a03a <tcp_parseopt+0xc6>
 8009fc2:	4b25      	ldr	r3, [pc, #148]	; (800a058 <tcp_parseopt+0xe4>)
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	4a22      	ldr	r2, [pc, #136]	; (800a054 <tcp_parseopt+0xe0>)
 8009fca:	8812      	ldrh	r2, [r2, #0]
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	dc34      	bgt.n	800a03a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009fd0:	f7ff ff9a 	bl	8009f08 <tcp_get_next_optbyte>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009fdc:	f7ff ff94 	bl	8009f08 <tcp_get_next_optbyte>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	89bb      	ldrh	r3, [r7, #12]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009fea:	89bb      	ldrh	r3, [r7, #12]
 8009fec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009ff0:	d804      	bhi.n	8009ffc <tcp_parseopt+0x88>
 8009ff2:	89bb      	ldrh	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <tcp_parseopt+0x88>
 8009ff8:	89ba      	ldrh	r2, [r7, #12]
 8009ffa:	e001      	b.n	800a000 <tcp_parseopt+0x8c>
 8009ffc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a004:	e010      	b.n	800a028 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a006:	f7ff ff7f 	bl	8009f08 <tcp_get_next_optbyte>
 800a00a:	4603      	mov	r3, r0
 800a00c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d914      	bls.n	800a03e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	b29a      	uxth	r2, r3
 800a018:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <tcp_parseopt+0xe4>)
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	4413      	add	r3, r2
 800a01e:	b29b      	uxth	r3, r3
 800a020:	3b02      	subs	r3, #2
 800a022:	b29a      	uxth	r2, r3
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <tcp_parseopt+0xe4>)
 800a026:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a028:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <tcp_parseopt+0xe4>)
 800a02a:	881a      	ldrh	r2, [r3, #0]
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <tcp_parseopt+0xe0>)
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d3b5      	bcc.n	8009fa0 <tcp_parseopt+0x2c>
 800a034:	e004      	b.n	800a040 <tcp_parseopt+0xcc>
          return;
 800a036:	bf00      	nop
 800a038:	e002      	b.n	800a040 <tcp_parseopt+0xcc>
            return;
 800a03a:	bf00      	nop
 800a03c:	e000      	b.n	800a040 <tcp_parseopt+0xcc>
            return;
 800a03e:	bf00      	nop
      }
    }
  }
}
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	080103e0 	.word	0x080103e0
 800a04c:	08010844 	.word	0x08010844
 800a050:	0801042c 	.word	0x0801042c
 800a054:	200000e4 	.word	0x200000e4
 800a058:	200000ec 	.word	0x200000ec

0800a05c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a060:	4b05      	ldr	r3, [pc, #20]	; (800a078 <tcp_trigger_input_pcb_close+0x1c>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f043 0310 	orr.w	r3, r3, #16
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4b03      	ldr	r3, [pc, #12]	; (800a078 <tcp_trigger_input_pcb_close+0x1c>)
 800a06c:	701a      	strb	r2, [r3, #0]
}
 800a06e:	bf00      	nop
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	200000fd 	.word	0x200000fd

0800a07c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <tcp_route+0x28>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7a1b      	ldrb	r3, [r3, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d006      	beq.n	800a0a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	7a1b      	ldrb	r3, [r3, #8]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fb fb8e 	bl	80057bc <netif_get_by_index>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	e003      	b.n	800a0ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f002 fe91 	bl	800cdcc <ip4_route>
 800a0aa:	4603      	mov	r3, r0
  }
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d105      	bne.n	800a0d6 <tcp_create_segment+0x22>
 800a0ca:	4b45      	ldr	r3, [pc, #276]	; (800a1e0 <tcp_create_segment+0x12c>)
 800a0cc:	22a3      	movs	r2, #163	; 0xa3
 800a0ce:	4945      	ldr	r1, [pc, #276]	; (800a1e4 <tcp_create_segment+0x130>)
 800a0d0:	4845      	ldr	r0, [pc, #276]	; (800a1e8 <tcp_create_segment+0x134>)
 800a0d2:	f004 f8a3 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <tcp_create_segment+0x34>
 800a0dc:	4b40      	ldr	r3, [pc, #256]	; (800a1e0 <tcp_create_segment+0x12c>)
 800a0de:	22a4      	movs	r2, #164	; 0xa4
 800a0e0:	4942      	ldr	r1, [pc, #264]	; (800a1ec <tcp_create_segment+0x138>)
 800a0e2:	4841      	ldr	r0, [pc, #260]	; (800a1e8 <tcp_create_segment+0x134>)
 800a0e4:	f004 f89a 	bl	800e21c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a0e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 0304 	and.w	r3, r3, #4
 800a0f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a0f6:	2003      	movs	r0, #3
 800a0f8:	f7fb f85c 	bl	80051b4 <memp_malloc>
 800a0fc:	6138      	str	r0, [r7, #16]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d104      	bne.n	800a10e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f7fb fe95 	bl	8005e34 <pbuf_free>
    return NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	e064      	b.n	800a1d8 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a114:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d205      	bcs.n	800a13a <tcp_create_segment+0x86>
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <tcp_create_segment+0x12c>)
 800a130:	22b0      	movs	r2, #176	; 0xb0
 800a132:	492f      	ldr	r1, [pc, #188]	; (800a1f0 <tcp_create_segment+0x13c>)
 800a134:	482c      	ldr	r0, [pc, #176]	; (800a1e8 <tcp_create_segment+0x134>)
 800a136:	f004 f871 	bl	800e21c <iprintf>
  seg->len = p->tot_len - optlen;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	891a      	ldrh	r2, [r3, #8]
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	b29b      	uxth	r3, r3
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	b29a      	uxth	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2200      	movs	r2, #0
 800a14e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a150:	2114      	movs	r1, #20
 800a152:	68b8      	ldr	r0, [r7, #8]
 800a154:	f7fb fdd8 	bl	8005d08 <pbuf_add_header>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a15e:	6938      	ldr	r0, [r7, #16]
 800a160:	f7fd f8d0 	bl	8007304 <tcp_seg_free>
    return NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	e037      	b.n	800a1d8 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8ada      	ldrh	r2, [r3, #22]
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	691c      	ldr	r4, [r3, #16]
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fa fbc5 	bl	800490a <lwip_htons>
 800a180:	4603      	mov	r3, r0
 800a182:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8b1a      	ldrh	r2, [r3, #24]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	691c      	ldr	r4, [r3, #16]
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fa fbbc 	bl	800490a <lwip_htons>
 800a192:	4603      	mov	r3, r0
 800a194:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	691c      	ldr	r4, [r3, #16]
 800a19a:	6838      	ldr	r0, [r7, #0]
 800a19c:	f7fa fbca 	bl	8004934 <lwip_htonl>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	089b      	lsrs	r3, r3, #2
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3305      	adds	r3, #5
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	031b      	lsls	r3, r3, #12
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	691c      	ldr	r4, [r3, #16]
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f7fa fba2 	bl	800490a <lwip_htons>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	749a      	strb	r2, [r3, #18]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	74da      	strb	r2, [r3, #19]
  return seg;
 800a1d6:	693b      	ldr	r3, [r7, #16]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd90      	pop	{r4, r7, pc}
 800a1e0:	08010860 	.word	0x08010860
 800a1e4:	08010894 	.word	0x08010894
 800a1e8:	080108b4 	.word	0x080108b4
 800a1ec:	080108dc 	.word	0x080108dc
 800a1f0:	08010900 	.word	0x08010900

0800a1f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b08b      	sub	sp, #44	; 0x2c
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a200:	2300      	movs	r3, #0
 800a202:	61bb      	str	r3, [r7, #24]
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a208:	2300      	movs	r3, #0
 800a20a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <tcp_split_unsent_seg+0x2c>
 800a212:	4b97      	ldr	r3, [pc, #604]	; (800a470 <tcp_split_unsent_seg+0x27c>)
 800a214:	f240 324b 	movw	r2, #843	; 0x34b
 800a218:	4996      	ldr	r1, [pc, #600]	; (800a474 <tcp_split_unsent_seg+0x280>)
 800a21a:	4897      	ldr	r0, [pc, #604]	; (800a478 <tcp_split_unsent_seg+0x284>)
 800a21c:	f003 fffe 	bl	800e21c <iprintf>

  useg = pcb->unsent;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a224:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
 800a230:	e119      	b.n	800a466 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800a232:	887b      	ldrh	r3, [r7, #2]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a238:	4b8d      	ldr	r3, [pc, #564]	; (800a470 <tcp_split_unsent_seg+0x27c>)
 800a23a:	f240 3253 	movw	r2, #851	; 0x353
 800a23e:	498f      	ldr	r1, [pc, #572]	; (800a47c <tcp_split_unsent_seg+0x288>)
 800a240:	488d      	ldr	r0, [pc, #564]	; (800a478 <tcp_split_unsent_seg+0x284>)
 800a242:	f003 ffeb 	bl	800e21c <iprintf>
    return ERR_VAL;
 800a246:	f06f 0305 	mvn.w	r3, #5
 800a24a:	e10c      	b.n	800a466 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	887a      	ldrh	r2, [r7, #2]
 800a252:	429a      	cmp	r2, r3
 800a254:	d301      	bcc.n	800a25a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	e105      	b.n	800a466 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a25e:	887a      	ldrh	r2, [r7, #2]
 800a260:	429a      	cmp	r2, r3
 800a262:	d906      	bls.n	800a272 <tcp_split_unsent_seg+0x7e>
 800a264:	4b82      	ldr	r3, [pc, #520]	; (800a470 <tcp_split_unsent_seg+0x27c>)
 800a266:	f240 325b 	movw	r2, #859	; 0x35b
 800a26a:	4985      	ldr	r1, [pc, #532]	; (800a480 <tcp_split_unsent_seg+0x28c>)
 800a26c:	4882      	ldr	r0, [pc, #520]	; (800a478 <tcp_split_unsent_seg+0x284>)
 800a26e:	f003 ffd5 	bl	800e21c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <tcp_split_unsent_seg+0x94>
 800a27a:	4b7d      	ldr	r3, [pc, #500]	; (800a470 <tcp_split_unsent_seg+0x27c>)
 800a27c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a280:	4980      	ldr	r1, [pc, #512]	; (800a484 <tcp_split_unsent_seg+0x290>)
 800a282:	487d      	ldr	r0, [pc, #500]	; (800a478 <tcp_split_unsent_seg+0x284>)
 800a284:	f003 ffca 	bl	800e21c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	7b1b      	ldrb	r3, [r3, #12]
 800a28c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	891a      	ldrh	r2, [r3, #8]
 800a29e:	887b      	ldrh	r3, [r7, #2]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	89bb      	ldrh	r3, [r7, #12]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	2036      	movs	r0, #54	; 0x36
 800a2b6:	f7fb fadd 	bl	8005874 <pbuf_alloc>
 800a2ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 80ba 	beq.w	800a438 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	891a      	ldrh	r2, [r3, #8]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	891b      	ldrh	r3, [r3, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	887b      	ldrh	r3, [r7, #2]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	6858      	ldr	r0, [r3, #4]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	18d1      	adds	r1, r2, r3
 800a2e4:	897b      	ldrh	r3, [r7, #10]
 800a2e6:	89ba      	ldrh	r2, [r7, #12]
 800a2e8:	f7fb ff8e 	bl	8006208 <pbuf_copy_partial>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	89bb      	ldrh	r3, [r7, #12]
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	f040 80a2 	bne.w	800a43c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	899b      	ldrh	r3, [r3, #12]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4618      	mov	r0, r3
 800a302:	f7fa fb02 	bl	800490a <lwip_htons>
 800a306:	4603      	mov	r3, r0
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a30e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a310:	2300      	movs	r3, #0
 800a312:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800a314:	7ffb      	ldrb	r3, [r7, #31]
 800a316:	f003 0308 	and.w	r3, r3, #8
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a31e:	7ffb      	ldrb	r3, [r7, #31]
 800a320:	f023 0308 	bic.w	r3, r3, #8
 800a324:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800a326:	7fbb      	ldrb	r3, [r7, #30]
 800a328:	f043 0308 	orr.w	r3, r3, #8
 800a32c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800a32e:	7ffb      	ldrb	r3, [r7, #31]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a338:	7ffb      	ldrb	r3, [r7, #31]
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800a340:	7fbb      	ldrb	r3, [r7, #30]
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fa faf0 	bl	8004934 <lwip_htonl>
 800a354:	4602      	mov	r2, r0
 800a356:	887b      	ldrh	r3, [r7, #2]
 800a358:	18d1      	adds	r1, r2, r3
 800a35a:	7fba      	ldrb	r2, [r7, #30]
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	460b      	mov	r3, r1
 800a362:	6939      	ldr	r1, [r7, #16]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fea5 	bl	800a0b4 <tcp_create_segment>
 800a36a:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d066      	beq.n	800a440 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	4618      	mov	r0, r3
 800a378:	f7fb fde4 	bl	8005f44 <pbuf_clen>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	b29a      	uxth	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	6858      	ldr	r0, [r3, #4]
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	891a      	ldrh	r2, [r3, #8]
 800a39a:	89bb      	ldrh	r3, [r7, #12]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f7fb fbc1 	bl	8005b28 <pbuf_realloc>
  useg->len -= remainder;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	891a      	ldrh	r2, [r3, #8]
 800a3aa:	89bb      	ldrh	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	899b      	ldrh	r3, [r3, #12]
 800a3ba:	b29c      	uxth	r4, r3
 800a3bc:	7ffb      	ldrb	r3, [r7, #31]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fa faa2 	bl	800490a <lwip_htons>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	4322      	orrs	r2, r4
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fb fdb0 	bl	8005f44 <pbuf_clen>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a3ee:	4413      	add	r3, r2
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fb fda1 	bl	8005f44 <pbuf_clen>
 800a402:	4603      	mov	r3, r0
 800a404:	461a      	mov	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a40c:	4413      	add	r3, r2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	e016      	b.n	800a466 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800a438:	bf00      	nop
 800a43a:	e002      	b.n	800a442 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800a43c:	bf00      	nop
 800a43e:	e000      	b.n	800a442 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800a440:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d006      	beq.n	800a456 <tcp_split_unsent_seg+0x262>
 800a448:	4b09      	ldr	r3, [pc, #36]	; (800a470 <tcp_split_unsent_seg+0x27c>)
 800a44a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a44e:	490e      	ldr	r1, [pc, #56]	; (800a488 <tcp_split_unsent_seg+0x294>)
 800a450:	4809      	ldr	r0, [pc, #36]	; (800a478 <tcp_split_unsent_seg+0x284>)
 800a452:	f003 fee3 	bl	800e21c <iprintf>
  if (p != NULL) {
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800a45c:	6938      	ldr	r0, [r7, #16]
 800a45e:	f7fb fce9 	bl	8005e34 <pbuf_free>
  }

  return ERR_MEM;
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a466:	4618      	mov	r0, r3
 800a468:	3724      	adds	r7, #36	; 0x24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd90      	pop	{r4, r7, pc}
 800a46e:	bf00      	nop
 800a470:	08010860 	.word	0x08010860
 800a474:	08010c50 	.word	0x08010c50
 800a478:	080108b4 	.word	0x080108b4
 800a47c:	08010c74 	.word	0x08010c74
 800a480:	08010c98 	.word	0x08010c98
 800a484:	08010ca8 	.word	0x08010ca8
 800a488:	08010cb8 	.word	0x08010cb8

0800a48c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <tcp_send_fin+0x1c>
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <tcp_send_fin+0x94>)
 800a49c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a4a0:	4920      	ldr	r1, [pc, #128]	; (800a524 <tcp_send_fin+0x98>)
 800a4a2:	4821      	ldr	r0, [pc, #132]	; (800a528 <tcp_send_fin+0x9c>)
 800a4a4:	f003 feba 	bl	800e21c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02e      	beq.n	800a50e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	e002      	b.n	800a4be <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f8      	bne.n	800a4b8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	899b      	ldrh	r3, [r3, #12]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fa fa1b 	bl	800490a <lwip_htons>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d116      	bne.n	800a50e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	899b      	ldrh	r3, [r3, #12]
 800a4e6:	b29c      	uxth	r4, r3
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	f7fa fa0e 	bl	800490a <lwip_htons>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	4322      	orrs	r2, r4
 800a4f8:	b292      	uxth	r2, r2
 800a4fa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8b5b      	ldrh	r3, [r3, #26]
 800a500:	f043 0320 	orr.w	r3, r3, #32
 800a504:	b29a      	uxth	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e004      	b.n	800a518 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a50e:	2101      	movs	r1, #1
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f80b 	bl	800a52c <tcp_enqueue_flags>
 800a516:	4603      	mov	r3, r0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd90      	pop	{r4, r7, pc}
 800a520:	08010860 	.word	0x08010860
 800a524:	08010cc4 	.word	0x08010cc4
 800a528:	080108b4 	.word	0x080108b4

0800a52c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af02      	add	r7, sp, #8
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <tcp_enqueue_flags+0x2c>
 800a54a:	4b67      	ldr	r3, [pc, #412]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a54c:	f240 4212 	movw	r2, #1042	; 0x412
 800a550:	4966      	ldr	r1, [pc, #408]	; (800a6ec <tcp_enqueue_flags+0x1c0>)
 800a552:	4867      	ldr	r0, [pc, #412]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a554:	f003 fe62 	bl	800e21c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d106      	bne.n	800a56c <tcp_enqueue_flags+0x40>
 800a55e:	4b62      	ldr	r3, [pc, #392]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a560:	f240 4213 	movw	r2, #1043	; 0x413
 800a564:	4963      	ldr	r1, [pc, #396]	; (800a6f4 <tcp_enqueue_flags+0x1c8>)
 800a566:	4862      	ldr	r0, [pc, #392]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a568:	f003 fe58 	bl	800e21c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a576:	2301      	movs	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a586:	7dbb      	ldrb	r3, [r7, #22]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a58e:	4619      	mov	r1, r3
 800a590:	2036      	movs	r0, #54	; 0x36
 800a592:	f7fb f96f 	bl	8005874 <pbuf_alloc>
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8b5b      	ldrh	r3, [r3, #26]
 800a5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	e095      	b.n	800a6de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	895a      	ldrh	r2, [r3, #10]
 800a5b6:	7dbb      	ldrb	r3, [r7, #22]
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d206      	bcs.n	800a5cc <tcp_enqueue_flags+0xa0>
 800a5be:	4b4a      	ldr	r3, [pc, #296]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a5c0:	f240 423a 	movw	r2, #1082	; 0x43a
 800a5c4:	494c      	ldr	r1, [pc, #304]	; (800a6f8 <tcp_enqueue_flags+0x1cc>)
 800a5c6:	484a      	ldr	r0, [pc, #296]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a5c8:	f003 fe28 	bl	800e21c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fd6a 	bl	800a0b4 <tcp_create_segment>
 800a5e0:	60b8      	str	r0, [r7, #8]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d109      	bne.n	800a5fc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	8b5b      	ldrh	r3, [r3, #26]
 800a5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fa:	e070      	b.n	800a6de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	f003 0303 	and.w	r3, r3, #3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <tcp_enqueue_flags+0xea>
 800a608:	4b37      	ldr	r3, [pc, #220]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a60a:	f240 4242 	movw	r2, #1090	; 0x442
 800a60e:	493b      	ldr	r1, [pc, #236]	; (800a6fc <tcp_enqueue_flags+0x1d0>)
 800a610:	4837      	ldr	r0, [pc, #220]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a612:	f003 fe03 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	891b      	ldrh	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d006      	beq.n	800a62c <tcp_enqueue_flags+0x100>
 800a61e:	4b32      	ldr	r3, [pc, #200]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a620:	f240 4243 	movw	r2, #1091	; 0x443
 800a624:	4936      	ldr	r1, [pc, #216]	; (800a700 <tcp_enqueue_flags+0x1d4>)
 800a626:	4832      	ldr	r0, [pc, #200]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a628:	f003 fdf8 	bl	800e21c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	66da      	str	r2, [r3, #108]	; 0x6c
 800a63a:	e00d      	b.n	800a658 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	613b      	str	r3, [r7, #16]
 800a642:	e002      	b.n	800a64a <tcp_enqueue_flags+0x11e>
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f8      	bne.n	800a644 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <tcp_enqueue_flags+0x148>
 800a66a:	78fb      	ldrb	r3, [r7, #3]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d006      	beq.n	800a696 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8b5b      	ldrh	r3, [r3, #26]
 800a68c:	f043 0320 	orr.w	r3, r3, #32
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fb fc52 	bl	8005f44 <pbuf_clen>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6aa:	4413      	add	r3, r2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <tcp_enqueue_flags+0x1b0>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <tcp_enqueue_flags+0x1b0>
 800a6ce:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <tcp_enqueue_flags+0x1bc>)
 800a6d0:	f240 4266 	movw	r2, #1126	; 0x466
 800a6d4:	490b      	ldr	r1, [pc, #44]	; (800a704 <tcp_enqueue_flags+0x1d8>)
 800a6d6:	4806      	ldr	r0, [pc, #24]	; (800a6f0 <tcp_enqueue_flags+0x1c4>)
 800a6d8:	f003 fda0 	bl	800e21c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	08010860 	.word	0x08010860
 800a6ec:	08010ce0 	.word	0x08010ce0
 800a6f0:	080108b4 	.word	0x080108b4
 800a6f4:	08010d38 	.word	0x08010d38
 800a6f8:	08010d58 	.word	0x08010d58
 800a6fc:	08010d94 	.word	0x08010d94
 800a700:	08010dac 	.word	0x08010dac
 800a704:	08010dd8 	.word	0x08010dd8

0800a708 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a708:	b5b0      	push	{r4, r5, r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <tcp_output+0x1c>
 800a716:	4ba2      	ldr	r3, [pc, #648]	; (800a9a0 <tcp_output+0x298>)
 800a718:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a71c:	49a1      	ldr	r1, [pc, #644]	; (800a9a4 <tcp_output+0x29c>)
 800a71e:	48a2      	ldr	r0, [pc, #648]	; (800a9a8 <tcp_output+0x2a0>)
 800a720:	f003 fd7c 	bl	800e21c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7d1b      	ldrb	r3, [r3, #20]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d106      	bne.n	800a73a <tcp_output+0x32>
 800a72c:	4b9c      	ldr	r3, [pc, #624]	; (800a9a0 <tcp_output+0x298>)
 800a72e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800a732:	499e      	ldr	r1, [pc, #632]	; (800a9ac <tcp_output+0x2a4>)
 800a734:	489c      	ldr	r0, [pc, #624]	; (800a9a8 <tcp_output+0x2a0>)
 800a736:	f003 fd71 	bl	800e21c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a73a:	4b9d      	ldr	r3, [pc, #628]	; (800a9b0 <tcp_output+0x2a8>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d101      	bne.n	800a748 <tcp_output+0x40>
    return ERR_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	e1d6      	b.n	800aaf6 <tcp_output+0x3ee>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a754:	429a      	cmp	r2, r3
 800a756:	d203      	bcs.n	800a760 <tcp_output+0x58>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a75e:	e002      	b.n	800a766 <tcp_output+0x5e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a766:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8b5b      	ldrh	r3, [r3, #26]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 81ad 	beq.w	800aadc <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fde4 	bl	800b350 <tcp_send_empty_ack>
 800a788:	4603      	mov	r3, r0
 800a78a:	e1b4      	b.n	800aaf6 <tcp_output+0x3ee>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3304      	adds	r3, #4
 800a792:	461a      	mov	r2, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fc71 	bl	800a07c <tcp_route>
 800a79a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <tcp_output+0xa0>
    return ERR_RTE;
 800a7a2:	f06f 0303 	mvn.w	r3, #3
 800a7a6:	e1a6      	b.n	800aaf6 <tcp_output+0x3ee>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <tcp_output+0xae>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d111      	bne.n	800a7da <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <tcp_output+0xba>
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	e000      	b.n	800a7c4 <tcp_output+0xbc>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <tcp_output+0xca>
      return ERR_RTE;
 800a7cc:	f06f 0303 	mvn.w	r3, #3
 800a7d0:	e191      	b.n	800aaf6 <tcp_output+0x3ee>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fa f8a7 	bl	8004934 <lwip_htonl>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f0:	8912      	ldrh	r2, [r2, #8]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d227      	bcs.n	800a84a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a800:	461a      	mov	r2, r3
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	4293      	cmp	r3, r2
 800a806:	d114      	bne.n	800a832 <tcp_output+0x12a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d110      	bne.n	800a832 <tcp_output+0x12a>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	8b5b      	ldrh	r3, [r3, #26]
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 8150 	beq.w	800aae0 <tcp_output+0x3d8>
      return tcp_send_empty_ack(pcb);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fd85 	bl	800b350 <tcp_send_empty_ack>
 800a846:	4603      	mov	r3, r0
 800a848:	e155      	b.n	800aaf6 <tcp_output+0x3ee>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 811f 	beq.w	800aa9e <tcp_output+0x396>
    for (; useg->next != NULL; useg = useg->next);
 800a860:	e002      	b.n	800a868 <tcp_output+0x160>
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	623b      	str	r3, [r7, #32]
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1f8      	bne.n	800a862 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a870:	e115      	b.n	800aa9e <tcp_output+0x396>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	899b      	ldrh	r3, [r3, #12]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fa f845 	bl	800490a <lwip_htons>
 800a880:	4603      	mov	r3, r0
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d006      	beq.n	800a89a <tcp_output+0x192>
 800a88c:	4b44      	ldr	r3, [pc, #272]	; (800a9a0 <tcp_output+0x298>)
 800a88e:	f240 5237 	movw	r2, #1335	; 0x537
 800a892:	4948      	ldr	r1, [pc, #288]	; (800a9b4 <tcp_output+0x2ac>)
 800a894:	4844      	ldr	r0, [pc, #272]	; (800a9a8 <tcp_output+0x2a0>)
 800a896:	f003 fcc1 	bl	800e21c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01f      	beq.n	800a8e2 <tcp_output+0x1da>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8b5b      	ldrh	r3, [r3, #26]
 800a8a6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d119      	bne.n	800a8e2 <tcp_output+0x1da>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00b      	beq.n	800a8ce <tcp_output+0x1c6>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d110      	bne.n	800a8e2 <tcp_output+0x1da>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	891a      	ldrh	r2, [r3, #8]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d209      	bcs.n	800a8e2 <tcp_output+0x1da>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <tcp_output+0x1da>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d901      	bls.n	800a8e6 <tcp_output+0x1de>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <tcp_output+0x1e0>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8b5b      	ldrh	r3, [r3, #26]
 800a8f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 80e7 	beq.w	800aac8 <tcp_output+0x3c0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7d1b      	ldrb	r3, [r3, #20]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d00d      	beq.n	800a91e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	899b      	ldrh	r3, [r3, #12]
 800a908:	b29c      	uxth	r4, r3
 800a90a:	2010      	movs	r0, #16
 800a90c:	f7f9 fffd 	bl	800490a <lwip_htons>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	4322      	orrs	r2, r4
 800a91a:	b292      	uxth	r2, r2
 800a91c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	6879      	ldr	r1, [r7, #4]
 800a922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a924:	f000 f90c 	bl	800ab40 <tcp_output_segment>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	8b5b      	ldrh	r3, [r3, #26]
 800a938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	835a      	strh	r2, [r3, #26]
      return err;
 800a942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a946:	e0d6      	b.n	800aaf6 <tcp_output+0x3ee>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	2200      	movs	r2, #0
 800a94c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7d1b      	ldrb	r3, [r3, #20]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d006      	beq.n	800a96c <tcp_output+0x264>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	8b5b      	ldrh	r3, [r3, #26]
 800a962:	f023 0303 	bic.w	r3, r3, #3
 800a966:	b29a      	uxth	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	4618      	mov	r0, r3
 800a974:	f7f9 ffde 	bl	8004934 <lwip_htonl>
 800a978:	4604      	mov	r4, r0
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	891b      	ldrh	r3, [r3, #8]
 800a97e:	461d      	mov	r5, r3
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	899b      	ldrh	r3, [r3, #12]
 800a986:	b29b      	uxth	r3, r3
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f9 ffbe 	bl	800490a <lwip_htons>
 800a98e:	4603      	mov	r3, r0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00e      	beq.n	800a9b8 <tcp_output+0x2b0>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e00d      	b.n	800a9ba <tcp_output+0x2b2>
 800a99e:	bf00      	nop
 800a9a0:	08010860 	.word	0x08010860
 800a9a4:	08010e00 	.word	0x08010e00
 800a9a8:	080108b4 	.word	0x080108b4
 800a9ac:	08010e18 	.word	0x08010e18
 800a9b0:	20006964 	.word	0x20006964
 800a9b4:	08010e40 	.word	0x08010e40
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	442b      	add	r3, r5
 800a9bc:	4423      	add	r3, r4
 800a9be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da02      	bge.n	800a9d2 <tcp_output+0x2ca>
      pcb->snd_nxt = snd_nxt;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	891b      	ldrh	r3, [r3, #8]
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	899b      	ldrh	r3, [r3, #12]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f9 ff92 	bl	800490a <lwip_htons>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <tcp_output+0x2ee>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <tcp_output+0x2f0>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4423      	add	r3, r4
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d049      	beq.n	800aa92 <tcp_output+0x38a>
      seg->next = NULL;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d105      	bne.n	800aa18 <tcp_output+0x310>
        pcb->unacked = seg;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa10:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	623b      	str	r3, [r7, #32]
 800aa16:	e03f      	b.n	800aa98 <tcp_output+0x390>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f9 ff88 	bl	8004934 <lwip_htonl>
 800aa24:	4604      	mov	r4, r0
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7f9 ff81 	bl	8004934 <lwip_htonl>
 800aa32:	4603      	mov	r3, r0
 800aa34:	1ae3      	subs	r3, r4, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	da24      	bge.n	800aa84 <tcp_output+0x37c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3370      	adds	r3, #112	; 0x70
 800aa3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa40:	e002      	b.n	800aa48 <tcp_output+0x340>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d011      	beq.n	800aa74 <tcp_output+0x36c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f9 ff6b 	bl	8004934 <lwip_htonl>
 800aa5e:	4604      	mov	r4, r0
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7f9 ff64 	bl	8004934 <lwip_htonl>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dbe6      	blt.n	800aa42 <tcp_output+0x33a>
          }
          seg->next = (*cur_seg);
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	e009      	b.n	800aa98 <tcp_output+0x390>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	623b      	str	r3, [r7, #32]
 800aa90:	e002      	b.n	800aa98 <tcp_output+0x390>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aa92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa94:	f7fc fc36 	bl	8007304 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d012      	beq.n	800aaca <tcp_output+0x3c2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7f9 ff42 	bl	8004934 <lwip_htonl>
 800aab0:	4602      	mov	r2, r0
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaba:	8912      	ldrh	r2, [r2, #8]
 800aabc:	4413      	add	r3, r2
  while (seg != NULL &&
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	f4bf aed6 	bcs.w	800a872 <tcp_output+0x16a>
 800aac6:	e000      	b.n	800aaca <tcp_output+0x3c2>
      break;
 800aac8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d108      	bne.n	800aae4 <tcp_output+0x3dc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aada:	e004      	b.n	800aae6 <tcp_output+0x3de>
    goto output_done;
 800aadc:	bf00      	nop
 800aade:	e002      	b.n	800aae6 <tcp_output+0x3de>
    goto output_done;
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <tcp_output+0x3de>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aae4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8b5b      	ldrh	r3, [r3, #26]
 800aaea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3728      	adds	r7, #40	; 0x28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bdb0      	pop	{r4, r5, r7, pc}
 800aafe:	bf00      	nop

0800ab00 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <tcp_output_segment_busy+0x1c>
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <tcp_output_segment_busy+0x34>)
 800ab10:	f240 529a 	movw	r2, #1434	; 0x59a
 800ab14:	4908      	ldr	r1, [pc, #32]	; (800ab38 <tcp_output_segment_busy+0x38>)
 800ab16:	4809      	ldr	r0, [pc, #36]	; (800ab3c <tcp_output_segment_busy+0x3c>)
 800ab18:	f003 fb80 	bl	800e21c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	7b9b      	ldrb	r3, [r3, #14]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d001      	beq.n	800ab2a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	08010860 	.word	0x08010860
 800ab38:	08010e58 	.word	0x08010e58
 800ab3c:	080108b4 	.word	0x080108b4

0800ab40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ab40:	b5b0      	push	{r4, r5, r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af04      	add	r7, sp, #16
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <tcp_output_segment+0x20>
 800ab52:	4b64      	ldr	r3, [pc, #400]	; (800ace4 <tcp_output_segment+0x1a4>)
 800ab54:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ab58:	4963      	ldr	r1, [pc, #396]	; (800ace8 <tcp_output_segment+0x1a8>)
 800ab5a:	4864      	ldr	r0, [pc, #400]	; (800acec <tcp_output_segment+0x1ac>)
 800ab5c:	f003 fb5e 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <tcp_output_segment+0x34>
 800ab66:	4b5f      	ldr	r3, [pc, #380]	; (800ace4 <tcp_output_segment+0x1a4>)
 800ab68:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ab6c:	4960      	ldr	r1, [pc, #384]	; (800acf0 <tcp_output_segment+0x1b0>)
 800ab6e:	485f      	ldr	r0, [pc, #380]	; (800acec <tcp_output_segment+0x1ac>)
 800ab70:	f003 fb54 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <tcp_output_segment+0x48>
 800ab7a:	4b5a      	ldr	r3, [pc, #360]	; (800ace4 <tcp_output_segment+0x1a4>)
 800ab7c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ab80:	495c      	ldr	r1, [pc, #368]	; (800acf4 <tcp_output_segment+0x1b4>)
 800ab82:	485a      	ldr	r0, [pc, #360]	; (800acec <tcp_output_segment+0x1ac>)
 800ab84:	f003 fb4a 	bl	800e21c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7ff ffb9 	bl	800ab00 <tcp_output_segment_busy>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e0a0      	b.n	800acda <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	691c      	ldr	r4, [r3, #16]
 800aba0:	4610      	mov	r0, r2
 800aba2:	f7f9 fec7 	bl	8004934 <lwip_htonl>
 800aba6:	4603      	mov	r3, r0
 800aba8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	691c      	ldr	r4, [r3, #16]
 800abb2:	4610      	mov	r0, r2
 800abb4:	f7f9 fea9 	bl	800490a <lwip_htons>
 800abb8:	4603      	mov	r3, r0
 800abba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800abc4:	441a      	add	r2, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	3314      	adds	r3, #20
 800abd0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	7b1b      	ldrb	r3, [r3, #12]
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d015      	beq.n	800ac0a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	3304      	adds	r3, #4
 800abe2:	461a      	mov	r2, r3
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800abea:	f7fc fe81 	bl	80078f0 <tcp_eff_send_mss_netif>
 800abee:	4603      	mov	r3, r0
 800abf0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800abf2:	8b7b      	ldrh	r3, [r7, #26]
 800abf4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7f9 fe9b 	bl	8004934 <lwip_htonl>
 800abfe:	4602      	mov	r2, r0
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	3304      	adds	r3, #4
 800ac08:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da02      	bge.n	800ac1a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10c      	bne.n	800ac3c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ac22:	4b35      	ldr	r3, [pc, #212]	; (800acf8 <tcp_output_segment+0x1b8>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7f9 fe7f 	bl	8004934 <lwip_htonl>
 800ac36:	4602      	mov	r2, r0
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	461a      	mov	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	8959      	ldrh	r1, [r3, #10]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	8b3a      	ldrh	r2, [r7, #24]
 800ac58:	1a8a      	subs	r2, r1, r2
 800ac5a:	b292      	uxth	r2, r2
 800ac5c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	8919      	ldrh	r1, [r3, #8]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	8b3a      	ldrh	r2, [r7, #24]
 800ac6a:	1a8a      	subs	r2, r1, r2
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	6912      	ldr	r2, [r2, #16]
 800ac78:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	741a      	strb	r2, [r3, #16]
 800ac82:	2200      	movs	r2, #0
 800ac84:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f103 0214 	add.w	r2, r3, #20
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	7b1b      	ldrb	r3, [r3, #12]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	f003 0304 	and.w	r3, r3, #4
 800ac98:	4413      	add	r3, r2
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d006      	beq.n	800acae <tcp_output_segment+0x16e>
 800aca0:	4b10      	ldr	r3, [pc, #64]	; (800ace4 <tcp_output_segment+0x1a4>)
 800aca2:	f240 621c 	movw	r2, #1564	; 0x61c
 800aca6:	4915      	ldr	r1, [pc, #84]	; (800acfc <tcp_output_segment+0x1bc>)
 800aca8:	4810      	ldr	r0, [pc, #64]	; (800acec <tcp_output_segment+0x1ac>)
 800acaa:	f003 fab7 	bl	800e21c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6858      	ldr	r0, [r3, #4]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	1d1c      	adds	r4, r3, #4
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	7add      	ldrb	r5, [r3, #11]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	7a9b      	ldrb	r3, [r3, #10]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	9202      	str	r2, [sp, #8]
 800acc4:	2206      	movs	r2, #6
 800acc6:	9201      	str	r2, [sp, #4]
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	462b      	mov	r3, r5
 800accc:	4622      	mov	r2, r4
 800acce:	f002 fa39 	bl	800d144 <ip4_output_if>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800acd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bdb0      	pop	{r4, r5, r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08010860 	.word	0x08010860
 800ace8:	08010e80 	.word	0x08010e80
 800acec:	080108b4 	.word	0x080108b4
 800acf0:	08010ea0 	.word	0x08010ea0
 800acf4:	08010ec0 	.word	0x08010ec0
 800acf8:	20006954 	.word	0x20006954
 800acfc:	08010ee4 	.word	0x08010ee4

0800ad00 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ad00:	b5b0      	push	{r4, r5, r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <tcp_rexmit_rto_prepare+0x1c>
 800ad0e:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <tcp_rexmit_rto_prepare+0xe8>)
 800ad10:	f240 6263 	movw	r2, #1635	; 0x663
 800ad14:	4935      	ldr	r1, [pc, #212]	; (800adec <tcp_rexmit_rto_prepare+0xec>)
 800ad16:	4836      	ldr	r0, [pc, #216]	; (800adf0 <tcp_rexmit_rto_prepare+0xf0>)
 800ad18:	f003 fa80 	bl	800e21c <iprintf>

  if (pcb->unacked == NULL) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ad24:	f06f 0305 	mvn.w	r3, #5
 800ad28:	e059      	b.n	800adde <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e00b      	b.n	800ad4a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fee4 	bl	800ab00 <tcp_output_segment_busy>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ad3e:	f06f 0305 	mvn.w	r3, #5
 800ad42:	e04c      	b.n	800adde <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1ef      	bne.n	800ad32 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff fed4 	bl	800ab00 <tcp_output_segment_busy>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ad5e:	f06f 0305 	mvn.w	r3, #5
 800ad62:	e03c      	b.n	800adde <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d104      	bne.n	800ad7e <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	895a      	ldrh	r2, [r3, #10]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	8b5b      	ldrh	r3, [r3, #26]
 800ad90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f9 fdc7 	bl	8004934 <lwip_htonl>
 800ada6:	4604      	mov	r4, r0
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	891b      	ldrh	r3, [r3, #8]
 800adac:	461d      	mov	r5, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f9 fda7 	bl	800490a <lwip_htons>
 800adbc:	4603      	mov	r3, r0
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <tcp_rexmit_rto_prepare+0xcc>
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <tcp_rexmit_rto_prepare+0xce>
 800adcc:	2300      	movs	r3, #0
 800adce:	442b      	add	r3, r5
 800add0:	18e2      	adds	r2, r4, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bdb0      	pop	{r4, r5, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	08010860 	.word	0x08010860
 800adec:	08010ef8 	.word	0x08010ef8
 800adf0:	080108b4 	.word	0x080108b4

0800adf4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <tcp_rexmit_rto_commit+0x1c>
 800ae02:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <tcp_rexmit_rto_commit+0x44>)
 800ae04:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ae08:	490c      	ldr	r1, [pc, #48]	; (800ae3c <tcp_rexmit_rto_commit+0x48>)
 800ae0a:	480d      	ldr	r0, [pc, #52]	; (800ae40 <tcp_rexmit_rto_commit+0x4c>)
 800ae0c:	f003 fa06 	bl	800e21c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae16:	2bff      	cmp	r3, #255	; 0xff
 800ae18:	d007      	beq.n	800ae2a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae20:	3301      	adds	r3, #1
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7ff fc6c 	bl	800a708 <tcp_output>
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	08010860 	.word	0x08010860
 800ae3c:	08010f1c 	.word	0x08010f1c
 800ae40:	080108b4 	.word	0x080108b4

0800ae44 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <tcp_rexmit_rto+0x1c>
 800ae52:	4b0a      	ldr	r3, [pc, #40]	; (800ae7c <tcp_rexmit_rto+0x38>)
 800ae54:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ae58:	4909      	ldr	r1, [pc, #36]	; (800ae80 <tcp_rexmit_rto+0x3c>)
 800ae5a:	480a      	ldr	r0, [pc, #40]	; (800ae84 <tcp_rexmit_rto+0x40>)
 800ae5c:	f003 f9de 	bl	800e21c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ff4d 	bl	800ad00 <tcp_rexmit_rto_prepare>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d102      	bne.n	800ae72 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ffc1 	bl	800adf4 <tcp_rexmit_rto_commit>
  }
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	08010860 	.word	0x08010860
 800ae80:	08010f40 	.word	0x08010f40
 800ae84:	080108b4 	.word	0x080108b4

0800ae88 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d106      	bne.n	800aea4 <tcp_rexmit+0x1c>
 800ae96:	4b2f      	ldr	r3, [pc, #188]	; (800af54 <tcp_rexmit+0xcc>)
 800ae98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ae9c:	492e      	ldr	r1, [pc, #184]	; (800af58 <tcp_rexmit+0xd0>)
 800ae9e:	482f      	ldr	r0, [pc, #188]	; (800af5c <tcp_rexmit+0xd4>)
 800aea0:	f003 f9bc 	bl	800e21c <iprintf>

  if (pcb->unacked == NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800aeac:	f06f 0305 	mvn.w	r3, #5
 800aeb0:	e04c      	b.n	800af4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800aeb8:	68b8      	ldr	r0, [r7, #8]
 800aeba:	f7ff fe21 	bl	800ab00 <tcp_output_segment_busy>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800aec4:	f06f 0305 	mvn.w	r3, #5
 800aec8:	e040      	b.n	800af4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	336c      	adds	r3, #108	; 0x6c
 800aed6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aed8:	e002      	b.n	800aee0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d011      	beq.n	800af0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7f9 fd1f 	bl	8004934 <lwip_htonl>
 800aef6:	4604      	mov	r4, r0
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f9 fd18 	bl	8004934 <lwip_htonl>
 800af04:	4603      	mov	r3, r0
 800af06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dbe6      	blt.n	800aeda <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af30:	2bff      	cmp	r3, #255	; 0xff
 800af32:	d007      	beq.n	800af44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af3a:	3301      	adds	r3, #1
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	bd90      	pop	{r4, r7, pc}
 800af54:	08010860 	.word	0x08010860
 800af58:	08010f5c 	.word	0x08010f5c
 800af5c:	080108b4 	.word	0x080108b4

0800af60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <tcp_rexmit_fast+0x1c>
 800af6e:	4b2e      	ldr	r3, [pc, #184]	; (800b028 <tcp_rexmit_fast+0xc8>)
 800af70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800af74:	492d      	ldr	r1, [pc, #180]	; (800b02c <tcp_rexmit_fast+0xcc>)
 800af76:	482e      	ldr	r0, [pc, #184]	; (800b030 <tcp_rexmit_fast+0xd0>)
 800af78:	f003 f950 	bl	800e21c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af80:	2b00      	cmp	r3, #0
 800af82:	d04d      	beq.n	800b020 <tcp_rexmit_fast+0xc0>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8b5b      	ldrh	r3, [r3, #26]
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d147      	bne.n	800b020 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ff79 	bl	800ae88 <tcp_rexmit>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d141      	bne.n	800b020 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d207      	bcs.n	800afbc <tcp_rexmit_fast+0x5c>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800afb2:	0fda      	lsrs	r2, r3, #31
 800afb4:	4413      	add	r3, r2
 800afb6:	105b      	asrs	r3, r3, #1
 800afb8:	b29b      	uxth	r3, r3
 800afba:	e006      	b.n	800afca <tcp_rexmit_fast+0x6a>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afc2:	0fda      	lsrs	r2, r3, #31
 800afc4:	4413      	add	r3, r2
 800afc6:	105b      	asrs	r3, r3, #1
 800afc8:	b29b      	uxth	r3, r3
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800afd6:	461a      	mov	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	429a      	cmp	r2, r3
 800afe0:	d206      	bcs.n	800aff0 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	b29a      	uxth	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800affa:	4619      	mov	r1, r3
 800affc:	0049      	lsls	r1, r1, #1
 800affe:	440b      	add	r3, r1
 800b000:	b29b      	uxth	r3, r3
 800b002:	4413      	add	r3, r2
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8b5b      	ldrh	r3, [r3, #26]
 800b010:	f043 0304 	orr.w	r3, r3, #4
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	08010860 	.word	0x08010860
 800b02c:	08010f74 	.word	0x08010f74
 800b030:	080108b4 	.word	0x080108b4

0800b034 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	607b      	str	r3, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	817b      	strh	r3, [r7, #10]
 800b042:	4613      	mov	r3, r2
 800b044:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b046:	897a      	ldrh	r2, [r7, #10]
 800b048:	893b      	ldrh	r3, [r7, #8]
 800b04a:	4413      	add	r3, r2
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	3314      	adds	r3, #20
 800b050:	b29b      	uxth	r3, r3
 800b052:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b056:	4619      	mov	r1, r3
 800b058:	2022      	movs	r0, #34	; 0x22
 800b05a:	f7fa fc0b 	bl	8005874 <pbuf_alloc>
 800b05e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d04e      	beq.n	800b104 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	895b      	ldrh	r3, [r3, #10]
 800b06a:	461a      	mov	r2, r3
 800b06c:	897b      	ldrh	r3, [r7, #10]
 800b06e:	3314      	adds	r3, #20
 800b070:	429a      	cmp	r2, r3
 800b072:	da06      	bge.n	800b082 <tcp_output_alloc_header_common+0x4e>
 800b074:	4b26      	ldr	r3, [pc, #152]	; (800b110 <tcp_output_alloc_header_common+0xdc>)
 800b076:	f240 7224 	movw	r2, #1828	; 0x724
 800b07a:	4926      	ldr	r1, [pc, #152]	; (800b114 <tcp_output_alloc_header_common+0xe0>)
 800b07c:	4826      	ldr	r0, [pc, #152]	; (800b118 <tcp_output_alloc_header_common+0xe4>)
 800b07e:	f003 f8cd 	bl	800e21c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b088:	8c3b      	ldrh	r3, [r7, #32]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 fc3d 	bl	800490a <lwip_htons>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f9 fc35 	bl	800490a <lwip_htons>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7f9 fc40 	bl	8004934 <lwip_htonl>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b0ba:	897b      	ldrh	r3, [r7, #10]
 800b0bc:	089b      	lsrs	r3, r3, #2
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	3305      	adds	r3, #5
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	031b      	lsls	r3, r3, #12
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f9 fc19 	bl	800490a <lwip_htons>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	461a      	mov	r2, r3
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b0e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7f9 fc11 	bl	800490a <lwip_htons>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	741a      	strb	r2, [r3, #16]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	749a      	strb	r2, [r3, #18]
 800b100:	2200      	movs	r2, #0
 800b102:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b104:	697b      	ldr	r3, [r7, #20]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	08010860 	.word	0x08010860
 800b114:	08010f94 	.word	0x08010f94
 800b118:	080108b4 	.word	0x080108b4

0800b11c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b11c:	b5b0      	push	{r4, r5, r7, lr}
 800b11e:	b08a      	sub	sp, #40	; 0x28
 800b120:	af04      	add	r7, sp, #16
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	817b      	strh	r3, [r7, #10]
 800b12a:	4613      	mov	r3, r2
 800b12c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d106      	bne.n	800b142 <tcp_output_alloc_header+0x26>
 800b134:	4b15      	ldr	r3, [pc, #84]	; (800b18c <tcp_output_alloc_header+0x70>)
 800b136:	f240 7242 	movw	r2, #1858	; 0x742
 800b13a:	4915      	ldr	r1, [pc, #84]	; (800b190 <tcp_output_alloc_header+0x74>)
 800b13c:	4815      	ldr	r0, [pc, #84]	; (800b194 <tcp_output_alloc_header+0x78>)
 800b13e:	f003 f86d 	bl	800e21c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	8adb      	ldrh	r3, [r3, #22]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	8b12      	ldrh	r2, [r2, #24]
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b152:	893d      	ldrh	r5, [r7, #8]
 800b154:	897c      	ldrh	r4, [r7, #10]
 800b156:	9103      	str	r1, [sp, #12]
 800b158:	2110      	movs	r1, #16
 800b15a:	9102      	str	r1, [sp, #8]
 800b15c:	9201      	str	r2, [sp, #4]
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	462a      	mov	r2, r5
 800b164:	4621      	mov	r1, r4
 800b166:	f7ff ff65 	bl	800b034 <tcp_output_alloc_header_common>
 800b16a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b17a:	441a      	add	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b180:	697b      	ldr	r3, [r7, #20]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bdb0      	pop	{r4, r5, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	08010860 	.word	0x08010860
 800b190:	08010fc4 	.word	0x08010fc4
 800b194:	080108b4 	.word	0x080108b4

0800b198 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	71fb      	strb	r3, [r7, #7]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <tcp_output_fill_options+0x2e>
 800b1b8:	4b13      	ldr	r3, [pc, #76]	; (800b208 <tcp_output_fill_options+0x70>)
 800b1ba:	f240 7256 	movw	r2, #1878	; 0x756
 800b1be:	4913      	ldr	r1, [pc, #76]	; (800b20c <tcp_output_fill_options+0x74>)
 800b1c0:	4813      	ldr	r0, [pc, #76]	; (800b210 <tcp_output_fill_options+0x78>)
 800b1c2:	f003 f82b 	bl	800e21c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	3314      	adds	r3, #20
 800b1d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	f103 0214 	add.w	r2, r3, #20
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4619      	mov	r1, r3
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	440b      	add	r3, r1
 800b1e8:	4413      	add	r3, r2
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d006      	beq.n	800b1fe <tcp_output_fill_options+0x66>
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <tcp_output_fill_options+0x70>)
 800b1f2:	f240 7275 	movw	r2, #1909	; 0x775
 800b1f6:	4907      	ldr	r1, [pc, #28]	; (800b214 <tcp_output_fill_options+0x7c>)
 800b1f8:	4805      	ldr	r0, [pc, #20]	; (800b210 <tcp_output_fill_options+0x78>)
 800b1fa:	f003 f80f 	bl	800e21c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b1fe:	bf00      	nop
 800b200:	3720      	adds	r7, #32
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	08010860 	.word	0x08010860
 800b20c:	08010fec 	.word	0x08010fec
 800b210:	080108b4 	.word	0x080108b4
 800b214:	08010ee4 	.word	0x08010ee4

0800b218 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08a      	sub	sp, #40	; 0x28
 800b21c:	af04      	add	r7, sp, #16
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <tcp_output_control_segment+0x22>
 800b22c:	4b1c      	ldr	r3, [pc, #112]	; (800b2a0 <tcp_output_control_segment+0x88>)
 800b22e:	f240 7287 	movw	r2, #1927	; 0x787
 800b232:	491c      	ldr	r1, [pc, #112]	; (800b2a4 <tcp_output_control_segment+0x8c>)
 800b234:	481c      	ldr	r0, [pc, #112]	; (800b2a8 <tcp_output_control_segment+0x90>)
 800b236:	f002 fff1 	bl	800e21c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7fe ff1c 	bl	800a07c <tcp_route>
 800b244:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d102      	bne.n	800b252 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b24c:	23fc      	movs	r3, #252	; 0xfc
 800b24e:	75fb      	strb	r3, [r7, #23]
 800b250:	e01c      	b.n	800b28c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	7adb      	ldrb	r3, [r3, #11]
 800b25c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	7a9b      	ldrb	r3, [r3, #10]
 800b262:	757b      	strb	r3, [r7, #21]
 800b264:	e003      	b.n	800b26e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b266:	23ff      	movs	r3, #255	; 0xff
 800b268:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b26e:	7dba      	ldrb	r2, [r7, #22]
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	2306      	movs	r3, #6
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	7d7b      	ldrb	r3, [r7, #21]
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	4613      	mov	r3, r2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	68b8      	ldr	r0, [r7, #8]
 800b284:	f001 ff5e 	bl	800d144 <ip4_output_if>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b28c:	68b8      	ldr	r0, [r7, #8]
 800b28e:	f7fa fdd1 	bl	8005e34 <pbuf_free>
  return err;
 800b292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	08010860 	.word	0x08010860
 800b2a4:	08011014 	.word	0x08011014
 800b2a8:	080108b4 	.word	0x080108b4

0800b2ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b08b      	sub	sp, #44	; 0x2c
 800b2b0:	af04      	add	r7, sp, #16
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <tcp_rst+0x22>
 800b2c0:	4b1f      	ldr	r3, [pc, #124]	; (800b340 <tcp_rst+0x94>)
 800b2c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b2c6:	491f      	ldr	r1, [pc, #124]	; (800b344 <tcp_rst+0x98>)
 800b2c8:	481f      	ldr	r0, [pc, #124]	; (800b348 <tcp_rst+0x9c>)
 800b2ca:	f002 ffa7 	bl	800e21c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d106      	bne.n	800b2e2 <tcp_rst+0x36>
 800b2d4:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <tcp_rst+0x94>)
 800b2d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b2da:	491c      	ldr	r1, [pc, #112]	; (800b34c <tcp_rst+0xa0>)
 800b2dc:	481a      	ldr	r0, [pc, #104]	; (800b348 <tcp_rst+0x9c>)
 800b2de:	f002 ff9d 	bl	800e21c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b2e6:	f246 0308 	movw	r3, #24584	; 0x6008
 800b2ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	b29c      	uxth	r4, r3
 800b2f0:	68b8      	ldr	r0, [r7, #8]
 800b2f2:	f7f9 fb1f 	bl	8004934 <lwip_htonl>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	8abb      	ldrh	r3, [r7, #20]
 800b2fa:	9303      	str	r3, [sp, #12]
 800b2fc:	2314      	movs	r3, #20
 800b2fe:	9302      	str	r3, [sp, #8]
 800b300:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	4613      	mov	r3, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	4621      	mov	r1, r4
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff fe90 	bl	800b034 <tcp_output_alloc_header_common>
 800b314:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00c      	beq.n	800b336 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	2200      	movs	r2, #0
 800b320:	6939      	ldr	r1, [r7, #16]
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7ff ff38 	bl	800b198 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	6939      	ldr	r1, [r7, #16]
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f7ff ff72 	bl	800b218 <tcp_output_control_segment>
 800b334:	e000      	b.n	800b338 <tcp_rst+0x8c>
    return;
 800b336:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd90      	pop	{r4, r7, pc}
 800b33e:	bf00      	nop
 800b340:	08010860 	.word	0x08010860
 800b344:	08011040 	.word	0x08011040
 800b348:	080108b4 	.word	0x080108b4
 800b34c:	0801105c 	.word	0x0801105c

0800b350 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b350:	b590      	push	{r4, r7, lr}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <tcp_send_empty_ack+0x24>
 800b366:	4b28      	ldr	r3, [pc, #160]	; (800b408 <tcp_send_empty_ack+0xb8>)
 800b368:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b36c:	4927      	ldr	r1, [pc, #156]	; (800b40c <tcp_send_empty_ack+0xbc>)
 800b36e:	4828      	ldr	r0, [pc, #160]	; (800b410 <tcp_send_empty_ack+0xc0>)
 800b370:	f002 ff54 	bl	800e21c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	f003 0304 	and.w	r3, r3, #4
 800b37e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b380:	7d7b      	ldrb	r3, [r7, #21]
 800b382:	b29c      	uxth	r4, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f9 fad3 	bl	8004934 <lwip_htonl>
 800b38e:	4603      	mov	r3, r0
 800b390:	2200      	movs	r2, #0
 800b392:	4621      	mov	r1, r4
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff fec1 	bl	800b11c <tcp_output_alloc_header>
 800b39a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	8b5b      	ldrh	r3, [r3, #26]
 800b3a6:	f043 0303 	orr.w	r3, r3, #3
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b3b0:	f06f 0301 	mvn.w	r3, #1
 800b3b4:	e023      	b.n	800b3fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b3b6:	7dbb      	ldrb	r3, [r7, #22]
 800b3b8:	7dfa      	ldrb	r2, [r7, #23]
 800b3ba:	6939      	ldr	r1, [r7, #16]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff feeb 	bl	800b198 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	6939      	ldr	r1, [r7, #16]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff ff24 	bl	800b218 <tcp_output_control_segment>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d007      	beq.n	800b3ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	8b5b      	ldrh	r3, [r3, #26]
 800b3e0:	f043 0303 	orr.w	r3, r3, #3
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	835a      	strh	r2, [r3, #26]
 800b3ea:	e006      	b.n	800b3fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8b5b      	ldrh	r3, [r3, #26]
 800b3f0:	f023 0303 	bic.w	r3, r3, #3
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	bd90      	pop	{r4, r7, pc}
 800b406:	bf00      	nop
 800b408:	08010860 	.word	0x08010860
 800b40c:	08011078 	.word	0x08011078
 800b410:	080108b4 	.word	0x080108b4

0800b414 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b41c:	2300      	movs	r3, #0
 800b41e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d106      	bne.n	800b434 <tcp_keepalive+0x20>
 800b426:	4b18      	ldr	r3, [pc, #96]	; (800b488 <tcp_keepalive+0x74>)
 800b428:	f640 0224 	movw	r2, #2084	; 0x824
 800b42c:	4917      	ldr	r1, [pc, #92]	; (800b48c <tcp_keepalive+0x78>)
 800b42e:	4818      	ldr	r0, [pc, #96]	; (800b490 <tcp_keepalive+0x7c>)
 800b430:	f002 fef4 	bl	800e21c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b434:	7abb      	ldrb	r3, [r7, #10]
 800b436:	b29c      	uxth	r4, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b43c:	3b01      	subs	r3, #1
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f9 fa78 	bl	8004934 <lwip_htonl>
 800b444:	4603      	mov	r3, r0
 800b446:	2200      	movs	r2, #0
 800b448:	4621      	mov	r1, r4
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fe66 	bl	800b11c <tcp_output_alloc_header>
 800b450:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d102      	bne.n	800b45e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	e010      	b.n	800b480 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b45e:	7abb      	ldrb	r3, [r7, #10]
 800b460:	2200      	movs	r2, #0
 800b462:	68f9      	ldr	r1, [r7, #12]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7ff fe97 	bl	800b198 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3304      	adds	r3, #4
 800b470:	68f9      	ldr	r1, [r7, #12]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fed0 	bl	800b218 <tcp_output_control_segment>
 800b478:	4603      	mov	r3, r0
 800b47a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b47c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}
 800b488:	08010860 	.word	0x08010860
 800b48c:	08011098 	.word	0x08011098
 800b490:	080108b4 	.word	0x080108b4

0800b494 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b494:	b590      	push	{r4, r7, lr}
 800b496:	b08b      	sub	sp, #44	; 0x2c
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b49c:	2300      	movs	r3, #0
 800b49e:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <tcp_zero_window_probe+0x20>
 800b4a6:	4b4d      	ldr	r3, [pc, #308]	; (800b5dc <tcp_zero_window_probe+0x148>)
 800b4a8:	f640 024f 	movw	r2, #2127	; 0x84f
 800b4ac:	494c      	ldr	r1, [pc, #304]	; (800b5e0 <tcp_zero_window_probe+0x14c>)
 800b4ae:	484d      	ldr	r0, [pc, #308]	; (800b5e4 <tcp_zero_window_probe+0x150>)
 800b4b0:	f002 feb4 	bl	800e21c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e087      	b.n	800b5d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b4ca:	2bff      	cmp	r3, #255	; 0xff
 800b4cc:	d007      	beq.n	800b4de <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	899b      	ldrh	r3, [r3, #12]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f9 fa0f 	bl	800490a <lwip_htons>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 0301 	and.w	r3, r3, #1
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <tcp_zero_window_probe+0x70>
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	891b      	ldrh	r3, [r3, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <tcp_zero_window_probe+0x70>
 800b500:	2301      	movs	r3, #1
 800b502:	e000      	b.n	800b506 <tcp_zero_window_probe+0x72>
 800b504:	2300      	movs	r3, #0
 800b506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b50a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bf0c      	ite	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	2300      	movne	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b51a:	7cfb      	ldrb	r3, [r7, #19]
 800b51c:	b299      	uxth	r1, r3
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	8c3a      	ldrh	r2, [r7, #32]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff fdf8 	bl	800b11c <tcp_output_alloc_header>
 800b52c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b534:	f04f 33ff 	mov.w	r3, #4294967295
 800b538:	e04c      	b.n	800b5d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800b540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b544:	2b00      	cmp	r3, #0
 800b546:	d011      	beq.n	800b56c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	899b      	ldrh	r3, [r3, #12]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	b21b      	sxth	r3, r3
 800b550:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b554:	b21c      	sxth	r4, r3
 800b556:	2011      	movs	r0, #17
 800b558:	f7f9 f9d7 	bl	800490a <lwip_htons>
 800b55c:	4603      	mov	r3, r0
 800b55e:	b21b      	sxth	r3, r3
 800b560:	4323      	orrs	r3, r4
 800b562:	b21b      	sxth	r3, r3
 800b564:	b29a      	uxth	r2, r3
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	819a      	strh	r2, [r3, #12]
 800b56a:	e010      	b.n	800b58e <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	3314      	adds	r3, #20
 800b572:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	6858      	ldr	r0, [r3, #4]
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	891a      	ldrh	r2, [r3, #8]
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	891b      	ldrh	r3, [r3, #8]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	b29b      	uxth	r3, r3
 800b586:	2201      	movs	r2, #1
 800b588:	6979      	ldr	r1, [r7, #20]
 800b58a:	f7fa fe3d 	bl	8006208 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	f7f9 f9cd 	bl	8004934 <lwip_htonl>
 800b59a:	4603      	mov	r3, r0
 800b59c:	3301      	adds	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	da02      	bge.n	800b5b2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5b2:	7cfb      	ldrb	r3, [r7, #19]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	69f9      	ldr	r1, [r7, #28]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fded 	bl	800b198 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	69f9      	ldr	r1, [r7, #28]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff fe26 	bl	800b218 <tcp_output_control_segment>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b5d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	372c      	adds	r7, #44	; 0x2c
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd90      	pop	{r4, r7, pc}
 800b5dc:	08010860 	.word	0x08010860
 800b5e0:	080110b4 	.word	0x080110b4
 800b5e4:	080108b4 	.word	0x080108b4

0800b5e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b5f0:	f7fa fef8 	bl	80063e4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <tcpip_tcp_timer+0x38>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <tcpip_tcp_timer+0x1c>
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <tcpip_tcp_timer+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b604:	2200      	movs	r2, #0
 800b606:	4908      	ldr	r1, [pc, #32]	; (800b628 <tcpip_tcp_timer+0x40>)
 800b608:	20fa      	movs	r0, #250	; 0xfa
 800b60a:	f000 f8f1 	bl	800b7f0 <sys_timeout>
 800b60e:	e002      	b.n	800b616 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <tcpip_tcp_timer+0x44>)
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
  }
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20006950 	.word	0x20006950
 800b624:	20006960 	.word	0x20006960
 800b628:	0800b5e9 	.word	0x0800b5e9
 800b62c:	2000010c 	.word	0x2000010c

0800b630 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b634:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <tcp_timer_needed+0x30>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10f      	bne.n	800b65c <tcp_timer_needed+0x2c>
 800b63c:	4b09      	ldr	r3, [pc, #36]	; (800b664 <tcp_timer_needed+0x34>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <tcp_timer_needed+0x1c>
 800b644:	4b08      	ldr	r3, [pc, #32]	; (800b668 <tcp_timer_needed+0x38>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <tcp_timer_needed+0x30>)
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b652:	2200      	movs	r2, #0
 800b654:	4905      	ldr	r1, [pc, #20]	; (800b66c <tcp_timer_needed+0x3c>)
 800b656:	20fa      	movs	r0, #250	; 0xfa
 800b658:	f000 f8ca 	bl	800b7f0 <sys_timeout>
  }
}
 800b65c:	bf00      	nop
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	2000010c 	.word	0x2000010c
 800b664:	20006950 	.word	0x20006950
 800b668:	20006960 	.word	0x20006960
 800b66c:	0800b5e9 	.word	0x0800b5e9

0800b670 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b67c:	2006      	movs	r0, #6
 800b67e:	f7f9 fd99 	bl	80051b4 <memp_malloc>
 800b682:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d109      	bne.n	800b69e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d151      	bne.n	800b734 <sys_timeout_abs+0xc4>
 800b690:	4b2a      	ldr	r3, [pc, #168]	; (800b73c <sys_timeout_abs+0xcc>)
 800b692:	22be      	movs	r2, #190	; 0xbe
 800b694:	492a      	ldr	r1, [pc, #168]	; (800b740 <sys_timeout_abs+0xd0>)
 800b696:	482b      	ldr	r0, [pc, #172]	; (800b744 <sys_timeout_abs+0xd4>)
 800b698:	f002 fdc0 	bl	800e21c <iprintf>
    return;
 800b69c:	e04a      	b.n	800b734 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d103      	bne.n	800b6c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b6be:	4a22      	ldr	r2, [pc, #136]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6013      	str	r3, [r2, #0]
    return;
 800b6c4:	e037      	b.n	800b736 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	0fdb      	lsrs	r3, r3, #31
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b6de:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b6e6:	4a18      	ldr	r2, [pc, #96]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	e023      	b.n	800b736 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <sys_timeout_abs+0xd8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	e01a      	b.n	800b72c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <sys_timeout_abs+0xa6>
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	0fdb      	lsrs	r3, r3, #31
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d007      	beq.n	800b726 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	601a      	str	r2, [r3, #0]
        break;
 800b724:	e007      	b.n	800b736 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e1      	bne.n	800b6f6 <sys_timeout_abs+0x86>
 800b732:	e000      	b.n	800b736 <sys_timeout_abs+0xc6>
    return;
 800b734:	bf00      	nop
      }
    }
  }
}
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	080110d8 	.word	0x080110d8
 800b740:	0801110c 	.word	0x0801110c
 800b744:	0801114c 	.word	0x0801114c
 800b748:	20000104 	.word	0x20000104

0800b74c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4798      	blx	r3

  now = sys_now();
 800b75e:	f7f9 f8cd 	bl	80048fc <sys_now>
 800b762:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <lwip_cyclic_timer+0x5c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4413      	add	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	0fdb      	lsrs	r3, r3, #31
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d009      	beq.n	800b796 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <lwip_cyclic_timer+0x60>)
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff ff6e 	bl	800b670 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b794:	e004      	b.n	800b7a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	4904      	ldr	r1, [pc, #16]	; (800b7ac <lwip_cyclic_timer+0x60>)
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff ff68 	bl	800b670 <sys_timeout_abs>
}
 800b7a0:	bf00      	nop
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20000108 	.word	0x20000108
 800b7ac:	0800b74d 	.word	0x0800b74d

0800b7b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	e00e      	b.n	800b7da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b7bc:	4a0a      	ldr	r2, [pc, #40]	; (800b7e8 <sys_timeouts_init+0x38>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	4a07      	ldr	r2, [pc, #28]	; (800b7e8 <sys_timeouts_init+0x38>)
 800b7ca:	4413      	add	r3, r2
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4907      	ldr	r1, [pc, #28]	; (800b7ec <sys_timeouts_init+0x3c>)
 800b7d0:	f000 f80e 	bl	800b7f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	607b      	str	r3, [r7, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d9ed      	bls.n	800b7bc <sys_timeouts_init+0xc>
  }
}
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	08011cdc 	.word	0x08011cdc
 800b7ec:	0800b74d 	.word	0x0800b74d

0800b7f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b802:	d306      	bcc.n	800b812 <sys_timeout+0x22>
 800b804:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <sys_timeout+0x40>)
 800b806:	f240 1229 	movw	r2, #297	; 0x129
 800b80a:	490a      	ldr	r1, [pc, #40]	; (800b834 <sys_timeout+0x44>)
 800b80c:	480a      	ldr	r0, [pc, #40]	; (800b838 <sys_timeout+0x48>)
 800b80e:	f002 fd05 	bl	800e21c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b812:	f7f9 f873 	bl	80048fc <sys_now>
 800b816:	4602      	mov	r2, r0
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4413      	add	r3, r2
 800b81c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	6978      	ldr	r0, [r7, #20]
 800b824:	f7ff ff24 	bl	800b670 <sys_timeout_abs>
#endif
}
 800b828:	bf00      	nop
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	080110d8 	.word	0x080110d8
 800b834:	08011174 	.word	0x08011174
 800b838:	0801114c 	.word	0x0801114c

0800b83c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b840:	f002 fd68 	bl	800e314 <rand>
 800b844:	4603      	mov	r3, r0
 800b846:	b29b      	uxth	r3, r3
 800b848:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b852:	b29a      	uxth	r2, r3
 800b854:	4b01      	ldr	r3, [pc, #4]	; (800b85c <udp_init+0x20>)
 800b856:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b858:	bf00      	nop
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000010 	.word	0x20000010

0800b860 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	4613      	mov	r3, r2
 800b86c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <udp_input_local_match+0x20>
 800b874:	4b27      	ldr	r3, [pc, #156]	; (800b914 <udp_input_local_match+0xb4>)
 800b876:	2287      	movs	r2, #135	; 0x87
 800b878:	4927      	ldr	r1, [pc, #156]	; (800b918 <udp_input_local_match+0xb8>)
 800b87a:	4828      	ldr	r0, [pc, #160]	; (800b91c <udp_input_local_match+0xbc>)
 800b87c:	f002 fcce 	bl	800e21c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d105      	bne.n	800b892 <udp_input_local_match+0x32>
 800b886:	4b23      	ldr	r3, [pc, #140]	; (800b914 <udp_input_local_match+0xb4>)
 800b888:	2288      	movs	r2, #136	; 0x88
 800b88a:	4925      	ldr	r1, [pc, #148]	; (800b920 <udp_input_local_match+0xc0>)
 800b88c:	4823      	ldr	r0, [pc, #140]	; (800b91c <udp_input_local_match+0xbc>)
 800b88e:	f002 fcc5 	bl	800e21c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7a1b      	ldrb	r3, [r3, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00b      	beq.n	800b8b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	7a1a      	ldrb	r2, [r3, #8]
 800b89e:	4b21      	ldr	r3, [pc, #132]	; (800b924 <udp_input_local_match+0xc4>)
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d001      	beq.n	800b8b2 <udp_input_local_match+0x52>
    return 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e02b      	b.n	800b90a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d018      	beq.n	800b8ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d013      	beq.n	800b8e6 <udp_input_local_match+0x86>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00f      	beq.n	800b8e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b8c6:	4b17      	ldr	r3, [pc, #92]	; (800b924 <udp_input_local_match+0xc4>)
 800b8c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d00a      	beq.n	800b8e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b13      	ldr	r3, [pc, #76]	; (800b924 <udp_input_local_match+0xc4>)
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	405a      	eors	r2, r3
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d110      	bne.n	800b908 <udp_input_local_match+0xa8>
          return 1;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e00f      	b.n	800b90a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <udp_input_local_match+0xa4>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d005      	beq.n	800b904 <udp_input_local_match+0xa4>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	4b09      	ldr	r3, [pc, #36]	; (800b924 <udp_input_local_match+0xc4>)
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	429a      	cmp	r2, r3
 800b902:	d101      	bne.n	800b908 <udp_input_local_match+0xa8>
        return 1;
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	080111c0 	.word	0x080111c0
 800b918:	080111f0 	.word	0x080111f0
 800b91c:	08011214 	.word	0x08011214
 800b920:	0801123c 	.word	0x0801123c
 800b924:	200033cc 	.word	0x200033cc

0800b928 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b08d      	sub	sp, #52	; 0x34
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d105      	bne.n	800b948 <udp_input+0x20>
 800b93c:	4b7c      	ldr	r3, [pc, #496]	; (800bb30 <udp_input+0x208>)
 800b93e:	22cf      	movs	r2, #207	; 0xcf
 800b940:	497c      	ldr	r1, [pc, #496]	; (800bb34 <udp_input+0x20c>)
 800b942:	487d      	ldr	r0, [pc, #500]	; (800bb38 <udp_input+0x210>)
 800b944:	f002 fc6a 	bl	800e21c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d105      	bne.n	800b95a <udp_input+0x32>
 800b94e:	4b78      	ldr	r3, [pc, #480]	; (800bb30 <udp_input+0x208>)
 800b950:	22d0      	movs	r2, #208	; 0xd0
 800b952:	497a      	ldr	r1, [pc, #488]	; (800bb3c <udp_input+0x214>)
 800b954:	4878      	ldr	r0, [pc, #480]	; (800bb38 <udp_input+0x210>)
 800b956:	f002 fc61 	bl	800e21c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	895b      	ldrh	r3, [r3, #10]
 800b95e:	2b07      	cmp	r3, #7
 800b960:	d803      	bhi.n	800b96a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7fa fa66 	bl	8005e34 <pbuf_free>
    goto end;
 800b968:	e0de      	b.n	800bb28 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b970:	4b73      	ldr	r3, [pc, #460]	; (800bb40 <udp_input+0x218>)
 800b972:	695a      	ldr	r2, [r3, #20]
 800b974:	4b72      	ldr	r3, [pc, #456]	; (800bb40 <udp_input+0x218>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f001 fcba 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800b980:	4603      	mov	r3, r0
 800b982:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f8 ffbd 	bl	800490a <lwip_htons>
 800b990:	4603      	mov	r3, r0
 800b992:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	885b      	ldrh	r3, [r3, #2]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f8 ffb5 	bl	800490a <lwip_htons>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9b0:	4b64      	ldr	r3, [pc, #400]	; (800bb44 <udp_input+0x21c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	623b      	str	r3, [r7, #32]
 800b9b6:	e054      	b.n	800ba62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	8a5b      	ldrh	r3, [r3, #18]
 800b9bc:	89fa      	ldrh	r2, [r7, #14]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d14a      	bne.n	800ba58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b9c2:	7cfb      	ldrb	r3, [r7, #19]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6a38      	ldr	r0, [r7, #32]
 800b9ca:	f7ff ff49 	bl	800b860 <udp_input_local_match>
 800b9ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d041      	beq.n	800ba58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	7c1b      	ldrb	r3, [r3, #16]
 800b9d8:	f003 0304 	and.w	r3, r3, #4
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d11d      	bne.n	800ba1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d102      	bne.n	800b9ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	61bb      	str	r3, [r7, #24]
 800b9ea:	e017      	b.n	800ba1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b9ec:	7cfb      	ldrb	r3, [r7, #19]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d014      	beq.n	800ba1c <udp_input+0xf4>
 800b9f2:	4b53      	ldr	r3, [pc, #332]	; (800bb40 <udp_input+0x218>)
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	d10f      	bne.n	800ba1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	3304      	adds	r3, #4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d008      	beq.n	800ba1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	3304      	adds	r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d101      	bne.n	800ba1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	8a9b      	ldrh	r3, [r3, #20]
 800ba20:	8a3a      	ldrh	r2, [r7, #16]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d118      	bne.n	800ba58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	4b43      	ldr	r3, [pc, #268]	; (800bb40 <udp_input+0x218>)
 800ba34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d10e      	bne.n	800ba58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d014      	beq.n	800ba6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ba48:	4b3e      	ldr	r3, [pc, #248]	; (800bb44 <udp_input+0x21c>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ba50:	4a3c      	ldr	r2, [pc, #240]	; (800bb44 <udp_input+0x21c>)
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ba56:	e008      	b.n	800ba6a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	623b      	str	r3, [r7, #32]
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1a7      	bne.n	800b9b8 <udp_input+0x90>
 800ba68:	e000      	b.n	800ba6c <udp_input+0x144>
        break;
 800ba6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <udp_input+0x15a>
    for_us = 1;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	77fb      	strb	r3, [r7, #31]
 800ba80:	e00a      	b.n	800ba98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	3304      	adds	r3, #4
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	4b2d      	ldr	r3, [pc, #180]	; (800bb40 <udp_input+0x218>)
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	bf0c      	ite	eq
 800ba90:	2301      	moveq	r3, #1
 800ba92:	2300      	movne	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ba98:	7ffb      	ldrb	r3, [r7, #31]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d041      	beq.n	800bb22 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ba9e:	2108      	movs	r1, #8
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7fa f941 	bl	8005d28 <pbuf_remove_header>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00a      	beq.n	800bac2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800baac:	4b20      	ldr	r3, [pc, #128]	; (800bb30 <udp_input+0x208>)
 800baae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bab2:	4925      	ldr	r1, [pc, #148]	; (800bb48 <udp_input+0x220>)
 800bab4:	4820      	ldr	r0, [pc, #128]	; (800bb38 <udp_input+0x210>)
 800bab6:	f002 fbb1 	bl	800e21c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7fa f9ba 	bl	8005e34 <pbuf_free>
      goto end;
 800bac0:	e032      	b.n	800bb28 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d012      	beq.n	800baee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	699c      	ldr	r4, [r3, #24]
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	69d8      	ldr	r0, [r3, #28]
 800bad8:	8a3b      	ldrh	r3, [r7, #16]
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	4b1b      	ldr	r3, [pc, #108]	; (800bb4c <udp_input+0x224>)
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6a39      	ldr	r1, [r7, #32]
 800bae2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bae4:	e021      	b.n	800bb2a <udp_input+0x202>
        pbuf_free(p);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7fa f9a4 	bl	8005e34 <pbuf_free>
        goto end;
 800baec:	e01c      	b.n	800bb28 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800baee:	7cfb      	ldrb	r3, [r7, #19]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d112      	bne.n	800bb1a <udp_input+0x1f2>
 800baf4:	4b12      	ldr	r3, [pc, #72]	; (800bb40 <udp_input+0x218>)
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bafc:	2be0      	cmp	r3, #224	; 0xe0
 800bafe:	d00c      	beq.n	800bb1a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bb00:	4b0f      	ldr	r3, [pc, #60]	; (800bb40 <udp_input+0x218>)
 800bb02:	899b      	ldrh	r3, [r3, #12]
 800bb04:	3308      	adds	r3, #8
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	b21b      	sxth	r3, r3
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7fa f97e 	bl	8005e0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bb12:	2103      	movs	r1, #3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 f8cf 	bl	800ccb8 <icmp_dest_unreach>
      pbuf_free(p);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fa f98a 	bl	8005e34 <pbuf_free>
  return;
 800bb20:	e003      	b.n	800bb2a <udp_input+0x202>
    pbuf_free(p);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7fa f986 	bl	8005e34 <pbuf_free>
  return;
 800bb28:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bb2a:	372c      	adds	r7, #44	; 0x2c
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd90      	pop	{r4, r7, pc}
 800bb30:	080111c0 	.word	0x080111c0
 800bb34:	08011264 	.word	0x08011264
 800bb38:	08011214 	.word	0x08011214
 800bb3c:	0801127c 	.word	0x0801127c
 800bb40:	200033cc 	.word	0x200033cc
 800bb44:	20006968 	.word	0x20006968
 800bb48:	08011298 	.word	0x08011298
 800bb4c:	200033dc 	.word	0x200033dc

0800bb50 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01e      	beq.n	800bb9e <udp_netif_ip_addr_changed+0x4e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01a      	beq.n	800bb9e <udp_netif_ip_addr_changed+0x4e>
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d017      	beq.n	800bb9e <udp_netif_ip_addr_changed+0x4e>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d013      	beq.n	800bb9e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <udp_netif_ip_addr_changed+0x5c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	e00c      	b.n	800bb98 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d103      	bne.n	800bb92 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1ef      	bne.n	800bb7e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	20006968 	.word	0x20006968

0800bbb0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bbb8:	492b      	ldr	r1, [pc, #172]	; (800bc68 <etharp_free_entry+0xb8>)
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d013      	beq.n	800bbf4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bbcc:	4926      	ldr	r1, [pc, #152]	; (800bc68 <etharp_free_entry+0xb8>)
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	4413      	add	r3, r2
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	440b      	add	r3, r1
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fa f929 	bl	8005e34 <pbuf_free>
    arp_table[i].q = NULL;
 800bbe2:	4921      	ldr	r1, [pc, #132]	; (800bc68 <etharp_free_entry+0xb8>)
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	4413      	add	r3, r2
 800bbec:	00db      	lsls	r3, r3, #3
 800bbee:	440b      	add	r3, r1
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bbf4:	491c      	ldr	r1, [pc, #112]	; (800bc68 <etharp_free_entry+0xb8>)
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	4413      	add	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	440b      	add	r3, r1
 800bc02:	3314      	adds	r3, #20
 800bc04:	2200      	movs	r2, #0
 800bc06:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800bc08:	4917      	ldr	r1, [pc, #92]	; (800bc68 <etharp_free_entry+0xb8>)
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	4413      	add	r3, r2
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	440b      	add	r3, r1
 800bc16:	3312      	adds	r3, #18
 800bc18:	2200      	movs	r2, #0
 800bc1a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800bc1c:	4912      	ldr	r1, [pc, #72]	; (800bc68 <etharp_free_entry+0xb8>)
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	4613      	mov	r3, r2
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	4413      	add	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	440b      	add	r3, r1
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800bc30:	490d      	ldr	r1, [pc, #52]	; (800bc68 <etharp_free_entry+0xb8>)
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	4613      	mov	r3, r2
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	4413      	add	r3, r2
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	440b      	add	r3, r1
 800bc3e:	3304      	adds	r3, #4
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800bc44:	4908      	ldr	r1, [pc, #32]	; (800bc68 <etharp_free_entry+0xb8>)
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	4413      	add	r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	440b      	add	r3, r1
 800bc52:	3308      	adds	r3, #8
 800bc54:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <etharp_free_entry+0xbc>)
 800bc56:	3304      	adds	r3, #4
 800bc58:	6810      	ldr	r0, [r2, #0]
 800bc5a:	6018      	str	r0, [r3, #0]
 800bc5c:	8892      	ldrh	r2, [r2, #4]
 800bc5e:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20000110 	.word	0x20000110
 800bc6c:	08011d00 	.word	0x08011d00

0800bc70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc76:	2300      	movs	r3, #0
 800bc78:	607b      	str	r3, [r7, #4]
 800bc7a:	e096      	b.n	800bdaa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bc7c:	494f      	ldr	r1, [pc, #316]	; (800bdbc <etharp_tmr+0x14c>)
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4613      	mov	r3, r2
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	4413      	add	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	440b      	add	r3, r1
 800bc8a:	3314      	adds	r3, #20
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 8086 	beq.w	800bda4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bc98:	4948      	ldr	r1, [pc, #288]	; (800bdbc <etharp_tmr+0x14c>)
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	4413      	add	r3, r2
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	440b      	add	r3, r1
 800bca6:	3312      	adds	r3, #18
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	b298      	uxth	r0, r3
 800bcae:	4943      	ldr	r1, [pc, #268]	; (800bdbc <etharp_tmr+0x14c>)
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	4413      	add	r3, r2
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	440b      	add	r3, r1
 800bcbc:	3312      	adds	r3, #18
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcc2:	493e      	ldr	r1, [pc, #248]	; (800bdbc <etharp_tmr+0x14c>)
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4413      	add	r3, r2
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	440b      	add	r3, r1
 800bcd0:	3312      	adds	r3, #18
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bcd8:	d215      	bcs.n	800bd06 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bcda:	4938      	ldr	r1, [pc, #224]	; (800bdbc <etharp_tmr+0x14c>)
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	4413      	add	r3, r2
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	440b      	add	r3, r1
 800bce8:	3314      	adds	r3, #20
 800bcea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d10e      	bne.n	800bd0e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bcf0:	4932      	ldr	r1, [pc, #200]	; (800bdbc <etharp_tmr+0x14c>)
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3312      	adds	r3, #18
 800bd00:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d903      	bls.n	800bd0e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff ff52 	bl	800bbb0 <etharp_free_entry>
 800bd0c:	e04a      	b.n	800bda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bd0e:	492b      	ldr	r1, [pc, #172]	; (800bdbc <etharp_tmr+0x14c>)
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	4613      	mov	r3, r2
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	4413      	add	r3, r2
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	440b      	add	r3, r1
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d10a      	bne.n	800bd3a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bd24:	4925      	ldr	r1, [pc, #148]	; (800bdbc <etharp_tmr+0x14c>)
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	440b      	add	r3, r1
 800bd32:	3314      	adds	r3, #20
 800bd34:	2204      	movs	r2, #4
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	e034      	b.n	800bda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bd3a:	4920      	ldr	r1, [pc, #128]	; (800bdbc <etharp_tmr+0x14c>)
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	4413      	add	r3, r2
 800bd44:	00db      	lsls	r3, r3, #3
 800bd46:	440b      	add	r3, r1
 800bd48:	3314      	adds	r3, #20
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d10a      	bne.n	800bd66 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bd50:	491a      	ldr	r1, [pc, #104]	; (800bdbc <etharp_tmr+0x14c>)
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	4613      	mov	r3, r2
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	4413      	add	r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	440b      	add	r3, r1
 800bd5e:	3314      	adds	r3, #20
 800bd60:	2202      	movs	r2, #2
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	e01e      	b.n	800bda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd66:	4915      	ldr	r1, [pc, #84]	; (800bdbc <etharp_tmr+0x14c>)
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	440b      	add	r3, r1
 800bd74:	3314      	adds	r3, #20
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d113      	bne.n	800bda4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bd7c:	490f      	ldr	r1, [pc, #60]	; (800bdbc <etharp_tmr+0x14c>)
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4613      	mov	r3, r2
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	4413      	add	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	440b      	add	r3, r1
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	4613      	mov	r3, r2
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	4413      	add	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	4a08      	ldr	r2, [pc, #32]	; (800bdbc <etharp_tmr+0x14c>)
 800bd9a:	4413      	add	r3, r2
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f000 fe6e 	bl	800ca80 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3301      	adds	r3, #1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	f77f af65 	ble.w	800bc7c <etharp_tmr+0xc>
      }
    }
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20000110 	.word	0x20000110

0800bdc0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b08a      	sub	sp, #40	; 0x28
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bdce:	230a      	movs	r3, #10
 800bdd0:	843b      	strh	r3, [r7, #32]
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800bdd6:	230a      	movs	r3, #10
 800bdd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bdde:	230a      	movs	r3, #10
 800bde0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	83bb      	strh	r3, [r7, #28]
 800bde6:	2300      	movs	r3, #0
 800bde8:	837b      	strh	r3, [r7, #26]
 800bdea:	2300      	movs	r3, #0
 800bdec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdee:	2300      	movs	r3, #0
 800bdf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bdf2:	e0ae      	b.n	800bf52 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bdf4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bdf8:	49a6      	ldr	r1, [pc, #664]	; (800c094 <etharp_find_entry+0x2d4>)
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	4413      	add	r3, r2
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	440b      	add	r3, r1
 800be04:	3314      	adds	r3, #20
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800be0a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800be0e:	2b0a      	cmp	r3, #10
 800be10:	d105      	bne.n	800be1e <etharp_find_entry+0x5e>
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800be18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800be1c:	e095      	b.n	800bf4a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8092 	beq.w	800bf4a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d009      	beq.n	800be40 <etharp_find_entry+0x80>
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d806      	bhi.n	800be40 <etharp_find_entry+0x80>
 800be32:	4b99      	ldr	r3, [pc, #612]	; (800c098 <etharp_find_entry+0x2d8>)
 800be34:	f44f 7292 	mov.w	r2, #292	; 0x124
 800be38:	4998      	ldr	r1, [pc, #608]	; (800c09c <etharp_find_entry+0x2dc>)
 800be3a:	4899      	ldr	r0, [pc, #612]	; (800c0a0 <etharp_find_entry+0x2e0>)
 800be3c:	f002 f9ee 	bl	800e21c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d020      	beq.n	800be88 <etharp_find_entry+0xc8>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6819      	ldr	r1, [r3, #0]
 800be4a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800be4e:	4891      	ldr	r0, [pc, #580]	; (800c094 <etharp_find_entry+0x2d4>)
 800be50:	4613      	mov	r3, r2
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	4413      	add	r3, r2
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	4403      	add	r3, r0
 800be5a:	3304      	adds	r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4299      	cmp	r1, r3
 800be60:	d112      	bne.n	800be88 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00c      	beq.n	800be82 <etharp_find_entry+0xc2>
 800be68:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800be6c:	4989      	ldr	r1, [pc, #548]	; (800c094 <etharp_find_entry+0x2d4>)
 800be6e:	4613      	mov	r3, r2
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	4413      	add	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	440b      	add	r3, r1
 800be78:	3308      	adds	r3, #8
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d102      	bne.n	800be88 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800be82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800be86:	e100      	b.n	800c08a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d140      	bne.n	800bf10 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800be8e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800be92:	4980      	ldr	r1, [pc, #512]	; (800c094 <etharp_find_entry+0x2d4>)
 800be94:	4613      	mov	r3, r2
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	4413      	add	r3, r2
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	440b      	add	r3, r1
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01a      	beq.n	800beda <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bea4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bea8:	497a      	ldr	r1, [pc, #488]	; (800c094 <etharp_find_entry+0x2d4>)
 800beaa:	4613      	mov	r3, r2
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	4413      	add	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	440b      	add	r3, r1
 800beb4:	3312      	adds	r3, #18
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	8bba      	ldrh	r2, [r7, #28]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d845      	bhi.n	800bf4a <etharp_find_entry+0x18a>
            old_queue = i;
 800bebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bec0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bec2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bec6:	4973      	ldr	r1, [pc, #460]	; (800c094 <etharp_find_entry+0x2d4>)
 800bec8:	4613      	mov	r3, r2
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	4413      	add	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	440b      	add	r3, r1
 800bed2:	3312      	adds	r3, #18
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	83bb      	strh	r3, [r7, #28]
 800bed8:	e037      	b.n	800bf4a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800beda:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bede:	496d      	ldr	r1, [pc, #436]	; (800c094 <etharp_find_entry+0x2d4>)
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	440b      	add	r3, r1
 800beea:	3312      	adds	r3, #18
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	8b7a      	ldrh	r2, [r7, #26]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d82a      	bhi.n	800bf4a <etharp_find_entry+0x18a>
            old_pending = i;
 800bef4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bef6:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800bef8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800befc:	4965      	ldr	r1, [pc, #404]	; (800c094 <etharp_find_entry+0x2d4>)
 800befe:	4613      	mov	r3, r2
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	4413      	add	r3, r2
 800bf04:	00db      	lsls	r3, r3, #3
 800bf06:	440b      	add	r3, r1
 800bf08:	3312      	adds	r3, #18
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	837b      	strh	r3, [r7, #26]
 800bf0e:	e01c      	b.n	800bf4a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d919      	bls.n	800bf4a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bf16:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bf1a:	495e      	ldr	r1, [pc, #376]	; (800c094 <etharp_find_entry+0x2d4>)
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	4413      	add	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	440b      	add	r3, r1
 800bf26:	3312      	adds	r3, #18
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	8b3a      	ldrh	r2, [r7, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d80c      	bhi.n	800bf4a <etharp_find_entry+0x18a>
            old_stable = i;
 800bf30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf32:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 800bf34:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bf38:	4956      	ldr	r1, [pc, #344]	; (800c094 <etharp_find_entry+0x2d4>)
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	4413      	add	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	440b      	add	r3, r1
 800bf44:	3312      	adds	r3, #18
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	f77f af4c 	ble.w	800bdf4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d108      	bne.n	800bf78 <etharp_find_entry+0x1b8>
 800bf66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf6a:	2b0a      	cmp	r3, #10
 800bf6c:	d107      	bne.n	800bf7e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	f003 0301 	and.w	r3, r3, #1
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d102      	bne.n	800bf7e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bf78:	f04f 33ff 	mov.w	r3, #4294967295
 800bf7c:	e085      	b.n	800c08a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bf7e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	dc02      	bgt.n	800bf8c <etharp_find_entry+0x1cc>
    i = empty;
 800bf86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf88:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf8a:	e039      	b.n	800c000 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bf8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf90:	2b09      	cmp	r3, #9
 800bf92:	dc14      	bgt.n	800bfbe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bf94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf96:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bf98:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bf9c:	493d      	ldr	r1, [pc, #244]	; (800c094 <etharp_find_entry+0x2d4>)
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	440b      	add	r3, r1
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d018      	beq.n	800bfe0 <etharp_find_entry+0x220>
 800bfae:	4b3a      	ldr	r3, [pc, #232]	; (800c098 <etharp_find_entry+0x2d8>)
 800bfb0:	f240 126d 	movw	r2, #365	; 0x16d
 800bfb4:	493b      	ldr	r1, [pc, #236]	; (800c0a4 <etharp_find_entry+0x2e4>)
 800bfb6:	483a      	ldr	r0, [pc, #232]	; (800c0a0 <etharp_find_entry+0x2e0>)
 800bfb8:	f002 f930 	bl	800e21c <iprintf>
 800bfbc:	e010      	b.n	800bfe0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bfbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bfc2:	2b09      	cmp	r3, #9
 800bfc4:	dc02      	bgt.n	800bfcc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bfc6:	8c3b      	ldrh	r3, [r7, #32]
 800bfc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bfca:	e009      	b.n	800bfe0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bfcc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bfd0:	2b09      	cmp	r3, #9
 800bfd2:	dc02      	bgt.n	800bfda <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bfd4:	8bfb      	ldrh	r3, [r7, #30]
 800bfd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bfd8:	e002      	b.n	800bfe0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	e054      	b.n	800c08a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bfe0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfe4:	2b09      	cmp	r3, #9
 800bfe6:	dd06      	ble.n	800bff6 <etharp_find_entry+0x236>
 800bfe8:	4b2b      	ldr	r3, [pc, #172]	; (800c098 <etharp_find_entry+0x2d8>)
 800bfea:	f240 127f 	movw	r2, #383	; 0x17f
 800bfee:	492e      	ldr	r1, [pc, #184]	; (800c0a8 <etharp_find_entry+0x2e8>)
 800bff0:	482b      	ldr	r0, [pc, #172]	; (800c0a0 <etharp_find_entry+0x2e0>)
 800bff2:	f002 f913 	bl	800e21c <iprintf>
    etharp_free_entry(i);
 800bff6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff fdd8 	bl	800bbb0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c000:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c004:	2b09      	cmp	r3, #9
 800c006:	dd06      	ble.n	800c016 <etharp_find_entry+0x256>
 800c008:	4b23      	ldr	r3, [pc, #140]	; (800c098 <etharp_find_entry+0x2d8>)
 800c00a:	f240 1283 	movw	r2, #387	; 0x183
 800c00e:	4926      	ldr	r1, [pc, #152]	; (800c0a8 <etharp_find_entry+0x2e8>)
 800c010:	4823      	ldr	r0, [pc, #140]	; (800c0a0 <etharp_find_entry+0x2e0>)
 800c012:	f002 f903 	bl	800e21c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c016:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c01a:	491e      	ldr	r1, [pc, #120]	; (800c094 <etharp_find_entry+0x2d4>)
 800c01c:	4613      	mov	r3, r2
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	4413      	add	r3, r2
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	440b      	add	r3, r1
 800c026:	3314      	adds	r3, #20
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d006      	beq.n	800c03c <etharp_find_entry+0x27c>
 800c02e:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <etharp_find_entry+0x2d8>)
 800c030:	f240 1285 	movw	r2, #389	; 0x185
 800c034:	491d      	ldr	r1, [pc, #116]	; (800c0ac <etharp_find_entry+0x2ec>)
 800c036:	481a      	ldr	r0, [pc, #104]	; (800c0a0 <etharp_find_entry+0x2e0>)
 800c038:	f002 f8f0 	bl	800e21c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c042:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6819      	ldr	r1, [r3, #0]
 800c04a:	4812      	ldr	r0, [pc, #72]	; (800c094 <etharp_find_entry+0x2d4>)
 800c04c:	4613      	mov	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	4403      	add	r3, r0
 800c056:	3304      	adds	r3, #4
 800c058:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c05a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c05e:	490d      	ldr	r1, [pc, #52]	; (800c094 <etharp_find_entry+0x2d4>)
 800c060:	4613      	mov	r3, r2
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	4413      	add	r3, r2
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	440b      	add	r3, r1
 800c06a:	3312      	adds	r3, #18
 800c06c:	2200      	movs	r2, #0
 800c06e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c070:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c074:	4907      	ldr	r1, [pc, #28]	; (800c094 <etharp_find_entry+0x2d4>)
 800c076:	4613      	mov	r3, r2
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	4413      	add	r3, r2
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	440b      	add	r3, r1
 800c080:	3308      	adds	r3, #8
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c086:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3728      	adds	r7, #40	; 0x28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20000110 	.word	0x20000110
 800c098:	08011524 	.word	0x08011524
 800c09c:	0801155c 	.word	0x0801155c
 800c0a0:	0801159c 	.word	0x0801159c
 800c0a4:	080115c4 	.word	0x080115c4
 800c0a8:	080115dc 	.word	0x080115dc
 800c0ac:	080115f0 	.word	0x080115f0

0800c0b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b088      	sub	sp, #32
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c0c4:	2b06      	cmp	r3, #6
 800c0c6:	d006      	beq.n	800c0d6 <etharp_update_arp_entry+0x26>
 800c0c8:	4b48      	ldr	r3, [pc, #288]	; (800c1ec <etharp_update_arp_entry+0x13c>)
 800c0ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c0ce:	4948      	ldr	r1, [pc, #288]	; (800c1f0 <etharp_update_arp_entry+0x140>)
 800c0d0:	4848      	ldr	r0, [pc, #288]	; (800c1f4 <etharp_update_arp_entry+0x144>)
 800c0d2:	f002 f8a3 	bl	800e21c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d012      	beq.n	800c102 <etharp_update_arp_entry+0x52>
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68f9      	ldr	r1, [r7, #12]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 f902 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800c0f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d105      	bne.n	800c102 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c0fe:	2be0      	cmp	r3, #224	; 0xe0
 800c100:	d102      	bne.n	800c108 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c102:	f06f 030f 	mvn.w	r3, #15
 800c106:	e06c      	b.n	800c1e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4619      	mov	r1, r3
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	f7ff fe56 	bl	800bdc0 <etharp_find_entry>
 800c114:	4603      	mov	r3, r0
 800c116:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c118:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	da02      	bge.n	800c126 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c120:	8afb      	ldrh	r3, [r7, #22]
 800c122:	b25b      	sxtb	r3, r3
 800c124:	e05d      	b.n	800c1e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c126:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c12a:	4933      	ldr	r1, [pc, #204]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	440b      	add	r3, r1
 800c136:	3314      	adds	r3, #20
 800c138:	2202      	movs	r2, #2
 800c13a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c13c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c140:	492d      	ldr	r1, [pc, #180]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	440b      	add	r3, r1
 800c14c:	3308      	adds	r3, #8
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c152:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c156:	4613      	mov	r3, r2
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	4413      	add	r3, r2
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	3308      	adds	r3, #8
 800c160:	4a25      	ldr	r2, [pc, #148]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c162:	4413      	add	r3, r2
 800c164:	3304      	adds	r3, #4
 800c166:	2206      	movs	r2, #6
 800c168:	6879      	ldr	r1, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f002 f843 	bl	800e1f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c170:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c174:	4920      	ldr	r1, [pc, #128]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c176:	4613      	mov	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	3312      	adds	r3, #18
 800c182:	2200      	movs	r2, #0
 800c184:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c186:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c18a:	491b      	ldr	r1, [pc, #108]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d021      	beq.n	800c1e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c19c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1a0:	4915      	ldr	r1, [pc, #84]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	440b      	add	r3, r1
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c1b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1b4:	4910      	ldr	r1, [pc, #64]	; (800c1f8 <etharp_update_arp_entry+0x148>)
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	005b      	lsls	r3, r3, #1
 800c1ba:	4413      	add	r3, r2
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	440b      	add	r3, r1
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c1ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6939      	ldr	r1, [r7, #16]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f001 ff93 	bl	800e100 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c1da:	6938      	ldr	r0, [r7, #16]
 800c1dc:	f7f9 fe2a 	bl	8005e34 <pbuf_free>
  }
  return ERR_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	08011524 	.word	0x08011524
 800c1f0:	0801161c 	.word	0x0801161c
 800c1f4:	0801159c 	.word	0x0801159c
 800c1f8:	20000110 	.word	0x20000110

0800c1fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c204:	2300      	movs	r3, #0
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e01e      	b.n	800c248 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c20a:	4913      	ldr	r1, [pc, #76]	; (800c258 <etharp_cleanup_netif+0x5c>)
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	4613      	mov	r3, r2
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	4413      	add	r3, r2
 800c214:	00db      	lsls	r3, r3, #3
 800c216:	440b      	add	r3, r1
 800c218:	3314      	adds	r3, #20
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c21e:	7afb      	ldrb	r3, [r7, #11]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00e      	beq.n	800c242 <etharp_cleanup_netif+0x46>
 800c224:	490c      	ldr	r1, [pc, #48]	; (800c258 <etharp_cleanup_netif+0x5c>)
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	00db      	lsls	r3, r3, #3
 800c230:	440b      	add	r3, r1
 800c232:	3308      	adds	r3, #8
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d102      	bne.n	800c242 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff fcb7 	bl	800bbb0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	3301      	adds	r3, #1
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2b09      	cmp	r3, #9
 800c24c:	dddd      	ble.n	800c20a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c24e:	bf00      	nop
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000110 	.word	0x20000110

0800c25c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c25c:	b5b0      	push	{r4, r5, r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af04      	add	r7, sp, #16
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d107      	bne.n	800c27c <etharp_input+0x20>
 800c26c:	4b3d      	ldr	r3, [pc, #244]	; (800c364 <etharp_input+0x108>)
 800c26e:	f240 228a 	movw	r2, #650	; 0x28a
 800c272:	493d      	ldr	r1, [pc, #244]	; (800c368 <etharp_input+0x10c>)
 800c274:	483d      	ldr	r0, [pc, #244]	; (800c36c <etharp_input+0x110>)
 800c276:	f001 ffd1 	bl	800e21c <iprintf>
 800c27a:	e06f      	b.n	800c35c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29b      	uxth	r3, r3
 800c288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c28c:	d10c      	bne.n	800c2a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c292:	2b06      	cmp	r3, #6
 800c294:	d108      	bne.n	800c2a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d104      	bne.n	800c2a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	885b      	ldrh	r3, [r3, #2]
 800c2a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	d003      	beq.n	800c2b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7f9 fdc3 	bl	8005e34 <pbuf_free>
    return;
 800c2ae:	e055      	b.n	800c35c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	330e      	adds	r3, #14
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	3318      	adds	r3, #24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d102      	bne.n	800c2d0 <etharp_input+0x74>
    for_us = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	74fb      	strb	r3, [r7, #19]
 800c2ce:	e009      	b.n	800c2e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	bf0c      	ite	eq
 800c2dc:	2301      	moveq	r3, #1
 800c2de:	2300      	movne	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f103 0208 	add.w	r2, r3, #8
 800c2ea:	7cfb      	ldrb	r3, [r7, #19]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <etharp_input+0x98>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <etharp_input+0x9a>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	f107 010c 	add.w	r1, r7, #12
 800c2fa:	6838      	ldr	r0, [r7, #0]
 800c2fc:	f7ff fed8 	bl	800c0b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	88db      	ldrh	r3, [r3, #6]
 800c304:	b29b      	uxth	r3, r3
 800c306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30a:	d003      	beq.n	800c314 <etharp_input+0xb8>
 800c30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c310:	d01e      	beq.n	800c350 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c312:	e020      	b.n	800c356 <etharp_input+0xfa>
      if (for_us) {
 800c314:	7cfb      	ldrb	r3, [r7, #19]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01c      	beq.n	800c354 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c334:	2102      	movs	r1, #2
 800c336:	9103      	str	r1, [sp, #12]
 800c338:	f107 010c 	add.w	r1, r7, #12
 800c33c:	9102      	str	r1, [sp, #8]
 800c33e:	9201      	str	r2, [sp, #4]
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	462b      	mov	r3, r5
 800c344:	4622      	mov	r2, r4
 800c346:	4601      	mov	r1, r0
 800c348:	6838      	ldr	r0, [r7, #0]
 800c34a:	f000 faeb 	bl	800c924 <etharp_raw>
      break;
 800c34e:	e001      	b.n	800c354 <etharp_input+0xf8>
      break;
 800c350:	bf00      	nop
 800c352:	e000      	b.n	800c356 <etharp_input+0xfa>
      break;
 800c354:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7f9 fd6c 	bl	8005e34 <pbuf_free>
}
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bdb0      	pop	{r4, r5, r7, pc}
 800c362:	bf00      	nop
 800c364:	08011524 	.word	0x08011524
 800c368:	08011674 	.word	0x08011674
 800c36c:	0801159c 	.word	0x0801159c

0800c370 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c37e:	79fa      	ldrb	r2, [r7, #7]
 800c380:	4944      	ldr	r1, [pc, #272]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	440b      	add	r3, r1
 800c38c:	3314      	adds	r3, #20
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d806      	bhi.n	800c3a2 <etharp_output_to_arp_index+0x32>
 800c394:	4b40      	ldr	r3, [pc, #256]	; (800c498 <etharp_output_to_arp_index+0x128>)
 800c396:	f240 22ef 	movw	r2, #751	; 0x2ef
 800c39a:	4940      	ldr	r1, [pc, #256]	; (800c49c <etharp_output_to_arp_index+0x12c>)
 800c39c:	4840      	ldr	r0, [pc, #256]	; (800c4a0 <etharp_output_to_arp_index+0x130>)
 800c39e:	f001 ff3d 	bl	800e21c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c3a2:	79fa      	ldrb	r2, [r7, #7]
 800c3a4:	493b      	ldr	r1, [pc, #236]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	00db      	lsls	r3, r3, #3
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3314      	adds	r3, #20
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d153      	bne.n	800c460 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	4936      	ldr	r1, [pc, #216]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3312      	adds	r3, #18
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c3ce:	d919      	bls.n	800c404 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c3d0:	79fa      	ldrb	r2, [r7, #7]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	4a2e      	ldr	r2, [pc, #184]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c3dc:	4413      	add	r3, r2
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 fb4c 	bl	800ca80 <etharp_request>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d138      	bne.n	800c460 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3ee:	79fa      	ldrb	r2, [r7, #7]
 800c3f0:	4928      	ldr	r1, [pc, #160]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	4413      	add	r3, r2
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	440b      	add	r3, r1
 800c3fc:	3314      	adds	r3, #20
 800c3fe:	2203      	movs	r2, #3
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	e02d      	b.n	800c460 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c404:	79fa      	ldrb	r2, [r7, #7]
 800c406:	4923      	ldr	r1, [pc, #140]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c408:	4613      	mov	r3, r2
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	4413      	add	r3, r2
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	440b      	add	r3, r1
 800c412:	3312      	adds	r3, #18
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c41a:	d321      	bcc.n	800c460 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c41c:	79fa      	ldrb	r2, [r7, #7]
 800c41e:	4613      	mov	r3, r2
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	4413      	add	r3, r2
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	4a1b      	ldr	r2, [pc, #108]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c428:	4413      	add	r3, r2
 800c42a:	1d19      	adds	r1, r3, #4
 800c42c:	79fa      	ldrb	r2, [r7, #7]
 800c42e:	4613      	mov	r3, r2
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	4413      	add	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	3308      	adds	r3, #8
 800c438:	4a16      	ldr	r2, [pc, #88]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c43a:	4413      	add	r3, r2
 800c43c:	3304      	adds	r3, #4
 800c43e:	461a      	mov	r2, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 fafb 	bl	800ca3c <etharp_request_dst>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c44c:	79fa      	ldrb	r2, [r7, #7]
 800c44e:	4911      	ldr	r1, [pc, #68]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c450:	4613      	mov	r3, r2
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	00db      	lsls	r3, r3, #3
 800c458:	440b      	add	r3, r1
 800c45a:	3314      	adds	r3, #20
 800c45c:	2203      	movs	r2, #3
 800c45e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c466:	79fa      	ldrb	r2, [r7, #7]
 800c468:	4613      	mov	r3, r2
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	4413      	add	r3, r2
 800c46e:	00db      	lsls	r3, r3, #3
 800c470:	3308      	adds	r3, #8
 800c472:	4a08      	ldr	r2, [pc, #32]	; (800c494 <etharp_output_to_arp_index+0x124>)
 800c474:	4413      	add	r3, r2
 800c476:	1d1a      	adds	r2, r3, #4
 800c478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	4613      	mov	r3, r2
 800c480:	460a      	mov	r2, r1
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f001 fe3b 	bl	800e100 <ethernet_output>
 800c48a:	4603      	mov	r3, r0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20000110 	.word	0x20000110
 800c498:	08011524 	.word	0x08011524
 800c49c:	08011694 	.word	0x08011694
 800c4a0:	0801159c 	.word	0x0801159c

0800c4a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <etharp_output+0x24>
 800c4ba:	4b73      	ldr	r3, [pc, #460]	; (800c688 <etharp_output+0x1e4>)
 800c4bc:	f240 321e 	movw	r2, #798	; 0x31e
 800c4c0:	4972      	ldr	r1, [pc, #456]	; (800c68c <etharp_output+0x1e8>)
 800c4c2:	4873      	ldr	r0, [pc, #460]	; (800c690 <etharp_output+0x1ec>)
 800c4c4:	f001 feaa 	bl	800e21c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d106      	bne.n	800c4dc <etharp_output+0x38>
 800c4ce:	4b6e      	ldr	r3, [pc, #440]	; (800c688 <etharp_output+0x1e4>)
 800c4d0:	f240 321f 	movw	r2, #799	; 0x31f
 800c4d4:	496f      	ldr	r1, [pc, #444]	; (800c694 <etharp_output+0x1f0>)
 800c4d6:	486e      	ldr	r0, [pc, #440]	; (800c690 <etharp_output+0x1ec>)
 800c4d8:	f001 fea0 	bl	800e21c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <etharp_output+0x4c>
 800c4e2:	4b69      	ldr	r3, [pc, #420]	; (800c688 <etharp_output+0x1e4>)
 800c4e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c4e8:	496b      	ldr	r1, [pc, #428]	; (800c698 <etharp_output+0x1f4>)
 800c4ea:	4869      	ldr	r0, [pc, #420]	; (800c690 <etharp_output+0x1ec>)
 800c4ec:	f001 fe96 	bl	800e21c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68f9      	ldr	r1, [r7, #12]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fefc 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c502:	4b66      	ldr	r3, [pc, #408]	; (800c69c <etharp_output+0x1f8>)
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	e0af      	b.n	800c668 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c510:	2be0      	cmp	r3, #224	; 0xe0
 800c512:	d118      	bne.n	800c546 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c514:	2301      	movs	r3, #1
 800c516:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c518:	2300      	movs	r3, #0
 800c51a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c51c:	235e      	movs	r3, #94	; 0x5e
 800c51e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3301      	adds	r3, #1
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3302      	adds	r3, #2
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3303      	adds	r3, #3
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c53e:	f107 0310 	add.w	r3, r7, #16
 800c542:	61fb      	str	r3, [r7, #28]
 800c544:	e090      	b.n	800c668 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3304      	adds	r3, #4
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	405a      	eors	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3308      	adds	r3, #8
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4013      	ands	r3, r2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d012      	beq.n	800c584 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c564:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c568:	4293      	cmp	r3, r2
 800c56a:	d00b      	beq.n	800c584 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	330c      	adds	r3, #12
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	330c      	adds	r3, #12
 800c57a:	61bb      	str	r3, [r7, #24]
 800c57c:	e002      	b.n	800c584 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c57e:	f06f 0303 	mvn.w	r3, #3
 800c582:	e07d      	b.n	800c680 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c584:	4b46      	ldr	r3, [pc, #280]	; (800c6a0 <etharp_output+0x1fc>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	4619      	mov	r1, r3
 800c58a:	4a46      	ldr	r2, [pc, #280]	; (800c6a4 <etharp_output+0x200>)
 800c58c:	460b      	mov	r3, r1
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	440b      	add	r3, r1
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	4413      	add	r3, r2
 800c596:	3314      	adds	r3, #20
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d925      	bls.n	800c5ea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c59e:	4b40      	ldr	r3, [pc, #256]	; (800c6a0 <etharp_output+0x1fc>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4a3f      	ldr	r2, [pc, #252]	; (800c6a4 <etharp_output+0x200>)
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	440b      	add	r3, r1
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	4413      	add	r3, r2
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d117      	bne.n	800c5ea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b38      	ldr	r3, [pc, #224]	; (800c6a0 <etharp_output+0x1fc>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	4937      	ldr	r1, [pc, #220]	; (800c6a4 <etharp_output+0x200>)
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4403      	add	r3, r0
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	440b      	add	r3, r1
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d108      	bne.n	800c5ea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c5d8:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <etharp_output+0x1fc>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	68b9      	ldr	r1, [r7, #8]
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff fec5 	bl	800c370 <etharp_output_to_arp_index>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	e04a      	b.n	800c680 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	75fb      	strb	r3, [r7, #23]
 800c5ee:	e031      	b.n	800c654 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c5f0:	7dfa      	ldrb	r2, [r7, #23]
 800c5f2:	492c      	ldr	r1, [pc, #176]	; (800c6a4 <etharp_output+0x200>)
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	4413      	add	r3, r2
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	440b      	add	r3, r1
 800c5fe:	3314      	adds	r3, #20
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d923      	bls.n	800c64e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c606:	7dfa      	ldrb	r2, [r7, #23]
 800c608:	4926      	ldr	r1, [pc, #152]	; (800c6a4 <etharp_output+0x200>)
 800c60a:	4613      	mov	r3, r2
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	4413      	add	r3, r2
 800c610:	00db      	lsls	r3, r3, #3
 800c612:	440b      	add	r3, r1
 800c614:	3308      	adds	r3, #8
 800c616:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d117      	bne.n	800c64e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	6819      	ldr	r1, [r3, #0]
 800c622:	7dfa      	ldrb	r2, [r7, #23]
 800c624:	481f      	ldr	r0, [pc, #124]	; (800c6a4 <etharp_output+0x200>)
 800c626:	4613      	mov	r3, r2
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	4413      	add	r3, r2
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	4403      	add	r3, r0
 800c630:	3304      	adds	r3, #4
 800c632:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c634:	4299      	cmp	r1, r3
 800c636:	d10a      	bne.n	800c64e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c638:	4a19      	ldr	r2, [pc, #100]	; (800c6a0 <etharp_output+0x1fc>)
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	461a      	mov	r2, r3
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7ff fe93 	bl	800c370 <etharp_output_to_arp_index>
 800c64a:	4603      	mov	r3, r0
 800c64c:	e018      	b.n	800c680 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	3301      	adds	r3, #1
 800c652:	75fb      	strb	r3, [r7, #23]
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b09      	cmp	r3, #9
 800c658:	d9ca      	bls.n	800c5f0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	69b9      	ldr	r1, [r7, #24]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 f822 	bl	800c6a8 <etharp_query>
 800c664:	4603      	mov	r3, r0
 800c666:	e00b      	b.n	800c680 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c66e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f001 fd41 	bl	800e100 <ethernet_output>
 800c67e:	4603      	mov	r3, r0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3720      	adds	r7, #32
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	08011524 	.word	0x08011524
 800c68c:	08011674 	.word	0x08011674
 800c690:	0801159c 	.word	0x0801159c
 800c694:	080116c4 	.word	0x080116c4
 800c698:	08011664 	.word	0x08011664
 800c69c:	08011cf8 	.word	0x08011cf8
 800c6a0:	20000200 	.word	0x20000200
 800c6a4:	20000110 	.word	0x20000110

0800c6a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3326      	adds	r3, #38	; 0x26
 800c6b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c6ba:	23ff      	movs	r3, #255	; 0xff
 800c6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68f9      	ldr	r1, [r7, #12]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 fe12 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10c      	bne.n	800c6f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6de:	2be0      	cmp	r3, #224	; 0xe0
 800c6e0:	d006      	beq.n	800c6f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d003      	beq.n	800c6f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c6f0:	f06f 030f 	mvn.w	r3, #15
 800c6f4:	e102      	b.n	800c8fc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	68b8      	ldr	r0, [r7, #8]
 800c6fc:	f7ff fb60 	bl	800bdc0 <etharp_find_entry>
 800c700:	4603      	mov	r3, r0
 800c702:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	da02      	bge.n	800c712 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c70c:	8a7b      	ldrh	r3, [r7, #18]
 800c70e:	b25b      	sxtb	r3, r3
 800c710:	e0f4      	b.n	800c8fc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c712:	8a7b      	ldrh	r3, [r7, #18]
 800c714:	2b7e      	cmp	r3, #126	; 0x7e
 800c716:	d906      	bls.n	800c726 <etharp_query+0x7e>
 800c718:	4b7a      	ldr	r3, [pc, #488]	; (800c904 <etharp_query+0x25c>)
 800c71a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c71e:	497a      	ldr	r1, [pc, #488]	; (800c908 <etharp_query+0x260>)
 800c720:	487a      	ldr	r0, [pc, #488]	; (800c90c <etharp_query+0x264>)
 800c722:	f001 fd7b 	bl	800e21c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c726:	8a7b      	ldrh	r3, [r7, #18]
 800c728:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c72a:	7c7a      	ldrb	r2, [r7, #17]
 800c72c:	4978      	ldr	r1, [pc, #480]	; (800c910 <etharp_query+0x268>)
 800c72e:	4613      	mov	r3, r2
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	4413      	add	r3, r2
 800c734:	00db      	lsls	r3, r3, #3
 800c736:	440b      	add	r3, r1
 800c738:	3314      	adds	r3, #20
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d115      	bne.n	800c76c <etharp_query+0xc4>
    is_new_entry = 1;
 800c740:	2301      	movs	r3, #1
 800c742:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c744:	7c7a      	ldrb	r2, [r7, #17]
 800c746:	4972      	ldr	r1, [pc, #456]	; (800c910 <etharp_query+0x268>)
 800c748:	4613      	mov	r3, r2
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	4413      	add	r3, r2
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	440b      	add	r3, r1
 800c752:	3314      	adds	r3, #20
 800c754:	2201      	movs	r2, #1
 800c756:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c758:	7c7a      	ldrb	r2, [r7, #17]
 800c75a:	496d      	ldr	r1, [pc, #436]	; (800c910 <etharp_query+0x268>)
 800c75c:	4613      	mov	r3, r2
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	4413      	add	r3, r2
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	440b      	add	r3, r1
 800c766:	3308      	adds	r3, #8
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c76c:	7c7a      	ldrb	r2, [r7, #17]
 800c76e:	4968      	ldr	r1, [pc, #416]	; (800c910 <etharp_query+0x268>)
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	440b      	add	r3, r1
 800c77a:	3314      	adds	r3, #20
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d011      	beq.n	800c7a6 <etharp_query+0xfe>
 800c782:	7c7a      	ldrb	r2, [r7, #17]
 800c784:	4962      	ldr	r1, [pc, #392]	; (800c910 <etharp_query+0x268>)
 800c786:	4613      	mov	r3, r2
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	4413      	add	r3, r2
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	440b      	add	r3, r1
 800c790:	3314      	adds	r3, #20
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d806      	bhi.n	800c7a6 <etharp_query+0xfe>
 800c798:	4b5a      	ldr	r3, [pc, #360]	; (800c904 <etharp_query+0x25c>)
 800c79a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c79e:	495d      	ldr	r1, [pc, #372]	; (800c914 <etharp_query+0x26c>)
 800c7a0:	485a      	ldr	r0, [pc, #360]	; (800c90c <etharp_query+0x264>)
 800c7a2:	f001 fd3b 	bl	800e21c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <etharp_query+0x10a>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10c      	bne.n	800c7cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 f963 	bl	800ca80 <etharp_request>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d102      	bne.n	800c7cc <etharp_query+0x124>
      return result;
 800c7c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7ca:	e097      	b.n	800c8fc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <etharp_query+0x138>
 800c7d2:	4b4c      	ldr	r3, [pc, #304]	; (800c904 <etharp_query+0x25c>)
 800c7d4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c7d8:	494f      	ldr	r1, [pc, #316]	; (800c918 <etharp_query+0x270>)
 800c7da:	484c      	ldr	r0, [pc, #304]	; (800c90c <etharp_query+0x264>)
 800c7dc:	f001 fd1e 	bl	800e21c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c7e0:	7c7a      	ldrb	r2, [r7, #17]
 800c7e2:	494b      	ldr	r1, [pc, #300]	; (800c910 <etharp_query+0x268>)
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	440b      	add	r3, r1
 800c7ee:	3314      	adds	r3, #20
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d918      	bls.n	800c828 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c7f6:	4a49      	ldr	r2, [pc, #292]	; (800c91c <etharp_query+0x274>)
 800c7f8:	7c7b      	ldrb	r3, [r7, #17]
 800c7fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c7fc:	7c7a      	ldrb	r2, [r7, #17]
 800c7fe:	4613      	mov	r3, r2
 800c800:	005b      	lsls	r3, r3, #1
 800c802:	4413      	add	r3, r2
 800c804:	00db      	lsls	r3, r3, #3
 800c806:	3308      	adds	r3, #8
 800c808:	4a41      	ldr	r2, [pc, #260]	; (800c910 <etharp_query+0x268>)
 800c80a:	4413      	add	r3, r2
 800c80c:	1d1a      	adds	r2, r3, #4
 800c80e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	4613      	mov	r3, r2
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f001 fc70 	bl	800e100 <ethernet_output>
 800c820:	4603      	mov	r3, r0
 800c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c826:	e067      	b.n	800c8f8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c828:	7c7a      	ldrb	r2, [r7, #17]
 800c82a:	4939      	ldr	r1, [pc, #228]	; (800c910 <etharp_query+0x268>)
 800c82c:	4613      	mov	r3, r2
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	4413      	add	r3, r2
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	440b      	add	r3, r1
 800c836:	3314      	adds	r3, #20
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d15c      	bne.n	800c8f8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c846:	e01c      	b.n	800c882 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	895a      	ldrh	r2, [r3, #10]
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	891b      	ldrh	r3, [r3, #8]
 800c850:	429a      	cmp	r2, r3
 800c852:	d10a      	bne.n	800c86a <etharp_query+0x1c2>
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d006      	beq.n	800c86a <etharp_query+0x1c2>
 800c85c:	4b29      	ldr	r3, [pc, #164]	; (800c904 <etharp_query+0x25c>)
 800c85e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c862:	492f      	ldr	r1, [pc, #188]	; (800c920 <etharp_query+0x278>)
 800c864:	4829      	ldr	r0, [pc, #164]	; (800c90c <etharp_query+0x264>)
 800c866:	f001 fcd9 	bl	800e21c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	7b1b      	ldrb	r3, [r3, #12]
 800c86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <etharp_query+0x1d4>
        copy_needed = 1;
 800c876:	2301      	movs	r3, #1
 800c878:	61bb      	str	r3, [r7, #24]
        break;
 800c87a:	e005      	b.n	800c888 <etharp_query+0x1e0>
      }
      p = p->next;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1df      	bne.n	800c848 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d007      	beq.n	800c89e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c894:	200e      	movs	r0, #14
 800c896:	f7f9 fd29 	bl	80062ec <pbuf_clone>
 800c89a:	61f8      	str	r0, [r7, #28]
 800c89c:	e004      	b.n	800c8a8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c8a2:	69f8      	ldr	r0, [r7, #28]
 800c8a4:	f7f9 fb66 	bl	8005f74 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d021      	beq.n	800c8f2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c8ae:	7c7a      	ldrb	r2, [r7, #17]
 800c8b0:	4917      	ldr	r1, [pc, #92]	; (800c910 <etharp_query+0x268>)
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	440b      	add	r3, r1
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00a      	beq.n	800c8d8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c8c2:	7c7a      	ldrb	r2, [r7, #17]
 800c8c4:	4912      	ldr	r1, [pc, #72]	; (800c910 <etharp_query+0x268>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7f9 faae 	bl	8005e34 <pbuf_free>
      }
      arp_table[i].q = p;
 800c8d8:	7c7a      	ldrb	r2, [r7, #17]
 800c8da:	490d      	ldr	r1, [pc, #52]	; (800c910 <etharp_query+0x268>)
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	440b      	add	r3, r1
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8f0:	e002      	b.n	800c8f8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c8f2:	23ff      	movs	r3, #255	; 0xff
 800c8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c8f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3728      	adds	r7, #40	; 0x28
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	08011524 	.word	0x08011524
 800c908:	080116d0 	.word	0x080116d0
 800c90c:	0801159c 	.word	0x0801159c
 800c910:	20000110 	.word	0x20000110
 800c914:	080116e0 	.word	0x080116e0
 800c918:	080116c4 	.word	0x080116c4
 800c91c:	20000200 	.word	0x20000200
 800c920:	08011708 	.word	0x08011708

0800c924 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b08a      	sub	sp, #40	; 0x28
 800c928:	af02      	add	r7, sp, #8
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <etharp_raw+0x26>
 800c93c:	4b3a      	ldr	r3, [pc, #232]	; (800ca28 <etharp_raw+0x104>)
 800c93e:	f240 4257 	movw	r2, #1111	; 0x457
 800c942:	493a      	ldr	r1, [pc, #232]	; (800ca2c <etharp_raw+0x108>)
 800c944:	483a      	ldr	r0, [pc, #232]	; (800ca30 <etharp_raw+0x10c>)
 800c946:	f001 fc69 	bl	800e21c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c94a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c94e:	211c      	movs	r1, #28
 800c950:	200e      	movs	r0, #14
 800c952:	f7f8 ff8f 	bl	8005874 <pbuf_alloc>
 800c956:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d102      	bne.n	800c964 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c95e:	f04f 33ff 	mov.w	r3, #4294967295
 800c962:	e05d      	b.n	800ca20 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	895b      	ldrh	r3, [r3, #10]
 800c968:	2b1b      	cmp	r3, #27
 800c96a:	d806      	bhi.n	800c97a <etharp_raw+0x56>
 800c96c:	4b2e      	ldr	r3, [pc, #184]	; (800ca28 <etharp_raw+0x104>)
 800c96e:	f240 4263 	movw	r2, #1123	; 0x463
 800c972:	4930      	ldr	r1, [pc, #192]	; (800ca34 <etharp_raw+0x110>)
 800c974:	482e      	ldr	r0, [pc, #184]	; (800ca30 <etharp_raw+0x10c>)
 800c976:	f001 fc51 	bl	800e21c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c980:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c982:	4618      	mov	r0, r3
 800c984:	f7f7 ffc1 	bl	800490a <lwip_htons>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c996:	2b06      	cmp	r3, #6
 800c998:	d006      	beq.n	800c9a8 <etharp_raw+0x84>
 800c99a:	4b23      	ldr	r3, [pc, #140]	; (800ca28 <etharp_raw+0x104>)
 800c99c:	f240 426a 	movw	r2, #1130	; 0x46a
 800c9a0:	4925      	ldr	r1, [pc, #148]	; (800ca38 <etharp_raw+0x114>)
 800c9a2:	4823      	ldr	r0, [pc, #140]	; (800ca30 <etharp_raw+0x10c>)
 800c9a4:	f001 fc3a 	bl	800e21c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	2206      	movs	r2, #6
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 fc20 	bl	800e1f6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	3312      	adds	r3, #18
 800c9ba:	2206      	movs	r2, #6
 800c9bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f001 fc19 	bl	800e1f6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	330e      	adds	r3, #14
 800c9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ca:	6812      	ldr	r2, [r2, #0]
 800c9cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	3318      	adds	r3, #24
 800c9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d4:	6812      	ldr	r2, [r2, #0]
 800c9d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f042 0201 	orr.w	r2, r2, #1
 800c9e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f042 0208 	orr.w	r2, r2, #8
 800c9ee:	709a      	strb	r2, [r3, #2]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	2206      	movs	r2, #6
 800c9f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2204      	movs	r2, #4
 800c9fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ca00:	f640 0306 	movw	r3, #2054	; 0x806
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	69b9      	ldr	r1, [r7, #24]
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f001 fb77 	bl	800e100 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ca12:	69b8      	ldr	r0, [r7, #24]
 800ca14:	f7f9 fa0e 	bl	8005e34 <pbuf_free>
  p = NULL;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ca1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	08011524 	.word	0x08011524
 800ca2c:	08011674 	.word	0x08011674
 800ca30:	0801159c 	.word	0x0801159c
 800ca34:	08011724 	.word	0x08011724
 800ca38:	08011758 	.word	0x08011758

0800ca3c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af04      	add	r7, sp, #16
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca58:	2201      	movs	r2, #1
 800ca5a:	9203      	str	r2, [sp, #12]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	9202      	str	r2, [sp, #8]
 800ca60:	4a06      	ldr	r2, [pc, #24]	; (800ca7c <etharp_request_dst+0x40>)
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	4603      	mov	r3, r0
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff ff5a 	bl	800c924 <etharp_raw>
 800ca70:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08011d00 	.word	0x08011d00

0800ca80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ca8a:	4a05      	ldr	r2, [pc, #20]	; (800caa0 <etharp_request+0x20>)
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff ffd4 	bl	800ca3c <etharp_request_dst>
 800ca94:	4603      	mov	r3, r0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	08011cf8 	.word	0x08011cf8

0800caa4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08e      	sub	sp, #56	; 0x38
 800caa8:	af04      	add	r7, sp, #16
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800caae:	4b7c      	ldr	r3, [pc, #496]	; (800cca0 <icmp_input+0x1fc>)
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	f003 030f 	and.w	r3, r3, #15
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cac6:	2b13      	cmp	r3, #19
 800cac8:	f240 80d2 	bls.w	800cc70 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	895b      	ldrh	r3, [r3, #10]
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	f240 80cf 	bls.w	800cc74 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800caea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 80b7 	beq.w	800cc62 <icmp_input+0x1be>
 800caf4:	2b08      	cmp	r3, #8
 800caf6:	f040 80b7 	bne.w	800cc68 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cafa:	4b6a      	ldr	r3, [pc, #424]	; (800cca4 <icmp_input+0x200>)
 800cafc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cafe:	4b68      	ldr	r3, [pc, #416]	; (800cca0 <icmp_input+0x1fc>)
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb06:	2be0      	cmp	r3, #224	; 0xe0
 800cb08:	f000 80bb 	beq.w	800cc82 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb0c:	4b64      	ldr	r3, [pc, #400]	; (800cca0 <icmp_input+0x1fc>)
 800cb0e:	695a      	ldr	r2, [r3, #20]
 800cb10:	4b63      	ldr	r3, [pc, #396]	; (800cca0 <icmp_input+0x1fc>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4619      	mov	r1, r3
 800cb16:	4610      	mov	r0, r2
 800cb18:	f000 fbec 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f040 80b1 	bne.w	800cc86 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	891b      	ldrh	r3, [r3, #8]
 800cb28:	2b07      	cmp	r3, #7
 800cb2a:	f240 80a5 	bls.w	800cc78 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb30:	330e      	adds	r3, #14
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7f9 f8e7 	bl	8005d08 <pbuf_add_header>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d04b      	beq.n	800cbd8 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	891a      	ldrh	r2, [r3, #8]
 800cb44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb46:	4413      	add	r3, r2
 800cb48:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	891b      	ldrh	r3, [r3, #8]
 800cb4e:	8b7a      	ldrh	r2, [r7, #26]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	f0c0 809a 	bcc.w	800cc8a <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cb56:	8b7b      	ldrh	r3, [r7, #26]
 800cb58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	200e      	movs	r0, #14
 800cb60:	f7f8 fe88 	bl	8005874 <pbuf_alloc>
 800cb64:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 8090 	beq.w	800cc8e <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	895b      	ldrh	r3, [r3, #10]
 800cb72:	461a      	mov	r2, r3
 800cb74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb76:	3308      	adds	r3, #8
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d203      	bcs.n	800cb84 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cb7c:	6978      	ldr	r0, [r7, #20]
 800cb7e:	f7f9 f959 	bl	8005e34 <pbuf_free>
          goto icmperr;
 800cb82:	e085      	b.n	800cc90 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 fb32 	bl	800e1f6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cb92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb94:	4619      	mov	r1, r3
 800cb96:	6978      	ldr	r0, [r7, #20]
 800cb98:	f7f9 f8c6 	bl	8005d28 <pbuf_remove_header>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cba2:	4b41      	ldr	r3, [pc, #260]	; (800cca8 <icmp_input+0x204>)
 800cba4:	22b6      	movs	r2, #182	; 0xb6
 800cba6:	4941      	ldr	r1, [pc, #260]	; (800ccac <icmp_input+0x208>)
 800cba8:	4841      	ldr	r0, [pc, #260]	; (800ccb0 <icmp_input+0x20c>)
 800cbaa:	f001 fb37 	bl	800e21c <iprintf>
          pbuf_free(r);
 800cbae:	6978      	ldr	r0, [r7, #20]
 800cbb0:	f7f9 f940 	bl	8005e34 <pbuf_free>
          goto icmperr;
 800cbb4:	e06c      	b.n	800cc90 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	6978      	ldr	r0, [r7, #20]
 800cbba:	f7f9 fa53 	bl	8006064 <pbuf_copy>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cbc4:	6978      	ldr	r0, [r7, #20]
 800cbc6:	f7f9 f935 	bl	8005e34 <pbuf_free>
          goto icmperr;
 800cbca:	e061      	b.n	800cc90 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7f9 f931 	bl	8005e34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	e00f      	b.n	800cbf8 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cbd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbda:	330e      	adds	r3, #14
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7f9 f8a2 	bl	8005d28 <pbuf_remove_header>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d006      	beq.n	800cbf8 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cbea:	4b2f      	ldr	r3, [pc, #188]	; (800cca8 <icmp_input+0x204>)
 800cbec:	22c7      	movs	r2, #199	; 0xc7
 800cbee:	4931      	ldr	r1, [pc, #196]	; (800ccb4 <icmp_input+0x210>)
 800cbf0:	482f      	ldr	r0, [pc, #188]	; (800ccb0 <icmp_input+0x20c>)
 800cbf2:	f001 fb13 	bl	800e21c <iprintf>
          goto icmperr;
 800cbf6:	e04b      	b.n	800cc90 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cbfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7f9 f880 	bl	8005d08 <pbuf_add_header>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d12b      	bne.n	800cc66 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc1c:	4b20      	ldr	r3, [pc, #128]	; (800cca0 <icmp_input+0x1fc>)
 800cc1e:	691a      	ldr	r2, [r3, #16]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	2200      	movs	r2, #0
 800cc28:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	709a      	strb	r2, [r3, #2]
 800cc30:	2200      	movs	r2, #0
 800cc32:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	22ff      	movs	r2, #255	; 0xff
 800cc38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	729a      	strb	r2, [r3, #10]
 800cc40:	2200      	movs	r2, #0
 800cc42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	9302      	str	r3, [sp, #8]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	23ff      	movs	r3, #255	; 0xff
 800cc52:	2200      	movs	r2, #0
 800cc54:	69f9      	ldr	r1, [r7, #28]
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fa74 	bl	800d144 <ip4_output_if>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cc60:	e001      	b.n	800cc66 <icmp_input+0x1c2>
      break;
 800cc62:	bf00      	nop
 800cc64:	e000      	b.n	800cc68 <icmp_input+0x1c4>
      break;
 800cc66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7f9 f8e3 	bl	8005e34 <pbuf_free>
  return;
 800cc6e:	e013      	b.n	800cc98 <icmp_input+0x1f4>
    goto lenerr;
 800cc70:	bf00      	nop
 800cc72:	e002      	b.n	800cc7a <icmp_input+0x1d6>
    goto lenerr;
 800cc74:	bf00      	nop
 800cc76:	e000      	b.n	800cc7a <icmp_input+0x1d6>
        goto lenerr;
 800cc78:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7f9 f8da 	bl	8005e34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc80:	e00a      	b.n	800cc98 <icmp_input+0x1f4>
        goto icmperr;
 800cc82:	bf00      	nop
 800cc84:	e004      	b.n	800cc90 <icmp_input+0x1ec>
        goto icmperr;
 800cc86:	bf00      	nop
 800cc88:	e002      	b.n	800cc90 <icmp_input+0x1ec>
          goto icmperr;
 800cc8a:	bf00      	nop
 800cc8c:	e000      	b.n	800cc90 <icmp_input+0x1ec>
          goto icmperr;
 800cc8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7f9 f8cf 	bl	8005e34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc98:	3728      	adds	r7, #40	; 0x28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	200033cc 	.word	0x200033cc
 800cca4:	200033e0 	.word	0x200033e0
 800cca8:	0801179c 	.word	0x0801179c
 800ccac:	080117d4 	.word	0x080117d4
 800ccb0:	0801180c 	.word	0x0801180c
 800ccb4:	08011834 	.word	0x08011834

0800ccb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2103      	movs	r1, #3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f814 	bl	800ccf8 <icmp_send_response>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cce4:	78fb      	ldrb	r3, [r7, #3]
 800cce6:	461a      	mov	r2, r3
 800cce8:	210b      	movs	r1, #11
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f804 	bl	800ccf8 <icmp_send_response>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08c      	sub	sp, #48	; 0x30
 800ccfc:	af04      	add	r7, sp, #16
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
 800cd04:	4613      	mov	r3, r2
 800cd06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd0c:	2124      	movs	r1, #36	; 0x24
 800cd0e:	2022      	movs	r0, #34	; 0x22
 800cd10:	f7f8 fdb0 	bl	8005874 <pbuf_alloc>
 800cd14:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d04c      	beq.n	800cdb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	895b      	ldrh	r3, [r3, #10]
 800cd20:	2b23      	cmp	r3, #35	; 0x23
 800cd22:	d806      	bhi.n	800cd32 <icmp_send_response+0x3a>
 800cd24:	4b26      	ldr	r3, [pc, #152]	; (800cdc0 <icmp_send_response+0xc8>)
 800cd26:	f240 1269 	movw	r2, #361	; 0x169
 800cd2a:	4926      	ldr	r1, [pc, #152]	; (800cdc4 <icmp_send_response+0xcc>)
 800cd2c:	4826      	ldr	r0, [pc, #152]	; (800cdc8 <icmp_send_response+0xd0>)
 800cd2e:	f001 fa75 	bl	800e21c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	78ba      	ldrb	r2, [r7, #2]
 800cd48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	711a      	strb	r2, [r3, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2200      	movs	r2, #0
 800cd58:	719a      	strb	r2, [r3, #6]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f103 0008 	add.w	r0, r3, #8
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	221c      	movs	r2, #28
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f001 fa42 	bl	800e1f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cd78:	f107 030c 	add.w	r3, r7, #12
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f825 	bl	800cdcc <ip4_route>
 800cd82:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d011      	beq.n	800cdae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	709a      	strb	r2, [r3, #2]
 800cd90:	2200      	movs	r2, #0
 800cd92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd94:	f107 020c 	add.w	r2, r7, #12
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	2300      	movs	r3, #0
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	23ff      	movs	r3, #255	; 0xff
 800cda6:	2100      	movs	r1, #0
 800cda8:	69b8      	ldr	r0, [r7, #24]
 800cdaa:	f000 f9cb 	bl	800d144 <ip4_output_if>
  }
  pbuf_free(q);
 800cdae:	69b8      	ldr	r0, [r7, #24]
 800cdb0:	f7f9 f840 	bl	8005e34 <pbuf_free>
 800cdb4:	e000      	b.n	800cdb8 <icmp_send_response+0xc0>
    return;
 800cdb6:	bf00      	nop
}
 800cdb8:	3720      	adds	r7, #32
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	0801179c 	.word	0x0801179c
 800cdc4:	08011868 	.word	0x08011868
 800cdc8:	0801180c 	.word	0x0801180c

0800cdcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cdd4:	4b33      	ldr	r3, [pc, #204]	; (800cea4 <ip4_route+0xd8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e036      	b.n	800ce4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d02b      	beq.n	800ce44 <ip4_route+0x78>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdf2:	089b      	lsrs	r3, r3, #2
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d022      	beq.n	800ce44 <ip4_route+0x78>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3304      	adds	r3, #4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d01d      	beq.n	800ce44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3304      	adds	r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	405a      	eors	r2, r3
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3308      	adds	r3, #8
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	e038      	b.n	800ce96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d108      	bne.n	800ce44 <ip4_route+0x78>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	330c      	adds	r3, #12
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d101      	bne.n	800ce44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	e028      	b.n	800ce96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1c5      	bne.n	800cddc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <ip4_route+0xdc>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01a      	beq.n	800ce8e <ip4_route+0xc2>
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <ip4_route+0xdc>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d012      	beq.n	800ce8e <ip4_route+0xc2>
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <ip4_route+0xdc>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce70:	f003 0304 	and.w	r3, r3, #4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce78:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <ip4_route+0xdc>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce8c:	d101      	bne.n	800ce92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e001      	b.n	800ce96 <ip4_route+0xca>
  }

  return netif_default;
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <ip4_route+0xdc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20006940 	.word	0x20006940
 800cea8:	20006944 	.word	0x20006944

0800ceac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d016      	beq.n	800cef2 <ip4_input_accept+0x46>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3304      	adds	r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d011      	beq.n	800cef2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cece:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <ip4_input_accept+0x50>)
 800ced0:	695a      	ldr	r2, [r3, #20]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3304      	adds	r3, #4
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d008      	beq.n	800ceee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <ip4_input_accept+0x50>)
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 fa06 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800cee8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	200033cc 	.word	0x200033cc

0800cf00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	091b      	lsrs	r3, r3, #4
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d004      	beq.n	800cf26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7f8 ff89 	bl	8005e34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e105      	b.n	800d132 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	f003 030f 	and.w	r3, r3, #15
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f7 fce4 	bl	800490a <lwip_htons>
 800cf42:	4603      	mov	r3, r0
 800cf44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	891b      	ldrh	r3, [r3, #8]
 800cf4a:	89ba      	ldrh	r2, [r7, #12]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d204      	bcs.n	800cf5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cf50:	89bb      	ldrh	r3, [r7, #12]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f8 fde7 	bl	8005b28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	895b      	ldrh	r3, [r3, #10]
 800cf5e:	89fa      	ldrh	r2, [r7, #14]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d807      	bhi.n	800cf74 <ip4_input+0x74>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	89ba      	ldrh	r2, [r7, #12]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d802      	bhi.n	800cf74 <ip4_input+0x74>
 800cf6e:	89fb      	ldrh	r3, [r7, #14]
 800cf70:	2b13      	cmp	r3, #19
 800cf72:	d804      	bhi.n	800cf7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7f8 ff5d 	bl	8005e34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e0d9      	b.n	800d132 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	4a6e      	ldr	r2, [pc, #440]	; (800d13c <ip4_input+0x23c>)
 800cf84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	4a6c      	ldr	r2, [pc, #432]	; (800d13c <ip4_input+0x23c>)
 800cf8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf8e:	4b6b      	ldr	r3, [pc, #428]	; (800d13c <ip4_input+0x23c>)
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf96:	2be0      	cmp	r3, #224	; 0xe0
 800cf98:	d112      	bne.n	800cfc0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d007      	beq.n	800cfba <ip4_input+0xba>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	3304      	adds	r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <ip4_input+0xba>
      netif = inp;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	617b      	str	r3, [r7, #20]
 800cfb8:	e02a      	b.n	800d010 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	e027      	b.n	800d010 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cfc0:	6838      	ldr	r0, [r7, #0]
 800cfc2:	f7ff ff73 	bl	800ceac <ip4_input_accept>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <ip4_input+0xd2>
      netif = inp;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	e01e      	b.n	800d010 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cfd6:	4b59      	ldr	r3, [pc, #356]	; (800d13c <ip4_input+0x23c>)
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b7f      	cmp	r3, #127	; 0x7f
 800cfde:	d017      	beq.n	800d010 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cfe0:	4b57      	ldr	r3, [pc, #348]	; (800d140 <ip4_input+0x240>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	e00e      	b.n	800d006 <ip4_input+0x106>
          if (netif == inp) {
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d006      	beq.n	800cffe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cff0:	6978      	ldr	r0, [r7, #20]
 800cff2:	f7ff ff5b 	bl	800ceac <ip4_input_accept>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d108      	bne.n	800d00e <ip4_input+0x10e>
 800cffc:	e000      	b.n	800d000 <ip4_input+0x100>
            continue;
 800cffe:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1ed      	bne.n	800cfe8 <ip4_input+0xe8>
 800d00c:	e000      	b.n	800d010 <ip4_input+0x110>
            break;
 800d00e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d010:	4b4a      	ldr	r3, [pc, #296]	; (800d13c <ip4_input+0x23c>)
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f96c 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d022:	4b46      	ldr	r3, [pc, #280]	; (800d13c <ip4_input+0x23c>)
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d02a:	2be0      	cmp	r3, #224	; 0xe0
 800d02c:	d104      	bne.n	800d038 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7f8 ff00 	bl	8005e34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	e07c      	b.n	800d132 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d104      	bne.n	800d048 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f8 fef8 	bl	8005e34 <pbuf_free>
    return ERR_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	e074      	b.n	800d132 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	88db      	ldrh	r3, [r3, #6]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d054:	4013      	ands	r3, r2
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00b      	beq.n	800d072 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fc90 	bl	800d980 <ip4_reass>
 800d060:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <ip4_input+0x16c>
      return ERR_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	e062      	b.n	800d132 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d072:	4a32      	ldr	r2, [pc, #200]	; (800d13c <ip4_input+0x23c>)
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d078:	4a30      	ldr	r2, [pc, #192]	; (800d13c <ip4_input+0x23c>)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d07e:	4a2f      	ldr	r2, [pc, #188]	; (800d13c <ip4_input+0x23c>)
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	b2db      	uxtb	r3, r3
 800d092:	b29a      	uxth	r2, r3
 800d094:	4b29      	ldr	r3, [pc, #164]	; (800d13c <ip4_input+0x23c>)
 800d096:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d098:	89fb      	ldrh	r3, [r7, #14]
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f8 fe43 	bl	8005d28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	7a5b      	ldrb	r3, [r3, #9]
 800d0a6:	2b06      	cmp	r3, #6
 800d0a8:	d009      	beq.n	800d0be <ip4_input+0x1be>
 800d0aa:	2b11      	cmp	r3, #17
 800d0ac:	d002      	beq.n	800d0b4 <ip4_input+0x1b4>
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d00a      	beq.n	800d0c8 <ip4_input+0x1c8>
 800d0b2:	e00e      	b.n	800d0d2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7fe fc36 	bl	800b928 <udp_input>
        break;
 800d0bc:	e026      	b.n	800d10c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7fa fcd3 	bl	8007a6c <tcp_input>
        break;
 800d0c6:	e021      	b.n	800d10c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff fcea 	bl	800caa4 <icmp_input>
        break;
 800d0d0:	e01c      	b.n	800d10c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0d2:	4b1a      	ldr	r3, [pc, #104]	; (800d13c <ip4_input+0x23c>)
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	6979      	ldr	r1, [r7, #20]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 f90b 	bl	800d2f4 <ip4_addr_isbroadcast_u32>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10f      	bne.n	800d104 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0e4:	4b15      	ldr	r3, [pc, #84]	; (800d13c <ip4_input+0x23c>)
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0ec:	2be0      	cmp	r3, #224	; 0xe0
 800d0ee:	d009      	beq.n	800d104 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d0f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7f8 fe89 	bl	8005e0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d0fc:	2102      	movs	r1, #2
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7ff fdda 	bl	800ccb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7f8 fe95 	bl	8005e34 <pbuf_free>
        break;
 800d10a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d10c:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <ip4_input+0x23c>)
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d112:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <ip4_input+0x23c>)
 800d114:	2200      	movs	r2, #0
 800d116:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d118:	4b08      	ldr	r3, [pc, #32]	; (800d13c <ip4_input+0x23c>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <ip4_input+0x23c>)
 800d120:	2200      	movs	r2, #0
 800d122:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d124:	4b05      	ldr	r3, [pc, #20]	; (800d13c <ip4_input+0x23c>)
 800d126:	2200      	movs	r2, #0
 800d128:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d12a:	4b04      	ldr	r3, [pc, #16]	; (800d13c <ip4_input+0x23c>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3718      	adds	r7, #24
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	200033cc 	.word	0x200033cc
 800d140:	20006940 	.word	0x20006940

0800d144 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af04      	add	r7, sp, #16
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d009      	beq.n	800d170 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <ip4_output_if+0x26>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	3304      	adds	r3, #4
 800d16e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d170:	78fa      	ldrb	r2, [r7, #3]
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	9302      	str	r3, [sp, #8]
 800d176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	4613      	mov	r3, r2
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	6979      	ldr	r1, [r7, #20]
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 f805 	bl	800d198 <ip4_output_if_src>
 800d18e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	7b9b      	ldrb	r3, [r3, #14]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d006      	beq.n	800d1bc <ip4_output_if_src+0x24>
 800d1ae:	4b4b      	ldr	r3, [pc, #300]	; (800d2dc <ip4_output_if_src+0x144>)
 800d1b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d1b4:	494a      	ldr	r1, [pc, #296]	; (800d2e0 <ip4_output_if_src+0x148>)
 800d1b6:	484b      	ldr	r0, [pc, #300]	; (800d2e4 <ip4_output_if_src+0x14c>)
 800d1b8:	f001 f830 	bl	800e21c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d060      	beq.n	800d284 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d1c2:	2314      	movs	r3, #20
 800d1c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d1c6:	2114      	movs	r1, #20
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7f8 fd9d 	bl	8005d08 <pbuf_add_header>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d1d4:	f06f 0301 	mvn.w	r3, #1
 800d1d8:	e07c      	b.n	800d2d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	895b      	ldrh	r3, [r3, #10]
 800d1e4:	2b13      	cmp	r3, #19
 800d1e6:	d806      	bhi.n	800d1f6 <ip4_output_if_src+0x5e>
 800d1e8:	4b3c      	ldr	r3, [pc, #240]	; (800d2dc <ip4_output_if_src+0x144>)
 800d1ea:	f240 3289 	movw	r2, #905	; 0x389
 800d1ee:	493e      	ldr	r1, [pc, #248]	; (800d2e8 <ip4_output_if_src+0x150>)
 800d1f0:	483c      	ldr	r0, [pc, #240]	; (800d2e4 <ip4_output_if_src+0x14c>)
 800d1f2:	f001 f813 	bl	800e21c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	78fa      	ldrb	r2, [r7, #3]
 800d1fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d202:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d20c:	8b7b      	ldrh	r3, [r7, #26]
 800d20e:	089b      	lsrs	r3, r3, #2
 800d210:	b29b      	uxth	r3, r3
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d224:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	891b      	ldrh	r3, [r3, #8]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7f7 fb6d 	bl	800490a <lwip_htons>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	2200      	movs	r2, #0
 800d23c:	719a      	strb	r2, [r3, #6]
 800d23e:	2200      	movs	r2, #0
 800d240:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d242:	4b2a      	ldr	r3, [pc, #168]	; (800d2ec <ip4_output_if_src+0x154>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f7 fb5f 	bl	800490a <lwip_htons>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d254:	4b25      	ldr	r3, [pc, #148]	; (800d2ec <ip4_output_if_src+0x154>)
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	4b23      	ldr	r3, [pc, #140]	; (800d2ec <ip4_output_if_src+0x154>)
 800d25e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d266:	4b22      	ldr	r3, [pc, #136]	; (800d2f0 <ip4_output_if_src+0x158>)
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	60da      	str	r2, [r3, #12]
 800d26e:	e003      	b.n	800d278 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2200      	movs	r2, #0
 800d27c:	729a      	strb	r2, [r3, #10]
 800d27e:	2200      	movs	r2, #0
 800d280:	72da      	strb	r2, [r3, #11]
 800d282:	e00f      	b.n	800d2a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	895b      	ldrh	r3, [r3, #10]
 800d288:	2b13      	cmp	r3, #19
 800d28a:	d802      	bhi.n	800d292 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d28c:	f06f 0301 	mvn.w	r3, #1
 800d290:	e020      	b.n	800d2d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d29e:	f107 0314 	add.w	r3, r7, #20
 800d2a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00c      	beq.n	800d2c6 <ip4_output_if_src+0x12e>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	891a      	ldrh	r2, [r3, #8]
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d906      	bls.n	800d2c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 fd4d 	bl	800dd5c <ip4_frag>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	e006      	b.n	800d2d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	68f9      	ldr	r1, [r7, #12]
 800d2ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d0:	4798      	blx	r3
 800d2d2:	4603      	mov	r3, r0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3720      	adds	r7, #32
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	08011894 	.word	0x08011894
 800d2e0:	080118c8 	.word	0x080118c8
 800d2e4:	080118d4 	.word	0x080118d4
 800d2e8:	080118fc 	.word	0x080118fc
 800d2ec:	20000202 	.word	0x20000202
 800d2f0:	08011cf4 	.word	0x08011cf4

0800d2f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d308:	d002      	beq.n	800d310 <ip4_addr_isbroadcast_u32+0x1c>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d310:	2301      	movs	r3, #1
 800d312:	e02a      	b.n	800d36a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d31a:	f003 0302 	and.w	r3, r3, #2
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d322:	2300      	movs	r3, #0
 800d324:	e021      	b.n	800d36a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	3304      	adds	r3, #4
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d101      	bne.n	800d336 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d332:	2300      	movs	r3, #0
 800d334:	e019      	b.n	800d36a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	3304      	adds	r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	405a      	eors	r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	3308      	adds	r3, #8
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4013      	ands	r3, r2
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10d      	bne.n	800d368 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	43da      	mvns	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	3308      	adds	r3, #8
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d360:	429a      	cmp	r2, r3
 800d362:	d101      	bne.n	800d368 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d364:	2301      	movs	r3, #1
 800d366:	e000      	b.n	800d36a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d368:	2300      	movs	r3, #0
  }
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
	...

0800d378 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <ip_reass_tmr+0x54>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d388:	e018      	b.n	800d3bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7fdb      	ldrb	r3, [r3, #31]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00b      	beq.n	800d3aa <ip_reass_tmr+0x32>
      r->timer--;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	7fdb      	ldrb	r3, [r3, #31]
 800d396:	3b01      	subs	r3, #1
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	e008      	b.n	800d3bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d3b4:	68b9      	ldr	r1, [r7, #8]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f80a 	bl	800d3d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1e3      	bne.n	800d38a <ip_reass_tmr+0x12>
    }
  }
}
 800d3c2:	bf00      	nop
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000204 	.word	0x20000204

0800d3d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d105      	bne.n	800d3f2 <ip_reass_free_complete_datagram+0x22>
 800d3e6:	4b45      	ldr	r3, [pc, #276]	; (800d4fc <ip_reass_free_complete_datagram+0x12c>)
 800d3e8:	22ab      	movs	r2, #171	; 0xab
 800d3ea:	4945      	ldr	r1, [pc, #276]	; (800d500 <ip_reass_free_complete_datagram+0x130>)
 800d3ec:	4845      	ldr	r0, [pc, #276]	; (800d504 <ip_reass_free_complete_datagram+0x134>)
 800d3ee:	f000 ff15 	bl	800e21c <iprintf>
  if (prev != NULL) {
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d005      	beq.n	800d40e <ip_reass_free_complete_datagram+0x3e>
 800d402:	4b3e      	ldr	r3, [pc, #248]	; (800d4fc <ip_reass_free_complete_datagram+0x12c>)
 800d404:	22ad      	movs	r2, #173	; 0xad
 800d406:	4940      	ldr	r1, [pc, #256]	; (800d508 <ip_reass_free_complete_datagram+0x138>)
 800d408:	483e      	ldr	r0, [pc, #248]	; (800d504 <ip_reass_free_complete_datagram+0x134>)
 800d40a:	f000 ff07 	bl	800e21c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	889b      	ldrh	r3, [r3, #4]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d12a      	bne.n	800d476 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6858      	ldr	r0, [r3, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3308      	adds	r3, #8
 800d436:	2214      	movs	r2, #20
 800d438:	4619      	mov	r1, r3
 800d43a:	f000 fedc 	bl	800e1f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d43e:	2101      	movs	r1, #1
 800d440:	69b8      	ldr	r0, [r7, #24]
 800d442:	f7ff fc49 	bl	800ccd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d446:	69b8      	ldr	r0, [r7, #24]
 800d448:	f7f8 fd7c 	bl	8005f44 <pbuf_clen>
 800d44c:	4603      	mov	r3, r0
 800d44e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d450:	8bfa      	ldrh	r2, [r7, #30]
 800d452:	8a7b      	ldrh	r3, [r7, #18]
 800d454:	4413      	add	r3, r2
 800d456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d45a:	db05      	blt.n	800d468 <ip_reass_free_complete_datagram+0x98>
 800d45c:	4b27      	ldr	r3, [pc, #156]	; (800d4fc <ip_reass_free_complete_datagram+0x12c>)
 800d45e:	22bc      	movs	r2, #188	; 0xbc
 800d460:	492a      	ldr	r1, [pc, #168]	; (800d50c <ip_reass_free_complete_datagram+0x13c>)
 800d462:	4828      	ldr	r0, [pc, #160]	; (800d504 <ip_reass_free_complete_datagram+0x134>)
 800d464:	f000 feda 	bl	800e21c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d468:	8bfa      	ldrh	r2, [r7, #30]
 800d46a:	8a7b      	ldrh	r3, [r7, #18]
 800d46c:	4413      	add	r3, r2
 800d46e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d470:	69b8      	ldr	r0, [r7, #24]
 800d472:	f7f8 fcdf 	bl	8005e34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d47c:	e01f      	b.n	800d4be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7f8 fd58 	bl	8005f44 <pbuf_clen>
 800d494:	4603      	mov	r3, r0
 800d496:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d498:	8bfa      	ldrh	r2, [r7, #30]
 800d49a:	8a7b      	ldrh	r3, [r7, #18]
 800d49c:	4413      	add	r3, r2
 800d49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4a2:	db05      	blt.n	800d4b0 <ip_reass_free_complete_datagram+0xe0>
 800d4a4:	4b15      	ldr	r3, [pc, #84]	; (800d4fc <ip_reass_free_complete_datagram+0x12c>)
 800d4a6:	22cc      	movs	r2, #204	; 0xcc
 800d4a8:	4918      	ldr	r1, [pc, #96]	; (800d50c <ip_reass_free_complete_datagram+0x13c>)
 800d4aa:	4816      	ldr	r0, [pc, #88]	; (800d504 <ip_reass_free_complete_datagram+0x134>)
 800d4ac:	f000 feb6 	bl	800e21c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d4b0:	8bfa      	ldrh	r2, [r7, #30]
 800d4b2:	8a7b      	ldrh	r3, [r7, #18]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7f8 fcbb 	bl	8005e34 <pbuf_free>
  while (p != NULL) {
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1dc      	bne.n	800d47e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f8c2 	bl	800d650 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d4cc:	4b10      	ldr	r3, [pc, #64]	; (800d510 <ip_reass_free_complete_datagram+0x140>)
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	8bfa      	ldrh	r2, [r7, #30]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d905      	bls.n	800d4e2 <ip_reass_free_complete_datagram+0x112>
 800d4d6:	4b09      	ldr	r3, [pc, #36]	; (800d4fc <ip_reass_free_complete_datagram+0x12c>)
 800d4d8:	22d2      	movs	r2, #210	; 0xd2
 800d4da:	490e      	ldr	r1, [pc, #56]	; (800d514 <ip_reass_free_complete_datagram+0x144>)
 800d4dc:	4809      	ldr	r0, [pc, #36]	; (800d504 <ip_reass_free_complete_datagram+0x134>)
 800d4de:	f000 fe9d 	bl	800e21c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d4e2:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <ip_reass_free_complete_datagram+0x140>)
 800d4e4:	881a      	ldrh	r2, [r3, #0]
 800d4e6:	8bfb      	ldrh	r3, [r7, #30]
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	4b08      	ldr	r3, [pc, #32]	; (800d510 <ip_reass_free_complete_datagram+0x140>)
 800d4ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d4f0:	8bfb      	ldrh	r3, [r7, #30]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	0801192c 	.word	0x0801192c
 800d500:	08011968 	.word	0x08011968
 800d504:	08011974 	.word	0x08011974
 800d508:	0801199c 	.word	0x0801199c
 800d50c:	080119b0 	.word	0x080119b0
 800d510:	20000208 	.word	0x20000208
 800d514:	080119d0 	.word	0x080119d0

0800d518 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08a      	sub	sp, #40	; 0x28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d526:	2300      	movs	r3, #0
 800d528:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d536:	4b28      	ldr	r3, [pc, #160]	; (800d5d8 <ip_reass_remove_oldest_datagram+0xc0>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d53c:	e030      	b.n	800d5a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d540:	695a      	ldr	r2, [r3, #20]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	429a      	cmp	r2, r3
 800d548:	d10c      	bne.n	800d564 <ip_reass_remove_oldest_datagram+0x4c>
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	699a      	ldr	r2, [r3, #24]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	429a      	cmp	r2, r3
 800d554:	d106      	bne.n	800d564 <ip_reass_remove_oldest_datagram+0x4c>
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	899a      	ldrh	r2, [r3, #12]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	889b      	ldrh	r3, [r3, #4]
 800d55e:	b29b      	uxth	r3, r3
 800d560:	429a      	cmp	r2, r3
 800d562:	d014      	beq.n	800d58e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	3301      	adds	r3, #1
 800d568:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d104      	bne.n	800d57a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	61bb      	str	r3, [r7, #24]
 800d578:	e009      	b.n	800d58e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	7fda      	ldrb	r2, [r3, #31]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	7fdb      	ldrb	r3, [r3, #31]
 800d582:	429a      	cmp	r2, r3
 800d584:	d803      	bhi.n	800d58e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1cb      	bne.n	800d53e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d008      	beq.n	800d5be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d5ac:	69b9      	ldr	r1, [r7, #24]
 800d5ae:	6a38      	ldr	r0, [r7, #32]
 800d5b0:	f7ff ff0e 	bl	800d3d0 <ip_reass_free_complete_datagram>
 800d5b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	da02      	bge.n	800d5cc <ip_reass_remove_oldest_datagram+0xb4>
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	dcac      	bgt.n	800d526 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d5cc:	697b      	ldr	r3, [r7, #20]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3728      	adds	r7, #40	; 0x28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20000204 	.word	0x20000204

0800d5dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d5e6:	2004      	movs	r0, #4
 800d5e8:	f7f7 fde4 	bl	80051b4 <memp_malloc>
 800d5ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d110      	bne.n	800d616 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff ff8e 	bl	800d518 <ip_reass_remove_oldest_datagram>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	4293      	cmp	r3, r2
 800d602:	dc03      	bgt.n	800d60c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d604:	2004      	movs	r0, #4
 800d606:	f7f7 fdd5 	bl	80051b4 <memp_malloc>
 800d60a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	e016      	b.n	800d644 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d616:	2220      	movs	r2, #32
 800d618:	2100      	movs	r1, #0
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 fdf6 	bl	800e20c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	220f      	movs	r2, #15
 800d624:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <ip_reass_enqueue_new_datagram+0x70>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d62e:	4a07      	ldr	r2, [pc, #28]	; (800d64c <ip_reass_enqueue_new_datagram+0x70>)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3308      	adds	r3, #8
 800d638:	2214      	movs	r2, #20
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 fdda 	bl	800e1f6 <memcpy>
  return ipr;
 800d642:	68fb      	ldr	r3, [r7, #12]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20000204 	.word	0x20000204

0800d650 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d65a:	4b10      	ldr	r3, [pc, #64]	; (800d69c <ip_reass_dequeue_datagram+0x4c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d104      	bne.n	800d66e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a0c      	ldr	r2, [pc, #48]	; (800d69c <ip_reass_dequeue_datagram+0x4c>)
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	e00d      	b.n	800d68a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d106      	bne.n	800d682 <ip_reass_dequeue_datagram+0x32>
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <ip_reass_dequeue_datagram+0x50>)
 800d676:	f240 1245 	movw	r2, #325	; 0x145
 800d67a:	490a      	ldr	r1, [pc, #40]	; (800d6a4 <ip_reass_dequeue_datagram+0x54>)
 800d67c:	480a      	ldr	r0, [pc, #40]	; (800d6a8 <ip_reass_dequeue_datagram+0x58>)
 800d67e:	f000 fdcd 	bl	800e21c <iprintf>
    prev->next = ipr->next;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	2004      	movs	r0, #4
 800d68e:	f7f7 fddd 	bl	800524c <memp_free>
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	20000204 	.word	0x20000204
 800d6a0:	0801192c 	.word	0x0801192c
 800d6a4:	080119f4 	.word	0x080119f4
 800d6a8:	08011974 	.word	0x08011974

0800d6ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08c      	sub	sp, #48	; 0x30
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	885b      	ldrh	r3, [r3, #2]
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f7 f91c 	bl	800490a <lwip_htons>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	f003 030f 	and.w	r3, r3, #15
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d6e4:	7e7b      	ldrb	r3, [r7, #25]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	8b7a      	ldrh	r2, [r7, #26]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d202      	bcs.n	800d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f2:	e135      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d6f4:	7e7b      	ldrb	r3, [r7, #25]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	8b7a      	ldrh	r2, [r7, #26]
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	88db      	ldrh	r3, [r3, #6]
 800d702:	b29b      	uxth	r3, r3
 800d704:	4618      	mov	r0, r3
 800d706:	f7f7 f900 	bl	800490a <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d710:	b29b      	uxth	r3, r3
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	2200      	movs	r2, #0
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	2200      	movs	r2, #0
 800d724:	705a      	strb	r2, [r3, #1]
 800d726:	2200      	movs	r2, #0
 800d728:	709a      	strb	r2, [r3, #2]
 800d72a:	2200      	movs	r2, #0
 800d72c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	8afa      	ldrh	r2, [r7, #22]
 800d732:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d734:	8afa      	ldrh	r2, [r7, #22]
 800d736:	8b7b      	ldrh	r3, [r7, #26]
 800d738:	4413      	add	r3, r2
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	88db      	ldrh	r3, [r3, #6]
 800d744:	b29b      	uxth	r3, r3
 800d746:	8afa      	ldrh	r2, [r7, #22]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d902      	bls.n	800d752 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d74c:	f04f 33ff 	mov.w	r3, #4294967295
 800d750:	e106      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
 800d758:	e068      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	889b      	ldrh	r3, [r3, #4]
 800d764:	b29a      	uxth	r2, r3
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	889b      	ldrh	r3, [r3, #4]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d235      	bcs.n	800d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d774:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d020      	beq.n	800d7be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	889b      	ldrh	r3, [r3, #4]
 800d780:	b29a      	uxth	r2, r3
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	88db      	ldrh	r3, [r3, #6]
 800d786:	b29b      	uxth	r3, r3
 800d788:	429a      	cmp	r2, r3
 800d78a:	d307      	bcc.n	800d79c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	88db      	ldrh	r3, [r3, #6]
 800d790:	b29a      	uxth	r2, r3
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	889b      	ldrh	r3, [r3, #4]
 800d796:	b29b      	uxth	r3, r3
 800d798:	429a      	cmp	r2, r3
 800d79a:	d902      	bls.n	800d7a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a0:	e0de      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	88db      	ldrh	r3, [r3, #6]
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	889b      	ldrh	r3, [r3, #4]
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d03d      	beq.n	800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d7bc:	e03a      	b.n	800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c0:	88db      	ldrh	r3, [r3, #6]
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	889b      	ldrh	r3, [r3, #4]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d902      	bls.n	800d7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d2:	e0c5      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	605a      	str	r2, [r3, #4]
      break;
 800d7da:	e02b      	b.n	800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	889b      	ldrh	r3, [r3, #4]
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	889b      	ldrh	r3, [r3, #4]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d102      	bne.n	800d7f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f0:	e0b6      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	889b      	ldrh	r3, [r3, #4]
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	88db      	ldrh	r3, [r3, #6]
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d202      	bcs.n	800d808 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	e0ab      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d009      	beq.n	800d822 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	88db      	ldrh	r3, [r3, #6]
 800d812:	b29a      	uxth	r2, r3
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	889b      	ldrh	r3, [r3, #4]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d001      	beq.n	800d822 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d193      	bne.n	800d75a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d832:	e000      	b.n	800d836 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d834:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d12d      	bne.n	800d898 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d01c      	beq.n	800d87c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d844:	88db      	ldrh	r3, [r3, #6]
 800d846:	b29a      	uxth	r2, r3
 800d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84a:	889b      	ldrh	r3, [r3, #4]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	429a      	cmp	r2, r3
 800d850:	d906      	bls.n	800d860 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d852:	4b45      	ldr	r3, [pc, #276]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d854:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d858:	4944      	ldr	r1, [pc, #272]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d85a:	4845      	ldr	r0, [pc, #276]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d85c:	f000 fcde 	bl	800e21c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	88db      	ldrh	r3, [r3, #6]
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	889b      	ldrh	r3, [r3, #4]
 800d870:	b29b      	uxth	r3, r3
 800d872:	429a      	cmp	r2, r3
 800d874:	d010      	beq.n	800d898 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	623b      	str	r3, [r7, #32]
 800d87a:	e00d      	b.n	800d898 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d884:	4b38      	ldr	r3, [pc, #224]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d886:	f240 12bf 	movw	r2, #447	; 0x1bf
 800d88a:	493a      	ldr	r1, [pc, #232]	; (800d974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d88c:	4838      	ldr	r0, [pc, #224]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d88e:	f000 fcc5 	bl	800e21c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d105      	bne.n	800d8aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	7f9b      	ldrb	r3, [r3, #30]
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d059      	beq.n	800d95e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d04f      	beq.n	800d950 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d006      	beq.n	800d8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	889b      	ldrh	r3, [r3, #4]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	623b      	str	r3, [r7, #32]
 800d8ca:	e041      	b.n	800d950 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d8d6:	e012      	b.n	800d8fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	88db      	ldrh	r3, [r3, #6]
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	889b      	ldrh	r3, [r3, #4]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d002      	beq.n	800d8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	623b      	str	r3, [r7, #32]
            break;
 800d8f2:	e007      	b.n	800d904 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1e9      	bne.n	800d8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d022      	beq.n	800d950 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d106      	bne.n	800d920 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d912:	4b15      	ldr	r3, [pc, #84]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d914:	f240 12df 	movw	r2, #479	; 0x1df
 800d918:	4917      	ldr	r1, [pc, #92]	; (800d978 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d91a:	4815      	ldr	r0, [pc, #84]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d91c:	f000 fc7e 	bl	800e21c <iprintf>
          LWIP_ASSERT("sanity check",
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d928:	429a      	cmp	r2, r3
 800d92a:	d106      	bne.n	800d93a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d92e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d932:	4911      	ldr	r1, [pc, #68]	; (800d978 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d934:	480e      	ldr	r0, [pc, #56]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d936:	f000 fc71 	bl	800e21c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d942:	4b09      	ldr	r3, [pc, #36]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d944:	f240 12e3 	movw	r2, #483	; 0x1e3
 800d948:	490c      	ldr	r1, [pc, #48]	; (800d97c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d94a:	4809      	ldr	r0, [pc, #36]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d94c:	f000 fc66 	bl	800e21c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d950:	6a3b      	ldr	r3, [r7, #32]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bf14      	ite	ne
 800d956:	2301      	movne	r3, #1
 800d958:	2300      	moveq	r3, #0
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	e000      	b.n	800d960 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3730      	adds	r7, #48	; 0x30
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	0801192c 	.word	0x0801192c
 800d96c:	08011a10 	.word	0x08011a10
 800d970:	08011974 	.word	0x08011974
 800d974:	08011a30 	.word	0x08011a30
 800d978:	08011a68 	.word	0x08011a68
 800d97c:	08011a78 	.word	0x08011a78

0800d980 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08e      	sub	sp, #56	; 0x38
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 030f 	and.w	r3, r3, #15
 800d996:	b2db      	uxtb	r3, r3
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b14      	cmp	r3, #20
 800d99e:	f040 8167 	bne.w	800dc70 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	88db      	ldrh	r3, [r3, #6]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f6 ffae 	bl	800490a <lwip_htons>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	885b      	ldrh	r3, [r3, #2]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7f6 ffa2 	bl	800490a <lwip_htons>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	f003 030f 	and.w	r3, r3, #15
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d9da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	f0c0 8146 	bcc.w	800dc74 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d9e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7f8 faa5 	bl	8005f44 <pbuf_clen>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d9fe:	4b9f      	ldr	r3, [pc, #636]	; (800dc7c <ip4_reass+0x2fc>)
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	461a      	mov	r2, r3
 800da04:	8c3b      	ldrh	r3, [r7, #32]
 800da06:	4413      	add	r3, r2
 800da08:	2b0a      	cmp	r3, #10
 800da0a:	dd10      	ble.n	800da2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da0c:	8c3b      	ldrh	r3, [r7, #32]
 800da0e:	4619      	mov	r1, r3
 800da10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da12:	f7ff fd81 	bl	800d518 <ip_reass_remove_oldest_datagram>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 812d 	beq.w	800dc78 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800da1e:	4b97      	ldr	r3, [pc, #604]	; (800dc7c <ip4_reass+0x2fc>)
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	461a      	mov	r2, r3
 800da24:	8c3b      	ldrh	r3, [r7, #32]
 800da26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da28:	2b0a      	cmp	r3, #10
 800da2a:	f300 8125 	bgt.w	800dc78 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da2e:	4b94      	ldr	r3, [pc, #592]	; (800dc80 <ip4_reass+0x300>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	633b      	str	r3, [r7, #48]	; 0x30
 800da34:	e015      	b.n	800da62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800da36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da38:	695a      	ldr	r2, [r3, #20]
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d10c      	bne.n	800da5c <ip4_reass+0xdc>
 800da42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da44:	699a      	ldr	r2, [r3, #24]
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d106      	bne.n	800da5c <ip4_reass+0xdc>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	899a      	ldrh	r2, [r3, #12]
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	889b      	ldrh	r3, [r3, #4]
 800da56:	b29b      	uxth	r3, r3
 800da58:	429a      	cmp	r2, r3
 800da5a:	d006      	beq.n	800da6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	633b      	str	r3, [r7, #48]	; 0x30
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1e6      	bne.n	800da36 <ip4_reass+0xb6>
 800da68:	e000      	b.n	800da6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800da6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d109      	bne.n	800da86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800da72:	8c3b      	ldrh	r3, [r7, #32]
 800da74:	4619      	mov	r1, r3
 800da76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da78:	f7ff fdb0 	bl	800d5dc <ip_reass_enqueue_new_datagram>
 800da7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800da7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11c      	bne.n	800dabe <ip4_reass+0x13e>
      goto nullreturn;
 800da84:	e109      	b.n	800dc9a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	88db      	ldrh	r3, [r3, #6]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f6 ff3c 	bl	800490a <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d110      	bne.n	800dabe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	89db      	ldrh	r3, [r3, #14]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f6 ff32 	bl	800490a <lwip_htons>
 800daa6:	4603      	mov	r3, r0
 800daa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800daac:	2b00      	cmp	r3, #0
 800daae:	d006      	beq.n	800dabe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	3308      	adds	r3, #8
 800dab4:	2214      	movs	r2, #20
 800dab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 fb9c 	bl	800e1f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	88db      	ldrh	r3, [r3, #6]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f003 0320 	and.w	r3, r3, #32
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bf0c      	ite	eq
 800dacc:	2301      	moveq	r3, #1
 800dace:	2300      	movne	r3, #0
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00e      	beq.n	800daf8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dada:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dadc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dade:	4413      	add	r3, r2
 800dae0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dae2:	8b7a      	ldrh	r2, [r7, #26]
 800dae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dae6:	429a      	cmp	r2, r3
 800dae8:	f0c0 80a0 	bcc.w	800dc2c <ip4_reass+0x2ac>
 800daec:	8b7b      	ldrh	r3, [r7, #26]
 800daee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800daf2:	4293      	cmp	r3, r2
 800daf4:	f200 809a 	bhi.w	800dc2c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dafe:	f7ff fdd5 	bl	800d6ac <ip_reass_chain_frag_into_datagram_and_validate>
 800db02:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0a:	f000 8091 	beq.w	800dc30 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800db0e:	4b5b      	ldr	r3, [pc, #364]	; (800dc7c <ip4_reass+0x2fc>)
 800db10:	881a      	ldrh	r2, [r3, #0]
 800db12:	8c3b      	ldrh	r3, [r7, #32]
 800db14:	4413      	add	r3, r2
 800db16:	b29a      	uxth	r2, r3
 800db18:	4b58      	ldr	r3, [pc, #352]	; (800dc7c <ip4_reass+0x2fc>)
 800db1a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00d      	beq.n	800db3e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800db22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db26:	4413      	add	r3, r2
 800db28:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800db2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2c:	8a7a      	ldrh	r2, [r7, #18]
 800db2e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	7f9b      	ldrb	r3, [r3, #30]
 800db34:	f043 0301 	orr.w	r3, r3, #1
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d171      	bne.n	800dc28 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	8b9b      	ldrh	r3, [r3, #28]
 800db48:	3314      	adds	r3, #20
 800db4a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	3308      	adds	r3, #8
 800db62:	2214      	movs	r2, #20
 800db64:	4619      	mov	r1, r3
 800db66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db68:	f000 fb45 	bl	800e1f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800db6c:	8a3b      	ldrh	r3, [r7, #16]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7f6 fecb 	bl	800490a <lwip_htons>
 800db74:	4603      	mov	r3, r0
 800db76:	461a      	mov	r2, r3
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	2200      	movs	r2, #0
 800db80:	719a      	strb	r2, [r3, #6]
 800db82:	2200      	movs	r2, #0
 800db84:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	2200      	movs	r2, #0
 800db8a:	729a      	strb	r2, [r3, #10]
 800db8c:	2200      	movs	r2, #0
 800db8e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800db96:	e00d      	b.n	800dbb4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800db9e:	2114      	movs	r1, #20
 800dba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba2:	f7f8 f8c1 	bl	8005d28 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7f8 fa05 	bl	8005fb8 <pbuf_cat>
      r = iprh->next_pbuf;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1ee      	bne.n	800db98 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dbba:	4b31      	ldr	r3, [pc, #196]	; (800dc80 <ip4_reass+0x300>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d102      	bne.n	800dbca <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbc8:	e010      	b.n	800dbec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dbca:	4b2d      	ldr	r3, [pc, #180]	; (800dc80 <ip4_reass+0x300>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd0:	e007      	b.n	800dbe2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d006      	beq.n	800dbea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1f4      	bne.n	800dbd2 <ip4_reass+0x252>
 800dbe8:	e000      	b.n	800dbec <ip4_reass+0x26c>
          break;
 800dbea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dbec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dbee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbf0:	f7ff fd2e 	bl	800d650 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7f8 f9a5 	bl	8005f44 <pbuf_clen>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dbfe:	4b1f      	ldr	r3, [pc, #124]	; (800dc7c <ip4_reass+0x2fc>)
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	8c3a      	ldrh	r2, [r7, #32]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d906      	bls.n	800dc16 <ip4_reass+0x296>
 800dc08:	4b1e      	ldr	r3, [pc, #120]	; (800dc84 <ip4_reass+0x304>)
 800dc0a:	f240 229b 	movw	r2, #667	; 0x29b
 800dc0e:	491e      	ldr	r1, [pc, #120]	; (800dc88 <ip4_reass+0x308>)
 800dc10:	481e      	ldr	r0, [pc, #120]	; (800dc8c <ip4_reass+0x30c>)
 800dc12:	f000 fb03 	bl	800e21c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dc16:	4b19      	ldr	r3, [pc, #100]	; (800dc7c <ip4_reass+0x2fc>)
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	8c3b      	ldrh	r3, [r7, #32]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	4b16      	ldr	r3, [pc, #88]	; (800dc7c <ip4_reass+0x2fc>)
 800dc22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	e03c      	b.n	800dca2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e03a      	b.n	800dca2 <ip4_reass+0x322>

nullreturn_ipr:
 800dc2c:	bf00      	nop
 800dc2e:	e000      	b.n	800dc32 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dc30:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d106      	bne.n	800dc46 <ip4_reass+0x2c6>
 800dc38:	4b12      	ldr	r3, [pc, #72]	; (800dc84 <ip4_reass+0x304>)
 800dc3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dc3e:	4914      	ldr	r1, [pc, #80]	; (800dc90 <ip4_reass+0x310>)
 800dc40:	4812      	ldr	r0, [pc, #72]	; (800dc8c <ip4_reass+0x30c>)
 800dc42:	f000 faeb 	bl	800e21c <iprintf>
  if (ipr->p == NULL) {
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d124      	bne.n	800dc98 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dc4e:	4b0c      	ldr	r3, [pc, #48]	; (800dc80 <ip4_reass+0x300>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d006      	beq.n	800dc66 <ip4_reass+0x2e6>
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <ip4_reass+0x304>)
 800dc5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dc5e:	490d      	ldr	r1, [pc, #52]	; (800dc94 <ip4_reass+0x314>)
 800dc60:	480a      	ldr	r0, [pc, #40]	; (800dc8c <ip4_reass+0x30c>)
 800dc62:	f000 fadb 	bl	800e21c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dc66:	2100      	movs	r1, #0
 800dc68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc6a:	f7ff fcf1 	bl	800d650 <ip_reass_dequeue_datagram>
 800dc6e:	e014      	b.n	800dc9a <ip4_reass+0x31a>
    goto nullreturn;
 800dc70:	bf00      	nop
 800dc72:	e012      	b.n	800dc9a <ip4_reass+0x31a>
    goto nullreturn;
 800dc74:	bf00      	nop
 800dc76:	e010      	b.n	800dc9a <ip4_reass+0x31a>
      goto nullreturn;
 800dc78:	bf00      	nop
 800dc7a:	e00e      	b.n	800dc9a <ip4_reass+0x31a>
 800dc7c:	20000208 	.word	0x20000208
 800dc80:	20000204 	.word	0x20000204
 800dc84:	0801192c 	.word	0x0801192c
 800dc88:	08011a9c 	.word	0x08011a9c
 800dc8c:	08011974 	.word	0x08011974
 800dc90:	08011ab8 	.word	0x08011ab8
 800dc94:	08011ac4 	.word	0x08011ac4
  }

nullreturn:
 800dc98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7f8 f8ca 	bl	8005e34 <pbuf_free>
  return NULL;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3738      	adds	r7, #56	; 0x38
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop

0800dcac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dcb0:	2005      	movs	r0, #5
 800dcb2:	f7f7 fa7f 	bl	80051b4 <memp_malloc>
 800dcb6:	4603      	mov	r3, r0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dcca:	4b07      	ldr	r3, [pc, #28]	; (800dce8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dccc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dcd0:	4906      	ldr	r1, [pc, #24]	; (800dcec <ip_frag_free_pbuf_custom_ref+0x30>)
 800dcd2:	4807      	ldr	r0, [pc, #28]	; (800dcf0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dcd4:	f000 faa2 	bl	800e21c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dcd8:	6879      	ldr	r1, [r7, #4]
 800dcda:	2005      	movs	r0, #5
 800dcdc:	f7f7 fab6 	bl	800524c <memp_free>
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	0801192c 	.word	0x0801192c
 800dcec:	08011ae4 	.word	0x08011ae4
 800dcf0:	08011974 	.word	0x08011974

0800dcf4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <ipfrag_free_pbuf_custom+0x20>
 800dd06:	4b11      	ldr	r3, [pc, #68]	; (800dd4c <ipfrag_free_pbuf_custom+0x58>)
 800dd08:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dd0c:	4910      	ldr	r1, [pc, #64]	; (800dd50 <ipfrag_free_pbuf_custom+0x5c>)
 800dd0e:	4811      	ldr	r0, [pc, #68]	; (800dd54 <ipfrag_free_pbuf_custom+0x60>)
 800dd10:	f000 fa84 	bl	800e21c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d006      	beq.n	800dd2a <ipfrag_free_pbuf_custom+0x36>
 800dd1c:	4b0b      	ldr	r3, [pc, #44]	; (800dd4c <ipfrag_free_pbuf_custom+0x58>)
 800dd1e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dd22:	490d      	ldr	r1, [pc, #52]	; (800dd58 <ipfrag_free_pbuf_custom+0x64>)
 800dd24:	480b      	ldr	r0, [pc, #44]	; (800dd54 <ipfrag_free_pbuf_custom+0x60>)
 800dd26:	f000 fa79 	bl	800e21c <iprintf>
  if (pcr->original != NULL) {
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d004      	beq.n	800dd3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f8 f87c 	bl	8005e34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7ff ffbd 	bl	800dcbc <ip_frag_free_pbuf_custom_ref>
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	0801192c 	.word	0x0801192c
 800dd50:	08011af0 	.word	0x08011af0
 800dd54:	08011974 	.word	0x08011974
 800dd58:	08011afc 	.word	0x08011afc

0800dd5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b094      	sub	sp, #80	; 0x50
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd72:	3b14      	subs	r3, #20
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	da00      	bge.n	800dd7a <ip4_frag+0x1e>
 800dd78:	3307      	adds	r3, #7
 800dd7a:	10db      	asrs	r3, r3, #3
 800dd7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dd7e:	2314      	movs	r3, #20
 800dd80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	f003 030f 	and.w	r3, r3, #15
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b14      	cmp	r3, #20
 800dd9c:	d002      	beq.n	800dda4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dd9e:	f06f 0305 	mvn.w	r3, #5
 800dda2:	e10f      	b.n	800dfc4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	895b      	ldrh	r3, [r3, #10]
 800dda8:	2b13      	cmp	r3, #19
 800ddaa:	d809      	bhi.n	800ddc0 <ip4_frag+0x64>
 800ddac:	4b87      	ldr	r3, [pc, #540]	; (800dfcc <ip4_frag+0x270>)
 800ddae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ddb2:	4987      	ldr	r1, [pc, #540]	; (800dfd0 <ip4_frag+0x274>)
 800ddb4:	4887      	ldr	r0, [pc, #540]	; (800dfd4 <ip4_frag+0x278>)
 800ddb6:	f000 fa31 	bl	800e21c <iprintf>
 800ddba:	f06f 0305 	mvn.w	r3, #5
 800ddbe:	e101      	b.n	800dfc4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc2:	88db      	ldrh	r3, [r3, #6]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f6 fd9f 	bl	800490a <lwip_htons>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ddd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ddda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dde0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	891b      	ldrh	r3, [r3, #8]
 800dde6:	3b14      	subs	r3, #20
 800dde8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ddec:	e0e0      	b.n	800dfb0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ddee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	bf28      	it	cs
 800ddfc:	4613      	movcs	r3, r2
 800ddfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800de00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de04:	2114      	movs	r1, #20
 800de06:	200e      	movs	r0, #14
 800de08:	f7f7 fd34 	bl	8005874 <pbuf_alloc>
 800de0c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 80d4 	beq.w	800dfbe <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	895b      	ldrh	r3, [r3, #10]
 800de1a:	2b13      	cmp	r3, #19
 800de1c:	d806      	bhi.n	800de2c <ip4_frag+0xd0>
 800de1e:	4b6b      	ldr	r3, [pc, #428]	; (800dfcc <ip4_frag+0x270>)
 800de20:	f240 3225 	movw	r2, #805	; 0x325
 800de24:	496c      	ldr	r1, [pc, #432]	; (800dfd8 <ip4_frag+0x27c>)
 800de26:	486b      	ldr	r0, [pc, #428]	; (800dfd4 <ip4_frag+0x278>)
 800de28:	f000 f9f8 	bl	800e21c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	2214      	movs	r2, #20
 800de32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f9de 	bl	800e1f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800de40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800de46:	e064      	b.n	800df12 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	895a      	ldrh	r2, [r3, #10]
 800de4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	895b      	ldrh	r3, [r3, #10]
 800de56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800de58:	429a      	cmp	r2, r3
 800de5a:	d906      	bls.n	800de6a <ip4_frag+0x10e>
 800de5c:	4b5b      	ldr	r3, [pc, #364]	; (800dfcc <ip4_frag+0x270>)
 800de5e:	f240 322d 	movw	r2, #813	; 0x32d
 800de62:	495e      	ldr	r1, [pc, #376]	; (800dfdc <ip4_frag+0x280>)
 800de64:	485b      	ldr	r0, [pc, #364]	; (800dfd4 <ip4_frag+0x278>)
 800de66:	f000 f9d9 	bl	800e21c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800de6a:	8bfa      	ldrh	r2, [r7, #30]
 800de6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de70:	4293      	cmp	r3, r2
 800de72:	bf28      	it	cs
 800de74:	4613      	movcs	r3, r2
 800de76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800de7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d105      	bne.n	800de8e <ip4_frag+0x132>
        poff = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
        continue;
 800de8c:	e041      	b.n	800df12 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800de8e:	f7ff ff0d 	bl	800dcac <ip_frag_alloc_pbuf_custom_ref>
 800de92:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d103      	bne.n	800dea2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800de9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de9c:	f7f7 ffca 	bl	8005e34 <pbuf_free>
        goto memerr;
 800dea0:	e08e      	b.n	800dfc0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dea2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800deaa:	4413      	add	r3, r2
 800deac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800deb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800deb4:	9201      	str	r2, [sp, #4]
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	4603      	mov	r3, r0
 800deba:	2241      	movs	r2, #65	; 0x41
 800debc:	2000      	movs	r0, #0
 800debe:	f7f7 fdff 	bl	8005ac0 <pbuf_alloced_custom>
 800dec2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800deca:	69b8      	ldr	r0, [r7, #24]
 800decc:	f7ff fef6 	bl	800dcbc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ded0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ded2:	f7f7 ffaf 	bl	8005e34 <pbuf_free>
        goto memerr;
 800ded6:	e073      	b.n	800dfc0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f7f8 f84b 	bl	8005f74 <pbuf_ref>
      pcr->original = p;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	4a3e      	ldr	r2, [pc, #248]	; (800dfe0 <ip4_frag+0x284>)
 800dee8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800deea:	6979      	ldr	r1, [r7, #20]
 800deec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deee:	f7f8 f863 	bl	8005fb8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800def2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800def6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800df00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <ip4_frag+0x1b6>
        poff = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800df12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df16:	2b00      	cmp	r3, #0
 800df18:	d196      	bne.n	800de48 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800df1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df20:	4413      	add	r3, r2
 800df22:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800df24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df2c:	3b14      	subs	r3, #20
 800df2e:	429a      	cmp	r2, r3
 800df30:	bfd4      	ite	le
 800df32:	2301      	movle	r3, #1
 800df34:	2300      	movgt	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800df3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df42:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <ip4_frag+0x1f4>
 800df4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800df50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800df56:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800df58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f6 fcd5 	bl	800490a <lwip_htons>
 800df60:	4603      	mov	r3, r0
 800df62:	461a      	mov	r2, r3
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800df68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df6a:	3314      	adds	r3, #20
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f6 fccb 	bl	800490a <lwip_htons>
 800df74:	4603      	mov	r3, r0
 800df76:	461a      	mov	r2, r3
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7e:	2200      	movs	r2, #0
 800df80:	729a      	strb	r2, [r3, #10]
 800df82:	2200      	movs	r2, #0
 800df84:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df8e:	68b8      	ldr	r0, [r7, #8]
 800df90:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800df92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df94:	f7f7 ff4e 	bl	8005e34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800df98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800dfa4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dfa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfaa:	4413      	add	r3, r2
 800dfac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800dfb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f47f af1a 	bne.w	800ddee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e002      	b.n	800dfc4 <ip4_frag+0x268>
      goto memerr;
 800dfbe:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3748      	adds	r7, #72	; 0x48
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	0801192c 	.word	0x0801192c
 800dfd0:	08011b08 	.word	0x08011b08
 800dfd4:	08011974 	.word	0x08011974
 800dfd8:	08011b24 	.word	0x08011b24
 800dfdc:	08011b44 	.word	0x08011b44
 800dfe0:	0800dcf5 	.word	0x0800dcf5

0800dfe4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dfee:	230e      	movs	r3, #14
 800dff0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	895b      	ldrh	r3, [r3, #10]
 800dff6:	2b0e      	cmp	r3, #14
 800dff8:	d96e      	bls.n	800e0d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	7bdb      	ldrb	r3, [r3, #15]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e008:	3301      	adds	r3, #1
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	7b1a      	ldrb	r2, [r3, #12]
 800e01a:	7b5b      	ldrb	r3, [r3, #13]
 800e01c:	021b      	lsls	r3, r3, #8
 800e01e:	4313      	orrs	r3, r2
 800e020:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d023      	beq.n	800e076 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d10f      	bne.n	800e056 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	785b      	ldrb	r3, [r3, #1]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d11b      	bne.n	800e076 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e042:	2b5e      	cmp	r3, #94	; 0x5e
 800e044:	d117      	bne.n	800e076 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	7b5b      	ldrb	r3, [r3, #13]
 800e04a:	f043 0310 	orr.w	r3, r3, #16
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	735a      	strb	r2, [r3, #13]
 800e054:	e00f      	b.n	800e076 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2206      	movs	r2, #6
 800e05a:	4928      	ldr	r1, [pc, #160]	; (800e0fc <ethernet_input+0x118>)
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 f8bb 	bl	800e1d8 <memcmp>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d106      	bne.n	800e076 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7b5b      	ldrb	r3, [r3, #13]
 800e06c:	f043 0308 	orr.w	r3, r3, #8
 800e070:	b2da      	uxtb	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e076:	89fb      	ldrh	r3, [r7, #14]
 800e078:	2b08      	cmp	r3, #8
 800e07a:	d003      	beq.n	800e084 <ethernet_input+0xa0>
 800e07c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e080:	d014      	beq.n	800e0ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e082:	e032      	b.n	800e0ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e08a:	f003 0308 	and.w	r3, r3, #8
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d024      	beq.n	800e0dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e092:	8afb      	ldrh	r3, [r7, #22]
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7f7 fe46 	bl	8005d28 <pbuf_remove_header>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d11e      	bne.n	800e0e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fe ff2b 	bl	800cf00 <ip4_input>
      break;
 800e0aa:	e013      	b.n	800e0d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b2:	f003 0308 	and.w	r3, r3, #8
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d014      	beq.n	800e0e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e0ba:	8afb      	ldrh	r3, [r7, #22]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7f7 fe32 	bl	8005d28 <pbuf_remove_header>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10e      	bne.n	800e0e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fe f8c5 	bl	800c25c <etharp_input>
      break;
 800e0d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e00c      	b.n	800e0f2 <ethernet_input+0x10e>
    goto free_and_return;
 800e0d8:	bf00      	nop
 800e0da:	e006      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0dc:	bf00      	nop
 800e0de:	e004      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e0:	bf00      	nop
 800e0e2:	e002      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e4:	bf00      	nop
 800e0e6:	e000      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7f7 fea2 	bl	8005e34 <pbuf_free>
  return ERR_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	08011cf8 	.word	0x08011cf8

0800e100 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e10e:	8c3b      	ldrh	r3, [r7, #32]
 800e110:	4618      	mov	r0, r3
 800e112:	f7f6 fbfa 	bl	800490a <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e11a:	210e      	movs	r1, #14
 800e11c:	68b8      	ldr	r0, [r7, #8]
 800e11e:	f7f7 fdf3 	bl	8005d08 <pbuf_add_header>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d125      	bne.n	800e174 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	8afa      	ldrh	r2, [r7, #22]
 800e132:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	2206      	movs	r2, #6
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f000 f85b 	bl	800e1f6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	3306      	adds	r3, #6
 800e144:	2206      	movs	r2, #6
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f854 	bl	800e1f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e154:	2b06      	cmp	r3, #6
 800e156:	d006      	beq.n	800e166 <ethernet_output+0x66>
 800e158:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <ethernet_output+0x84>)
 800e15a:	f240 1233 	movw	r2, #307	; 0x133
 800e15e:	490a      	ldr	r1, [pc, #40]	; (800e188 <ethernet_output+0x88>)
 800e160:	480a      	ldr	r0, [pc, #40]	; (800e18c <ethernet_output+0x8c>)
 800e162:	f000 f85b 	bl	800e21c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	4798      	blx	r3
 800e170:	4603      	mov	r3, r0
 800e172:	e002      	b.n	800e17a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e174:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e176:	f06f 0301 	mvn.w	r3, #1
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	08011b54 	.word	0x08011b54
 800e188:	08011b8c 	.word	0x08011b8c
 800e18c:	08011bc0 	.word	0x08011bc0

0800e190 <__libc_init_array>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4e0d      	ldr	r6, [pc, #52]	; (800e1c8 <__libc_init_array+0x38>)
 800e194:	4c0d      	ldr	r4, [pc, #52]	; (800e1cc <__libc_init_array+0x3c>)
 800e196:	1ba4      	subs	r4, r4, r6
 800e198:	10a4      	asrs	r4, r4, #2
 800e19a:	2500      	movs	r5, #0
 800e19c:	42a5      	cmp	r5, r4
 800e19e:	d109      	bne.n	800e1b4 <__libc_init_array+0x24>
 800e1a0:	4e0b      	ldr	r6, [pc, #44]	; (800e1d0 <__libc_init_array+0x40>)
 800e1a2:	4c0c      	ldr	r4, [pc, #48]	; (800e1d4 <__libc_init_array+0x44>)
 800e1a4:	f000 ffbe 	bl	800f124 <_init>
 800e1a8:	1ba4      	subs	r4, r4, r6
 800e1aa:	10a4      	asrs	r4, r4, #2
 800e1ac:	2500      	movs	r5, #0
 800e1ae:	42a5      	cmp	r5, r4
 800e1b0:	d105      	bne.n	800e1be <__libc_init_array+0x2e>
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1b8:	4798      	blx	r3
 800e1ba:	3501      	adds	r5, #1
 800e1bc:	e7ee      	b.n	800e19c <__libc_init_array+0xc>
 800e1be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1c2:	4798      	blx	r3
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	e7f2      	b.n	800e1ae <__libc_init_array+0x1e>
 800e1c8:	08011da8 	.word	0x08011da8
 800e1cc:	08011da8 	.word	0x08011da8
 800e1d0:	08011da8 	.word	0x08011da8
 800e1d4:	08011dac 	.word	0x08011dac

0800e1d8 <memcmp>:
 800e1d8:	b530      	push	{r4, r5, lr}
 800e1da:	2400      	movs	r4, #0
 800e1dc:	42a2      	cmp	r2, r4
 800e1de:	d101      	bne.n	800e1e4 <memcmp+0xc>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e007      	b.n	800e1f4 <memcmp+0x1c>
 800e1e4:	5d03      	ldrb	r3, [r0, r4]
 800e1e6:	3401      	adds	r4, #1
 800e1e8:	190d      	adds	r5, r1, r4
 800e1ea:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e1ee:	42ab      	cmp	r3, r5
 800e1f0:	d0f4      	beq.n	800e1dc <memcmp+0x4>
 800e1f2:	1b58      	subs	r0, r3, r5
 800e1f4:	bd30      	pop	{r4, r5, pc}

0800e1f6 <memcpy>:
 800e1f6:	b510      	push	{r4, lr}
 800e1f8:	1e43      	subs	r3, r0, #1
 800e1fa:	440a      	add	r2, r1
 800e1fc:	4291      	cmp	r1, r2
 800e1fe:	d100      	bne.n	800e202 <memcpy+0xc>
 800e200:	bd10      	pop	{r4, pc}
 800e202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e20a:	e7f7      	b.n	800e1fc <memcpy+0x6>

0800e20c <memset>:
 800e20c:	4402      	add	r2, r0
 800e20e:	4603      	mov	r3, r0
 800e210:	4293      	cmp	r3, r2
 800e212:	d100      	bne.n	800e216 <memset+0xa>
 800e214:	4770      	bx	lr
 800e216:	f803 1b01 	strb.w	r1, [r3], #1
 800e21a:	e7f9      	b.n	800e210 <memset+0x4>

0800e21c <iprintf>:
 800e21c:	b40f      	push	{r0, r1, r2, r3}
 800e21e:	4b0a      	ldr	r3, [pc, #40]	; (800e248 <iprintf+0x2c>)
 800e220:	b513      	push	{r0, r1, r4, lr}
 800e222:	681c      	ldr	r4, [r3, #0]
 800e224:	b124      	cbz	r4, 800e230 <iprintf+0x14>
 800e226:	69a3      	ldr	r3, [r4, #24]
 800e228:	b913      	cbnz	r3, 800e230 <iprintf+0x14>
 800e22a:	4620      	mov	r0, r4
 800e22c:	f000 fa56 	bl	800e6dc <__sinit>
 800e230:	ab05      	add	r3, sp, #20
 800e232:	9a04      	ldr	r2, [sp, #16]
 800e234:	68a1      	ldr	r1, [r4, #8]
 800e236:	9301      	str	r3, [sp, #4]
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 fc17 	bl	800ea6c <_vfiprintf_r>
 800e23e:	b002      	add	sp, #8
 800e240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e244:	b004      	add	sp, #16
 800e246:	4770      	bx	lr
 800e248:	20000014 	.word	0x20000014

0800e24c <_puts_r>:
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	460e      	mov	r6, r1
 800e250:	4605      	mov	r5, r0
 800e252:	b118      	cbz	r0, 800e25c <_puts_r+0x10>
 800e254:	6983      	ldr	r3, [r0, #24]
 800e256:	b90b      	cbnz	r3, 800e25c <_puts_r+0x10>
 800e258:	f000 fa40 	bl	800e6dc <__sinit>
 800e25c:	69ab      	ldr	r3, [r5, #24]
 800e25e:	68ac      	ldr	r4, [r5, #8]
 800e260:	b913      	cbnz	r3, 800e268 <_puts_r+0x1c>
 800e262:	4628      	mov	r0, r5
 800e264:	f000 fa3a 	bl	800e6dc <__sinit>
 800e268:	4b23      	ldr	r3, [pc, #140]	; (800e2f8 <_puts_r+0xac>)
 800e26a:	429c      	cmp	r4, r3
 800e26c:	d117      	bne.n	800e29e <_puts_r+0x52>
 800e26e:	686c      	ldr	r4, [r5, #4]
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	071b      	lsls	r3, r3, #28
 800e274:	d51d      	bpl.n	800e2b2 <_puts_r+0x66>
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	b1db      	cbz	r3, 800e2b2 <_puts_r+0x66>
 800e27a:	3e01      	subs	r6, #1
 800e27c:	68a3      	ldr	r3, [r4, #8]
 800e27e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e282:	3b01      	subs	r3, #1
 800e284:	60a3      	str	r3, [r4, #8]
 800e286:	b9e9      	cbnz	r1, 800e2c4 <_puts_r+0x78>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	da2e      	bge.n	800e2ea <_puts_r+0x9e>
 800e28c:	4622      	mov	r2, r4
 800e28e:	210a      	movs	r1, #10
 800e290:	4628      	mov	r0, r5
 800e292:	f000 f873 	bl	800e37c <__swbuf_r>
 800e296:	3001      	adds	r0, #1
 800e298:	d011      	beq.n	800e2be <_puts_r+0x72>
 800e29a:	200a      	movs	r0, #10
 800e29c:	e011      	b.n	800e2c2 <_puts_r+0x76>
 800e29e:	4b17      	ldr	r3, [pc, #92]	; (800e2fc <_puts_r+0xb0>)
 800e2a0:	429c      	cmp	r4, r3
 800e2a2:	d101      	bne.n	800e2a8 <_puts_r+0x5c>
 800e2a4:	68ac      	ldr	r4, [r5, #8]
 800e2a6:	e7e3      	b.n	800e270 <_puts_r+0x24>
 800e2a8:	4b15      	ldr	r3, [pc, #84]	; (800e300 <_puts_r+0xb4>)
 800e2aa:	429c      	cmp	r4, r3
 800e2ac:	bf08      	it	eq
 800e2ae:	68ec      	ldreq	r4, [r5, #12]
 800e2b0:	e7de      	b.n	800e270 <_puts_r+0x24>
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f000 f8b3 	bl	800e420 <__swsetup_r>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0dd      	beq.n	800e27a <_puts_r+0x2e>
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da04      	bge.n	800e2d2 <_puts_r+0x86>
 800e2c8:	69a2      	ldr	r2, [r4, #24]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	dc06      	bgt.n	800e2dc <_puts_r+0x90>
 800e2ce:	290a      	cmp	r1, #10
 800e2d0:	d004      	beq.n	800e2dc <_puts_r+0x90>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	7019      	strb	r1, [r3, #0]
 800e2da:	e7cf      	b.n	800e27c <_puts_r+0x30>
 800e2dc:	4622      	mov	r2, r4
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f000 f84c 	bl	800e37c <__swbuf_r>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d1c9      	bne.n	800e27c <_puts_r+0x30>
 800e2e8:	e7e9      	b.n	800e2be <_puts_r+0x72>
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	200a      	movs	r0, #10
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	6022      	str	r2, [r4, #0]
 800e2f2:	7018      	strb	r0, [r3, #0]
 800e2f4:	e7e5      	b.n	800e2c2 <_puts_r+0x76>
 800e2f6:	bf00      	nop
 800e2f8:	08011d2c 	.word	0x08011d2c
 800e2fc:	08011d4c 	.word	0x08011d4c
 800e300:	08011d0c 	.word	0x08011d0c

0800e304 <puts>:
 800e304:	4b02      	ldr	r3, [pc, #8]	; (800e310 <puts+0xc>)
 800e306:	4601      	mov	r1, r0
 800e308:	6818      	ldr	r0, [r3, #0]
 800e30a:	f7ff bf9f 	b.w	800e24c <_puts_r>
 800e30e:	bf00      	nop
 800e310:	20000014 	.word	0x20000014

0800e314 <rand>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4b13      	ldr	r3, [pc, #76]	; (800e364 <rand+0x50>)
 800e318:	681c      	ldr	r4, [r3, #0]
 800e31a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e31c:	b97b      	cbnz	r3, 800e33e <rand+0x2a>
 800e31e:	2018      	movs	r0, #24
 800e320:	f000 faca 	bl	800e8b8 <malloc>
 800e324:	4a10      	ldr	r2, [pc, #64]	; (800e368 <rand+0x54>)
 800e326:	4b11      	ldr	r3, [pc, #68]	; (800e36c <rand+0x58>)
 800e328:	63a0      	str	r0, [r4, #56]	; 0x38
 800e32a:	e9c0 2300 	strd	r2, r3, [r0]
 800e32e:	4b10      	ldr	r3, [pc, #64]	; (800e370 <rand+0x5c>)
 800e330:	6083      	str	r3, [r0, #8]
 800e332:	230b      	movs	r3, #11
 800e334:	8183      	strh	r3, [r0, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	2300      	movs	r3, #0
 800e33a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e33e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e340:	480c      	ldr	r0, [pc, #48]	; (800e374 <rand+0x60>)
 800e342:	690a      	ldr	r2, [r1, #16]
 800e344:	694b      	ldr	r3, [r1, #20]
 800e346:	4c0c      	ldr	r4, [pc, #48]	; (800e378 <rand+0x64>)
 800e348:	4350      	muls	r0, r2
 800e34a:	fb04 0003 	mla	r0, r4, r3, r0
 800e34e:	fba2 2304 	umull	r2, r3, r2, r4
 800e352:	4403      	add	r3, r0
 800e354:	1c54      	adds	r4, r2, #1
 800e356:	f143 0500 	adc.w	r5, r3, #0
 800e35a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e35e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20000014 	.word	0x20000014
 800e368:	abcd330e 	.word	0xabcd330e
 800e36c:	e66d1234 	.word	0xe66d1234
 800e370:	0005deec 	.word	0x0005deec
 800e374:	5851f42d 	.word	0x5851f42d
 800e378:	4c957f2d 	.word	0x4c957f2d

0800e37c <__swbuf_r>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	460e      	mov	r6, r1
 800e380:	4614      	mov	r4, r2
 800e382:	4605      	mov	r5, r0
 800e384:	b118      	cbz	r0, 800e38e <__swbuf_r+0x12>
 800e386:	6983      	ldr	r3, [r0, #24]
 800e388:	b90b      	cbnz	r3, 800e38e <__swbuf_r+0x12>
 800e38a:	f000 f9a7 	bl	800e6dc <__sinit>
 800e38e:	4b21      	ldr	r3, [pc, #132]	; (800e414 <__swbuf_r+0x98>)
 800e390:	429c      	cmp	r4, r3
 800e392:	d12a      	bne.n	800e3ea <__swbuf_r+0x6e>
 800e394:	686c      	ldr	r4, [r5, #4]
 800e396:	69a3      	ldr	r3, [r4, #24]
 800e398:	60a3      	str	r3, [r4, #8]
 800e39a:	89a3      	ldrh	r3, [r4, #12]
 800e39c:	071a      	lsls	r2, r3, #28
 800e39e:	d52e      	bpl.n	800e3fe <__swbuf_r+0x82>
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	b363      	cbz	r3, 800e3fe <__swbuf_r+0x82>
 800e3a4:	6923      	ldr	r3, [r4, #16]
 800e3a6:	6820      	ldr	r0, [r4, #0]
 800e3a8:	1ac0      	subs	r0, r0, r3
 800e3aa:	6963      	ldr	r3, [r4, #20]
 800e3ac:	b2f6      	uxtb	r6, r6
 800e3ae:	4283      	cmp	r3, r0
 800e3b0:	4637      	mov	r7, r6
 800e3b2:	dc04      	bgt.n	800e3be <__swbuf_r+0x42>
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f000 f926 	bl	800e608 <_fflush_r>
 800e3bc:	bb28      	cbnz	r0, 800e40a <__swbuf_r+0x8e>
 800e3be:	68a3      	ldr	r3, [r4, #8]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	60a3      	str	r3, [r4, #8]
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	1c5a      	adds	r2, r3, #1
 800e3c8:	6022      	str	r2, [r4, #0]
 800e3ca:	701e      	strb	r6, [r3, #0]
 800e3cc:	6963      	ldr	r3, [r4, #20]
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	4283      	cmp	r3, r0
 800e3d2:	d004      	beq.n	800e3de <__swbuf_r+0x62>
 800e3d4:	89a3      	ldrh	r3, [r4, #12]
 800e3d6:	07db      	lsls	r3, r3, #31
 800e3d8:	d519      	bpl.n	800e40e <__swbuf_r+0x92>
 800e3da:	2e0a      	cmp	r6, #10
 800e3dc:	d117      	bne.n	800e40e <__swbuf_r+0x92>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f000 f911 	bl	800e608 <_fflush_r>
 800e3e6:	b190      	cbz	r0, 800e40e <__swbuf_r+0x92>
 800e3e8:	e00f      	b.n	800e40a <__swbuf_r+0x8e>
 800e3ea:	4b0b      	ldr	r3, [pc, #44]	; (800e418 <__swbuf_r+0x9c>)
 800e3ec:	429c      	cmp	r4, r3
 800e3ee:	d101      	bne.n	800e3f4 <__swbuf_r+0x78>
 800e3f0:	68ac      	ldr	r4, [r5, #8]
 800e3f2:	e7d0      	b.n	800e396 <__swbuf_r+0x1a>
 800e3f4:	4b09      	ldr	r3, [pc, #36]	; (800e41c <__swbuf_r+0xa0>)
 800e3f6:	429c      	cmp	r4, r3
 800e3f8:	bf08      	it	eq
 800e3fa:	68ec      	ldreq	r4, [r5, #12]
 800e3fc:	e7cb      	b.n	800e396 <__swbuf_r+0x1a>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4628      	mov	r0, r5
 800e402:	f000 f80d 	bl	800e420 <__swsetup_r>
 800e406:	2800      	cmp	r0, #0
 800e408:	d0cc      	beq.n	800e3a4 <__swbuf_r+0x28>
 800e40a:	f04f 37ff 	mov.w	r7, #4294967295
 800e40e:	4638      	mov	r0, r7
 800e410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e412:	bf00      	nop
 800e414:	08011d2c 	.word	0x08011d2c
 800e418:	08011d4c 	.word	0x08011d4c
 800e41c:	08011d0c 	.word	0x08011d0c

0800e420 <__swsetup_r>:
 800e420:	4b32      	ldr	r3, [pc, #200]	; (800e4ec <__swsetup_r+0xcc>)
 800e422:	b570      	push	{r4, r5, r6, lr}
 800e424:	681d      	ldr	r5, [r3, #0]
 800e426:	4606      	mov	r6, r0
 800e428:	460c      	mov	r4, r1
 800e42a:	b125      	cbz	r5, 800e436 <__swsetup_r+0x16>
 800e42c:	69ab      	ldr	r3, [r5, #24]
 800e42e:	b913      	cbnz	r3, 800e436 <__swsetup_r+0x16>
 800e430:	4628      	mov	r0, r5
 800e432:	f000 f953 	bl	800e6dc <__sinit>
 800e436:	4b2e      	ldr	r3, [pc, #184]	; (800e4f0 <__swsetup_r+0xd0>)
 800e438:	429c      	cmp	r4, r3
 800e43a:	d10f      	bne.n	800e45c <__swsetup_r+0x3c>
 800e43c:	686c      	ldr	r4, [r5, #4]
 800e43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e442:	b29a      	uxth	r2, r3
 800e444:	0715      	lsls	r5, r2, #28
 800e446:	d42c      	bmi.n	800e4a2 <__swsetup_r+0x82>
 800e448:	06d0      	lsls	r0, r2, #27
 800e44a:	d411      	bmi.n	800e470 <__swsetup_r+0x50>
 800e44c:	2209      	movs	r2, #9
 800e44e:	6032      	str	r2, [r6, #0]
 800e450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	f04f 30ff 	mov.w	r0, #4294967295
 800e45a:	e03e      	b.n	800e4da <__swsetup_r+0xba>
 800e45c:	4b25      	ldr	r3, [pc, #148]	; (800e4f4 <__swsetup_r+0xd4>)
 800e45e:	429c      	cmp	r4, r3
 800e460:	d101      	bne.n	800e466 <__swsetup_r+0x46>
 800e462:	68ac      	ldr	r4, [r5, #8]
 800e464:	e7eb      	b.n	800e43e <__swsetup_r+0x1e>
 800e466:	4b24      	ldr	r3, [pc, #144]	; (800e4f8 <__swsetup_r+0xd8>)
 800e468:	429c      	cmp	r4, r3
 800e46a:	bf08      	it	eq
 800e46c:	68ec      	ldreq	r4, [r5, #12]
 800e46e:	e7e6      	b.n	800e43e <__swsetup_r+0x1e>
 800e470:	0751      	lsls	r1, r2, #29
 800e472:	d512      	bpl.n	800e49a <__swsetup_r+0x7a>
 800e474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e476:	b141      	cbz	r1, 800e48a <__swsetup_r+0x6a>
 800e478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e47c:	4299      	cmp	r1, r3
 800e47e:	d002      	beq.n	800e486 <__swsetup_r+0x66>
 800e480:	4630      	mov	r0, r6
 800e482:	f000 fa21 	bl	800e8c8 <_free_r>
 800e486:	2300      	movs	r3, #0
 800e488:	6363      	str	r3, [r4, #52]	; 0x34
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e490:	81a3      	strh	r3, [r4, #12]
 800e492:	2300      	movs	r3, #0
 800e494:	6063      	str	r3, [r4, #4]
 800e496:	6923      	ldr	r3, [r4, #16]
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	f043 0308 	orr.w	r3, r3, #8
 800e4a0:	81a3      	strh	r3, [r4, #12]
 800e4a2:	6923      	ldr	r3, [r4, #16]
 800e4a4:	b94b      	cbnz	r3, 800e4ba <__swsetup_r+0x9a>
 800e4a6:	89a3      	ldrh	r3, [r4, #12]
 800e4a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4b0:	d003      	beq.n	800e4ba <__swsetup_r+0x9a>
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f000 f9bf 	bl	800e838 <__smakebuf_r>
 800e4ba:	89a2      	ldrh	r2, [r4, #12]
 800e4bc:	f012 0301 	ands.w	r3, r2, #1
 800e4c0:	d00c      	beq.n	800e4dc <__swsetup_r+0xbc>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60a3      	str	r3, [r4, #8]
 800e4c6:	6963      	ldr	r3, [r4, #20]
 800e4c8:	425b      	negs	r3, r3
 800e4ca:	61a3      	str	r3, [r4, #24]
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	b953      	cbnz	r3, 800e4e6 <__swsetup_r+0xc6>
 800e4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e4d8:	d1ba      	bne.n	800e450 <__swsetup_r+0x30>
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	0792      	lsls	r2, r2, #30
 800e4de:	bf58      	it	pl
 800e4e0:	6963      	ldrpl	r3, [r4, #20]
 800e4e2:	60a3      	str	r3, [r4, #8]
 800e4e4:	e7f2      	b.n	800e4cc <__swsetup_r+0xac>
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	e7f7      	b.n	800e4da <__swsetup_r+0xba>
 800e4ea:	bf00      	nop
 800e4ec:	20000014 	.word	0x20000014
 800e4f0:	08011d2c 	.word	0x08011d2c
 800e4f4:	08011d4c 	.word	0x08011d4c
 800e4f8:	08011d0c 	.word	0x08011d0c

0800e4fc <__sflush_r>:
 800e4fc:	898a      	ldrh	r2, [r1, #12]
 800e4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e502:	4605      	mov	r5, r0
 800e504:	0710      	lsls	r0, r2, #28
 800e506:	460c      	mov	r4, r1
 800e508:	d458      	bmi.n	800e5bc <__sflush_r+0xc0>
 800e50a:	684b      	ldr	r3, [r1, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	dc05      	bgt.n	800e51c <__sflush_r+0x20>
 800e510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e512:	2b00      	cmp	r3, #0
 800e514:	dc02      	bgt.n	800e51c <__sflush_r+0x20>
 800e516:	2000      	movs	r0, #0
 800e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e51e:	2e00      	cmp	r6, #0
 800e520:	d0f9      	beq.n	800e516 <__sflush_r+0x1a>
 800e522:	2300      	movs	r3, #0
 800e524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e528:	682f      	ldr	r7, [r5, #0]
 800e52a:	6a21      	ldr	r1, [r4, #32]
 800e52c:	602b      	str	r3, [r5, #0]
 800e52e:	d032      	beq.n	800e596 <__sflush_r+0x9a>
 800e530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	075a      	lsls	r2, r3, #29
 800e536:	d505      	bpl.n	800e544 <__sflush_r+0x48>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	1ac0      	subs	r0, r0, r3
 800e53c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e53e:	b10b      	cbz	r3, 800e544 <__sflush_r+0x48>
 800e540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e542:	1ac0      	subs	r0, r0, r3
 800e544:	2300      	movs	r3, #0
 800e546:	4602      	mov	r2, r0
 800e548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e54a:	6a21      	ldr	r1, [r4, #32]
 800e54c:	4628      	mov	r0, r5
 800e54e:	47b0      	blx	r6
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	d106      	bne.n	800e564 <__sflush_r+0x68>
 800e556:	6829      	ldr	r1, [r5, #0]
 800e558:	291d      	cmp	r1, #29
 800e55a:	d848      	bhi.n	800e5ee <__sflush_r+0xf2>
 800e55c:	4a29      	ldr	r2, [pc, #164]	; (800e604 <__sflush_r+0x108>)
 800e55e:	40ca      	lsrs	r2, r1
 800e560:	07d6      	lsls	r6, r2, #31
 800e562:	d544      	bpl.n	800e5ee <__sflush_r+0xf2>
 800e564:	2200      	movs	r2, #0
 800e566:	6062      	str	r2, [r4, #4]
 800e568:	04d9      	lsls	r1, r3, #19
 800e56a:	6922      	ldr	r2, [r4, #16]
 800e56c:	6022      	str	r2, [r4, #0]
 800e56e:	d504      	bpl.n	800e57a <__sflush_r+0x7e>
 800e570:	1c42      	adds	r2, r0, #1
 800e572:	d101      	bne.n	800e578 <__sflush_r+0x7c>
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	b903      	cbnz	r3, 800e57a <__sflush_r+0x7e>
 800e578:	6560      	str	r0, [r4, #84]	; 0x54
 800e57a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e57c:	602f      	str	r7, [r5, #0]
 800e57e:	2900      	cmp	r1, #0
 800e580:	d0c9      	beq.n	800e516 <__sflush_r+0x1a>
 800e582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e586:	4299      	cmp	r1, r3
 800e588:	d002      	beq.n	800e590 <__sflush_r+0x94>
 800e58a:	4628      	mov	r0, r5
 800e58c:	f000 f99c 	bl	800e8c8 <_free_r>
 800e590:	2000      	movs	r0, #0
 800e592:	6360      	str	r0, [r4, #52]	; 0x34
 800e594:	e7c0      	b.n	800e518 <__sflush_r+0x1c>
 800e596:	2301      	movs	r3, #1
 800e598:	4628      	mov	r0, r5
 800e59a:	47b0      	blx	r6
 800e59c:	1c41      	adds	r1, r0, #1
 800e59e:	d1c8      	bne.n	800e532 <__sflush_r+0x36>
 800e5a0:	682b      	ldr	r3, [r5, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c5      	beq.n	800e532 <__sflush_r+0x36>
 800e5a6:	2b1d      	cmp	r3, #29
 800e5a8:	d001      	beq.n	800e5ae <__sflush_r+0xb2>
 800e5aa:	2b16      	cmp	r3, #22
 800e5ac:	d101      	bne.n	800e5b2 <__sflush_r+0xb6>
 800e5ae:	602f      	str	r7, [r5, #0]
 800e5b0:	e7b1      	b.n	800e516 <__sflush_r+0x1a>
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b8:	81a3      	strh	r3, [r4, #12]
 800e5ba:	e7ad      	b.n	800e518 <__sflush_r+0x1c>
 800e5bc:	690f      	ldr	r7, [r1, #16]
 800e5be:	2f00      	cmp	r7, #0
 800e5c0:	d0a9      	beq.n	800e516 <__sflush_r+0x1a>
 800e5c2:	0793      	lsls	r3, r2, #30
 800e5c4:	680e      	ldr	r6, [r1, #0]
 800e5c6:	bf08      	it	eq
 800e5c8:	694b      	ldreq	r3, [r1, #20]
 800e5ca:	600f      	str	r7, [r1, #0]
 800e5cc:	bf18      	it	ne
 800e5ce:	2300      	movne	r3, #0
 800e5d0:	eba6 0807 	sub.w	r8, r6, r7
 800e5d4:	608b      	str	r3, [r1, #8]
 800e5d6:	f1b8 0f00 	cmp.w	r8, #0
 800e5da:	dd9c      	ble.n	800e516 <__sflush_r+0x1a>
 800e5dc:	4643      	mov	r3, r8
 800e5de:	463a      	mov	r2, r7
 800e5e0:	6a21      	ldr	r1, [r4, #32]
 800e5e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	47b0      	blx	r6
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	dc06      	bgt.n	800e5fa <__sflush_r+0xfe>
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f8:	e78e      	b.n	800e518 <__sflush_r+0x1c>
 800e5fa:	4407      	add	r7, r0
 800e5fc:	eba8 0800 	sub.w	r8, r8, r0
 800e600:	e7e9      	b.n	800e5d6 <__sflush_r+0xda>
 800e602:	bf00      	nop
 800e604:	20400001 	.word	0x20400001

0800e608 <_fflush_r>:
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	690b      	ldr	r3, [r1, #16]
 800e60c:	4605      	mov	r5, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	b1db      	cbz	r3, 800e64a <_fflush_r+0x42>
 800e612:	b118      	cbz	r0, 800e61c <_fflush_r+0x14>
 800e614:	6983      	ldr	r3, [r0, #24]
 800e616:	b90b      	cbnz	r3, 800e61c <_fflush_r+0x14>
 800e618:	f000 f860 	bl	800e6dc <__sinit>
 800e61c:	4b0c      	ldr	r3, [pc, #48]	; (800e650 <_fflush_r+0x48>)
 800e61e:	429c      	cmp	r4, r3
 800e620:	d109      	bne.n	800e636 <_fflush_r+0x2e>
 800e622:	686c      	ldr	r4, [r5, #4]
 800e624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e628:	b17b      	cbz	r3, 800e64a <_fflush_r+0x42>
 800e62a:	4621      	mov	r1, r4
 800e62c:	4628      	mov	r0, r5
 800e62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e632:	f7ff bf63 	b.w	800e4fc <__sflush_r>
 800e636:	4b07      	ldr	r3, [pc, #28]	; (800e654 <_fflush_r+0x4c>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d101      	bne.n	800e640 <_fflush_r+0x38>
 800e63c:	68ac      	ldr	r4, [r5, #8]
 800e63e:	e7f1      	b.n	800e624 <_fflush_r+0x1c>
 800e640:	4b05      	ldr	r3, [pc, #20]	; (800e658 <_fflush_r+0x50>)
 800e642:	429c      	cmp	r4, r3
 800e644:	bf08      	it	eq
 800e646:	68ec      	ldreq	r4, [r5, #12]
 800e648:	e7ec      	b.n	800e624 <_fflush_r+0x1c>
 800e64a:	2000      	movs	r0, #0
 800e64c:	bd38      	pop	{r3, r4, r5, pc}
 800e64e:	bf00      	nop
 800e650:	08011d2c 	.word	0x08011d2c
 800e654:	08011d4c 	.word	0x08011d4c
 800e658:	08011d0c 	.word	0x08011d0c

0800e65c <std>:
 800e65c:	2300      	movs	r3, #0
 800e65e:	b510      	push	{r4, lr}
 800e660:	4604      	mov	r4, r0
 800e662:	e9c0 3300 	strd	r3, r3, [r0]
 800e666:	6083      	str	r3, [r0, #8]
 800e668:	8181      	strh	r1, [r0, #12]
 800e66a:	6643      	str	r3, [r0, #100]	; 0x64
 800e66c:	81c2      	strh	r2, [r0, #14]
 800e66e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e672:	6183      	str	r3, [r0, #24]
 800e674:	4619      	mov	r1, r3
 800e676:	2208      	movs	r2, #8
 800e678:	305c      	adds	r0, #92	; 0x5c
 800e67a:	f7ff fdc7 	bl	800e20c <memset>
 800e67e:	4b05      	ldr	r3, [pc, #20]	; (800e694 <std+0x38>)
 800e680:	6263      	str	r3, [r4, #36]	; 0x24
 800e682:	4b05      	ldr	r3, [pc, #20]	; (800e698 <std+0x3c>)
 800e684:	62a3      	str	r3, [r4, #40]	; 0x28
 800e686:	4b05      	ldr	r3, [pc, #20]	; (800e69c <std+0x40>)
 800e688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e68a:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <std+0x44>)
 800e68c:	6224      	str	r4, [r4, #32]
 800e68e:	6323      	str	r3, [r4, #48]	; 0x30
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	0800efc9 	.word	0x0800efc9
 800e698:	0800efeb 	.word	0x0800efeb
 800e69c:	0800f023 	.word	0x0800f023
 800e6a0:	0800f047 	.word	0x0800f047

0800e6a4 <_cleanup_r>:
 800e6a4:	4901      	ldr	r1, [pc, #4]	; (800e6ac <_cleanup_r+0x8>)
 800e6a6:	f000 b885 	b.w	800e7b4 <_fwalk_reent>
 800e6aa:	bf00      	nop
 800e6ac:	0800e609 	.word	0x0800e609

0800e6b0 <__sfmoreglue>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	1e4a      	subs	r2, r1, #1
 800e6b4:	2568      	movs	r5, #104	; 0x68
 800e6b6:	4355      	muls	r5, r2
 800e6b8:	460e      	mov	r6, r1
 800e6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6be:	f000 f951 	bl	800e964 <_malloc_r>
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	b140      	cbz	r0, 800e6d8 <__sfmoreglue+0x28>
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	e9c0 1600 	strd	r1, r6, [r0]
 800e6cc:	300c      	adds	r0, #12
 800e6ce:	60a0      	str	r0, [r4, #8]
 800e6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6d4:	f7ff fd9a 	bl	800e20c <memset>
 800e6d8:	4620      	mov	r0, r4
 800e6da:	bd70      	pop	{r4, r5, r6, pc}

0800e6dc <__sinit>:
 800e6dc:	6983      	ldr	r3, [r0, #24]
 800e6de:	b510      	push	{r4, lr}
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	bb33      	cbnz	r3, 800e732 <__sinit+0x56>
 800e6e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e6e8:	6503      	str	r3, [r0, #80]	; 0x50
 800e6ea:	4b12      	ldr	r3, [pc, #72]	; (800e734 <__sinit+0x58>)
 800e6ec:	4a12      	ldr	r2, [pc, #72]	; (800e738 <__sinit+0x5c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6282      	str	r2, [r0, #40]	; 0x28
 800e6f2:	4298      	cmp	r0, r3
 800e6f4:	bf04      	itt	eq
 800e6f6:	2301      	moveq	r3, #1
 800e6f8:	6183      	streq	r3, [r0, #24]
 800e6fa:	f000 f81f 	bl	800e73c <__sfp>
 800e6fe:	6060      	str	r0, [r4, #4]
 800e700:	4620      	mov	r0, r4
 800e702:	f000 f81b 	bl	800e73c <__sfp>
 800e706:	60a0      	str	r0, [r4, #8]
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 f817 	bl	800e73c <__sfp>
 800e70e:	2200      	movs	r2, #0
 800e710:	60e0      	str	r0, [r4, #12]
 800e712:	2104      	movs	r1, #4
 800e714:	6860      	ldr	r0, [r4, #4]
 800e716:	f7ff ffa1 	bl	800e65c <std>
 800e71a:	2201      	movs	r2, #1
 800e71c:	2109      	movs	r1, #9
 800e71e:	68a0      	ldr	r0, [r4, #8]
 800e720:	f7ff ff9c 	bl	800e65c <std>
 800e724:	2202      	movs	r2, #2
 800e726:	2112      	movs	r1, #18
 800e728:	68e0      	ldr	r0, [r4, #12]
 800e72a:	f7ff ff97 	bl	800e65c <std>
 800e72e:	2301      	movs	r3, #1
 800e730:	61a3      	str	r3, [r4, #24]
 800e732:	bd10      	pop	{r4, pc}
 800e734:	08011d08 	.word	0x08011d08
 800e738:	0800e6a5 	.word	0x0800e6a5

0800e73c <__sfp>:
 800e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73e:	4b1b      	ldr	r3, [pc, #108]	; (800e7ac <__sfp+0x70>)
 800e740:	681e      	ldr	r6, [r3, #0]
 800e742:	69b3      	ldr	r3, [r6, #24]
 800e744:	4607      	mov	r7, r0
 800e746:	b913      	cbnz	r3, 800e74e <__sfp+0x12>
 800e748:	4630      	mov	r0, r6
 800e74a:	f7ff ffc7 	bl	800e6dc <__sinit>
 800e74e:	3648      	adds	r6, #72	; 0x48
 800e750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e754:	3b01      	subs	r3, #1
 800e756:	d503      	bpl.n	800e760 <__sfp+0x24>
 800e758:	6833      	ldr	r3, [r6, #0]
 800e75a:	b133      	cbz	r3, 800e76a <__sfp+0x2e>
 800e75c:	6836      	ldr	r6, [r6, #0]
 800e75e:	e7f7      	b.n	800e750 <__sfp+0x14>
 800e760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e764:	b16d      	cbz	r5, 800e782 <__sfp+0x46>
 800e766:	3468      	adds	r4, #104	; 0x68
 800e768:	e7f4      	b.n	800e754 <__sfp+0x18>
 800e76a:	2104      	movs	r1, #4
 800e76c:	4638      	mov	r0, r7
 800e76e:	f7ff ff9f 	bl	800e6b0 <__sfmoreglue>
 800e772:	6030      	str	r0, [r6, #0]
 800e774:	2800      	cmp	r0, #0
 800e776:	d1f1      	bne.n	800e75c <__sfp+0x20>
 800e778:	230c      	movs	r3, #12
 800e77a:	603b      	str	r3, [r7, #0]
 800e77c:	4604      	mov	r4, r0
 800e77e:	4620      	mov	r0, r4
 800e780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e782:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <__sfp+0x74>)
 800e784:	6665      	str	r5, [r4, #100]	; 0x64
 800e786:	e9c4 5500 	strd	r5, r5, [r4]
 800e78a:	60a5      	str	r5, [r4, #8]
 800e78c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e790:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e794:	2208      	movs	r2, #8
 800e796:	4629      	mov	r1, r5
 800e798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e79c:	f7ff fd36 	bl	800e20c <memset>
 800e7a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7a8:	e7e9      	b.n	800e77e <__sfp+0x42>
 800e7aa:	bf00      	nop
 800e7ac:	08011d08 	.word	0x08011d08
 800e7b0:	ffff0001 	.word	0xffff0001

0800e7b4 <_fwalk_reent>:
 800e7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b8:	4680      	mov	r8, r0
 800e7ba:	4689      	mov	r9, r1
 800e7bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7c0:	2600      	movs	r6, #0
 800e7c2:	b914      	cbnz	r4, 800e7ca <_fwalk_reent+0x16>
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e7ce:	3f01      	subs	r7, #1
 800e7d0:	d501      	bpl.n	800e7d6 <_fwalk_reent+0x22>
 800e7d2:	6824      	ldr	r4, [r4, #0]
 800e7d4:	e7f5      	b.n	800e7c2 <_fwalk_reent+0xe>
 800e7d6:	89ab      	ldrh	r3, [r5, #12]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d907      	bls.n	800e7ec <_fwalk_reent+0x38>
 800e7dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	d003      	beq.n	800e7ec <_fwalk_reent+0x38>
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	47c8      	blx	r9
 800e7ea:	4306      	orrs	r6, r0
 800e7ec:	3568      	adds	r5, #104	; 0x68
 800e7ee:	e7ee      	b.n	800e7ce <_fwalk_reent+0x1a>

0800e7f0 <__swhatbuf_r>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	460e      	mov	r6, r1
 800e7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f8:	2900      	cmp	r1, #0
 800e7fa:	b096      	sub	sp, #88	; 0x58
 800e7fc:	4614      	mov	r4, r2
 800e7fe:	461d      	mov	r5, r3
 800e800:	da07      	bge.n	800e812 <__swhatbuf_r+0x22>
 800e802:	2300      	movs	r3, #0
 800e804:	602b      	str	r3, [r5, #0]
 800e806:	89b3      	ldrh	r3, [r6, #12]
 800e808:	061a      	lsls	r2, r3, #24
 800e80a:	d410      	bmi.n	800e82e <__swhatbuf_r+0x3e>
 800e80c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e810:	e00e      	b.n	800e830 <__swhatbuf_r+0x40>
 800e812:	466a      	mov	r2, sp
 800e814:	f000 fc3e 	bl	800f094 <_fstat_r>
 800e818:	2800      	cmp	r0, #0
 800e81a:	dbf2      	blt.n	800e802 <__swhatbuf_r+0x12>
 800e81c:	9a01      	ldr	r2, [sp, #4]
 800e81e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e822:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e826:	425a      	negs	r2, r3
 800e828:	415a      	adcs	r2, r3
 800e82a:	602a      	str	r2, [r5, #0]
 800e82c:	e7ee      	b.n	800e80c <__swhatbuf_r+0x1c>
 800e82e:	2340      	movs	r3, #64	; 0x40
 800e830:	2000      	movs	r0, #0
 800e832:	6023      	str	r3, [r4, #0]
 800e834:	b016      	add	sp, #88	; 0x58
 800e836:	bd70      	pop	{r4, r5, r6, pc}

0800e838 <__smakebuf_r>:
 800e838:	898b      	ldrh	r3, [r1, #12]
 800e83a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e83c:	079d      	lsls	r5, r3, #30
 800e83e:	4606      	mov	r6, r0
 800e840:	460c      	mov	r4, r1
 800e842:	d507      	bpl.n	800e854 <__smakebuf_r+0x1c>
 800e844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	2301      	movs	r3, #1
 800e84e:	6163      	str	r3, [r4, #20]
 800e850:	b002      	add	sp, #8
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	ab01      	add	r3, sp, #4
 800e856:	466a      	mov	r2, sp
 800e858:	f7ff ffca 	bl	800e7f0 <__swhatbuf_r>
 800e85c:	9900      	ldr	r1, [sp, #0]
 800e85e:	4605      	mov	r5, r0
 800e860:	4630      	mov	r0, r6
 800e862:	f000 f87f 	bl	800e964 <_malloc_r>
 800e866:	b948      	cbnz	r0, 800e87c <__smakebuf_r+0x44>
 800e868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e86c:	059a      	lsls	r2, r3, #22
 800e86e:	d4ef      	bmi.n	800e850 <__smakebuf_r+0x18>
 800e870:	f023 0303 	bic.w	r3, r3, #3
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	e7e3      	b.n	800e844 <__smakebuf_r+0xc>
 800e87c:	4b0d      	ldr	r3, [pc, #52]	; (800e8b4 <__smakebuf_r+0x7c>)
 800e87e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e888:	81a3      	strh	r3, [r4, #12]
 800e88a:	9b00      	ldr	r3, [sp, #0]
 800e88c:	6163      	str	r3, [r4, #20]
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	6120      	str	r0, [r4, #16]
 800e892:	b15b      	cbz	r3, 800e8ac <__smakebuf_r+0x74>
 800e894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e898:	4630      	mov	r0, r6
 800e89a:	f000 fc0d 	bl	800f0b8 <_isatty_r>
 800e89e:	b128      	cbz	r0, 800e8ac <__smakebuf_r+0x74>
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	f043 0301 	orr.w	r3, r3, #1
 800e8aa:	81a3      	strh	r3, [r4, #12]
 800e8ac:	89a3      	ldrh	r3, [r4, #12]
 800e8ae:	431d      	orrs	r5, r3
 800e8b0:	81a5      	strh	r5, [r4, #12]
 800e8b2:	e7cd      	b.n	800e850 <__smakebuf_r+0x18>
 800e8b4:	0800e6a5 	.word	0x0800e6a5

0800e8b8 <malloc>:
 800e8b8:	4b02      	ldr	r3, [pc, #8]	; (800e8c4 <malloc+0xc>)
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	6818      	ldr	r0, [r3, #0]
 800e8be:	f000 b851 	b.w	800e964 <_malloc_r>
 800e8c2:	bf00      	nop
 800e8c4:	20000014 	.word	0x20000014

0800e8c8 <_free_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	d045      	beq.n	800e95c <_free_r+0x94>
 800e8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d4:	1f0c      	subs	r4, r1, #4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfb8      	it	lt
 800e8da:	18e4      	addlt	r4, r4, r3
 800e8dc:	f000 fc0e 	bl	800f0fc <__malloc_lock>
 800e8e0:	4a1f      	ldr	r2, [pc, #124]	; (800e960 <_free_r+0x98>)
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	4610      	mov	r0, r2
 800e8e6:	b933      	cbnz	r3, 800e8f6 <_free_r+0x2e>
 800e8e8:	6063      	str	r3, [r4, #4]
 800e8ea:	6014      	str	r4, [r2, #0]
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8f2:	f000 bc04 	b.w	800f0fe <__malloc_unlock>
 800e8f6:	42a3      	cmp	r3, r4
 800e8f8:	d90c      	bls.n	800e914 <_free_r+0x4c>
 800e8fa:	6821      	ldr	r1, [r4, #0]
 800e8fc:	1862      	adds	r2, r4, r1
 800e8fe:	4293      	cmp	r3, r2
 800e900:	bf04      	itt	eq
 800e902:	681a      	ldreq	r2, [r3, #0]
 800e904:	685b      	ldreq	r3, [r3, #4]
 800e906:	6063      	str	r3, [r4, #4]
 800e908:	bf04      	itt	eq
 800e90a:	1852      	addeq	r2, r2, r1
 800e90c:	6022      	streq	r2, [r4, #0]
 800e90e:	6004      	str	r4, [r0, #0]
 800e910:	e7ec      	b.n	800e8ec <_free_r+0x24>
 800e912:	4613      	mov	r3, r2
 800e914:	685a      	ldr	r2, [r3, #4]
 800e916:	b10a      	cbz	r2, 800e91c <_free_r+0x54>
 800e918:	42a2      	cmp	r2, r4
 800e91a:	d9fa      	bls.n	800e912 <_free_r+0x4a>
 800e91c:	6819      	ldr	r1, [r3, #0]
 800e91e:	1858      	adds	r0, r3, r1
 800e920:	42a0      	cmp	r0, r4
 800e922:	d10b      	bne.n	800e93c <_free_r+0x74>
 800e924:	6820      	ldr	r0, [r4, #0]
 800e926:	4401      	add	r1, r0
 800e928:	1858      	adds	r0, r3, r1
 800e92a:	4282      	cmp	r2, r0
 800e92c:	6019      	str	r1, [r3, #0]
 800e92e:	d1dd      	bne.n	800e8ec <_free_r+0x24>
 800e930:	6810      	ldr	r0, [r2, #0]
 800e932:	6852      	ldr	r2, [r2, #4]
 800e934:	605a      	str	r2, [r3, #4]
 800e936:	4401      	add	r1, r0
 800e938:	6019      	str	r1, [r3, #0]
 800e93a:	e7d7      	b.n	800e8ec <_free_r+0x24>
 800e93c:	d902      	bls.n	800e944 <_free_r+0x7c>
 800e93e:	230c      	movs	r3, #12
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	e7d3      	b.n	800e8ec <_free_r+0x24>
 800e944:	6820      	ldr	r0, [r4, #0]
 800e946:	1821      	adds	r1, r4, r0
 800e948:	428a      	cmp	r2, r1
 800e94a:	bf04      	itt	eq
 800e94c:	6811      	ldreq	r1, [r2, #0]
 800e94e:	6852      	ldreq	r2, [r2, #4]
 800e950:	6062      	str	r2, [r4, #4]
 800e952:	bf04      	itt	eq
 800e954:	1809      	addeq	r1, r1, r0
 800e956:	6021      	streq	r1, [r4, #0]
 800e958:	605c      	str	r4, [r3, #4]
 800e95a:	e7c7      	b.n	800e8ec <_free_r+0x24>
 800e95c:	bd38      	pop	{r3, r4, r5, pc}
 800e95e:	bf00      	nop
 800e960:	2000020c 	.word	0x2000020c

0800e964 <_malloc_r>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	1ccd      	adds	r5, r1, #3
 800e968:	f025 0503 	bic.w	r5, r5, #3
 800e96c:	3508      	adds	r5, #8
 800e96e:	2d0c      	cmp	r5, #12
 800e970:	bf38      	it	cc
 800e972:	250c      	movcc	r5, #12
 800e974:	2d00      	cmp	r5, #0
 800e976:	4606      	mov	r6, r0
 800e978:	db01      	blt.n	800e97e <_malloc_r+0x1a>
 800e97a:	42a9      	cmp	r1, r5
 800e97c:	d903      	bls.n	800e986 <_malloc_r+0x22>
 800e97e:	230c      	movs	r3, #12
 800e980:	6033      	str	r3, [r6, #0]
 800e982:	2000      	movs	r0, #0
 800e984:	bd70      	pop	{r4, r5, r6, pc}
 800e986:	f000 fbb9 	bl	800f0fc <__malloc_lock>
 800e98a:	4a21      	ldr	r2, [pc, #132]	; (800ea10 <_malloc_r+0xac>)
 800e98c:	6814      	ldr	r4, [r2, #0]
 800e98e:	4621      	mov	r1, r4
 800e990:	b991      	cbnz	r1, 800e9b8 <_malloc_r+0x54>
 800e992:	4c20      	ldr	r4, [pc, #128]	; (800ea14 <_malloc_r+0xb0>)
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	b91b      	cbnz	r3, 800e9a0 <_malloc_r+0x3c>
 800e998:	4630      	mov	r0, r6
 800e99a:	f000 fb05 	bl	800efa8 <_sbrk_r>
 800e99e:	6020      	str	r0, [r4, #0]
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f000 fb00 	bl	800efa8 <_sbrk_r>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d124      	bne.n	800e9f6 <_malloc_r+0x92>
 800e9ac:	230c      	movs	r3, #12
 800e9ae:	6033      	str	r3, [r6, #0]
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f000 fba4 	bl	800f0fe <__malloc_unlock>
 800e9b6:	e7e4      	b.n	800e982 <_malloc_r+0x1e>
 800e9b8:	680b      	ldr	r3, [r1, #0]
 800e9ba:	1b5b      	subs	r3, r3, r5
 800e9bc:	d418      	bmi.n	800e9f0 <_malloc_r+0x8c>
 800e9be:	2b0b      	cmp	r3, #11
 800e9c0:	d90f      	bls.n	800e9e2 <_malloc_r+0x7e>
 800e9c2:	600b      	str	r3, [r1, #0]
 800e9c4:	50cd      	str	r5, [r1, r3]
 800e9c6:	18cc      	adds	r4, r1, r3
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f000 fb98 	bl	800f0fe <__malloc_unlock>
 800e9ce:	f104 000b 	add.w	r0, r4, #11
 800e9d2:	1d23      	adds	r3, r4, #4
 800e9d4:	f020 0007 	bic.w	r0, r0, #7
 800e9d8:	1ac3      	subs	r3, r0, r3
 800e9da:	d0d3      	beq.n	800e984 <_malloc_r+0x20>
 800e9dc:	425a      	negs	r2, r3
 800e9de:	50e2      	str	r2, [r4, r3]
 800e9e0:	e7d0      	b.n	800e984 <_malloc_r+0x20>
 800e9e2:	428c      	cmp	r4, r1
 800e9e4:	684b      	ldr	r3, [r1, #4]
 800e9e6:	bf16      	itet	ne
 800e9e8:	6063      	strne	r3, [r4, #4]
 800e9ea:	6013      	streq	r3, [r2, #0]
 800e9ec:	460c      	movne	r4, r1
 800e9ee:	e7eb      	b.n	800e9c8 <_malloc_r+0x64>
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	6849      	ldr	r1, [r1, #4]
 800e9f4:	e7cc      	b.n	800e990 <_malloc_r+0x2c>
 800e9f6:	1cc4      	adds	r4, r0, #3
 800e9f8:	f024 0403 	bic.w	r4, r4, #3
 800e9fc:	42a0      	cmp	r0, r4
 800e9fe:	d005      	beq.n	800ea0c <_malloc_r+0xa8>
 800ea00:	1a21      	subs	r1, r4, r0
 800ea02:	4630      	mov	r0, r6
 800ea04:	f000 fad0 	bl	800efa8 <_sbrk_r>
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d0cf      	beq.n	800e9ac <_malloc_r+0x48>
 800ea0c:	6025      	str	r5, [r4, #0]
 800ea0e:	e7db      	b.n	800e9c8 <_malloc_r+0x64>
 800ea10:	2000020c 	.word	0x2000020c
 800ea14:	20000210 	.word	0x20000210

0800ea18 <__sfputc_r>:
 800ea18:	6893      	ldr	r3, [r2, #8]
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	b410      	push	{r4}
 800ea20:	6093      	str	r3, [r2, #8]
 800ea22:	da08      	bge.n	800ea36 <__sfputc_r+0x1e>
 800ea24:	6994      	ldr	r4, [r2, #24]
 800ea26:	42a3      	cmp	r3, r4
 800ea28:	db01      	blt.n	800ea2e <__sfputc_r+0x16>
 800ea2a:	290a      	cmp	r1, #10
 800ea2c:	d103      	bne.n	800ea36 <__sfputc_r+0x1e>
 800ea2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea32:	f7ff bca3 	b.w	800e37c <__swbuf_r>
 800ea36:	6813      	ldr	r3, [r2, #0]
 800ea38:	1c58      	adds	r0, r3, #1
 800ea3a:	6010      	str	r0, [r2, #0]
 800ea3c:	7019      	strb	r1, [r3, #0]
 800ea3e:	4608      	mov	r0, r1
 800ea40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea44:	4770      	bx	lr

0800ea46 <__sfputs_r>:
 800ea46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	4614      	mov	r4, r2
 800ea4e:	18d5      	adds	r5, r2, r3
 800ea50:	42ac      	cmp	r4, r5
 800ea52:	d101      	bne.n	800ea58 <__sfputs_r+0x12>
 800ea54:	2000      	movs	r0, #0
 800ea56:	e007      	b.n	800ea68 <__sfputs_r+0x22>
 800ea58:	463a      	mov	r2, r7
 800ea5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ffda 	bl	800ea18 <__sfputc_r>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d1f3      	bne.n	800ea50 <__sfputs_r+0xa>
 800ea68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea6c <_vfiprintf_r>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	460c      	mov	r4, r1
 800ea72:	b09d      	sub	sp, #116	; 0x74
 800ea74:	4617      	mov	r7, r2
 800ea76:	461d      	mov	r5, r3
 800ea78:	4606      	mov	r6, r0
 800ea7a:	b118      	cbz	r0, 800ea84 <_vfiprintf_r+0x18>
 800ea7c:	6983      	ldr	r3, [r0, #24]
 800ea7e:	b90b      	cbnz	r3, 800ea84 <_vfiprintf_r+0x18>
 800ea80:	f7ff fe2c 	bl	800e6dc <__sinit>
 800ea84:	4b7c      	ldr	r3, [pc, #496]	; (800ec78 <_vfiprintf_r+0x20c>)
 800ea86:	429c      	cmp	r4, r3
 800ea88:	d158      	bne.n	800eb3c <_vfiprintf_r+0xd0>
 800ea8a:	6874      	ldr	r4, [r6, #4]
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	0718      	lsls	r0, r3, #28
 800ea90:	d55e      	bpl.n	800eb50 <_vfiprintf_r+0xe4>
 800ea92:	6923      	ldr	r3, [r4, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d05b      	beq.n	800eb50 <_vfiprintf_r+0xe4>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea9c:	2320      	movs	r3, #32
 800ea9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaa2:	2330      	movs	r3, #48	; 0x30
 800eaa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaa8:	9503      	str	r5, [sp, #12]
 800eaaa:	f04f 0b01 	mov.w	fp, #1
 800eaae:	46b8      	mov	r8, r7
 800eab0:	4645      	mov	r5, r8
 800eab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eab6:	b10b      	cbz	r3, 800eabc <_vfiprintf_r+0x50>
 800eab8:	2b25      	cmp	r3, #37	; 0x25
 800eaba:	d154      	bne.n	800eb66 <_vfiprintf_r+0xfa>
 800eabc:	ebb8 0a07 	subs.w	sl, r8, r7
 800eac0:	d00b      	beq.n	800eada <_vfiprintf_r+0x6e>
 800eac2:	4653      	mov	r3, sl
 800eac4:	463a      	mov	r2, r7
 800eac6:	4621      	mov	r1, r4
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7ff ffbc 	bl	800ea46 <__sfputs_r>
 800eace:	3001      	adds	r0, #1
 800ead0:	f000 80c2 	beq.w	800ec58 <_vfiprintf_r+0x1ec>
 800ead4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead6:	4453      	add	r3, sl
 800ead8:	9309      	str	r3, [sp, #36]	; 0x24
 800eada:	f898 3000 	ldrb.w	r3, [r8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f000 80ba 	beq.w	800ec58 <_vfiprintf_r+0x1ec>
 800eae4:	2300      	movs	r3, #0
 800eae6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	9307      	str	r3, [sp, #28]
 800eaf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaf6:	931a      	str	r3, [sp, #104]	; 0x68
 800eaf8:	46a8      	mov	r8, r5
 800eafa:	2205      	movs	r2, #5
 800eafc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800eb00:	485e      	ldr	r0, [pc, #376]	; (800ec7c <_vfiprintf_r+0x210>)
 800eb02:	f7f1 fb75 	bl	80001f0 <memchr>
 800eb06:	9b04      	ldr	r3, [sp, #16]
 800eb08:	bb78      	cbnz	r0, 800eb6a <_vfiprintf_r+0xfe>
 800eb0a:	06d9      	lsls	r1, r3, #27
 800eb0c:	bf44      	itt	mi
 800eb0e:	2220      	movmi	r2, #32
 800eb10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb14:	071a      	lsls	r2, r3, #28
 800eb16:	bf44      	itt	mi
 800eb18:	222b      	movmi	r2, #43	; 0x2b
 800eb1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb1e:	782a      	ldrb	r2, [r5, #0]
 800eb20:	2a2a      	cmp	r2, #42	; 0x2a
 800eb22:	d02a      	beq.n	800eb7a <_vfiprintf_r+0x10e>
 800eb24:	9a07      	ldr	r2, [sp, #28]
 800eb26:	46a8      	mov	r8, r5
 800eb28:	2000      	movs	r0, #0
 800eb2a:	250a      	movs	r5, #10
 800eb2c:	4641      	mov	r1, r8
 800eb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb32:	3b30      	subs	r3, #48	; 0x30
 800eb34:	2b09      	cmp	r3, #9
 800eb36:	d969      	bls.n	800ec0c <_vfiprintf_r+0x1a0>
 800eb38:	b360      	cbz	r0, 800eb94 <_vfiprintf_r+0x128>
 800eb3a:	e024      	b.n	800eb86 <_vfiprintf_r+0x11a>
 800eb3c:	4b50      	ldr	r3, [pc, #320]	; (800ec80 <_vfiprintf_r+0x214>)
 800eb3e:	429c      	cmp	r4, r3
 800eb40:	d101      	bne.n	800eb46 <_vfiprintf_r+0xda>
 800eb42:	68b4      	ldr	r4, [r6, #8]
 800eb44:	e7a2      	b.n	800ea8c <_vfiprintf_r+0x20>
 800eb46:	4b4f      	ldr	r3, [pc, #316]	; (800ec84 <_vfiprintf_r+0x218>)
 800eb48:	429c      	cmp	r4, r3
 800eb4a:	bf08      	it	eq
 800eb4c:	68f4      	ldreq	r4, [r6, #12]
 800eb4e:	e79d      	b.n	800ea8c <_vfiprintf_r+0x20>
 800eb50:	4621      	mov	r1, r4
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7ff fc64 	bl	800e420 <__swsetup_r>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d09d      	beq.n	800ea98 <_vfiprintf_r+0x2c>
 800eb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb60:	b01d      	add	sp, #116	; 0x74
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb66:	46a8      	mov	r8, r5
 800eb68:	e7a2      	b.n	800eab0 <_vfiprintf_r+0x44>
 800eb6a:	4a44      	ldr	r2, [pc, #272]	; (800ec7c <_vfiprintf_r+0x210>)
 800eb6c:	1a80      	subs	r0, r0, r2
 800eb6e:	fa0b f000 	lsl.w	r0, fp, r0
 800eb72:	4318      	orrs	r0, r3
 800eb74:	9004      	str	r0, [sp, #16]
 800eb76:	4645      	mov	r5, r8
 800eb78:	e7be      	b.n	800eaf8 <_vfiprintf_r+0x8c>
 800eb7a:	9a03      	ldr	r2, [sp, #12]
 800eb7c:	1d11      	adds	r1, r2, #4
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	9103      	str	r1, [sp, #12]
 800eb82:	2a00      	cmp	r2, #0
 800eb84:	db01      	blt.n	800eb8a <_vfiprintf_r+0x11e>
 800eb86:	9207      	str	r2, [sp, #28]
 800eb88:	e004      	b.n	800eb94 <_vfiprintf_r+0x128>
 800eb8a:	4252      	negs	r2, r2
 800eb8c:	f043 0302 	orr.w	r3, r3, #2
 800eb90:	9207      	str	r2, [sp, #28]
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	f898 3000 	ldrb.w	r3, [r8]
 800eb98:	2b2e      	cmp	r3, #46	; 0x2e
 800eb9a:	d10e      	bne.n	800ebba <_vfiprintf_r+0x14e>
 800eb9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eba0:	2b2a      	cmp	r3, #42	; 0x2a
 800eba2:	d138      	bne.n	800ec16 <_vfiprintf_r+0x1aa>
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	1d1a      	adds	r2, r3, #4
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	9203      	str	r2, [sp, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bfb8      	it	lt
 800ebb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebb4:	f108 0802 	add.w	r8, r8, #2
 800ebb8:	9305      	str	r3, [sp, #20]
 800ebba:	4d33      	ldr	r5, [pc, #204]	; (800ec88 <_vfiprintf_r+0x21c>)
 800ebbc:	f898 1000 	ldrb.w	r1, [r8]
 800ebc0:	2203      	movs	r2, #3
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f7f1 fb14 	bl	80001f0 <memchr>
 800ebc8:	b140      	cbz	r0, 800ebdc <_vfiprintf_r+0x170>
 800ebca:	2340      	movs	r3, #64	; 0x40
 800ebcc:	1b40      	subs	r0, r0, r5
 800ebce:	fa03 f000 	lsl.w	r0, r3, r0
 800ebd2:	9b04      	ldr	r3, [sp, #16]
 800ebd4:	4303      	orrs	r3, r0
 800ebd6:	f108 0801 	add.w	r8, r8, #1
 800ebda:	9304      	str	r3, [sp, #16]
 800ebdc:	f898 1000 	ldrb.w	r1, [r8]
 800ebe0:	482a      	ldr	r0, [pc, #168]	; (800ec8c <_vfiprintf_r+0x220>)
 800ebe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebe6:	2206      	movs	r2, #6
 800ebe8:	f108 0701 	add.w	r7, r8, #1
 800ebec:	f7f1 fb00 	bl	80001f0 <memchr>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d037      	beq.n	800ec64 <_vfiprintf_r+0x1f8>
 800ebf4:	4b26      	ldr	r3, [pc, #152]	; (800ec90 <_vfiprintf_r+0x224>)
 800ebf6:	bb1b      	cbnz	r3, 800ec40 <_vfiprintf_r+0x1d4>
 800ebf8:	9b03      	ldr	r3, [sp, #12]
 800ebfa:	3307      	adds	r3, #7
 800ebfc:	f023 0307 	bic.w	r3, r3, #7
 800ec00:	3308      	adds	r3, #8
 800ec02:	9303      	str	r3, [sp, #12]
 800ec04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec06:	444b      	add	r3, r9
 800ec08:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0a:	e750      	b.n	800eaae <_vfiprintf_r+0x42>
 800ec0c:	fb05 3202 	mla	r2, r5, r2, r3
 800ec10:	2001      	movs	r0, #1
 800ec12:	4688      	mov	r8, r1
 800ec14:	e78a      	b.n	800eb2c <_vfiprintf_r+0xc0>
 800ec16:	2300      	movs	r3, #0
 800ec18:	f108 0801 	add.w	r8, r8, #1
 800ec1c:	9305      	str	r3, [sp, #20]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	250a      	movs	r5, #10
 800ec22:	4640      	mov	r0, r8
 800ec24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec28:	3a30      	subs	r2, #48	; 0x30
 800ec2a:	2a09      	cmp	r2, #9
 800ec2c:	d903      	bls.n	800ec36 <_vfiprintf_r+0x1ca>
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d0c3      	beq.n	800ebba <_vfiprintf_r+0x14e>
 800ec32:	9105      	str	r1, [sp, #20]
 800ec34:	e7c1      	b.n	800ebba <_vfiprintf_r+0x14e>
 800ec36:	fb05 2101 	mla	r1, r5, r1, r2
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	e7f0      	b.n	800ec22 <_vfiprintf_r+0x1b6>
 800ec40:	ab03      	add	r3, sp, #12
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	4622      	mov	r2, r4
 800ec46:	4b13      	ldr	r3, [pc, #76]	; (800ec94 <_vfiprintf_r+0x228>)
 800ec48:	a904      	add	r1, sp, #16
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	f3af 8000 	nop.w
 800ec50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec54:	4681      	mov	r9, r0
 800ec56:	d1d5      	bne.n	800ec04 <_vfiprintf_r+0x198>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	065b      	lsls	r3, r3, #25
 800ec5c:	f53f af7e 	bmi.w	800eb5c <_vfiprintf_r+0xf0>
 800ec60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec62:	e77d      	b.n	800eb60 <_vfiprintf_r+0xf4>
 800ec64:	ab03      	add	r3, sp, #12
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4b0a      	ldr	r3, [pc, #40]	; (800ec94 <_vfiprintf_r+0x228>)
 800ec6c:	a904      	add	r1, sp, #16
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f000 f888 	bl	800ed84 <_printf_i>
 800ec74:	e7ec      	b.n	800ec50 <_vfiprintf_r+0x1e4>
 800ec76:	bf00      	nop
 800ec78:	08011d2c 	.word	0x08011d2c
 800ec7c:	08011d6c 	.word	0x08011d6c
 800ec80:	08011d4c 	.word	0x08011d4c
 800ec84:	08011d0c 	.word	0x08011d0c
 800ec88:	08011d72 	.word	0x08011d72
 800ec8c:	08011d76 	.word	0x08011d76
 800ec90:	00000000 	.word	0x00000000
 800ec94:	0800ea47 	.word	0x0800ea47

0800ec98 <_printf_common>:
 800ec98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9c:	4691      	mov	r9, r2
 800ec9e:	461f      	mov	r7, r3
 800eca0:	688a      	ldr	r2, [r1, #8]
 800eca2:	690b      	ldr	r3, [r1, #16]
 800eca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	bfb8      	it	lt
 800ecac:	4613      	movlt	r3, r2
 800ecae:	f8c9 3000 	str.w	r3, [r9]
 800ecb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	460c      	mov	r4, r1
 800ecba:	b112      	cbz	r2, 800ecc2 <_printf_common+0x2a>
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	f8c9 3000 	str.w	r3, [r9]
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	0699      	lsls	r1, r3, #26
 800ecc6:	bf42      	ittt	mi
 800ecc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eccc:	3302      	addmi	r3, #2
 800ecce:	f8c9 3000 	strmi.w	r3, [r9]
 800ecd2:	6825      	ldr	r5, [r4, #0]
 800ecd4:	f015 0506 	ands.w	r5, r5, #6
 800ecd8:	d107      	bne.n	800ecea <_printf_common+0x52>
 800ecda:	f104 0a19 	add.w	sl, r4, #25
 800ecde:	68e3      	ldr	r3, [r4, #12]
 800ece0:	f8d9 2000 	ldr.w	r2, [r9]
 800ece4:	1a9b      	subs	r3, r3, r2
 800ece6:	42ab      	cmp	r3, r5
 800ece8:	dc28      	bgt.n	800ed3c <_printf_common+0xa4>
 800ecea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ecee:	6822      	ldr	r2, [r4, #0]
 800ecf0:	3300      	adds	r3, #0
 800ecf2:	bf18      	it	ne
 800ecf4:	2301      	movne	r3, #1
 800ecf6:	0692      	lsls	r2, r2, #26
 800ecf8:	d42d      	bmi.n	800ed56 <_printf_common+0xbe>
 800ecfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecfe:	4639      	mov	r1, r7
 800ed00:	4630      	mov	r0, r6
 800ed02:	47c0      	blx	r8
 800ed04:	3001      	adds	r0, #1
 800ed06:	d020      	beq.n	800ed4a <_printf_common+0xb2>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	68e5      	ldr	r5, [r4, #12]
 800ed0c:	f8d9 2000 	ldr.w	r2, [r9]
 800ed10:	f003 0306 	and.w	r3, r3, #6
 800ed14:	2b04      	cmp	r3, #4
 800ed16:	bf08      	it	eq
 800ed18:	1aad      	subeq	r5, r5, r2
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	6922      	ldr	r2, [r4, #16]
 800ed1e:	bf0c      	ite	eq
 800ed20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed24:	2500      	movne	r5, #0
 800ed26:	4293      	cmp	r3, r2
 800ed28:	bfc4      	itt	gt
 800ed2a:	1a9b      	subgt	r3, r3, r2
 800ed2c:	18ed      	addgt	r5, r5, r3
 800ed2e:	f04f 0900 	mov.w	r9, #0
 800ed32:	341a      	adds	r4, #26
 800ed34:	454d      	cmp	r5, r9
 800ed36:	d11a      	bne.n	800ed6e <_printf_common+0xd6>
 800ed38:	2000      	movs	r0, #0
 800ed3a:	e008      	b.n	800ed4e <_printf_common+0xb6>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	4652      	mov	r2, sl
 800ed40:	4639      	mov	r1, r7
 800ed42:	4630      	mov	r0, r6
 800ed44:	47c0      	blx	r8
 800ed46:	3001      	adds	r0, #1
 800ed48:	d103      	bne.n	800ed52 <_printf_common+0xba>
 800ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed52:	3501      	adds	r5, #1
 800ed54:	e7c3      	b.n	800ecde <_printf_common+0x46>
 800ed56:	18e1      	adds	r1, r4, r3
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	2030      	movs	r0, #48	; 0x30
 800ed5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed60:	4422      	add	r2, r4
 800ed62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed6a:	3302      	adds	r3, #2
 800ed6c:	e7c5      	b.n	800ecfa <_printf_common+0x62>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4622      	mov	r2, r4
 800ed72:	4639      	mov	r1, r7
 800ed74:	4630      	mov	r0, r6
 800ed76:	47c0      	blx	r8
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d0e6      	beq.n	800ed4a <_printf_common+0xb2>
 800ed7c:	f109 0901 	add.w	r9, r9, #1
 800ed80:	e7d8      	b.n	800ed34 <_printf_common+0x9c>
	...

0800ed84 <_printf_i>:
 800ed84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	7e09      	ldrb	r1, [r1, #24]
 800ed90:	b085      	sub	sp, #20
 800ed92:	296e      	cmp	r1, #110	; 0x6e
 800ed94:	4617      	mov	r7, r2
 800ed96:	4606      	mov	r6, r0
 800ed98:	4698      	mov	r8, r3
 800ed9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed9c:	f000 80b3 	beq.w	800ef06 <_printf_i+0x182>
 800eda0:	d822      	bhi.n	800ede8 <_printf_i+0x64>
 800eda2:	2963      	cmp	r1, #99	; 0x63
 800eda4:	d036      	beq.n	800ee14 <_printf_i+0x90>
 800eda6:	d80a      	bhi.n	800edbe <_printf_i+0x3a>
 800eda8:	2900      	cmp	r1, #0
 800edaa:	f000 80b9 	beq.w	800ef20 <_printf_i+0x19c>
 800edae:	2958      	cmp	r1, #88	; 0x58
 800edb0:	f000 8083 	beq.w	800eeba <_printf_i+0x136>
 800edb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800edbc:	e032      	b.n	800ee24 <_printf_i+0xa0>
 800edbe:	2964      	cmp	r1, #100	; 0x64
 800edc0:	d001      	beq.n	800edc6 <_printf_i+0x42>
 800edc2:	2969      	cmp	r1, #105	; 0x69
 800edc4:	d1f6      	bne.n	800edb4 <_printf_i+0x30>
 800edc6:	6820      	ldr	r0, [r4, #0]
 800edc8:	6813      	ldr	r3, [r2, #0]
 800edca:	0605      	lsls	r5, r0, #24
 800edcc:	f103 0104 	add.w	r1, r3, #4
 800edd0:	d52a      	bpl.n	800ee28 <_printf_i+0xa4>
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	6011      	str	r1, [r2, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	da03      	bge.n	800ede2 <_printf_i+0x5e>
 800edda:	222d      	movs	r2, #45	; 0x2d
 800eddc:	425b      	negs	r3, r3
 800edde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ede2:	486f      	ldr	r0, [pc, #444]	; (800efa0 <_printf_i+0x21c>)
 800ede4:	220a      	movs	r2, #10
 800ede6:	e039      	b.n	800ee5c <_printf_i+0xd8>
 800ede8:	2973      	cmp	r1, #115	; 0x73
 800edea:	f000 809d 	beq.w	800ef28 <_printf_i+0x1a4>
 800edee:	d808      	bhi.n	800ee02 <_printf_i+0x7e>
 800edf0:	296f      	cmp	r1, #111	; 0x6f
 800edf2:	d020      	beq.n	800ee36 <_printf_i+0xb2>
 800edf4:	2970      	cmp	r1, #112	; 0x70
 800edf6:	d1dd      	bne.n	800edb4 <_printf_i+0x30>
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	f043 0320 	orr.w	r3, r3, #32
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	e003      	b.n	800ee0a <_printf_i+0x86>
 800ee02:	2975      	cmp	r1, #117	; 0x75
 800ee04:	d017      	beq.n	800ee36 <_printf_i+0xb2>
 800ee06:	2978      	cmp	r1, #120	; 0x78
 800ee08:	d1d4      	bne.n	800edb4 <_printf_i+0x30>
 800ee0a:	2378      	movs	r3, #120	; 0x78
 800ee0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee10:	4864      	ldr	r0, [pc, #400]	; (800efa4 <_printf_i+0x220>)
 800ee12:	e055      	b.n	800eec0 <_printf_i+0x13c>
 800ee14:	6813      	ldr	r3, [r2, #0]
 800ee16:	1d19      	adds	r1, r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	6011      	str	r1, [r2, #0]
 800ee1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee24:	2301      	movs	r3, #1
 800ee26:	e08c      	b.n	800ef42 <_printf_i+0x1be>
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	6011      	str	r1, [r2, #0]
 800ee2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee30:	bf18      	it	ne
 800ee32:	b21b      	sxthne	r3, r3
 800ee34:	e7cf      	b.n	800edd6 <_printf_i+0x52>
 800ee36:	6813      	ldr	r3, [r2, #0]
 800ee38:	6825      	ldr	r5, [r4, #0]
 800ee3a:	1d18      	adds	r0, r3, #4
 800ee3c:	6010      	str	r0, [r2, #0]
 800ee3e:	0628      	lsls	r0, r5, #24
 800ee40:	d501      	bpl.n	800ee46 <_printf_i+0xc2>
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	e002      	b.n	800ee4c <_printf_i+0xc8>
 800ee46:	0668      	lsls	r0, r5, #25
 800ee48:	d5fb      	bpl.n	800ee42 <_printf_i+0xbe>
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	4854      	ldr	r0, [pc, #336]	; (800efa0 <_printf_i+0x21c>)
 800ee4e:	296f      	cmp	r1, #111	; 0x6f
 800ee50:	bf14      	ite	ne
 800ee52:	220a      	movne	r2, #10
 800ee54:	2208      	moveq	r2, #8
 800ee56:	2100      	movs	r1, #0
 800ee58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee5c:	6865      	ldr	r5, [r4, #4]
 800ee5e:	60a5      	str	r5, [r4, #8]
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	f2c0 8095 	blt.w	800ef90 <_printf_i+0x20c>
 800ee66:	6821      	ldr	r1, [r4, #0]
 800ee68:	f021 0104 	bic.w	r1, r1, #4
 800ee6c:	6021      	str	r1, [r4, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d13d      	bne.n	800eeee <_printf_i+0x16a>
 800ee72:	2d00      	cmp	r5, #0
 800ee74:	f040 808e 	bne.w	800ef94 <_printf_i+0x210>
 800ee78:	4665      	mov	r5, ip
 800ee7a:	2a08      	cmp	r2, #8
 800ee7c:	d10b      	bne.n	800ee96 <_printf_i+0x112>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	07db      	lsls	r3, r3, #31
 800ee82:	d508      	bpl.n	800ee96 <_printf_i+0x112>
 800ee84:	6923      	ldr	r3, [r4, #16]
 800ee86:	6862      	ldr	r2, [r4, #4]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	bfde      	ittt	le
 800ee8c:	2330      	movle	r3, #48	; 0x30
 800ee8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee92:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee96:	ebac 0305 	sub.w	r3, ip, r5
 800ee9a:	6123      	str	r3, [r4, #16]
 800ee9c:	f8cd 8000 	str.w	r8, [sp]
 800eea0:	463b      	mov	r3, r7
 800eea2:	aa03      	add	r2, sp, #12
 800eea4:	4621      	mov	r1, r4
 800eea6:	4630      	mov	r0, r6
 800eea8:	f7ff fef6 	bl	800ec98 <_printf_common>
 800eeac:	3001      	adds	r0, #1
 800eeae:	d14d      	bne.n	800ef4c <_printf_i+0x1c8>
 800eeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb4:	b005      	add	sp, #20
 800eeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeba:	4839      	ldr	r0, [pc, #228]	; (800efa0 <_printf_i+0x21c>)
 800eebc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eec0:	6813      	ldr	r3, [r2, #0]
 800eec2:	6821      	ldr	r1, [r4, #0]
 800eec4:	1d1d      	adds	r5, r3, #4
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6015      	str	r5, [r2, #0]
 800eeca:	060a      	lsls	r2, r1, #24
 800eecc:	d50b      	bpl.n	800eee6 <_printf_i+0x162>
 800eece:	07ca      	lsls	r2, r1, #31
 800eed0:	bf44      	itt	mi
 800eed2:	f041 0120 	orrmi.w	r1, r1, #32
 800eed6:	6021      	strmi	r1, [r4, #0]
 800eed8:	b91b      	cbnz	r3, 800eee2 <_printf_i+0x15e>
 800eeda:	6822      	ldr	r2, [r4, #0]
 800eedc:	f022 0220 	bic.w	r2, r2, #32
 800eee0:	6022      	str	r2, [r4, #0]
 800eee2:	2210      	movs	r2, #16
 800eee4:	e7b7      	b.n	800ee56 <_printf_i+0xd2>
 800eee6:	064d      	lsls	r5, r1, #25
 800eee8:	bf48      	it	mi
 800eeea:	b29b      	uxthmi	r3, r3
 800eeec:	e7ef      	b.n	800eece <_printf_i+0x14a>
 800eeee:	4665      	mov	r5, ip
 800eef0:	fbb3 f1f2 	udiv	r1, r3, r2
 800eef4:	fb02 3311 	mls	r3, r2, r1, r3
 800eef8:	5cc3      	ldrb	r3, [r0, r3]
 800eefa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eefe:	460b      	mov	r3, r1
 800ef00:	2900      	cmp	r1, #0
 800ef02:	d1f5      	bne.n	800eef0 <_printf_i+0x16c>
 800ef04:	e7b9      	b.n	800ee7a <_printf_i+0xf6>
 800ef06:	6813      	ldr	r3, [r2, #0]
 800ef08:	6825      	ldr	r5, [r4, #0]
 800ef0a:	6961      	ldr	r1, [r4, #20]
 800ef0c:	1d18      	adds	r0, r3, #4
 800ef0e:	6010      	str	r0, [r2, #0]
 800ef10:	0628      	lsls	r0, r5, #24
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	d501      	bpl.n	800ef1a <_printf_i+0x196>
 800ef16:	6019      	str	r1, [r3, #0]
 800ef18:	e002      	b.n	800ef20 <_printf_i+0x19c>
 800ef1a:	066a      	lsls	r2, r5, #25
 800ef1c:	d5fb      	bpl.n	800ef16 <_printf_i+0x192>
 800ef1e:	8019      	strh	r1, [r3, #0]
 800ef20:	2300      	movs	r3, #0
 800ef22:	6123      	str	r3, [r4, #16]
 800ef24:	4665      	mov	r5, ip
 800ef26:	e7b9      	b.n	800ee9c <_printf_i+0x118>
 800ef28:	6813      	ldr	r3, [r2, #0]
 800ef2a:	1d19      	adds	r1, r3, #4
 800ef2c:	6011      	str	r1, [r2, #0]
 800ef2e:	681d      	ldr	r5, [r3, #0]
 800ef30:	6862      	ldr	r2, [r4, #4]
 800ef32:	2100      	movs	r1, #0
 800ef34:	4628      	mov	r0, r5
 800ef36:	f7f1 f95b 	bl	80001f0 <memchr>
 800ef3a:	b108      	cbz	r0, 800ef40 <_printf_i+0x1bc>
 800ef3c:	1b40      	subs	r0, r0, r5
 800ef3e:	6060      	str	r0, [r4, #4]
 800ef40:	6863      	ldr	r3, [r4, #4]
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	2300      	movs	r3, #0
 800ef46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef4a:	e7a7      	b.n	800ee9c <_printf_i+0x118>
 800ef4c:	6923      	ldr	r3, [r4, #16]
 800ef4e:	462a      	mov	r2, r5
 800ef50:	4639      	mov	r1, r7
 800ef52:	4630      	mov	r0, r6
 800ef54:	47c0      	blx	r8
 800ef56:	3001      	adds	r0, #1
 800ef58:	d0aa      	beq.n	800eeb0 <_printf_i+0x12c>
 800ef5a:	6823      	ldr	r3, [r4, #0]
 800ef5c:	079b      	lsls	r3, r3, #30
 800ef5e:	d413      	bmi.n	800ef88 <_printf_i+0x204>
 800ef60:	68e0      	ldr	r0, [r4, #12]
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	4298      	cmp	r0, r3
 800ef66:	bfb8      	it	lt
 800ef68:	4618      	movlt	r0, r3
 800ef6a:	e7a3      	b.n	800eeb4 <_printf_i+0x130>
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	464a      	mov	r2, r9
 800ef70:	4639      	mov	r1, r7
 800ef72:	4630      	mov	r0, r6
 800ef74:	47c0      	blx	r8
 800ef76:	3001      	adds	r0, #1
 800ef78:	d09a      	beq.n	800eeb0 <_printf_i+0x12c>
 800ef7a:	3501      	adds	r5, #1
 800ef7c:	68e3      	ldr	r3, [r4, #12]
 800ef7e:	9a03      	ldr	r2, [sp, #12]
 800ef80:	1a9b      	subs	r3, r3, r2
 800ef82:	42ab      	cmp	r3, r5
 800ef84:	dcf2      	bgt.n	800ef6c <_printf_i+0x1e8>
 800ef86:	e7eb      	b.n	800ef60 <_printf_i+0x1dc>
 800ef88:	2500      	movs	r5, #0
 800ef8a:	f104 0919 	add.w	r9, r4, #25
 800ef8e:	e7f5      	b.n	800ef7c <_printf_i+0x1f8>
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1ac      	bne.n	800eeee <_printf_i+0x16a>
 800ef94:	7803      	ldrb	r3, [r0, #0]
 800ef96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef9e:	e76c      	b.n	800ee7a <_printf_i+0xf6>
 800efa0:	08011d7d 	.word	0x08011d7d
 800efa4:	08011d8e 	.word	0x08011d8e

0800efa8 <_sbrk_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4c06      	ldr	r4, [pc, #24]	; (800efc4 <_sbrk_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4605      	mov	r5, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	6023      	str	r3, [r4, #0]
 800efb4:	f7f1 fd1e 	bl	80009f4 <_sbrk>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_sbrk_r+0x1a>
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_sbrk_r+0x1a>
 800efc0:	602b      	str	r3, [r5, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	2000696c 	.word	0x2000696c

0800efc8 <__sread>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	f000 f896 	bl	800f100 <_read_r>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	bfab      	itete	ge
 800efd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efda:	89a3      	ldrhlt	r3, [r4, #12]
 800efdc:	181b      	addge	r3, r3, r0
 800efde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efe2:	bfac      	ite	ge
 800efe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efe6:	81a3      	strhlt	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__swrite>:
 800efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efee:	461f      	mov	r7, r3
 800eff0:	898b      	ldrh	r3, [r1, #12]
 800eff2:	05db      	lsls	r3, r3, #23
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	4616      	mov	r6, r2
 800effa:	d505      	bpl.n	800f008 <__swrite+0x1e>
 800effc:	2302      	movs	r3, #2
 800effe:	2200      	movs	r2, #0
 800f000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f004:	f000 f868 	bl	800f0d8 <_lseek_r>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f012:	81a3      	strh	r3, [r4, #12]
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	4628      	mov	r0, r5
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	f000 b817 	b.w	800f050 <_write_r>

0800f022 <__sseek>:
 800f022:	b510      	push	{r4, lr}
 800f024:	460c      	mov	r4, r1
 800f026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02a:	f000 f855 	bl	800f0d8 <_lseek_r>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	bf15      	itete	ne
 800f034:	6560      	strne	r0, [r4, #84]	; 0x54
 800f036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f03e:	81a3      	strheq	r3, [r4, #12]
 800f040:	bf18      	it	ne
 800f042:	81a3      	strhne	r3, [r4, #12]
 800f044:	bd10      	pop	{r4, pc}

0800f046 <__sclose>:
 800f046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04a:	f000 b813 	b.w	800f074 <_close_r>
	...

0800f050 <_write_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4c07      	ldr	r4, [pc, #28]	; (800f070 <_write_r+0x20>)
 800f054:	4605      	mov	r5, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	6022      	str	r2, [r4, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f7f1 fc77 	bl	8000952 <_write>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_write_r+0x1e>
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_write_r+0x1e>
 800f06c:	602b      	str	r3, [r5, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	2000696c 	.word	0x2000696c

0800f074 <_close_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4c06      	ldr	r4, [pc, #24]	; (800f090 <_close_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4605      	mov	r5, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	6023      	str	r3, [r4, #0]
 800f080:	f7f1 fc83 	bl	800098a <_close>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_close_r+0x1a>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_close_r+0x1a>
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	2000696c 	.word	0x2000696c

0800f094 <_fstat_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4c07      	ldr	r4, [pc, #28]	; (800f0b4 <_fstat_r+0x20>)
 800f098:	2300      	movs	r3, #0
 800f09a:	4605      	mov	r5, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	4611      	mov	r1, r2
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	f7f1 fc7e 	bl	80009a2 <_fstat>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	d102      	bne.n	800f0b0 <_fstat_r+0x1c>
 800f0aa:	6823      	ldr	r3, [r4, #0]
 800f0ac:	b103      	cbz	r3, 800f0b0 <_fstat_r+0x1c>
 800f0ae:	602b      	str	r3, [r5, #0]
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}
 800f0b2:	bf00      	nop
 800f0b4:	2000696c 	.word	0x2000696c

0800f0b8 <_isatty_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4c06      	ldr	r4, [pc, #24]	; (800f0d4 <_isatty_r+0x1c>)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4605      	mov	r5, r0
 800f0c0:	4608      	mov	r0, r1
 800f0c2:	6023      	str	r3, [r4, #0]
 800f0c4:	f7f1 fc7d 	bl	80009c2 <_isatty>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_isatty_r+0x1a>
 800f0cc:	6823      	ldr	r3, [r4, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_isatty_r+0x1a>
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	2000696c 	.word	0x2000696c

0800f0d8 <_lseek_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4c07      	ldr	r4, [pc, #28]	; (800f0f8 <_lseek_r+0x20>)
 800f0dc:	4605      	mov	r5, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	6022      	str	r2, [r4, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f1 fc76 	bl	80009d8 <_lseek>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_lseek_r+0x1e>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_lseek_r+0x1e>
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	2000696c 	.word	0x2000696c

0800f0fc <__malloc_lock>:
 800f0fc:	4770      	bx	lr

0800f0fe <__malloc_unlock>:
 800f0fe:	4770      	bx	lr

0800f100 <_read_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4c07      	ldr	r4, [pc, #28]	; (800f120 <_read_r+0x20>)
 800f104:	4605      	mov	r5, r0
 800f106:	4608      	mov	r0, r1
 800f108:	4611      	mov	r1, r2
 800f10a:	2200      	movs	r2, #0
 800f10c:	6022      	str	r2, [r4, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	f7f1 fc02 	bl	8000918 <_read>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_read_r+0x1e>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_read_r+0x1e>
 800f11c:	602b      	str	r3, [r5, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	2000696c 	.word	0x2000696c

0800f124 <_init>:
 800f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f126:	bf00      	nop
 800f128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f12a:	bc08      	pop	{r3}
 800f12c:	469e      	mov	lr, r3
 800f12e:	4770      	bx	lr

0800f130 <_fini>:
 800f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f132:	bf00      	nop
 800f134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f136:	bc08      	pop	{r3}
 800f138:	469e      	mov	lr, r3
 800f13a:	4770      	bx	lr
