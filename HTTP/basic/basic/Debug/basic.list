
basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050b0  08012678  08012678  00022678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017728  08017728  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017728  08017728  00027728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017730  08017730  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017730  08017730  00027730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017734  08017734  00027734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006958  2000007c  080177b4  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200069d4  080177b4  000369d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030462  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005912  00000000  00000000  0006050e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00065e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001758  00000000  00000000  00067668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003048e  00000000  00000000  00068dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020ae3  00000000  00000000  0009924e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2327  00000000  00000000  000b9d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa0  00000000  00000000  001ac0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012660 	.word	0x08012660

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08012660 	.word	0x08012660

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <MX_GPIO_Init+0x184>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a59      	ldr	r2, [pc, #356]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b57      	ldr	r3, [pc, #348]	; (8000714 <MX_GPIO_Init+0x184>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b53      	ldr	r3, [pc, #332]	; (8000714 <MX_GPIO_Init+0x184>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a52      	ldr	r2, [pc, #328]	; (8000714 <MX_GPIO_Init+0x184>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <MX_GPIO_Init+0x184>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a4b      	ldr	r2, [pc, #300]	; (8000714 <MX_GPIO_Init+0x184>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <MX_GPIO_Init+0x184>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <MX_GPIO_Init+0x184>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a44      	ldr	r2, [pc, #272]	; (8000714 <MX_GPIO_Init+0x184>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b42      	ldr	r3, [pc, #264]	; (8000714 <MX_GPIO_Init+0x184>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b3e      	ldr	r3, [pc, #248]	; (8000714 <MX_GPIO_Init+0x184>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a3d      	ldr	r2, [pc, #244]	; (8000714 <MX_GPIO_Init+0x184>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <MX_GPIO_Init+0x184>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0x184>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0x184>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0x184>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|uC_DEBUG_LED_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0101 	movw	r1, #16385	; 0x4001
 8000654:	4830      	ldr	r0, [pc, #192]	; (8000718 <MX_GPIO_Init+0x188>)
 8000656:	f001 fe87 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	482f      	ldr	r0, [pc, #188]	; (800071c <MX_GPIO_Init+0x18c>)
 8000660:	f001 fe82 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_GPIO_Init+0x190>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	482a      	ldr	r0, [pc, #168]	; (8000724 <MX_GPIO_Init+0x194>)
 800067a:	f001 fccb 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|uC_DEBUG_LED_Pin;
 800067e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_GPIO_Init+0x188>)
 8000698:	f001 fcbc 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <MX_GPIO_Init+0x18c>)
 80006b4:	f001 fcae 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_GPIO_Init+0x18c>)
 80006cc:	f001 fca2 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e2:	230a      	movs	r3, #10
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_GPIO_Init+0x198>)
 80006ee:	f001 fc91 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <MX_GPIO_Init+0x198>)
 8000708:	f001 fc84 	bl	8002014 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	40021800 	.word	0x40021800
 8000720:	10110000 	.word	0x10110000
 8000724:	40020800 	.word	0x40020800
 8000728:	40020000 	.word	0x40020000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fb35 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f835 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f7ff ff29 	bl	8000590 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073e:	f000 fa93 	bl	8000c68 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000742:	f003 fe21 	bl	8004388 <MX_LWIP_Init>
  MX_TIM4_Init();
 8000746:	f000 f9b5 	bl	8000ab4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  for(int index=0;index<5;index++)
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	e014      	b.n	800077a <main+0x4e>
  {
	  HAL_GPIO_WritePin(uC_DEBUG_LED_GPIO_Port, uC_DEBUG_LED_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <main+0x70>)
 8000758:	f001 fe06 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800075c:	2032      	movs	r0, #50	; 0x32
 800075e:	f000 fb91 	bl	8000e84 <HAL_Delay>
	  HAL_GPIO_WritePin(uC_DEBUG_LED_GPIO_Port, uC_DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <main+0x70>)
 800076a:	f001 fdfd 	bl	8002368 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 800076e:	2032      	movs	r0, #50	; 0x32
 8000770:	f000 fb88 	bl	8000e84 <HAL_Delay>
  for(int index=0;index<5;index++)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b04      	cmp	r3, #4
 800077e:	dde7      	ble.n	8000750 <main+0x24>
  }

  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_2);
 8000780:	2104      	movs	r1, #4
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <main+0x74>)
 8000784:	f002 facc 	bl	8002d20 <HAL_TIM_OC_Start_IT>

  HAL_GPIO_WritePin(uC_DEBUG_LED_GPIO_Port, uC_DEBUG_LED_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <main+0x70>)
 8000790:	f001 fdea 	bl	8002368 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000794:	f003 fe38 	bl	8004408 <MX_LWIP_Process>
 8000798:	e7fc      	b.n	8000794 <main+0x68>
 800079a:	bf00      	nop
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000224 	.word	0x20000224

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f010 ff7e 	bl	80116b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a27      	ldr	r2, [pc, #156]	; (8000870 <SystemClock_Config+0xcc>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <SystemClock_Config+0xd0>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000804:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000818:	23a8      	movs	r3, #168	; 0xa8
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000820:	2307      	movs	r3, #7
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fdb7 	bl	800239c <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 f820 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000844:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2105      	movs	r1, #5
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f810 	bl	800287c <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000862:	f000 f809 	bl	8000878 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 fa8a 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	LWIP_PLATFORM_DIAG(("Tim4\n"));
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <TIM4_IRQHandler+0x14>)
 800093a:	f010 ff4b 	bl	80117d4 <puts>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <TIM4_IRQHandler+0x18>)
 8000940:	f002 fa72 	bl	8002e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08012678 	.word	0x08012678
 800094c:	20000224 	.word	0x20000224

08000950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
	}

return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e009      	b.n	80009b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fcdd 	bl	8004364 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf1      	blt.n	800099c <_write+0x12>
	}
	return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_close>:

int _close(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	605a      	str	r2, [r3, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_isatty>:

int _isatty(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x50>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x16>
		heap_end = &end;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <_sbrk+0x50>)
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <_sbrk+0x54>)
 8000a40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <_sbrk+0x50>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <_sbrk+0x50>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	466a      	mov	r2, sp
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d905      	bls.n	8000a62 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <_sbrk+0x58>)
 8000a58:	220c      	movs	r2, #12
 8000a5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	e006      	b.n	8000a70 <_sbrk+0x44>
	}

	heap_end += incr;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <_sbrk+0x50>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <_sbrk+0x50>)
 8000a6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000098 	.word	0x20000098
 8000a80:	200069d8 	.word	0x200069d8
 8000a84:	200069d0 	.word	0x200069d0

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SystemInit+0x28>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <SystemInit+0x28>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SystemInit+0x28>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000ae6:	4a2e      	ldr	r2, [pc, #184]	; (8000ba0 <MX_TIM4_Init+0xec>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0xFFFF;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000afa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b0c:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b0e:	f002 f8a7 	bl	8002c60 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000b18:	f7ff feae 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b26:	4619      	mov	r1, r3
 8000b28:	481c      	ldr	r0, [pc, #112]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b2a:	f002 fae5 	bl	80030f8 <HAL_TIM_ConfigClockSource>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b34:	f7ff fea0 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b38:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b3a:	f002 f8bc 	bl	8002cb6 <HAL_TIM_OC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b44:	f7ff fe98 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	4619      	mov	r1, r3
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b58:	f002 fec8 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b62:	f7ff fe89 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b66:	2330      	movs	r3, #48	; 0x30
 8000b68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2204      	movs	r2, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b7e:	f002 fa5b 	bl	8003038 <HAL_TIM_OC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b88:	f7ff fe76 	bl	8000878 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM4_Init+0xe8>)
 8000b8e:	f000 f831 	bl	8000bf4 <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3738      	adds	r7, #56	; 0x38
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000224 	.word	0x20000224
 8000ba0:	40000800 	.word	0x40000800

08000ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d115      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	201e      	movs	r0, #30
 8000bd8:	f000 fa51 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bdc:	201e      	movs	r0, #30
 8000bde:	f000 fa6a 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40000800 	.word	0x40000800
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <HAL_TIM_MspPostInit+0x68>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d11d      	bne.n	8000c52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_TIM_MspPostInit+0x6c>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_TIM_MspPostInit+0x6c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = uC_Status_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(uC_Status_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_TIM_MspPostInit+0x70>)
 8000c4e:	f001 f9e1 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40000800 	.word	0x40000800
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART3_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	f002 feb4 	bl	8003a0c <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f7ff fde5 	bl	8000878 <Error_Handler>
  }

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000264 	.word	0x20000264
 8000cb8:	40004800 	.word	0x40004800

08000cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12c      	bne.n	8000d38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d34:	f001 f96e 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004800 	.word	0x40004800
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020c00 	.word	0x40020c00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d52:	e003      	b.n	8000d5c <LoopCopyDataInit>

08000d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d5a:	3104      	adds	r1, #4

08000d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d64:	d3f6      	bcc.n	8000d54 <CopyDataInit>
  ldr  r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d68:	e002      	b.n	8000d70 <LoopFillZerobss>

08000d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d6c:	f842 3b04 	str.w	r3, [r2], #4

08000d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d74:	d3f9      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d76:	f7ff fe87 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f010 fc5d 	bl	8011638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fcd5 	bl	800072c <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d84:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d88:	08017738 	.word	0x08017738
  ldr  r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d90:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000d94:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000d98:	200069d4 	.word	0x200069d4

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94d 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f808 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fd58 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f965 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92d 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	200002a4 	.word	0x200002a4

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200002a4 	.word	0x200002a4

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_Delay+0x40>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff3e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff31 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010fc:	4baa      	ldr	r3, [pc, #680]	; (80013a8 <HAL_ETH_Init+0x2bc>)
 80010fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e185      	b.n	800141e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d106      	bne.n	800112c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f003 f97a 	bl	8004420 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b9e      	ldr	r3, [pc, #632]	; (80013ac <HAL_ETH_Init+0x2c0>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	4a9d      	ldr	r2, [pc, #628]	; (80013ac <HAL_ETH_Init+0x2c0>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <HAL_ETH_Init+0x2c0>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001148:	4b99      	ldr	r3, [pc, #612]	; (80013b0 <HAL_ETH_Init+0x2c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a98      	ldr	r2, [pc, #608]	; (80013b0 <HAL_ETH_Init+0x2c4>)
 800114e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001152:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001154:	4b96      	ldr	r3, [pc, #600]	; (80013b0 <HAL_ETH_Init+0x2c4>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4994      	ldr	r1, [pc, #592]	; (80013b0 <HAL_ETH_Init+0x2c4>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001178:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800117a:	f7ff fe77 	bl	8000e6c <HAL_GetTick>
 800117e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001180:	e011      	b.n	80011a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001182:	f7ff fe73 	bl	8000e6c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001190:	d909      	bls.n	80011a6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e13b      	b.n	800141e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e4      	bne.n	8001182 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f023 031c 	bic.w	r3, r3, #28
 80011c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011c8:	f001 fd16 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 80011cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4a78      	ldr	r2, [pc, #480]	; (80013b4 <HAL_ETH_Init+0x2c8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d908      	bls.n	80011e8 <HAL_ETH_Init+0xfc>
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <HAL_ETH_Init+0x2cc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d804      	bhi.n	80011e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e027      	b.n	8001238 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <HAL_ETH_Init+0x2cc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d908      	bls.n	8001202 <HAL_ETH_Init+0x116>
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_ETH_Init+0x2d0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d804      	bhi.n	8001202 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f043 030c 	orr.w	r3, r3, #12
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e01a      	b.n	8001238 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a6d      	ldr	r2, [pc, #436]	; (80013bc <HAL_ETH_Init+0x2d0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d903      	bls.n	8001212 <HAL_ETH_Init+0x126>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a6c      	ldr	r2, [pc, #432]	; (80013c0 <HAL_ETH_Init+0x2d4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d911      	bls.n	8001236 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4a6a      	ldr	r2, [pc, #424]	; (80013c0 <HAL_ETH_Init+0x2d4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d908      	bls.n	800122c <HAL_ETH_Init+0x140>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <HAL_ETH_Init+0x2d8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d804      	bhi.n	800122c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e005      	b.n	8001238 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e000      	b.n	8001238 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001236:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001240:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fb9a 	bl	8001980 <HAL_ETH_WritePHYRegister>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fc27 	bl	8001aac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0d9      	b.n	800141e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800126a:	20ff      	movs	r0, #255	; 0xff
 800126c:	f7ff fe0a 	bl	8000e84 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a7 	beq.w	80013c8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800127a:	f7ff fdf7 	bl	8000e6c <HAL_GetTick>
 800127e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	461a      	mov	r2, r3
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fb11 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800128e:	f7ff fded 	bl	8000e6c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d90f      	bls.n	80012c0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fc00 	bl	8001aac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0ae      	b.n	800141e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0da      	beq.n	8001280 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb55 	bl	8001980 <HAL_ETH_WritePHYRegister>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fbe2 	bl	8001aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012f0:	2301      	movs	r3, #1
 80012f2:	e094      	b.n	800141e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fdba 	bl	8000e6c <HAL_GetTick>
 80012f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	461a      	mov	r2, r3
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fad4 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001308:	f7ff fdb0 	bl	8000e6c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d90f      	bls.n	800133a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800131e:	6939      	ldr	r1, [r7, #16]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fbc3 	bl	8001aac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e071      	b.n	800141e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0da      	beq.n	80012fa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	461a      	mov	r2, r3
 800134a:	211f      	movs	r1, #31
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 faaf 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fba4 	bl	8001aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800136c:	2301      	movs	r3, #1
 800136e:	e056      	b.n	800141e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	e002      	b.n	800138a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e037      	b.n	800140c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e032      	b.n	800140c <HAL_ETH_Init+0x320>
 80013a6:	bf00      	nop
 80013a8:	03938700 	.word	0x03938700
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	01312cff 	.word	0x01312cff
 80013b8:	02160ebf 	.word	0x02160ebf
 80013bc:	039386ff 	.word	0x039386ff
 80013c0:	05f5e0ff 	.word	0x05f5e0ff
 80013c4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 facd 	bl	8001980 <HAL_ETH_WritePHYRegister>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fb5a 	bl	8001aac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e00c      	b.n	800141e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001404:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001408:	f7ff fd3c 	bl	8000e84 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fb4c 	bl	8001aac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop

08001428 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ETH_DMATxDescListInit+0x20>
 8001444:	2302      	movs	r3, #2
 8001446:	e052      	b.n	80014ee <HAL_ETH_DMATxDescListInit+0xc6>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e030      	b.n	80014c6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	015b      	lsls	r3, r3, #5
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	4413      	add	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001474:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d208      	bcs.n	80014ba <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	461a      	mov	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e002      	b.n	80014c0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3ca      	bcc.n	8001464 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d8:	3310      	adds	r3, #16
 80014da:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ETH_DMARxDescListInit+0x20>
 8001516:	2302      	movs	r3, #2
 8001518:	e056      	b.n	80015c8 <HAL_ETH_DMARxDescListInit+0xce>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e034      	b.n	80015a0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	015b      	lsls	r3, r3, #5
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	4413      	add	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001546:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800154e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	461a      	mov	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	429a      	cmp	r2, r3
 8001580:	d208      	bcs.n	8001594 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e002      	b.n	800159a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3c6      	bcc.n	8001536 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	330c      	adds	r3, #12
 80015b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ETH_TransmitFrame+0x24>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e0cd      	b.n	8001794 <HAL_ETH_TransmitFrame+0x1c0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800161e:	2301      	movs	r3, #1
 8001620:	e0b8      	b.n	8001794 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da09      	bge.n	8001640 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2212      	movs	r2, #18
 8001630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0a9      	b.n	8001794 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001646:	4293      	cmp	r3, r2
 8001648:	d915      	bls.n	8001676 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	4a54      	ldr	r2, [pc, #336]	; (80017a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0a9b      	lsrs	r3, r3, #10
 8001654:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800165a:	fba3 1302 	umull	r1, r3, r3, r2
 800165e:	0a9b      	lsrs	r3, r3, #10
 8001660:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e001      	b.n	800167a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001676:	2301      	movs	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d11c      	bne.n	80016ba <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800168e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800169a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016aa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b8:	e04b      	b.n	8001752 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	e044      	b.n	800174a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ce:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ee:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d116      	bne.n	8001728 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001708:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <HAL_ETH_TransmitFrame+0x1d0>)
 800170e:	fb02 f203 	mul.w	r2, r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800171a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001726:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001736:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3301      	adds	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	429a      	cmp	r2, r3
 8001750:	d3b6      	bcc.n	80016c0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175a:	3314      	adds	r3, #20
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	3314      	adds	r3, #20
 8001770:	2204      	movs	r2, #4
 8001772:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177c:	3304      	adds	r3, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	ac02b00b 	.word	0xac02b00b
 80017a4:	fffffa0c 	.word	0xfffffa0c

080017a8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ETH_GetReceivedFrame+0x1a>
 80017be:	2302      	movs	r3, #2
 80017c0:	e070      	b.n	80018a4 <HAL_ETH_GetReceivedFrame+0xfc>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db5a      	blt.n	8001892 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d030      	beq.n	800184c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d103      	bne.n	8001804 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001818:	3b04      	subs	r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e02b      	b.n	80018a4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	2b00      	cmp	r3, #0
 8001858:	d010      	beq.n	800187c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
 800187a:	e00a      	b.n	8001892 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	460b      	mov	r3, r1
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b82      	cmp	r3, #130	; 0x82
 80018d0:	d101      	bne.n	80018d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e050      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2282      	movs	r2, #130	; 0x82
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 031c 	and.w	r3, r3, #28
 80018ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8a1b      	ldrh	r3, [r3, #16]
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	019b      	lsls	r3, r3, #6
 8001900:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001922:	f7ff faa3 	bl	8000e6c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001928:	e015      	b.n	8001956 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800192a:	f7ff fa9f 	bl	8000e6c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d309      	bcc.n	800194e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e014      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e4      	bne.n	800192a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b42      	cmp	r3, #66	; 0x42
 80019a0:	d101      	bne.n	80019a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
 80019a4:	e04e      	b.n	8001a44 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2242      	movs	r2, #66	; 0x42
 80019aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	02db      	lsls	r3, r3, #11
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff fa36 	bl	8000e6c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a02:	e015      	b.n	8001a30 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a04:	f7ff fa32 	bl	8000e6c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d309      	bcc.n	8001a28 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e00d      	b.n	8001a44 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1e4      	bne.n	8001a04 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ETH_Start+0x16>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e01f      	b.n	8001aa2 <HAL_ETH_Start+0x56>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa1c 	bl	8001eb0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fa36 	bl	8001eea <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa80 	bl	8001f84 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa4d 	bl	8001f24 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa62 	bl	8001f54 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0b0      	sub	sp, #192	; 0xc0
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	663b      	str	r3, [r7, #96]	; 0x60
 8001af8:	e001      	b.n	8001afe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b02:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b18:	2340      	movs	r3, #64	; 0x40
 8001b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b84:	4bac      	ldr	r3, [pc, #688]	; (8001e38 <ETH_MACDMAConfig+0x38c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b90:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b94:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b98:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b9e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ba2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ba6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bb0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bb4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bb8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bbc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bc0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff f94f 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bf8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bfe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c04:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c0a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c10:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c14:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c1c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c1e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f92a 	bl	8000e84 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c38:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c42:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c4c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c5c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c60:	4013      	ands	r3, r2
 8001c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c6a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c70:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c76:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c7c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c82:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c88:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c9c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff f8eb 	bl	8000e84 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cb8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001cbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff f8d6 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cf4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d06:	2304      	movs	r3, #4
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	3318      	adds	r3, #24
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <ETH_MACDMAConfig+0x390>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d4a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d4e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d50:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d52:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d54:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d56:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d58:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d5a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d5c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d5e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d60:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d62:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d66:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d6a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	3318      	adds	r3, #24
 8001d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8e:	3318      	adds	r3, #24
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff f874 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da4:	3318      	adds	r3, #24
 8001da6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001daa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001db0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001db4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001db8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001dbc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dc2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dc6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff f84d 	bl	8000e84 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d10f      	bne.n	8001e20 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	331c      	adds	r3, #28
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1c:	331c      	adds	r3, #28
 8001e1e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	461a      	mov	r2, r3
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f809 	bl	8001e40 <ETH_MACAddressConfig>
}
 8001e2e:	bf00      	nop
 8001e30:	37c0      	adds	r7, #192	; 0xc0
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	ff20810f 	.word	0xff20810f
 8001e3c:	f8de3f23 	.word	0xf8de3f23

08001e40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3305      	adds	r3, #5
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	3204      	adds	r2, #4
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <ETH_MACAddressConfig+0x68>)
 8001e62:	4413      	add	r3, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	061a      	lsls	r2, r3, #24
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	4313      	orrs	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <ETH_MACAddressConfig+0x6c>)
 8001e92:	4413      	add	r3, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40028040 	.word	0x40028040
 8001eac:	40028044 	.word	0x40028044

08001eb0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f000 f87f 	bl	8001fd8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0204 	orr.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 f862 	bl	8001fd8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	3318      	adds	r3, #24
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	3318      	adds	r3, #24
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	3318      	adds	r3, #24
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0202 	orr.w	r2, r2, #2
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	3318      	adds	r3, #24
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	3318      	adds	r3, #24
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	3318      	adds	r3, #24
 8001faa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 f80c 	bl	8001fd8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	3318      	adds	r3, #24
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <ETH_Delay+0x34>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <ETH_Delay+0x38>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001ff4:	bf00      	nop
  } 
  while (Delay --);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <ETH_Delay+0x1c>
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000000 	.word	0x20000000
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e177      	b.n	8002320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8166 	bne.w	800231a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d00b      	beq.n	800206e <HAL_GPIO_Init+0x5a>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002062:	2b11      	cmp	r3, #17
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b12      	cmp	r3, #18
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0xfc>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d123      	bne.n	8002158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	08da      	lsrs	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3208      	adds	r2, #8
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80c0 	beq.w	800231a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b65      	ldr	r3, [pc, #404]	; (8002334 <HAL_GPIO_Init+0x320>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a64      	ldr	r2, [pc, #400]	; (8002334 <HAL_GPIO_Init+0x320>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_GPIO_Init+0x320>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_GPIO_Init+0x324>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_GPIO_Init+0x328>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d037      	beq.n	8002252 <HAL_GPIO_Init+0x23e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a56      	ldr	r2, [pc, #344]	; (8002340 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_GPIO_Init+0x23a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02b      	beq.n	800224a <HAL_GPIO_Init+0x236>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a54      	ldr	r2, [pc, #336]	; (8002348 <HAL_GPIO_Init+0x334>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d025      	beq.n	8002246 <HAL_GPIO_Init+0x232>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a53      	ldr	r2, [pc, #332]	; (800234c <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <HAL_GPIO_Init+0x22e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x22a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a51      	ldr	r2, [pc, #324]	; (8002354 <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x226>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x222>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x21e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x21a>
 800222a:	2309      	movs	r3, #9
 800222c:	e012      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800222e:	230a      	movs	r3, #10
 8002230:	e010      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002232:	2308      	movs	r3, #8
 8002234:	e00e      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002236:	2307      	movs	r3, #7
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800223a:	2306      	movs	r3, #6
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x240>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x240>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4934      	ldr	r1, [pc, #208]	; (8002338 <HAL_GPIO_Init+0x324>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002272:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_GPIO_Init+0x350>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002296:	4a33      	ldr	r2, [pc, #204]	; (8002364 <HAL_GPIO_Init+0x350>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_GPIO_Init+0x350>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c0:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_GPIO_Init+0x350>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_GPIO_Init+0x350>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_GPIO_Init+0x350>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_GPIO_Init+0x350>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a13      	ldr	r2, [pc, #76]	; (8002364 <HAL_GPIO_Init+0x350>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae84 	bls.w	8002030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3724      	adds	r7, #36	; 0x24
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40023800 	.word	0x40023800
 8002338:	40013800 	.word	0x40013800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020800 	.word	0x40020800
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40021000 	.word	0x40021000
 8002350:	40021400 	.word	0x40021400
 8002354:	40021800 	.word	0x40021800
 8002358:	40021c00 	.word	0x40021c00
 800235c:	40022000 	.word	0x40022000
 8002360:	40022400 	.word	0x40022400
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e25b      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ba:	4ba3      	ldr	r3, [pc, #652]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4ba0      	ldr	r3, [pc, #640]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b9d      	ldr	r3, [pc, #628]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b99      	ldr	r3, [pc, #612]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e236      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a8a      	ldr	r2, [pc, #552]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a87      	ldr	r2, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a80      	ldr	r2, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fd0a 	bl	8000e6c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fd06 	bl	8000e6c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1fb      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xc0>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fcf6 	bl	8000e6c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fcf2 	bl	8000e6c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1e7      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b62      	ldr	r3, [pc, #392]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1bb      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4952      	ldr	r1, [pc, #328]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e03a      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_RCC_OscConfig+0x2b0>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fcab 	bl	8000e6c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe fca7 	bl	8000e6c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e19c      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4940      	ldr	r1, [pc, #256]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0x2b0>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fc8a 	bl	8000e6c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe fc86 	bl	8000e6c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e17b      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d030      	beq.n	80025e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x2b4>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fc6a 	bl	8000e6c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe fc66 	bl	8000e6c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e15b      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x200>
 80025ba:	e015      	b.n	80025e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x2b4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc53 	bl	8000e6c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe fc4f 	bl	8000e6c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e144      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a0 	beq.w	8002736 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x2b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d121      	bne.n	8002676 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x2b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <HAL_RCC_OscConfig+0x2b8>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe fc15 	bl	8000e6c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	e011      	b.n	800266a <HAL_RCC_OscConfig+0x2ce>
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	42470000 	.word	0x42470000
 8002650:	42470e80 	.word	0x42470e80
 8002654:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002658:	f7fe fc08 	bl	8000e6c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0fd      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x4d4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x2f0>
 800267e:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a7c      	ldr	r2, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	e01c      	b.n	80026c6 <HAL_RCC_OscConfig+0x32a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x312>
 8002694:	4b77      	ldr	r3, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	4b74      	ldr	r3, [pc, #464]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a73      	ldr	r2, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0x32a>
 80026ae:	4b71      	ldr	r3, [pc, #452]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a70      	ldr	r2, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a6d      	ldr	r2, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe fbcd 	bl	8000e6c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fbc9 	bl	8000e6c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0bc      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ee      	beq.n	80026d6 <HAL_RCC_OscConfig+0x33a>
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fbb7 	bl	8000e6c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fbb3 	bl	8000e6c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0a6      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	4b56      	ldr	r3, [pc, #344]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a51      	ldr	r2, [pc, #324]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8092 	beq.w	8002864 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d05c      	beq.n	8002806 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d141      	bne.n	80027d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x4dc>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fb87 	bl	8000e6c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe fb83 	bl	8000e6c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e078      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	019b      	lsls	r3, r3, #6
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	4933      	ldr	r1, [pc, #204]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fb5c 	bl	8000e6c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fb58 	bl	8000e6c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e04d      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ca:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x41c>
 80027d6:	e045      	b.n	8002864 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x4dc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fb45 	bl	8000e6c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fb41 	bl	8000e6c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e036      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x44a>
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e029      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_RCC_OscConfig+0x4d8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	429a      	cmp	r2, r3
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d115      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800283a:	4013      	ands	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	4293      	cmp	r3, r2
 8002842:	d10d      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40007000 	.word	0x40007000
 8002874:	40023800 	.word	0x40023800
 8002878:	42470060 	.word	0x42470060

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7fe fa7e 	bl	8000e6c <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fe fa7a 	bl	8000e6c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4601      	mov	r1, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f9de 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08017548 	.word	0x08017548
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	2300      	movs	r3, #0
 8002a58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d007      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x32>
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x38>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80b4 	bne.w	8002bdc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b5e      	ldr	r3, [pc, #376]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a76:	60bb      	str	r3, [r7, #8]
       break;
 8002a78:	e0b3      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a7c:	60bb      	str	r3, [r7, #8]
      break;
 8002a7e:	e0b0      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8a:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04a      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	ea03 0501 	and.w	r5, r3, r1
 8002aac:	ea04 0602 	and.w	r6, r4, r2
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4632      	mov	r2, r6
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	f04f 0400 	mov.w	r4, #0
 8002abc:	0154      	lsls	r4, r2, #5
 8002abe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ac2:	014b      	lsls	r3, r1, #5
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	1b49      	subs	r1, r1, r5
 8002aca:	eb62 0206 	sbc.w	r2, r2, r6
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f04f 0400 	mov.w	r4, #0
 8002ad6:	0194      	lsls	r4, r2, #6
 8002ad8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002adc:	018b      	lsls	r3, r1, #6
 8002ade:	1a5b      	subs	r3, r3, r1
 8002ae0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	00e2      	lsls	r2, r4, #3
 8002aee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002af2:	00d9      	lsls	r1, r3, #3
 8002af4:	460b      	mov	r3, r1
 8002af6:	4614      	mov	r4, r2
 8002af8:	195b      	adds	r3, r3, r5
 8002afa:	eb44 0406 	adc.w	r4, r4, r6
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	0262      	lsls	r2, r4, #9
 8002b08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b0c:	0259      	lsls	r1, r3, #9
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4614      	mov	r4, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	4621      	mov	r1, r4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f7fd fbb6 	bl	8000290 <__aeabi_uldivmod>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e049      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	f04f 0400 	mov.w	r4, #0
 8002b36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	ea03 0501 	and.w	r5, r3, r1
 8002b42:	ea04 0602 	and.w	r6, r4, r2
 8002b46:	4629      	mov	r1, r5
 8002b48:	4632      	mov	r2, r6
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	0154      	lsls	r4, r2, #5
 8002b54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b58:	014b      	lsls	r3, r1, #5
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	1b49      	subs	r1, r1, r5
 8002b60:	eb62 0206 	sbc.w	r2, r2, r6
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	f04f 0400 	mov.w	r4, #0
 8002b6c:	0194      	lsls	r4, r2, #6
 8002b6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	1a5b      	subs	r3, r3, r1
 8002b76:	eb64 0402 	sbc.w	r4, r4, r2
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b88:	00d9      	lsls	r1, r3, #3
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	195b      	adds	r3, r3, r5
 8002b90:	eb44 0406 	adc.w	r4, r4, r6
 8002b94:	f04f 0100 	mov.w	r1, #0
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	02a2      	lsls	r2, r4, #10
 8002b9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ba2:	0299      	lsls	r1, r3, #10
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	4621      	mov	r1, r4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f04f 0400 	mov.w	r4, #0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	f7fd fb6b 	bl	8000290 <__aeabi_uldivmod>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bde:	60bb      	str	r3, [r7, #8]
      break;
 8002be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be2:	68bb      	ldr	r3, [r7, #8]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4601      	mov	r1, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08017558 	.word	0x08017558

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffdc 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c40:	4601      	mov	r1, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08017558 	.word	0x08017558

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e01d      	b.n	8002cae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd ff8c 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fb14 	bl	80032cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01d      	b.n	8002d04 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f815 	bl	8002d0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f000 fae9 	bl	80032cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d841      	bhi.n	8002db4 <HAL_TIM_OC_Start_IT+0x94>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_TIM_OC_Start_IT+0x18>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002db5 	.word	0x08002db5
 8002d40:	08002db5 	.word	0x08002db5
 8002d44:	08002db5 	.word	0x08002db5
 8002d48:	08002d7f 	.word	0x08002d7f
 8002d4c:	08002db5 	.word	0x08002db5
 8002d50:	08002db5 	.word	0x08002db5
 8002d54:	08002db5 	.word	0x08002db5
 8002d58:	08002d91 	.word	0x08002d91
 8002d5c:	08002db5 	.word	0x08002db5
 8002d60:	08002db5 	.word	0x08002db5
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002da3 	.word	0x08002da3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0202 	orr.w	r2, r2, #2
 8002d7a:	60da      	str	r2, [r3, #12]
      break;
 8002d7c:	e01b      	b.n	8002db6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0204 	orr.w	r2, r2, #4
 8002d8c:	60da      	str	r2, [r3, #12]
      break;
 8002d8e:	e012      	b.n	8002db6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0208 	orr.w	r2, r2, #8
 8002d9e:	60da      	str	r2, [r3, #12]
      break;
 8002da0:	e009      	b.n	8002db6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0210 	orr.w	r2, r2, #16
 8002db0:	60da      	str	r2, [r3, #12]
      break;
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8002db4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fd6e 	bl	80038a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_TIM_OC_Start_IT+0x100>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_OC_Start_IT+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_TIM_OC_Start_IT+0x104>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_OC_Start_IT+0xbc>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_TIM_OC_Start_IT+0xbe>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d007      	beq.n	8002e14 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0202 	mvn.w	r2, #2
 8002e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa0f 	bl	800328e <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa01 	bl	800327a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa12 	bl	80032a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d122      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0204 	mvn.w	r2, #4
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f9e5 	bl	800328e <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9d7 	bl	800327a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f9e8 	bl	80032a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d122      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d11b      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0208 	mvn.w	r2, #8
 8002efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2204      	movs	r2, #4
 8002f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9bb 	bl	800328e <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f9ad 	bl	800327a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f9be 	bl	80032a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d122      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d11b      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0210 	mvn.w	r2, #16
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2208      	movs	r2, #8
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f991 	bl	800328e <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f983 	bl	800327a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f994 	bl	80032a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0201 	mvn.w	r2, #1
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f95d 	bl	8003266 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fd10 	bl	80039f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f959 	bl	80032b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b20      	cmp	r3, #32
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b20      	cmp	r3, #32
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0220 	mvn.w	r2, #32
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fcda 	bl	80039e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_TIM_OC_ConfigChannel+0x1a>
 800304e:	2302      	movs	r3, #2
 8003050:	e04e      	b.n	80030f0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d839      	bhi.n	80030dc <HAL_TIM_OC_ConfigChannel+0xa4>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_OC_ConfigChannel+0x38>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030dd 	.word	0x080030dd
 8003078:	080030dd 	.word	0x080030dd
 800307c:	080030dd 	.word	0x080030dd
 8003080:	080030b3 	.word	0x080030b3
 8003084:	080030dd 	.word	0x080030dd
 8003088:	080030dd 	.word	0x080030dd
 800308c:	080030dd 	.word	0x080030dd
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030dd 	.word	0x080030dd
 8003098:	080030dd 	.word	0x080030dd
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030cf 	.word	0x080030cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f9ae 	bl	800340c <TIM_OC1_SetConfig>
      break;
 80030b0:	e015      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa17 	bl	80034ec <TIM_OC2_SetConfig>
      break;
 80030be:	e00e      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa86 	bl	80035d8 <TIM_OC3_SetConfig>
      break;
 80030cc:	e007      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 faf3 	bl	80036c0 <TIM_OC4_SetConfig>
      break;
 80030da:	e000      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80030dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIM_ConfigClockSource+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e0a6      	b.n	800325e <HAL_TIM_ConfigClockSource+0x166>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800312e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003136:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d067      	beq.n	8003218 <HAL_TIM_ConfigClockSource+0x120>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d80b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x6c>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d073      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x140>
 8003150:	2b10      	cmp	r3, #16
 8003152:	d802      	bhi.n	800315a <HAL_TIM_ConfigClockSource+0x62>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d06f      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003158:	e078      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800315a:	2b20      	cmp	r3, #32
 800315c:	d06c      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x140>
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d06a      	beq.n	8003238 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003162:	e073      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003164:	2b70      	cmp	r3, #112	; 0x70
 8003166:	d00d      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0x8c>
 8003168:	2b70      	cmp	r3, #112	; 0x70
 800316a:	d804      	bhi.n	8003176 <HAL_TIM_ConfigClockSource+0x7e>
 800316c:	2b50      	cmp	r3, #80	; 0x50
 800316e:	d033      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0xe0>
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d041      	beq.n	80031f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003174:	e06a      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	d066      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x152>
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003180:	d017      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003182:	e063      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f000 fb64 	bl	8003860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]
      break;
 80031b0:	e04c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f000 fb4d 	bl	8003860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d4:	609a      	str	r2, [r3, #8]
      break;
 80031d6:	e039      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	461a      	mov	r2, r3
 80031e6:	f000 fac1 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2150      	movs	r1, #80	; 0x50
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fb1a 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 80031f6:	e029      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	461a      	mov	r2, r3
 8003206:	f000 fae0 	bl	80037ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2160      	movs	r1, #96	; 0x60
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fb0a 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003216:	e019      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	461a      	mov	r2, r3
 8003226:	f000 faa1 	bl	800376c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fafa 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003236:	e009      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 faf1 	bl	800382a <TIM_ITRx_SetConfig>
      break;
 8003248:	e000      	b.n	800324c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800324a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3d      	ldr	r2, [pc, #244]	; (80033e4 <TIM_Base_SetConfig+0x118>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <TIM_Base_SetConfig+0x120>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d027      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <TIM_Base_SetConfig+0x118>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d023      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <TIM_Base_SetConfig+0x120>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d017      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a28      	ldr	r2, [pc, #160]	; (80033f4 <TIM_Base_SetConfig+0x128>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <TIM_Base_SetConfig+0x12c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00f      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a26      	ldr	r2, [pc, #152]	; (80033fc <TIM_Base_SetConfig+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a25      	ldr	r2, [pc, #148]	; (8003400 <TIM_Base_SetConfig+0x134>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <TIM_Base_SetConfig+0x138>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <TIM_Base_SetConfig+0x13c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0xf8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800
 8003400:	40001800 	.word	0x40001800
 8003404:	40001c00 	.word	0x40001c00
 8003408:	40002000 	.word	0x40002000

0800340c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 0302 	bic.w	r3, r3, #2
 8003454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <TIM_OC1_SetConfig+0xd8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_OC1_SetConfig+0x64>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <TIM_OC1_SetConfig+0xdc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10c      	bne.n	800348a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0308 	bic.w	r3, r3, #8
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <TIM_OC1_SetConfig+0xd8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_OC1_SetConfig+0x8e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <TIM_OC1_SetConfig+0xdc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d111      	bne.n	80034be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	621a      	str	r2, [r3, #32]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40010400 	.word	0x40010400

080034ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0210 	bic.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0320 	bic.w	r3, r3, #32
 8003536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <TIM_OC2_SetConfig+0xe4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_OC2_SetConfig+0x68>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <TIM_OC2_SetConfig+0xe8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d10d      	bne.n	8003570 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <TIM_OC2_SetConfig+0xe4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC2_SetConfig+0x94>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <TIM_OC2_SetConfig+0xe8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d113      	bne.n	80035a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40010400 	.word	0x40010400

080035d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <TIM_OC3_SetConfig+0xe0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC3_SetConfig+0x66>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <TIM_OC3_SetConfig+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10d      	bne.n	800365a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <TIM_OC3_SetConfig+0xe0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_OC3_SetConfig+0x92>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <TIM_OC3_SetConfig+0xe4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d113      	bne.n	8003692 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40010400 	.word	0x40010400

080036c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	031b      	lsls	r3, r3, #12
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <TIM_OC4_SetConfig+0xa4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC4_SetConfig+0x68>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <TIM_OC4_SetConfig+0xa8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d109      	bne.n	800373c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400

0800376c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 030a 	bic.w	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0210 	bic.w	r2, r3, #16
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 0307 	orr.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	021a      	lsls	r2, r3, #8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	401a      	ands	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e05a      	b.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d022      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d01d      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d018      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10c      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4313      	orrs	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40001800 	.word	0x40001800

080039e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e03f      	b.n	8003a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f942 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f90b 	bl	8003c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af02      	add	r7, sp, #8
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 8083 	bne.w	8003bce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_UART_Transmit+0x2e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e07b      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Transmit+0x40>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e074      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2221      	movs	r2, #33	; 0x21
 8003af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003afc:	f7fd f9b6 	bl	8000e6c <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b16:	e042      	b.n	8003b9e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d122      	bne.n	8003b76 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f84c 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e042      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	e017      	b.n	8003b9e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	e013      	b.n	8003b9e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f829 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e01f      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	60ba      	str	r2, [r7, #8]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1b7      	bne.n	8003b18 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f810 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e006      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	e02c      	b.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d028      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf8:	f7fd f938 	bl	8000e6c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d21d      	bcs.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d0c3      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cae:	f023 030c 	bic.w	r3, r3, #12
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cda:	f040 818b 	bne.w	8003ff4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4ac1      	ldr	r2, [pc, #772]	; (8003fe8 <UART_SetConfig+0x37c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d005      	beq.n	8003cf4 <UART_SetConfig+0x88>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4abf      	ldr	r2, [pc, #764]	; (8003fec <UART_SetConfig+0x380>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	f040 80bd 	bne.w	8003e6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7fe ffa0 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003cf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	f04f 0600 	mov.w	r6, #0
 8003d02:	46a8      	mov	r8, r5
 8003d04:	46b1      	mov	r9, r6
 8003d06:	eb18 0308 	adds.w	r3, r8, r8
 8003d0a:	eb49 0409 	adc.w	r4, r9, r9
 8003d0e:	4698      	mov	r8, r3
 8003d10:	46a1      	mov	r9, r4
 8003d12:	eb18 0805 	adds.w	r8, r8, r5
 8003d16:	eb49 0906 	adc.w	r9, r9, r6
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d2e:	4688      	mov	r8, r1
 8003d30:	4691      	mov	r9, r2
 8003d32:	eb18 0005 	adds.w	r0, r8, r5
 8003d36:	eb49 0106 	adc.w	r1, r9, r6
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	461d      	mov	r5, r3
 8003d40:	f04f 0600 	mov.w	r6, #0
 8003d44:	196b      	adds	r3, r5, r5
 8003d46:	eb46 0406 	adc.w	r4, r6, r6
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	f7fc fa9f 	bl	8000290 <__aeabi_uldivmod>
 8003d52:	4603      	mov	r3, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	461a      	mov	r2, r3
 8003d58:	4ba5      	ldr	r3, [pc, #660]	; (8003ff0 <UART_SetConfig+0x384>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	461d      	mov	r5, r3
 8003d68:	f04f 0600 	mov.w	r6, #0
 8003d6c:	46a9      	mov	r9, r5
 8003d6e:	46b2      	mov	sl, r6
 8003d70:	eb19 0309 	adds.w	r3, r9, r9
 8003d74:	eb4a 040a 	adc.w	r4, sl, sl
 8003d78:	4699      	mov	r9, r3
 8003d7a:	46a2      	mov	sl, r4
 8003d7c:	eb19 0905 	adds.w	r9, r9, r5
 8003d80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d98:	4689      	mov	r9, r1
 8003d9a:	4692      	mov	sl, r2
 8003d9c:	eb19 0005 	adds.w	r0, r9, r5
 8003da0:	eb4a 0106 	adc.w	r1, sl, r6
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461d      	mov	r5, r3
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	196b      	adds	r3, r5, r5
 8003db0:	eb46 0406 	adc.w	r4, r6, r6
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	f7fc fa6a 	bl	8000290 <__aeabi_uldivmod>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <UART_SetConfig+0x384>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	2164      	movs	r1, #100	; 0x64
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	3332      	adds	r3, #50	; 0x32
 8003dd6:	4a86      	ldr	r2, [pc, #536]	; (8003ff0 <UART_SetConfig+0x384>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de4:	4498      	add	r8, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	461d      	mov	r5, r3
 8003dea:	f04f 0600 	mov.w	r6, #0
 8003dee:	46a9      	mov	r9, r5
 8003df0:	46b2      	mov	sl, r6
 8003df2:	eb19 0309 	adds.w	r3, r9, r9
 8003df6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dfa:	4699      	mov	r9, r3
 8003dfc:	46a2      	mov	sl, r4
 8003dfe:	eb19 0905 	adds.w	r9, r9, r5
 8003e02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e1a:	4689      	mov	r9, r1
 8003e1c:	4692      	mov	sl, r2
 8003e1e:	eb19 0005 	adds.w	r0, r9, r5
 8003e22:	eb4a 0106 	adc.w	r1, sl, r6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	f04f 0600 	mov.w	r6, #0
 8003e30:	196b      	adds	r3, r5, r5
 8003e32:	eb46 0406 	adc.w	r4, r6, r6
 8003e36:	461a      	mov	r2, r3
 8003e38:	4623      	mov	r3, r4
 8003e3a:	f7fc fa29 	bl	8000290 <__aeabi_uldivmod>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <UART_SetConfig+0x384>)
 8003e46:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2164      	movs	r1, #100	; 0x64
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	3332      	adds	r3, #50	; 0x32
 8003e58:	4a65      	ldr	r2, [pc, #404]	; (8003ff0 <UART_SetConfig+0x384>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 0207 	and.w	r2, r3, #7
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4442      	add	r2, r8
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e26f      	b.n	800434e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e6e:	f7fe fecf 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	461d      	mov	r5, r3
 8003e78:	f04f 0600 	mov.w	r6, #0
 8003e7c:	46a8      	mov	r8, r5
 8003e7e:	46b1      	mov	r9, r6
 8003e80:	eb18 0308 	adds.w	r3, r8, r8
 8003e84:	eb49 0409 	adc.w	r4, r9, r9
 8003e88:	4698      	mov	r8, r3
 8003e8a:	46a1      	mov	r9, r4
 8003e8c:	eb18 0805 	adds.w	r8, r8, r5
 8003e90:	eb49 0906 	adc.w	r9, r9, r6
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ea8:	4688      	mov	r8, r1
 8003eaa:	4691      	mov	r9, r2
 8003eac:	eb18 0005 	adds.w	r0, r8, r5
 8003eb0:	eb49 0106 	adc.w	r1, r9, r6
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	461d      	mov	r5, r3
 8003eba:	f04f 0600 	mov.w	r6, #0
 8003ebe:	196b      	adds	r3, r5, r5
 8003ec0:	eb46 0406 	adc.w	r4, r6, r6
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	f7fc f9e2 	bl	8000290 <__aeabi_uldivmod>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <UART_SetConfig+0x384>)
 8003ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	461d      	mov	r5, r3
 8003ee2:	f04f 0600 	mov.w	r6, #0
 8003ee6:	46a9      	mov	r9, r5
 8003ee8:	46b2      	mov	sl, r6
 8003eea:	eb19 0309 	adds.w	r3, r9, r9
 8003eee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	eb19 0905 	adds.w	r9, r9, r5
 8003efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f12:	4689      	mov	r9, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	eb19 0005 	adds.w	r0, r9, r5
 8003f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	461d      	mov	r5, r3
 8003f24:	f04f 0600 	mov.w	r6, #0
 8003f28:	196b      	adds	r3, r5, r5
 8003f2a:	eb46 0406 	adc.w	r4, r6, r6
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	f7fc f9ad 	bl	8000290 <__aeabi_uldivmod>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <UART_SetConfig+0x384>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <UART_SetConfig+0x384>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f5e:	4498      	add	r8, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	461d      	mov	r5, r3
 8003f64:	f04f 0600 	mov.w	r6, #0
 8003f68:	46a9      	mov	r9, r5
 8003f6a:	46b2      	mov	sl, r6
 8003f6c:	eb19 0309 	adds.w	r3, r9, r9
 8003f70:	eb4a 040a 	adc.w	r4, sl, sl
 8003f74:	4699      	mov	r9, r3
 8003f76:	46a2      	mov	sl, r4
 8003f78:	eb19 0905 	adds.w	r9, r9, r5
 8003f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f94:	4689      	mov	r9, r1
 8003f96:	4692      	mov	sl, r2
 8003f98:	eb19 0005 	adds.w	r0, r9, r5
 8003f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	461d      	mov	r5, r3
 8003fa6:	f04f 0600 	mov.w	r6, #0
 8003faa:	196b      	adds	r3, r5, r5
 8003fac:	eb46 0406 	adc.w	r4, r6, r6
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	f7fc f96c 	bl	8000290 <__aeabi_uldivmod>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <UART_SetConfig+0x384>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <UART_SetConfig+0x384>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4442      	add	r2, r8
 8003fe4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003fe6:	e1b2      	b.n	800434e <UART_SetConfig+0x6e2>
 8003fe8:	40011000 	.word	0x40011000
 8003fec:	40011400 	.word	0x40011400
 8003ff0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4ad7      	ldr	r2, [pc, #860]	; (8004358 <UART_SetConfig+0x6ec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d005      	beq.n	800400a <UART_SetConfig+0x39e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4ad6      	ldr	r2, [pc, #856]	; (800435c <UART_SetConfig+0x6f0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f040 80d1 	bne.w	80041ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800400a:	f7fe fe15 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 800400e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	469a      	mov	sl, r3
 8004014:	f04f 0b00 	mov.w	fp, #0
 8004018:	46d0      	mov	r8, sl
 800401a:	46d9      	mov	r9, fp
 800401c:	eb18 0308 	adds.w	r3, r8, r8
 8004020:	eb49 0409 	adc.w	r4, r9, r9
 8004024:	4698      	mov	r8, r3
 8004026:	46a1      	mov	r9, r4
 8004028:	eb18 080a 	adds.w	r8, r8, sl
 800402c:	eb49 090b 	adc.w	r9, r9, fp
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800403c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004040:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004044:	4688      	mov	r8, r1
 8004046:	4691      	mov	r9, r2
 8004048:	eb1a 0508 	adds.w	r5, sl, r8
 800404c:	eb4b 0609 	adc.w	r6, fp, r9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4619      	mov	r1, r3
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	f04f 0400 	mov.w	r4, #0
 8004062:	0094      	lsls	r4, r2, #2
 8004064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	4628      	mov	r0, r5
 8004070:	4631      	mov	r1, r6
 8004072:	f7fc f90d 	bl	8000290 <__aeabi_uldivmod>
 8004076:	4603      	mov	r3, r0
 8004078:	460c      	mov	r4, r1
 800407a:	461a      	mov	r2, r3
 800407c:	4bb8      	ldr	r3, [pc, #736]	; (8004360 <UART_SetConfig+0x6f4>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	469b      	mov	fp, r3
 800408c:	f04f 0c00 	mov.w	ip, #0
 8004090:	46d9      	mov	r9, fp
 8004092:	46e2      	mov	sl, ip
 8004094:	eb19 0309 	adds.w	r3, r9, r9
 8004098:	eb4a 040a 	adc.w	r4, sl, sl
 800409c:	4699      	mov	r9, r3
 800409e:	46a2      	mov	sl, r4
 80040a0:	eb19 090b 	adds.w	r9, r9, fp
 80040a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040bc:	4689      	mov	r9, r1
 80040be:	4692      	mov	sl, r2
 80040c0:	eb1b 0509 	adds.w	r5, fp, r9
 80040c4:	eb4c 060a 	adc.w	r6, ip, sl
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	f04f 0400 	mov.w	r4, #0
 80040da:	0094      	lsls	r4, r2, #2
 80040dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040e0:	008b      	lsls	r3, r1, #2
 80040e2:	461a      	mov	r2, r3
 80040e4:	4623      	mov	r3, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	4631      	mov	r1, r6
 80040ea:	f7fc f8d1 	bl	8000290 <__aeabi_uldivmod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b9a      	ldr	r3, [pc, #616]	; (8004360 <UART_SetConfig+0x6f4>)
 80040f6:	fba3 1302 	umull	r1, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2164      	movs	r1, #100	; 0x64
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	3332      	adds	r3, #50	; 0x32
 8004108:	4a95      	ldr	r2, [pc, #596]	; (8004360 <UART_SetConfig+0x6f4>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004114:	4498      	add	r8, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	469b      	mov	fp, r3
 800411a:	f04f 0c00 	mov.w	ip, #0
 800411e:	46d9      	mov	r9, fp
 8004120:	46e2      	mov	sl, ip
 8004122:	eb19 0309 	adds.w	r3, r9, r9
 8004126:	eb4a 040a 	adc.w	r4, sl, sl
 800412a:	4699      	mov	r9, r3
 800412c:	46a2      	mov	sl, r4
 800412e:	eb19 090b 	adds.w	r9, r9, fp
 8004132:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004142:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004146:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800414a:	4689      	mov	r9, r1
 800414c:	4692      	mov	sl, r2
 800414e:	eb1b 0509 	adds.w	r5, fp, r9
 8004152:	eb4c 060a 	adc.w	r6, ip, sl
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4619      	mov	r1, r3
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	f04f 0400 	mov.w	r4, #0
 8004168:	0094      	lsls	r4, r2, #2
 800416a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800416e:	008b      	lsls	r3, r1, #2
 8004170:	461a      	mov	r2, r3
 8004172:	4623      	mov	r3, r4
 8004174:	4628      	mov	r0, r5
 8004176:	4631      	mov	r1, r6
 8004178:	f7fc f88a 	bl	8000290 <__aeabi_uldivmod>
 800417c:	4603      	mov	r3, r0
 800417e:	460c      	mov	r4, r1
 8004180:	461a      	mov	r2, r3
 8004182:	4b77      	ldr	r3, [pc, #476]	; (8004360 <UART_SetConfig+0x6f4>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a72      	ldr	r2, [pc, #456]	; (8004360 <UART_SetConfig+0x6f4>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4442      	add	r2, r8
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	e0d0      	b.n	800434e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ac:	f7fe fd30 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 80041b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	469a      	mov	sl, r3
 80041b6:	f04f 0b00 	mov.w	fp, #0
 80041ba:	46d0      	mov	r8, sl
 80041bc:	46d9      	mov	r9, fp
 80041be:	eb18 0308 	adds.w	r3, r8, r8
 80041c2:	eb49 0409 	adc.w	r4, r9, r9
 80041c6:	4698      	mov	r8, r3
 80041c8:	46a1      	mov	r9, r4
 80041ca:	eb18 080a 	adds.w	r8, r8, sl
 80041ce:	eb49 090b 	adc.w	r9, r9, fp
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041e6:	4688      	mov	r8, r1
 80041e8:	4691      	mov	r9, r2
 80041ea:	eb1a 0508 	adds.w	r5, sl, r8
 80041ee:	eb4b 0609 	adc.w	r6, fp, r9
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	f04f 0400 	mov.w	r4, #0
 8004204:	0094      	lsls	r4, r2, #2
 8004206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800420a:	008b      	lsls	r3, r1, #2
 800420c:	461a      	mov	r2, r3
 800420e:	4623      	mov	r3, r4
 8004210:	4628      	mov	r0, r5
 8004212:	4631      	mov	r1, r6
 8004214:	f7fc f83c 	bl	8000290 <__aeabi_uldivmod>
 8004218:	4603      	mov	r3, r0
 800421a:	460c      	mov	r4, r1
 800421c:	461a      	mov	r2, r3
 800421e:	4b50      	ldr	r3, [pc, #320]	; (8004360 <UART_SetConfig+0x6f4>)
 8004220:	fba3 2302 	umull	r2, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	469b      	mov	fp, r3
 800422e:	f04f 0c00 	mov.w	ip, #0
 8004232:	46d9      	mov	r9, fp
 8004234:	46e2      	mov	sl, ip
 8004236:	eb19 0309 	adds.w	r3, r9, r9
 800423a:	eb4a 040a 	adc.w	r4, sl, sl
 800423e:	4699      	mov	r9, r3
 8004240:	46a2      	mov	sl, r4
 8004242:	eb19 090b 	adds.w	r9, r9, fp
 8004246:	eb4a 0a0c 	adc.w	sl, sl, ip
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004256:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800425a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800425e:	4689      	mov	r9, r1
 8004260:	4692      	mov	sl, r2
 8004262:	eb1b 0509 	adds.w	r5, fp, r9
 8004266:	eb4c 060a 	adc.w	r6, ip, sl
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4619      	mov	r1, r3
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	0094      	lsls	r4, r2, #2
 800427e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	461a      	mov	r2, r3
 8004286:	4623      	mov	r3, r4
 8004288:	4628      	mov	r0, r5
 800428a:	4631      	mov	r1, r6
 800428c:	f7fc f800 	bl	8000290 <__aeabi_uldivmod>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	461a      	mov	r2, r3
 8004296:	4b32      	ldr	r3, [pc, #200]	; (8004360 <UART_SetConfig+0x6f4>)
 8004298:	fba3 1302 	umull	r1, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	3332      	adds	r3, #50	; 0x32
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <UART_SetConfig+0x6f4>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b6:	4498      	add	r8, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	469b      	mov	fp, r3
 80042bc:	f04f 0c00 	mov.w	ip, #0
 80042c0:	46d9      	mov	r9, fp
 80042c2:	46e2      	mov	sl, ip
 80042c4:	eb19 0309 	adds.w	r3, r9, r9
 80042c8:	eb4a 040a 	adc.w	r4, sl, sl
 80042cc:	4699      	mov	r9, r3
 80042ce:	46a2      	mov	sl, r4
 80042d0:	eb19 090b 	adds.w	r9, r9, fp
 80042d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ec:	4689      	mov	r9, r1
 80042ee:	4692      	mov	sl, r2
 80042f0:	eb1b 0509 	adds.w	r5, fp, r9
 80042f4:	eb4c 060a 	adc.w	r6, ip, sl
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	0094      	lsls	r4, r2, #2
 800430c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004310:	008b      	lsls	r3, r1, #2
 8004312:	461a      	mov	r2, r3
 8004314:	4623      	mov	r3, r4
 8004316:	4628      	mov	r0, r5
 8004318:	4631      	mov	r1, r6
 800431a:	f7fb ffb9 	bl	8000290 <__aeabi_uldivmod>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	461a      	mov	r2, r3
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <UART_SetConfig+0x6f4>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2164      	movs	r1, #100	; 0x64
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <UART_SetConfig+0x6f4>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4442      	add	r2, r8
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	e7ff      	b.n	800434e <UART_SetConfig+0x6e2>
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	40011000 	.word	0x40011000
 800435c:	40011400 	.word	0x40011400
 8004360:	51eb851f 	.word	0x51eb851f

08004364 <__io_putchar>:
/* USER CODE BEGIN 2 */
//redirect printf to Uart;


int __io_putchar(int ch)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800436c:	1d39      	adds	r1, r7, #4
 800436e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004372:	2201      	movs	r2, #1
 8004374:	4803      	ldr	r0, [pc, #12]	; (8004384 <__io_putchar+0x20>)
 8004376:	f7ff fb96 	bl	8003aa6 <HAL_UART_Transmit>

	  return ch;
 800437a:	687b      	ldr	r3, [r7, #4]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000264 	.word	0x20000264

08004388 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800438e:	f000 fb8e 	bl	8004aae <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <MX_LWIP_Init+0x68>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004398:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <MX_LWIP_Init+0x6c>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800439e:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <MX_LWIP_Init+0x70>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <MX_LWIP_Init+0x74>)
 80043a6:	9302      	str	r3, [sp, #8]
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <MX_LWIP_Init+0x78>)
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <MX_LWIP_Init+0x70>)
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <MX_LWIP_Init+0x6c>)
 80043b4:	490e      	ldr	r1, [pc, #56]	; (80043f0 <MX_LWIP_Init+0x68>)
 80043b6:	4813      	ldr	r0, [pc, #76]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043b8:	f001 f848 	bl	800544c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80043bc:	4811      	ldr	r0, [pc, #68]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043be:	f001 fae7 	bl	8005990 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043d4:	480b      	ldr	r0, [pc, #44]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043d6:	f001 faff 	bl	80059d8 <netif_set_up>
 80043da:	e002      	b.n	80043e2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043dc:	4809      	ldr	r0, [pc, #36]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043de:	f001 fb6f 	bl	8005ac0 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80043e2:	4808      	ldr	r0, [pc, #32]	; (8004404 <MX_LWIP_Init+0x7c>)
 80043e4:	f008 fe1a 	bl	800d01c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200002e0 	.word	0x200002e0
 80043f4:	200002e4 	.word	0x200002e4
 80043f8:	200002e8 	.word	0x200002e8
 80043fc:	080113b9 	.word	0x080113b9
 8004400:	080049e9 	.word	0x080049e9
 8004404:	200002a8 	.word	0x200002a8

08004408 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */

/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800440c:	4803      	ldr	r0, [pc, #12]	; (800441c <MX_LWIP_Process+0x14>)
 800440e:	f000 fac5 	bl	800499c <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */

/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8004412:	f007 fcb5 	bl	800bd80 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200002a8 	.word	0x200002a8

08004420 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08e      	sub	sp, #56	; 0x38
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a55      	ldr	r2, [pc, #340]	; (8004594 <HAL_ETH_MspInit+0x174>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f040 80a4 	bne.w	800458c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_ETH_MspInit+0x178>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4a52      	ldr	r2, [pc, #328]	; (8004598 <HAL_ETH_MspInit+0x178>)
 800444e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004452:	6313      	str	r3, [r2, #48]	; 0x30
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_ETH_MspInit+0x178>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <HAL_ETH_MspInit+0x178>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <HAL_ETH_MspInit+0x178>)
 800446a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800446e:	6313      	str	r3, [r2, #48]	; 0x30
 8004470:	4b49      	ldr	r3, [pc, #292]	; (8004598 <HAL_ETH_MspInit+0x178>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	4b45      	ldr	r3, [pc, #276]	; (8004598 <HAL_ETH_MspInit+0x178>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	4a44      	ldr	r2, [pc, #272]	; (8004598 <HAL_ETH_MspInit+0x178>)
 8004486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800448a:	6313      	str	r3, [r2, #48]	; 0x30
 800448c:	4b42      	ldr	r3, [pc, #264]	; (8004598 <HAL_ETH_MspInit+0x178>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <HAL_ETH_MspInit+0x178>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	4a3d      	ldr	r2, [pc, #244]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	6313      	str	r3, [r2, #48]	; 0x30
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4a36      	ldr	r2, [pc, #216]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6313      	str	r3, [r2, #48]	; 0x30
 80044c4:	4b34      	ldr	r3, [pc, #208]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a2f      	ldr	r2, [pc, #188]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044da:	f043 0302 	orr.w	r3, r3, #2
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a28      	ldr	r2, [pc, #160]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_ETH_MspInit+0x178>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004508:	2332      	movs	r3, #50	; 0x32
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004514:	2303      	movs	r3, #3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004518:	230b      	movs	r3, #11
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004520:	4619      	mov	r1, r3
 8004522:	481e      	ldr	r0, [pc, #120]	; (800459c <HAL_ETH_MspInit+0x17c>)
 8004524:	f7fd fd76 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004528:	2386      	movs	r3, #134	; 0x86
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004538:	230b      	movs	r3, #11
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004540:	4619      	mov	r1, r3
 8004542:	4817      	ldr	r0, [pc, #92]	; (80045a0 <HAL_ETH_MspInit+0x180>)
 8004544:	f7fd fd66 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800455a:	230b      	movs	r3, #11
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800455e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004562:	4619      	mov	r1, r3
 8004564:	480f      	ldr	r0, [pc, #60]	; (80045a4 <HAL_ETH_MspInit+0x184>)
 8004566:	f7fd fd55 	bl	8002014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800456a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800457c:	230b      	movs	r3, #11
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004584:	4619      	mov	r1, r3
 8004586:	4808      	ldr	r0, [pc, #32]	; (80045a8 <HAL_ETH_MspInit+0x188>)
 8004588:	f7fd fd44 	bl	8002014 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800458c:	bf00      	nop
 800458e:	3738      	adds	r7, #56	; 0x38
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40028000 	.word	0x40028000
 8004598:	40023800 	.word	0x40023800
 800459c:	40020800 	.word	0x40020800
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40021800 	.word	0x40021800

080045ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80045b8:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <low_level_init+0x134>)
 80045ba:	4a4a      	ldr	r2, [pc, #296]	; (80046e4 <low_level_init+0x138>)
 80045bc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80045be:	4b48      	ldr	r3, [pc, #288]	; (80046e0 <low_level_init+0x134>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <low_level_init+0x134>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80045ca:	2300      	movs	r3, #0
 80045cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80045d2:	23e1      	movs	r3, #225	; 0xe1
 80045d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80045d6:	2300      	movs	r3, #0
 80045d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80045da:	2300      	movs	r3, #0
 80045dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80045de:	2300      	movs	r3, #0
 80045e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80045e2:	4a3f      	ldr	r2, [pc, #252]	; (80046e0 <low_level_init+0x134>)
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <low_level_init+0x134>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80045f0:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <low_level_init+0x134>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <low_level_init+0x134>)
 80045f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045fe:	4838      	ldr	r0, [pc, #224]	; (80046e0 <low_level_init+0x134>)
 8004600:	f7fc fd74 	bl	80010ec <HAL_ETH_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	b2da      	uxtb	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004620:	2304      	movs	r3, #4
 8004622:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <low_level_init+0x13c>)
 8004624:	4931      	ldr	r1, [pc, #196]	; (80046ec <low_level_init+0x140>)
 8004626:	482e      	ldr	r0, [pc, #184]	; (80046e0 <low_level_init+0x134>)
 8004628:	f7fc fefe 	bl	8001428 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800462c:	2304      	movs	r3, #4
 800462e:	4a30      	ldr	r2, [pc, #192]	; (80046f0 <low_level_init+0x144>)
 8004630:	4930      	ldr	r1, [pc, #192]	; (80046f4 <low_level_init+0x148>)
 8004632:	482b      	ldr	r0, [pc, #172]	; (80046e0 <low_level_init+0x134>)
 8004634:	f7fc ff61 	bl	80014fa <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2206      	movs	r2, #6
 800463c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <low_level_init+0x134>)
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <low_level_init+0x134>)
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	785a      	ldrb	r2, [r3, #1]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <low_level_init+0x134>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	789a      	ldrb	r2, [r3, #2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <low_level_init+0x134>)
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	78da      	ldrb	r2, [r3, #3]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <low_level_init+0x134>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	791a      	ldrb	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <low_level_init+0x134>)
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	795a      	ldrb	r2, [r3, #5]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004696:	f043 030a 	orr.w	r3, r3, #10
 800469a:	b2da      	uxtb	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80046a2:	480f      	ldr	r0, [pc, #60]	; (80046e0 <low_level_init+0x134>)
 80046a4:	f7fd f9d2 	bl	8001a4c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	461a      	mov	r2, r3
 80046ae:	211d      	movs	r1, #29
 80046b0:	480b      	ldr	r0, [pc, #44]	; (80046e0 <low_level_init+0x134>)
 80046b2:	f7fd f8fd 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f043 030b 	orr.w	r3, r3, #11
 80046bc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	461a      	mov	r2, r3
 80046c2:	211d      	movs	r1, #29
 80046c4:	4806      	ldr	r0, [pc, #24]	; (80046e0 <low_level_init+0x134>)
 80046c6:	f7fd f95b 	bl	8001980 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80046ca:	f107 0310 	add.w	r3, r7, #16
 80046ce:	461a      	mov	r2, r3
 80046d0:	211d      	movs	r1, #29
 80046d2:	4803      	ldr	r0, [pc, #12]	; (80046e0 <low_level_init+0x134>)
 80046d4:	f7fd f8ec 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20001bbc 	.word	0x20001bbc
 80046e4:	40028000 	.word	0x40028000
 80046e8:	20001c04 	.word	0x20001c04
 80046ec:	200002ec 	.word	0x200002ec
 80046f0:	2000036c 	.word	0x2000036c
 80046f4:	20001b3c 	.word	0x20001b3c

080046f8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004702:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <low_level_output+0x138>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <low_level_output+0x138>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	e05a      	b.n	80047e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	da03      	bge.n	800473a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004732:	23f8      	movs	r3, #248	; 0xf8
 8004734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004738:	e05c      	b.n	80047f4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	895b      	ldrh	r3, [r3, #10]
 800473e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004744:	e02f      	b.n	80047a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	18d0      	adds	r0, r2, r3
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	18d1      	adds	r1, r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800475a:	3304      	adds	r3, #4
 800475c:	461a      	mov	r2, r3
 800475e:	f00c ff9e 	bl	801169e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da03      	bge.n	8004778 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004770:	23f8      	movs	r3, #248	; 0xf8
 8004772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004776:	e03d      	b.n	80047f4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004788:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004794:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d8c8      	bhi.n	8004746 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	18d0      	adds	r0, r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4413      	add	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f00c ff6a 	bl	801169e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1a1      	bne.n	800472a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	4811      	ldr	r0, [pc, #68]	; (8004830 <low_level_output+0x138>)
 80047ea:	f7fc fef3 	bl	80015d4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <low_level_output+0x138>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	3314      	adds	r3, #20
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <low_level_output+0x138>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	3314      	adds	r3, #20
 8004812:	2220      	movs	r2, #32
 8004814:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <low_level_output+0x138>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481e:	3304      	adds	r3, #4
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20001bbc 	.word	0x20001bbc

08004834 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	; 0x30
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004858:	484f      	ldr	r0, [pc, #316]	; (8004998 <low_level_input+0x164>)
 800485a:	f7fc ffa5 	bl	80017a8 <HAL_ETH_GetReceivedFrame>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <low_level_input+0x34>
  
    return NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	e092      	b.n	800498e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <low_level_input+0x164>)
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <low_level_input+0x164>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800487a:	89fb      	ldrh	r3, [r7, #14]
 800487c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004880:	4619      	mov	r1, r3
 8004882:	2000      	movs	r0, #0
 8004884:	f001 f9e4 	bl	8005c50 <pbuf_alloc>
 8004888:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d04b      	beq.n	8004928 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <low_level_input+0x164>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
 800489e:	e040      	b.n	8004922 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	895b      	ldrh	r3, [r3, #10]
 80048a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048aa:	e021      	b.n	80048f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	18d0      	adds	r0, r2, r3
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	18d1      	adds	r1, r2, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048c0:	3304      	adds	r3, #4
 80048c2:	461a      	mov	r2, r3
 80048c4:	f00c feeb 	bl	801169e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4413      	add	r3, r2
 80048da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80048de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d8d6      	bhi.n	80048ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	18d0      	adds	r0, r2, r3
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4619      	mov	r1, r3
 8004910:	f00c fec5 	bl	801169e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1bb      	bne.n	80048a0 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <low_level_input+0x164>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e00b      	b.n	800494c <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	3301      	adds	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <low_level_input+0x164>)
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3ee      	bcc.n	8004934 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <low_level_input+0x164>)
 8004958:	2200      	movs	r2, #0
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <low_level_input+0x164>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	3314      	adds	r3, #20
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <low_level_input+0x164>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004978:	3314      	adds	r3, #20
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <low_level_input+0x164>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004986:	3308      	adds	r3, #8
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800498e:	4618      	mov	r0, r3
 8004990:	3730      	adds	r7, #48	; 0x30
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20001bbc 	.word	0x20001bbc

0800499c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ff45 	bl	8004834 <low_level_input>
 80049aa:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d013      	beq.n	80049da <ethernetif_input+0x3e>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	4798      	blx	r3
 80049bc:	4603      	mov	r3, r0
 80049be:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80049c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <ethernetif_input+0x40>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
 80049c8:	4806      	ldr	r0, [pc, #24]	; (80049e4 <ethernetif_input+0x48>)
 80049ca:	f00c ff03 	bl	80117d4 <puts>
    pbuf_free(p);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f001 fc64 	bl	800629c <pbuf_free>
    p = NULL;    
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e000      	b.n	80049dc <ethernetif_input+0x40>
  if (p == NULL) return;
 80049da:	bf00      	nop
  }
}
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	08012680 	.word	0x08012680

080049e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <ethernetif_init+0x1c>
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <ethernetif_init+0x48>)
 80049f8:	f240 2211 	movw	r2, #529	; 0x211
 80049fc:	490d      	ldr	r1, [pc, #52]	; (8004a34 <ethernetif_init+0x4c>)
 80049fe:	480e      	ldr	r0, [pc, #56]	; (8004a38 <ethernetif_init+0x50>)
 8004a00:	f00c fe60 	bl	80116c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2273      	movs	r2, #115	; 0x73
 8004a08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2274      	movs	r2, #116	; 0x74
 8004a10:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <ethernetif_init+0x54>)
 8004a18:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <ethernetif_init+0x58>)
 8004a1e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fdc3 	bl	80045ac <low_level_init>

  return ERR_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	080126a4 	.word	0x080126a4
 8004a34:	080126c0 	.word	0x080126c0
 8004a38:	080126d0 	.word	0x080126d0
 8004a3c:	0800f439 	.word	0x0800f439
 8004a40:	080046f9 	.word	0x080046f9

08004a44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a48:	f7fc fa10 	bl	8000e6c <HAL_GetTick>
 8004a4c:	4603      	mov	r3, r0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	b21a      	sxth	r2, r3
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	b29b      	uxth	r3, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	061a      	lsls	r2, r3, #24
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	4313      	orrs	r3, r2
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004ab8:	f000 f8d4 	bl	8004c64 <mem_init>
  memp_init();
 8004abc:	f000 fbfc 	bl	80052b8 <memp_init>
  pbuf_init();
  netif_init();
 8004ac0:	f000 fcbc 	bl	800543c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004ac4:	f007 f9b0 	bl	800be28 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004ac8:	f001 feb2 	bl	8006830 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004acc:	f007 f906 	bl	800bcdc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <ptr_to_mem+0x20>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	4413      	add	r3, r2
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	2000009c 	.word	0x2000009c

08004afc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <mem_to_ptr+0x20>)
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	b29b      	uxth	r3, r3
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	2000009c 	.word	0x2000009c

08004b20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <plug_holes+0x120>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d206      	bcs.n	8004b40 <plug_holes+0x20>
 8004b32:	4b44      	ldr	r3, [pc, #272]	; (8004c44 <plug_holes+0x124>)
 8004b34:	f240 12df 	movw	r2, #479	; 0x1df
 8004b38:	4943      	ldr	r1, [pc, #268]	; (8004c48 <plug_holes+0x128>)
 8004b3a:	4844      	ldr	r0, [pc, #272]	; (8004c4c <plug_holes+0x12c>)
 8004b3c:	f00c fdc2 	bl	80116c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004b40:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <plug_holes+0x130>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d306      	bcc.n	8004b58 <plug_holes+0x38>
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <plug_holes+0x124>)
 8004b4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b50:	4940      	ldr	r1, [pc, #256]	; (8004c54 <plug_holes+0x134>)
 8004b52:	483e      	ldr	r0, [pc, #248]	; (8004c4c <plug_holes+0x12c>)
 8004b54:	f00c fdb6 	bl	80116c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <plug_holes+0x4e>
 8004b60:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <plug_holes+0x124>)
 8004b62:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004b66:	493c      	ldr	r1, [pc, #240]	; (8004c58 <plug_holes+0x138>)
 8004b68:	4838      	ldr	r0, [pc, #224]	; (8004c4c <plug_holes+0x12c>)
 8004b6a:	f00c fdab 	bl	80116c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b76:	d906      	bls.n	8004b86 <plug_holes+0x66>
 8004b78:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <plug_holes+0x124>)
 8004b7a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004b7e:	4937      	ldr	r1, [pc, #220]	; (8004c5c <plug_holes+0x13c>)
 8004b80:	4832      	ldr	r0, [pc, #200]	; (8004c4c <plug_holes+0x12c>)
 8004b82:	f00c fd9f 	bl	80116c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ffa4 	bl	8004ad8 <ptr_to_mem>
 8004b90:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d024      	beq.n	8004be4 <plug_holes+0xc4>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d120      	bne.n	8004be4 <plug_holes+0xc4>
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <plug_holes+0x130>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d01b      	beq.n	8004be4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <plug_holes+0x140>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d102      	bne.n	8004bbc <plug_holes+0x9c>
      lfree = mem;
 8004bb6:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <plug_holes+0x140>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bcc:	d00a      	beq.n	8004be4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff80 	bl	8004ad8 <ptr_to_mem>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ff8e 	bl	8004afc <mem_to_ptr>
 8004be0:	4603      	mov	r3, r0
 8004be2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	885b      	ldrh	r3, [r3, #2]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff75 	bl	8004ad8 <ptr_to_mem>
 8004bee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d01f      	beq.n	8004c38 <plug_holes+0x118>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	791b      	ldrb	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11b      	bne.n	8004c38 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <plug_holes+0x140>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d102      	bne.n	8004c10 <plug_holes+0xf0>
      lfree = pmem;
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <plug_holes+0x140>)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c20:	d00a      	beq.n	8004c38 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff56 	bl	8004ad8 <ptr_to_mem>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	68b8      	ldr	r0, [r7, #8]
 8004c30:	f7ff ff64 	bl	8004afc <mem_to_ptr>
 8004c34:	4603      	mov	r3, r0
 8004c36:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	2000009c 	.word	0x2000009c
 8004c44:	080126f8 	.word	0x080126f8
 8004c48:	08012728 	.word	0x08012728
 8004c4c:	08012740 	.word	0x08012740
 8004c50:	200000a0 	.word	0x200000a0
 8004c54:	08012768 	.word	0x08012768
 8004c58:	08012784 	.word	0x08012784
 8004c5c:	080127a0 	.word	0x080127a0
 8004c60:	200000a4 	.word	0x200000a4

08004c64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <mem_init+0x68>)
 8004c6c:	3303      	adds	r3, #3
 8004c6e:	f023 0303 	bic.w	r3, r3, #3
 8004c72:	461a      	mov	r2, r3
 8004c74:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <mem_init+0x6c>)
 8004c76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <mem_init+0x6c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c92:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004c96:	f7ff ff1f 	bl	8004ad8 <ptr_to_mem>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <mem_init+0x70>)
 8004c9e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <mem_init+0x70>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <mem_init+0x70>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004cb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <mem_init+0x70>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004cba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <mem_init+0x6c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <mem_init+0x74>)
 8004cc2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200033ec 	.word	0x200033ec
 8004cd0:	2000009c 	.word	0x2000009c
 8004cd4:	200000a0 	.word	0x200000a0
 8004cd8:	200000a4 	.word	0x200000a4

08004cdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff09 	bl	8004afc <mem_to_ptr>
 8004cea:	4603      	mov	r3, r0
 8004cec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fef0 	bl	8004ad8 <ptr_to_mem>
 8004cf8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	885b      	ldrh	r3, [r3, #2]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff feea 	bl	8004ad8 <ptr_to_mem>
 8004d04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d0e:	d818      	bhi.n	8004d42 <mem_link_valid+0x66>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	885b      	ldrh	r3, [r3, #2]
 8004d14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d18:	d813      	bhi.n	8004d42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d1e:	8afa      	ldrh	r2, [r7, #22]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d004      	beq.n	8004d2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	8afa      	ldrh	r2, [r7, #22]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d109      	bne.n	8004d42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <mem_link_valid+0x74>)
 8004d30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d006      	beq.n	8004d46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	885b      	ldrh	r3, [r3, #2]
 8004d3c:	8afa      	ldrh	r2, [r7, #22]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d001      	beq.n	8004d46 <mem_link_valid+0x6a>
    return 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e000      	b.n	8004d48 <mem_link_valid+0x6c>
  }
  return 1;
 8004d46:	2301      	movs	r3, #1
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200000a0 	.word	0x200000a0

08004d54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 8004d62:	482f      	ldr	r0, [pc, #188]	; (8004e20 <mem_free+0xcc>)
 8004d64:	f00c fd36 	bl	80117d4 <puts>
    return;
 8004d68:	e057      	b.n	8004e1a <mem_free+0xc6>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <mem_free+0x36>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <mem_free+0xd0>)
 8004d76:	f240 2273 	movw	r2, #627	; 0x273
 8004d7a:	492b      	ldr	r1, [pc, #172]	; (8004e28 <mem_free+0xd4>)
 8004d7c:	482b      	ldr	r0, [pc, #172]	; (8004e2c <mem_free+0xd8>)
 8004d7e:	f00c fca1 	bl	80116c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 8004d82:	4829      	ldr	r0, [pc, #164]	; (8004e28 <mem_free+0xd4>)
 8004d84:	f00c fd26 	bl	80117d4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d88:	e047      	b.n	8004e1a <mem_free+0xc6>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3b08      	subs	r3, #8
 8004d8e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <mem_free+0xdc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d306      	bcc.n	8004da8 <mem_free+0x54>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f103 020c 	add.w	r2, r3, #12
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <mem_free+0xe0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d90a      	bls.n	8004dbe <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <mem_free+0xd0>)
 8004daa:	f240 227f 	movw	r2, #639	; 0x27f
 8004dae:	4922      	ldr	r1, [pc, #136]	; (8004e38 <mem_free+0xe4>)
 8004db0:	481e      	ldr	r0, [pc, #120]	; (8004e2c <mem_free+0xd8>)
 8004db2:	f00c fc87 	bl	80116c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 8004db6:	4820      	ldr	r0, [pc, #128]	; (8004e38 <mem_free+0xe4>)
 8004db8:	f00c fd0c 	bl	80117d4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dbc:	e02d      	b.n	8004e1a <mem_free+0xc6>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	791b      	ldrb	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <mem_free+0x88>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004dc6:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <mem_free+0xd0>)
 8004dc8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004dcc:	491b      	ldr	r1, [pc, #108]	; (8004e3c <mem_free+0xe8>)
 8004dce:	4817      	ldr	r0, [pc, #92]	; (8004e2c <mem_free+0xd8>)
 8004dd0:	f00c fc78 	bl	80116c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8004dd4:	481a      	ldr	r0, [pc, #104]	; (8004e40 <mem_free+0xec>)
 8004dd6:	f00c fcfd 	bl	80117d4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dda:	e01e      	b.n	8004e1a <mem_free+0xc6>
  }

  if (!mem_link_valid(mem)) {
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff ff7d 	bl	8004cdc <mem_link_valid>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <mem_free+0xaa>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <mem_free+0xd0>)
 8004dea:	f240 2295 	movw	r2, #661	; 0x295
 8004dee:	4915      	ldr	r1, [pc, #84]	; (8004e44 <mem_free+0xf0>)
 8004df0:	480e      	ldr	r0, [pc, #56]	; (8004e2c <mem_free+0xd8>)
 8004df2:	f00c fc67 	bl	80116c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 8004df6:	4814      	ldr	r0, [pc, #80]	; (8004e48 <mem_free+0xf4>)
 8004df8:	f00c fcec 	bl	80117d4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dfc:	e00d      	b.n	8004e1a <mem_free+0xc6>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004e04:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <mem_free+0xf8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d202      	bcs.n	8004e14 <mem_free+0xc0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004e0e:	4a0f      	ldr	r2, [pc, #60]	; (8004e4c <mem_free+0xf8>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fe83 	bl	8004b20 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	080127cc 	.word	0x080127cc
 8004e24:	080126f8 	.word	0x080126f8
 8004e28:	080127ec 	.word	0x080127ec
 8004e2c:	08012740 	.word	0x08012740
 8004e30:	2000009c 	.word	0x2000009c
 8004e34:	200000a0 	.word	0x200000a0
 8004e38:	08012810 	.word	0x08012810
 8004e3c:	0801282c 	.word	0x0801282c
 8004e40:	08012854 	.word	0x08012854
 8004e44:	0801287c 	.word	0x0801287c
 8004e48:	080128b0 	.word	0x080128b0
 8004e4c:	200000a4 	.word	0x200000a4

08004e50 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	3303      	adds	r3, #3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004e68:	8bfb      	ldrh	r3, [r7, #30]
 8004e6a:	2b0b      	cmp	r3, #11
 8004e6c:	d801      	bhi.n	8004e72 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004e6e:	230c      	movs	r3, #12
 8004e70:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004e72:	8bfb      	ldrh	r3, [r7, #30]
 8004e74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e78:	d803      	bhi.n	8004e82 <mem_trim+0x32>
 8004e7a:	8bfa      	ldrh	r2, [r7, #30]
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d201      	bcs.n	8004e86 <mem_trim+0x36>
    return NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e0cf      	b.n	8005026 <mem_trim+0x1d6>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e86:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <mem_trim+0x1e0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d304      	bcc.n	8004e9a <mem_trim+0x4a>
 8004e90:	4b68      	ldr	r3, [pc, #416]	; (8005034 <mem_trim+0x1e4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d306      	bcc.n	8004ea8 <mem_trim+0x58>
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <mem_trim+0x1e8>)
 8004e9c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004ea0:	4966      	ldr	r1, [pc, #408]	; (800503c <mem_trim+0x1ec>)
 8004ea2:	4867      	ldr	r0, [pc, #412]	; (8005040 <mem_trim+0x1f0>)
 8004ea4:	f00c fc0e 	bl	80116c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004ea8:	4b61      	ldr	r3, [pc, #388]	; (8005030 <mem_trim+0x1e0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d304      	bcc.n	8004ebc <mem_trim+0x6c>
 8004eb2:	4b60      	ldr	r3, [pc, #384]	; (8005034 <mem_trim+0x1e4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d304      	bcc.n	8004ec6 <mem_trim+0x76>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8004ebc:	4861      	ldr	r0, [pc, #388]	; (8005044 <mem_trim+0x1f4>)
 8004ebe:	f00c fc89 	bl	80117d4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	e0af      	b.n	8005026 <mem_trim+0x1d6>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3b08      	subs	r3, #8
 8004eca:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004ecc:	69b8      	ldr	r0, [r7, #24]
 8004ece:	f7ff fe15 	bl	8004afc <mem_to_ptr>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b08      	subs	r3, #8
 8004ee2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004ee4:	8bfa      	ldrh	r2, [r7, #30]
 8004ee6:	8abb      	ldrh	r3, [r7, #20]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d906      	bls.n	8004efa <mem_trim+0xaa>
 8004eec:	4b52      	ldr	r3, [pc, #328]	; (8005038 <mem_trim+0x1e8>)
 8004eee:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004ef2:	4955      	ldr	r1, [pc, #340]	; (8005048 <mem_trim+0x1f8>)
 8004ef4:	4852      	ldr	r0, [pc, #328]	; (8005040 <mem_trim+0x1f0>)
 8004ef6:	f00c fbe5 	bl	80116c4 <iprintf>
  if (newsize > size) {
 8004efa:	8bfa      	ldrh	r2, [r7, #30]
 8004efc:	8abb      	ldrh	r3, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d901      	bls.n	8004f06 <mem_trim+0xb6>
    /* not supported */
    return NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e08f      	b.n	8005026 <mem_trim+0x1d6>
  }
  if (newsize == size) {
 8004f06:	8bfa      	ldrh	r2, [r7, #30]
 8004f08:	8abb      	ldrh	r3, [r7, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d101      	bne.n	8004f12 <mem_trim+0xc2>
    /* No change in size, simply return */
    return rmem;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	e089      	b.n	8005026 <mem_trim+0x1d6>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fdde 	bl	8004ad8 <ptr_to_mem>
 8004f1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	791b      	ldrb	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d13f      	bne.n	8004fa6 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f2e:	d106      	bne.n	8004f3e <mem_trim+0xee>
 8004f30:	4b41      	ldr	r3, [pc, #260]	; (8005038 <mem_trim+0x1e8>)
 8004f32:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004f36:	4945      	ldr	r1, [pc, #276]	; (800504c <mem_trim+0x1fc>)
 8004f38:	4841      	ldr	r0, [pc, #260]	; (8005040 <mem_trim+0x1f0>)
 8004f3a:	f00c fbc3 	bl	80116c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f44:	8afa      	ldrh	r2, [r7, #22]
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	4413      	add	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004f50:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <mem_trim+0x200>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d106      	bne.n	8004f68 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8004f5a:	89fb      	ldrh	r3, [r7, #14]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff fdbb 	bl	8004ad8 <ptr_to_mem>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <mem_trim+0x200>)
 8004f66:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004f68:	89fb      	ldrh	r3, [r7, #14]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fdb4 	bl	8004ad8 <ptr_to_mem>
 8004f70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2200      	movs	r2, #0
 8004f76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	89ba      	ldrh	r2, [r7, #12]
 8004f7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	8afa      	ldrh	r2, [r7, #22]
 8004f82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	89fa      	ldrh	r2, [r7, #14]
 8004f88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f92:	d047      	beq.n	8005024 <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fd9d 	bl	8004ad8 <ptr_to_mem>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	89fb      	ldrh	r3, [r7, #14]
 8004fa2:	8053      	strh	r3, [r2, #2]
 8004fa4:	e03e      	b.n	8005024 <mem_trim+0x1d4>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004fa6:	8bfb      	ldrh	r3, [r7, #30]
 8004fa8:	f103 0214 	add.w	r2, r3, #20
 8004fac:	8abb      	ldrh	r3, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d838      	bhi.n	8005024 <mem_trim+0x1d4>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004fb2:	8afa      	ldrh	r2, [r7, #22]
 8004fb4:	8bfb      	ldrh	r3, [r7, #30]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3308      	adds	r3, #8
 8004fbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fc6:	d106      	bne.n	8004fd6 <mem_trim+0x186>
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <mem_trim+0x1e8>)
 8004fca:	f240 3216 	movw	r2, #790	; 0x316
 8004fce:	491f      	ldr	r1, [pc, #124]	; (800504c <mem_trim+0x1fc>)
 8004fd0:	481b      	ldr	r0, [pc, #108]	; (8005040 <mem_trim+0x1f0>)
 8004fd2:	f00c fb77 	bl	80116c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fd7d 	bl	8004ad8 <ptr_to_mem>
 8004fde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <mem_trim+0x200>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d202      	bcs.n	8004ff0 <mem_trim+0x1a0>
      lfree = mem2;
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <mem_trim+0x200>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	8afa      	ldrh	r2, [r7, #22]
 8005002:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	89fa      	ldrh	r2, [r7, #14]
 8005008:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005012:	d007      	beq.n	8005024 <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fd5d 	bl	8004ad8 <ptr_to_mem>
 800501e:	4602      	mov	r2, r0
 8005020:	89fb      	ldrh	r3, [r7, #14]
 8005022:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005024:	687b      	ldr	r3, [r7, #4]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000009c 	.word	0x2000009c
 8005034:	200000a0 	.word	0x200000a0
 8005038:	080126f8 	.word	0x080126f8
 800503c:	080128e4 	.word	0x080128e4
 8005040:	08012740 	.word	0x08012740
 8005044:	080128fc 	.word	0x080128fc
 8005048:	08012918 	.word	0x08012918
 800504c:	08012938 	.word	0x08012938
 8005050:	200000a4 	.word	0x200000a4

08005054 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <mem_malloc+0x14>
    return NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	e0df      	b.n	8005228 <mem_malloc+0x1d4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	3303      	adds	r3, #3
 800506c:	b29b      	uxth	r3, r3
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005074:	8bbb      	ldrh	r3, [r7, #28]
 8005076:	2b0b      	cmp	r3, #11
 8005078:	d801      	bhi.n	800507e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800507a:	230c      	movs	r3, #12
 800507c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800507e:	8bbb      	ldrh	r3, [r7, #28]
 8005080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005084:	d803      	bhi.n	800508e <mem_malloc+0x3a>
 8005086:	8bba      	ldrh	r2, [r7, #28]
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	429a      	cmp	r2, r3
 800508c:	d201      	bcs.n	8005092 <mem_malloc+0x3e>
    return NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	e0ca      	b.n	8005228 <mem_malloc+0x1d4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005092:	4b67      	ldr	r3, [pc, #412]	; (8005230 <mem_malloc+0x1dc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fd30 	bl	8004afc <mem_to_ptr>
 800509c:	4603      	mov	r3, r0
 800509e:	83fb      	strh	r3, [r7, #30]
 80050a0:	e0b4      	b.n	800520c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fd17 	bl	8004ad8 <ptr_to_mem>
 80050aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	791b      	ldrb	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 80a4 	bne.w	80051fe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	8bfb      	ldrh	r3, [r7, #30]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f1a3 0208 	sub.w	r2, r3, #8
 80050c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f0c0 8099 	bcc.w	80051fe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	8bfb      	ldrh	r3, [r7, #30]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f1a3 0208 	sub.w	r2, r3, #8
 80050da:	8bbb      	ldrh	r3, [r7, #28]
 80050dc:	3314      	adds	r3, #20
 80050de:	429a      	cmp	r2, r3
 80050e0:	d333      	bcc.n	800514a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80050e2:	8bfa      	ldrh	r2, [r7, #30]
 80050e4:	8bbb      	ldrh	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3308      	adds	r3, #8
 80050ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80050ee:	8a7b      	ldrh	r3, [r7, #18]
 80050f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050f4:	d106      	bne.n	8005104 <mem_malloc+0xb0>
 80050f6:	4b4f      	ldr	r3, [pc, #316]	; (8005234 <mem_malloc+0x1e0>)
 80050f8:	f240 3287 	movw	r2, #903	; 0x387
 80050fc:	494e      	ldr	r1, [pc, #312]	; (8005238 <mem_malloc+0x1e4>)
 80050fe:	484f      	ldr	r0, [pc, #316]	; (800523c <mem_malloc+0x1e8>)
 8005100:	f00c fae0 	bl	80116c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fce6 	bl	8004ad8 <ptr_to_mem>
 800510c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8bfa      	ldrh	r2, [r7, #30]
 8005120:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	8a7a      	ldrh	r2, [r7, #18]
 8005126:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2201      	movs	r2, #1
 800512c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005136:	d00b      	beq.n	8005150 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fccb 	bl	8004ad8 <ptr_to_mem>
 8005142:	4602      	mov	r2, r0
 8005144:	8a7b      	ldrh	r3, [r7, #18]
 8005146:	8053      	strh	r3, [r2, #2]
 8005148:	e002      	b.n	8005150 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2201      	movs	r2, #1
 800514e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005150:	4b37      	ldr	r3, [pc, #220]	; (8005230 <mem_malloc+0x1dc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d127      	bne.n	80051aa <mem_malloc+0x156>
          struct mem *cur = lfree;
 800515a:	4b35      	ldr	r3, [pc, #212]	; (8005230 <mem_malloc+0x1dc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005160:	e005      	b.n	800516e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fcb6 	bl	8004ad8 <ptr_to_mem>
 800516c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	791b      	ldrb	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <mem_malloc+0x12c>
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <mem_malloc+0x1ec>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d1f0      	bne.n	8005162 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005180:	4a2b      	ldr	r2, [pc, #172]	; (8005230 <mem_malloc+0x1dc>)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005186:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <mem_malloc+0x1dc>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <mem_malloc+0x1ec>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d00b      	beq.n	80051aa <mem_malloc+0x156>
 8005192:	4b27      	ldr	r3, [pc, #156]	; (8005230 <mem_malloc+0x1dc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	791b      	ldrb	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <mem_malloc+0x156>
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <mem_malloc+0x1e0>)
 800519e:	f240 32b5 	movw	r2, #949	; 0x3b5
 80051a2:	4928      	ldr	r1, [pc, #160]	; (8005244 <mem_malloc+0x1f0>)
 80051a4:	4825      	ldr	r0, [pc, #148]	; (800523c <mem_malloc+0x1e8>)
 80051a6:	f00c fa8d 	bl	80116c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80051aa:	8bba      	ldrh	r2, [r7, #28]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	3308      	adds	r3, #8
 80051b2:	4a23      	ldr	r2, [pc, #140]	; (8005240 <mem_malloc+0x1ec>)
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d906      	bls.n	80051c8 <mem_malloc+0x174>
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <mem_malloc+0x1e0>)
 80051bc:	f240 32ba 	movw	r2, #954	; 0x3ba
 80051c0:	4921      	ldr	r1, [pc, #132]	; (8005248 <mem_malloc+0x1f4>)
 80051c2:	481e      	ldr	r0, [pc, #120]	; (800523c <mem_malloc+0x1e8>)
 80051c4:	f00c fa7e 	bl	80116c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <mem_malloc+0x18c>
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <mem_malloc+0x1e0>)
 80051d4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80051d8:	491c      	ldr	r1, [pc, #112]	; (800524c <mem_malloc+0x1f8>)
 80051da:	4818      	ldr	r0, [pc, #96]	; (800523c <mem_malloc+0x1e8>)
 80051dc:	f00c fa72 	bl	80116c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <mem_malloc+0x1a4>
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <mem_malloc+0x1e0>)
 80051ec:	f240 32be 	movw	r2, #958	; 0x3be
 80051f0:	4917      	ldr	r1, [pc, #92]	; (8005250 <mem_malloc+0x1fc>)
 80051f2:	4812      	ldr	r0, [pc, #72]	; (800523c <mem_malloc+0x1e8>)
 80051f4:	f00c fa66 	bl	80116c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3308      	adds	r3, #8
 80051fc:	e014      	b.n	8005228 <mem_malloc+0x1d4>
         ptr = ptr_to_mem(ptr)->next) {
 80051fe:	8bfb      	ldrh	r3, [r7, #30]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fc69 	bl	8004ad8 <ptr_to_mem>
 8005206:	4603      	mov	r3, r0
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800520c:	8bfa      	ldrh	r2, [r7, #30]
 800520e:	8bbb      	ldrh	r3, [r7, #28]
 8005210:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005214:	429a      	cmp	r2, r3
 8005216:	f4ff af44 	bcc.w	80050a2 <mem_malloc+0x4e>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 800521a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800521e:	4619      	mov	r1, r3
 8005220:	480c      	ldr	r0, [pc, #48]	; (8005254 <mem_malloc+0x200>)
 8005222:	f00c fa4f 	bl	80116c4 <iprintf>
  return NULL;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200000a4 	.word	0x200000a4
 8005234:	080126f8 	.word	0x080126f8
 8005238:	08012938 	.word	0x08012938
 800523c:	08012740 	.word	0x08012740
 8005240:	200000a0 	.word	0x200000a0
 8005244:	0801294c 	.word	0x0801294c
 8005248:	08012968 	.word	0x08012968
 800524c:	08012998 	.word	0x08012998
 8005250:	080129c8 	.word	0x080129c8
 8005254:	080129ec 	.word	0x080129ec

08005258 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	3303      	adds	r3, #3
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e011      	b.n	800529e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	889b      	ldrh	r3, [r3, #4]
 8005290:	461a      	mov	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4293      	cmp	r3, r2
 80052a8:	dbe7      	blt.n	800527a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052be:	2300      	movs	r3, #0
 80052c0:	80fb      	strh	r3, [r7, #6]
 80052c2:	e009      	b.n	80052d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <memp_init+0x30>)
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ffc3 	bl	8005258 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	3301      	adds	r3, #1
 80052d6:	80fb      	strh	r3, [r7, #6]
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d9f2      	bls.n	80052c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	080175f0 	.word	0x080175f0

080052ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d012      	beq.n	8005328 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <do_memp_malloc_pool+0x38>
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <do_memp_malloc_pool+0x54>)
 8005318:	f240 1219 	movw	r2, #281	; 0x119
 800531c:	4909      	ldr	r1, [pc, #36]	; (8005344 <do_memp_malloc_pool+0x58>)
 800531e:	480a      	ldr	r0, [pc, #40]	; (8005348 <do_memp_malloc_pool+0x5c>)
 8005320:	f00c f9d0 	bl	80116c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	e006      	b.n	8005336 <do_memp_malloc_pool+0x4a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4619      	mov	r1, r3
 800532e:	4807      	ldr	r0, [pc, #28]	; (800534c <do_memp_malloc_pool+0x60>)
 8005330:	f00c f9c8 	bl	80116c4 <iprintf>
  }

  return NULL;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	08012aac 	.word	0x08012aac
 8005344:	08012adc 	.word	0x08012adc
 8005348:	08012b00 	.word	0x08012b00
 800534c:	08012b28 	.word	0x08012b28

08005350 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d908      	bls.n	8005372 <memp_malloc+0x22>
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <memp_malloc+0x3c>)
 8005362:	f240 1257 	movw	r2, #343	; 0x157
 8005366:	490a      	ldr	r1, [pc, #40]	; (8005390 <memp_malloc+0x40>)
 8005368:	480a      	ldr	r0, [pc, #40]	; (8005394 <memp_malloc+0x44>)
 800536a:	f00c f9ab 	bl	80116c4 <iprintf>
 800536e:	2300      	movs	r3, #0
 8005370:	e008      	b.n	8005384 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <memp_malloc+0x48>)
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ffb6 	bl	80052ec <do_memp_malloc_pool>
 8005380:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	08012aac 	.word	0x08012aac
 8005390:	08012b64 	.word	0x08012b64
 8005394:	08012b00 	.word	0x08012b00
 8005398:	080175f0 	.word	0x080175f0

0800539c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <do_memp_free_pool+0x22>
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <do_memp_free_pool+0x40>)
 80053b2:	f240 126d 	movw	r2, #365	; 0x16d
 80053b6:	490a      	ldr	r1, [pc, #40]	; (80053e0 <do_memp_free_pool+0x44>)
 80053b8:	480a      	ldr	r0, [pc, #40]	; (80053e4 <do_memp_free_pool+0x48>)
 80053ba:	f00c f983 	bl	80116c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	08012aac 	.word	0x08012aac
 80053e0:	08012b84 	.word	0x08012b84
 80053e4:	08012b00 	.word	0x08012b00

080053e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d907      	bls.n	800540a <memp_free+0x22>
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <memp_free+0x44>)
 80053fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <memp_free+0x48>)
 8005402:	480c      	ldr	r0, [pc, #48]	; (8005434 <memp_free+0x4c>)
 8005404:	f00c f95e 	bl	80116c4 <iprintf>
 8005408:	e00c      	b.n	8005424 <memp_free+0x3c>

  if (mem == NULL) {
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <memp_free+0x50>)
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ffbe 	bl	800539c <do_memp_free_pool>
 8005420:	e000      	b.n	8005424 <memp_free+0x3c>
    return;
 8005422:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08012aac 	.word	0x08012aac
 8005430:	08012ba4 	.word	0x08012ba4
 8005434:	08012b00 	.word	0x08012b00
 8005438:	080175f0 	.word	0x080175f0

0800543c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <netif_add+0x26>
 8005460:	4ba1      	ldr	r3, [pc, #644]	; (80056e8 <netif_add+0x29c>)
 8005462:	f240 1227 	movw	r2, #295	; 0x127
 8005466:	49a1      	ldr	r1, [pc, #644]	; (80056ec <netif_add+0x2a0>)
 8005468:	48a1      	ldr	r0, [pc, #644]	; (80056f0 <netif_add+0x2a4>)
 800546a:	f00c f92b 	bl	80116c4 <iprintf>
 800546e:	2300      	movs	r3, #0
 8005470:	e135      	b.n	80056de <netif_add+0x292>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <netif_add+0x3e>
 8005478:	4b9b      	ldr	r3, [pc, #620]	; (80056e8 <netif_add+0x29c>)
 800547a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800547e:	499d      	ldr	r1, [pc, #628]	; (80056f4 <netif_add+0x2a8>)
 8005480:	489b      	ldr	r0, [pc, #620]	; (80056f0 <netif_add+0x2a4>)
 8005482:	f00c f91f 	bl	80116c4 <iprintf>
 8005486:	2300      	movs	r3, #0
 8005488:	e129      	b.n	80056de <netif_add+0x292>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005490:	4b99      	ldr	r3, [pc, #612]	; (80056f8 <netif_add+0x2ac>)
 8005492:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800549a:	4b97      	ldr	r3, [pc, #604]	; (80056f8 <netif_add+0x2ac>)
 800549c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80054a4:	4b94      	ldr	r3, [pc, #592]	; (80056f8 <netif_add+0x2ac>)
 80054a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a8f      	ldr	r2, [pc, #572]	; (80056fc <netif_add+0x2b0>)
 80054be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3324      	adds	r3, #36	; 0x24
 80054d2:	2204      	movs	r2, #4
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f00c f8ec 	bl	80116b4 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80054e8:	4b85      	ldr	r3, [pc, #532]	; (8005700 <netif_add+0x2b4>)
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f9fc 	bl	80058fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	4798      	blx	r3
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <netif_add+0xc8>
    return NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	e0e4      	b.n	80056de <netif_add+0x292>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800551a:	2bff      	cmp	r3, #255	; 0xff
 800551c:	d103      	bne.n	8005526 <netif_add+0xda>
        netif->num = 0;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800552a:	4b76      	ldr	r3, [pc, #472]	; (8005704 <netif_add+0x2b8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e02b      	b.n	800558a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	429a      	cmp	r2, r3
 8005538:	d106      	bne.n	8005548 <netif_add+0xfc>
 800553a:	4b6b      	ldr	r3, [pc, #428]	; (80056e8 <netif_add+0x29c>)
 800553c:	f240 128b 	movw	r2, #395	; 0x18b
 8005540:	4971      	ldr	r1, [pc, #452]	; (8005708 <netif_add+0x2bc>)
 8005542:	486b      	ldr	r0, [pc, #428]	; (80056f0 <netif_add+0x2a4>)
 8005544:	f00c f8be 	bl	80116c4 <iprintf>
        num_netifs++;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3301      	adds	r3, #1
 800554c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2bff      	cmp	r3, #255	; 0xff
 8005552:	dd06      	ble.n	8005562 <netif_add+0x116>
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <netif_add+0x29c>)
 8005556:	f240 128d 	movw	r2, #397	; 0x18d
 800555a:	496c      	ldr	r1, [pc, #432]	; (800570c <netif_add+0x2c0>)
 800555c:	4864      	ldr	r0, [pc, #400]	; (80056f0 <netif_add+0x2a4>)
 800555e:	f00c f8b1 	bl	80116c4 <iprintf>
        if (netif2->num == netif->num) {
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800556e:	429a      	cmp	r2, r3
 8005570:	d108      	bne.n	8005584 <netif_add+0x138>
          netif->num++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005578:	3301      	adds	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8005582:	e005      	b.n	8005590 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1d0      	bne.n	8005532 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1be      	bne.n	8005514 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800559c:	2bfe      	cmp	r3, #254	; 0xfe
 800559e:	d103      	bne.n	80055a8 <netif_add+0x15c>
    netif_num = 0;
 80055a0:	4b57      	ldr	r3, [pc, #348]	; (8005700 <netif_add+0x2b4>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e006      	b.n	80055b6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ae:	3301      	adds	r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4b53      	ldr	r3, [pc, #332]	; (8005700 <netif_add+0x2b4>)
 80055b4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80055b6:	4b53      	ldr	r3, [pc, #332]	; (8005704 <netif_add+0x2b8>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80055be:	4a51      	ldr	r2, [pc, #324]	; (8005704 <netif_add+0x2b8>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055ca:	4619      	mov	r1, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80055d2:	461a      	mov	r2, r3
 80055d4:	484e      	ldr	r0, [pc, #312]	; (8005710 <netif_add+0x2c4>)
 80055d6:	f00c f875 	bl	80116c4 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 80055da:	484e      	ldr	r0, [pc, #312]	; (8005714 <netif_add+0x2c8>)
 80055dc:	f00c f872 	bl	80116c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <netif_add+0x1a2>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	e000      	b.n	80055f0 <netif_add+0x1a4>
 80055ee:	2100      	movs	r1, #0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <netif_add+0x1b4>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	e000      	b.n	8005602 <netif_add+0x1b6>
 8005600:	2200      	movs	r2, #0
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <netif_add+0x1c6>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3302      	adds	r3, #2
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	e000      	b.n	8005614 <netif_add+0x1c8>
 8005612:	2000      	movs	r0, #0
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <netif_add+0x1d6>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3303      	adds	r3, #3
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	e000      	b.n	8005624 <netif_add+0x1d8>
 8005622:	2300      	movs	r3, #0
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	4603      	mov	r3, r0
 8005628:	483b      	ldr	r0, [pc, #236]	; (8005718 <netif_add+0x2cc>)
 800562a:	f00c f84b 	bl	80116c4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800562e:	483b      	ldr	r0, [pc, #236]	; (800571c <netif_add+0x2d0>)
 8005630:	f00c f848 	bl	80116c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <netif_add+0x1f6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	e000      	b.n	8005644 <netif_add+0x1f8>
 8005642:	2100      	movs	r1, #0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <netif_add+0x208>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3301      	adds	r3, #1
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	e000      	b.n	8005656 <netif_add+0x20a>
 8005654:	2200      	movs	r2, #0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <netif_add+0x21a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3302      	adds	r3, #2
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	e000      	b.n	8005668 <netif_add+0x21c>
 8005666:	2000      	movs	r0, #0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <netif_add+0x22a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3303      	adds	r3, #3
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	e000      	b.n	8005678 <netif_add+0x22c>
 8005676:	2300      	movs	r3, #0
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	4603      	mov	r3, r0
 800567c:	4826      	ldr	r0, [pc, #152]	; (8005718 <netif_add+0x2cc>)
 800567e:	f00c f821 	bl	80116c4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8005682:	4827      	ldr	r0, [pc, #156]	; (8005720 <netif_add+0x2d4>)
 8005684:	f00c f81e 	bl	80116c4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <netif_add+0x24a>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	e000      	b.n	8005698 <netif_add+0x24c>
 8005696:	2100      	movs	r1, #0
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <netif_add+0x25c>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	e000      	b.n	80056aa <netif_add+0x25e>
 80056a8:	2200      	movs	r2, #0
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <netif_add+0x26e>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	3302      	adds	r3, #2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	e000      	b.n	80056bc <netif_add+0x270>
 80056ba:	2000      	movs	r0, #0
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <netif_add+0x27e>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3303      	adds	r3, #3
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	e000      	b.n	80056cc <netif_add+0x280>
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	4603      	mov	r3, r0
 80056d0:	4811      	ldr	r0, [pc, #68]	; (8005718 <netif_add+0x2cc>)
 80056d2:	f00b fff7 	bl	80116c4 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 80056d6:	200a      	movs	r0, #10
 80056d8:	f00c f80c 	bl	80116f4 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	08012bc0 	.word	0x08012bc0
 80056ec:	08012c54 	.word	0x08012c54
 80056f0:	08012c10 	.word	0x08012c10
 80056f4:	08012c70 	.word	0x08012c70
 80056f8:	08017678 	.word	0x08017678
 80056fc:	08005b35 	.word	0x08005b35
 8005700:	200000cc 	.word	0x200000cc
 8005704:	2000697c 	.word	0x2000697c
 8005708:	08012c94 	.word	0x08012c94
 800570c:	08012ca8 	.word	0x08012ca8
 8005710:	08012cd8 	.word	0x08012cd8
 8005714:	08012cf8 	.word	0x08012cf8
 8005718:	08012d00 	.word	0x08012d00
 800571c:	08012d10 	.word	0x08012d10
 8005720:	08012d1c 	.word	0x08012d1c

08005724 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 fbbf 	bl	8007eb4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f007 f801 	bl	800c740 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <netif_do_set_ipaddr+0x20>
 800575a:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <netif_do_set_ipaddr+0x9c>)
 800575c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005760:	4921      	ldr	r1, [pc, #132]	; (80057e8 <netif_do_set_ipaddr+0xa0>)
 8005762:	4822      	ldr	r0, [pc, #136]	; (80057ec <netif_do_set_ipaddr+0xa4>)
 8005764:	f00b ffae 	bl	80116c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <netif_do_set_ipaddr+0x34>
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <netif_do_set_ipaddr+0x9c>)
 8005770:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005774:	491c      	ldr	r1, [pc, #112]	; (80057e8 <netif_do_set_ipaddr+0xa0>)
 8005776:	481d      	ldr	r0, [pc, #116]	; (80057ec <netif_do_set_ipaddr+0xa4>)
 8005778:	f00b ffa4 	bl	80116c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3304      	adds	r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d027      	beq.n	80057da <netif_do_set_ipaddr+0x92>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3304      	adds	r3, #4
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800579a:	4815      	ldr	r0, [pc, #84]	; (80057f0 <netif_do_set_ipaddr+0xa8>)
 800579c:	f00c f81a 	bl	80117d4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff ffbc 	bl	8005724 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <netif_do_set_ipaddr+0x70>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e000      	b.n	80057ba <netif_do_set_ipaddr+0x72>
 80057b8:	2300      	movs	r3, #0
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80057be:	2101      	movs	r1, #1
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f93d 	bl	8005a40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <netif_do_set_ipaddr+0x8e>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	4798      	blx	r3
    return 1; /* address changed */
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <netif_do_set_ipaddr+0x94>
  }
  return 0; /* address unchanged */
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	08012bc0 	.word	0x08012bc0
 80057e8:	08012d24 	.word	0x08012d24
 80057ec:	08012c10 	.word	0x08012c10
 80057f0:	08012d34 	.word	0x08012d34

080057f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80057f4:	b5b0      	push	{r4, r5, r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af04      	add	r7, sp, #16
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3308      	adds	r3, #8
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d02d      	beq.n	800586a <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <netif_do_set_netmask+0x26>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	e000      	b.n	800581c <netif_do_set_netmask+0x28>
 800581a:	2300      	movs	r3, #0
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005826:	4618      	mov	r0, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800582e:	461c      	mov	r4, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3308      	adds	r3, #8
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	461d      	mov	r5, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3308      	adds	r3, #8
 800583c:	3301      	adds	r3, #1
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3308      	adds	r3, #8
 8005846:	3302      	adds	r3, #2
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3308      	adds	r3, #8
 8005850:	3303      	adds	r3, #3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	9101      	str	r1, [sp, #4]
 8005858:	9200      	str	r2, [sp, #0]
 800585a:	462b      	mov	r3, r5
 800585c:	4622      	mov	r2, r4
 800585e:	4601      	mov	r1, r0
 8005860:	4804      	ldr	r0, [pc, #16]	; (8005874 <netif_do_set_netmask+0x80>)
 8005862:	f00b ff2f 	bl	80116c4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bdb0      	pop	{r4, r5, r7, pc}
 8005874:	08012d84 	.word	0x08012d84

08005878 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005878:	b5b0      	push	{r4, r5, r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af04      	add	r7, sp, #16
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	330c      	adds	r3, #12
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d02d      	beq.n	80058ee <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <netif_do_set_gw+0x26>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	e000      	b.n	80058a0 <netif_do_set_gw+0x28>
 800589e:	2300      	movs	r3, #0
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80058aa:	4618      	mov	r0, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80058b2:	461c      	mov	r4, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	330c      	adds	r3, #12
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461d      	mov	r5, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	330c      	adds	r3, #12
 80058c0:	3301      	adds	r3, #1
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	330c      	adds	r3, #12
 80058ca:	3302      	adds	r3, #2
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	330c      	adds	r3, #12
 80058d4:	3303      	adds	r3, #3
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	9101      	str	r1, [sp, #4]
 80058dc:	9200      	str	r2, [sp, #0]
 80058de:	462b      	mov	r3, r5
 80058e0:	4622      	mov	r2, r4
 80058e2:	4601      	mov	r1, r0
 80058e4:	4804      	ldr	r0, [pc, #16]	; (80058f8 <netif_do_set_gw+0x80>)
 80058e6:	f00b feed 	bl	80116c4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bdb0      	pop	{r4, r5, r7, pc}
 80058f8:	08012de4 	.word	0x08012de4

080058fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <netif_set_addr+0x90>)
 800591a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005922:	4b1a      	ldr	r3, [pc, #104]	; (800598c <netif_set_addr+0x90>)
 8005924:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <netif_set_addr+0x90>)
 800592e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <netif_set_addr+0x42>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <netif_set_addr+0x46>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <netif_set_addr+0x48>
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800594c:	f107 0310 	add.w	r3, r7, #16
 8005950:	461a      	mov	r2, r3
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fef7 	bl	8005748 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff ff48 	bl	80057f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ff85 	bl	8005878 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005974:	f107 0310 	add.w	r3, r7, #16
 8005978:	461a      	mov	r2, r3
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff fee3 	bl	8005748 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005982:	bf00      	nop
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	08017678 	.word	0x08017678

08005990 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005998:	4a0d      	ldr	r2, [pc, #52]	; (80059d0 <netif_set_default+0x40>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <netif_set_default+0x1e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80059aa:	4619      	mov	r1, r3
 80059ac:	e000      	b.n	80059b0 <netif_set_default+0x20>
 80059ae:	2127      	movs	r1, #39	; 0x27
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <netif_set_default+0x2e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80059bc:	e000      	b.n	80059c0 <netif_set_default+0x30>
 80059be:	2327      	movs	r3, #39	; 0x27
 80059c0:	461a      	mov	r2, r3
 80059c2:	4804      	ldr	r0, [pc, #16]	; (80059d4 <netif_set_default+0x44>)
 80059c4:	f00b fe7e 	bl	80116c4 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20006980 	.word	0x20006980
 80059d4:	08012e58 	.word	0x08012e58

080059d8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <netif_set_up+0x1e>
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <netif_set_up+0x5c>)
 80059e8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80059ec:	4912      	ldr	r1, [pc, #72]	; (8005a38 <netif_set_up+0x60>)
 80059ee:	4813      	ldr	r0, [pc, #76]	; (8005a3c <netif_set_up+0x64>)
 80059f0:	f00b fe68 	bl	80116c4 <iprintf>
 80059f4:	e01b      	b.n	8005a2e <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d114      	bne.n	8005a2e <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <netif_set_up+0x4e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a26:	2103      	movs	r1, #3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f809 	bl	8005a40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	08012bc0 	.word	0x08012bc0
 8005a38:	08012e80 	.word	0x08012e80
 8005a3c:	08012c10 	.word	0x08012c10

08005a40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <netif_issue_reports+0x20>
 8005a52:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <netif_issue_reports+0x74>)
 8005a54:	f240 326d 	movw	r2, #877	; 0x36d
 8005a58:	4917      	ldr	r1, [pc, #92]	; (8005ab8 <netif_issue_reports+0x78>)
 8005a5a:	4818      	ldr	r0, [pc, #96]	; (8005abc <netif_issue_reports+0x7c>)
 8005a5c:	f00b fe32 	bl	80116c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01e      	beq.n	8005aac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d017      	beq.n	8005aac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f009 ffe7 	bl	800fa78 <etharp_request>
 8005aaa:	e000      	b.n	8005aae <netif_issue_reports+0x6e>
    return;
 8005aac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08012bc0 	.word	0x08012bc0
 8005ab8:	08012e9c 	.word	0x08012e9c
 8005abc:	08012c10 	.word	0x08012c10

08005ac0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <netif_set_down+0x1e>
 8005ace:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <netif_set_down+0x68>)
 8005ad0:	f240 329b 	movw	r2, #923	; 0x39b
 8005ad4:	4915      	ldr	r1, [pc, #84]	; (8005b2c <netif_set_down+0x6c>)
 8005ad6:	4816      	ldr	r0, [pc, #88]	; (8005b30 <netif_set_down+0x70>)
 8005ad8:	f00b fdf4 	bl	80116c4 <iprintf>
 8005adc:	e021      	b.n	8005b22 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f009 faff 	bl	800f110 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <netif_set_down+0x62>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
  }
}
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08012bc0 	.word	0x08012bc0
 8005b2c:	08012ec0 	.word	0x08012ec0
 8005b30:	08012c10 	.word	0x08012c10

08005b34 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005b40:	f06f 030b 	mvn.w	r3, #11
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <netif_get_by_index+0x48>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e00c      	b.n	8005b82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b6e:	3301      	adds	r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	79fa      	ldrb	r2, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d101      	bne.n	8005b7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e006      	b.n	8005b8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ef      	bne.n	8005b68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	2000697c 	.word	0x2000697c

08005b9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <pbuf_free_ooseq+0x3c>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <pbuf_free_ooseq+0x40>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e00d      	b.n	8005bcc <pbuf_free_ooseq+0x30>
    if (pcb->ooseq != NULL) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <pbuf_free_ooseq+0x2a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 8005bb8:	4809      	ldr	r0, [pc, #36]	; (8005be0 <pbuf_free_ooseq+0x44>)
 8005bba:	f00b fe0b 	bl	80117d4 <puts>
      tcp_free_ooseq(pcb);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f002 f9b6 	bl	8007f30 <tcp_free_ooseq>
      return;
 8005bc4:	e005      	b.n	8005bd2 <pbuf_free_ooseq+0x36>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1ee      	bne.n	8005bb0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20006984 	.word	0x20006984
 8005bdc:	2000698c 	.word	0x2000698c
 8005be0:	08012f60 	.word	0x08012f60

08005be4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <pbuf_pool_is_empty+0x14>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20006984 	.word	0x20006984

08005bfc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4611      	mov	r1, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	80fb      	strh	r3, [r7, #6]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88ba      	ldrh	r2, [r7, #4]
 8005c28:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005c2a:	8b3b      	ldrh	r3, [r7, #24]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	7f3a      	ldrb	r2, [r7, #28]
 8005c36:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	73da      	strb	r2, [r3, #15]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	80bb      	strh	r3, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 8005c66:	88bb      	ldrh	r3, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4871      	ldr	r0, [pc, #452]	; (8005e30 <pbuf_alloc+0x1e0>)
 8005c6c:	f00b fd2a 	bl	80116c4 <iprintf>

  switch (type) {
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	2b41      	cmp	r3, #65	; 0x41
 8005c74:	d00b      	beq.n	8005c8e <pbuf_alloc+0x3e>
 8005c76:	2b41      	cmp	r3, #65	; 0x41
 8005c78:	dc02      	bgt.n	8005c80 <pbuf_alloc+0x30>
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d007      	beq.n	8005c8e <pbuf_alloc+0x3e>
 8005c7e:	e0c2      	b.n	8005e06 <pbuf_alloc+0x1b6>
 8005c80:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c84:	d00b      	beq.n	8005c9e <pbuf_alloc+0x4e>
 8005c86:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c8a:	d070      	beq.n	8005d6e <pbuf_alloc+0x11e>
 8005c8c:	e0bb      	b.n	8005e06 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	88bb      	ldrh	r3, [r7, #4]
 8005c92:	4619      	mov	r1, r3
 8005c94:	2000      	movs	r0, #0
 8005c96:	f000 f8db 	bl	8005e50 <pbuf_alloc_reference>
 8005c9a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005c9c:	e0bd      	b.n	8005e1a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005ca6:	88bb      	ldrh	r3, [r7, #4]
 8005ca8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005caa:	2008      	movs	r0, #8
 8005cac:	f7ff fb50 	bl	8005350 <memp_malloc>
 8005cb0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005cb8:	f7ff ff94 	bl	8005be4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cc4:	f000 faea 	bl	800629c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e0ad      	b.n	8005e28 <pbuf_alloc+0x1d8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cce:	3303      	adds	r3, #3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8b7a      	ldrh	r2, [r7, #26]
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	bf28      	it	cs
 8005ce4:	4613      	movcs	r3, r2
 8005ce6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cea:	3310      	adds	r3, #16
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3303      	adds	r3, #3
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	89f9      	ldrh	r1, [r7, #14]
 8005cfa:	8b7a      	ldrh	r2, [r7, #26]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	460b      	mov	r3, r1
 8005d06:	4601      	mov	r1, r0
 8005d08:	6938      	ldr	r0, [r7, #16]
 8005d0a:	f7ff ff77 	bl	8005bfc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <pbuf_alloc+0xd8>
 8005d1a:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <pbuf_alloc+0x1e4>)
 8005d1c:	f240 1201 	movw	r2, #257	; 0x101
 8005d20:	4945      	ldr	r1, [pc, #276]	; (8005e38 <pbuf_alloc+0x1e8>)
 8005d22:	4846      	ldr	r0, [pc, #280]	; (8005e3c <pbuf_alloc+0x1ec>)
 8005d24:	f00b fcce 	bl	80116c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005d28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d2a:	3303      	adds	r3, #3
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005d34:	d106      	bne.n	8005d44 <pbuf_alloc+0xf4>
 8005d36:	4b3f      	ldr	r3, [pc, #252]	; (8005e34 <pbuf_alloc+0x1e4>)
 8005d38:	f240 1203 	movw	r2, #259	; 0x103
 8005d3c:	4940      	ldr	r1, [pc, #256]	; (8005e40 <pbuf_alloc+0x1f0>)
 8005d3e:	483f      	ldr	r0, [pc, #252]	; (8005e3c <pbuf_alloc+0x1ec>)
 8005d40:	f00b fcc0 	bl	80116c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	e002      	b.n	8005d56 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005d5a:	8b7a      	ldrh	r2, [r7, #26]
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005d66:	8b7b      	ldrh	r3, [r7, #26]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d19e      	bne.n	8005caa <pbuf_alloc+0x5a>
      break;
 8005d6c:	e055      	b.n	8005e1a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d70:	3303      	adds	r3, #3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	3303      	adds	r3, #3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f023 0303 	bic.w	r3, r3, #3
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005d8a:	8b3b      	ldrh	r3, [r7, #24]
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005d90:	8b3a      	ldrh	r2, [r7, #24]
 8005d92:	88bb      	ldrh	r3, [r7, #4]
 8005d94:	3303      	adds	r3, #3
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d306      	bcc.n	8005dac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005d9e:	8afa      	ldrh	r2, [r7, #22]
 8005da0:	88bb      	ldrh	r3, [r7, #4]
 8005da2:	3303      	adds	r3, #3
 8005da4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d201      	bcs.n	8005db0 <pbuf_alloc+0x160>
        return NULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e03b      	b.n	8005e28 <pbuf_alloc+0x1d8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff f94e 	bl	8005054 <mem_malloc>
 8005db8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <pbuf_alloc+0x174>
        return NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e031      	b.n	8005e28 <pbuf_alloc+0x1d8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	4413      	add	r3, r2
 8005dcc:	3303      	adds	r3, #3
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	88b9      	ldrh	r1, [r7, #4]
 8005dd6:	88ba      	ldrh	r2, [r7, #4]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	887b      	ldrh	r3, [r7, #2]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	460b      	mov	r3, r1
 8005de2:	4601      	mov	r1, r0
 8005de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005de6:	f7ff ff09 	bl	8005bfc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d010      	beq.n	8005e18 <pbuf_alloc+0x1c8>
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <pbuf_alloc+0x1e4>)
 8005df8:	f240 1223 	movw	r2, #291	; 0x123
 8005dfc:	4911      	ldr	r1, [pc, #68]	; (8005e44 <pbuf_alloc+0x1f4>)
 8005dfe:	480f      	ldr	r0, [pc, #60]	; (8005e3c <pbuf_alloc+0x1ec>)
 8005e00:	f00b fc60 	bl	80116c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005e04:	e008      	b.n	8005e18 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <pbuf_alloc+0x1e4>)
 8005e08:	f240 1227 	movw	r2, #295	; 0x127
 8005e0c:	490e      	ldr	r1, [pc, #56]	; (8005e48 <pbuf_alloc+0x1f8>)
 8005e0e:	480b      	ldr	r0, [pc, #44]	; (8005e3c <pbuf_alloc+0x1ec>)
 8005e10:	f00b fc58 	bl	80116c4 <iprintf>
      return NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e007      	b.n	8005e28 <pbuf_alloc+0x1d8>
      break;
 8005e18:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 8005e1a:	88bb      	ldrh	r3, [r7, #4]
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	4619      	mov	r1, r3
 8005e20:	480a      	ldr	r0, [pc, #40]	; (8005e4c <pbuf_alloc+0x1fc>)
 8005e22:	f00b fc4f 	bl	80116c4 <iprintf>
  return p;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3728      	adds	r7, #40	; 0x28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	08012f90 	.word	0x08012f90
 8005e34:	08012fa8 	.word	0x08012fa8
 8005e38:	08012fd8 	.word	0x08012fd8
 8005e3c:	08013008 	.word	0x08013008
 8005e40:	08013030 	.word	0x08013030
 8005e44:	08013064 	.word	0x08013064
 8005e48:	08013090 	.word	0x08013090
 8005e4c:	080130ac 	.word	0x080130ac

08005e50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005e60:	883b      	ldrh	r3, [r7, #0]
 8005e62:	2b41      	cmp	r3, #65	; 0x41
 8005e64:	d009      	beq.n	8005e7a <pbuf_alloc_reference+0x2a>
 8005e66:	883b      	ldrh	r3, [r7, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d006      	beq.n	8005e7a <pbuf_alloc_reference+0x2a>
 8005e6c:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <pbuf_alloc_reference+0x70>)
 8005e6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005e72:	4914      	ldr	r1, [pc, #80]	; (8005ec4 <pbuf_alloc_reference+0x74>)
 8005e74:	4814      	ldr	r0, [pc, #80]	; (8005ec8 <pbuf_alloc_reference+0x78>)
 8005e76:	f00b fc25 	bl	80116c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005e7a:	2007      	movs	r0, #7
 8005e7c:	f7ff fa68 	bl	8005350 <memp_malloc>
 8005e80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8005e88:	883b      	ldrh	r3, [r7, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <pbuf_alloc_reference+0x42>
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <pbuf_alloc_reference+0x7c>)
 8005e90:	e000      	b.n	8005e94 <pbuf_alloc_reference+0x44>
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <pbuf_alloc_reference+0x80>)
 8005e94:	4619      	mov	r1, r3
 8005e96:	480f      	ldr	r0, [pc, #60]	; (8005ed4 <pbuf_alloc_reference+0x84>)
 8005e98:	f00b fc14 	bl	80116c4 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e00b      	b.n	8005eb8 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005ea0:	8879      	ldrh	r1, [r7, #2]
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	883b      	ldrh	r3, [r7, #0]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	460b      	mov	r3, r1
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fea3 	bl	8005bfc <pbuf_init_alloced_pbuf>
  return p;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08012fa8 	.word	0x08012fa8
 8005ec4:	080130cc 	.word	0x080130cc
 8005ec8:	08013008 	.word	0x08013008
 8005ecc:	080130e0 	.word	0x080130e0
 8005ed0:	080130e4 	.word	0x080130e4
 8005ed4:	080130e8 	.word	0x080130e8

08005ed8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	81bb      	strh	r3, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8005ef0:	89bb      	ldrh	r3, [r7, #12]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4817      	ldr	r0, [pc, #92]	; (8005f54 <pbuf_alloced_custom+0x7c>)
 8005ef6:	f00b fbe5 	bl	80116c4 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005efa:	8a7b      	ldrh	r3, [r7, #18]
 8005efc:	3303      	adds	r3, #3
 8005efe:	f023 0203 	bic.w	r2, r3, #3
 8005f02:	89bb      	ldrh	r3, [r7, #12]
 8005f04:	441a      	add	r2, r3
 8005f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d906      	bls.n	8005f1a <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 8005f0c:	89bb      	ldrh	r3, [r7, #12]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4811      	ldr	r0, [pc, #68]	; (8005f58 <pbuf_alloced_custom+0x80>)
 8005f12:	f00b fbd7 	bl	80116c4 <iprintf>
    return NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e018      	b.n	8005f4c <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	3303      	adds	r3, #3
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	6a3a      	ldr	r2, [r7, #32]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e001      	b.n	8005f34 <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	89b9      	ldrh	r1, [r7, #12]
 8005f38:	89ba      	ldrh	r2, [r7, #12]
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	897b      	ldrh	r3, [r7, #10]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	460b      	mov	r3, r1
 8005f44:	6979      	ldr	r1, [r7, #20]
 8005f46:	f7ff fe59 	bl	8005bfc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005f4a:	687b      	ldr	r3, [r7, #4]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	0801312c 	.word	0x0801312c
 8005f58:	08013150 	.word	0x08013150

08005f5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <pbuf_realloc+0x20>
 8005f6e:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <pbuf_realloc+0xfc>)
 8005f70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005f74:	4939      	ldr	r1, [pc, #228]	; (800605c <pbuf_realloc+0x100>)
 8005f76:	483a      	ldr	r0, [pc, #232]	; (8006060 <pbuf_realloc+0x104>)
 8005f78:	f00b fba4 	bl	80116c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	891b      	ldrh	r3, [r3, #8]
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d264      	bcs.n	8006050 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	891a      	ldrh	r2, [r3, #8]
 8005f8a:	887b      	ldrh	r3, [r7, #2]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	817b      	strh	r3, [r7, #10]
  q = p;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005f98:	e018      	b.n	8005fcc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	895b      	ldrh	r3, [r3, #10]
 8005f9e:	897a      	ldrh	r2, [r7, #10]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	891a      	ldrh	r2, [r3, #8]
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <pbuf_realloc+0x70>
 8005fbe:	4b26      	ldr	r3, [pc, #152]	; (8006058 <pbuf_realloc+0xfc>)
 8005fc0:	f240 12af 	movw	r2, #431	; 0x1af
 8005fc4:	4927      	ldr	r1, [pc, #156]	; (8006064 <pbuf_realloc+0x108>)
 8005fc6:	4826      	ldr	r0, [pc, #152]	; (8006060 <pbuf_realloc+0x104>)
 8005fc8:	f00b fb7c 	bl	80116c4 <iprintf>
  while (rem_len > q->len) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	895b      	ldrh	r3, [r3, #10]
 8005fd0:	897a      	ldrh	r2, [r7, #10]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d8e1      	bhi.n	8005f9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	7b1b      	ldrb	r3, [r3, #12]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d122      	bne.n	8006028 <pbuf_realloc+0xcc>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	895b      	ldrh	r3, [r3, #10]
 8005fe6:	897a      	ldrh	r2, [r7, #10]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d01d      	beq.n	8006028 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	7b5b      	ldrb	r3, [r3, #13]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d117      	bne.n	8006028 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	b29a      	uxth	r2, r3
 8006004:	897b      	ldrh	r3, [r7, #10]
 8006006:	4413      	add	r3, r2
 8006008:	b29b      	uxth	r3, r3
 800600a:	4619      	mov	r1, r3
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7fe ff1f 	bl	8004e50 <mem_trim>
 8006012:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <pbuf_realloc+0xcc>
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <pbuf_realloc+0xfc>)
 800601c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006020:	4911      	ldr	r1, [pc, #68]	; (8006068 <pbuf_realloc+0x10c>)
 8006022:	480f      	ldr	r0, [pc, #60]	; (8006060 <pbuf_realloc+0x104>)
 8006024:	f00b fb4e 	bl	80116c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	897a      	ldrh	r2, [r7, #10]
 800602c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	895a      	ldrh	r2, [r3, #10]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f92a 	bl	800629c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e000      	b.n	8006052 <pbuf_realloc+0xf6>
    return;
 8006050:	bf00      	nop

}
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08012fa8 	.word	0x08012fa8
 800605c:	08013184 	.word	0x08013184
 8006060:	08013008 	.word	0x08013008
 8006064:	0801319c 	.word	0x0801319c
 8006068:	080131b4 	.word	0x080131b4

0800606c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <pbuf_add_header_impl+0x22>
 8006080:	4b32      	ldr	r3, [pc, #200]	; (800614c <pbuf_add_header_impl+0xe0>)
 8006082:	f240 12df 	movw	r2, #479	; 0x1df
 8006086:	4932      	ldr	r1, [pc, #200]	; (8006150 <pbuf_add_header_impl+0xe4>)
 8006088:	4832      	ldr	r0, [pc, #200]	; (8006154 <pbuf_add_header_impl+0xe8>)
 800608a:	f00b fb1b 	bl	80116c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <pbuf_add_header_impl+0x30>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609a:	d301      	bcc.n	80060a0 <pbuf_add_header_impl+0x34>
    return 1;
 800609c:	2301      	movs	r3, #1
 800609e:	e051      	b.n	8006144 <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <pbuf_add_header_impl+0x3e>
    return 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e04c      	b.n	8006144 <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	891a      	ldrh	r2, [r3, #8]
 80060b2:	8a7b      	ldrh	r3, [r7, #18]
 80060b4:	4413      	add	r3, r2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8a7a      	ldrh	r2, [r7, #18]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d901      	bls.n	80060c2 <pbuf_add_header_impl+0x56>
    return 1;
 80060be:	2301      	movs	r3, #1
 80060c0:	e040      	b.n	8006144 <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7b1b      	ldrb	r3, [r3, #12]
 80060c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80060c8:	8a3b      	ldrh	r3, [r7, #16]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d013      	beq.n	80060fa <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	425b      	negs	r3, r3
 80060da:	4413      	add	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3310      	adds	r3, #16
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d214      	bcs.n	8006112 <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3310      	adds	r3, #16
 80060ec:	461a      	mov	r2, r3
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4819      	ldr	r0, [pc, #100]	; (8006158 <pbuf_add_header_impl+0xec>)
 80060f2:	f00b fae7 	bl	80116c4 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e024      	b.n	8006144 <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d006      	beq.n	800610e <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	425b      	negs	r3, r3
 8006108:	4413      	add	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e001      	b.n	8006112 <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800610e:	2301      	movs	r3, #1
 8006110:	e018      	b.n	8006144 <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	8a7b      	ldrh	r3, [r7, #18]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4810      	ldr	r0, [pc, #64]	; (800615c <pbuf_add_header_impl+0xf0>)
 800611c:	f00b fad2 	bl	80116c4 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	895a      	ldrh	r2, [r3, #10]
 800612a:	8a7b      	ldrh	r3, [r7, #18]
 800612c:	4413      	add	r3, r2
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	891a      	ldrh	r2, [r3, #8]
 8006138:	8a7b      	ldrh	r3, [r7, #18]
 800613a:	4413      	add	r3, r2
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	811a      	strh	r2, [r3, #8]


  return 0;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	08012fa8 	.word	0x08012fa8
 8006150:	080131d0 	.word	0x080131d0
 8006154:	08013008 	.word	0x08013008
 8006158:	080131dc 	.word	0x080131dc
 800615c:	08013228 	.word	0x08013228

08006160 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800616a:	2200      	movs	r2, #0
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ff7c 	bl	800606c <pbuf_add_header_impl>
 8006174:	4603      	mov	r3, r0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <pbuf_remove_header+0x1e>
 8006190:	4b23      	ldr	r3, [pc, #140]	; (8006220 <pbuf_remove_header+0xa0>)
 8006192:	f240 224b 	movw	r2, #587	; 0x24b
 8006196:	4923      	ldr	r1, [pc, #140]	; (8006224 <pbuf_remove_header+0xa4>)
 8006198:	4823      	ldr	r0, [pc, #140]	; (8006228 <pbuf_remove_header+0xa8>)
 800619a:	f00b fa93 	bl	80116c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <pbuf_remove_header+0x2c>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061aa:	d301      	bcc.n	80061b0 <pbuf_remove_header+0x30>
    return 1;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e033      	b.n	8006218 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <pbuf_remove_header+0x3a>
    return 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e02e      	b.n	8006218 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	895b      	ldrh	r3, [r3, #10]
 80061c2:	89fa      	ldrh	r2, [r7, #14]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d908      	bls.n	80061da <pbuf_remove_header+0x5a>
 80061c8:	4b15      	ldr	r3, [pc, #84]	; (8006220 <pbuf_remove_header+0xa0>)
 80061ca:	f240 2255 	movw	r2, #597	; 0x255
 80061ce:	4917      	ldr	r1, [pc, #92]	; (800622c <pbuf_remove_header+0xac>)
 80061d0:	4815      	ldr	r0, [pc, #84]	; (8006228 <pbuf_remove_header+0xa8>)
 80061d2:	f00b fa77 	bl	80116c4 <iprintf>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e01e      	b.n	8006218 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	441a      	add	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	895a      	ldrh	r2, [r3, #10]
 80061f0:	89fb      	ldrh	r3, [r7, #14]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	891a      	ldrh	r2, [r3, #8]
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	89fb      	ldrh	r3, [r7, #14]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4807      	ldr	r0, [pc, #28]	; (8006230 <pbuf_remove_header+0xb0>)
 8006212:	f00b fa57 	bl	80116c4 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08012fa8 	.word	0x08012fa8
 8006224:	080131d0 	.word	0x080131d0
 8006228:	08013008 	.word	0x08013008
 800622c:	08013250 	.word	0x08013250
 8006230:	08013270 	.word	0x08013270

08006234 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	807b      	strh	r3, [r7, #2]
 8006240:	4613      	mov	r3, r2
 8006242:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da08      	bge.n	800625e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800624c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006250:	425b      	negs	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff93 	bl	8006180 <pbuf_remove_header>
 800625a:	4603      	mov	r3, r0
 800625c:	e007      	b.n	800626e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800625e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006262:	787a      	ldrb	r2, [r7, #1]
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ff00 	bl	800606c <pbuf_add_header_impl>
 800626c:	4603      	mov	r3, r0
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006286:	2201      	movs	r2, #1
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ffd2 	bl	8006234 <pbuf_header_impl>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10e      	bne.n	80062c8 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <pbuf_free+0x22>
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <pbuf_free+0x118>)
 80062b2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80062b6:	4940      	ldr	r1, [pc, #256]	; (80063b8 <pbuf_free+0x11c>)
 80062b8:	4840      	ldr	r0, [pc, #256]	; (80063bc <pbuf_free+0x120>)
 80062ba:	f00b fa03 	bl	80116c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80062be:	4840      	ldr	r0, [pc, #256]	; (80063c0 <pbuf_free+0x124>)
 80062c0:	f00b fa88 	bl	80117d4 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e071      	b.n	80063ac <pbuf_free+0x110>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	483e      	ldr	r0, [pc, #248]	; (80063c4 <pbuf_free+0x128>)
 80062cc:	f00b f9fa 	bl	80116c4 <iprintf>

  PERF_START;

  count = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80062d4:	e066      	b.n	80063a4 <pbuf_free+0x108>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7b9b      	ldrb	r3, [r3, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <pbuf_free+0x50>
 80062de:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <pbuf_free+0x118>)
 80062e0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80062e4:	4938      	ldr	r1, [pc, #224]	; (80063c8 <pbuf_free+0x12c>)
 80062e6:	4835      	ldr	r0, [pc, #212]	; (80063bc <pbuf_free+0x120>)
 80062e8:	f00b f9ec 	bl	80116c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7b9b      	ldrb	r3, [r3, #14]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	739a      	strb	r2, [r3, #14]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7b9b      	ldrb	r3, [r3, #14]
 80062fc:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80062fe:	7dbb      	ldrb	r3, [r7, #22]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d147      	bne.n	8006394 <pbuf_free+0xf8>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	482f      	ldr	r0, [pc, #188]	; (80063cc <pbuf_free+0x130>)
 800630e:	f00b f9d9 	bl	80116c4 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7b1b      	ldrb	r3, [r3, #12]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7b5b      	ldrb	r3, [r3, #13]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d011      	beq.n	800634c <pbuf_free+0xb0>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <pbuf_free+0xa6>
 8006334:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <pbuf_free+0x118>)
 8006336:	f240 22ff 	movw	r2, #767	; 0x2ff
 800633a:	4925      	ldr	r1, [pc, #148]	; (80063d0 <pbuf_free+0x134>)
 800633c:	481f      	ldr	r0, [pc, #124]	; (80063bc <pbuf_free+0x120>)
 800633e:	f00b f9c1 	bl	80116c4 <iprintf>
        pc->custom_free_function(p);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
 800634a:	e01d      	b.n	8006388 <pbuf_free+0xec>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d104      	bne.n	800635c <pbuf_free+0xc0>
          memp_free(MEMP_PBUF_POOL, p);
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	2008      	movs	r0, #8
 8006356:	f7ff f847 	bl	80053e8 <memp_free>
 800635a:	e015      	b.n	8006388 <pbuf_free+0xec>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d104      	bne.n	800636c <pbuf_free+0xd0>
          memp_free(MEMP_PBUF, p);
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	2007      	movs	r0, #7
 8006366:	f7ff f83f 	bl	80053e8 <memp_free>
 800636a:	e00d      	b.n	8006388 <pbuf_free+0xec>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <pbuf_free+0xde>
          mem_free(p);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fe fcee 	bl	8004d54 <mem_free>
 8006378:	e006      	b.n	8006388 <pbuf_free+0xec>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <pbuf_free+0x118>)
 800637c:	f240 320f 	movw	r2, #783	; 0x30f
 8006380:	4914      	ldr	r1, [pc, #80]	; (80063d4 <pbuf_free+0x138>)
 8006382:	480e      	ldr	r0, [pc, #56]	; (80063bc <pbuf_free+0x120>)
 8006384:	f00b f99e 	bl	80116c4 <iprintf>
        }
      }
      count++;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	3301      	adds	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	e007      	b.n	80063a4 <pbuf_free+0x108>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 8006394:	7dbb      	ldrb	r3, [r7, #22]
 8006396:	461a      	mov	r2, r3
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	480f      	ldr	r0, [pc, #60]	; (80063d8 <pbuf_free+0x13c>)
 800639c:	f00b f992 	bl	80116c4 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d195      	bne.n	80062d6 <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	08012fa8 	.word	0x08012fa8
 80063b8:	080131d0 	.word	0x080131d0
 80063bc:	08013008 	.word	0x08013008
 80063c0:	0801329c 	.word	0x0801329c
 80063c4:	080132c0 	.word	0x080132c0
 80063c8:	080132d0 	.word	0x080132d0
 80063cc:	080132e8 	.word	0x080132e8
 80063d0:	08013304 	.word	0x08013304
 80063d4:	08013328 	.word	0x08013328
 80063d8:	0801333c 	.word	0x0801333c

080063dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80063e8:	e005      	b.n	80063f6 <pbuf_clen+0x1a>
    ++len;
 80063ea:	89fb      	ldrh	r3, [r7, #14]
 80063ec:	3301      	adds	r3, #1
 80063ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f6      	bne.n	80063ea <pbuf_clen+0xe>
  }
  return len;
 80063fc:	89fb      	ldrh	r3, [r7, #14]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7b9b      	ldrb	r3, [r3, #14]
 800641e:	3301      	adds	r3, #1
 8006420:	b2da      	uxtb	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7b9b      	ldrb	r3, [r3, #14]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <pbuf_ref+0x30>
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <pbuf_ref+0x38>)
 8006430:	f240 3242 	movw	r2, #834	; 0x342
 8006434:	4904      	ldr	r1, [pc, #16]	; (8006448 <pbuf_ref+0x3c>)
 8006436:	4805      	ldr	r0, [pc, #20]	; (800644c <pbuf_ref+0x40>)
 8006438:	f00b f944 	bl	80116c4 <iprintf>
  }
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08012fa8 	.word	0x08012fa8
 8006448:	08013368 	.word	0x08013368
 800644c:	08013008 	.word	0x08013008

08006450 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <pbuf_cat+0x16>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d107      	bne.n	8006476 <pbuf_cat+0x26>
 8006466:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <pbuf_cat+0x98>)
 8006468:	f240 325a 	movw	r2, #858	; 0x35a
 800646c:	491f      	ldr	r1, [pc, #124]	; (80064ec <pbuf_cat+0x9c>)
 800646e:	4820      	ldr	r0, [pc, #128]	; (80064f0 <pbuf_cat+0xa0>)
 8006470:	f00b f928 	bl	80116c4 <iprintf>
 8006474:	e034      	b.n	80064e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e00a      	b.n	8006492 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	891a      	ldrh	r2, [r3, #8]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	4413      	add	r3, r2
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	891a      	ldrh	r2, [r3, #8]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	895b      	ldrh	r3, [r3, #10]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d006      	beq.n	80064b4 <pbuf_cat+0x64>
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <pbuf_cat+0x98>)
 80064a8:	f240 3262 	movw	r2, #866	; 0x362
 80064ac:	4911      	ldr	r1, [pc, #68]	; (80064f4 <pbuf_cat+0xa4>)
 80064ae:	4810      	ldr	r0, [pc, #64]	; (80064f0 <pbuf_cat+0xa0>)
 80064b0:	f00b f908 	bl	80116c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <pbuf_cat+0x7a>
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <pbuf_cat+0x98>)
 80064be:	f240 3263 	movw	r2, #867	; 0x363
 80064c2:	490d      	ldr	r1, [pc, #52]	; (80064f8 <pbuf_cat+0xa8>)
 80064c4:	480a      	ldr	r0, [pc, #40]	; (80064f0 <pbuf_cat+0xa0>)
 80064c6:	f00b f8fd 	bl	80116c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	891a      	ldrh	r2, [r3, #8]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	891b      	ldrh	r3, [r3, #8]
 80064d2:	4413      	add	r3, r2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	08012fa8 	.word	0x08012fa8
 80064ec:	0801337c 	.word	0x0801337c
 80064f0:	08013008 	.word	0x08013008
 80064f4:	080133b4 	.word	0x080133b4
 80064f8:	080133e4 	.word	0x080133e4

080064fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff ffa1 	bl	8006450 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800650e:	6838      	ldr	r0, [r7, #0]
 8006510:	f7ff ff7c 	bl	800640c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4803      	ldr	r0, [pc, #12]	; (8006528 <pbuf_chain+0x2c>)
 800651a:	f00b f8d3 	bl	80116c4 <iprintf>
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	080133f4 	.word	0x080133f4

0800652c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	2300      	movs	r3, #0
 800653c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4860      	ldr	r0, [pc, #384]	; (80066c4 <pbuf_copy+0x198>)
 8006544:	f00b f8be 	bl	80116c4 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <pbuf_copy+0x34>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <pbuf_copy+0x34>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	891a      	ldrh	r2, [r3, #8]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	891b      	ldrh	r3, [r3, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d209      	bcs.n	8006574 <pbuf_copy+0x48>
 8006560:	4b59      	ldr	r3, [pc, #356]	; (80066c8 <pbuf_copy+0x19c>)
 8006562:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006566:	4959      	ldr	r1, [pc, #356]	; (80066cc <pbuf_copy+0x1a0>)
 8006568:	4859      	ldr	r0, [pc, #356]	; (80066d0 <pbuf_copy+0x1a4>)
 800656a:	f00b f8ab 	bl	80116c4 <iprintf>
 800656e:	f06f 030f 	mvn.w	r3, #15
 8006572:	e0a2      	b.n	80066ba <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	895b      	ldrh	r3, [r3, #10]
 8006578:	461a      	mov	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	1ad2      	subs	r2, r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	895b      	ldrh	r3, [r3, #10]
 8006582:	4619      	mov	r1, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1acb      	subs	r3, r1, r3
 8006588:	429a      	cmp	r2, r3
 800658a:	d306      	bcc.n	800659a <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	461a      	mov	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e005      	b.n	80065a6 <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	895b      	ldrh	r3, [r3, #10]
 800659e:	461a      	mov	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	18d0      	adds	r0, r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4413      	add	r3, r2
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f00b f870 	bl	801169e <memcpy>
    offset_to += len;
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	895b      	ldrh	r3, [r3, #10]
 80065d2:	461a      	mov	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d906      	bls.n	80065e8 <pbuf_copy+0xbc>
 80065da:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <pbuf_copy+0x19c>)
 80065dc:	f240 32d9 	movw	r2, #985	; 0x3d9
 80065e0:	493c      	ldr	r1, [pc, #240]	; (80066d4 <pbuf_copy+0x1a8>)
 80065e2:	483b      	ldr	r0, [pc, #236]	; (80066d0 <pbuf_copy+0x1a4>)
 80065e4:	f00b f86e 	bl	80116c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	895b      	ldrh	r3, [r3, #10]
 80065ec:	461a      	mov	r2, r3
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d906      	bls.n	8006602 <pbuf_copy+0xd6>
 80065f4:	4b34      	ldr	r3, [pc, #208]	; (80066c8 <pbuf_copy+0x19c>)
 80065f6:	f240 32da 	movw	r2, #986	; 0x3da
 80065fa:	4937      	ldr	r1, [pc, #220]	; (80066d8 <pbuf_copy+0x1ac>)
 80065fc:	4834      	ldr	r0, [pc, #208]	; (80066d0 <pbuf_copy+0x1a4>)
 80065fe:	f00b f861 	bl	80116c4 <iprintf>
    if (offset_from >= p_from->len) {
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	895b      	ldrh	r3, [r3, #10]
 8006606:	461a      	mov	r2, r3
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4293      	cmp	r3, r2
 800660c:	d304      	bcc.n	8006618 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	895b      	ldrh	r3, [r3, #10]
 800661c:	461a      	mov	r2, r3
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4293      	cmp	r3, r2
 8006622:	d114      	bne.n	800664e <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <pbuf_copy+0x122>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <pbuf_copy+0x122>
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <pbuf_copy+0x19c>)
 800663c:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006640:	4926      	ldr	r1, [pc, #152]	; (80066dc <pbuf_copy+0x1b0>)
 8006642:	4823      	ldr	r0, [pc, #140]	; (80066d0 <pbuf_copy+0x1a4>)
 8006644:	f00b f83e 	bl	80116c4 <iprintf>
 8006648:	f06f 030f 	mvn.w	r3, #15
 800664c:	e035      	b.n	80066ba <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d013      	beq.n	800667c <pbuf_copy+0x150>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	895a      	ldrh	r2, [r3, #10]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	891b      	ldrh	r3, [r3, #8]
 800665c:	429a      	cmp	r2, r3
 800665e:	d10d      	bne.n	800667c <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <pbuf_copy+0x150>
 8006668:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <pbuf_copy+0x19c>)
 800666a:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800666e:	491c      	ldr	r1, [pc, #112]	; (80066e0 <pbuf_copy+0x1b4>)
 8006670:	4817      	ldr	r0, [pc, #92]	; (80066d0 <pbuf_copy+0x1a4>)
 8006672:	f00b f827 	bl	80116c4 <iprintf>
 8006676:	f06f 0305 	mvn.w	r3, #5
 800667a:	e01e      	b.n	80066ba <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <pbuf_copy+0x17e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	895a      	ldrh	r2, [r3, #10]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	891b      	ldrh	r3, [r3, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d10d      	bne.n	80066aa <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <pbuf_copy+0x17e>
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <pbuf_copy+0x19c>)
 8006698:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800669c:	4910      	ldr	r1, [pc, #64]	; (80066e0 <pbuf_copy+0x1b4>)
 800669e:	480c      	ldr	r0, [pc, #48]	; (80066d0 <pbuf_copy+0x1a4>)
 80066a0:	f00b f810 	bl	80116c4 <iprintf>
 80066a4:	f06f 0305 	mvn.w	r3, #5
 80066a8:	e007      	b.n	80066ba <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f47f af61 	bne.w	8006574 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 80066b2:	480c      	ldr	r0, [pc, #48]	; (80066e4 <pbuf_copy+0x1b8>)
 80066b4:	f00b f88e 	bl	80117d4 <puts>
  return ERR_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	080134b0 	.word	0x080134b0
 80066c8:	08012fa8 	.word	0x08012fa8
 80066cc:	080134c4 	.word	0x080134c4
 80066d0:	08013008 	.word	0x08013008
 80066d4:	080134f4 	.word	0x080134f4
 80066d8:	0801350c 	.word	0x0801350c
 80066dc:	08013528 	.word	0x08013528
 80066e0:	08013538 	.word	0x08013538
 80066e4:	08013564 	.word	0x08013564

080066e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	460b      	mov	r3, r1
 80066f8:	80fb      	strh	r3, [r7, #6]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <pbuf_copy_partial+0x36>
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <pbuf_copy_partial+0xd4>)
 800670e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006712:	492b      	ldr	r1, [pc, #172]	; (80067c0 <pbuf_copy_partial+0xd8>)
 8006714:	482b      	ldr	r0, [pc, #172]	; (80067c4 <pbuf_copy_partial+0xdc>)
 8006716:	f00a ffd5 	bl	80116c4 <iprintf>
 800671a:	2300      	movs	r3, #0
 800671c:	e04a      	b.n	80067b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d108      	bne.n	8006736 <pbuf_copy_partial+0x4e>
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <pbuf_copy_partial+0xd4>)
 8006726:	f240 420b 	movw	r2, #1035	; 0x40b
 800672a:	4927      	ldr	r1, [pc, #156]	; (80067c8 <pbuf_copy_partial+0xe0>)
 800672c:	4825      	ldr	r0, [pc, #148]	; (80067c4 <pbuf_copy_partial+0xdc>)
 800672e:	f00a ffc9 	bl	80116c4 <iprintf>
 8006732:	2300      	movs	r3, #0
 8006734:	e03e      	b.n	80067b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e034      	b.n	80067a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800673c:	88bb      	ldrh	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <pbuf_copy_partial+0x70>
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	895b      	ldrh	r3, [r3, #10]
 8006746:	88ba      	ldrh	r2, [r7, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d305      	bcc.n	8006758 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	895b      	ldrh	r3, [r3, #10]
 8006750:	88ba      	ldrh	r2, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	80bb      	strh	r3, [r7, #4]
 8006756:	e023      	b.n	80067a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	895a      	ldrh	r2, [r3, #10]
 800675c:	88bb      	ldrh	r3, [r7, #4]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006762:	8b3a      	ldrh	r2, [r7, #24]
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	429a      	cmp	r2, r3
 8006768:	d901      	bls.n	800676e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800676e:	8b7b      	ldrh	r3, [r7, #26]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	18d0      	adds	r0, r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	88bb      	ldrh	r3, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	8b3a      	ldrh	r2, [r7, #24]
 800677e:	4619      	mov	r1, r3
 8006780:	f00a ff8d 	bl	801169e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006784:	8afa      	ldrh	r2, [r7, #22]
 8006786:	8b3b      	ldrh	r3, [r7, #24]
 8006788:	4413      	add	r3, r2
 800678a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800678c:	8b7a      	ldrh	r2, [r7, #26]
 800678e:	8b3b      	ldrh	r3, [r7, #24]
 8006790:	4413      	add	r3, r2
 8006792:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	8b3b      	ldrh	r3, [r7, #24]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <pbuf_copy_partial+0xca>
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1c4      	bne.n	800673c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80067b2:	8afb      	ldrh	r3, [r7, #22]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3720      	adds	r7, #32
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	08012fa8 	.word	0x08012fa8
 80067c0:	08013588 	.word	0x08013588
 80067c4:	08013008 	.word	0x08013008
 80067c8:	080135a8 	.word	0x080135a8

080067cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	603a      	str	r2, [r7, #0]
 80067d6:	71fb      	strb	r3, [r7, #7]
 80067d8:	460b      	mov	r3, r1
 80067da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	8919      	ldrh	r1, [r3, #8]
 80067e0:	88ba      	ldrh	r2, [r7, #4]
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fa33 	bl	8005c50 <pbuf_alloc>
 80067ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <pbuf_clone+0x2a>
    return NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e011      	b.n	800681a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fe97 	bl	800652c <pbuf_copy>
 80067fe:	4603      	mov	r3, r0
 8006800:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006802:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <pbuf_clone+0x4c>
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <pbuf_clone+0x58>)
 800680c:	f240 5224 	movw	r2, #1316	; 0x524
 8006810:	4905      	ldr	r1, [pc, #20]	; (8006828 <pbuf_clone+0x5c>)
 8006812:	4806      	ldr	r0, [pc, #24]	; (800682c <pbuf_clone+0x60>)
 8006814:	f00a ff56 	bl	80116c4 <iprintf>
  return q;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	08012fa8 	.word	0x08012fa8
 8006828:	080136b4 	.word	0x080136b4
 800682c:	08013008 	.word	0x08013008

08006830 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006834:	f00a ffd6 	bl	80117e4 <rand>
 8006838:	4603      	mov	r3, r0
 800683a:	b29b      	uxth	r3, r3
 800683c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006840:	b29b      	uxth	r3, r3
 8006842:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006846:	b29a      	uxth	r2, r3
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <tcp_init+0x20>)
 800684a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}
 8006850:	2000000a 	.word	0x2000000a

08006854 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	7d1b      	ldrb	r3, [r3, #20]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d105      	bne.n	8006870 <tcp_free+0x1c>
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <tcp_free+0x2c>)
 8006866:	22d4      	movs	r2, #212	; 0xd4
 8006868:	4906      	ldr	r1, [pc, #24]	; (8006884 <tcp_free+0x30>)
 800686a:	4807      	ldr	r0, [pc, #28]	; (8006888 <tcp_free+0x34>)
 800686c:	f00a ff2a 	bl	80116c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	2001      	movs	r0, #1
 8006874:	f7fe fdb8 	bl	80053e8 <memp_free>
}
 8006878:	bf00      	nop
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	08013740 	.word	0x08013740
 8006884:	08013770 	.word	0x08013770
 8006888:	08013784 	.word	0x08013784

0800688c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	7d1b      	ldrb	r3, [r3, #20]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d105      	bne.n	80068a8 <tcp_free_listen+0x1c>
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <tcp_free_listen+0x2c>)
 800689e:	22df      	movs	r2, #223	; 0xdf
 80068a0:	4906      	ldr	r1, [pc, #24]	; (80068bc <tcp_free_listen+0x30>)
 80068a2:	4807      	ldr	r0, [pc, #28]	; (80068c0 <tcp_free_listen+0x34>)
 80068a4:	f00a ff0e 	bl	80116c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	2002      	movs	r0, #2
 80068ac:	f7fe fd9c 	bl	80053e8 <memp_free>
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	08013740 	.word	0x08013740
 80068bc:	080137ac 	.word	0x080137ac
 80068c0:	08013784 	.word	0x08013784

080068c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80068c8:	f000 fe98 	bl	80075fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <tcp_tmr+0x28>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <tcp_tmr+0x28>)
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <tcp_tmr+0x28>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80068e4:	f000 fb4c 	bl	8006f80 <tcp_slowtmr>
  }
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200000cd 	.word	0x200000cd

080068f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <tcp_remove_listener+0x1c>
 8006900:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <tcp_remove_listener+0x48>)
 8006902:	22ff      	movs	r2, #255	; 0xff
 8006904:	490d      	ldr	r1, [pc, #52]	; (800693c <tcp_remove_listener+0x4c>)
 8006906:	480e      	ldr	r0, [pc, #56]	; (8006940 <tcp_remove_listener+0x50>)
 8006908:	f00a fedc 	bl	80116c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e00a      	b.n	8006928 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d102      	bne.n	8006922 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f1      	bne.n	8006912 <tcp_remove_listener+0x22>
    }
  }
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	08013740 	.word	0x08013740
 800693c:	080137c8 	.word	0x080137c8
 8006940:	08013784 	.word	0x08013784

08006944 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <tcp_listen_closed+0x1c>
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <tcp_listen_closed+0x60>)
 8006954:	f240 1211 	movw	r2, #273	; 0x111
 8006958:	4913      	ldr	r1, [pc, #76]	; (80069a8 <tcp_listen_closed+0x64>)
 800695a:	4814      	ldr	r0, [pc, #80]	; (80069ac <tcp_listen_closed+0x68>)
 800695c:	f00a feb2 	bl	80116c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	7d1b      	ldrb	r3, [r3, #20]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d006      	beq.n	8006976 <tcp_listen_closed+0x32>
 8006968:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <tcp_listen_closed+0x60>)
 800696a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800696e:	4910      	ldr	r1, [pc, #64]	; (80069b0 <tcp_listen_closed+0x6c>)
 8006970:	480e      	ldr	r0, [pc, #56]	; (80069ac <tcp_listen_closed+0x68>)
 8006972:	f00a fea7 	bl	80116c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006976:	2301      	movs	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e00b      	b.n	8006994 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800697c:	4a0d      	ldr	r2, [pc, #52]	; (80069b4 <tcp_listen_closed+0x70>)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ffb1 	bl	80068f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b03      	cmp	r3, #3
 8006998:	d9f0      	bls.n	800697c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	08013740 	.word	0x08013740
 80069a8:	080137f0 	.word	0x080137f0
 80069ac:	08013784 	.word	0x08013784
 80069b0:	080137fc 	.word	0x080137fc
 80069b4:	0801762c 	.word	0x0801762c

080069b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80069b8:	b5b0      	push	{r4, r5, r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af04      	add	r7, sp, #16
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <tcp_close_shutdown+0x20>
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <tcp_close_shutdown+0x198>)
 80069cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80069d0:	4960      	ldr	r1, [pc, #384]	; (8006b54 <tcp_close_shutdown+0x19c>)
 80069d2:	4861      	ldr	r0, [pc, #388]	; (8006b58 <tcp_close_shutdown+0x1a0>)
 80069d4:	f00a fe76 	bl	80116c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d066      	beq.n	8006aac <tcp_close_shutdown+0xf4>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7d1b      	ldrb	r3, [r3, #20]
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d003      	beq.n	80069ee <tcp_close_shutdown+0x36>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
 80069ea:	2b07      	cmp	r3, #7
 80069ec:	d15e      	bne.n	8006aac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <tcp_close_shutdown+0x48>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80069fe:	d055      	beq.n	8006aac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8b5b      	ldrh	r3, [r3, #26]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <tcp_close_shutdown+0x62>
 8006a0c:	4b50      	ldr	r3, [pc, #320]	; (8006b50 <tcp_close_shutdown+0x198>)
 8006a0e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a12:	4952      	ldr	r1, [pc, #328]	; (8006b5c <tcp_close_shutdown+0x1a4>)
 8006a14:	4850      	ldr	r0, [pc, #320]	; (8006b58 <tcp_close_shutdown+0x1a0>)
 8006a16:	f00a fe55 	bl	80116c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a22:	687d      	ldr	r5, [r7, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3304      	adds	r3, #4
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	8ad2      	ldrh	r2, [r2, #22]
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	8b09      	ldrh	r1, [r1, #24]
 8006a30:	9102      	str	r1, [sp, #8]
 8006a32:	9201      	str	r2, [sp, #4]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	462b      	mov	r3, r5
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f004 feab 	bl	800b798 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 f8ba 	bl	8007bbc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a48:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <tcp_close_shutdown+0x1a8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d105      	bne.n	8006a5e <tcp_close_shutdown+0xa6>
 8006a52:	4b43      	ldr	r3, [pc, #268]	; (8006b60 <tcp_close_shutdown+0x1a8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a41      	ldr	r2, [pc, #260]	; (8006b60 <tcp_close_shutdown+0x1a8>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e013      	b.n	8006a86 <tcp_close_shutdown+0xce>
 8006a5e:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <tcp_close_shutdown+0x1a8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e00c      	b.n	8006a80 <tcp_close_shutdown+0xc8>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d104      	bne.n	8006a7a <tcp_close_shutdown+0xc2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e005      	b.n	8006a86 <tcp_close_shutdown+0xce>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ef      	bne.n	8006a66 <tcp_close_shutdown+0xae>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60da      	str	r2, [r3, #12]
 8006a8c:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <tcp_close_shutdown+0x1ac>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006a92:	4b35      	ldr	r3, [pc, #212]	; (8006b68 <tcp_close_shutdown+0x1b0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d102      	bne.n	8006aa2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006a9c:	f003 fd54 	bl	800a548 <tcp_trigger_input_pcb_close>
 8006aa0:	e002      	b.n	8006aa8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fed6 	bl	8006854 <tcp_free>
      }
      return ERR_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e04d      	b.n	8006b48 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7d1b      	ldrb	r3, [r3, #20]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d02d      	beq.n	8006b10 <tcp_close_shutdown+0x158>
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d036      	beq.n	8006b26 <tcp_close_shutdown+0x16e>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d13f      	bne.n	8006b3c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8adb      	ldrh	r3, [r3, #22]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ac4:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <tcp_close_shutdown+0x1b4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d105      	bne.n	8006ada <tcp_close_shutdown+0x122>
 8006ace:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <tcp_close_shutdown+0x1b4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4a25      	ldr	r2, [pc, #148]	; (8006b6c <tcp_close_shutdown+0x1b4>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e013      	b.n	8006b02 <tcp_close_shutdown+0x14a>
 8006ada:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <tcp_close_shutdown+0x1b4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	e00c      	b.n	8006afc <tcp_close_shutdown+0x144>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d104      	bne.n	8006af6 <tcp_close_shutdown+0x13e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	60da      	str	r2, [r3, #12]
 8006af4:	e005      	b.n	8006b02 <tcp_close_shutdown+0x14a>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	60bb      	str	r3, [r7, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1ef      	bne.n	8006ae2 <tcp_close_shutdown+0x12a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff fea3 	bl	8006854 <tcp_free>
      break;
 8006b0e:	e01a      	b.n	8006b46 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff ff17 	bl	8006944 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4815      	ldr	r0, [pc, #84]	; (8006b70 <tcp_close_shutdown+0x1b8>)
 8006b1a:	f001 f89f 	bl	8007c5c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff feb4 	bl	800688c <tcp_free_listen>
      break;
 8006b24:	e00f      	b.n	8006b46 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	480d      	ldr	r0, [pc, #52]	; (8006b60 <tcp_close_shutdown+0x1a8>)
 8006b2a:	f001 f897 	bl	8007c5c <tcp_pcb_remove>
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <tcp_close_shutdown+0x1ac>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fe8d 	bl	8006854 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b3a:	e004      	b.n	8006b46 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f819 	bl	8006b74 <tcp_close_shutdown_fin>
 8006b42:	4603      	mov	r3, r0
 8006b44:	e000      	b.n	8006b48 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b50:	08013740 	.word	0x08013740
 8006b54:	08013814 	.word	0x08013814
 8006b58:	08013784 	.word	0x08013784
 8006b5c:	08013834 	.word	0x08013834
 8006b60:	2000698c 	.word	0x2000698c
 8006b64:	20006988 	.word	0x20006988
 8006b68:	200069a0 	.word	0x200069a0
 8006b6c:	20006998 	.word	0x20006998
 8006b70:	20006994 	.word	0x20006994

08006b74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <tcp_close_shutdown_fin+0x1c>
 8006b82:	4b2c      	ldr	r3, [pc, #176]	; (8006c34 <tcp_close_shutdown_fin+0xc0>)
 8006b84:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006b88:	492b      	ldr	r1, [pc, #172]	; (8006c38 <tcp_close_shutdown_fin+0xc4>)
 8006b8a:	482c      	ldr	r0, [pc, #176]	; (8006c3c <tcp_close_shutdown_fin+0xc8>)
 8006b8c:	f00a fd9a 	bl	80116c4 <iprintf>

  switch (pcb->state) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7d1b      	ldrb	r3, [r3, #20]
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d010      	beq.n	8006bba <tcp_close_shutdown_fin+0x46>
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	d01b      	beq.n	8006bd4 <tcp_close_shutdown_fin+0x60>
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d126      	bne.n	8006bee <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f003 fee9 	bl	800a978 <tcp_send_fin>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11f      	bne.n	8006bf2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2205      	movs	r2, #5
 8006bb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bb8:	e01b      	b.n	8006bf2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f003 fedc 	bl	800a978 <tcp_send_fin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d114      	bne.n	8006bf6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2205      	movs	r2, #5
 8006bd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bd2:	e010      	b.n	8006bf6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f003 fecf 	bl	800a978 <tcp_send_fin>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2209      	movs	r2, #9
 8006bea:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bec:	e005      	b.n	8006bfa <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e01c      	b.n	8006c2c <tcp_close_shutdown_fin+0xb8>
      break;
 8006bf2:	bf00      	nop
 8006bf4:	e002      	b.n	8006bfc <tcp_close_shutdown_fin+0x88>
      break;
 8006bf6:	bf00      	nop
 8006bf8:	e000      	b.n	8006bfc <tcp_close_shutdown_fin+0x88>
      break;
 8006bfa:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f003 fff5 	bl	800abf4 <tcp_output>
 8006c0a:	e00d      	b.n	8006c28 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8006c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d108      	bne.n	8006c28 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8b5b      	ldrh	r3, [r3, #26]
 8006c1a:	f043 0308 	orr.w	r3, r3, #8
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e001      	b.n	8006c2c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8006c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08013740 	.word	0x08013740
 8006c38:	080137f0 	.word	0x080137f0
 8006c3c:	08013784 	.word	0x08013784

08006c40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <tcp_close+0x22>
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <tcp_close+0x4c>)
 8006c50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006c54:	490e      	ldr	r1, [pc, #56]	; (8006c90 <tcp_close+0x50>)
 8006c56:	480f      	ldr	r0, [pc, #60]	; (8006c94 <tcp_close+0x54>)
 8006c58:	f00a fd34 	bl	80116c4 <iprintf>
 8006c5c:	f06f 030f 	mvn.w	r3, #15
 8006c60:	e00f      	b.n	8006c82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7d1b      	ldrb	r3, [r3, #20]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d006      	beq.n	8006c78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	8b5b      	ldrh	r3, [r3, #26]
 8006c6e:	f043 0310 	orr.w	r3, r3, #16
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff fe9c 	bl	80069b8 <tcp_close_shutdown>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	08013740 	.word	0x08013740
 8006c90:	08013850 	.word	0x08013850
 8006c94:	08013784 	.word	0x08013784

08006c98 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af04      	add	r7, sp, #16
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <tcp_abandon+0x20>
 8006ca8:	4b52      	ldr	r3, [pc, #328]	; (8006df4 <tcp_abandon+0x15c>)
 8006caa:	f240 223d 	movw	r2, #573	; 0x23d
 8006cae:	4952      	ldr	r1, [pc, #328]	; (8006df8 <tcp_abandon+0x160>)
 8006cb0:	4852      	ldr	r0, [pc, #328]	; (8006dfc <tcp_abandon+0x164>)
 8006cb2:	f00a fd07 	bl	80116c4 <iprintf>
 8006cb6:	e099      	b.n	8006dec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d106      	bne.n	8006cce <tcp_abandon+0x36>
 8006cc0:	4b4c      	ldr	r3, [pc, #304]	; (8006df4 <tcp_abandon+0x15c>)
 8006cc2:	f240 2241 	movw	r2, #577	; 0x241
 8006cc6:	494e      	ldr	r1, [pc, #312]	; (8006e00 <tcp_abandon+0x168>)
 8006cc8:	484c      	ldr	r0, [pc, #304]	; (8006dfc <tcp_abandon+0x164>)
 8006cca:	f00a fcfb 	bl	80116c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7d1b      	ldrb	r3, [r3, #20]
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	d107      	bne.n	8006ce6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	484a      	ldr	r0, [pc, #296]	; (8006e04 <tcp_abandon+0x16c>)
 8006cda:	f000 ffbf 	bl	8007c5c <tcp_pcb_remove>
    tcp_free(pcb);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff fdb8 	bl	8006854 <tcp_free>
 8006ce4:	e082      	b.n	8006dec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7d1b      	ldrb	r3, [r3, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d126      	bne.n	8006d5e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8adb      	ldrh	r3, [r3, #22]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02e      	beq.n	8006d76 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d18:	4b3b      	ldr	r3, [pc, #236]	; (8006e08 <tcp_abandon+0x170>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d105      	bne.n	8006d2e <tcp_abandon+0x96>
 8006d22:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <tcp_abandon+0x170>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a37      	ldr	r2, [pc, #220]	; (8006e08 <tcp_abandon+0x170>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e013      	b.n	8006d56 <tcp_abandon+0xbe>
 8006d2e:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <tcp_abandon+0x170>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e00c      	b.n	8006d50 <tcp_abandon+0xb8>
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d104      	bne.n	8006d4a <tcp_abandon+0xb2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e005      	b.n	8006d56 <tcp_abandon+0xbe>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ef      	bne.n	8006d36 <tcp_abandon+0x9e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e00b      	b.n	8006d76 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8adb      	ldrh	r3, [r3, #22]
 8006d66:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4828      	ldr	r0, [pc, #160]	; (8006e0c <tcp_abandon+0x174>)
 8006d6c:	f000 ff76 	bl	8007c5c <tcp_pcb_remove>
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <tcp_abandon+0x178>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fd1a 	bl	80077bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fd11 	bl	80077bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fd08 	bl	80077bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00e      	beq.n	8006dd0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	8b12      	ldrh	r2, [r2, #24]
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006dc0:	9201      	str	r2, [sp, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f004 fce4 	bl	800b798 <tcp_rst>
    }
    last_state = pcb->state;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7d1b      	ldrb	r3, [r3, #20]
 8006dd4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fd3c 	bl	8006854 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <tcp_abandon+0x154>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f06f 010c 	mvn.w	r1, #12
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	4798      	blx	r3
  }
}
 8006dec:	3728      	adds	r7, #40	; 0x28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	08013740 	.word	0x08013740
 8006df8:	08013884 	.word	0x08013884
 8006dfc:	08013784 	.word	0x08013784
 8006e00:	080138a0 	.word	0x080138a0
 8006e04:	2000699c 	.word	0x2000699c
 8006e08:	20006998 	.word	0x20006998
 8006e0c:	2000698c 	.word	0x2000698c
 8006e10:	20006988 	.word	0x20006988

08006e14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff ff3a 	bl	8006c98 <tcp_abandon>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <tcp_update_rcv_ann_wnd+0x1c>
 8006e3a:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006e40:	4924      	ldr	r1, [pc, #144]	; (8006ed4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006e42:	4825      	ldr	r0, [pc, #148]	; (8006ed8 <tcp_update_rcv_ann_wnd+0xac>)
 8006e44:	f00a fc3e 	bl	80116c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e50:	4413      	add	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e5c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006e60:	bf28      	it	cs
 8006e62:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006e66:	b292      	uxth	r2, r2
 8006e68:	4413      	add	r3, r2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db08      	blt.n	8006e84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	e020      	b.n	8006ec6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd03      	ble.n	8006e9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e98:	e014      	b.n	8006ec4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eac:	d306      	bcc.n	8006ebc <tcp_update_rcv_ann_wnd+0x90>
 8006eae:	4b08      	ldr	r3, [pc, #32]	; (8006ed0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006eb0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006eb4:	4909      	ldr	r1, [pc, #36]	; (8006edc <tcp_update_rcv_ann_wnd+0xb0>)
 8006eb6:	4808      	ldr	r0, [pc, #32]	; (8006ed8 <tcp_update_rcv_ann_wnd+0xac>)
 8006eb8:	f00a fc04 	bl	80116c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006ec4:	2300      	movs	r3, #0
  }
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	08013740 	.word	0x08013740
 8006ed4:	0801399c 	.word	0x0801399c
 8006ed8:	08013784 	.word	0x08013784
 8006edc:	080139c0 	.word	0x080139c0

08006ee0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d107      	bne.n	8006f02 <tcp_recved+0x22>
 8006ef2:	4b1f      	ldr	r3, [pc, #124]	; (8006f70 <tcp_recved+0x90>)
 8006ef4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006ef8:	491e      	ldr	r1, [pc, #120]	; (8006f74 <tcp_recved+0x94>)
 8006efa:	481f      	ldr	r0, [pc, #124]	; (8006f78 <tcp_recved+0x98>)
 8006efc:	f00a fbe2 	bl	80116c4 <iprintf>
 8006f00:	e032      	b.n	8006f68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7d1b      	ldrb	r3, [r3, #20]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d106      	bne.n	8006f18 <tcp_recved+0x38>
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <tcp_recved+0x90>)
 8006f0c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8006f10:	491a      	ldr	r1, [pc, #104]	; (8006f7c <tcp_recved+0x9c>)
 8006f12:	4819      	ldr	r0, [pc, #100]	; (8006f78 <tcp_recved+0x98>)
 8006f14:	f00a fbd6 	bl	80116c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	4413      	add	r3, r2
 8006f20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006f22:	89fb      	ldrh	r3, [r7, #14]
 8006f24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f28:	d804      	bhi.n	8006f34 <tcp_recved+0x54>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	89fa      	ldrh	r2, [r7, #14]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d204      	bcs.n	8006f3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f3c:	e002      	b.n	8006f44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	89fa      	ldrh	r2, [r7, #14]
 8006f42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff71 	bl	8006e2c <tcp_update_rcv_ann_wnd>
 8006f4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006f52:	d309      	bcc.n	8006f68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8b5b      	ldrh	r3, [r3, #26]
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f003 fe46 	bl	800abf4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	08013740 	.word	0x08013740
 8006f74:	080139dc 	.word	0x080139dc
 8006f78:	08013784 	.word	0x08013784
 8006f7c:	080139f4 	.word	0x080139f4

08006f80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006f80:	b5b0      	push	{r4, r5, r7, lr}
 8006f82:	b090      	sub	sp, #64	; 0x40
 8006f84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006f8c:	4b94      	ldr	r3, [pc, #592]	; (80071e0 <tcp_slowtmr+0x260>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	4a93      	ldr	r2, [pc, #588]	; (80071e0 <tcp_slowtmr+0x260>)
 8006f94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006f96:	4b93      	ldr	r3, [pc, #588]	; (80071e4 <tcp_slowtmr+0x264>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	4b91      	ldr	r3, [pc, #580]	; (80071e4 <tcp_slowtmr+0x264>)
 8006fa0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006fa6:	4b90      	ldr	r3, [pc, #576]	; (80071e8 <tcp_slowtmr+0x268>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006fac:	e29f      	b.n	80074ee <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	7d1b      	ldrb	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <tcp_slowtmr+0x44>
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	; (80071ec <tcp_slowtmr+0x26c>)
 8006fb8:	f240 42be 	movw	r2, #1214	; 0x4be
 8006fbc:	498c      	ldr	r1, [pc, #560]	; (80071f0 <tcp_slowtmr+0x270>)
 8006fbe:	488d      	ldr	r0, [pc, #564]	; (80071f4 <tcp_slowtmr+0x274>)
 8006fc0:	f00a fb80 	bl	80116c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	7d1b      	ldrb	r3, [r3, #20]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d106      	bne.n	8006fda <tcp_slowtmr+0x5a>
 8006fcc:	4b87      	ldr	r3, [pc, #540]	; (80071ec <tcp_slowtmr+0x26c>)
 8006fce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006fd2:	4989      	ldr	r1, [pc, #548]	; (80071f8 <tcp_slowtmr+0x278>)
 8006fd4:	4887      	ldr	r0, [pc, #540]	; (80071f4 <tcp_slowtmr+0x274>)
 8006fd6:	f00a fb75 	bl	80116c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	7d1b      	ldrb	r3, [r3, #20]
 8006fde:	2b0a      	cmp	r3, #10
 8006fe0:	d106      	bne.n	8006ff0 <tcp_slowtmr+0x70>
 8006fe2:	4b82      	ldr	r3, [pc, #520]	; (80071ec <tcp_slowtmr+0x26c>)
 8006fe4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006fe8:	4984      	ldr	r1, [pc, #528]	; (80071fc <tcp_slowtmr+0x27c>)
 8006fea:	4882      	ldr	r0, [pc, #520]	; (80071f4 <tcp_slowtmr+0x274>)
 8006fec:	f00a fb6a 	bl	80116c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	7f9a      	ldrb	r2, [r3, #30]
 8006ff4:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <tcp_slowtmr+0x264>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d105      	bne.n	8007008 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007006:	e272      	b.n	80074ee <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007008:	4b76      	ldr	r3, [pc, #472]	; (80071e4 <tcp_slowtmr+0x264>)
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	7d1b      	ldrb	r3, [r3, #20]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d10a      	bne.n	800703a <tcp_slowtmr+0xba>
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800702a:	2b05      	cmp	r3, #5
 800702c:	d905      	bls.n	800703a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800702e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007032:	3301      	adds	r3, #1
 8007034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8007038:	e11e      	b.n	8007278 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007040:	2b0b      	cmp	r3, #11
 8007042:	d905      	bls.n	8007050 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007048:	3301      	adds	r3, #1
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800704e:	e113      	b.n	8007278 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007056:	2b00      	cmp	r3, #0
 8007058:	d075      	beq.n	8007146 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	2b00      	cmp	r3, #0
 8007060:	d006      	beq.n	8007070 <tcp_slowtmr+0xf0>
 8007062:	4b62      	ldr	r3, [pc, #392]	; (80071ec <tcp_slowtmr+0x26c>)
 8007064:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007068:	4965      	ldr	r1, [pc, #404]	; (8007200 <tcp_slowtmr+0x280>)
 800706a:	4862      	ldr	r0, [pc, #392]	; (80071f4 <tcp_slowtmr+0x274>)
 800706c:	f00a fb2a 	bl	80116c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <tcp_slowtmr+0x106>
 8007078:	4b5c      	ldr	r3, [pc, #368]	; (80071ec <tcp_slowtmr+0x26c>)
 800707a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800707e:	4961      	ldr	r1, [pc, #388]	; (8007204 <tcp_slowtmr+0x284>)
 8007080:	485c      	ldr	r0, [pc, #368]	; (80071f4 <tcp_slowtmr+0x274>)
 8007082:	f00a fb1f 	bl	80116c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800708c:	2b0b      	cmp	r3, #11
 800708e:	d905      	bls.n	800709c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007094:	3301      	adds	r3, #1
 8007096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800709a:	e0ed      	b.n	8007278 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070a2:	3b01      	subs	r3, #1
 80070a4:	4a58      	ldr	r2, [pc, #352]	; (8007208 <tcp_slowtmr+0x288>)
 80070a6:	5cd3      	ldrb	r3, [r2, r3]
 80070a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070b0:	7c7a      	ldrb	r2, [r7, #17]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d907      	bls.n	80070c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070bc:	3301      	adds	r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80070cc:	7c7a      	ldrb	r2, [r7, #17]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	f200 80d2 	bhi.w	8007278 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80070d4:	2301      	movs	r3, #1
 80070d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d108      	bne.n	80070f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80070e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070e4:	f004 fc4c 	bl	800b980 <tcp_zero_window_probe>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d014      	beq.n	8007118 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80070ee:	2300      	movs	r3, #0
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	e011      	b.n	8007118 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070fa:	4619      	mov	r1, r3
 80070fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070fe:	f003 faef 	bl	800a6e0 <tcp_split_unsent_seg>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800710a:	f003 fd73 	bl	800abf4 <tcp_output>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80ac 	beq.w	8007278 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800712e:	2b06      	cmp	r3, #6
 8007130:	f200 80a2 	bhi.w	8007278 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800713a:	3301      	adds	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007144:	e098      	b.n	8007278 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	db0f      	blt.n	8007170 <tcp_slowtmr+0x1f0>
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007156:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800715a:	4293      	cmp	r3, r2
 800715c:	d008      	beq.n	8007170 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007164:	b29b      	uxth	r3, r3
 8007166:	3301      	adds	r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	b21a      	sxth	r2, r3
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800717c:	429a      	cmp	r2, r3
 800717e:	db7b      	blt.n	8007278 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007182:	f004 f833 	bl	800b1ec <tcp_rexmit_rto_prepare>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <tcp_slowtmr+0x21c>
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	2b00      	cmp	r3, #0
 8007192:	d171      	bne.n	8007278 <tcp_slowtmr+0x2f8>
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d06d      	beq.n	8007278 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	7d1b      	ldrb	r3, [r3, #20]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d03a      	beq.n	800721a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	bf28      	it	cs
 80071ae:	230c      	movcs	r3, #12
 80071b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80071b8:	10db      	asrs	r3, r3, #3
 80071ba:	b21b      	sxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80071c4:	4413      	add	r3, r2
 80071c6:	7efa      	ldrb	r2, [r7, #27]
 80071c8:	4910      	ldr	r1, [pc, #64]	; (800720c <tcp_slowtmr+0x28c>)
 80071ca:	5c8a      	ldrb	r2, [r1, r2]
 80071cc:	4093      	lsls	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80071d6:	4293      	cmp	r3, r2
 80071d8:	dc1a      	bgt.n	8007210 <tcp_slowtmr+0x290>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	b21a      	sxth	r2, r3
 80071de:	e019      	b.n	8007214 <tcp_slowtmr+0x294>
 80071e0:	20006990 	.word	0x20006990
 80071e4:	200000ce 	.word	0x200000ce
 80071e8:	2000698c 	.word	0x2000698c
 80071ec:	08013740 	.word	0x08013740
 80071f0:	08013a84 	.word	0x08013a84
 80071f4:	08013784 	.word	0x08013784
 80071f8:	08013ab0 	.word	0x08013ab0
 80071fc:	08013adc 	.word	0x08013adc
 8007200:	08013b0c 	.word	0x08013b0c
 8007204:	08013b40 	.word	0x08013b40
 8007208:	08017624 	.word	0x08017624
 800720c:	08017614 	.word	0x08017614
 8007210:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	2200      	movs	r2, #0
 800721e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800722c:	4293      	cmp	r3, r2
 800722e:	bf28      	it	cs
 8007230:	4613      	movcs	r3, r2
 8007232:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	b29b      	uxth	r3, r3
 800724e:	429a      	cmp	r2, r3
 8007250:	d206      	bcs.n	8007260 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	2200      	movs	r2, #0
 800726e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007274:	f004 f834 	bl	800b2e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	7d1b      	ldrb	r3, [r3, #20]
 800727c:	2b06      	cmp	r3, #6
 800727e:	d111      	bne.n	80072a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	8b5b      	ldrh	r3, [r3, #26]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800728c:	4b9d      	ldr	r3, [pc, #628]	; (8007504 <tcp_slowtmr+0x584>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b28      	cmp	r3, #40	; 0x28
 8007298:	d904      	bls.n	80072a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800729a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800729e:	3301      	adds	r3, #1
 80072a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	7a5b      	ldrb	r3, [r3, #9]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d04c      	beq.n	800734a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d003      	beq.n	80072c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072bc:	2b07      	cmp	r3, #7
 80072be:	d144      	bne.n	800734a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072c0:	4b90      	ldr	r3, [pc, #576]	; (8007504 <tcp_slowtmr+0x584>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80072d4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80072d8:	498b      	ldr	r1, [pc, #556]	; (8007508 <tcp_slowtmr+0x588>)
 80072da:	fba1 1303 	umull	r1, r3, r1, r3
 80072de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d90a      	bls.n	80072fa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80072e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e8:	3301      	adds	r3, #1
 80072ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80072ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072f2:	3301      	adds	r3, #1
 80072f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072f8:	e027      	b.n	800734a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072fa:	4b82      	ldr	r3, [pc, #520]	; (8007504 <tcp_slowtmr+0x584>)
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007310:	4618      	mov	r0, r3
 8007312:	4b7e      	ldr	r3, [pc, #504]	; (800750c <tcp_slowtmr+0x58c>)
 8007314:	fb03 f300 	mul.w	r3, r3, r0
 8007318:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800731a:	497b      	ldr	r1, [pc, #492]	; (8007508 <tcp_slowtmr+0x588>)
 800731c:	fba1 1303 	umull	r1, r3, r1, r3
 8007320:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007322:	429a      	cmp	r2, r3
 8007324:	d911      	bls.n	800734a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007328:	f004 faea 	bl	800b900 <tcp_keepalive>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007332:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007340:	3301      	adds	r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734e:	2b00      	cmp	r3, #0
 8007350:	d011      	beq.n	8007376 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007352:	4b6c      	ldr	r3, [pc, #432]	; (8007504 <tcp_slowtmr+0x584>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007362:	4619      	mov	r1, r3
 8007364:	460b      	mov	r3, r1
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	440b      	add	r3, r1
 800736a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800736c:	429a      	cmp	r2, r3
 800736e:	d302      	bcc.n	8007376 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007372:	f000 fddd 	bl	8007f30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	7d1b      	ldrb	r3, [r3, #20]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d10b      	bne.n	8007396 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800737e:	4b61      	ldr	r3, [pc, #388]	; (8007504 <tcp_slowtmr+0x584>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b28      	cmp	r3, #40	; 0x28
 800738a:	d904      	bls.n	8007396 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800738c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007390:	3301      	adds	r3, #1
 8007392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	7d1b      	ldrb	r3, [r3, #20]
 800739a:	2b09      	cmp	r3, #9
 800739c:	d10b      	bne.n	80073b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <tcp_slowtmr+0x584>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2bf0      	cmp	r3, #240	; 0xf0
 80073aa:	d904      	bls.n	80073b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b0:	3301      	adds	r3, #1
 80073b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80073b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d060      	beq.n	8007480 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80073c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073c8:	f000 fbf8 	bl	8007bbc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d010      	beq.n	80073f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <tcp_slowtmr+0x590>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d8:	429a      	cmp	r2, r3
 80073da:	d106      	bne.n	80073ea <tcp_slowtmr+0x46a>
 80073dc:	4b4d      	ldr	r3, [pc, #308]	; (8007514 <tcp_slowtmr+0x594>)
 80073de:	f240 526d 	movw	r2, #1389	; 0x56d
 80073e2:	494d      	ldr	r1, [pc, #308]	; (8007518 <tcp_slowtmr+0x598>)
 80073e4:	484d      	ldr	r0, [pc, #308]	; (800751c <tcp_slowtmr+0x59c>)
 80073e6:	f00a f96d 	bl	80116c4 <iprintf>
        prev->next = pcb->next;
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e00f      	b.n	8007414 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <tcp_slowtmr+0x590>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d006      	beq.n	800740c <tcp_slowtmr+0x48c>
 80073fe:	4b45      	ldr	r3, [pc, #276]	; (8007514 <tcp_slowtmr+0x594>)
 8007400:	f240 5271 	movw	r2, #1393	; 0x571
 8007404:	4946      	ldr	r1, [pc, #280]	; (8007520 <tcp_slowtmr+0x5a0>)
 8007406:	4845      	ldr	r0, [pc, #276]	; (800751c <tcp_slowtmr+0x59c>)
 8007408:	f00a f95c 	bl	80116c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <tcp_slowtmr+0x590>)
 8007412:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007418:	2b00      	cmp	r3, #0
 800741a:	d013      	beq.n	8007444 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007424:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	3304      	adds	r3, #4
 800742a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742c:	8ad2      	ldrh	r2, [r2, #22]
 800742e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007430:	8b09      	ldrh	r1, [r1, #24]
 8007432:	9102      	str	r1, [sp, #8]
 8007434:	9201      	str	r2, [sp, #4]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	462b      	mov	r3, r5
 800743a:	4622      	mov	r2, r4
 800743c:	4601      	mov	r1, r0
 800743e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007440:	f004 f9aa 	bl	800b798 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	7d1b      	ldrb	r3, [r3, #20]
 800744e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800745a:	6838      	ldr	r0, [r7, #0]
 800745c:	f7ff f9fa 	bl	8006854 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007460:	4b30      	ldr	r3, [pc, #192]	; (8007524 <tcp_slowtmr+0x5a4>)
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <tcp_slowtmr+0x4f6>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f06f 010c 	mvn.w	r1, #12
 8007472:	68b8      	ldr	r0, [r7, #8]
 8007474:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007476:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <tcp_slowtmr+0x5a4>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d037      	beq.n	80074ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800747e:	e590      	b.n	8006fa2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	7f1b      	ldrb	r3, [r3, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	7f1a      	ldrb	r2, [r3, #28]
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	7f5b      	ldrb	r3, [r3, #29]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d325      	bcc.n	80074ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80074a8:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <tcp_slowtmr+0x5a4>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <tcp_slowtmr+0x550>
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c0:	6912      	ldr	r2, [r2, #16]
 80074c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80074ce:	e002      	b.n	80074d6 <tcp_slowtmr+0x556>
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <tcp_slowtmr+0x5a4>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d000      	beq.n	80074e0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80074de:	e560      	b.n	8006fa2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80074e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f003 fb83 	bl	800abf4 <tcp_output>
  while (pcb != NULL) {
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f ad5c 	bne.w	8006fae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <tcp_slowtmr+0x5a8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007500:	e067      	b.n	80075d2 <tcp_slowtmr+0x652>
 8007502:	bf00      	nop
 8007504:	20006990 	.word	0x20006990
 8007508:	10624dd3 	.word	0x10624dd3
 800750c:	000124f8 	.word	0x000124f8
 8007510:	2000698c 	.word	0x2000698c
 8007514:	08013740 	.word	0x08013740
 8007518:	08013b78 	.word	0x08013b78
 800751c:	08013784 	.word	0x08013784
 8007520:	08013ba4 	.word	0x08013ba4
 8007524:	20006988 	.word	0x20006988
 8007528:	2000699c 	.word	0x2000699c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	2b0a      	cmp	r3, #10
 8007532:	d006      	beq.n	8007542 <tcp_slowtmr+0x5c2>
 8007534:	4b2a      	ldr	r3, [pc, #168]	; (80075e0 <tcp_slowtmr+0x660>)
 8007536:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800753a:	492a      	ldr	r1, [pc, #168]	; (80075e4 <tcp_slowtmr+0x664>)
 800753c:	482a      	ldr	r0, [pc, #168]	; (80075e8 <tcp_slowtmr+0x668>)
 800753e:	f00a f8c1 	bl	80116c4 <iprintf>
    pcb_remove = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007548:	4b28      	ldr	r3, [pc, #160]	; (80075ec <tcp_slowtmr+0x66c>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2bf0      	cmp	r3, #240	; 0xf0
 8007554:	d904      	bls.n	8007560 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	3301      	adds	r3, #1
 800755c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02f      	beq.n	80075c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800756a:	f000 fb27 	bl	8007bbc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d010      	beq.n	8007596 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007574:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <tcp_slowtmr+0x670>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757a:	429a      	cmp	r2, r3
 800757c:	d106      	bne.n	800758c <tcp_slowtmr+0x60c>
 800757e:	4b18      	ldr	r3, [pc, #96]	; (80075e0 <tcp_slowtmr+0x660>)
 8007580:	f240 52af 	movw	r2, #1455	; 0x5af
 8007584:	491b      	ldr	r1, [pc, #108]	; (80075f4 <tcp_slowtmr+0x674>)
 8007586:	4818      	ldr	r0, [pc, #96]	; (80075e8 <tcp_slowtmr+0x668>)
 8007588:	f00a f89c 	bl	80116c4 <iprintf>
        prev->next = pcb->next;
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	60da      	str	r2, [r3, #12]
 8007594:	e00f      	b.n	80075b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007596:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <tcp_slowtmr+0x670>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759c:	429a      	cmp	r2, r3
 800759e:	d006      	beq.n	80075ae <tcp_slowtmr+0x62e>
 80075a0:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <tcp_slowtmr+0x660>)
 80075a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80075a6:	4914      	ldr	r1, [pc, #80]	; (80075f8 <tcp_slowtmr+0x678>)
 80075a8:	480f      	ldr	r0, [pc, #60]	; (80075e8 <tcp_slowtmr+0x668>)
 80075aa:	f00a f88b 	bl	80116c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4a0f      	ldr	r2, [pc, #60]	; (80075f0 <tcp_slowtmr+0x670>)
 80075b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80075c0:	69f8      	ldr	r0, [r7, #28]
 80075c2:	f7ff f947 	bl	8006854 <tcp_free>
 80075c6:	e004      	b.n	80075d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1a9      	bne.n	800752c <tcp_slowtmr+0x5ac>
    }
  }
}
 80075d8:	bf00      	nop
 80075da:	3730      	adds	r7, #48	; 0x30
 80075dc:	46bd      	mov	sp, r7
 80075de:	bdb0      	pop	{r4, r5, r7, pc}
 80075e0:	08013740 	.word	0x08013740
 80075e4:	08013bd0 	.word	0x08013bd0
 80075e8:	08013784 	.word	0x08013784
 80075ec:	20006990 	.word	0x20006990
 80075f0:	2000699c 	.word	0x2000699c
 80075f4:	08013c00 	.word	0x08013c00
 80075f8:	08013c28 	.word	0x08013c28

080075fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <tcp_fasttmr+0xbc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <tcp_fasttmr+0xbc>)
 800760c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800760e:	4b2b      	ldr	r3, [pc, #172]	; (80076bc <tcp_fasttmr+0xc0>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007614:	e048      	b.n	80076a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7f9a      	ldrb	r2, [r3, #30]
 800761a:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <tcp_fasttmr+0xbc>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d03f      	beq.n	80076a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007622:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <tcp_fasttmr+0xbc>)
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8b5b      	ldrh	r3, [r3, #26]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8b5b      	ldrh	r3, [r3, #26]
 800763a:	f043 0302 	orr.w	r3, r3, #2
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f003 fad5 	bl	800abf4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8b5b      	ldrh	r3, [r3, #26]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	b29a      	uxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8b5b      	ldrh	r3, [r3, #26]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8b5b      	ldrh	r3, [r3, #26]
 8007668:	f023 0308 	bic.w	r3, r3, #8
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fa7e 	bl	8006b74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007686:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <tcp_fasttmr+0xc4>)
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f819 	bl	80076c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <tcp_fasttmr+0xc4>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d000      	beq.n	800769c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800769a:	e7b8      	b.n	800760e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	607b      	str	r3, [r7, #4]
 80076a0:	e002      	b.n	80076a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1b3      	bne.n	8007616 <tcp_fasttmr+0x1a>
    }
  }
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200000ce 	.word	0x200000ce
 80076bc:	2000698c 	.word	0x2000698c
 80076c0:	20006988 	.word	0x20006988

080076c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <tcp_process_refused_data+0x22>
 80076d2:	4b37      	ldr	r3, [pc, #220]	; (80077b0 <tcp_process_refused_data+0xec>)
 80076d4:	f240 6209 	movw	r2, #1545	; 0x609
 80076d8:	4936      	ldr	r1, [pc, #216]	; (80077b4 <tcp_process_refused_data+0xf0>)
 80076da:	4837      	ldr	r0, [pc, #220]	; (80077b8 <tcp_process_refused_data+0xf4>)
 80076dc:	f009 fff2 	bl	80116c4 <iprintf>
 80076e0:	f06f 030f 	mvn.w	r3, #15
 80076e4:	e060      	b.n	80077a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ea:	7b5b      	ldrb	r3, [r3, #13]
 80076ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <tcp_process_refused_data+0x58>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6918      	ldr	r0, [r3, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	47a0      	blx	r4
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
 800771a:	e007      	b.n	800772c <tcp_process_refused_data+0x68>
 800771c:	2300      	movs	r3, #0
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	2000      	movs	r0, #0
 8007724:	f000 f8a2 	bl	800786c <tcp_recv_null>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800772c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d12a      	bne.n	800778a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d033      	beq.n	80077a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007742:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007746:	d005      	beq.n	8007754 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774c:	3301      	adds	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <tcp_process_refused_data+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6918      	ldr	r0, [r3, #16]
 8007768:	2300      	movs	r3, #0
 800776a:	2200      	movs	r2, #0
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	47a0      	blx	r4
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	e001      	b.n	800777a <tcp_process_refused_data+0xb6>
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800777a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777e:	f113 0f0d 	cmn.w	r3, #13
 8007782:	d110      	bne.n	80077a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007784:	f06f 030c 	mvn.w	r3, #12
 8007788:	e00e      	b.n	80077a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800778a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778e:	f113 0f0d 	cmn.w	r3, #13
 8007792:	d102      	bne.n	800779a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007794:	f06f 030c 	mvn.w	r3, #12
 8007798:	e006      	b.n	80077a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80077a0:	f06f 0304 	mvn.w	r3, #4
 80077a4:	e000      	b.n	80077a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd90      	pop	{r4, r7, pc}
 80077b0:	08013740 	.word	0x08013740
 80077b4:	08013c50 	.word	0x08013c50
 80077b8:	08013784 	.word	0x08013784

080077bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80077c4:	e007      	b.n	80077d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f809 	bl	80077e4 <tcp_seg_free>
    seg = next;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f4      	bne.n	80077c6 <tcp_segs_free+0xa>
  }
}
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00c      	beq.n	800780c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fd4c 	bl	800629c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	2003      	movs	r0, #3
 8007808:	f7fd fdee 	bl	80053e8 <memp_free>
  }
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <tcp_seg_copy+0x1c>
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <tcp_seg_copy+0x4c>)
 8007824:	f240 6282 	movw	r2, #1666	; 0x682
 8007828:	490e      	ldr	r1, [pc, #56]	; (8007864 <tcp_seg_copy+0x50>)
 800782a:	480f      	ldr	r0, [pc, #60]	; (8007868 <tcp_seg_copy+0x54>)
 800782c:	f009 ff4a 	bl	80116c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007830:	2003      	movs	r0, #3
 8007832:	f7fd fd8d 	bl	8005350 <memp_malloc>
 8007836:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <tcp_seg_copy+0x2e>
    return NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	e00a      	b.n	8007858 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007842:	2214      	movs	r2, #20
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f009 ff29 	bl	801169e <memcpy>
  pbuf_ref(cseg->p);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe fddb 	bl	800640c <pbuf_ref>
  return cseg;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	08013740 	.word	0x08013740
 8007864:	08013c94 	.word	0x08013c94
 8007868:	08013784 	.word	0x08013784

0800786c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <tcp_recv_null+0x28>
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <tcp_recv_null+0x60>)
 8007882:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007886:	4912      	ldr	r1, [pc, #72]	; (80078d0 <tcp_recv_null+0x64>)
 8007888:	4812      	ldr	r0, [pc, #72]	; (80078d4 <tcp_recv_null+0x68>)
 800788a:	f009 ff1b 	bl	80116c4 <iprintf>
 800788e:	f06f 030f 	mvn.w	r3, #15
 8007892:	e016      	b.n	80078c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	891b      	ldrh	r3, [r3, #8]
 800789e:	4619      	mov	r1, r3
 80078a0:	68b8      	ldr	r0, [r7, #8]
 80078a2:	f7ff fb1d 	bl	8006ee0 <tcp_recved>
    pbuf_free(p);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe fcf8 	bl	800629c <pbuf_free>
 80078ac:	e008      	b.n	80078c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80078ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80078b6:	68b8      	ldr	r0, [r7, #8]
 80078b8:	f7ff f9c2 	bl	8006c40 <tcp_close>
 80078bc:	4603      	mov	r3, r0
 80078be:	e000      	b.n	80078c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	08013740 	.word	0x08013740
 80078d0:	08013cb0 	.word	0x08013cb0
 80078d4:	08013784 	.word	0x08013784

080078d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80078e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	db01      	blt.n	80078ee <tcp_kill_prio+0x16>
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	e000      	b.n	80078f0 <tcp_kill_prio+0x18>
 80078ee:	237f      	movs	r3, #127	; 0x7f
 80078f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d034      	beq.n	8007962 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007906:	4b19      	ldr	r3, [pc, #100]	; (800796c <tcp_kill_prio+0x94>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e01f      	b.n	800794e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	7d5b      	ldrb	r3, [r3, #21]
 8007912:	7afa      	ldrb	r2, [r7, #11]
 8007914:	429a      	cmp	r2, r3
 8007916:	d80c      	bhi.n	8007932 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800791c:	7afa      	ldrb	r2, [r7, #11]
 800791e:	429a      	cmp	r2, r3
 8007920:	d112      	bne.n	8007948 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <tcp_kill_prio+0x98>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	429a      	cmp	r2, r3
 8007930:	d80a      	bhi.n	8007948 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <tcp_kill_prio+0x98>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	7d5b      	ldrb	r3, [r3, #21]
 8007946:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1dc      	bne.n	800790e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f7ff fa5a 	bl	8006e14 <tcp_abort>
 8007960:	e000      	b.n	8007964 <tcp_kill_prio+0x8c>
    return;
 8007962:	bf00      	nop
  }
}
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000698c 	.word	0x2000698c
 8007970:	20006990 	.word	0x20006990

08007974 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	2b08      	cmp	r3, #8
 8007982:	d009      	beq.n	8007998 <tcp_kill_state+0x24>
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d006      	beq.n	8007998 <tcp_kill_state+0x24>
 800798a:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <tcp_kill_state+0x80>)
 800798c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007990:	4919      	ldr	r1, [pc, #100]	; (80079f8 <tcp_kill_state+0x84>)
 8007992:	481a      	ldr	r0, [pc, #104]	; (80079fc <tcp_kill_state+0x88>)
 8007994:	f009 fe96 	bl	80116c4 <iprintf>

  inactivity = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <tcp_kill_state+0x8c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e017      	b.n	80079d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	7d1b      	ldrb	r3, [r3, #20]
 80079ac:	79fa      	ldrb	r2, [r7, #7]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d10f      	bne.n	80079d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079b2:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <tcp_kill_state+0x90>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d807      	bhi.n	80079d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <tcp_kill_state+0x90>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e4      	bne.n	80079a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80079e4:	2100      	movs	r1, #0
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f7ff f956 	bl	8006c98 <tcp_abandon>
  }
}
 80079ec:	bf00      	nop
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	08013740 	.word	0x08013740
 80079f8:	08013ccc 	.word	0x08013ccc
 80079fc:	08013784 	.word	0x08013784
 8007a00:	2000698c 	.word	0x2000698c
 8007a04:	20006990 	.word	0x20006990

08007a08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <tcp_kill_timewait+0x58>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e012      	b.n	8007a44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <tcp_kill_timewait+0x5c>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d807      	bhi.n	8007a3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <tcp_kill_timewait+0x5c>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e9      	bne.n	8007a1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a50:	68b8      	ldr	r0, [r7, #8]
 8007a52:	f7ff f9df 	bl	8006e14 <tcp_abort>
  }
}
 8007a56:	bf00      	nop
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	2000699c 	.word	0x2000699c
 8007a64:	20006990 	.word	0x20006990

08007a68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007a6e:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <tcp_handle_closepend+0x48>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007a74:	e014      	b.n	8007aa0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8b5b      	ldrh	r3, [r3, #26]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8b5b      	ldrh	r3, [r3, #26]
 8007a8c:	f023 0308 	bic.w	r3, r3, #8
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f86c 	bl	8006b74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e7      	bne.n	8007a76 <tcp_handle_closepend+0xe>
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000698c 	.word	0x2000698c

08007ab4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f7fd fc46 	bl	8005350 <memp_malloc>
 8007ac4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d126      	bne.n	8007b1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007acc:	f7ff ffcc 	bl	8007a68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007ad0:	f7ff ff9a 	bl	8007a08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f7fd fc3b 	bl	8005350 <memp_malloc>
 8007ada:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d11b      	bne.n	8007b1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007ae2:	2009      	movs	r0, #9
 8007ae4:	f7ff ff46 	bl	8007974 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f7fd fc31 	bl	8005350 <memp_malloc>
 8007aee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d111      	bne.n	8007b1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007af6:	2008      	movs	r0, #8
 8007af8:	f7ff ff3c 	bl	8007974 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007afc:	2001      	movs	r0, #1
 8007afe:	f7fd fc27 	bl	8005350 <memp_malloc>
 8007b02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fee3 	bl	80078d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b12:	2001      	movs	r0, #1
 8007b14:	f7fd fc1c 	bl	8005350 <memp_malloc>
 8007b18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03f      	beq.n	8007ba0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b20:	229c      	movs	r2, #156	; 0x9c
 8007b22:	2100      	movs	r1, #0
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f009 fdc5 	bl	80116b4 <memset>
    pcb->prio = prio;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	79fa      	ldrb	r2, [r7, #7]
 8007b2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	22ff      	movs	r2, #255	; 0xff
 8007b4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007b56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2206      	movs	r2, #6
 8007b64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <tcp_alloc+0xf8>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007b7e:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <tcp_alloc+0xfc>)
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <tcp_alloc+0x100>)
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a07      	ldr	r2, [pc, #28]	; (8007bb8 <tcp_alloc+0x104>)
 8007b9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20006990 	.word	0x20006990
 8007bb0:	200000ce 	.word	0x200000ce
 8007bb4:	0800786d 	.word	0x0800786d
 8007bb8:	006ddd00 	.word	0x006ddd00

08007bbc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d107      	bne.n	8007bda <tcp_pcb_purge+0x1e>
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <tcp_pcb_purge+0x94>)
 8007bcc:	f640 0251 	movw	r2, #2129	; 0x851
 8007bd0:	4920      	ldr	r1, [pc, #128]	; (8007c54 <tcp_pcb_purge+0x98>)
 8007bd2:	4821      	ldr	r0, [pc, #132]	; (8007c58 <tcp_pcb_purge+0x9c>)
 8007bd4:	f009 fd76 	bl	80116c4 <iprintf>
 8007bd8:	e037      	b.n	8007c4a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7d1b      	ldrb	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d033      	beq.n	8007c4a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007be6:	2b0a      	cmp	r3, #10
 8007be8:	d02f      	beq.n	8007c4a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d02b      	beq.n	8007c4a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fb4c 	bl	800629c <pbuf_free>
      pcb->refused_data = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f98c 	bl	8007f30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c1e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fdc9 	bl	80077bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fdc4 	bl	80077bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	66da      	str	r2, [r3, #108]	; 0x6c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	08013740 	.word	0x08013740
 8007c54:	08013d8c 	.word	0x08013d8c
 8007c58:	08013784 	.word	0x08013784

08007c5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <tcp_pcb_remove+0x1e>
 8007c6c:	4b3e      	ldr	r3, [pc, #248]	; (8007d68 <tcp_pcb_remove+0x10c>)
 8007c6e:	f640 0283 	movw	r2, #2179	; 0x883
 8007c72:	493e      	ldr	r1, [pc, #248]	; (8007d6c <tcp_pcb_remove+0x110>)
 8007c74:	483e      	ldr	r0, [pc, #248]	; (8007d70 <tcp_pcb_remove+0x114>)
 8007c76:	f009 fd25 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <tcp_pcb_remove+0x32>
 8007c80:	4b39      	ldr	r3, [pc, #228]	; (8007d68 <tcp_pcb_remove+0x10c>)
 8007c82:	f640 0284 	movw	r2, #2180	; 0x884
 8007c86:	493b      	ldr	r1, [pc, #236]	; (8007d74 <tcp_pcb_remove+0x118>)
 8007c88:	4839      	ldr	r0, [pc, #228]	; (8007d70 <tcp_pcb_remove+0x114>)
 8007c8a:	f009 fd1b 	bl	80116c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d105      	bne.n	8007ca4 <tcp_pcb_remove+0x48>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e013      	b.n	8007ccc <tcp_pcb_remove+0x70>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e00c      	b.n	8007cc6 <tcp_pcb_remove+0x6a>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d104      	bne.n	8007cc0 <tcp_pcb_remove+0x64>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	e005      	b.n	8007ccc <tcp_pcb_remove+0x70>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ef      	bne.n	8007cac <tcp_pcb_remove+0x50>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007cd2:	6838      	ldr	r0, [r7, #0]
 8007cd4:	f7ff ff72 	bl	8007bbc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	7d1b      	ldrb	r3, [r3, #20]
 8007cdc:	2b0a      	cmp	r3, #10
 8007cde:	d013      	beq.n	8007d08 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d00f      	beq.n	8007d08 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	8b5b      	ldrh	r3, [r3, #26]
 8007cec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d009      	beq.n	8007d08 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	8b5b      	ldrh	r3, [r3, #26]
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d02:	6838      	ldr	r0, [r7, #0]
 8007d04:	f002 ff76 	bl	800abf4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	7d1b      	ldrb	r3, [r3, #20]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d020      	beq.n	8007d52 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d006      	beq.n	8007d26 <tcp_pcb_remove+0xca>
 8007d18:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <tcp_pcb_remove+0x10c>)
 8007d1a:	f640 0293 	movw	r2, #2195	; 0x893
 8007d1e:	4916      	ldr	r1, [pc, #88]	; (8007d78 <tcp_pcb_remove+0x11c>)
 8007d20:	4813      	ldr	r0, [pc, #76]	; (8007d70 <tcp_pcb_remove+0x114>)
 8007d22:	f009 fccf 	bl	80116c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <tcp_pcb_remove+0xe0>
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <tcp_pcb_remove+0x10c>)
 8007d30:	f640 0294 	movw	r2, #2196	; 0x894
 8007d34:	4911      	ldr	r1, [pc, #68]	; (8007d7c <tcp_pcb_remove+0x120>)
 8007d36:	480e      	ldr	r0, [pc, #56]	; (8007d70 <tcp_pcb_remove+0x114>)
 8007d38:	f009 fcc4 	bl	80116c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <tcp_pcb_remove+0xf6>
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <tcp_pcb_remove+0x10c>)
 8007d46:	f640 0296 	movw	r2, #2198	; 0x896
 8007d4a:	490d      	ldr	r1, [pc, #52]	; (8007d80 <tcp_pcb_remove+0x124>)
 8007d4c:	4808      	ldr	r0, [pc, #32]	; (8007d70 <tcp_pcb_remove+0x114>)
 8007d4e:	f009 fcb9 	bl	80116c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2200      	movs	r2, #0
 8007d56:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	08013740 	.word	0x08013740
 8007d6c:	08013da8 	.word	0x08013da8
 8007d70:	08013784 	.word	0x08013784
 8007d74:	08013dc4 	.word	0x08013dc4
 8007d78:	08013de4 	.word	0x08013de4
 8007d7c:	08013dfc 	.word	0x08013dfc
 8007d80:	08013e18 	.word	0x08013e18

08007d84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <tcp_next_iss+0x1c>
 8007d92:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <tcp_next_iss+0x38>)
 8007d94:	f640 02af 	movw	r2, #2223	; 0x8af
 8007d98:	4909      	ldr	r1, [pc, #36]	; (8007dc0 <tcp_next_iss+0x3c>)
 8007d9a:	480a      	ldr	r0, [pc, #40]	; (8007dc4 <tcp_next_iss+0x40>)
 8007d9c:	f009 fc92 	bl	80116c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <tcp_next_iss+0x44>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <tcp_next_iss+0x48>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4413      	add	r3, r2
 8007daa:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <tcp_next_iss+0x44>)
 8007dac:	6013      	str	r3, [r2, #0]
  return iss;
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <tcp_next_iss+0x44>)
 8007db0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	08013740 	.word	0x08013740
 8007dc0:	08013e30 	.word	0x08013e30
 8007dc4:	08013784 	.word	0x08013784
 8007dc8:	2000000c 	.word	0x2000000c
 8007dcc:	20006990 	.word	0x20006990

08007dd0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d106      	bne.n	8007df2 <tcp_eff_send_mss_netif+0x22>
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <tcp_eff_send_mss_netif+0x68>)
 8007de6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007dea:	4914      	ldr	r1, [pc, #80]	; (8007e3c <tcp_eff_send_mss_netif+0x6c>)
 8007dec:	4814      	ldr	r0, [pc, #80]	; (8007e40 <tcp_eff_send_mss_netif+0x70>)
 8007dee:	f009 fc69 	bl	80116c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007df8:	89fb      	ldrh	r3, [r7, #14]
 8007dfa:	e019      	b.n	8007e30 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e00:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007e02:	8afb      	ldrh	r3, [r7, #22]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d012      	beq.n	8007e2e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007e08:	2328      	movs	r3, #40	; 0x28
 8007e0a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007e0c:	8afa      	ldrh	r2, [r7, #22]
 8007e0e:	8abb      	ldrh	r3, [r7, #20]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d904      	bls.n	8007e1e <tcp_eff_send_mss_netif+0x4e>
 8007e14:	8afa      	ldrh	r2, [r7, #22]
 8007e16:	8abb      	ldrh	r3, [r7, #20]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	e000      	b.n	8007e20 <tcp_eff_send_mss_netif+0x50>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007e22:	8a7a      	ldrh	r2, [r7, #18]
 8007e24:	89fb      	ldrh	r3, [r7, #14]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	bf28      	it	cs
 8007e2a:	4613      	movcs	r3, r2
 8007e2c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	08013740 	.word	0x08013740
 8007e3c:	08013e4c 	.word	0x08013e4c
 8007e40:	08013784 	.word	0x08013784

08007e44 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11d      	bne.n	8007e94 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8007e58:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007e5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007e5e:	4912      	ldr	r1, [pc, #72]	; (8007ea8 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8007e60:	4812      	ldr	r0, [pc, #72]	; (8007eac <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8007e62:	f009 fc2f 	bl	80116c4 <iprintf>

  while (pcb != NULL) {
 8007e66:	e015      	b.n	8007e94 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d10c      	bne.n	8007e8e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	480c      	ldr	r0, [pc, #48]	; (8007eb0 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8007e7e:	f009 fc21 	bl	80116c4 <iprintf>
      tcp_abort(pcb);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7fe ffc6 	bl	8006e14 <tcp_abort>
      pcb = next;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e002      	b.n	8007e94 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e6      	bne.n	8007e68 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08013740 	.word	0x08013740
 8007ea8:	08013e74 	.word	0x08013e74
 8007eac:	08013784 	.word	0x08013784
 8007eb0:	08013ea8 	.word	0x08013ea8

08007eb4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02a      	beq.n	8007f1a <tcp_netif_ip_addr_changed+0x66>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d026      	beq.n	8007f1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007ecc:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <tcp_netif_ip_addr_changed+0x70>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff ffb6 	bl	8007e44 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <tcp_netif_ip_addr_changed+0x74>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff ffb0 	bl	8007e44 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <tcp_netif_ip_addr_changed+0x66>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d013      	beq.n	8007f1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <tcp_netif_ip_addr_changed+0x78>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e00c      	b.n	8007f14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d103      	bne.n	8007f0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1ef      	bne.n	8007efa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	2000698c 	.word	0x2000698c
 8007f28:	20006998 	.word	0x20006998
 8007f2c:	20006994 	.word	0x20006994

08007f30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fc39 	bl	80077bc <tcp_segs_free>
    pcb->ooseq = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b08d      	sub	sp, #52	; 0x34
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <tcp_input+0x1c>
 8007f68:	4b9b      	ldr	r3, [pc, #620]	; (80081d8 <tcp_input+0x280>)
 8007f6a:	2283      	movs	r2, #131	; 0x83
 8007f6c:	499b      	ldr	r1, [pc, #620]	; (80081dc <tcp_input+0x284>)
 8007f6e:	489c      	ldr	r0, [pc, #624]	; (80081e0 <tcp_input+0x288>)
 8007f70:	f009 fba8 	bl	80116c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4a9a      	ldr	r2, [pc, #616]	; (80081e4 <tcp_input+0x28c>)
 8007f7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	895b      	ldrh	r3, [r3, #10]
 8007f80:	2b13      	cmp	r3, #19
 8007f82:	f240 83c4 	bls.w	800870e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007f86:	4b98      	ldr	r3, [pc, #608]	; (80081e8 <tcp_input+0x290>)
 8007f88:	695a      	ldr	r2, [r3, #20]
 8007f8a:	4b97      	ldr	r3, [pc, #604]	; (80081e8 <tcp_input+0x290>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f008 fb99 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 83ba 	bne.w	8008712 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007f9e:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <tcp_input+0x290>)
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007fa6:	2be0      	cmp	r3, #224	; 0xe0
 8007fa8:	f000 83b3 	beq.w	8008712 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007fac:	4b8d      	ldr	r3, [pc, #564]	; (80081e4 <tcp_input+0x28c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	899b      	ldrh	r3, [r3, #12]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fc fd4c 	bl	8004a52 <lwip_htons>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	0b1b      	lsrs	r3, r3, #12
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007fc6:	7cbb      	ldrb	r3, [r7, #18]
 8007fc8:	2b13      	cmp	r3, #19
 8007fca:	f240 83a4 	bls.w	8008716 <tcp_input+0x7be>
 8007fce:	7cbb      	ldrb	r3, [r7, #18]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	891b      	ldrh	r3, [r3, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	f200 839d 	bhi.w	8008716 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007fdc:	7cbb      	ldrb	r3, [r7, #18]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b14      	subs	r3, #20
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	4b81      	ldr	r3, [pc, #516]	; (80081ec <tcp_input+0x294>)
 8007fe6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007fe8:	4b81      	ldr	r3, [pc, #516]	; (80081f0 <tcp_input+0x298>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	895a      	ldrh	r2, [r3, #10]
 8007ff2:	7cbb      	ldrb	r3, [r7, #18]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d309      	bcc.n	800800e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007ffa:	4b7c      	ldr	r3, [pc, #496]	; (80081ec <tcp_input+0x294>)
 8007ffc:	881a      	ldrh	r2, [r3, #0]
 8007ffe:	4b7d      	ldr	r3, [pc, #500]	; (80081f4 <tcp_input+0x29c>)
 8008000:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008002:	7cbb      	ldrb	r3, [r7, #18]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fe f8ba 	bl	8006180 <pbuf_remove_header>
 800800c:	e04e      	b.n	80080ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d105      	bne.n	8008022 <tcp_input+0xca>
 8008016:	4b70      	ldr	r3, [pc, #448]	; (80081d8 <tcp_input+0x280>)
 8008018:	22c2      	movs	r2, #194	; 0xc2
 800801a:	4977      	ldr	r1, [pc, #476]	; (80081f8 <tcp_input+0x2a0>)
 800801c:	4870      	ldr	r0, [pc, #448]	; (80081e0 <tcp_input+0x288>)
 800801e:	f009 fb51 	bl	80116c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008022:	2114      	movs	r1, #20
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fe f8ab 	bl	8006180 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	895a      	ldrh	r2, [r3, #10]
 800802e:	4b71      	ldr	r3, [pc, #452]	; (80081f4 <tcp_input+0x29c>)
 8008030:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008032:	4b6e      	ldr	r3, [pc, #440]	; (80081ec <tcp_input+0x294>)
 8008034:	881a      	ldrh	r2, [r3, #0]
 8008036:	4b6f      	ldr	r3, [pc, #444]	; (80081f4 <tcp_input+0x29c>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800803e:	4b6d      	ldr	r3, [pc, #436]	; (80081f4 <tcp_input+0x29c>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7fe f89b 	bl	8006180 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	895b      	ldrh	r3, [r3, #10]
 8008050:	8a3a      	ldrh	r2, [r7, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	f200 8361 	bhi.w	800871a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	4a64      	ldr	r2, [pc, #400]	; (80081f0 <tcp_input+0x298>)
 8008060:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	8a3a      	ldrh	r2, [r7, #16]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe f888 	bl	8006180 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	891a      	ldrh	r2, [r3, #8]
 8008074:	8a3b      	ldrh	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	b29a      	uxth	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	895b      	ldrh	r3, [r3, #10]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <tcp_input+0x13a>
 8008086:	4b54      	ldr	r3, [pc, #336]	; (80081d8 <tcp_input+0x280>)
 8008088:	22df      	movs	r2, #223	; 0xdf
 800808a:	495c      	ldr	r1, [pc, #368]	; (80081fc <tcp_input+0x2a4>)
 800808c:	4854      	ldr	r0, [pc, #336]	; (80081e0 <tcp_input+0x288>)
 800808e:	f009 fb19 	bl	80116c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	891a      	ldrh	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	891b      	ldrh	r3, [r3, #8]
 800809c:	429a      	cmp	r2, r3
 800809e:	d005      	beq.n	80080ac <tcp_input+0x154>
 80080a0:	4b4d      	ldr	r3, [pc, #308]	; (80081d8 <tcp_input+0x280>)
 80080a2:	22e0      	movs	r2, #224	; 0xe0
 80080a4:	4956      	ldr	r1, [pc, #344]	; (8008200 <tcp_input+0x2a8>)
 80080a6:	484e      	ldr	r0, [pc, #312]	; (80081e0 <tcp_input+0x288>)
 80080a8:	f009 fb0c 	bl	80116c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80080ac:	4b4d      	ldr	r3, [pc, #308]	; (80081e4 <tcp_input+0x28c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	4b4b      	ldr	r3, [pc, #300]	; (80081e4 <tcp_input+0x28c>)
 80080b6:	681c      	ldr	r4, [r3, #0]
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fc fcca 	bl	8004a52 <lwip_htons>
 80080be:	4603      	mov	r3, r0
 80080c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80080c2:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <tcp_input+0x28c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	4b46      	ldr	r3, [pc, #280]	; (80081e4 <tcp_input+0x28c>)
 80080cc:	681c      	ldr	r4, [r3, #0]
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fc fcbf 	bl	8004a52 <lwip_htons>
 80080d4:	4603      	mov	r3, r0
 80080d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80080d8:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <tcp_input+0x28c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b41      	ldr	r3, [pc, #260]	; (80081e4 <tcp_input+0x28c>)
 80080e0:	681c      	ldr	r4, [r3, #0]
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fc fcca 	bl	8004a7c <lwip_htonl>
 80080e8:	4603      	mov	r3, r0
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	4a45      	ldr	r2, [pc, #276]	; (8008204 <tcp_input+0x2ac>)
 80080f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80080f2:	4b3c      	ldr	r3, [pc, #240]	; (80081e4 <tcp_input+0x28c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	4b3a      	ldr	r3, [pc, #232]	; (80081e4 <tcp_input+0x28c>)
 80080fa:	681c      	ldr	r4, [r3, #0]
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7fc fcbd 	bl	8004a7c <lwip_htonl>
 8008102:	4603      	mov	r3, r0
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	4a3f      	ldr	r2, [pc, #252]	; (8008208 <tcp_input+0x2b0>)
 800810a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800810c:	4b35      	ldr	r3, [pc, #212]	; (80081e4 <tcp_input+0x28c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	89db      	ldrh	r3, [r3, #14]
 8008112:	b29a      	uxth	r2, r3
 8008114:	4b33      	ldr	r3, [pc, #204]	; (80081e4 <tcp_input+0x28c>)
 8008116:	681c      	ldr	r4, [r3, #0]
 8008118:	4610      	mov	r0, r2
 800811a:	f7fc fc9a 	bl	8004a52 <lwip_htons>
 800811e:	4603      	mov	r3, r0
 8008120:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008122:	4b30      	ldr	r3, [pc, #192]	; (80081e4 <tcp_input+0x28c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	899b      	ldrh	r3, [r3, #12]
 8008128:	b29b      	uxth	r3, r3
 800812a:	4618      	mov	r0, r3
 800812c:	f7fc fc91 	bl	8004a52 <lwip_htons>
 8008130:	4603      	mov	r3, r0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4b34      	ldr	r3, [pc, #208]	; (800820c <tcp_input+0x2b4>)
 800813c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	891a      	ldrh	r2, [r3, #8]
 8008142:	4b33      	ldr	r3, [pc, #204]	; (8008210 <tcp_input+0x2b8>)
 8008144:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008146:	4b31      	ldr	r3, [pc, #196]	; (800820c <tcp_input+0x2b4>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <tcp_input+0x214>
    tcplen++;
 8008152:	4b2f      	ldr	r3, [pc, #188]	; (8008210 <tcp_input+0x2b8>)
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	4b2d      	ldr	r3, [pc, #180]	; (8008210 <tcp_input+0x2b8>)
 800815c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	891a      	ldrh	r2, [r3, #8]
 8008162:	4b2b      	ldr	r3, [pc, #172]	; (8008210 <tcp_input+0x2b8>)
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	f200 82d9 	bhi.w	800871e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008170:	4b28      	ldr	r3, [pc, #160]	; (8008214 <tcp_input+0x2bc>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e09d      	b.n	80082b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	7d1b      	ldrb	r3, [r3, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d105      	bne.n	800818c <tcp_input+0x234>
 8008180:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <tcp_input+0x280>)
 8008182:	22fb      	movs	r2, #251	; 0xfb
 8008184:	4924      	ldr	r1, [pc, #144]	; (8008218 <tcp_input+0x2c0>)
 8008186:	4816      	ldr	r0, [pc, #88]	; (80081e0 <tcp_input+0x288>)
 8008188:	f009 fa9c 	bl	80116c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	7d1b      	ldrb	r3, [r3, #20]
 8008190:	2b0a      	cmp	r3, #10
 8008192:	d105      	bne.n	80081a0 <tcp_input+0x248>
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <tcp_input+0x280>)
 8008196:	22fc      	movs	r2, #252	; 0xfc
 8008198:	4920      	ldr	r1, [pc, #128]	; (800821c <tcp_input+0x2c4>)
 800819a:	4811      	ldr	r0, [pc, #68]	; (80081e0 <tcp_input+0x288>)
 800819c:	f009 fa92 	bl	80116c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	7d1b      	ldrb	r3, [r3, #20]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d105      	bne.n	80081b4 <tcp_input+0x25c>
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <tcp_input+0x280>)
 80081aa:	22fd      	movs	r2, #253	; 0xfd
 80081ac:	491c      	ldr	r1, [pc, #112]	; (8008220 <tcp_input+0x2c8>)
 80081ae:	480c      	ldr	r0, [pc, #48]	; (80081e0 <tcp_input+0x288>)
 80081b0:	f009 fa88 	bl	80116c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	7a1b      	ldrb	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d033      	beq.n	8008224 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	7a1a      	ldrb	r2, [r3, #8]
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <tcp_input+0x290>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081c8:	3301      	adds	r3, #1
 80081ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d029      	beq.n	8008224 <tcp_input+0x2cc>
      prev = pcb;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	61fb      	str	r3, [r7, #28]
      continue;
 80081d4:	e06b      	b.n	80082ae <tcp_input+0x356>
 80081d6:	bf00      	nop
 80081d8:	08013ed0 	.word	0x08013ed0
 80081dc:	08013f04 	.word	0x08013f04
 80081e0:	08013f1c 	.word	0x08013f1c
 80081e4:	200000e4 	.word	0x200000e4
 80081e8:	200033d4 	.word	0x200033d4
 80081ec:	200000e8 	.word	0x200000e8
 80081f0:	200000ec 	.word	0x200000ec
 80081f4:	200000ea 	.word	0x200000ea
 80081f8:	08013f44 	.word	0x08013f44
 80081fc:	08013f54 	.word	0x08013f54
 8008200:	08013f60 	.word	0x08013f60
 8008204:	200000f4 	.word	0x200000f4
 8008208:	200000f8 	.word	0x200000f8
 800820c:	20000100 	.word	0x20000100
 8008210:	200000fe 	.word	0x200000fe
 8008214:	2000698c 	.word	0x2000698c
 8008218:	08013f80 	.word	0x08013f80
 800821c:	08013fa8 	.word	0x08013fa8
 8008220:	08013fd4 	.word	0x08013fd4
    }

    if (pcb->remote_port == tcphdr->src &&
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	8b1a      	ldrh	r2, [r3, #24]
 8008228:	4b94      	ldr	r3, [pc, #592]	; (800847c <tcp_input+0x524>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	429a      	cmp	r2, r3
 8008232:	d13a      	bne.n	80082aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	8ada      	ldrh	r2, [r3, #22]
 8008238:	4b90      	ldr	r3, [pc, #576]	; (800847c <tcp_input+0x524>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008240:	429a      	cmp	r2, r3
 8008242:	d132      	bne.n	80082aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	4b8d      	ldr	r3, [pc, #564]	; (8008480 <tcp_input+0x528>)
 800824a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800824c:	429a      	cmp	r2, r3
 800824e:	d12c      	bne.n	80082aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	4b8a      	ldr	r3, [pc, #552]	; (8008480 <tcp_input+0x528>)
 8008256:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008258:	429a      	cmp	r2, r3
 800825a:	d126      	bne.n	80082aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	429a      	cmp	r2, r3
 8008264:	d106      	bne.n	8008274 <tcp_input+0x31c>
 8008266:	4b87      	ldr	r3, [pc, #540]	; (8008484 <tcp_input+0x52c>)
 8008268:	f240 120d 	movw	r2, #269	; 0x10d
 800826c:	4986      	ldr	r1, [pc, #536]	; (8008488 <tcp_input+0x530>)
 800826e:	4887      	ldr	r0, [pc, #540]	; (800848c <tcp_input+0x534>)
 8008270:	f009 fa28 	bl	80116c4 <iprintf>
      if (prev != NULL) {
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <tcp_input+0x338>
        prev->next = pcb->next;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008282:	4b83      	ldr	r3, [pc, #524]	; (8008490 <tcp_input+0x538>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800828a:	4a81      	ldr	r2, [pc, #516]	; (8008490 <tcp_input+0x538>)
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	429a      	cmp	r2, r3
 8008298:	d111      	bne.n	80082be <tcp_input+0x366>
 800829a:	4b7a      	ldr	r3, [pc, #488]	; (8008484 <tcp_input+0x52c>)
 800829c:	f240 1215 	movw	r2, #277	; 0x115
 80082a0:	497c      	ldr	r1, [pc, #496]	; (8008494 <tcp_input+0x53c>)
 80082a2:	487a      	ldr	r0, [pc, #488]	; (800848c <tcp_input+0x534>)
 80082a4:	f009 fa0e 	bl	80116c4 <iprintf>
      break;
 80082a8:	e009      	b.n	80082be <tcp_input+0x366>
    }
    prev = pcb;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f47f af5e 	bne.w	8008178 <tcp_input+0x220>
 80082bc:	e000      	b.n	80082c0 <tcp_input+0x368>
      break;
 80082be:	bf00      	nop
  }

  if (pcb == NULL) {
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f040 8095 	bne.w	80083f2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082c8:	4b73      	ldr	r3, [pc, #460]	; (8008498 <tcp_input+0x540>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	e03f      	b.n	8008350 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	7d1b      	ldrb	r3, [r3, #20]
 80082d4:	2b0a      	cmp	r3, #10
 80082d6:	d006      	beq.n	80082e6 <tcp_input+0x38e>
 80082d8:	4b6a      	ldr	r3, [pc, #424]	; (8008484 <tcp_input+0x52c>)
 80082da:	f240 121f 	movw	r2, #287	; 0x11f
 80082de:	496f      	ldr	r1, [pc, #444]	; (800849c <tcp_input+0x544>)
 80082e0:	486a      	ldr	r0, [pc, #424]	; (800848c <tcp_input+0x534>)
 80082e2:	f009 f9ef 	bl	80116c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	7a1b      	ldrb	r3, [r3, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	7a1a      	ldrb	r2, [r3, #8]
 80082f2:	4b63      	ldr	r3, [pc, #396]	; (8008480 <tcp_input+0x528>)
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082fa:	3301      	adds	r3, #1
 80082fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80082fe:	429a      	cmp	r2, r3
 8008300:	d122      	bne.n	8008348 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	8b1a      	ldrh	r2, [r3, #24]
 8008306:	4b5d      	ldr	r3, [pc, #372]	; (800847c <tcp_input+0x524>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	429a      	cmp	r2, r3
 8008310:	d11b      	bne.n	800834a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	8ada      	ldrh	r2, [r3, #22]
 8008316:	4b59      	ldr	r3, [pc, #356]	; (800847c <tcp_input+0x524>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800831e:	429a      	cmp	r2, r3
 8008320:	d113      	bne.n	800834a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	4b56      	ldr	r3, [pc, #344]	; (8008480 <tcp_input+0x528>)
 8008328:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800832a:	429a      	cmp	r2, r3
 800832c:	d10d      	bne.n	800834a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b53      	ldr	r3, [pc, #332]	; (8008480 <tcp_input+0x528>)
 8008334:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008336:	429a      	cmp	r2, r3
 8008338:	d107      	bne.n	800834a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800833a:	69b8      	ldr	r0, [r7, #24]
 800833c:	f000 fb54 	bl	80089e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fd ffab 	bl	800629c <pbuf_free>
        return;
 8008346:	e1f0      	b.n	800872a <tcp_input+0x7d2>
        continue;
 8008348:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1bc      	bne.n	80082d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800835a:	4b51      	ldr	r3, [pc, #324]	; (80084a0 <tcp_input+0x548>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e02a      	b.n	80083b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	7a1b      	ldrb	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	7a1a      	ldrb	r2, [r3, #8]
 800836e:	4b44      	ldr	r3, [pc, #272]	; (8008480 <tcp_input+0x528>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008376:	3301      	adds	r3, #1
 8008378:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800837a:	429a      	cmp	r2, r3
 800837c:	d002      	beq.n	8008384 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	61fb      	str	r3, [r7, #28]
        continue;
 8008382:	e016      	b.n	80083b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	8ada      	ldrh	r2, [r3, #22]
 8008388:	4b3c      	ldr	r3, [pc, #240]	; (800847c <tcp_input+0x524>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	885b      	ldrh	r3, [r3, #2]
 800838e:	b29b      	uxth	r3, r3
 8008390:	429a      	cmp	r2, r3
 8008392:	d10c      	bne.n	80083ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	4b39      	ldr	r3, [pc, #228]	; (8008480 <tcp_input+0x528>)
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	429a      	cmp	r2, r3
 800839e:	d00f      	beq.n	80083c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00d      	beq.n	80083c2 <tcp_input+0x46a>
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1d1      	bne.n	8008362 <tcp_input+0x40a>
 80083be:	e000      	b.n	80083c2 <tcp_input+0x46a>
            break;
 80083c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d014      	beq.n	80083f2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80083d6:	4b32      	ldr	r3, [pc, #200]	; (80084a0 <tcp_input+0x548>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80083de:	4a30      	ldr	r2, [pc, #192]	; (80084a0 <tcp_input+0x548>)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80083e4:	6978      	ldr	r0, [r7, #20]
 80083e6:	f000 fa01 	bl	80087ec <tcp_listen_input>
      }
      pbuf_free(p);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fd ff56 	bl	800629c <pbuf_free>
      return;
 80083f0:	e19b      	b.n	800872a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8160 	beq.w	80086ba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80083fa:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <tcp_input+0x54c>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	891a      	ldrh	r2, [r3, #8]
 8008404:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <tcp_input+0x54c>)
 8008406:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008408:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <tcp_input+0x54c>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800840e:	4b1b      	ldr	r3, [pc, #108]	; (800847c <tcp_input+0x524>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a24      	ldr	r2, [pc, #144]	; (80084a4 <tcp_input+0x54c>)
 8008414:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008416:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <tcp_input+0x550>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800841c:	4b23      	ldr	r3, [pc, #140]	; (80084ac <tcp_input+0x554>)
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008422:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <tcp_input+0x558>)
 8008424:	2200      	movs	r2, #0
 8008426:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008428:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <tcp_input+0x55c>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d006      	beq.n	8008442 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	7b5b      	ldrb	r3, [r3, #13]
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008446:	2b00      	cmp	r3, #0
 8008448:	d038      	beq.n	80084bc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800844a:	69b8      	ldr	r0, [r7, #24]
 800844c:	f7ff f93a 	bl	80076c4 <tcp_process_refused_data>
 8008450:	4603      	mov	r3, r0
 8008452:	f113 0f0d 	cmn.w	r3, #13
 8008456:	d007      	beq.n	8008468 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800845c:	2b00      	cmp	r3, #0
 800845e:	d02d      	beq.n	80084bc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008460:	4b15      	ldr	r3, [pc, #84]	; (80084b8 <tcp_input+0x560>)
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d029      	beq.n	80084bc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 8104 	bne.w	800867a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008472:	69b8      	ldr	r0, [r7, #24]
 8008474:	f003 f9e2 	bl	800b83c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008478:	e0ff      	b.n	800867a <tcp_input+0x722>
 800847a:	bf00      	nop
 800847c:	200000e4 	.word	0x200000e4
 8008480:	200033d4 	.word	0x200033d4
 8008484:	08013ed0 	.word	0x08013ed0
 8008488:	08013ffc 	.word	0x08013ffc
 800848c:	08013f1c 	.word	0x08013f1c
 8008490:	2000698c 	.word	0x2000698c
 8008494:	08014028 	.word	0x08014028
 8008498:	2000699c 	.word	0x2000699c
 800849c:	08014054 	.word	0x08014054
 80084a0:	20006994 	.word	0x20006994
 80084a4:	200000d0 	.word	0x200000d0
 80084a8:	20000104 	.word	0x20000104
 80084ac:	20000101 	.word	0x20000101
 80084b0:	200000fc 	.word	0x200000fc
 80084b4:	20000100 	.word	0x20000100
 80084b8:	200000fe 	.word	0x200000fe
      }
    }
    tcp_input_pcb = pcb;
 80084bc:	4a9c      	ldr	r2, [pc, #624]	; (8008730 <tcp_input+0x7d8>)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80084c2:	69b8      	ldr	r0, [r7, #24]
 80084c4:	f000 fb0c 	bl	8008ae0 <tcp_process>
 80084c8:	4603      	mov	r3, r0
 80084ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80084cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084d0:	f113 0f0d 	cmn.w	r3, #13
 80084d4:	f000 80d3 	beq.w	800867e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80084d8:	4b96      	ldr	r3, [pc, #600]	; (8008734 <tcp_input+0x7dc>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <tcp_input+0x5a8>
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	6912      	ldr	r2, [r2, #16]
 80084f8:	f06f 010d 	mvn.w	r1, #13
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	488d      	ldr	r0, [pc, #564]	; (8008738 <tcp_input+0x7e0>)
 8008504:	f7ff fbaa 	bl	8007c5c <tcp_pcb_remove>
        tcp_free(pcb);
 8008508:	69b8      	ldr	r0, [r7, #24]
 800850a:	f7fe f9a3 	bl	8006854 <tcp_free>
 800850e:	e0c1      	b.n	8008694 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008514:	4b89      	ldr	r3, [pc, #548]	; (800873c <tcp_input+0x7e4>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01d      	beq.n	8008558 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800851c:	4b87      	ldr	r3, [pc, #540]	; (800873c <tcp_input+0x7e4>)
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <tcp_input+0x5ea>
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	6910      	ldr	r0, [r2, #16]
 8008536:	89fa      	ldrh	r2, [r7, #14]
 8008538:	69b9      	ldr	r1, [r7, #24]
 800853a:	4798      	blx	r3
 800853c:	4603      	mov	r3, r0
 800853e:	74fb      	strb	r3, [r7, #19]
 8008540:	e001      	b.n	8008546 <tcp_input+0x5ee>
 8008542:	2300      	movs	r3, #0
 8008544:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008546:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800854a:	f113 0f0d 	cmn.w	r3, #13
 800854e:	f000 8098 	beq.w	8008682 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008552:	4b7a      	ldr	r3, [pc, #488]	; (800873c <tcp_input+0x7e4>)
 8008554:	2200      	movs	r2, #0
 8008556:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008558:	69b8      	ldr	r0, [r7, #24]
 800855a:	f000 f907 	bl	800876c <tcp_input_delayed_close>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 8090 	bne.w	8008686 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008566:	4b76      	ldr	r3, [pc, #472]	; (8008740 <tcp_input+0x7e8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d041      	beq.n	80085f2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <tcp_input+0x62c>
 8008576:	4b73      	ldr	r3, [pc, #460]	; (8008744 <tcp_input+0x7ec>)
 8008578:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800857c:	4972      	ldr	r1, [pc, #456]	; (8008748 <tcp_input+0x7f0>)
 800857e:	4873      	ldr	r0, [pc, #460]	; (800874c <tcp_input+0x7f4>)
 8008580:	f009 f8a0 	bl	80116c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	8b5b      	ldrh	r3, [r3, #26]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008590:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <tcp_input+0x7e8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd fe81 	bl	800629c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800859a:	69b8      	ldr	r0, [r7, #24]
 800859c:	f7fe fc3a 	bl	8006e14 <tcp_abort>
            goto aborted;
 80085a0:	e078      	b.n	8008694 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00c      	beq.n	80085c6 <tcp_input+0x66e>
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	4b62      	ldr	r3, [pc, #392]	; (8008740 <tcp_input+0x7e8>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	69b9      	ldr	r1, [r7, #24]
 80085be:	47a0      	blx	r4
 80085c0:	4603      	mov	r3, r0
 80085c2:	74fb      	strb	r3, [r7, #19]
 80085c4:	e008      	b.n	80085d8 <tcp_input+0x680>
 80085c6:	4b5e      	ldr	r3, [pc, #376]	; (8008740 <tcp_input+0x7e8>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	2300      	movs	r3, #0
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	2000      	movs	r0, #0
 80085d0:	f7ff f94c 	bl	800786c <tcp_recv_null>
 80085d4:	4603      	mov	r3, r0
 80085d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80085d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085dc:	f113 0f0d 	cmn.w	r3, #13
 80085e0:	d053      	beq.n	800868a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80085e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80085ea:	4b55      	ldr	r3, [pc, #340]	; (8008740 <tcp_input+0x7e8>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80085f2:	4b50      	ldr	r3, [pc, #320]	; (8008734 <tcp_input+0x7dc>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d030      	beq.n	8008660 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800860a:	7b5a      	ldrb	r2, [r3, #13]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008610:	f042 0220 	orr.w	r2, r2, #32
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	735a      	strb	r2, [r3, #13]
 8008618:	e022      	b.n	8008660 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008622:	d005      	beq.n	8008630 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008628:	3301      	adds	r3, #1
 800862a:	b29a      	uxth	r2, r3
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <tcp_input+0x6fa>
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	6918      	ldr	r0, [r3, #16]
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	47a0      	blx	r4
 800864c:	4603      	mov	r3, r0
 800864e:	74fb      	strb	r3, [r7, #19]
 8008650:	e001      	b.n	8008656 <tcp_input+0x6fe>
 8008652:	2300      	movs	r3, #0
 8008654:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008656:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800865a:	f113 0f0d 	cmn.w	r3, #13
 800865e:	d016      	beq.n	800868e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008660:	4b33      	ldr	r3, [pc, #204]	; (8008730 <tcp_input+0x7d8>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008666:	69b8      	ldr	r0, [r7, #24]
 8008668:	f000 f880 	bl	800876c <tcp_input_delayed_close>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10f      	bne.n	8008692 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008672:	69b8      	ldr	r0, [r7, #24]
 8008674:	f002 fabe 	bl	800abf4 <tcp_output>
 8008678:	e00c      	b.n	8008694 <tcp_input+0x73c>
        goto aborted;
 800867a:	bf00      	nop
 800867c:	e00a      	b.n	8008694 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800867e:	bf00      	nop
 8008680:	e008      	b.n	8008694 <tcp_input+0x73c>
              goto aborted;
 8008682:	bf00      	nop
 8008684:	e006      	b.n	8008694 <tcp_input+0x73c>
          goto aborted;
 8008686:	bf00      	nop
 8008688:	e004      	b.n	8008694 <tcp_input+0x73c>
            goto aborted;
 800868a:	bf00      	nop
 800868c:	e002      	b.n	8008694 <tcp_input+0x73c>
              goto aborted;
 800868e:	bf00      	nop
 8008690:	e000      	b.n	8008694 <tcp_input+0x73c>
          goto aborted;
 8008692:	bf00      	nop
    tcp_input_pcb = NULL;
 8008694:	4b26      	ldr	r3, [pc, #152]	; (8008730 <tcp_input+0x7d8>)
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800869a:	4b29      	ldr	r3, [pc, #164]	; (8008740 <tcp_input+0x7e8>)
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80086a0:	4b2b      	ldr	r3, [pc, #172]	; (8008750 <tcp_input+0x7f8>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d03f      	beq.n	8008728 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80086a8:	4b29      	ldr	r3, [pc, #164]	; (8008750 <tcp_input+0x7f8>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fd fdf5 	bl	800629c <pbuf_free>
      inseg.p = NULL;
 80086b2:	4b27      	ldr	r3, [pc, #156]	; (8008750 <tcp_input+0x7f8>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80086b8:	e036      	b.n	8008728 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80086ba:	4b26      	ldr	r3, [pc, #152]	; (8008754 <tcp_input+0x7fc>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	899b      	ldrh	r3, [r3, #12]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fc f9c5 	bl	8004a52 <lwip_htons>
 80086c8:	4603      	mov	r3, r0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d118      	bne.n	8008706 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086d4:	4b20      	ldr	r3, [pc, #128]	; (8008758 <tcp_input+0x800>)
 80086d6:	6819      	ldr	r1, [r3, #0]
 80086d8:	4b20      	ldr	r3, [pc, #128]	; (800875c <tcp_input+0x804>)
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <tcp_input+0x808>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <tcp_input+0x7fc>)
 80086e6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086e8:	885b      	ldrh	r3, [r3, #2]
 80086ea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086ec:	4a19      	ldr	r2, [pc, #100]	; (8008754 <tcp_input+0x7fc>)
 80086ee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086f0:	8812      	ldrh	r2, [r2, #0]
 80086f2:	b292      	uxth	r2, r2
 80086f4:	9202      	str	r2, [sp, #8]
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <tcp_input+0x80c>)
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <tcp_input+0x810>)
 80086fe:	4602      	mov	r2, r0
 8008700:	2000      	movs	r0, #0
 8008702:	f003 f849 	bl	800b798 <tcp_rst>
    pbuf_free(p);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fd fdc8 	bl	800629c <pbuf_free>
  return;
 800870c:	e00c      	b.n	8008728 <tcp_input+0x7d0>
    goto dropped;
 800870e:	bf00      	nop
 8008710:	e006      	b.n	8008720 <tcp_input+0x7c8>
dropped:
 8008712:	bf00      	nop
 8008714:	e004      	b.n	8008720 <tcp_input+0x7c8>
    goto dropped;
 8008716:	bf00      	nop
 8008718:	e002      	b.n	8008720 <tcp_input+0x7c8>
      goto dropped;
 800871a:	bf00      	nop
 800871c:	e000      	b.n	8008720 <tcp_input+0x7c8>
      goto dropped;
 800871e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7fd fdbb 	bl	800629c <pbuf_free>
 8008726:	e000      	b.n	800872a <tcp_input+0x7d2>
  return;
 8008728:	bf00      	nop
}
 800872a:	3724      	adds	r7, #36	; 0x24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd90      	pop	{r4, r7, pc}
 8008730:	200069a0 	.word	0x200069a0
 8008734:	20000101 	.word	0x20000101
 8008738:	2000698c 	.word	0x2000698c
 800873c:	200000fc 	.word	0x200000fc
 8008740:	20000104 	.word	0x20000104
 8008744:	08013ed0 	.word	0x08013ed0
 8008748:	08014084 	.word	0x08014084
 800874c:	08013f1c 	.word	0x08013f1c
 8008750:	200000d0 	.word	0x200000d0
 8008754:	200000e4 	.word	0x200000e4
 8008758:	200000f8 	.word	0x200000f8
 800875c:	200000fe 	.word	0x200000fe
 8008760:	200000f4 	.word	0x200000f4
 8008764:	200033e4 	.word	0x200033e4
 8008768:	200033e8 	.word	0x200033e8

0800876c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <tcp_input_delayed_close+0x1c>
 800877a:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <tcp_input_delayed_close+0x6c>)
 800877c:	f240 225a 	movw	r2, #602	; 0x25a
 8008780:	4916      	ldr	r1, [pc, #88]	; (80087dc <tcp_input_delayed_close+0x70>)
 8008782:	4817      	ldr	r0, [pc, #92]	; (80087e0 <tcp_input_delayed_close+0x74>)
 8008784:	f008 ff9e 	bl	80116c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008788:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <tcp_input_delayed_close+0x78>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01c      	beq.n	80087ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8b5b      	ldrh	r3, [r3, #26]
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10d      	bne.n	80087bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <tcp_input_delayed_close+0x50>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6912      	ldr	r2, [r2, #16]
 80087b4:	f06f 010e 	mvn.w	r1, #14
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	480a      	ldr	r0, [pc, #40]	; (80087e8 <tcp_input_delayed_close+0x7c>)
 80087c0:	f7ff fa4c 	bl	8007c5c <tcp_pcb_remove>
    tcp_free(pcb);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fe f845 	bl	8006854 <tcp_free>
    return 1;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	08013ed0 	.word	0x08013ed0
 80087dc:	080140a0 	.word	0x080140a0
 80087e0:	08013f1c 	.word	0x08013f1c
 80087e4:	20000101 	.word	0x20000101
 80087e8:	2000698c 	.word	0x2000698c

080087ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b08b      	sub	sp, #44	; 0x2c
 80087f0:	af04      	add	r7, sp, #16
 80087f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80087f4:	4b6f      	ldr	r3, [pc, #444]	; (80089b4 <tcp_listen_input+0x1c8>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 80d3 	bne.w	80089a8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <tcp_listen_input+0x2a>
 8008808:	4b6b      	ldr	r3, [pc, #428]	; (80089b8 <tcp_listen_input+0x1cc>)
 800880a:	f240 2281 	movw	r2, #641	; 0x281
 800880e:	496b      	ldr	r1, [pc, #428]	; (80089bc <tcp_listen_input+0x1d0>)
 8008810:	486b      	ldr	r0, [pc, #428]	; (80089c0 <tcp_listen_input+0x1d4>)
 8008812:	f008 ff57 	bl	80116c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008816:	4b67      	ldr	r3, [pc, #412]	; (80089b4 <tcp_listen_input+0x1c8>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	d019      	beq.n	8008856 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008822:	4b68      	ldr	r3, [pc, #416]	; (80089c4 <tcp_listen_input+0x1d8>)
 8008824:	6819      	ldr	r1, [r3, #0]
 8008826:	4b68      	ldr	r3, [pc, #416]	; (80089c8 <tcp_listen_input+0x1dc>)
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	4b67      	ldr	r3, [pc, #412]	; (80089cc <tcp_listen_input+0x1e0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008832:	4b67      	ldr	r3, [pc, #412]	; (80089d0 <tcp_listen_input+0x1e4>)
 8008834:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800883a:	4a65      	ldr	r2, [pc, #404]	; (80089d0 <tcp_listen_input+0x1e4>)
 800883c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800883e:	8812      	ldrh	r2, [r2, #0]
 8008840:	b292      	uxth	r2, r2
 8008842:	9202      	str	r2, [sp, #8]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	4b63      	ldr	r3, [pc, #396]	; (80089d4 <tcp_listen_input+0x1e8>)
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	4b63      	ldr	r3, [pc, #396]	; (80089d8 <tcp_listen_input+0x1ec>)
 800884c:	4602      	mov	r2, r0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 ffa2 	bl	800b798 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008854:	e0aa      	b.n	80089ac <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008856:	4b57      	ldr	r3, [pc, #348]	; (80089b4 <tcp_listen_input+0x1c8>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80a4 	beq.w	80089ac <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7d5b      	ldrb	r3, [r3, #21]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff f923 	bl	8007ab4 <tcp_alloc>
 800886e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d111      	bne.n	800889a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <tcp_listen_input+0xa8>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6910      	ldr	r0, [r2, #16]
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	2100      	movs	r1, #0
 800888c:	4798      	blx	r3
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]
      return;
 8008892:	e08c      	b.n	80089ae <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008894:	23f0      	movs	r3, #240	; 0xf0
 8008896:	73bb      	strb	r3, [r7, #14]
      return;
 8008898:	e089      	b.n	80089ae <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800889a:	4b50      	ldr	r3, [pc, #320]	; (80089dc <tcp_listen_input+0x1f0>)
 800889c:	695a      	ldr	r2, [r3, #20]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80088a2:	4b4e      	ldr	r3, [pc, #312]	; (80089dc <tcp_listen_input+0x1f0>)
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8ada      	ldrh	r2, [r3, #22]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80088b2:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <tcp_listen_input+0x1e4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2203      	movs	r2, #3
 80088c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <tcp_listen_input+0x1e0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f7ff fa54 	bl	8007d84 <tcp_next_iss>
 80088dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80088f6:	4b35      	ldr	r3, [pc, #212]	; (80089cc <tcp_listen_input+0x1e0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	1e5a      	subs	r2, r3, #1
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7a5b      	ldrb	r3, [r3, #9]
 8008912:	f003 030c 	and.w	r3, r3, #12
 8008916:	b2da      	uxtb	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7a1a      	ldrb	r2, [r3, #8]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008924:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <tcp_listen_input+0x1f4>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	60da      	str	r2, [r3, #12]
 800892c:	4a2c      	ldr	r2, [pc, #176]	; (80089e0 <tcp_listen_input+0x1f4>)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	f003 f8f5 	bl	800bb20 <tcp_timer_needed>
 8008936:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <tcp_listen_input+0x1f8>)
 8008938:	2201      	movs	r2, #1
 800893a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800893c:	6978      	ldr	r0, [r7, #20]
 800893e:	f001 fd8f 	bl	800a460 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008942:	4b23      	ldr	r3, [pc, #140]	; (80089d0 <tcp_listen_input+0x1e4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	89db      	ldrh	r3, [r3, #14]
 8008948:	b29a      	uxth	r2, r3
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f007 fa31 	bl	800fdcc <ip4_route>
 800896a:	4601      	mov	r1, r0
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	3304      	adds	r3, #4
 8008970:	461a      	mov	r2, r3
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff fa2c 	bl	8007dd0 <tcp_eff_send_mss_netif>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008980:	2112      	movs	r1, #18
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f002 f848 	bl	800aa18 <tcp_enqueue_flags>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800898c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008994:	2100      	movs	r1, #0
 8008996:	6978      	ldr	r0, [r7, #20]
 8008998:	f7fe f97e 	bl	8006c98 <tcp_abandon>
      return;
 800899c:	e007      	b.n	80089ae <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800899e:	6978      	ldr	r0, [r7, #20]
 80089a0:	f002 f928 	bl	800abf4 <tcp_output>
  return;
 80089a4:	bf00      	nop
 80089a6:	e001      	b.n	80089ac <tcp_listen_input+0x1c0>
    return;
 80089a8:	bf00      	nop
 80089aa:	e000      	b.n	80089ae <tcp_listen_input+0x1c2>
  return;
 80089ac:	bf00      	nop
}
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd90      	pop	{r4, r7, pc}
 80089b4:	20000100 	.word	0x20000100
 80089b8:	08013ed0 	.word	0x08013ed0
 80089bc:	080140c8 	.word	0x080140c8
 80089c0:	08013f1c 	.word	0x08013f1c
 80089c4:	200000f8 	.word	0x200000f8
 80089c8:	200000fe 	.word	0x200000fe
 80089cc:	200000f4 	.word	0x200000f4
 80089d0:	200000e4 	.word	0x200000e4
 80089d4:	200033e4 	.word	0x200033e4
 80089d8:	200033e8 	.word	0x200033e8
 80089dc:	200033d4 	.word	0x200033d4
 80089e0:	2000698c 	.word	0x2000698c
 80089e4:	20006988 	.word	0x20006988

080089e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80089f0:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <tcp_timewait_input+0xcc>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d154      	bne.n	8008aa6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <tcp_timewait_input+0x28>
 8008a02:	4b2d      	ldr	r3, [pc, #180]	; (8008ab8 <tcp_timewait_input+0xd0>)
 8008a04:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008a08:	492c      	ldr	r1, [pc, #176]	; (8008abc <tcp_timewait_input+0xd4>)
 8008a0a:	482d      	ldr	r0, [pc, #180]	; (8008ac0 <tcp_timewait_input+0xd8>)
 8008a0c:	f008 fe5a 	bl	80116c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <tcp_timewait_input+0xcc>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02a      	beq.n	8008a72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008a1c:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <tcp_timewait_input+0xdc>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	db2d      	blt.n	8008a86 <tcp_timewait_input+0x9e>
 8008a2a:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <tcp_timewait_input+0xdc>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a36:	440b      	add	r3, r1
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc23      	bgt.n	8008a86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a3e:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <tcp_timewait_input+0xe0>)
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	4b22      	ldr	r3, [pc, #136]	; (8008acc <tcp_timewait_input+0xe4>)
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <tcp_timewait_input+0xdc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a4e:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <tcp_timewait_input+0xe8>)
 8008a50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a52:	885b      	ldrh	r3, [r3, #2]
 8008a54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <tcp_timewait_input+0xe8>)
 8008a58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a5a:	8812      	ldrh	r2, [r2, #0]
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	9202      	str	r2, [sp, #8]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <tcp_timewait_input+0xec>)
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <tcp_timewait_input+0xf0>)
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 fe94 	bl	800b798 <tcp_rst>
      return;
 8008a70:	e01c      	b.n	8008aac <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8008a72:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <tcp_timewait_input+0xcc>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008a7e:	4b17      	ldr	r3, [pc, #92]	; (8008adc <tcp_timewait_input+0xf4>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <tcp_timewait_input+0xe4>)
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00d      	beq.n	8008aaa <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	8b5b      	ldrh	r3, [r3, #26]
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f002 f8a9 	bl	800abf4 <tcp_output>
  }
  return;
 8008aa2:	bf00      	nop
 8008aa4:	e001      	b.n	8008aaa <tcp_timewait_input+0xc2>
    return;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <tcp_timewait_input+0xc4>
  return;
 8008aaa:	bf00      	nop
}
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000100 	.word	0x20000100
 8008ab8:	08013ed0 	.word	0x08013ed0
 8008abc:	080140e8 	.word	0x080140e8
 8008ac0:	08013f1c 	.word	0x08013f1c
 8008ac4:	200000f4 	.word	0x200000f4
 8008ac8:	200000f8 	.word	0x200000f8
 8008acc:	200000fe 	.word	0x200000fe
 8008ad0:	200000e4 	.word	0x200000e4
 8008ad4:	200033e4 	.word	0x200033e4
 8008ad8:	200033e8 	.word	0x200033e8
 8008adc:	20006990 	.word	0x20006990

08008ae0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008ae0:	b590      	push	{r4, r7, lr}
 8008ae2:	b08d      	sub	sp, #52	; 0x34
 8008ae4:	af04      	add	r7, sp, #16
 8008ae6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <tcp_process+0x24>
 8008af6:	4ba5      	ldr	r3, [pc, #660]	; (8008d8c <tcp_process+0x2ac>)
 8008af8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008afc:	49a4      	ldr	r1, [pc, #656]	; (8008d90 <tcp_process+0x2b0>)
 8008afe:	48a5      	ldr	r0, [pc, #660]	; (8008d94 <tcp_process+0x2b4>)
 8008b00:	f008 fde0 	bl	80116c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008b04:	4ba4      	ldr	r3, [pc, #656]	; (8008d98 <tcp_process+0x2b8>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d04e      	beq.n	8008bae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	7d1b      	ldrb	r3, [r3, #20]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d108      	bne.n	8008b2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b1c:	4b9f      	ldr	r3, [pc, #636]	; (8008d9c <tcp_process+0x2bc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d123      	bne.n	8008b6c <tcp_process+0x8c>
        acceptable = 1;
 8008b24:	2301      	movs	r3, #1
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e020      	b.n	8008b6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b2e:	4b9c      	ldr	r3, [pc, #624]	; (8008da0 <tcp_process+0x2c0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d102      	bne.n	8008b3c <tcp_process+0x5c>
        acceptable = 1;
 8008b36:	2301      	movs	r3, #1
 8008b38:	77fb      	strb	r3, [r7, #31]
 8008b3a:	e017      	b.n	8008b6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b3c:	4b98      	ldr	r3, [pc, #608]	; (8008da0 <tcp_process+0x2c0>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	db10      	blt.n	8008b6c <tcp_process+0x8c>
 8008b4a:	4b95      	ldr	r3, [pc, #596]	; (8008da0 <tcp_process+0x2c0>)
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b56:	440b      	add	r3, r1
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dc06      	bgt.n	8008b6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	8b5b      	ldrh	r3, [r3, #26]
 8008b62:	f043 0302 	orr.w	r3, r3, #2
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008b6c:	7ffb      	ldrb	r3, [r7, #31]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01b      	beq.n	8008baa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	7d1b      	ldrb	r3, [r3, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <tcp_process+0xa8>
 8008b7a:	4b84      	ldr	r3, [pc, #528]	; (8008d8c <tcp_process+0x2ac>)
 8008b7c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008b80:	4988      	ldr	r1, [pc, #544]	; (8008da4 <tcp_process+0x2c4>)
 8008b82:	4884      	ldr	r0, [pc, #528]	; (8008d94 <tcp_process+0x2b4>)
 8008b84:	f008 fd9e 	bl	80116c4 <iprintf>
      recv_flags |= TF_RESET;
 8008b88:	4b87      	ldr	r3, [pc, #540]	; (8008da8 <tcp_process+0x2c8>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f043 0308 	orr.w	r3, r3, #8
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	4b85      	ldr	r3, [pc, #532]	; (8008da8 <tcp_process+0x2c8>)
 8008b94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	8b5b      	ldrh	r3, [r3, #26]
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008ba4:	f06f 030d 	mvn.w	r3, #13
 8008ba8:	e37a      	b.n	80092a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e378      	b.n	80092a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008bae:	4b7a      	ldr	r3, [pc, #488]	; (8008d98 <tcp_process+0x2b8>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <tcp_process+0xfc>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7d1b      	ldrb	r3, [r3, #20]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d00c      	beq.n	8008bdc <tcp_process+0xfc>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7d1b      	ldrb	r3, [r3, #20]
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d008      	beq.n	8008bdc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8b5b      	ldrh	r3, [r3, #26]
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e361      	b.n	80092a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8b5b      	ldrh	r3, [r3, #26]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d103      	bne.n	8008bf0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008be8:	4b70      	ldr	r3, [pc, #448]	; (8008dac <tcp_process+0x2cc>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fc2d 	bl	800a460 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7d1b      	ldrb	r3, [r3, #20]
 8008c0a:	3b02      	subs	r3, #2
 8008c0c:	2b07      	cmp	r3, #7
 8008c0e:	f200 8337 	bhi.w	8009280 <tcp_process+0x7a0>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <tcp_process+0x138>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008e69 	.word	0x08008e69
 8008c20:	08008fe1 	.word	0x08008fe1
 8008c24:	0800900b 	.word	0x0800900b
 8008c28:	0800912f 	.word	0x0800912f
 8008c2c:	08008fe1 	.word	0x08008fe1
 8008c30:	080091bb 	.word	0x080091bb
 8008c34:	0800924b 	.word	0x0800924b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008c38:	4b57      	ldr	r3, [pc, #348]	; (8008d98 <tcp_process+0x2b8>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80e4 	beq.w	8008e0e <tcp_process+0x32e>
 8008c46:	4b54      	ldr	r3, [pc, #336]	; (8008d98 <tcp_process+0x2b8>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 80dd 	beq.w	8008e0e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	4b50      	ldr	r3, [pc, #320]	; (8008d9c <tcp_process+0x2bc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f040 80d5 	bne.w	8008e0e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008c64:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <tcp_process+0x2c0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008c76:	4b49      	ldr	r3, [pc, #292]	; (8008d9c <tcp_process+0x2bc>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008c7e:	4b4c      	ldr	r3, [pc, #304]	; (8008db0 <tcp_process+0x2d0>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	89db      	ldrh	r3, [r3, #14]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008c98:	4b41      	ldr	r3, [pc, #260]	; (8008da0 <tcp_process+0x2c0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1e5a      	subs	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f007 f88b 	bl	800fdcc <ip4_route>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff f886 	bl	8007dd0 <tcp_eff_send_mss_netif>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cd0:	009a      	lsls	r2, r3, #2
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	f241 111c 	movw	r1, #4380	; 0x111c
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	bf38      	it	cc
 8008ce0:	460b      	movcc	r3, r1
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d204      	bcs.n	8008cf0 <tcp_process+0x210>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	e00d      	b.n	8008d0c <tcp_process+0x22c>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	f241 121c 	movw	r2, #4380	; 0x111c
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d904      	bls.n	8008d08 <tcp_process+0x228>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	e001      	b.n	8008d0c <tcp_process+0x22c>
 8008d08:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <tcp_process+0x24a>
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <tcp_process+0x2ac>)
 8008d1e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008d22:	4924      	ldr	r1, [pc, #144]	; (8008db4 <tcp_process+0x2d4>)
 8008d24:	481b      	ldr	r0, [pc, #108]	; (8008d94 <tcp_process+0x2b4>)
 8008d26:	f008 fccd 	bl	80116c4 <iprintf>
        --pcb->snd_queuelen;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d111      	bne.n	8008d6a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4a:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <tcp_process+0x280>
 8008d52:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <tcp_process+0x2ac>)
 8008d54:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008d58:	4917      	ldr	r1, [pc, #92]	; (8008db8 <tcp_process+0x2d8>)
 8008d5a:	480e      	ldr	r0, [pc, #56]	; (8008d94 <tcp_process+0x2b4>)
 8008d5c:	f008 fcb2 	bl	80116c4 <iprintf>
          pcb->unsent = rseg->next;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	66da      	str	r2, [r3, #108]	; 0x6c
 8008d68:	e003      	b.n	8008d72 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008d72:	6938      	ldr	r0, [r7, #16]
 8008d74:	f7fe fd36 	bl	80077e4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11d      	bne.n	8008dbc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d86:	861a      	strh	r2, [r3, #48]	; 0x30
 8008d88:	e01f      	b.n	8008dca <tcp_process+0x2ea>
 8008d8a:	bf00      	nop
 8008d8c:	08013ed0 	.word	0x08013ed0
 8008d90:	08014108 	.word	0x08014108
 8008d94:	08013f1c 	.word	0x08013f1c
 8008d98:	20000100 	.word	0x20000100
 8008d9c:	200000f8 	.word	0x200000f8
 8008da0:	200000f4 	.word	0x200000f4
 8008da4:	08014124 	.word	0x08014124
 8008da8:	20000101 	.word	0x20000101
 8008dac:	20006990 	.word	0x20006990
 8008db0:	200000e4 	.word	0x200000e4
 8008db4:	08014144 	.word	0x08014144
 8008db8:	0801415c 	.word	0x0801415c
        } else {
          pcb->rtime = 0;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <tcp_process+0x30a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6910      	ldr	r0, [r2, #16]
 8008dde:	2200      	movs	r2, #0
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4798      	blx	r3
 8008de4:	4603      	mov	r3, r0
 8008de6:	77bb      	strb	r3, [r7, #30]
 8008de8:	e001      	b.n	8008dee <tcp_process+0x30e>
 8008dea:	2300      	movs	r3, #0
 8008dec:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8008dee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008df2:	f113 0f0d 	cmn.w	r3, #13
 8008df6:	d102      	bne.n	8008dfe <tcp_process+0x31e>
          return ERR_ABRT;
 8008df8:	f06f 030c 	mvn.w	r3, #12
 8008dfc:	e250      	b.n	80092a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8b5b      	ldrh	r3, [r3, #26]
 8008e02:	f043 0302 	orr.w	r3, r3, #2
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008e0c:	e23a      	b.n	8009284 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008e0e:	4b9d      	ldr	r3, [pc, #628]	; (8009084 <tcp_process+0x5a4>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8234 	beq.w	8009284 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e1c:	4b9a      	ldr	r3, [pc, #616]	; (8009088 <tcp_process+0x5a8>)
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	4b9a      	ldr	r3, [pc, #616]	; (800908c <tcp_process+0x5ac>)
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	4b9a      	ldr	r3, [pc, #616]	; (8009090 <tcp_process+0x5b0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e2c:	4b99      	ldr	r3, [pc, #612]	; (8009094 <tcp_process+0x5b4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e34:	4a97      	ldr	r2, [pc, #604]	; (8009094 <tcp_process+0x5b4>)
 8008e36:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e38:	8812      	ldrh	r2, [r2, #0]
 8008e3a:	b292      	uxth	r2, r2
 8008e3c:	9202      	str	r2, [sp, #8]
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	4b95      	ldr	r3, [pc, #596]	; (8009098 <tcp_process+0x5b8>)
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	4b95      	ldr	r3, [pc, #596]	; (800909c <tcp_process+0x5bc>)
 8008e46:	4602      	mov	r2, r0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f002 fca5 	bl	800b798 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e54:	2b05      	cmp	r3, #5
 8008e56:	f200 8215 	bhi.w	8009284 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f002 fa65 	bl	800b330 <tcp_rexmit_rto>
      break;
 8008e66:	e20d      	b.n	8009284 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008e68:	4b86      	ldr	r3, [pc, #536]	; (8009084 <tcp_process+0x5a4>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80a1 	beq.w	8008fb8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e76:	4b84      	ldr	r3, [pc, #528]	; (8009088 <tcp_process+0x5a8>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	db7e      	blt.n	8008f84 <tcp_process+0x4a4>
 8008e86:	4b80      	ldr	r3, [pc, #512]	; (8009088 <tcp_process+0x5a8>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dc77      	bgt.n	8008f84 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2204      	movs	r2, #4
 8008e98:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008ea2:	23fa      	movs	r3, #250	; 0xfa
 8008ea4:	77bb      	strb	r3, [r7, #30]
 8008ea6:	e01d      	b.n	8008ee4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <tcp_process+0x3e0>
 8008eb2:	4b7b      	ldr	r3, [pc, #492]	; (80090a0 <tcp_process+0x5c0>)
 8008eb4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008eb8:	497a      	ldr	r1, [pc, #488]	; (80090a4 <tcp_process+0x5c4>)
 8008eba:	487b      	ldr	r0, [pc, #492]	; (80090a8 <tcp_process+0x5c8>)
 8008ebc:	f008 fc02 	bl	80116c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <tcp_process+0x400>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6910      	ldr	r0, [r2, #16]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	4798      	blx	r3
 8008eda:	4603      	mov	r3, r0
 8008edc:	77bb      	strb	r3, [r7, #30]
 8008ede:	e001      	b.n	8008ee4 <tcp_process+0x404>
 8008ee0:	23f0      	movs	r3, #240	; 0xf0
 8008ee2:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8008ee4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008eec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008ef0:	f113 0f0d 	cmn.w	r3, #13
 8008ef4:	d002      	beq.n	8008efc <tcp_process+0x41c>
              tcp_abort(pcb);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7fd ff8c 	bl	8006e14 <tcp_abort>
            }
            return ERR_ABRT;
 8008efc:	f06f 030c 	mvn.w	r3, #12
 8008f00:	e1ce      	b.n	80092a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fae0 	bl	80094c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008f08:	4b68      	ldr	r3, [pc, #416]	; (80090ac <tcp_process+0x5cc>)
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <tcp_process+0x43c>
            recv_acked--;
 8008f10:	4b66      	ldr	r3, [pc, #408]	; (80090ac <tcp_process+0x5cc>)
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	4b64      	ldr	r3, [pc, #400]	; (80090ac <tcp_process+0x5cc>)
 8008f1a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f20:	009a      	lsls	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	f241 111c 	movw	r1, #4380	; 0x111c
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf38      	it	cc
 8008f30:	460b      	movcc	r3, r1
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d204      	bcs.n	8008f40 <tcp_process+0x460>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	e00d      	b.n	8008f5c <tcp_process+0x47c>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	f241 121c 	movw	r2, #4380	; 0x111c
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d904      	bls.n	8008f58 <tcp_process+0x478>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	e001      	b.n	8008f5c <tcp_process+0x47c>
 8008f58:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008f62:	4b53      	ldr	r3, [pc, #332]	; (80090b0 <tcp_process+0x5d0>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d037      	beq.n	8008fde <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8b5b      	ldrh	r3, [r3, #26]
 8008f72:	f043 0302 	orr.w	r3, r3, #2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2207      	movs	r2, #7
 8008f80:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008f82:	e02c      	b.n	8008fde <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f84:	4b40      	ldr	r3, [pc, #256]	; (8009088 <tcp_process+0x5a8>)
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	4b40      	ldr	r3, [pc, #256]	; (800908c <tcp_process+0x5ac>)
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b40      	ldr	r3, [pc, #256]	; (8009090 <tcp_process+0x5b0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f94:	4b3f      	ldr	r3, [pc, #252]	; (8009094 <tcp_process+0x5b4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f9c:	4a3d      	ldr	r2, [pc, #244]	; (8009094 <tcp_process+0x5b4>)
 8008f9e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	b292      	uxth	r2, r2
 8008fa4:	9202      	str	r2, [sp, #8]
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	4b3b      	ldr	r3, [pc, #236]	; (8009098 <tcp_process+0x5b8>)
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	4b3b      	ldr	r3, [pc, #236]	; (800909c <tcp_process+0x5bc>)
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f002 fbf1 	bl	800b798 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008fb6:	e167      	b.n	8009288 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008fb8:	4b32      	ldr	r3, [pc, #200]	; (8009084 <tcp_process+0x5a4>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8161 	beq.w	8009288 <tcp_process+0x7a8>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	1e5a      	subs	r2, r3, #1
 8008fcc:	4b30      	ldr	r3, [pc, #192]	; (8009090 <tcp_process+0x5b0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	f040 8159 	bne.w	8009288 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f002 f9cc 	bl	800b374 <tcp_rexmit>
      break;
 8008fdc:	e154      	b.n	8009288 <tcp_process+0x7a8>
 8008fde:	e153      	b.n	8009288 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fa71 	bl	80094c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008fe6:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <tcp_process+0x5d0>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 814c 	beq.w	800928c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	8b5b      	ldrh	r3, [r3, #26]
 8008ff8:	f043 0302 	orr.w	r3, r3, #2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2207      	movs	r2, #7
 8009006:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009008:	e140      	b.n	800928c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa5c 	bl	80094c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <tcp_process+0x5d0>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d071      	beq.n	8009100 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <tcp_process+0x5a4>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d060      	beq.n	80090ea <tcp_process+0x60a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800902c:	4b16      	ldr	r3, [pc, #88]	; (8009088 <tcp_process+0x5a8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d15a      	bne.n	80090ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009038:	2b00      	cmp	r3, #0
 800903a:	d156      	bne.n	80090ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8b5b      	ldrh	r3, [r3, #26]
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	b29a      	uxth	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7fe fdb6 	bl	8007bbc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009050:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <tcp_process+0x5d4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d105      	bne.n	8009066 <tcp_process+0x586>
 800905a:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <tcp_process+0x5d4>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <tcp_process+0x5d4>)
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	e02e      	b.n	80090c4 <tcp_process+0x5e4>
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <tcp_process+0x5d4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e027      	b.n	80090be <tcp_process+0x5de>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d11f      	bne.n	80090b8 <tcp_process+0x5d8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	60da      	str	r2, [r3, #12]
 8009080:	e020      	b.n	80090c4 <tcp_process+0x5e4>
 8009082:	bf00      	nop
 8009084:	20000100 	.word	0x20000100
 8009088:	200000f8 	.word	0x200000f8
 800908c:	200000fe 	.word	0x200000fe
 8009090:	200000f4 	.word	0x200000f4
 8009094:	200000e4 	.word	0x200000e4
 8009098:	200033e4 	.word	0x200033e4
 800909c:	200033e8 	.word	0x200033e8
 80090a0:	08013ed0 	.word	0x08013ed0
 80090a4:	08014170 	.word	0x08014170
 80090a8:	08013f1c 	.word	0x08013f1c
 80090ac:	200000fc 	.word	0x200000fc
 80090b0:	20000101 	.word	0x20000101
 80090b4:	2000698c 	.word	0x2000698c
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1d4      	bne.n	800906e <tcp_process+0x58e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	60da      	str	r2, [r3, #12]
 80090ca:	4b77      	ldr	r3, [pc, #476]	; (80092a8 <tcp_process+0x7c8>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	220a      	movs	r2, #10
 80090d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80090d6:	4b75      	ldr	r3, [pc, #468]	; (80092ac <tcp_process+0x7cc>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
 80090de:	4a73      	ldr	r2, [pc, #460]	; (80092ac <tcp_process+0x7cc>)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	f002 fd1c 	bl	800bb20 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80090e8:	e0d2      	b.n	8009290 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8b5b      	ldrh	r3, [r3, #26]
 80090ee:	f043 0302 	orr.w	r3, r3, #2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2208      	movs	r2, #8
 80090fc:	751a      	strb	r2, [r3, #20]
      break;
 80090fe:	e0c7      	b.n	8009290 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009100:	4b6b      	ldr	r3, [pc, #428]	; (80092b0 <tcp_process+0x7d0>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 80c1 	beq.w	8009290 <tcp_process+0x7b0>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009112:	4b68      	ldr	r3, [pc, #416]	; (80092b4 <tcp_process+0x7d4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	f040 80ba 	bne.w	8009290 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009120:	2b00      	cmp	r3, #0
 8009122:	f040 80b5 	bne.w	8009290 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2206      	movs	r2, #6
 800912a:	751a      	strb	r2, [r3, #20]
      break;
 800912c:	e0b0      	b.n	8009290 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9ca 	bl	80094c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009134:	4b60      	ldr	r3, [pc, #384]	; (80092b8 <tcp_process+0x7d8>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80a9 	beq.w	8009294 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	8b5b      	ldrh	r3, [r3, #26]
 8009146:	f043 0302 	orr.w	r3, r3, #2
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fe fd33 	bl	8007bbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009156:	4b59      	ldr	r3, [pc, #356]	; (80092bc <tcp_process+0x7dc>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d105      	bne.n	800916c <tcp_process+0x68c>
 8009160:	4b56      	ldr	r3, [pc, #344]	; (80092bc <tcp_process+0x7dc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	4a55      	ldr	r2, [pc, #340]	; (80092bc <tcp_process+0x7dc>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e013      	b.n	8009194 <tcp_process+0x6b4>
 800916c:	4b53      	ldr	r3, [pc, #332]	; (80092bc <tcp_process+0x7dc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	61bb      	str	r3, [r7, #24]
 8009172:	e00c      	b.n	800918e <tcp_process+0x6ae>
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	429a      	cmp	r2, r3
 800917c:	d104      	bne.n	8009188 <tcp_process+0x6a8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	60da      	str	r2, [r3, #12]
 8009186:	e005      	b.n	8009194 <tcp_process+0x6b4>
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ef      	bne.n	8009174 <tcp_process+0x694>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	60da      	str	r2, [r3, #12]
 800919a:	4b43      	ldr	r3, [pc, #268]	; (80092a8 <tcp_process+0x7c8>)
 800919c:	2201      	movs	r2, #1
 800919e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	220a      	movs	r2, #10
 80091a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80091a6:	4b41      	ldr	r3, [pc, #260]	; (80092ac <tcp_process+0x7cc>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60da      	str	r2, [r3, #12]
 80091ae:	4a3f      	ldr	r2, [pc, #252]	; (80092ac <tcp_process+0x7cc>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	f002 fcb4 	bl	800bb20 <tcp_timer_needed>
      }
      break;
 80091b8:	e06c      	b.n	8009294 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f984 	bl	80094c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80091c0:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <tcp_process+0x7d0>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d065      	beq.n	8009298 <tcp_process+0x7b8>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d0:	4b38      	ldr	r3, [pc, #224]	; (80092b4 <tcp_process+0x7d4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d15f      	bne.n	8009298 <tcp_process+0x7b8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d15b      	bne.n	8009298 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7fe fceb 	bl	8007bbc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80091e6:	4b35      	ldr	r3, [pc, #212]	; (80092bc <tcp_process+0x7dc>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d105      	bne.n	80091fc <tcp_process+0x71c>
 80091f0:	4b32      	ldr	r3, [pc, #200]	; (80092bc <tcp_process+0x7dc>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	4a31      	ldr	r2, [pc, #196]	; (80092bc <tcp_process+0x7dc>)
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e013      	b.n	8009224 <tcp_process+0x744>
 80091fc:	4b2f      	ldr	r3, [pc, #188]	; (80092bc <tcp_process+0x7dc>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e00c      	b.n	800921e <tcp_process+0x73e>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d104      	bne.n	8009218 <tcp_process+0x738>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	60da      	str	r2, [r3, #12]
 8009216:	e005      	b.n	8009224 <tcp_process+0x744>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1ef      	bne.n	8009204 <tcp_process+0x724>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	4b1f      	ldr	r3, [pc, #124]	; (80092a8 <tcp_process+0x7c8>)
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	220a      	movs	r2, #10
 8009234:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009236:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <tcp_process+0x7cc>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60da      	str	r2, [r3, #12]
 800923e:	4a1b      	ldr	r2, [pc, #108]	; (80092ac <tcp_process+0x7cc>)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	f002 fc6c 	bl	800bb20 <tcp_timer_needed>
      }
      break;
 8009248:	e026      	b.n	8009298 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f93c 	bl	80094c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <tcp_process+0x7d0>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01f      	beq.n	800929c <tcp_process+0x7bc>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009260:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <tcp_process+0x7d4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d119      	bne.n	800929c <tcp_process+0x7bc>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d115      	bne.n	800929c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009270:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <tcp_process+0x7d8>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f043 0310 	orr.w	r3, r3, #16
 8009278:	b2da      	uxtb	r2, r3
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <tcp_process+0x7d8>)
 800927c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800927e:	e00d      	b.n	800929c <tcp_process+0x7bc>
    default:
      break;
 8009280:	bf00      	nop
 8009282:	e00c      	b.n	800929e <tcp_process+0x7be>
      break;
 8009284:	bf00      	nop
 8009286:	e00a      	b.n	800929e <tcp_process+0x7be>
      break;
 8009288:	bf00      	nop
 800928a:	e008      	b.n	800929e <tcp_process+0x7be>
      break;
 800928c:	bf00      	nop
 800928e:	e006      	b.n	800929e <tcp_process+0x7be>
      break;
 8009290:	bf00      	nop
 8009292:	e004      	b.n	800929e <tcp_process+0x7be>
      break;
 8009294:	bf00      	nop
 8009296:	e002      	b.n	800929e <tcp_process+0x7be>
      break;
 8009298:	bf00      	nop
 800929a:	e000      	b.n	800929e <tcp_process+0x7be>
      break;
 800929c:	bf00      	nop
  }
  return ERR_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3724      	adds	r7, #36	; 0x24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd90      	pop	{r4, r7, pc}
 80092a8:	20006988 	.word	0x20006988
 80092ac:	2000699c 	.word	0x2000699c
 80092b0:	20000100 	.word	0x20000100
 80092b4:	200000f8 	.word	0x200000f8
 80092b8:	20000101 	.word	0x20000101
 80092bc:	2000698c 	.word	0x2000698c

080092c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <tcp_oos_insert_segment+0x1e>
 80092d0:	4b3b      	ldr	r3, [pc, #236]	; (80093c0 <tcp_oos_insert_segment+0x100>)
 80092d2:	f240 421f 	movw	r2, #1055	; 0x41f
 80092d6:	493b      	ldr	r1, [pc, #236]	; (80093c4 <tcp_oos_insert_segment+0x104>)
 80092d8:	483b      	ldr	r0, [pc, #236]	; (80093c8 <tcp_oos_insert_segment+0x108>)
 80092da:	f008 f9f3 	bl	80116c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	899b      	ldrh	r3, [r3, #12]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fb fbb3 	bl	8004a52 <lwip_htons>
 80092ec:	4603      	mov	r3, r0
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d028      	beq.n	800934a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80092f8:	6838      	ldr	r0, [r7, #0]
 80092fa:	f7fe fa5f 	bl	80077bc <tcp_segs_free>
    next = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	e056      	b.n	80093b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	899b      	ldrh	r3, [r3, #12]
 800930a:	b29b      	uxth	r3, r3
 800930c:	4618      	mov	r0, r3
 800930e:	f7fb fba0 	bl	8004a52 <lwip_htons>
 8009312:	4603      	mov	r3, r0
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	899b      	ldrh	r3, [r3, #12]
 8009324:	b29c      	uxth	r4, r3
 8009326:	2001      	movs	r0, #1
 8009328:	f7fb fb93 	bl	8004a52 <lwip_htons>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	4322      	orrs	r2, r4
 8009336:	b292      	uxth	r2, r2
 8009338:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7fe fa4d 	bl	80077e4 <tcp_seg_free>
    while (next &&
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	891b      	ldrh	r3, [r3, #8]
 8009354:	461a      	mov	r2, r3
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <tcp_oos_insert_segment+0x10c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	441a      	add	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	8909      	ldrh	r1, [r1, #8]
 8009366:	440b      	add	r3, r1
 8009368:	1ad3      	subs	r3, r2, r3
    while (next &&
 800936a:	2b00      	cmp	r3, #0
 800936c:	daca      	bge.n	8009304 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01e      	beq.n	80093b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	891b      	ldrh	r3, [r3, #8]
 8009378:	461a      	mov	r2, r3
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <tcp_oos_insert_segment+0x10c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	441a      	add	r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009388:	2b00      	cmp	r3, #0
 800938a:	dd12      	ble.n	80093b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	b29a      	uxth	r2, r3
 8009394:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <tcp_oos_insert_segment+0x10c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	891b      	ldrh	r3, [r3, #8]
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f7fc fdd5 	bl	8005f5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	601a      	str	r2, [r3, #0]
}
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd90      	pop	{r4, r7, pc}
 80093c0:	08013ed0 	.word	0x08013ed0
 80093c4:	08014190 	.word	0x08014190
 80093c8:	08013f1c 	.word	0x08013f1c
 80093cc:	200000f4 	.word	0x200000f4

080093d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80093d0:	b5b0      	push	{r4, r5, r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80093de:	e03e      	b.n	800945e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fc fff4 	bl	80063dc <pbuf_clen>
 80093f4:	4603      	mov	r3, r0
 80093f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093fe:	8a7a      	ldrh	r2, [r7, #18]
 8009400:	429a      	cmp	r2, r3
 8009402:	d906      	bls.n	8009412 <tcp_free_acked_segments+0x42>
 8009404:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <tcp_free_acked_segments+0xe0>)
 8009406:	f240 4257 	movw	r2, #1111	; 0x457
 800940a:	492a      	ldr	r1, [pc, #168]	; (80094b4 <tcp_free_acked_segments+0xe4>)
 800940c:	482a      	ldr	r0, [pc, #168]	; (80094b8 <tcp_free_acked_segments+0xe8>)
 800940e:	f008 f959 	bl	80116c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009418:	8a7b      	ldrh	r3, [r7, #18]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	891a      	ldrh	r2, [r3, #8]
 8009428:	4b24      	ldr	r3, [pc, #144]	; (80094bc <tcp_free_acked_segments+0xec>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	4413      	add	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	4b22      	ldr	r3, [pc, #136]	; (80094bc <tcp_free_acked_segments+0xec>)
 8009432:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009434:	6978      	ldr	r0, [r7, #20]
 8009436:	f7fe f9d5 	bl	80077e4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00c      	beq.n	800945e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <tcp_free_acked_segments+0x8e>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <tcp_free_acked_segments+0x8e>
 8009450:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <tcp_free_acked_segments+0xe0>)
 8009452:	f240 4262 	movw	r2, #1122	; 0x462
 8009456:	491a      	ldr	r1, [pc, #104]	; (80094c0 <tcp_free_acked_segments+0xf0>)
 8009458:	4817      	ldr	r0, [pc, #92]	; (80094b8 <tcp_free_acked_segments+0xe8>)
 800945a:	f008 f933 	bl	80116c4 <iprintf>
  while (seg_list != NULL &&
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d020      	beq.n	80094a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	4618      	mov	r0, r3
 800946c:	f7fb fb06 	bl	8004a7c <lwip_htonl>
 8009470:	4604      	mov	r4, r0
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	891b      	ldrh	r3, [r3, #8]
 8009476:	461d      	mov	r5, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	899b      	ldrh	r3, [r3, #12]
 800947e:	b29b      	uxth	r3, r3
 8009480:	4618      	mov	r0, r3
 8009482:	f7fb fae6 	bl	8004a52 <lwip_htons>
 8009486:	4603      	mov	r3, r0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <tcp_free_acked_segments+0xc6>
 8009492:	2301      	movs	r3, #1
 8009494:	e000      	b.n	8009498 <tcp_free_acked_segments+0xc8>
 8009496:	2300      	movs	r3, #0
 8009498:	442b      	add	r3, r5
 800949a:	18e2      	adds	r2, r4, r3
 800949c:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <tcp_free_acked_segments+0xf4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd9c      	ble.n	80093e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80094a6:	68bb      	ldr	r3, [r7, #8]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bdb0      	pop	{r4, r5, r7, pc}
 80094b0:	08013ed0 	.word	0x08013ed0
 80094b4:	080141b8 	.word	0x080141b8
 80094b8:	08013f1c 	.word	0x08013f1c
 80094bc:	200000fc 	.word	0x200000fc
 80094c0:	080141e0 	.word	0x080141e0
 80094c4:	200000f8 	.word	0x200000f8

080094c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80094c8:	b5b0      	push	{r4, r5, r7, lr}
 80094ca:	b094      	sub	sp, #80	; 0x50
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <tcp_receive+0x20>
 80094da:	4ba6      	ldr	r3, [pc, #664]	; (8009774 <tcp_receive+0x2ac>)
 80094dc:	f240 427b 	movw	r2, #1147	; 0x47b
 80094e0:	49a5      	ldr	r1, [pc, #660]	; (8009778 <tcp_receive+0x2b0>)
 80094e2:	48a6      	ldr	r0, [pc, #664]	; (800977c <tcp_receive+0x2b4>)
 80094e4:	f008 f8ee 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7d1b      	ldrb	r3, [r3, #20]
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d806      	bhi.n	80094fe <tcp_receive+0x36>
 80094f0:	4ba0      	ldr	r3, [pc, #640]	; (8009774 <tcp_receive+0x2ac>)
 80094f2:	f240 427c 	movw	r2, #1148	; 0x47c
 80094f6:	49a2      	ldr	r1, [pc, #648]	; (8009780 <tcp_receive+0x2b8>)
 80094f8:	48a0      	ldr	r0, [pc, #640]	; (800977c <tcp_receive+0x2b4>)
 80094fa:	f008 f8e3 	bl	80116c4 <iprintf>

  if (flags & TCP_ACK) {
 80094fe:	4ba1      	ldr	r3, [pc, #644]	; (8009784 <tcp_receive+0x2bc>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8263 	beq.w	80099d2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009512:	461a      	mov	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	4413      	add	r3, r2
 800951a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009520:	4b99      	ldr	r3, [pc, #612]	; (8009788 <tcp_receive+0x2c0>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	db1b      	blt.n	8009562 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800952e:	4b96      	ldr	r3, [pc, #600]	; (8009788 <tcp_receive+0x2c0>)
 8009530:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009532:	429a      	cmp	r2, r3
 8009534:	d106      	bne.n	8009544 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800953a:	4b94      	ldr	r3, [pc, #592]	; (800978c <tcp_receive+0x2c4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	db0e      	blt.n	8009562 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009548:	4b90      	ldr	r3, [pc, #576]	; (800978c <tcp_receive+0x2c4>)
 800954a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800954c:	429a      	cmp	r2, r3
 800954e:	d125      	bne.n	800959c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009550:	4b8f      	ldr	r3, [pc, #572]	; (8009790 <tcp_receive+0x2c8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	89db      	ldrh	r3, [r3, #14]
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800955e:	429a      	cmp	r2, r3
 8009560:	d91c      	bls.n	800959c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009562:	4b8b      	ldr	r3, [pc, #556]	; (8009790 <tcp_receive+0x2c8>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	89db      	ldrh	r3, [r3, #14]
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800957c:	429a      	cmp	r2, r3
 800957e:	d205      	bcs.n	800958c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800958c:	4b7e      	ldr	r3, [pc, #504]	; (8009788 <tcp_receive+0x2c0>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009594:	4b7d      	ldr	r3, [pc, #500]	; (800978c <tcp_receive+0x2c4>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800959c:	4b7b      	ldr	r3, [pc, #492]	; (800978c <tcp_receive+0x2c4>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dc58      	bgt.n	800965c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80095aa:	4b7a      	ldr	r3, [pc, #488]	; (8009794 <tcp_receive+0x2cc>)
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d14b      	bne.n	800964a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80095bc:	4413      	add	r3, r2
 80095be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d142      	bne.n	800964a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db3d      	blt.n	800964a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d2:	4b6e      	ldr	r3, [pc, #440]	; (800978c <tcp_receive+0x2c4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d137      	bne.n	800964a <tcp_receive+0x182>
              found_dupack = 1;
 80095da:	2301      	movs	r3, #1
 80095dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095e4:	2bff      	cmp	r3, #255	; 0xff
 80095e6:	d007      	beq.n	80095f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095ee:	3301      	adds	r3, #1
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d91b      	bls.n	800963a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800960c:	4413      	add	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009616:	429a      	cmp	r2, r3
 8009618:	d30a      	bcc.n	8009630 <tcp_receive+0x168>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009624:	4413      	add	r3, r2
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800962e:	e004      	b.n	800963a <tcp_receive+0x172>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009636:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009640:	2b02      	cmp	r3, #2
 8009642:	d902      	bls.n	800964a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 ff01 	bl	800b44c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800964a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 8160 	bne.w	8009912 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800965a:	e15a      	b.n	8009912 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800965c:	4b4b      	ldr	r3, [pc, #300]	; (800978c <tcp_receive+0x2c4>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	f2c0 814d 	blt.w	8009908 <tcp_receive+0x440>
 800966e:	4b47      	ldr	r3, [pc, #284]	; (800978c <tcp_receive+0x2c4>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	f300 8145 	bgt.w	8009908 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8b5b      	ldrh	r3, [r3, #26]
 8009682:	f003 0304 	and.w	r3, r3, #4
 8009686:	2b00      	cmp	r3, #0
 8009688:	d010      	beq.n	80096ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	8b5b      	ldrh	r3, [r3, #26]
 800968e:	f023 0304 	bic.w	r3, r3, #4
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096ba:	10db      	asrs	r3, r3, #3
 80096bc:	b21b      	sxth	r3, r3
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80096d4:	4b2d      	ldr	r3, [pc, #180]	; (800978c <tcp_receive+0x2c4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	b29b      	uxth	r3, r3
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80096ec:	4b27      	ldr	r3, [pc, #156]	; (800978c <tcp_receive+0x2c4>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7d1b      	ldrb	r3, [r3, #20]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	f240 8096 	bls.w	800982a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800970a:	429a      	cmp	r2, r3
 800970c:	d244      	bcs.n	8009798 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8b5b      	ldrh	r3, [r3, #26]
 8009712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <tcp_receive+0x256>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <tcp_receive+0x258>
 800971e:	2302      	movs	r3, #2
 8009720:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800972e:	fb12 f303 	smulbb	r3, r2, r3
 8009732:	b29b      	uxth	r3, r3
 8009734:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009736:	4293      	cmp	r3, r2
 8009738:	bf28      	it	cs
 800973a:	4613      	movcs	r3, r2
 800973c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009746:	4413      	add	r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009750:	429a      	cmp	r2, r3
 8009752:	d309      	bcc.n	8009768 <tcp_receive+0x2a0>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800975a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800975c:	4413      	add	r3, r2
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009766:	e060      	b.n	800982a <tcp_receive+0x362>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800976e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009772:	e05a      	b.n	800982a <tcp_receive+0x362>
 8009774:	08013ed0 	.word	0x08013ed0
 8009778:	08014200 	.word	0x08014200
 800977c:	08013f1c 	.word	0x08013f1c
 8009780:	0801421c 	.word	0x0801421c
 8009784:	20000100 	.word	0x20000100
 8009788:	200000f4 	.word	0x200000f4
 800978c:	200000f8 	.word	0x200000f8
 8009790:	200000e4 	.word	0x200000e4
 8009794:	200000fe 	.word	0x200000fe
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800979e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097a0:	4413      	add	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d309      	bcc.n	80097c2 <tcp_receive+0x2fa>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097b6:	4413      	add	r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80097c0:	e004      	b.n	80097cc <tcp_receive+0x304>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097d8:	429a      	cmp	r2, r3
 80097da:	d326      	bcc.n	800982a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097fc:	4413      	add	r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009806:	429a      	cmp	r2, r3
 8009808:	d30a      	bcc.n	8009820 <tcp_receive+0x358>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009814:	4413      	add	r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800981e:	e004      	b.n	800982a <tcp_receive+0x362>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009826:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009832:	4a98      	ldr	r2, [pc, #608]	; (8009a94 <tcp_receive+0x5cc>)
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fdcb 	bl	80093d0 <tcp_free_acked_segments>
 800983a:	4602      	mov	r2, r0
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009848:	4a93      	ldr	r2, [pc, #588]	; (8009a98 <tcp_receive+0x5d0>)
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fdc0 	bl	80093d0 <tcp_free_acked_segments>
 8009850:	4602      	mov	r2, r0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985a:	2b00      	cmp	r3, #0
 800985c:	d104      	bne.n	8009868 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009864:	861a      	strh	r2, [r3, #48]	; 0x30
 8009866:	e002      	b.n	800986e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d103      	bne.n	8009884 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800988a:	4b84      	ldr	r3, [pc, #528]	; (8009a9c <tcp_receive+0x5d4>)
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	4413      	add	r3, r2
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8b5b      	ldrh	r3, [r3, #26]
 800989c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d035      	beq.n	8009910 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d118      	bne.n	80098de <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00c      	beq.n	80098ce <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fb f8db 	bl	8004a7c <lwip_htonl>
 80098c6:	4603      	mov	r3, r0
 80098c8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dc20      	bgt.n	8009910 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8b5b      	ldrh	r3, [r3, #26]
 80098d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098dc:	e018      	b.n	8009910 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fb f8c6 	bl	8004a7c <lwip_htonl>
 80098f0:	4603      	mov	r3, r0
 80098f2:	1ae3      	subs	r3, r4, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc0b      	bgt.n	8009910 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8b5b      	ldrh	r3, [r3, #26]
 80098fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009906:	e003      	b.n	8009910 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 ff97 	bl	800b83c <tcp_send_empty_ack>
 800990e:	e000      	b.n	8009912 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009910:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009916:	2b00      	cmp	r3, #0
 8009918:	d05b      	beq.n	80099d2 <tcp_receive+0x50a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800991e:	4b60      	ldr	r3, [pc, #384]	; (8009aa0 <tcp_receive+0x5d8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	da54      	bge.n	80099d2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009928:	4b5e      	ldr	r3, [pc, #376]	; (8009aa4 <tcp_receive+0x5dc>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	b29b      	uxth	r3, r3
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	b29b      	uxth	r3, r3
 8009938:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800993c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009946:	10db      	asrs	r3, r3, #3
 8009948:	b21b      	sxth	r3, r3
 800994a:	b29b      	uxth	r3, r3
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	b29b      	uxth	r3, r3
 8009950:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800995a:	b29a      	uxth	r2, r3
 800995c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009960:	4413      	add	r3, r2
 8009962:	b29b      	uxth	r3, r3
 8009964:	b21a      	sxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800996a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800996e:	2b00      	cmp	r3, #0
 8009970:	da05      	bge.n	800997e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009976:	425b      	negs	r3, r3
 8009978:	b29b      	uxth	r3, r3
 800997a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800997e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009988:	109b      	asrs	r3, r3, #2
 800998a:	b21b      	sxth	r3, r3
 800998c:	b29b      	uxth	r3, r3
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	b29b      	uxth	r3, r3
 8009992:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800999c:	b29a      	uxth	r2, r3
 800999e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099a2:	4413      	add	r3, r2
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	b21a      	sxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099b2:	10db      	asrs	r3, r3, #3
 80099b4:	b21b      	sxth	r3, r3
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	b21a      	sxth	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80099d2:	4b35      	ldr	r3, [pc, #212]	; (8009aa8 <tcp_receive+0x5e0>)
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 84e1 	beq.w	800a39e <tcp_receive+0xed6>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7d1b      	ldrb	r3, [r3, #20]
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	f200 84dc 	bhi.w	800a39e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ea:	4b30      	ldr	r3, [pc, #192]	; (8009aac <tcp_receive+0x5e4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f2c0 808e 	blt.w	8009b14 <tcp_receive+0x64c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099fc:	4b2a      	ldr	r3, [pc, #168]	; (8009aa8 <tcp_receive+0x5e0>)
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	4619      	mov	r1, r3
 8009a02:	4b2a      	ldr	r3, [pc, #168]	; (8009aac <tcp_receive+0x5e4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	440b      	add	r3, r1
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f300 8081 	bgt.w	8009b14 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009a12:	4b27      	ldr	r3, [pc, #156]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1c:	4b23      	ldr	r3, [pc, #140]	; (8009aac <tcp_receive+0x5e4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a24:	4b22      	ldr	r3, [pc, #136]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <tcp_receive+0x572>
 8009a2c:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <tcp_receive+0x5ec>)
 8009a2e:	f240 5294 	movw	r2, #1428	; 0x594
 8009a32:	4921      	ldr	r1, [pc, #132]	; (8009ab8 <tcp_receive+0x5f0>)
 8009a34:	4821      	ldr	r0, [pc, #132]	; (8009abc <tcp_receive+0x5f4>)
 8009a36:	f007 fe45 	bl	80116c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d906      	bls.n	8009a52 <tcp_receive+0x58a>
 8009a44:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <tcp_receive+0x5ec>)
 8009a46:	f240 5295 	movw	r2, #1429	; 0x595
 8009a4a:	491d      	ldr	r1, [pc, #116]	; (8009ac0 <tcp_receive+0x5f8>)
 8009a4c:	481b      	ldr	r0, [pc, #108]	; (8009abc <tcp_receive+0x5f4>)
 8009a4e:	f007 fe39 	bl	80116c4 <iprintf>
      off = (u16_t)off32;
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a58:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	891b      	ldrh	r3, [r3, #8]
 8009a5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d906      	bls.n	8009a74 <tcp_receive+0x5ac>
 8009a66:	4b13      	ldr	r3, [pc, #76]	; (8009ab4 <tcp_receive+0x5ec>)
 8009a68:	f240 5297 	movw	r2, #1431	; 0x597
 8009a6c:	4915      	ldr	r1, [pc, #84]	; (8009ac4 <tcp_receive+0x5fc>)
 8009a6e:	4813      	ldr	r0, [pc, #76]	; (8009abc <tcp_receive+0x5f4>)
 8009a70:	f007 fe28 	bl	80116c4 <iprintf>
      inseg.len -= off;
 8009a74:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a76:	891a      	ldrh	r2, [r3, #8]
 8009a78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a82:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <tcp_receive+0x5e8>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	891a      	ldrh	r2, [r3, #8]
 8009a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009a92:	e029      	b.n	8009ae8 <tcp_receive+0x620>
 8009a94:	08014238 	.word	0x08014238
 8009a98:	08014240 	.word	0x08014240
 8009a9c:	200000fc 	.word	0x200000fc
 8009aa0:	200000f8 	.word	0x200000f8
 8009aa4:	20006990 	.word	0x20006990
 8009aa8:	200000fe 	.word	0x200000fe
 8009aac:	200000f4 	.word	0x200000f4
 8009ab0:	200000d0 	.word	0x200000d0
 8009ab4:	08013ed0 	.word	0x08013ed0
 8009ab8:	08014248 	.word	0x08014248
 8009abc:	08013f1c 	.word	0x08013f1c
 8009ac0:	08014258 	.word	0x08014258
 8009ac4:	08014268 	.word	0x08014268
        off -= p->len;
 8009ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aca:	895b      	ldrh	r3, [r3, #10]
 8009acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009ada:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ade:	2200      	movs	r2, #0
 8009ae0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aea:	895b      	ldrh	r3, [r3, #10]
 8009aec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d8e9      	bhi.n	8009ac8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009af4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009af8:	4619      	mov	r1, r3
 8009afa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009afc:	f7fc fb40 	bl	8006180 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	4a91      	ldr	r2, [pc, #580]	; (8009d4c <tcp_receive+0x884>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	4b91      	ldr	r3, [pc, #580]	; (8009d50 <tcp_receive+0x888>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	4a8f      	ldr	r2, [pc, #572]	; (8009d4c <tcp_receive+0x884>)
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b12:	e00d      	b.n	8009b30 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b14:	4b8d      	ldr	r3, [pc, #564]	; (8009d4c <tcp_receive+0x884>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da06      	bge.n	8009b30 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8b5b      	ldrh	r3, [r3, #26]
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b30:	4b86      	ldr	r3, [pc, #536]	; (8009d4c <tcp_receive+0x884>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f2c0 842a 	blt.w	800a394 <tcp_receive+0xecc>
 8009b40:	4b82      	ldr	r3, [pc, #520]	; (8009d4c <tcp_receive+0x884>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b4c:	440b      	add	r3, r1
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	3301      	adds	r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f300 841e 	bgt.w	800a394 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b5c:	4b7b      	ldr	r3, [pc, #492]	; (8009d4c <tcp_receive+0x884>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	f040 829a 	bne.w	800a09a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009b66:	4b7a      	ldr	r3, [pc, #488]	; (8009d50 <tcp_receive+0x888>)
 8009b68:	891c      	ldrh	r4, [r3, #8]
 8009b6a:	4b79      	ldr	r3, [pc, #484]	; (8009d50 <tcp_receive+0x888>)
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	899b      	ldrh	r3, [r3, #12]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fa ff6d 	bl	8004a52 <lwip_htons>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <tcp_receive+0x6c0>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <tcp_receive+0x6c2>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4423      	add	r3, r4
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	4b71      	ldr	r3, [pc, #452]	; (8009d54 <tcp_receive+0x88c>)
 8009b90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b96:	4b6f      	ldr	r3, [pc, #444]	; (8009d54 <tcp_receive+0x88c>)
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d275      	bcs.n	8009c8a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b9e:	4b6c      	ldr	r3, [pc, #432]	; (8009d50 <tcp_receive+0x888>)
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	899b      	ldrh	r3, [r3, #12]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fa ff53 	bl	8004a52 <lwip_htons>
 8009bac:	4603      	mov	r3, r0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01f      	beq.n	8009bf8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009bb8:	4b65      	ldr	r3, [pc, #404]	; (8009d50 <tcp_receive+0x888>)
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	899b      	ldrh	r3, [r3, #12]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	b21b      	sxth	r3, r3
 8009bc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bc6:	b21c      	sxth	r4, r3
 8009bc8:	4b61      	ldr	r3, [pc, #388]	; (8009d50 <tcp_receive+0x888>)
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	899b      	ldrh	r3, [r3, #12]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fa ff3e 	bl	8004a52 <lwip_htons>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fa ff35 	bl	8004a52 <lwip_htons>
 8009be8:	4603      	mov	r3, r0
 8009bea:	b21b      	sxth	r3, r3
 8009bec:	4323      	orrs	r3, r4
 8009bee:	b21a      	sxth	r2, r3
 8009bf0:	4b57      	ldr	r3, [pc, #348]	; (8009d50 <tcp_receive+0x888>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	b292      	uxth	r2, r2
 8009bf6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bfc:	4b54      	ldr	r3, [pc, #336]	; (8009d50 <tcp_receive+0x888>)
 8009bfe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c00:	4b53      	ldr	r3, [pc, #332]	; (8009d50 <tcp_receive+0x888>)
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	899b      	ldrh	r3, [r3, #12]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fa ff22 	bl	8004a52 <lwip_htons>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <tcp_receive+0x75e>
            inseg.len -= 1;
 8009c1a:	4b4d      	ldr	r3, [pc, #308]	; (8009d50 <tcp_receive+0x888>)
 8009c1c:	891b      	ldrh	r3, [r3, #8]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	4b4b      	ldr	r3, [pc, #300]	; (8009d50 <tcp_receive+0x888>)
 8009c24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009c26:	4b4a      	ldr	r3, [pc, #296]	; (8009d50 <tcp_receive+0x888>)
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	4b49      	ldr	r3, [pc, #292]	; (8009d50 <tcp_receive+0x888>)
 8009c2c:	891b      	ldrh	r3, [r3, #8]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7fc f993 	bl	8005f5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <tcp_receive+0x888>)
 8009c38:	891c      	ldrh	r4, [r3, #8]
 8009c3a:	4b45      	ldr	r3, [pc, #276]	; (8009d50 <tcp_receive+0x888>)
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	899b      	ldrh	r3, [r3, #12]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fa ff05 	bl	8004a52 <lwip_htons>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <tcp_receive+0x790>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e000      	b.n	8009c5a <tcp_receive+0x792>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4423      	add	r3, r4
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	4b3d      	ldr	r3, [pc, #244]	; (8009d54 <tcp_receive+0x88c>)
 8009c60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c62:	4b3c      	ldr	r3, [pc, #240]	; (8009d54 <tcp_receive+0x88c>)
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	4b38      	ldr	r3, [pc, #224]	; (8009d4c <tcp_receive+0x884>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c76:	440b      	add	r3, r1
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d006      	beq.n	8009c8a <tcp_receive+0x7c2>
 8009c7c:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <tcp_receive+0x890>)
 8009c7e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009c82:	4936      	ldr	r1, [pc, #216]	; (8009d5c <tcp_receive+0x894>)
 8009c84:	4836      	ldr	r0, [pc, #216]	; (8009d60 <tcp_receive+0x898>)
 8009c86:	f007 fd1d 	bl	80116c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80e7 	beq.w	8009e62 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c94:	4b2e      	ldr	r3, [pc, #184]	; (8009d50 <tcp_receive+0x888>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	899b      	ldrh	r3, [r3, #12]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fa fed8 	bl	8004a52 <lwip_htons>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d010      	beq.n	8009cd0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009cae:	e00a      	b.n	8009cc6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7fd fd8f 	bl	80077e4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1f0      	bne.n	8009cb0 <tcp_receive+0x7e8>
 8009cce:	e0c8      	b.n	8009e62 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009cd6:	e052      	b.n	8009d7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	899b      	ldrh	r3, [r3, #12]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fa feb6 	bl	8004a52 <lwip_htons>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d03d      	beq.n	8009d6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009cf2:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <tcp_receive+0x888>)
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	899b      	ldrh	r3, [r3, #12]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fa fea9 	bl	8004a52 <lwip_htons>
 8009d00:	4603      	mov	r3, r0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d130      	bne.n	8009d6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d0c:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <tcp_receive+0x888>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	899b      	ldrh	r3, [r3, #12]
 8009d12:	b29c      	uxth	r4, r3
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7fa fe9c 	bl	8004a52 <lwip_htons>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <tcp_receive+0x888>)
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	4322      	orrs	r2, r4
 8009d24:	b292      	uxth	r2, r2
 8009d26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d28:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <tcp_receive+0x888>)
 8009d2a:	891c      	ldrh	r4, [r3, #8]
 8009d2c:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <tcp_receive+0x888>)
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	899b      	ldrh	r3, [r3, #12]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fa fe8c 	bl	8004a52 <lwip_htons>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <tcp_receive+0x89c>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e00d      	b.n	8009d66 <tcp_receive+0x89e>
 8009d4a:	bf00      	nop
 8009d4c:	200000f4 	.word	0x200000f4
 8009d50:	200000d0 	.word	0x200000d0
 8009d54:	200000fe 	.word	0x200000fe
 8009d58:	08013ed0 	.word	0x08013ed0
 8009d5c:	08014278 	.word	0x08014278
 8009d60:	08013f1c 	.word	0x08013f1c
 8009d64:	2300      	movs	r3, #0
 8009d66:	4423      	add	r3, r4
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	4b98      	ldr	r3, [pc, #608]	; (8009fcc <tcp_receive+0xb04>)
 8009d6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009d78:	6938      	ldr	r0, [r7, #16]
 8009d7a:	f7fd fd33 	bl	80077e4 <tcp_seg_free>
            while (next &&
 8009d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00e      	beq.n	8009da2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009d84:	4b91      	ldr	r3, [pc, #580]	; (8009fcc <tcp_receive+0xb04>)
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b91      	ldr	r3, [pc, #580]	; (8009fd0 <tcp_receive+0xb08>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	441a      	add	r2, r3
 8009d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d98:	8909      	ldrh	r1, [r1, #8]
 8009d9a:	440b      	add	r3, r1
 8009d9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da9a      	bge.n	8009cd8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d059      	beq.n	8009e5c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009da8:	4b88      	ldr	r3, [pc, #544]	; (8009fcc <tcp_receive+0xb04>)
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	4b88      	ldr	r3, [pc, #544]	; (8009fd0 <tcp_receive+0xb08>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	441a      	add	r2, r3
 8009db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd4d      	ble.n	8009e5c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	4b81      	ldr	r3, [pc, #516]	; (8009fd0 <tcp_receive+0xb08>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	4b80      	ldr	r3, [pc, #512]	; (8009fd4 <tcp_receive+0xb0c>)
 8009dd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009dd6:	4b7f      	ldr	r3, [pc, #508]	; (8009fd4 <tcp_receive+0xb0c>)
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	899b      	ldrh	r3, [r3, #12]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fa fe37 	bl	8004a52 <lwip_htons>
 8009de4:	4603      	mov	r3, r0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d005      	beq.n	8009dfc <tcp_receive+0x934>
                inseg.len -= 1;
 8009df0:	4b78      	ldr	r3, [pc, #480]	; (8009fd4 <tcp_receive+0xb0c>)
 8009df2:	891b      	ldrh	r3, [r3, #8]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	4b76      	ldr	r3, [pc, #472]	; (8009fd4 <tcp_receive+0xb0c>)
 8009dfa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009dfc:	4b75      	ldr	r3, [pc, #468]	; (8009fd4 <tcp_receive+0xb0c>)
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	4b74      	ldr	r3, [pc, #464]	; (8009fd4 <tcp_receive+0xb0c>)
 8009e02:	891b      	ldrh	r3, [r3, #8]
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7fc f8a8 	bl	8005f5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009e0c:	4b71      	ldr	r3, [pc, #452]	; (8009fd4 <tcp_receive+0xb0c>)
 8009e0e:	891c      	ldrh	r4, [r3, #8]
 8009e10:	4b70      	ldr	r3, [pc, #448]	; (8009fd4 <tcp_receive+0xb0c>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	899b      	ldrh	r3, [r3, #12]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fa fe1a 	bl	8004a52 <lwip_htons>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0303 	and.w	r3, r3, #3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <tcp_receive+0x966>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <tcp_receive+0x968>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4423      	add	r3, r4
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	4b65      	ldr	r3, [pc, #404]	; (8009fcc <tcp_receive+0xb04>)
 8009e36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009e38:	4b64      	ldr	r3, [pc, #400]	; (8009fcc <tcp_receive+0xb04>)
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4b64      	ldr	r3, [pc, #400]	; (8009fd0 <tcp_receive+0xb08>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	441a      	add	r2, r3
 8009e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d006      	beq.n	8009e5c <tcp_receive+0x994>
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <tcp_receive+0xb10>)
 8009e50:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8009e54:	4961      	ldr	r1, [pc, #388]	; (8009fdc <tcp_receive+0xb14>)
 8009e56:	4862      	ldr	r0, [pc, #392]	; (8009fe0 <tcp_receive+0xb18>)
 8009e58:	f007 fc34 	bl	80116c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009e62:	4b5a      	ldr	r3, [pc, #360]	; (8009fcc <tcp_receive+0xb04>)
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <tcp_receive+0xb08>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	441a      	add	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e76:	4b55      	ldr	r3, [pc, #340]	; (8009fcc <tcp_receive+0xb04>)
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d206      	bcs.n	8009e8c <tcp_receive+0x9c4>
 8009e7e:	4b56      	ldr	r3, [pc, #344]	; (8009fd8 <tcp_receive+0xb10>)
 8009e80:	f240 6207 	movw	r2, #1543	; 0x607
 8009e84:	4957      	ldr	r1, [pc, #348]	; (8009fe4 <tcp_receive+0xb1c>)
 8009e86:	4856      	ldr	r0, [pc, #344]	; (8009fe0 <tcp_receive+0xb18>)
 8009e88:	f007 fc1c 	bl	80116c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e90:	4b4e      	ldr	r3, [pc, #312]	; (8009fcc <tcp_receive+0xb04>)
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fc ffc5 	bl	8006e2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009ea2:	4b4c      	ldr	r3, [pc, #304]	; (8009fd4 <tcp_receive+0xb0c>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	891b      	ldrh	r3, [r3, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d006      	beq.n	8009eba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009eac:	4b49      	ldr	r3, [pc, #292]	; (8009fd4 <tcp_receive+0xb0c>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	4a4d      	ldr	r2, [pc, #308]	; (8009fe8 <tcp_receive+0xb20>)
 8009eb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009eb4:	4b47      	ldr	r3, [pc, #284]	; (8009fd4 <tcp_receive+0xb0c>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009eba:	4b46      	ldr	r3, [pc, #280]	; (8009fd4 <tcp_receive+0xb0c>)
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	899b      	ldrh	r3, [r3, #12]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fa fdc5 	bl	8004a52 <lwip_htons>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80b8 	beq.w	800a046 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009ed6:	4b45      	ldr	r3, [pc, #276]	; (8009fec <tcp_receive+0xb24>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f043 0320 	orr.w	r3, r3, #32
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	4b42      	ldr	r3, [pc, #264]	; (8009fec <tcp_receive+0xb24>)
 8009ee2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009ee4:	e0af      	b.n	800a046 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4a36      	ldr	r2, [pc, #216]	; (8009fd0 <tcp_receive+0xb08>)
 8009ef6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	891b      	ldrh	r3, [r3, #8]
 8009efc:	461c      	mov	r4, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	899b      	ldrh	r3, [r3, #12]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fa fda3 	bl	8004a52 <lwip_htons>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <tcp_receive+0xa54>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e000      	b.n	8009f1e <tcp_receive+0xa56>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	191a      	adds	r2, r3, r4
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	441a      	add	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2e:	461c      	mov	r4, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	891b      	ldrh	r3, [r3, #8]
 8009f34:	461d      	mov	r5, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	899b      	ldrh	r3, [r3, #12]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fa fd87 	bl	8004a52 <lwip_htons>
 8009f44:	4603      	mov	r3, r0
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <tcp_receive+0xa8c>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e000      	b.n	8009f56 <tcp_receive+0xa8e>
 8009f54:	2300      	movs	r3, #0
 8009f56:	442b      	add	r3, r5
 8009f58:	429c      	cmp	r4, r3
 8009f5a:	d206      	bcs.n	8009f6a <tcp_receive+0xaa2>
 8009f5c:	4b1e      	ldr	r3, [pc, #120]	; (8009fd8 <tcp_receive+0xb10>)
 8009f5e:	f240 622c 	movw	r2, #1580	; 0x62c
 8009f62:	4923      	ldr	r1, [pc, #140]	; (8009ff0 <tcp_receive+0xb28>)
 8009f64:	481e      	ldr	r0, [pc, #120]	; (8009fe0 <tcp_receive+0xb18>)
 8009f66:	f007 fbad 	bl	80116c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	891b      	ldrh	r3, [r3, #8]
 8009f6e:	461c      	mov	r4, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fa fd6a 	bl	8004a52 <lwip_htons>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <tcp_receive+0xac6>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <tcp_receive+0xac8>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	1919      	adds	r1, r3, r4
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f96:	b28b      	uxth	r3, r1
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7fc ff43 	bl	8006e2c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	891b      	ldrh	r3, [r3, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d028      	beq.n	800a002 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <tcp_receive+0xb20>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01d      	beq.n	8009ff4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <tcp_receive+0xb20>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fc fa44 	bl	8006450 <pbuf_cat>
 8009fc8:	e018      	b.n	8009ffc <tcp_receive+0xb34>
 8009fca:	bf00      	nop
 8009fcc:	200000fe 	.word	0x200000fe
 8009fd0:	200000f4 	.word	0x200000f4
 8009fd4:	200000d0 	.word	0x200000d0
 8009fd8:	08013ed0 	.word	0x08013ed0
 8009fdc:	080142b0 	.word	0x080142b0
 8009fe0:	08013f1c 	.word	0x08013f1c
 8009fe4:	080142ec 	.word	0x080142ec
 8009fe8:	20000104 	.word	0x20000104
 8009fec:	20000101 	.word	0x20000101
 8009ff0:	0801430c 	.word	0x0801430c
            } else {
              recv_data = cseg->p;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4a70      	ldr	r2, [pc, #448]	; (800a1bc <tcp_receive+0xcf4>)
 8009ffa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	899b      	ldrh	r3, [r3, #12]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fa fd21 	bl	8004a52 <lwip_htons>
 800a010:	4603      	mov	r3, r0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00d      	beq.n	800a038 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a01c:	4b68      	ldr	r3, [pc, #416]	; (800a1c0 <tcp_receive+0xcf8>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f043 0320 	orr.w	r3, r3, #32
 800a024:	b2da      	uxtb	r2, r3
 800a026:	4b66      	ldr	r3, [pc, #408]	; (800a1c0 <tcp_receive+0xcf8>)
 800a028:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	7d1b      	ldrb	r3, [r3, #20]
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d102      	bne.n	800a038 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2207      	movs	r2, #7
 800a036:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a040:	68b8      	ldr	r0, [r7, #8]
 800a042:	f7fd fbcf 	bl	80077e4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f43f af43 	beq.w	8009ee6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	8b5b      	ldrh	r3, [r3, #26]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00e      	beq.n	800a08a <tcp_receive+0xbc2>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8b5b      	ldrh	r3, [r3, #26]
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	835a      	strh	r2, [r3, #26]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8b5b      	ldrh	r3, [r3, #26]
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a088:	e188      	b.n	800a39c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8b5b      	ldrh	r3, [r3, #26]
 800a08e:	f043 0301 	orr.w	r3, r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a098:	e180      	b.n	800a39c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d106      	bne.n	800a0b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a0a2:	4848      	ldr	r0, [pc, #288]	; (800a1c4 <tcp_receive+0xcfc>)
 800a0a4:	f7fd fbb6 	bl	8007814 <tcp_seg_copy>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	675a      	str	r2, [r3, #116]	; 0x74
 800a0ae:	e16d      	b.n	800a38c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0ba:	e157      	b.n	800a36c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	4b41      	ldr	r3, [pc, #260]	; (800a1c8 <tcp_receive+0xd00>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d11d      	bne.n	800a106 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a0ca:	4b3e      	ldr	r3, [pc, #248]	; (800a1c4 <tcp_receive+0xcfc>)
 800a0cc:	891a      	ldrh	r2, [r3, #8]
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	891b      	ldrh	r3, [r3, #8]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	f240 814f 	bls.w	800a376 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a0d8:	483a      	ldr	r0, [pc, #232]	; (800a1c4 <tcp_receive+0xcfc>)
 800a0da:	f7fd fb9b 	bl	8007814 <tcp_seg_copy>
 800a0de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 8149 	beq.w	800a37a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e002      	b.n	800a0fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a0fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0fe:	6978      	ldr	r0, [r7, #20]
 800a100:	f7ff f8de 	bl	80092c0 <tcp_oos_insert_segment>
                }
                break;
 800a104:	e139      	b.n	800a37a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d117      	bne.n	800a13c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a10c:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <tcp_receive+0xd00>)
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	da57      	bge.n	800a1cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a11c:	4829      	ldr	r0, [pc, #164]	; (800a1c4 <tcp_receive+0xcfc>)
 800a11e:	f7fd fb79 	bl	8007814 <tcp_seg_copy>
 800a122:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8129 	beq.w	800a37e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a134:	69b8      	ldr	r0, [r7, #24]
 800a136:	f7ff f8c3 	bl	80092c0 <tcp_oos_insert_segment>
                  }
                  break;
 800a13a:	e120      	b.n	800a37e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a13c:	4b22      	ldr	r3, [pc, #136]	; (800a1c8 <tcp_receive+0xd00>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	db3e      	blt.n	800a1cc <tcp_receive+0xd04>
 800a14e:	4b1e      	ldr	r3, [pc, #120]	; (800a1c8 <tcp_receive+0xd00>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	3301      	adds	r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dc35      	bgt.n	800a1cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a160:	4818      	ldr	r0, [pc, #96]	; (800a1c4 <tcp_receive+0xcfc>)
 800a162:	f7fd fb57 	bl	8007814 <tcp_seg_copy>
 800a166:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 8109 	beq.w	800a382 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a178:	8912      	ldrh	r2, [r2, #8]
 800a17a:	441a      	add	r2, r3
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <tcp_receive+0xd00>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	dd12      	ble.n	800a1ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <tcp_receive+0xd00>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	b29b      	uxth	r3, r3
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	b29a      	uxth	r2, r3
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	891b      	ldrh	r3, [r3, #8]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f7fb fed8 	bl	8005f5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a1b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1b4:	69f8      	ldr	r0, [r7, #28]
 800a1b6:	f7ff f883 	bl	80092c0 <tcp_oos_insert_segment>
                  }
                  break;
 800a1ba:	e0e2      	b.n	800a382 <tcp_receive+0xeba>
 800a1bc:	20000104 	.word	0x20000104
 800a1c0:	20000101 	.word	0x20000101
 800a1c4:	200000d0 	.word	0x200000d0
 800a1c8:	200000f4 	.word	0x200000f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f040 80c6 	bne.w	800a366 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a1da:	4b80      	ldr	r3, [pc, #512]	; (800a3dc <tcp_receive+0xf14>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f340 80bd 	ble.w	800a366 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	899b      	ldrh	r3, [r3, #12]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fa fc2c 	bl	8004a52 <lwip_htons>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	f040 80bf 	bne.w	800a386 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a208:	4875      	ldr	r0, [pc, #468]	; (800a3e0 <tcp_receive+0xf18>)
 800a20a:	f7fd fb03 	bl	8007814 <tcp_seg_copy>
 800a20e:	4602      	mov	r2, r0
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80b6 	beq.w	800a38a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a226:	8912      	ldrh	r2, [r2, #8]
 800a228:	441a      	add	r2, r3
 800a22a:	4b6c      	ldr	r3, [pc, #432]	; (800a3dc <tcp_receive+0xf14>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	dd12      	ble.n	800a25a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a234:	4b69      	ldr	r3, [pc, #420]	; (800a3dc <tcp_receive+0xf14>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b29a      	uxth	r2, r3
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	b29b      	uxth	r3, r3
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	b29a      	uxth	r2, r3
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	891b      	ldrh	r3, [r3, #8]
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f7fb fe81 	bl	8005f5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a25a:	4b62      	ldr	r3, [pc, #392]	; (800a3e4 <tcp_receive+0xf1c>)
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	4b5e      	ldr	r3, [pc, #376]	; (800a3dc <tcp_receive+0xf14>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a26e:	440b      	add	r3, r1
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	f340 8089 	ble.w	800a38a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	899b      	ldrh	r3, [r3, #12]
 800a280:	b29b      	uxth	r3, r3
 800a282:	4618      	mov	r0, r3
 800a284:	f7fa fbe5 	bl	8004a52 <lwip_htons>
 800a288:	4603      	mov	r3, r0
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	d022      	beq.n	800a2da <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	b21b      	sxth	r3, r3
 800a2a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2a4:	b21c      	sxth	r4, r3
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	899b      	ldrh	r3, [r3, #12]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fa fbce 	bl	8004a52 <lwip_htons>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fa fbc5 	bl	8004a52 <lwip_htons>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	b21b      	sxth	r3, r3
 800a2cc:	4323      	orrs	r3, r4
 800a2ce:	b21a      	sxth	r2, r3
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	b292      	uxth	r2, r2
 800a2d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	4413      	add	r3, r2
 800a2e6:	b299      	uxth	r1, r3
 800a2e8:	4b3c      	ldr	r3, [pc, #240]	; (800a3dc <tcp_receive+0xf14>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	1a8a      	subs	r2, r1, r2
 800a2f4:	b292      	uxth	r2, r2
 800a2f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	891b      	ldrh	r3, [r3, #8]
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f7fb fe28 	bl	8005f5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	891c      	ldrh	r4, [r3, #8]
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	899b      	ldrh	r3, [r3, #12]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fa fb98 	bl	8004a52 <lwip_htons>
 800a322:	4603      	mov	r3, r0
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <tcp_receive+0xe6a>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <tcp_receive+0xe6c>
 800a332:	2300      	movs	r3, #0
 800a334:	4423      	add	r3, r4
 800a336:	b29a      	uxth	r2, r3
 800a338:	4b2a      	ldr	r3, [pc, #168]	; (800a3e4 <tcp_receive+0xf1c>)
 800a33a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a33c:	4b29      	ldr	r3, [pc, #164]	; (800a3e4 <tcp_receive+0xf1c>)
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <tcp_receive+0xf14>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	441a      	add	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a350:	440b      	add	r3, r1
 800a352:	429a      	cmp	r2, r3
 800a354:	d019      	beq.n	800a38a <tcp_receive+0xec2>
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <tcp_receive+0xf20>)
 800a358:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a35c:	4923      	ldr	r1, [pc, #140]	; (800a3ec <tcp_receive+0xf24>)
 800a35e:	4824      	ldr	r0, [pc, #144]	; (800a3f0 <tcp_receive+0xf28>)
 800a360:	f007 f9b0 	bl	80116c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a364:	e011      	b.n	800a38a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f47f aea4 	bne.w	800a0bc <tcp_receive+0xbf4>
 800a374:	e00a      	b.n	800a38c <tcp_receive+0xec4>
                break;
 800a376:	bf00      	nop
 800a378:	e008      	b.n	800a38c <tcp_receive+0xec4>
                break;
 800a37a:	bf00      	nop
 800a37c:	e006      	b.n	800a38c <tcp_receive+0xec4>
                  break;
 800a37e:	bf00      	nop
 800a380:	e004      	b.n	800a38c <tcp_receive+0xec4>
                  break;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <tcp_receive+0xec4>
                  break;
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <tcp_receive+0xec4>
                break;
 800a38a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 fa55 	bl	800b83c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a392:	e003      	b.n	800a39c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f001 fa51 	bl	800b83c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a39a:	e01a      	b.n	800a3d2 <tcp_receive+0xf0a>
 800a39c:	e019      	b.n	800a3d2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a39e:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <tcp_receive+0xf14>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	db0a      	blt.n	800a3c2 <tcp_receive+0xefa>
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <tcp_receive+0xf14>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3b8:	440b      	add	r3, r1
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	3301      	adds	r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd07      	ble.n	800a3d2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8b5b      	ldrh	r3, [r3, #26]
 800a3c6:	f043 0302 	orr.w	r3, r3, #2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a3d0:	e7ff      	b.n	800a3d2 <tcp_receive+0xf0a>
 800a3d2:	bf00      	nop
 800a3d4:	3750      	adds	r7, #80	; 0x50
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200000f4 	.word	0x200000f4
 800a3e0:	200000d0 	.word	0x200000d0
 800a3e4:	200000fe 	.word	0x200000fe
 800a3e8:	08013ed0 	.word	0x08013ed0
 800a3ec:	08014278 	.word	0x08014278
 800a3f0:	08013f1c 	.word	0x08013f1c

0800a3f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <tcp_get_next_optbyte+0x5c>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	b291      	uxth	r1, r2
 800a402:	4a13      	ldr	r2, [pc, #76]	; (800a450 <tcp_get_next_optbyte+0x5c>)
 800a404:	8011      	strh	r1, [r2, #0]
 800a406:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <tcp_get_next_optbyte+0x60>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <tcp_get_next_optbyte+0x26>
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <tcp_get_next_optbyte+0x64>)
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	88fa      	ldrh	r2, [r7, #6]
 800a416:	429a      	cmp	r2, r3
 800a418:	d208      	bcs.n	800a42c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a41a:	4b10      	ldr	r3, [pc, #64]	; (800a45c <tcp_get_next_optbyte+0x68>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3314      	adds	r3, #20
 800a420:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	4413      	add	r3, r2
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	e00b      	b.n	800a444 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <tcp_get_next_optbyte+0x64>)
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <tcp_get_next_optbyte+0x60>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	797b      	ldrb	r3, [r7, #5]
 800a440:	4413      	add	r3, r2
 800a442:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	200000f0 	.word	0x200000f0
 800a454:	200000ec 	.word	0x200000ec
 800a458:	200000ea 	.word	0x200000ea
 800a45c:	200000e4 	.word	0x200000e4

0800a460 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <tcp_parseopt+0x1c>
 800a46e:	4b31      	ldr	r3, [pc, #196]	; (800a534 <tcp_parseopt+0xd4>)
 800a470:	f240 727d 	movw	r2, #1917	; 0x77d
 800a474:	4930      	ldr	r1, [pc, #192]	; (800a538 <tcp_parseopt+0xd8>)
 800a476:	4831      	ldr	r0, [pc, #196]	; (800a53c <tcp_parseopt+0xdc>)
 800a478:	f007 f924 	bl	80116c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a47c:	4b30      	ldr	r3, [pc, #192]	; (800a540 <tcp_parseopt+0xe0>)
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d053      	beq.n	800a52c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a484:	4b2f      	ldr	r3, [pc, #188]	; (800a544 <tcp_parseopt+0xe4>)
 800a486:	2200      	movs	r2, #0
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e043      	b.n	800a514 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800a48c:	f7ff ffb2 	bl	800a3f4 <tcp_get_next_optbyte>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d03c      	beq.n	800a514 <tcp_parseopt+0xb4>
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d002      	beq.n	800a4a4 <tcp_parseopt+0x44>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d03f      	beq.n	800a522 <tcp_parseopt+0xc2>
 800a4a2:	e026      	b.n	800a4f2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a4a4:	f7ff ffa6 	bl	800a3f4 <tcp_get_next_optbyte>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d13b      	bne.n	800a526 <tcp_parseopt+0xc6>
 800a4ae:	4b25      	ldr	r3, [pc, #148]	; (800a544 <tcp_parseopt+0xe4>)
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	4a22      	ldr	r2, [pc, #136]	; (800a540 <tcp_parseopt+0xe0>)
 800a4b6:	8812      	ldrh	r2, [r2, #0]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	dc34      	bgt.n	800a526 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a4bc:	f7ff ff9a 	bl	800a3f4 <tcp_get_next_optbyte>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a4c8:	f7ff ff94 	bl	800a3f4 <tcp_get_next_optbyte>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	89bb      	ldrh	r3, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a4d6:	89bb      	ldrh	r3, [r7, #12]
 800a4d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a4dc:	d804      	bhi.n	800a4e8 <tcp_parseopt+0x88>
 800a4de:	89bb      	ldrh	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <tcp_parseopt+0x88>
 800a4e4:	89ba      	ldrh	r2, [r7, #12]
 800a4e6:	e001      	b.n	800a4ec <tcp_parseopt+0x8c>
 800a4e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a4f0:	e010      	b.n	800a514 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a4f2:	f7ff ff7f 	bl	800a3f4 <tcp_get_next_optbyte>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d914      	bls.n	800a52a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	b29a      	uxth	r2, r3
 800a504:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <tcp_parseopt+0xe4>)
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	4413      	add	r3, r2
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b02      	subs	r3, #2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <tcp_parseopt+0xe4>)
 800a512:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a514:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <tcp_parseopt+0xe4>)
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <tcp_parseopt+0xe0>)
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d3b5      	bcc.n	800a48c <tcp_parseopt+0x2c>
 800a520:	e004      	b.n	800a52c <tcp_parseopt+0xcc>
          return;
 800a522:	bf00      	nop
 800a524:	e002      	b.n	800a52c <tcp_parseopt+0xcc>
            return;
 800a526:	bf00      	nop
 800a528:	e000      	b.n	800a52c <tcp_parseopt+0xcc>
            return;
 800a52a:	bf00      	nop
      }
    }
  }
}
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	08013ed0 	.word	0x08013ed0
 800a538:	08014334 	.word	0x08014334
 800a53c:	08013f1c 	.word	0x08013f1c
 800a540:	200000e8 	.word	0x200000e8
 800a544:	200000f0 	.word	0x200000f0

0800a548 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <tcp_trigger_input_pcb_close+0x1c>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f043 0310 	orr.w	r3, r3, #16
 800a554:	b2da      	uxtb	r2, r3
 800a556:	4b03      	ldr	r3, [pc, #12]	; (800a564 <tcp_trigger_input_pcb_close+0x1c>)
 800a558:	701a      	strb	r2, [r3, #0]
}
 800a55a:	bf00      	nop
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	20000101 	.word	0x20000101

0800a568 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <tcp_route+0x28>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	7a1b      	ldrb	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d006      	beq.n	800a590 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	7a1b      	ldrb	r3, [r3, #8]
 800a586:	4618      	mov	r0, r3
 800a588:	f7fb fae2 	bl	8005b50 <netif_get_by_index>
 800a58c:	4603      	mov	r3, r0
 800a58e:	e003      	b.n	800a598 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f005 fc1b 	bl	800fdcc <ip4_route>
 800a596:	4603      	mov	r3, r0
  }
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <tcp_create_segment+0x22>
 800a5b6:	4b45      	ldr	r3, [pc, #276]	; (800a6cc <tcp_create_segment+0x12c>)
 800a5b8:	22a3      	movs	r2, #163	; 0xa3
 800a5ba:	4945      	ldr	r1, [pc, #276]	; (800a6d0 <tcp_create_segment+0x130>)
 800a5bc:	4845      	ldr	r0, [pc, #276]	; (800a6d4 <tcp_create_segment+0x134>)
 800a5be:	f007 f881 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <tcp_create_segment+0x34>
 800a5c8:	4b40      	ldr	r3, [pc, #256]	; (800a6cc <tcp_create_segment+0x12c>)
 800a5ca:	22a4      	movs	r2, #164	; 0xa4
 800a5cc:	4942      	ldr	r1, [pc, #264]	; (800a6d8 <tcp_create_segment+0x138>)
 800a5ce:	4841      	ldr	r0, [pc, #260]	; (800a6d4 <tcp_create_segment+0x134>)
 800a5d0:	f007 f878 	bl	80116c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a5d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a5e2:	2003      	movs	r0, #3
 800a5e4:	f7fa feb4 	bl	8005350 <memp_malloc>
 800a5e8:	6138      	str	r0, [r7, #16]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d104      	bne.n	800a5fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a5f0:	68b8      	ldr	r0, [r7, #8]
 800a5f2:	f7fb fe53 	bl	800629c <pbuf_free>
    return NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e064      	b.n	800a6c4 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a600:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	891a      	ldrh	r2, [r3, #8]
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	b29b      	uxth	r3, r3
 800a616:	429a      	cmp	r2, r3
 800a618:	d205      	bcs.n	800a626 <tcp_create_segment+0x86>
 800a61a:	4b2c      	ldr	r3, [pc, #176]	; (800a6cc <tcp_create_segment+0x12c>)
 800a61c:	22b0      	movs	r2, #176	; 0xb0
 800a61e:	492f      	ldr	r1, [pc, #188]	; (800a6dc <tcp_create_segment+0x13c>)
 800a620:	482c      	ldr	r0, [pc, #176]	; (800a6d4 <tcp_create_segment+0x134>)
 800a622:	f007 f84f 	bl	80116c4 <iprintf>
  seg->len = p->tot_len - optlen;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	891a      	ldrh	r2, [r3, #8]
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	b29a      	uxth	r2, r3
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	2200      	movs	r2, #0
 800a63a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a63c:	2114      	movs	r1, #20
 800a63e:	68b8      	ldr	r0, [r7, #8]
 800a640:	f7fb fd8e 	bl	8006160 <pbuf_add_header>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d004      	beq.n	800a654 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a64a:	6938      	ldr	r0, [r7, #16]
 800a64c:	f7fd f8ca 	bl	80077e4 <tcp_seg_free>
    return NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	e037      	b.n	800a6c4 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8ada      	ldrh	r2, [r3, #22]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	691c      	ldr	r4, [r3, #16]
 800a666:	4610      	mov	r0, r2
 800a668:	f7fa f9f3 	bl	8004a52 <lwip_htons>
 800a66c:	4603      	mov	r3, r0
 800a66e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8b1a      	ldrh	r2, [r3, #24]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	691c      	ldr	r4, [r3, #16]
 800a678:	4610      	mov	r0, r2
 800a67a:	f7fa f9ea 	bl	8004a52 <lwip_htons>
 800a67e:	4603      	mov	r3, r0
 800a680:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	691c      	ldr	r4, [r3, #16]
 800a686:	6838      	ldr	r0, [r7, #0]
 800a688:	f7fa f9f8 	bl	8004a7c <lwip_htonl>
 800a68c:	4603      	mov	r3, r0
 800a68e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	089b      	lsrs	r3, r3, #2
 800a694:	b2db      	uxtb	r3, r3
 800a696:	b29b      	uxth	r3, r3
 800a698:	3305      	adds	r3, #5
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	031b      	lsls	r3, r3, #12
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	691c      	ldr	r4, [r3, #16]
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fa f9d0 	bl	8004a52 <lwip_htons>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	749a      	strb	r2, [r3, #18]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	74da      	strb	r2, [r3, #19]
  return seg;
 800a6c2:	693b      	ldr	r3, [r7, #16]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}
 800a6cc:	08014350 	.word	0x08014350
 800a6d0:	08014384 	.word	0x08014384
 800a6d4:	080143a4 	.word	0x080143a4
 800a6d8:	080143cc 	.word	0x080143cc
 800a6dc:	080143f0 	.word	0x080143f0

0800a6e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b08b      	sub	sp, #44	; 0x2c
 800a6e4:	af02      	add	r7, sp, #8
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	61bb      	str	r3, [r7, #24]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <tcp_split_unsent_seg+0x2c>
 800a6fe:	4b97      	ldr	r3, [pc, #604]	; (800a95c <tcp_split_unsent_seg+0x27c>)
 800a700:	f240 324b 	movw	r2, #843	; 0x34b
 800a704:	4996      	ldr	r1, [pc, #600]	; (800a960 <tcp_split_unsent_seg+0x280>)
 800a706:	4897      	ldr	r0, [pc, #604]	; (800a964 <tcp_split_unsent_seg+0x284>)
 800a708:	f006 ffdc 	bl	80116c4 <iprintf>

  useg = pcb->unsent;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a710:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
 800a71c:	e119      	b.n	800a952 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800a71e:	887b      	ldrh	r3, [r7, #2]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d109      	bne.n	800a738 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a724:	4b8d      	ldr	r3, [pc, #564]	; (800a95c <tcp_split_unsent_seg+0x27c>)
 800a726:	f240 3253 	movw	r2, #851	; 0x353
 800a72a:	498f      	ldr	r1, [pc, #572]	; (800a968 <tcp_split_unsent_seg+0x288>)
 800a72c:	488d      	ldr	r0, [pc, #564]	; (800a964 <tcp_split_unsent_seg+0x284>)
 800a72e:	f006 ffc9 	bl	80116c4 <iprintf>
    return ERR_VAL;
 800a732:	f06f 0305 	mvn.w	r3, #5
 800a736:	e10c      	b.n	800a952 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	891b      	ldrh	r3, [r3, #8]
 800a73c:	887a      	ldrh	r2, [r7, #2]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d301      	bcc.n	800a746 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e105      	b.n	800a952 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a74a:	887a      	ldrh	r2, [r7, #2]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d906      	bls.n	800a75e <tcp_split_unsent_seg+0x7e>
 800a750:	4b82      	ldr	r3, [pc, #520]	; (800a95c <tcp_split_unsent_seg+0x27c>)
 800a752:	f240 325b 	movw	r2, #859	; 0x35b
 800a756:	4985      	ldr	r1, [pc, #532]	; (800a96c <tcp_split_unsent_seg+0x28c>)
 800a758:	4882      	ldr	r0, [pc, #520]	; (800a964 <tcp_split_unsent_seg+0x284>)
 800a75a:	f006 ffb3 	bl	80116c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	891b      	ldrh	r3, [r3, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <tcp_split_unsent_seg+0x94>
 800a766:	4b7d      	ldr	r3, [pc, #500]	; (800a95c <tcp_split_unsent_seg+0x27c>)
 800a768:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a76c:	4980      	ldr	r1, [pc, #512]	; (800a970 <tcp_split_unsent_seg+0x290>)
 800a76e:	487d      	ldr	r0, [pc, #500]	; (800a964 <tcp_split_unsent_seg+0x284>)
 800a770:	f006 ffa8 	bl	80116c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	7b1b      	ldrb	r3, [r3, #12]
 800a778:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	891a      	ldrh	r2, [r3, #8]
 800a78a:	887b      	ldrh	r3, [r7, #2]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	b29a      	uxth	r2, r3
 800a794:	89bb      	ldrh	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a79e:	4619      	mov	r1, r3
 800a7a0:	2036      	movs	r0, #54	; 0x36
 800a7a2:	f7fb fa55 	bl	8005c50 <pbuf_alloc>
 800a7a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 80ba 	beq.w	800a924 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	891a      	ldrh	r2, [r3, #8]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	891b      	ldrh	r3, [r3, #8]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	887b      	ldrh	r3, [r7, #2]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6858      	ldr	r0, [r3, #4]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	18d1      	adds	r1, r2, r3
 800a7d0:	897b      	ldrh	r3, [r7, #10]
 800a7d2:	89ba      	ldrh	r2, [r7, #12]
 800a7d4:	f7fb ff88 	bl	80066e8 <pbuf_copy_partial>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	89bb      	ldrh	r3, [r7, #12]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	f040 80a2 	bne.w	800a928 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	899b      	ldrh	r3, [r3, #12]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fa f930 	bl	8004a52 <lwip_htons>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7fa:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800a800:	7ffb      	ldrb	r3, [r7, #31]
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a80a:	7ffb      	ldrb	r3, [r7, #31]
 800a80c:	f023 0308 	bic.w	r3, r3, #8
 800a810:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800a812:	7fbb      	ldrb	r3, [r7, #30]
 800a814:	f043 0308 	orr.w	r3, r3, #8
 800a818:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800a81a:	7ffb      	ldrb	r3, [r7, #31]
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a824:	7ffb      	ldrb	r3, [r7, #31]
 800a826:	f023 0301 	bic.w	r3, r3, #1
 800a82a:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800a82c:	7fbb      	ldrb	r3, [r7, #30]
 800a82e:	f043 0301 	orr.w	r3, r3, #1
 800a832:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fa f91e 	bl	8004a7c <lwip_htonl>
 800a840:	4602      	mov	r2, r0
 800a842:	887b      	ldrh	r3, [r7, #2]
 800a844:	18d1      	adds	r1, r2, r3
 800a846:	7fba      	ldrb	r2, [r7, #30]
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	460b      	mov	r3, r1
 800a84e:	6939      	ldr	r1, [r7, #16]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff fea5 	bl	800a5a0 <tcp_create_segment>
 800a856:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d066      	beq.n	800a92c <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4618      	mov	r0, r3
 800a864:	f7fb fdba 	bl	80063dc <pbuf_clen>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a872:	1a9b      	subs	r3, r3, r2
 800a874:	b29a      	uxth	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	6858      	ldr	r0, [r3, #4]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	891a      	ldrh	r2, [r3, #8]
 800a886:	89bb      	ldrh	r3, [r7, #12]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4619      	mov	r1, r3
 800a88e:	f7fb fb65 	bl	8005f5c <pbuf_realloc>
  useg->len -= remainder;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	891a      	ldrh	r2, [r3, #8]
 800a896:	89bb      	ldrh	r3, [r7, #12]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	899b      	ldrh	r3, [r3, #12]
 800a8a6:	b29c      	uxth	r4, r3
 800a8a8:	7ffb      	ldrb	r3, [r7, #31]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fa f8d0 	bl	8004a52 <lwip_htons>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	4322      	orrs	r2, r4
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fb fd86 	bl	80063dc <pbuf_clen>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8da:	4413      	add	r3, r2
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fb fd77 	bl	80063dc <pbuf_clen>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8f8:	4413      	add	r3, r2
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	e016      	b.n	800a952 <tcp_split_unsent_seg+0x272>
    goto memerr;
 800a924:	bf00      	nop
 800a926:	e002      	b.n	800a92e <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800a928:	bf00      	nop
 800a92a:	e000      	b.n	800a92e <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800a92c:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <tcp_split_unsent_seg+0x262>
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <tcp_split_unsent_seg+0x27c>)
 800a936:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a93a:	490e      	ldr	r1, [pc, #56]	; (800a974 <tcp_split_unsent_seg+0x294>)
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <tcp_split_unsent_seg+0x284>)
 800a93e:	f006 fec1 	bl	80116c4 <iprintf>
  if (p != NULL) {
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800a948:	6938      	ldr	r0, [r7, #16]
 800a94a:	f7fb fca7 	bl	800629c <pbuf_free>
  }

  return ERR_MEM;
 800a94e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a952:	4618      	mov	r0, r3
 800a954:	3724      	adds	r7, #36	; 0x24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd90      	pop	{r4, r7, pc}
 800a95a:	bf00      	nop
 800a95c:	08014350 	.word	0x08014350
 800a960:	08014740 	.word	0x08014740
 800a964:	080143a4 	.word	0x080143a4
 800a968:	08014764 	.word	0x08014764
 800a96c:	08014788 	.word	0x08014788
 800a970:	08014798 	.word	0x08014798
 800a974:	080147a8 	.word	0x080147a8

0800a978 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a978:	b590      	push	{r4, r7, lr}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <tcp_send_fin+0x1c>
 800a986:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <tcp_send_fin+0x94>)
 800a988:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a98c:	4920      	ldr	r1, [pc, #128]	; (800aa10 <tcp_send_fin+0x98>)
 800a98e:	4821      	ldr	r0, [pc, #132]	; (800aa14 <tcp_send_fin+0x9c>)
 800a990:	f006 fe98 	bl	80116c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d02e      	beq.n	800a9fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	e002      	b.n	800a9aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f8      	bne.n	800a9a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fa f849 	bl	8004a52 <lwip_htons>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d116      	bne.n	800a9fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	899b      	ldrh	r3, [r3, #12]
 800a9d2:	b29c      	uxth	r4, r3
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	f7fa f83c 	bl	8004a52 <lwip_htons>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	4322      	orrs	r2, r4
 800a9e4:	b292      	uxth	r2, r2
 800a9e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8b5b      	ldrh	r3, [r3, #26]
 800a9ec:	f043 0320 	orr.w	r3, r3, #32
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e004      	b.n	800aa04 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f80b 	bl	800aa18 <tcp_enqueue_flags>
 800aa02:	4603      	mov	r3, r0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd90      	pop	{r4, r7, pc}
 800aa0c:	08014350 	.word	0x08014350
 800aa10:	080147b4 	.word	0x080147b4
 800aa14:	080143a4 	.word	0x080143a4

0800aa18 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	460b      	mov	r3, r1
 800aa22:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <tcp_enqueue_flags+0x2c>
 800aa36:	4b67      	ldr	r3, [pc, #412]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800aa38:	f240 4212 	movw	r2, #1042	; 0x412
 800aa3c:	4966      	ldr	r1, [pc, #408]	; (800abd8 <tcp_enqueue_flags+0x1c0>)
 800aa3e:	4867      	ldr	r0, [pc, #412]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800aa40:	f006 fe40 	bl	80116c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <tcp_enqueue_flags+0x40>
 800aa4a:	4b62      	ldr	r3, [pc, #392]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800aa4c:	f240 4213 	movw	r2, #1043	; 0x413
 800aa50:	4963      	ldr	r1, [pc, #396]	; (800abe0 <tcp_enqueue_flags+0x1c8>)
 800aa52:	4862      	ldr	r0, [pc, #392]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800aa54:	f006 fe36 	bl	80116c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aa62:	2301      	movs	r3, #1
 800aa64:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aa72:	7dbb      	ldrb	r3, [r7, #22]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	2036      	movs	r0, #54	; 0x36
 800aa7e:	f7fb f8e7 	bl	8005c50 <pbuf_alloc>
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	8b5b      	ldrh	r3, [r3, #26]
 800aa8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aa98:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9c:	e095      	b.n	800abca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	895a      	ldrh	r2, [r3, #10]
 800aaa2:	7dbb      	ldrb	r3, [r7, #22]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d206      	bcs.n	800aab8 <tcp_enqueue_flags+0xa0>
 800aaaa:	4b4a      	ldr	r3, [pc, #296]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800aaac:	f240 423a 	movw	r2, #1082	; 0x43a
 800aab0:	494c      	ldr	r1, [pc, #304]	; (800abe4 <tcp_enqueue_flags+0x1cc>)
 800aab2:	484a      	ldr	r0, [pc, #296]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800aab4:	f006 fe06 	bl	80116c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aabc:	78fa      	ldrb	r2, [r7, #3]
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	460b      	mov	r3, r1
 800aac4:	68f9      	ldr	r1, [r7, #12]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fd6a 	bl	800a5a0 <tcp_create_segment>
 800aacc:	60b8      	str	r0, [r7, #8]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8b5b      	ldrh	r3, [r3, #26]
 800aad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
 800aae6:	e070      	b.n	800abca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <tcp_enqueue_flags+0xea>
 800aaf4:	4b37      	ldr	r3, [pc, #220]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800aaf6:	f240 4242 	movw	r2, #1090	; 0x442
 800aafa:	493b      	ldr	r1, [pc, #236]	; (800abe8 <tcp_enqueue_flags+0x1d0>)
 800aafc:	4837      	ldr	r0, [pc, #220]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800aafe:	f006 fde1 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	891b      	ldrh	r3, [r3, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <tcp_enqueue_flags+0x100>
 800ab0a:	4b32      	ldr	r3, [pc, #200]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800ab0c:	f240 4243 	movw	r2, #1091	; 0x443
 800ab10:	4936      	ldr	r1, [pc, #216]	; (800abec <tcp_enqueue_flags+0x1d4>)
 800ab12:	4832      	ldr	r0, [pc, #200]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800ab14:	f006 fdd6 	bl	80116c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d103      	bne.n	800ab28 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab26:	e00d      	b.n	800ab44 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab2c:	613b      	str	r3, [r7, #16]
 800ab2e:	e002      	b.n	800ab36 <tcp_enqueue_flags+0x11e>
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f8      	bne.n	800ab30 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <tcp_enqueue_flags+0x148>
 800ab56:	78fb      	ldrb	r3, [r7, #3]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d006      	beq.n	800ab82 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	8b5b      	ldrh	r3, [r3, #26]
 800ab78:	f043 0320 	orr.w	r3, r3, #32
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fb fc28 	bl	80063dc <pbuf_clen>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab96:	4413      	add	r3, r2
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00e      	beq.n	800abc8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <tcp_enqueue_flags+0x1b0>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <tcp_enqueue_flags+0x1b0>
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <tcp_enqueue_flags+0x1bc>)
 800abbc:	f240 4266 	movw	r2, #1126	; 0x466
 800abc0:	490b      	ldr	r1, [pc, #44]	; (800abf0 <tcp_enqueue_flags+0x1d8>)
 800abc2:	4806      	ldr	r0, [pc, #24]	; (800abdc <tcp_enqueue_flags+0x1c4>)
 800abc4:	f006 fd7e 	bl	80116c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	08014350 	.word	0x08014350
 800abd8:	080147d0 	.word	0x080147d0
 800abdc:	080143a4 	.word	0x080143a4
 800abe0:	08014828 	.word	0x08014828
 800abe4:	08014848 	.word	0x08014848
 800abe8:	08014884 	.word	0x08014884
 800abec:	0801489c 	.word	0x0801489c
 800abf0:	080148c8 	.word	0x080148c8

0800abf4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800abf4:	b5b0      	push	{r4, r5, r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <tcp_output+0x1c>
 800ac02:	4ba2      	ldr	r3, [pc, #648]	; (800ae8c <tcp_output+0x298>)
 800ac04:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ac08:	49a1      	ldr	r1, [pc, #644]	; (800ae90 <tcp_output+0x29c>)
 800ac0a:	48a2      	ldr	r0, [pc, #648]	; (800ae94 <tcp_output+0x2a0>)
 800ac0c:	f006 fd5a 	bl	80116c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	7d1b      	ldrb	r3, [r3, #20]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d106      	bne.n	800ac26 <tcp_output+0x32>
 800ac18:	4b9c      	ldr	r3, [pc, #624]	; (800ae8c <tcp_output+0x298>)
 800ac1a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ac1e:	499e      	ldr	r1, [pc, #632]	; (800ae98 <tcp_output+0x2a4>)
 800ac20:	489c      	ldr	r0, [pc, #624]	; (800ae94 <tcp_output+0x2a0>)
 800ac22:	f006 fd4f 	bl	80116c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ac26:	4b9d      	ldr	r3, [pc, #628]	; (800ae9c <tcp_output+0x2a8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d101      	bne.n	800ac34 <tcp_output+0x40>
    return ERR_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e1d6      	b.n	800afe2 <tcp_output+0x3ee>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d203      	bcs.n	800ac4c <tcp_output+0x58>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac4a:	e002      	b.n	800ac52 <tcp_output+0x5e>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ac52:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10b      	bne.n	800ac78 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8b5b      	ldrh	r3, [r3, #26]
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 81ad 	beq.w	800afc8 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fde4 	bl	800b83c <tcp_send_empty_ack>
 800ac74:	4603      	mov	r3, r0
 800ac76:	e1b4      	b.n	800afe2 <tcp_output+0x3ee>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	461a      	mov	r2, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fc71 	bl	800a568 <tcp_route>
 800ac86:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d102      	bne.n	800ac94 <tcp_output+0xa0>
    return ERR_RTE;
 800ac8e:	f06f 0303 	mvn.w	r3, #3
 800ac92:	e1a6      	b.n	800afe2 <tcp_output+0x3ee>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <tcp_output+0xae>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d111      	bne.n	800acc6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <tcp_output+0xba>
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	3304      	adds	r3, #4
 800acac:	e000      	b.n	800acb0 <tcp_output+0xbc>
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <tcp_output+0xca>
      return ERR_RTE;
 800acb8:	f06f 0303 	mvn.w	r3, #3
 800acbc:	e191      	b.n	800afe2 <tcp_output+0x3ee>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	4618      	mov	r0, r3
 800acce:	f7f9 fed5 	bl	8004a7c <lwip_htonl>
 800acd2:	4602      	mov	r2, r0
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acdc:	8912      	ldrh	r2, [r2, #8]
 800acde:	4413      	add	r3, r2
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d227      	bcs.n	800ad36 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acec:	461a      	mov	r2, r3
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d114      	bne.n	800ad1e <tcp_output+0x12a>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d110      	bne.n	800ad1e <tcp_output+0x12a>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8b5b      	ldrh	r3, [r3, #26]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 8150 	beq.w	800afcc <tcp_output+0x3d8>
      return tcp_send_empty_ack(pcb);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fd85 	bl	800b83c <tcp_send_empty_ack>
 800ad32:	4603      	mov	r3, r0
 800ad34:	e155      	b.n	800afe2 <tcp_output+0x3ee>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad42:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 811f 	beq.w	800af8a <tcp_output+0x396>
    for (; useg->next != NULL; useg = useg->next);
 800ad4c:	e002      	b.n	800ad54 <tcp_output+0x160>
 800ad4e:	6a3b      	ldr	r3, [r7, #32]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	623b      	str	r3, [r7, #32]
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1f8      	bne.n	800ad4e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ad5c:	e115      	b.n	800af8a <tcp_output+0x396>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	899b      	ldrh	r3, [r3, #12]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f9 fe73 	bl	8004a52 <lwip_htons>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d006      	beq.n	800ad86 <tcp_output+0x192>
 800ad78:	4b44      	ldr	r3, [pc, #272]	; (800ae8c <tcp_output+0x298>)
 800ad7a:	f240 5237 	movw	r2, #1335	; 0x537
 800ad7e:	4948      	ldr	r1, [pc, #288]	; (800aea0 <tcp_output+0x2ac>)
 800ad80:	4844      	ldr	r0, [pc, #272]	; (800ae94 <tcp_output+0x2a0>)
 800ad82:	f006 fc9f 	bl	80116c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01f      	beq.n	800adce <tcp_output+0x1da>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8b5b      	ldrh	r3, [r3, #26]
 800ad92:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d119      	bne.n	800adce <tcp_output+0x1da>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <tcp_output+0x1c6>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d110      	bne.n	800adce <tcp_output+0x1da>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb0:	891a      	ldrh	r2, [r3, #8]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d209      	bcs.n	800adce <tcp_output+0x1da>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <tcp_output+0x1da>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d901      	bls.n	800add2 <tcp_output+0x1de>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <tcp_output+0x1e0>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	8b5b      	ldrh	r3, [r3, #26]
 800addc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80e7 	beq.w	800afb4 <tcp_output+0x3c0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	7d1b      	ldrb	r3, [r3, #20]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d00d      	beq.n	800ae0a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	899b      	ldrh	r3, [r3, #12]
 800adf4:	b29c      	uxth	r4, r3
 800adf6:	2010      	movs	r0, #16
 800adf8:	f7f9 fe2b 	bl	8004a52 <lwip_htons>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	4322      	orrs	r2, r4
 800ae06:	b292      	uxth	r2, r2
 800ae08:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae10:	f000 f90c 	bl	800b02c <tcp_output_segment>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	8b5b      	ldrh	r3, [r3, #26]
 800ae24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	835a      	strh	r2, [r3, #26]
      return err;
 800ae2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae32:	e0d6      	b.n	800afe2 <tcp_output+0x3ee>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	2200      	movs	r2, #0
 800ae38:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7d1b      	ldrb	r3, [r3, #20]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d006      	beq.n	800ae58 <tcp_output+0x264>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8b5b      	ldrh	r3, [r3, #26]
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f9 fe0c 	bl	8004a7c <lwip_htonl>
 800ae64:	4604      	mov	r4, r0
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	891b      	ldrh	r3, [r3, #8]
 800ae6a:	461d      	mov	r5, r3
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f9 fdec 	bl	8004a52 <lwip_htons>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <tcp_output+0x2b0>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e00d      	b.n	800aea6 <tcp_output+0x2b2>
 800ae8a:	bf00      	nop
 800ae8c:	08014350 	.word	0x08014350
 800ae90:	080148f0 	.word	0x080148f0
 800ae94:	080143a4 	.word	0x080143a4
 800ae98:	08014908 	.word	0x08014908
 800ae9c:	200069a0 	.word	0x200069a0
 800aea0:	08014930 	.word	0x08014930
 800aea4:	2300      	movs	r3, #0
 800aea6:	442b      	add	r3, r5
 800aea8:	4423      	add	r3, r4
 800aeaa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da02      	bge.n	800aebe <tcp_output+0x2ca>
      pcb->snd_nxt = snd_nxt;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	891b      	ldrh	r3, [r3, #8]
 800aec2:	461c      	mov	r4, r3
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	899b      	ldrh	r3, [r3, #12]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f9 fdc0 	bl	8004a52 <lwip_htons>
 800aed2:	4603      	mov	r3, r0
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f003 0303 	and.w	r3, r3, #3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <tcp_output+0x2ee>
 800aede:	2301      	movs	r3, #1
 800aee0:	e000      	b.n	800aee4 <tcp_output+0x2f0>
 800aee2:	2300      	movs	r3, #0
 800aee4:	4423      	add	r3, r4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d049      	beq.n	800af7e <tcp_output+0x38a>
      seg->next = NULL;
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d105      	bne.n	800af04 <tcp_output+0x310>
        pcb->unacked = seg;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	e03f      	b.n	800af84 <tcp_output+0x390>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f9 fdb6 	bl	8004a7c <lwip_htonl>
 800af10:	4604      	mov	r4, r0
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f9 fdaf 	bl	8004a7c <lwip_htonl>
 800af1e:	4603      	mov	r3, r0
 800af20:	1ae3      	subs	r3, r4, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	da24      	bge.n	800af70 <tcp_output+0x37c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3370      	adds	r3, #112	; 0x70
 800af2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af2c:	e002      	b.n	800af34 <tcp_output+0x340>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d011      	beq.n	800af60 <tcp_output+0x36c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	f7f9 fd99 	bl	8004a7c <lwip_htonl>
 800af4a:	4604      	mov	r4, r0
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4618      	mov	r0, r3
 800af54:	f7f9 fd92 	bl	8004a7c <lwip_htonl>
 800af58:	4603      	mov	r3, r0
 800af5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dbe6      	blt.n	800af2e <tcp_output+0x33a>
          }
          seg->next = (*cur_seg);
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e009      	b.n	800af84 <tcp_output+0x390>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	623b      	str	r3, [r7, #32]
 800af7c:	e002      	b.n	800af84 <tcp_output+0x390>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800af7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af80:	f7fc fc30 	bl	80077e4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d012      	beq.n	800afb6 <tcp_output+0x3c2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7f9 fd70 	bl	8004a7c <lwip_htonl>
 800af9c:	4602      	mov	r2, r0
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa6:	8912      	ldrh	r2, [r2, #8]
 800afa8:	4413      	add	r3, r2
  while (seg != NULL &&
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	429a      	cmp	r2, r3
 800afae:	f4bf aed6 	bcs.w	800ad5e <tcp_output+0x16a>
 800afb2:	e000      	b.n	800afb6 <tcp_output+0x3c2>
      break;
 800afb4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d108      	bne.n	800afd0 <tcp_output+0x3dc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800afc6:	e004      	b.n	800afd2 <tcp_output+0x3de>
    goto output_done;
 800afc8:	bf00      	nop
 800afca:	e002      	b.n	800afd2 <tcp_output+0x3de>
    goto output_done;
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <tcp_output+0x3de>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800afd0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	8b5b      	ldrh	r3, [r3, #26]
 800afd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afda:	b29a      	uxth	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3728      	adds	r7, #40	; 0x28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bdb0      	pop	{r4, r5, r7, pc}
 800afea:	bf00      	nop

0800afec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <tcp_output_segment_busy+0x1c>
 800affa:	4b09      	ldr	r3, [pc, #36]	; (800b020 <tcp_output_segment_busy+0x34>)
 800affc:	f240 529a 	movw	r2, #1434	; 0x59a
 800b000:	4908      	ldr	r1, [pc, #32]	; (800b024 <tcp_output_segment_busy+0x38>)
 800b002:	4809      	ldr	r0, [pc, #36]	; (800b028 <tcp_output_segment_busy+0x3c>)
 800b004:	f006 fb5e 	bl	80116c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	7b9b      	ldrb	r3, [r3, #14]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d001      	beq.n	800b016 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	08014350 	.word	0x08014350
 800b024:	08014948 	.word	0x08014948
 800b028:	080143a4 	.word	0x080143a4

0800b02c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b02c:	b5b0      	push	{r4, r5, r7, lr}
 800b02e:	b08c      	sub	sp, #48	; 0x30
 800b030:	af04      	add	r7, sp, #16
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <tcp_output_segment+0x20>
 800b03e:	4b64      	ldr	r3, [pc, #400]	; (800b1d0 <tcp_output_segment+0x1a4>)
 800b040:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b044:	4963      	ldr	r1, [pc, #396]	; (800b1d4 <tcp_output_segment+0x1a8>)
 800b046:	4864      	ldr	r0, [pc, #400]	; (800b1d8 <tcp_output_segment+0x1ac>)
 800b048:	f006 fb3c 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <tcp_output_segment+0x34>
 800b052:	4b5f      	ldr	r3, [pc, #380]	; (800b1d0 <tcp_output_segment+0x1a4>)
 800b054:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b058:	4960      	ldr	r1, [pc, #384]	; (800b1dc <tcp_output_segment+0x1b0>)
 800b05a:	485f      	ldr	r0, [pc, #380]	; (800b1d8 <tcp_output_segment+0x1ac>)
 800b05c:	f006 fb32 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <tcp_output_segment+0x48>
 800b066:	4b5a      	ldr	r3, [pc, #360]	; (800b1d0 <tcp_output_segment+0x1a4>)
 800b068:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b06c:	495c      	ldr	r1, [pc, #368]	; (800b1e0 <tcp_output_segment+0x1b4>)
 800b06e:	485a      	ldr	r0, [pc, #360]	; (800b1d8 <tcp_output_segment+0x1ac>)
 800b070:	f006 fb28 	bl	80116c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7ff ffb9 	bl	800afec <tcp_output_segment_busy>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	e0a0      	b.n	800b1c6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	691c      	ldr	r4, [r3, #16]
 800b08c:	4610      	mov	r0, r2
 800b08e:	f7f9 fcf5 	bl	8004a7c <lwip_htonl>
 800b092:	4603      	mov	r3, r0
 800b094:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	691c      	ldr	r4, [r3, #16]
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7f9 fcd7 	bl	8004a52 <lwip_htons>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b0b0:	441a      	add	r2, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	3314      	adds	r3, #20
 800b0bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	7b1b      	ldrb	r3, [r3, #12]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d015      	beq.n	800b0f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b0d6:	f7fc fe7b 	bl	8007dd0 <tcp_eff_send_mss_netif>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b0de:	8b7b      	ldrh	r3, [r7, #26]
 800b0e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f9 fcc9 	bl	8004a7c <lwip_htonl>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	da02      	bge.n	800b106 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10c      	bne.n	800b128 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b10e:	4b35      	ldr	r3, [pc, #212]	; (800b1e4 <tcp_output_segment+0x1b8>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7f9 fcad 	bl	8004a7c <lwip_htonl>
 800b122:	4602      	mov	r2, r0
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	461a      	mov	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	8959      	ldrh	r1, [r3, #10]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	8b3a      	ldrh	r2, [r7, #24]
 800b144:	1a8a      	subs	r2, r1, r2
 800b146:	b292      	uxth	r2, r2
 800b148:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	8919      	ldrh	r1, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	8b3a      	ldrh	r2, [r7, #24]
 800b156:	1a8a      	subs	r2, r1, r2
 800b158:	b292      	uxth	r2, r2
 800b15a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	6912      	ldr	r2, [r2, #16]
 800b164:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2200      	movs	r2, #0
 800b16c:	741a      	strb	r2, [r3, #16]
 800b16e:	2200      	movs	r2, #0
 800b170:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	f103 0214 	add.w	r2, r3, #20
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	7b1b      	ldrb	r3, [r3, #12]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	4413      	add	r3, r2
 800b186:	69fa      	ldr	r2, [r7, #28]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d006      	beq.n	800b19a <tcp_output_segment+0x16e>
 800b18c:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <tcp_output_segment+0x1a4>)
 800b18e:	f240 621c 	movw	r2, #1564	; 0x61c
 800b192:	4915      	ldr	r1, [pc, #84]	; (800b1e8 <tcp_output_segment+0x1bc>)
 800b194:	4810      	ldr	r0, [pc, #64]	; (800b1d8 <tcp_output_segment+0x1ac>)
 800b196:	f006 fa95 	bl	80116c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6858      	ldr	r0, [r3, #4]
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	1d1c      	adds	r4, r3, #4
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	7add      	ldrb	r5, [r3, #11]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	7a9b      	ldrb	r3, [r3, #10]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	9202      	str	r2, [sp, #8]
 800b1b0:	2206      	movs	r2, #6
 800b1b2:	9201      	str	r2, [sp, #4]
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	462b      	mov	r3, r5
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	f005 f8c7 	bl	801034c <ip4_output_if>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b1c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	08014350 	.word	0x08014350
 800b1d4:	08014970 	.word	0x08014970
 800b1d8:	080143a4 	.word	0x080143a4
 800b1dc:	08014990 	.word	0x08014990
 800b1e0:	080149b0 	.word	0x080149b0
 800b1e4:	20006990 	.word	0x20006990
 800b1e8:	080149d4 	.word	0x080149d4

0800b1ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b1ec:	b5b0      	push	{r4, r5, r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <tcp_rexmit_rto_prepare+0x1c>
 800b1fa:	4b36      	ldr	r3, [pc, #216]	; (800b2d4 <tcp_rexmit_rto_prepare+0xe8>)
 800b1fc:	f240 6263 	movw	r2, #1635	; 0x663
 800b200:	4935      	ldr	r1, [pc, #212]	; (800b2d8 <tcp_rexmit_rto_prepare+0xec>)
 800b202:	4836      	ldr	r0, [pc, #216]	; (800b2dc <tcp_rexmit_rto_prepare+0xf0>)
 800b204:	f006 fa5e 	bl	80116c4 <iprintf>

  if (pcb->unacked == NULL) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b210:	f06f 0305 	mvn.w	r3, #5
 800b214:	e059      	b.n	800b2ca <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e00b      	b.n	800b236 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fee4 	bl	800afec <tcp_output_segment_busy>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b22a:	f06f 0305 	mvn.w	r3, #5
 800b22e:	e04c      	b.n	800b2ca <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1ef      	bne.n	800b21e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fed4 	bl	800afec <tcp_output_segment_busy>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b24a:	f06f 0305 	mvn.w	r3, #5
 800b24e:	e03c      	b.n	800b2ca <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d104      	bne.n	800b26a <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	895a      	ldrh	r2, [r3, #10]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8b5b      	ldrh	r3, [r3, #26]
 800b27c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f9 fbf5 	bl	8004a7c <lwip_htonl>
 800b292:	4604      	mov	r4, r0
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	891b      	ldrh	r3, [r3, #8]
 800b298:	461d      	mov	r5, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	899b      	ldrh	r3, [r3, #12]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f9 fbd5 	bl	8004a52 <lwip_htons>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <tcp_rexmit_rto_prepare+0xcc>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <tcp_rexmit_rto_prepare+0xce>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	442b      	add	r3, r5
 800b2bc:	18e2      	adds	r2, r4, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	08014350 	.word	0x08014350
 800b2d8:	080149e8 	.word	0x080149e8
 800b2dc:	080143a4 	.word	0x080143a4

0800b2e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <tcp_rexmit_rto_commit+0x1c>
 800b2ee:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <tcp_rexmit_rto_commit+0x44>)
 800b2f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b2f4:	490c      	ldr	r1, [pc, #48]	; (800b328 <tcp_rexmit_rto_commit+0x48>)
 800b2f6:	480d      	ldr	r0, [pc, #52]	; (800b32c <tcp_rexmit_rto_commit+0x4c>)
 800b2f8:	f006 f9e4 	bl	80116c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b302:	2bff      	cmp	r3, #255	; 0xff
 800b304:	d007      	beq.n	800b316 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b30c:	3301      	adds	r3, #1
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff fc6c 	bl	800abf4 <tcp_output>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	08014350 	.word	0x08014350
 800b328:	08014a0c 	.word	0x08014a0c
 800b32c:	080143a4 	.word	0x080143a4

0800b330 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <tcp_rexmit_rto+0x1c>
 800b33e:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <tcp_rexmit_rto+0x38>)
 800b340:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b344:	4909      	ldr	r1, [pc, #36]	; (800b36c <tcp_rexmit_rto+0x3c>)
 800b346:	480a      	ldr	r0, [pc, #40]	; (800b370 <tcp_rexmit_rto+0x40>)
 800b348:	f006 f9bc 	bl	80116c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff ff4d 	bl	800b1ec <tcp_rexmit_rto_prepare>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ffc1 	bl	800b2e0 <tcp_rexmit_rto_commit>
  }
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	08014350 	.word	0x08014350
 800b36c:	08014a30 	.word	0x08014a30
 800b370:	080143a4 	.word	0x080143a4

0800b374 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <tcp_rexmit+0x1c>
 800b382:	4b2f      	ldr	r3, [pc, #188]	; (800b440 <tcp_rexmit+0xcc>)
 800b384:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b388:	492e      	ldr	r1, [pc, #184]	; (800b444 <tcp_rexmit+0xd0>)
 800b38a:	482f      	ldr	r0, [pc, #188]	; (800b448 <tcp_rexmit+0xd4>)
 800b38c:	f006 f99a 	bl	80116c4 <iprintf>

  if (pcb->unacked == NULL) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b398:	f06f 0305 	mvn.w	r3, #5
 800b39c:	e04c      	b.n	800b438 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b3a4:	68b8      	ldr	r0, [r7, #8]
 800b3a6:	f7ff fe21 	bl	800afec <tcp_output_segment_busy>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b3b0:	f06f 0305 	mvn.w	r3, #5
 800b3b4:	e040      	b.n	800b438 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	336c      	adds	r3, #108	; 0x6c
 800b3c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3c4:	e002      	b.n	800b3cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d011      	beq.n	800b3f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f9 fb4d 	bl	8004a7c <lwip_htonl>
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f9 fb46 	bl	8004a7c <lwip_htonl>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dbe6      	blt.n	800b3c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d103      	bne.n	800b416 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b41c:	2bff      	cmp	r3, #255	; 0xff
 800b41e:	d007      	beq.n	800b430 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b426:	3301      	adds	r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd90      	pop	{r4, r7, pc}
 800b440:	08014350 	.word	0x08014350
 800b444:	08014a4c 	.word	0x08014a4c
 800b448:	080143a4 	.word	0x080143a4

0800b44c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <tcp_rexmit_fast+0x1c>
 800b45a:	4b2e      	ldr	r3, [pc, #184]	; (800b514 <tcp_rexmit_fast+0xc8>)
 800b45c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b460:	492d      	ldr	r1, [pc, #180]	; (800b518 <tcp_rexmit_fast+0xcc>)
 800b462:	482e      	ldr	r0, [pc, #184]	; (800b51c <tcp_rexmit_fast+0xd0>)
 800b464:	f006 f92e 	bl	80116c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d04d      	beq.n	800b50c <tcp_rexmit_fast+0xc0>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8b5b      	ldrh	r3, [r3, #26]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d147      	bne.n	800b50c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff79 	bl	800b374 <tcp_rexmit>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d141      	bne.n	800b50c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b494:	429a      	cmp	r2, r3
 800b496:	d207      	bcs.n	800b4a8 <tcp_rexmit_fast+0x5c>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b49e:	0fda      	lsrs	r2, r3, #31
 800b4a0:	4413      	add	r3, r2
 800b4a2:	105b      	asrs	r3, r3, #1
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	e006      	b.n	800b4b6 <tcp_rexmit_fast+0x6a>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ae:	0fda      	lsrs	r2, r3, #31
 800b4b0:	4413      	add	r3, r2
 800b4b2:	105b      	asrs	r3, r3, #1
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d206      	bcs.n	800b4dc <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	0049      	lsls	r1, r1, #1
 800b4ea:	440b      	add	r3, r1
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4413      	add	r3, r2
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	8b5b      	ldrh	r3, [r3, #26]
 800b4fc:	f043 0304 	orr.w	r3, r3, #4
 800b500:	b29a      	uxth	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	08014350 	.word	0x08014350
 800b518:	08014a64 	.word	0x08014a64
 800b51c:	080143a4 	.word	0x080143a4

0800b520 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	817b      	strh	r3, [r7, #10]
 800b52e:	4613      	mov	r3, r2
 800b530:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b532:	897a      	ldrh	r2, [r7, #10]
 800b534:	893b      	ldrh	r3, [r7, #8]
 800b536:	4413      	add	r3, r2
 800b538:	b29b      	uxth	r3, r3
 800b53a:	3314      	adds	r3, #20
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b542:	4619      	mov	r1, r3
 800b544:	2022      	movs	r0, #34	; 0x22
 800b546:	f7fa fb83 	bl	8005c50 <pbuf_alloc>
 800b54a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d04e      	beq.n	800b5f0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	895b      	ldrh	r3, [r3, #10]
 800b556:	461a      	mov	r2, r3
 800b558:	897b      	ldrh	r3, [r7, #10]
 800b55a:	3314      	adds	r3, #20
 800b55c:	429a      	cmp	r2, r3
 800b55e:	da06      	bge.n	800b56e <tcp_output_alloc_header_common+0x4e>
 800b560:	4b26      	ldr	r3, [pc, #152]	; (800b5fc <tcp_output_alloc_header_common+0xdc>)
 800b562:	f240 7224 	movw	r2, #1828	; 0x724
 800b566:	4926      	ldr	r1, [pc, #152]	; (800b600 <tcp_output_alloc_header_common+0xe0>)
 800b568:	4826      	ldr	r0, [pc, #152]	; (800b604 <tcp_output_alloc_header_common+0xe4>)
 800b56a:	f006 f8ab 	bl	80116c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b574:	8c3b      	ldrh	r3, [r7, #32]
 800b576:	4618      	mov	r0, r3
 800b578:	f7f9 fa6b 	bl	8004a52 <lwip_htons>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b586:	4618      	mov	r0, r3
 800b588:	f7f9 fa63 	bl	8004a52 <lwip_htons>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7f9 fa6e 	bl	8004a7c <lwip_htonl>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b5a6:	897b      	ldrh	r3, [r7, #10]
 800b5a8:	089b      	lsrs	r3, r3, #2
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3305      	adds	r3, #5
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	031b      	lsls	r3, r3, #12
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f9 fa47 	bl	8004a52 <lwip_htons>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b5cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f9 fa3f 	bl	8004a52 <lwip_htons>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	741a      	strb	r2, [r3, #16]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	749a      	strb	r2, [r3, #18]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b5f0:	697b      	ldr	r3, [r7, #20]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	08014350 	.word	0x08014350
 800b600:	08014a84 	.word	0x08014a84
 800b604:	080143a4 	.word	0x080143a4

0800b608 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b608:	b5b0      	push	{r4, r5, r7, lr}
 800b60a:	b08a      	sub	sp, #40	; 0x28
 800b60c:	af04      	add	r7, sp, #16
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	607b      	str	r3, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	817b      	strh	r3, [r7, #10]
 800b616:	4613      	mov	r3, r2
 800b618:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <tcp_output_alloc_header+0x26>
 800b620:	4b15      	ldr	r3, [pc, #84]	; (800b678 <tcp_output_alloc_header+0x70>)
 800b622:	f240 7242 	movw	r2, #1858	; 0x742
 800b626:	4915      	ldr	r1, [pc, #84]	; (800b67c <tcp_output_alloc_header+0x74>)
 800b628:	4815      	ldr	r0, [pc, #84]	; (800b680 <tcp_output_alloc_header+0x78>)
 800b62a:	f006 f84b 	bl	80116c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8adb      	ldrh	r3, [r3, #22]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	8b12      	ldrh	r2, [r2, #24]
 800b63a:	68f9      	ldr	r1, [r7, #12]
 800b63c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b63e:	893d      	ldrh	r5, [r7, #8]
 800b640:	897c      	ldrh	r4, [r7, #10]
 800b642:	9103      	str	r1, [sp, #12]
 800b644:	2110      	movs	r1, #16
 800b646:	9102      	str	r1, [sp, #8]
 800b648:	9201      	str	r2, [sp, #4]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	462a      	mov	r2, r5
 800b650:	4621      	mov	r1, r4
 800b652:	f7ff ff65 	bl	800b520 <tcp_output_alloc_header_common>
 800b656:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d006      	beq.n	800b66c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b666:	441a      	add	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b66c:	697b      	ldr	r3, [r7, #20]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bdb0      	pop	{r4, r5, r7, pc}
 800b676:	bf00      	nop
 800b678:	08014350 	.word	0x08014350
 800b67c:	08014ab4 	.word	0x08014ab4
 800b680:	080143a4 	.word	0x080143a4

0800b684 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4611      	mov	r1, r2
 800b690:	461a      	mov	r2, r3
 800b692:	460b      	mov	r3, r1
 800b694:	71fb      	strb	r3, [r7, #7]
 800b696:	4613      	mov	r3, r2
 800b698:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <tcp_output_fill_options+0x2e>
 800b6a4:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <tcp_output_fill_options+0x70>)
 800b6a6:	f240 7256 	movw	r2, #1878	; 0x756
 800b6aa:	4913      	ldr	r1, [pc, #76]	; (800b6f8 <tcp_output_fill_options+0x74>)
 800b6ac:	4813      	ldr	r0, [pc, #76]	; (800b6fc <tcp_output_fill_options+0x78>)
 800b6ae:	f006 f809 	bl	80116c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	f103 0214 	add.w	r2, r3, #20
 800b6c4:	8bfb      	ldrh	r3, [r7, #30]
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	79fb      	ldrb	r3, [r7, #7]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	440b      	add	r3, r1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d006      	beq.n	800b6ea <tcp_output_fill_options+0x66>
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <tcp_output_fill_options+0x70>)
 800b6de:	f240 7275 	movw	r2, #1909	; 0x775
 800b6e2:	4907      	ldr	r1, [pc, #28]	; (800b700 <tcp_output_fill_options+0x7c>)
 800b6e4:	4805      	ldr	r0, [pc, #20]	; (800b6fc <tcp_output_fill_options+0x78>)
 800b6e6:	f005 ffed 	bl	80116c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b6ea:	bf00      	nop
 800b6ec:	3720      	adds	r7, #32
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	08014350 	.word	0x08014350
 800b6f8:	08014adc 	.word	0x08014adc
 800b6fc:	080143a4 	.word	0x080143a4
 800b700:	080149d4 	.word	0x080149d4

0800b704 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08a      	sub	sp, #40	; 0x28
 800b708:	af04      	add	r7, sp, #16
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d106      	bne.n	800b726 <tcp_output_control_segment+0x22>
 800b718:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <tcp_output_control_segment+0x88>)
 800b71a:	f240 7287 	movw	r2, #1927	; 0x787
 800b71e:	491c      	ldr	r1, [pc, #112]	; (800b790 <tcp_output_control_segment+0x8c>)
 800b720:	481c      	ldr	r0, [pc, #112]	; (800b794 <tcp_output_control_segment+0x90>)
 800b722:	f005 ffcf 	bl	80116c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7fe ff1c 	bl	800a568 <tcp_route>
 800b730:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b738:	23fc      	movs	r3, #252	; 0xfc
 800b73a:	75fb      	strb	r3, [r7, #23]
 800b73c:	e01c      	b.n	800b778 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	7adb      	ldrb	r3, [r3, #11]
 800b748:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	7a9b      	ldrb	r3, [r3, #10]
 800b74e:	757b      	strb	r3, [r7, #21]
 800b750:	e003      	b.n	800b75a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b752:	23ff      	movs	r3, #255	; 0xff
 800b754:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b75a:	7dba      	ldrb	r2, [r7, #22]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	2306      	movs	r3, #6
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	7d7b      	ldrb	r3, [r7, #21]
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	4613      	mov	r3, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	6879      	ldr	r1, [r7, #4]
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f004 fdec 	bl	801034c <ip4_output_if>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b778:	68b8      	ldr	r0, [r7, #8]
 800b77a:	f7fa fd8f 	bl	800629c <pbuf_free>
  return err;
 800b77e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	08014350 	.word	0x08014350
 800b790:	08014b04 	.word	0x08014b04
 800b794:	080143a4 	.word	0x080143a4

0800b798 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b08b      	sub	sp, #44	; 0x2c
 800b79c:	af04      	add	r7, sp, #16
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d106      	bne.n	800b7ba <tcp_rst+0x22>
 800b7ac:	4b1f      	ldr	r3, [pc, #124]	; (800b82c <tcp_rst+0x94>)
 800b7ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b7b2:	491f      	ldr	r1, [pc, #124]	; (800b830 <tcp_rst+0x98>)
 800b7b4:	481f      	ldr	r0, [pc, #124]	; (800b834 <tcp_rst+0x9c>)
 800b7b6:	f005 ff85 	bl	80116c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <tcp_rst+0x36>
 800b7c0:	4b1a      	ldr	r3, [pc, #104]	; (800b82c <tcp_rst+0x94>)
 800b7c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b7c6:	491c      	ldr	r1, [pc, #112]	; (800b838 <tcp_rst+0xa0>)
 800b7c8:	481a      	ldr	r0, [pc, #104]	; (800b834 <tcp_rst+0x9c>)
 800b7ca:	f005 ff7b 	bl	80116c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b7d2:	f246 0308 	movw	r3, #24584	; 0x6008
 800b7d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	b29c      	uxth	r4, r3
 800b7dc:	68b8      	ldr	r0, [r7, #8]
 800b7de:	f7f9 f94d 	bl	8004a7c <lwip_htonl>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	8abb      	ldrh	r3, [r7, #20]
 800b7e6:	9303      	str	r3, [sp, #12]
 800b7e8:	2314      	movs	r3, #20
 800b7ea:	9302      	str	r3, [sp, #8]
 800b7ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fe90 	bl	800b520 <tcp_output_alloc_header_common>
 800b800:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00c      	beq.n	800b822 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b808:	7dfb      	ldrb	r3, [r7, #23]
 800b80a:	2200      	movs	r2, #0
 800b80c:	6939      	ldr	r1, [r7, #16]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff ff38 	bl	800b684 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	6939      	ldr	r1, [r7, #16]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f7ff ff72 	bl	800b704 <tcp_output_control_segment>
 800b820:	e000      	b.n	800b824 <tcp_rst+0x8c>
    return;
 800b822:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	bd90      	pop	{r4, r7, pc}
 800b82a:	bf00      	nop
 800b82c:	08014350 	.word	0x08014350
 800b830:	08014b30 	.word	0x08014b30
 800b834:	080143a4 	.word	0x080143a4
 800b838:	08014b4c 	.word	0x08014b4c

0800b83c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b83c:	b590      	push	{r4, r7, lr}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_send_empty_ack+0x24>
 800b852:	4b28      	ldr	r3, [pc, #160]	; (800b8f4 <tcp_send_empty_ack+0xb8>)
 800b854:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b858:	4927      	ldr	r1, [pc, #156]	; (800b8f8 <tcp_send_empty_ack+0xbc>)
 800b85a:	4828      	ldr	r0, [pc, #160]	; (800b8fc <tcp_send_empty_ack+0xc0>)
 800b85c:	f005 ff32 	bl	80116c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	b2db      	uxtb	r3, r3
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b86c:	7d7b      	ldrb	r3, [r7, #21]
 800b86e:	b29c      	uxth	r4, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b874:	4618      	mov	r0, r3
 800b876:	f7f9 f901 	bl	8004a7c <lwip_htonl>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2200      	movs	r2, #0
 800b87e:	4621      	mov	r1, r4
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fec1 	bl	800b608 <tcp_output_alloc_header>
 800b886:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d109      	bne.n	800b8a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8b5b      	ldrh	r3, [r3, #26]
 800b892:	f043 0303 	orr.w	r3, r3, #3
 800b896:	b29a      	uxth	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b89c:	f06f 0301 	mvn.w	r3, #1
 800b8a0:	e023      	b.n	800b8ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b8a2:	7dbb      	ldrb	r3, [r7, #22]
 800b8a4:	7dfa      	ldrb	r2, [r7, #23]
 800b8a6:	6939      	ldr	r1, [r7, #16]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff feeb 	bl	800b684 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	6939      	ldr	r1, [r7, #16]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ff24 	bl	800b704 <tcp_output_control_segment>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8b5b      	ldrh	r3, [r3, #26]
 800b8cc:	f043 0303 	orr.w	r3, r3, #3
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	835a      	strh	r2, [r3, #26]
 800b8d6:	e006      	b.n	800b8e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	8b5b      	ldrh	r3, [r3, #26]
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd90      	pop	{r4, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	08014350 	.word	0x08014350
 800b8f8:	08014b68 	.word	0x08014b68
 800b8fc:	080143a4 	.word	0x080143a4

0800b900 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b900:	b590      	push	{r4, r7, lr}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b908:	2300      	movs	r3, #0
 800b90a:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <tcp_keepalive+0x20>
 800b912:	4b18      	ldr	r3, [pc, #96]	; (800b974 <tcp_keepalive+0x74>)
 800b914:	f640 0224 	movw	r2, #2084	; 0x824
 800b918:	4917      	ldr	r1, [pc, #92]	; (800b978 <tcp_keepalive+0x78>)
 800b91a:	4818      	ldr	r0, [pc, #96]	; (800b97c <tcp_keepalive+0x7c>)
 800b91c:	f005 fed2 	bl	80116c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b920:	7abb      	ldrb	r3, [r7, #10]
 800b922:	b29c      	uxth	r4, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b928:	3b01      	subs	r3, #1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f9 f8a6 	bl	8004a7c <lwip_htonl>
 800b930:	4603      	mov	r3, r0
 800b932:	2200      	movs	r2, #0
 800b934:	4621      	mov	r1, r4
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fe66 	bl	800b608 <tcp_output_alloc_header>
 800b93c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b944:	f04f 33ff 	mov.w	r3, #4294967295
 800b948:	e010      	b.n	800b96c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b94a:	7abb      	ldrb	r3, [r7, #10]
 800b94c:	2200      	movs	r2, #0
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff fe97 	bl	800b684 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3304      	adds	r3, #4
 800b95c:	68f9      	ldr	r1, [r7, #12]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fed0 	bl	800b704 <tcp_output_control_segment>
 800b964:	4603      	mov	r3, r0
 800b966:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b968:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}
 800b974:	08014350 	.word	0x08014350
 800b978:	08014b88 	.word	0x08014b88
 800b97c:	080143a4 	.word	0x080143a4

0800b980 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b08b      	sub	sp, #44	; 0x2c
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b988:	2300      	movs	r3, #0
 800b98a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <tcp_zero_window_probe+0x20>
 800b992:	4b4d      	ldr	r3, [pc, #308]	; (800bac8 <tcp_zero_window_probe+0x148>)
 800b994:	f640 024f 	movw	r2, #2127	; 0x84f
 800b998:	494c      	ldr	r1, [pc, #304]	; (800bacc <tcp_zero_window_probe+0x14c>)
 800b99a:	484d      	ldr	r0, [pc, #308]	; (800bad0 <tcp_zero_window_probe+0x150>)
 800b99c:	f005 fe92 	bl	80116c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e087      	b.n	800bac0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9b6:	2bff      	cmp	r3, #255	; 0xff
 800b9b8:	d007      	beq.n	800b9ca <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	899b      	ldrh	r3, [r3, #12]
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7f9 f83d 	bl	8004a52 <lwip_htons>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d005      	beq.n	800b9f0 <tcp_zero_window_probe+0x70>
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	891b      	ldrh	r3, [r3, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <tcp_zero_window_probe+0x70>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e000      	b.n	800b9f2 <tcp_zero_window_probe+0x72>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b9f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	bf0c      	ite	eq
 800b9fe:	2301      	moveq	r3, #1
 800ba00:	2300      	movne	r3, #0
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba06:	7cfb      	ldrb	r3, [r7, #19]
 800ba08:	b299      	uxth	r1, r3
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	8c3a      	ldrh	r2, [r7, #32]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fdf8 	bl	800b608 <tcp_output_alloc_header>
 800ba18:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba20:	f04f 33ff 	mov.w	r3, #4294967295
 800ba24:	e04c      	b.n	800bac0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800ba2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d011      	beq.n	800ba58 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	899b      	ldrh	r3, [r3, #12]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba40:	b21c      	sxth	r4, r3
 800ba42:	2011      	movs	r0, #17
 800ba44:	f7f9 f805 	bl	8004a52 <lwip_htons>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	4323      	orrs	r3, r4
 800ba4e:	b21b      	sxth	r3, r3
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	819a      	strh	r2, [r3, #12]
 800ba56:	e010      	b.n	800ba7a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	3314      	adds	r3, #20
 800ba5e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	6858      	ldr	r0, [r3, #4]
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	891a      	ldrh	r2, [r3, #8]
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	891b      	ldrh	r3, [r3, #8]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	2201      	movs	r2, #1
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	f7fa fe37 	bl	80066e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f8 fffb 	bl	8004a7c <lwip_htonl>
 800ba86:	4603      	mov	r3, r0
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	da02      	bge.n	800ba9e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba9e:	7cfb      	ldrb	r3, [r7, #19]
 800baa0:	2200      	movs	r2, #0
 800baa2:	69f9      	ldr	r1, [r7, #28]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff fded 	bl	800b684 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3304      	adds	r3, #4
 800bab0:	69f9      	ldr	r1, [r7, #28]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fe26 	bl	800b704 <tcp_output_control_segment>
 800bab8:	4603      	mov	r3, r0
 800baba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800babc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	372c      	adds	r7, #44	; 0x2c
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}
 800bac8:	08014350 	.word	0x08014350
 800bacc:	08014ba4 	.word	0x08014ba4
 800bad0:	080143a4 	.word	0x080143a4

0800bad4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800badc:	f7fa fef2 	bl	80068c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <tcpip_tcp_timer+0x38>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <tcpip_tcp_timer+0x1c>
 800bae8:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <tcpip_tcp_timer+0x3c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800baf0:	4b08      	ldr	r3, [pc, #32]	; (800bb14 <tcpip_tcp_timer+0x40>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	4908      	ldr	r1, [pc, #32]	; (800bb18 <tcpip_tcp_timer+0x44>)
 800baf6:	20fa      	movs	r0, #250	; 0xfa
 800baf8:	f000 f91a 	bl	800bd30 <sys_timeout_debug>
 800bafc:	e002      	b.n	800bb04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bafe:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <tcpip_tcp_timer+0x48>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
  }
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	2000698c 	.word	0x2000698c
 800bb10:	2000699c 	.word	0x2000699c
 800bb14:	08014c0c 	.word	0x08014c0c
 800bb18:	0800bad5 	.word	0x0800bad5
 800bb1c:	20000110 	.word	0x20000110

0800bb20 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb24:	4b0b      	ldr	r3, [pc, #44]	; (800bb54 <tcp_timer_needed+0x34>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d110      	bne.n	800bb4e <tcp_timer_needed+0x2e>
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <tcp_timer_needed+0x38>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d103      	bne.n	800bb3c <tcp_timer_needed+0x1c>
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <tcp_timer_needed+0x3c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d008      	beq.n	800bb4e <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <tcp_timer_needed+0x34>)
 800bb3e:	2201      	movs	r2, #1
 800bb40:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <tcp_timer_needed+0x40>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	4907      	ldr	r1, [pc, #28]	; (800bb64 <tcp_timer_needed+0x44>)
 800bb48:	20fa      	movs	r0, #250	; 0xfa
 800bb4a:	f000 f8f1 	bl	800bd30 <sys_timeout_debug>
  }
}
 800bb4e:	bf00      	nop
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20000110 	.word	0x20000110
 800bb58:	2000698c 	.word	0x2000698c
 800bb5c:	2000699c 	.word	0x2000699c
 800bb60:	08014c0c 	.word	0x08014c0c
 800bb64:	0800bad5 	.word	0x0800bad5

0800bb68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bb76:	2006      	movs	r0, #6
 800bb78:	f7f9 fbea 	bl	8005350 <memp_malloc>
 800bb7c:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d109      	bne.n	800bb98 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d15c      	bne.n	800bc44 <sys_timeout_abs+0xdc>
 800bb8a:	4b30      	ldr	r3, [pc, #192]	; (800bc4c <sys_timeout_abs+0xe4>)
 800bb8c:	22be      	movs	r2, #190	; 0xbe
 800bb8e:	4930      	ldr	r1, [pc, #192]	; (800bc50 <sys_timeout_abs+0xe8>)
 800bb90:	4830      	ldr	r0, [pc, #192]	; (800bc54 <sys_timeout_abs+0xec>)
 800bb92:	f005 fd97 	bl	80116c4 <iprintf>
    return;
 800bb96:	e055      	b.n	800bc44 <sys_timeout_abs+0xdc>
  }

  timeout->next = NULL;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	6939      	ldr	r1, [r7, #16]
 800bbc0:	4825      	ldr	r0, [pc, #148]	; (800bc58 <sys_timeout_abs+0xf0>)
 800bbc2:	f005 fd7f 	bl	80116c4 <iprintf>
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bbc6:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d103      	bne.n	800bbd6 <sys_timeout_abs+0x6e>
    next_timeout = timeout;
 800bbce:	4a23      	ldr	r2, [pc, #140]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6013      	str	r3, [r2, #0]
    return;
 800bbd4:	e037      	b.n	800bc46 <sys_timeout_abs+0xde>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	4b20      	ldr	r3, [pc, #128]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	0fdb      	lsrs	r3, r3, #31
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <sys_timeout_abs+0x96>
    timeout->next = next_timeout;
 800bbee:	4b1b      	ldr	r3, [pc, #108]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bbf6:	4a19      	ldr	r2, [pc, #100]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	e023      	b.n	800bc46 <sys_timeout_abs+0xde>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bbfe:	4b17      	ldr	r3, [pc, #92]	; (800bc5c <sys_timeout_abs+0xf4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	617b      	str	r3, [r7, #20]
 800bc04:	e01a      	b.n	800bc3c <sys_timeout_abs+0xd4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <sys_timeout_abs+0xbe>
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	0fdb      	lsrs	r3, r3, #31
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <sys_timeout_abs+0xce>
        timeout->next = t->next;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	601a      	str	r2, [r3, #0]
        break;
 800bc34:	e007      	b.n	800bc46 <sys_timeout_abs+0xde>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e1      	bne.n	800bc06 <sys_timeout_abs+0x9e>
 800bc42:	e000      	b.n	800bc46 <sys_timeout_abs+0xde>
    return;
 800bc44:	bf00      	nop
      }
    }
  }
}
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	08014c1c 	.word	0x08014c1c
 800bc50:	08014c50 	.word	0x08014c50
 800bc54:	08014c90 	.word	0x08014c90
 800bc58:	08014cb8 	.word	0x08014cb8
 800bc5c:	20000108 	.word	0x20000108

0800bc60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	4619      	mov	r1, r3
 800bc72:	4817      	ldr	r0, [pc, #92]	; (800bcd0 <lwip_cyclic_timer+0x70>)
 800bc74:	f005 fd26 	bl	80116c4 <iprintf>
#endif
  cyclic->handler();
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	4798      	blx	r3

  now = sys_now();
 800bc7e:	f7f8 fee1 	bl	8004a44 <sys_now>
 800bc82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <lwip_cyclic_timer+0x74>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	0fdb      	lsrs	r3, r3, #31
 800bc98:	f003 0301 	and.w	r3, r3, #1
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <lwip_cyclic_timer+0x58>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	18d0      	adds	r0, r2, r3
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	4909      	ldr	r1, [pc, #36]	; (800bcd8 <lwip_cyclic_timer+0x78>)
 800bcb2:	f7ff ff59 	bl	800bb68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bcb6:	e006      	b.n	800bcc6 <lwip_cyclic_timer+0x66>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4906      	ldr	r1, [pc, #24]	; (800bcd8 <lwip_cyclic_timer+0x78>)
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff ff51 	bl	800bb68 <sys_timeout_abs>
}
 800bcc6:	bf00      	nop
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	08014ce8 	.word	0x08014ce8
 800bcd4:	2000010c 	.word	0x2000010c
 800bcd8:	0800bc61 	.word	0x0800bc61

0800bcdc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bce2:	2301      	movs	r3, #1
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	e015      	b.n	800bd14 <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bce8:	490e      	ldr	r1, [pc, #56]	; (800bd24 <sys_timeouts_init+0x48>)
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4613      	mov	r3, r2
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	440b      	add	r3, r1
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4a08      	ldr	r2, [pc, #32]	; (800bd24 <sys_timeouts_init+0x48>)
 800bd04:	441a      	add	r2, r3
 800bd06:	4b08      	ldr	r3, [pc, #32]	; (800bd28 <sys_timeouts_init+0x4c>)
 800bd08:	4908      	ldr	r1, [pc, #32]	; (800bd2c <sys_timeouts_init+0x50>)
 800bd0a:	f000 f811 	bl	800bd30 <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3301      	adds	r3, #1
 800bd12:	607b      	str	r3, [r7, #4]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	d9e6      	bls.n	800bce8 <sys_timeouts_init+0xc>
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	0801763c 	.word	0x0801763c
 800bd28:	08014cf8 	.word	0x08014cf8
 800bd2c:	0800bc61 	.word	0x0800bc61

0800bd30 <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd44:	d306      	bcc.n	800bd54 <sys_timeout_debug+0x24>
 800bd46:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <sys_timeout_debug+0x44>)
 800bd48:	f240 1229 	movw	r2, #297	; 0x129
 800bd4c:	490a      	ldr	r1, [pc, #40]	; (800bd78 <sys_timeout_debug+0x48>)
 800bd4e:	480b      	ldr	r0, [pc, #44]	; (800bd7c <sys_timeout_debug+0x4c>)
 800bd50:	f005 fcb8 	bl	80116c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bd54:	f7f8 fe76 	bl	8004a44 <sys_now>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	6978      	ldr	r0, [r7, #20]
 800bd68:	f7ff fefe 	bl	800bb68 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 800bd6c:	bf00      	nop
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	08014c1c 	.word	0x08014c1c
 800bd78:	08014d0c 	.word	0x08014d0c
 800bd7c:	08014c90 	.word	0x08014c90

0800bd80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd86:	f7f8 fe5d 	bl	8004a44 <sys_now>
 800bd8a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd8c:	4b22      	ldr	r3, [pc, #136]	; (800be18 <sys_check_timeouts+0x98>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <sys_check_timeouts+0x1a>
 800bd96:	f7f9 ff01 	bl	8005b9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bd9a:	4b20      	ldr	r3, [pc, #128]	; (800be1c <sys_check_timeouts+0x9c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d032      	beq.n	800be0c <sys_check_timeouts+0x8c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	0fdb      	lsrs	r3, r3, #31
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d12a      	bne.n	800be10 <sys_check_timeouts+0x90>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a17      	ldr	r2, [pc, #92]	; (800be1c <sys_check_timeouts+0x9c>)
 800bdc0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4a13      	ldr	r2, [pc, #76]	; (800be20 <sys_check_timeouts+0xa0>)
 800bdd4:	6013      	str	r3, [r2, #0]
#if LWIP_DEBUG_TIMERNAMES
    if (handler != NULL) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00c      	beq.n	800bdf6 <sys_check_timeouts+0x76>
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	691c      	ldr	r4, [r3, #16]
 800bde0:	f7f8 fe30 	bl	8004a44 <sys_now>
 800bde4:	4602      	mov	r2, r0
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	4621      	mov	r1, r4
 800bdf0:	480c      	ldr	r0, [pc, #48]	; (800be24 <sys_check_timeouts+0xa4>)
 800bdf2:	f005 fc67 	bl	80116c4 <iprintf>
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	2006      	movs	r0, #6
 800bdfa:	f7f9 faf5 	bl	80053e8 <memp_free>
    if (handler != NULL) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0c3      	beq.n	800bd8c <sys_check_timeouts+0xc>
      handler(arg);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6838      	ldr	r0, [r7, #0]
 800be08:	4798      	blx	r3
  do {
 800be0a:	e7bf      	b.n	800bd8c <sys_check_timeouts+0xc>
      return;
 800be0c:	bf00      	nop
 800be0e:	e000      	b.n	800be12 <sys_check_timeouts+0x92>
      return;
 800be10:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	bd90      	pop	{r4, r7, pc}
 800be18:	20006984 	.word	0x20006984
 800be1c:	20000108 	.word	0x20000108
 800be20:	2000010c 	.word	0x2000010c
 800be24:	08014d44 	.word	0x08014d44

0800be28 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be2c:	f005 fcda 	bl	80117e4 <rand>
 800be30:	4603      	mov	r3, r0
 800be32:	b29b      	uxth	r3, r3
 800be34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be3e:	b29a      	uxth	r2, r3
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <udp_init+0x20>)
 800be42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be44:	bf00      	nop
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000010 	.word	0x20000010

0800be4c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800be56:	4b17      	ldr	r3, [pc, #92]	; (800beb4 <udp_new_port+0x68>)
 800be58:	881b      	ldrh	r3, [r3, #0]
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	b291      	uxth	r1, r2
 800be5e:	4a15      	ldr	r2, [pc, #84]	; (800beb4 <udp_new_port+0x68>)
 800be60:	8011      	strh	r1, [r2, #0]
 800be62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be66:	4293      	cmp	r3, r2
 800be68:	d103      	bne.n	800be72 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800be6a:	4b12      	ldr	r3, [pc, #72]	; (800beb4 <udp_new_port+0x68>)
 800be6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800be70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be72:	4b11      	ldr	r3, [pc, #68]	; (800beb8 <udp_new_port+0x6c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	e011      	b.n	800be9e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	8a5a      	ldrh	r2, [r3, #18]
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <udp_new_port+0x68>)
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	429a      	cmp	r2, r3
 800be84:	d108      	bne.n	800be98 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800be86:	88fb      	ldrh	r3, [r7, #6]
 800be88:	3301      	adds	r3, #1
 800be8a:	80fb      	strh	r3, [r7, #6]
 800be8c:	88fb      	ldrh	r3, [r7, #6]
 800be8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be92:	d3e0      	bcc.n	800be56 <udp_new_port+0xa>
        return 0;
 800be94:	2300      	movs	r3, #0
 800be96:	e007      	b.n	800bea8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1ea      	bne.n	800be7a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bea4:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <udp_new_port+0x68>)
 800bea6:	881b      	ldrh	r3, [r3, #0]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	20000010 	.word	0x20000010
 800beb8:	200069a4 	.word	0x200069a4

0800bebc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	4613      	mov	r3, r2
 800bec8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <udp_input_local_match+0x20>
 800bed0:	4b27      	ldr	r3, [pc, #156]	; (800bf70 <udp_input_local_match+0xb4>)
 800bed2:	2287      	movs	r2, #135	; 0x87
 800bed4:	4927      	ldr	r1, [pc, #156]	; (800bf74 <udp_input_local_match+0xb8>)
 800bed6:	4828      	ldr	r0, [pc, #160]	; (800bf78 <udp_input_local_match+0xbc>)
 800bed8:	f005 fbf4 	bl	80116c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <udp_input_local_match+0x32>
 800bee2:	4b23      	ldr	r3, [pc, #140]	; (800bf70 <udp_input_local_match+0xb4>)
 800bee4:	2288      	movs	r2, #136	; 0x88
 800bee6:	4925      	ldr	r1, [pc, #148]	; (800bf7c <udp_input_local_match+0xc0>)
 800bee8:	4823      	ldr	r0, [pc, #140]	; (800bf78 <udp_input_local_match+0xbc>)
 800beea:	f005 fbeb 	bl	80116c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	7a1b      	ldrb	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00b      	beq.n	800bf0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	7a1a      	ldrb	r2, [r3, #8]
 800befa:	4b21      	ldr	r3, [pc, #132]	; (800bf80 <udp_input_local_match+0xc4>)
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf02:	3301      	adds	r3, #1
 800bf04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d001      	beq.n	800bf0e <udp_input_local_match+0x52>
    return 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e02b      	b.n	800bf66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d018      	beq.n	800bf46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d013      	beq.n	800bf42 <udp_input_local_match+0x86>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00f      	beq.n	800bf42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf22:	4b17      	ldr	r3, [pc, #92]	; (800bf80 <udp_input_local_match+0xc4>)
 800bf24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2a:	d00a      	beq.n	800bf42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	4b13      	ldr	r3, [pc, #76]	; (800bf80 <udp_input_local_match+0xc4>)
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	405a      	eors	r2, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	3308      	adds	r3, #8
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d110      	bne.n	800bf64 <udp_input_local_match+0xa8>
          return 1;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e00f      	b.n	800bf66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d009      	beq.n	800bf60 <udp_input_local_match+0xa4>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <udp_input_local_match+0xa4>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <udp_input_local_match+0xc4>)
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d101      	bne.n	800bf64 <udp_input_local_match+0xa8>
        return 1;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	08014d78 	.word	0x08014d78
 800bf74:	08014da8 	.word	0x08014da8
 800bf78:	08014dcc 	.word	0x08014dcc
 800bf7c:	08014df4 	.word	0x08014df4
 800bf80:	200033d4 	.word	0x200033d4

0800bf84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b08d      	sub	sp, #52	; 0x34
 800bf88:	af02      	add	r7, sp, #8
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <udp_input+0x20>
 800bf98:	4b7c      	ldr	r3, [pc, #496]	; (800c18c <udp_input+0x208>)
 800bf9a:	22cf      	movs	r2, #207	; 0xcf
 800bf9c:	497c      	ldr	r1, [pc, #496]	; (800c190 <udp_input+0x20c>)
 800bf9e:	487d      	ldr	r0, [pc, #500]	; (800c194 <udp_input+0x210>)
 800bfa0:	f005 fb90 	bl	80116c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d105      	bne.n	800bfb6 <udp_input+0x32>
 800bfaa:	4b78      	ldr	r3, [pc, #480]	; (800c18c <udp_input+0x208>)
 800bfac:	22d0      	movs	r2, #208	; 0xd0
 800bfae:	497a      	ldr	r1, [pc, #488]	; (800c198 <udp_input+0x214>)
 800bfb0:	4878      	ldr	r0, [pc, #480]	; (800c194 <udp_input+0x210>)
 800bfb2:	f005 fb87 	bl	80116c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	895b      	ldrh	r3, [r3, #10]
 800bfba:	2b07      	cmp	r3, #7
 800bfbc:	d803      	bhi.n	800bfc6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7fa f96c 	bl	800629c <pbuf_free>
    goto end;
 800bfc4:	e0de      	b.n	800c184 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bfcc:	4b73      	ldr	r3, [pc, #460]	; (800c19c <udp_input+0x218>)
 800bfce:	695a      	ldr	r2, [r3, #20]
 800bfd0:	4b72      	ldr	r3, [pc, #456]	; (800c19c <udp_input+0x218>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f004 fb76 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f8 fd33 	bl	8004a52 <lwip_htons>
 800bfec:	4603      	mov	r3, r0
 800bfee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	885b      	ldrh	r3, [r3, #2]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7f8 fd2b 	bl	8004a52 <lwip_htons>
 800bffc:	4603      	mov	r3, r0
 800bffe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	623b      	str	r3, [r7, #32]
  prev = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c00c:	4b64      	ldr	r3, [pc, #400]	; (800c1a0 <udp_input+0x21c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	623b      	str	r3, [r7, #32]
 800c012:	e054      	b.n	800c0be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	8a5b      	ldrh	r3, [r3, #18]
 800c018:	89fa      	ldrh	r2, [r7, #14]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d14a      	bne.n	800c0b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c01e:	7cfb      	ldrb	r3, [r7, #19]
 800c020:	461a      	mov	r2, r3
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6a38      	ldr	r0, [r7, #32]
 800c026:	f7ff ff49 	bl	800bebc <udp_input_local_match>
 800c02a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d041      	beq.n	800c0b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	7c1b      	ldrb	r3, [r3, #16]
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11d      	bne.n	800c078 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d102      	bne.n	800c048 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	61bb      	str	r3, [r7, #24]
 800c046:	e017      	b.n	800c078 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c048:	7cfb      	ldrb	r3, [r7, #19]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d014      	beq.n	800c078 <udp_input+0xf4>
 800c04e:	4b53      	ldr	r3, [pc, #332]	; (800c19c <udp_input+0x218>)
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d10f      	bne.n	800c078 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	3304      	adds	r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d008      	beq.n	800c078 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	3304      	adds	r3, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d101      	bne.n	800c078 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	8a9b      	ldrh	r3, [r3, #20]
 800c07c:	8a3a      	ldrh	r2, [r7, #16]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d118      	bne.n	800c0b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	685a      	ldr	r2, [r3, #4]
 800c08e:	4b43      	ldr	r3, [pc, #268]	; (800c19c <udp_input+0x218>)
 800c090:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c092:	429a      	cmp	r2, r3
 800c094:	d10e      	bne.n	800c0b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d014      	beq.n	800c0c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	68da      	ldr	r2, [r3, #12]
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c0a4:	4b3e      	ldr	r3, [pc, #248]	; (800c1a0 <udp_input+0x21c>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	6a3b      	ldr	r3, [r7, #32]
 800c0aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c0ac:	4a3c      	ldr	r2, [pc, #240]	; (800c1a0 <udp_input+0x21c>)
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c0b2:	e008      	b.n	800c0c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	623b      	str	r3, [r7, #32]
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1a7      	bne.n	800c014 <udp_input+0x90>
 800c0c4:	e000      	b.n	800c0c8 <udp_input+0x144>
        break;
 800c0c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <udp_input+0x15a>
    for_us = 1;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	77fb      	strb	r3, [r7, #31]
 800c0dc:	e00a      	b.n	800c0f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	4b2d      	ldr	r3, [pc, #180]	; (800c19c <udp_input+0x218>)
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	bf0c      	ite	eq
 800c0ec:	2301      	moveq	r3, #1
 800c0ee:	2300      	movne	r3, #0
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c0f4:	7ffb      	ldrb	r3, [r7, #31]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d041      	beq.n	800c17e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c0fa:	2108      	movs	r1, #8
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7fa f83f 	bl	8006180 <pbuf_remove_header>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00a      	beq.n	800c11e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c108:	4b20      	ldr	r3, [pc, #128]	; (800c18c <udp_input+0x208>)
 800c10a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c10e:	4925      	ldr	r1, [pc, #148]	; (800c1a4 <udp_input+0x220>)
 800c110:	4820      	ldr	r0, [pc, #128]	; (800c194 <udp_input+0x210>)
 800c112:	f005 fad7 	bl	80116c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fa f8c0 	bl	800629c <pbuf_free>
      goto end;
 800c11c:	e032      	b.n	800c184 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	699c      	ldr	r4, [r3, #24]
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	69d8      	ldr	r0, [r3, #28]
 800c134:	8a3b      	ldrh	r3, [r7, #16]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	4b1b      	ldr	r3, [pc, #108]	; (800c1a8 <udp_input+0x224>)
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6a39      	ldr	r1, [r7, #32]
 800c13e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c140:	e021      	b.n	800c186 <udp_input+0x202>
        pbuf_free(p);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7fa f8aa 	bl	800629c <pbuf_free>
        goto end;
 800c148:	e01c      	b.n	800c184 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c14a:	7cfb      	ldrb	r3, [r7, #19]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d112      	bne.n	800c176 <udp_input+0x1f2>
 800c150:	4b12      	ldr	r3, [pc, #72]	; (800c19c <udp_input+0x218>)
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c158:	2be0      	cmp	r3, #224	; 0xe0
 800c15a:	d00c      	beq.n	800c176 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c15c:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <udp_input+0x218>)
 800c15e:	899b      	ldrh	r3, [r3, #12]
 800c160:	3308      	adds	r3, #8
 800c162:	b29b      	uxth	r3, r3
 800c164:	b21b      	sxth	r3, r3
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7fa f884 	bl	8006276 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c16e:	2103      	movs	r1, #3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f003 fda1 	bl	800fcb8 <icmp_dest_unreach>
      pbuf_free(p);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7fa f890 	bl	800629c <pbuf_free>
  return;
 800c17c:	e003      	b.n	800c186 <udp_input+0x202>
    pbuf_free(p);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7fa f88c 	bl	800629c <pbuf_free>
  return;
 800c184:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c186:	372c      	adds	r7, #44	; 0x2c
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd90      	pop	{r4, r7, pc}
 800c18c:	08014d78 	.word	0x08014d78
 800c190:	08014e1c 	.word	0x08014e1c
 800c194:	08014dcc 	.word	0x08014dcc
 800c198:	08014e34 	.word	0x08014e34
 800c19c:	200033d4 	.word	0x200033d4
 800c1a0:	200069a4 	.word	0x200069a4
 800c1a4:	08014e50 	.word	0x08014e50
 800c1a8:	200033e4 	.word	0x200033e4

0800c1ac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d109      	bne.n	800c1d4 <udp_sendto_if+0x28>
 800c1c0:	4b2e      	ldr	r3, [pc, #184]	; (800c27c <udp_sendto_if+0xd0>)
 800c1c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1c6:	492e      	ldr	r1, [pc, #184]	; (800c280 <udp_sendto_if+0xd4>)
 800c1c8:	482e      	ldr	r0, [pc, #184]	; (800c284 <udp_sendto_if+0xd8>)
 800c1ca:	f005 fa7b 	bl	80116c4 <iprintf>
 800c1ce:	f06f 030f 	mvn.w	r3, #15
 800c1d2:	e04f      	b.n	800c274 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <udp_sendto_if+0x42>
 800c1da:	4b28      	ldr	r3, [pc, #160]	; (800c27c <udp_sendto_if+0xd0>)
 800c1dc:	f240 2281 	movw	r2, #641	; 0x281
 800c1e0:	4929      	ldr	r1, [pc, #164]	; (800c288 <udp_sendto_if+0xdc>)
 800c1e2:	4828      	ldr	r0, [pc, #160]	; (800c284 <udp_sendto_if+0xd8>)
 800c1e4:	f005 fa6e 	bl	80116c4 <iprintf>
 800c1e8:	f06f 030f 	mvn.w	r3, #15
 800c1ec:	e042      	b.n	800c274 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <udp_sendto_if+0x5c>
 800c1f4:	4b21      	ldr	r3, [pc, #132]	; (800c27c <udp_sendto_if+0xd0>)
 800c1f6:	f240 2282 	movw	r2, #642	; 0x282
 800c1fa:	4924      	ldr	r1, [pc, #144]	; (800c28c <udp_sendto_if+0xe0>)
 800c1fc:	4821      	ldr	r0, [pc, #132]	; (800c284 <udp_sendto_if+0xd8>)
 800c1fe:	f005 fa61 	bl	80116c4 <iprintf>
 800c202:	f06f 030f 	mvn.w	r3, #15
 800c206:	e035      	b.n	800c274 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d109      	bne.n	800c222 <udp_sendto_if+0x76>
 800c20e:	4b1b      	ldr	r3, [pc, #108]	; (800c27c <udp_sendto_if+0xd0>)
 800c210:	f240 2283 	movw	r2, #643	; 0x283
 800c214:	491e      	ldr	r1, [pc, #120]	; (800c290 <udp_sendto_if+0xe4>)
 800c216:	481b      	ldr	r0, [pc, #108]	; (800c284 <udp_sendto_if+0xd8>)
 800c218:	f005 fa54 	bl	80116c4 <iprintf>
 800c21c:	f06f 030f 	mvn.w	r3, #15
 800c220:	e028      	b.n	800c274 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <udp_sendto_if+0x90>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d005      	beq.n	800c23c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c238:	2be0      	cmp	r3, #224	; 0xe0
 800c23a:	d103      	bne.n	800c244 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	3304      	adds	r3, #4
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	e00b      	b.n	800c25c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	3304      	adds	r3, #4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d002      	beq.n	800c258 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c252:	f06f 0303 	mvn.w	r3, #3
 800c256:	e00d      	b.n	800c274 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c25c:	887a      	ldrh	r2, [r7, #2]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	6a3b      	ldr	r3, [r7, #32]
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	4613      	mov	r3, r2
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f811 	bl	800c294 <udp_sendto_if_src>
 800c272:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	08014d78 	.word	0x08014d78
 800c280:	08014eec 	.word	0x08014eec
 800c284:	08014dcc 	.word	0x08014dcc
 800c288:	08014f08 	.word	0x08014f08
 800c28c:	08014f24 	.word	0x08014f24
 800c290:	08014f44 	.word	0x08014f44

0800c294 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08c      	sub	sp, #48	; 0x30
 800c298:	af04      	add	r7, sp, #16
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <udp_sendto_if_src+0x28>
 800c2a8:	4b65      	ldr	r3, [pc, #404]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c2aa:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c2ae:	4965      	ldr	r1, [pc, #404]	; (800c444 <udp_sendto_if_src+0x1b0>)
 800c2b0:	4865      	ldr	r0, [pc, #404]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c2b2:	f005 fa07 	bl	80116c4 <iprintf>
 800c2b6:	f06f 030f 	mvn.w	r3, #15
 800c2ba:	e0bc      	b.n	800c436 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <udp_sendto_if_src+0x42>
 800c2c2:	4b5f      	ldr	r3, [pc, #380]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c2c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c2c8:	4960      	ldr	r1, [pc, #384]	; (800c44c <udp_sendto_if_src+0x1b8>)
 800c2ca:	485f      	ldr	r0, [pc, #380]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c2cc:	f005 f9fa 	bl	80116c4 <iprintf>
 800c2d0:	f06f 030f 	mvn.w	r3, #15
 800c2d4:	e0af      	b.n	800c436 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d109      	bne.n	800c2f0 <udp_sendto_if_src+0x5c>
 800c2dc:	4b58      	ldr	r3, [pc, #352]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c2de:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c2e2:	495b      	ldr	r1, [pc, #364]	; (800c450 <udp_sendto_if_src+0x1bc>)
 800c2e4:	4858      	ldr	r0, [pc, #352]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c2e6:	f005 f9ed 	bl	80116c4 <iprintf>
 800c2ea:	f06f 030f 	mvn.w	r3, #15
 800c2ee:	e0a2      	b.n	800c436 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d109      	bne.n	800c30a <udp_sendto_if_src+0x76>
 800c2f6:	4b52      	ldr	r3, [pc, #328]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c2f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c2fc:	4955      	ldr	r1, [pc, #340]	; (800c454 <udp_sendto_if_src+0x1c0>)
 800c2fe:	4852      	ldr	r0, [pc, #328]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c300:	f005 f9e0 	bl	80116c4 <iprintf>
 800c304:	f06f 030f 	mvn.w	r3, #15
 800c308:	e095      	b.n	800c436 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d109      	bne.n	800c324 <udp_sendto_if_src+0x90>
 800c310:	4b4b      	ldr	r3, [pc, #300]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c312:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c316:	4950      	ldr	r1, [pc, #320]	; (800c458 <udp_sendto_if_src+0x1c4>)
 800c318:	484b      	ldr	r0, [pc, #300]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c31a:	f005 f9d3 	bl	80116c4 <iprintf>
 800c31e:	f06f 030f 	mvn.w	r3, #15
 800c322:	e088      	b.n	800c436 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8a5b      	ldrh	r3, [r3, #18]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10f      	bne.n	800c34c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	8a5b      	ldrh	r3, [r3, #18]
 800c332:	461a      	mov	r2, r3
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f893 	bl	800c460 <udp_bind>
 800c33a:	4603      	mov	r3, r0
 800c33c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c33e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c346:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c34a:	e074      	b.n	800c436 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	891b      	ldrh	r3, [r3, #8]
 800c350:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c354:	4293      	cmp	r3, r2
 800c356:	d902      	bls.n	800c35e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c358:	f04f 33ff 	mov.w	r3, #4294967295
 800c35c:	e06b      	b.n	800c436 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c35e:	2108      	movs	r1, #8
 800c360:	68b8      	ldr	r0, [r7, #8]
 800c362:	f7f9 fefd 	bl	8006160 <pbuf_add_header>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d015      	beq.n	800c398 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c36c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c370:	2108      	movs	r1, #8
 800c372:	2022      	movs	r0, #34	; 0x22
 800c374:	f7f9 fc6c 	bl	8005c50 <pbuf_alloc>
 800c378:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d102      	bne.n	800c386 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c380:	f04f 33ff 	mov.w	r3, #4294967295
 800c384:	e057      	b.n	800c436 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	891b      	ldrh	r3, [r3, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d006      	beq.n	800c39c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	69f8      	ldr	r0, [r7, #28]
 800c392:	f7fa f8b3 	bl	80064fc <pbuf_chain>
 800c396:	e001      	b.n	800c39c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	895b      	ldrh	r3, [r3, #10]
 800c3a0:	2b07      	cmp	r3, #7
 800c3a2:	d806      	bhi.n	800c3b2 <udp_sendto_if_src+0x11e>
 800c3a4:	4b26      	ldr	r3, [pc, #152]	; (800c440 <udp_sendto_if_src+0x1ac>)
 800c3a6:	f240 320e 	movw	r2, #782	; 0x30e
 800c3aa:	492c      	ldr	r1, [pc, #176]	; (800c45c <udp_sendto_if_src+0x1c8>)
 800c3ac:	4826      	ldr	r0, [pc, #152]	; (800c448 <udp_sendto_if_src+0x1b4>)
 800c3ae:	f005 f989 	bl	80116c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	8a5b      	ldrh	r3, [r3, #18]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7f8 fb48 	bl	8004a52 <lwip_htons>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c3ca:	887b      	ldrh	r3, [r7, #2]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f8 fb40 	bl	8004a52 <lwip_htons>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	719a      	strb	r2, [r3, #6]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	891b      	ldrh	r3, [r3, #8]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f8 fb32 	bl	8004a52 <lwip_htons>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c3f6:	2311      	movs	r3, #17
 800c3f8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	7adb      	ldrb	r3, [r3, #11]
 800c3fe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	7a9b      	ldrb	r3, [r3, #10]
 800c404:	7cb9      	ldrb	r1, [r7, #18]
 800c406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c408:	9202      	str	r2, [sp, #8]
 800c40a:	7cfa      	ldrb	r2, [r7, #19]
 800c40c:	9201      	str	r2, [sp, #4]
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	460b      	mov	r3, r1
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c416:	69f8      	ldr	r0, [r7, #28]
 800c418:	f003 ffc2 	bl	80103a0 <ip4_output_if_src>
 800c41c:	4603      	mov	r3, r0
 800c41e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	429a      	cmp	r2, r3
 800c426:	d004      	beq.n	800c432 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c428:	69f8      	ldr	r0, [r7, #28]
 800c42a:	f7f9 ff37 	bl	800629c <pbuf_free>
    q = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c432:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3720      	adds	r7, #32
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	08014d78 	.word	0x08014d78
 800c444:	08014f64 	.word	0x08014f64
 800c448:	08014dcc 	.word	0x08014dcc
 800c44c:	08014f84 	.word	0x08014f84
 800c450:	08014fa4 	.word	0x08014fa4
 800c454:	08014fc8 	.word	0x08014fc8
 800c458:	08014fec 	.word	0x08014fec
 800c45c:	08015010 	.word	0x08015010

0800c460 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c474:	4b39      	ldr	r3, [pc, #228]	; (800c55c <udp_bind+0xfc>)
 800c476:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d109      	bne.n	800c492 <udp_bind+0x32>
 800c47e:	4b38      	ldr	r3, [pc, #224]	; (800c560 <udp_bind+0x100>)
 800c480:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c484:	4937      	ldr	r1, [pc, #220]	; (800c564 <udp_bind+0x104>)
 800c486:	4838      	ldr	r0, [pc, #224]	; (800c568 <udp_bind+0x108>)
 800c488:	f005 f91c 	bl	80116c4 <iprintf>
 800c48c:	f06f 030f 	mvn.w	r3, #15
 800c490:	e060      	b.n	800c554 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c496:	4b35      	ldr	r3, [pc, #212]	; (800c56c <udp_bind+0x10c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	e009      	b.n	800c4b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d102      	bne.n	800c4ac <udp_bind+0x4c>
      rebind = 1;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	74fb      	strb	r3, [r7, #19]
      break;
 800c4aa:	e005      	b.n	800c4b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1f2      	bne.n	800c49e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c4b8:	88fb      	ldrh	r3, [r7, #6]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <udp_bind+0x72>
    port = udp_new_port();
 800c4be:	f7ff fcc5 	bl	800be4c <udp_new_port>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d12c      	bne.n	800c526 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c4cc:	f06f 0307 	mvn.w	r3, #7
 800c4d0:	e040      	b.n	800c554 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4d2:	4b26      	ldr	r3, [pc, #152]	; (800c56c <udp_bind+0x10c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e022      	b.n	800c520 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d01b      	beq.n	800c51a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	8a5b      	ldrh	r3, [r3, #18]
 800c4e6:	88fa      	ldrh	r2, [r7, #6]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d116      	bne.n	800c51a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d00d      	beq.n	800c514 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00a      	beq.n	800c514 <udp_bind+0xb4>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d006      	beq.n	800c514 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c506:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d003      	beq.n	800c514 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c514:	f06f 0307 	mvn.w	r3, #7
 800c518:	e01c      	b.n	800c554 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	617b      	str	r3, [r7, #20]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1d9      	bne.n	800c4da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <udp_bind+0xd2>
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	e000      	b.n	800c534 <udp_bind+0xd4>
 800c532:	2300      	movs	r3, #0
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	88fa      	ldrh	r2, [r7, #6]
 800c53c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c53e:	7cfb      	ldrb	r3, [r7, #19]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <udp_bind+0x10c>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c54c:	4a07      	ldr	r2, [pc, #28]	; (800c56c <udp_bind+0x10c>)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3718      	adds	r7, #24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	08017678 	.word	0x08017678
 800c560:	08014d78 	.word	0x08014d78
 800c564:	08015040 	.word	0x08015040
 800c568:	08014dcc 	.word	0x08014dcc
 800c56c:	200069a4 	.word	0x200069a4

0800c570 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d109      	bne.n	800c598 <udp_connect+0x28>
 800c584:	4b2c      	ldr	r3, [pc, #176]	; (800c638 <udp_connect+0xc8>)
 800c586:	f240 4235 	movw	r2, #1077	; 0x435
 800c58a:	492c      	ldr	r1, [pc, #176]	; (800c63c <udp_connect+0xcc>)
 800c58c:	482c      	ldr	r0, [pc, #176]	; (800c640 <udp_connect+0xd0>)
 800c58e:	f005 f899 	bl	80116c4 <iprintf>
 800c592:	f06f 030f 	mvn.w	r3, #15
 800c596:	e04b      	b.n	800c630 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d109      	bne.n	800c5b2 <udp_connect+0x42>
 800c59e:	4b26      	ldr	r3, [pc, #152]	; (800c638 <udp_connect+0xc8>)
 800c5a0:	f240 4236 	movw	r2, #1078	; 0x436
 800c5a4:	4927      	ldr	r1, [pc, #156]	; (800c644 <udp_connect+0xd4>)
 800c5a6:	4826      	ldr	r0, [pc, #152]	; (800c640 <udp_connect+0xd0>)
 800c5a8:	f005 f88c 	bl	80116c4 <iprintf>
 800c5ac:	f06f 030f 	mvn.w	r3, #15
 800c5b0:	e03e      	b.n	800c630 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	8a5b      	ldrh	r3, [r3, #18]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10f      	bne.n	800c5da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c5ba:	68f9      	ldr	r1, [r7, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	8a5b      	ldrh	r3, [r3, #18]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7ff ff4c 	bl	800c460 <udp_bind>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800c5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <udp_connect+0x6a>
      return err;
 800c5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5d8:	e02a      	b.n	800c630 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <udp_connect+0x76>
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	e000      	b.n	800c5e8 <udp_connect+0x78>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	88fa      	ldrh	r2, [r7, #6]
 800c5f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	7c1b      	ldrb	r3, [r3, #16]
 800c5f6:	f043 0304 	orr.w	r3, r3, #4
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c600:	4b11      	ldr	r3, [pc, #68]	; (800c648 <udp_connect+0xd8>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	613b      	str	r3, [r7, #16]
 800c606:	e008      	b.n	800c61a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d101      	bne.n	800c614 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	e00d      	b.n	800c630 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	613b      	str	r3, [r7, #16]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f3      	bne.n	800c608 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c620:	4b09      	ldr	r3, [pc, #36]	; (800c648 <udp_connect+0xd8>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c628:	4a07      	ldr	r2, [pc, #28]	; (800c648 <udp_connect+0xd8>)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	08014d78 	.word	0x08014d78
 800c63c:	08015058 	.word	0x08015058
 800c640:	08014dcc 	.word	0x08014dcc
 800c644:	08015074 	.word	0x08015074
 800c648:	200069a4 	.word	0x200069a4

0800c64c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d107      	bne.n	800c66e <udp_recv+0x22>
 800c65e:	4b08      	ldr	r3, [pc, #32]	; (800c680 <udp_recv+0x34>)
 800c660:	f240 428a 	movw	r2, #1162	; 0x48a
 800c664:	4907      	ldr	r1, [pc, #28]	; (800c684 <udp_recv+0x38>)
 800c666:	4808      	ldr	r0, [pc, #32]	; (800c688 <udp_recv+0x3c>)
 800c668:	f005 f82c 	bl	80116c4 <iprintf>
 800c66c:	e005      	b.n	800c67a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	61da      	str	r2, [r3, #28]
}
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	08014d78 	.word	0x08014d78
 800c684:	080150ac 	.word	0x080150ac
 800c688:	08014dcc 	.word	0x08014dcc

0800c68c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d107      	bne.n	800c6aa <udp_remove+0x1e>
 800c69a:	4b19      	ldr	r3, [pc, #100]	; (800c700 <udp_remove+0x74>)
 800c69c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c6a0:	4918      	ldr	r1, [pc, #96]	; (800c704 <udp_remove+0x78>)
 800c6a2:	4819      	ldr	r0, [pc, #100]	; (800c708 <udp_remove+0x7c>)
 800c6a4:	f005 f80e 	bl	80116c4 <iprintf>
 800c6a8:	e026      	b.n	800c6f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c6aa:	4b18      	ldr	r3, [pc, #96]	; (800c70c <udp_remove+0x80>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d105      	bne.n	800c6c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c6b4:	4b15      	ldr	r3, [pc, #84]	; (800c70c <udp_remove+0x80>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	4a14      	ldr	r2, [pc, #80]	; (800c70c <udp_remove+0x80>)
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	e017      	b.n	800c6f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c6c0:	4b12      	ldr	r3, [pc, #72]	; (800c70c <udp_remove+0x80>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	e010      	b.n	800c6ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d009      	beq.n	800c6e4 <udp_remove+0x58>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d104      	bne.n	800c6e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	60da      	str	r2, [r3, #12]
        break;
 800c6e2:	e005      	b.n	800c6f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1eb      	bne.n	800c6c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c6f0:	6879      	ldr	r1, [r7, #4]
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f7f8 fe78 	bl	80053e8 <memp_free>
}
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08014d78 	.word	0x08014d78
 800c704:	080150c4 	.word	0x080150c4
 800c708:	08014dcc 	.word	0x08014dcc
 800c70c:	200069a4 	.word	0x200069a4

0800c710 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c716:	2000      	movs	r0, #0
 800c718:	f7f8 fe1a 	bl	8005350 <memp_malloc>
 800c71c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d007      	beq.n	800c734 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c724:	2220      	movs	r2, #32
 800c726:	2100      	movs	r1, #0
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f004 ffc3 	bl	80116b4 <memset>
    pcb->ttl = UDP_TTL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	22ff      	movs	r2, #255	; 0xff
 800c732:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c734:	687b      	ldr	r3, [r7, #4]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
	...

0800c740 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01e      	beq.n	800c78e <udp_netif_ip_addr_changed+0x4e>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d01a      	beq.n	800c78e <udp_netif_ip_addr_changed+0x4e>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d017      	beq.n	800c78e <udp_netif_ip_addr_changed+0x4e>
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d013      	beq.n	800c78e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <udp_netif_ip_addr_changed+0x5c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	e00c      	b.n	800c788 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d103      	bne.n	800c782 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1ef      	bne.n	800c76e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c78e:	bf00      	nop
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	200069a4 	.word	0x200069a4

0800c7a0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c7a4:	4b20      	ldr	r3, [pc, #128]	; (800c828 <dhcp_inc_pcb_refcount+0x88>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d133      	bne.n	800c814 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c7ac:	4b1f      	ldr	r3, [pc, #124]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d005      	beq.n	800c7c0 <dhcp_inc_pcb_refcount+0x20>
 800c7b4:	4b1e      	ldr	r3, [pc, #120]	; (800c830 <dhcp_inc_pcb_refcount+0x90>)
 800c7b6:	22e5      	movs	r2, #229	; 0xe5
 800c7b8:	491e      	ldr	r1, [pc, #120]	; (800c834 <dhcp_inc_pcb_refcount+0x94>)
 800c7ba:	481f      	ldr	r0, [pc, #124]	; (800c838 <dhcp_inc_pcb_refcount+0x98>)
 800c7bc:	f004 ff82 	bl	80116c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c7c0:	f7ff ffa6 	bl	800c710 <udp_new>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	4b19      	ldr	r3, [pc, #100]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7c8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800c7ca:	4b18      	ldr	r3, [pc, #96]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d6:	e024      	b.n	800c822 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c7d8:	4b14      	ldr	r3, [pc, #80]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	7a5a      	ldrb	r2, [r3, #9]
 800c7de:	4b13      	ldr	r3, [pc, #76]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f042 0220 	orr.w	r2, r2, #32
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c7ea:	4b10      	ldr	r3, [pc, #64]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2244      	movs	r2, #68	; 0x44
 800c7f0:	4912      	ldr	r1, [pc, #72]	; (800c83c <dhcp_inc_pcb_refcount+0x9c>)
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff fe34 	bl	800c460 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2243      	movs	r2, #67	; 0x43
 800c7fe:	490f      	ldr	r1, [pc, #60]	; (800c83c <dhcp_inc_pcb_refcount+0x9c>)
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff feb5 	bl	800c570 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <dhcp_inc_pcb_refcount+0x8c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	490c      	ldr	r1, [pc, #48]	; (800c840 <dhcp_inc_pcb_refcount+0xa0>)
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff ff1c 	bl	800c64c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c814:	4b04      	ldr	r3, [pc, #16]	; (800c828 <dhcp_inc_pcb_refcount+0x88>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	4b02      	ldr	r3, [pc, #8]	; (800c828 <dhcp_inc_pcb_refcount+0x88>)
 800c81e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20000118 	.word	0x20000118
 800c82c:	20000114 	.word	0x20000114
 800c830:	080150dc 	.word	0x080150dc
 800c834:	08015114 	.word	0x08015114
 800c838:	0801513c 	.word	0x0801513c
 800c83c:	08017678 	.word	0x08017678
 800c840:	0800e469 	.word	0x0800e469

0800c844 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c848:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <dhcp_dec_pcb_refcount+0x40>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d105      	bne.n	800c85c <dhcp_dec_pcb_refcount+0x18>
 800c850:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <dhcp_dec_pcb_refcount+0x44>)
 800c852:	22ff      	movs	r2, #255	; 0xff
 800c854:	490d      	ldr	r1, [pc, #52]	; (800c88c <dhcp_dec_pcb_refcount+0x48>)
 800c856:	480e      	ldr	r0, [pc, #56]	; (800c890 <dhcp_dec_pcb_refcount+0x4c>)
 800c858:	f004 ff34 	bl	80116c4 <iprintf>
  dhcp_pcb_refcount--;
 800c85c:	4b09      	ldr	r3, [pc, #36]	; (800c884 <dhcp_dec_pcb_refcount+0x40>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	3b01      	subs	r3, #1
 800c862:	b2da      	uxtb	r2, r3
 800c864:	4b07      	ldr	r3, [pc, #28]	; (800c884 <dhcp_dec_pcb_refcount+0x40>)
 800c866:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c868:	4b06      	ldr	r3, [pc, #24]	; (800c884 <dhcp_dec_pcb_refcount+0x40>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d107      	bne.n	800c880 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c870:	4b08      	ldr	r3, [pc, #32]	; (800c894 <dhcp_dec_pcb_refcount+0x50>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f7ff ff09 	bl	800c68c <udp_remove>
    dhcp_pcb = NULL;
 800c87a:	4b06      	ldr	r3, [pc, #24]	; (800c894 <dhcp_dec_pcb_refcount+0x50>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]
  }
}
 800c880:	bf00      	nop
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20000118 	.word	0x20000118
 800c888:	080150dc 	.word	0x080150dc
 800c88c:	08015164 	.word	0x08015164
 800c890:	0801513c 	.word	0x0801513c
 800c894:	20000114 	.word	0x20000114

0800c898 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af02      	add	r7, sp, #8
 800c89e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	480a      	ldr	r0, [pc, #40]	; (800c8ec <dhcp_handle_nak+0x54>)
 800c8c4:	f004 fefe 	bl	80116c4 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c8c8:	210c      	movs	r1, #12
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f001 f9f0 	bl	800dcb0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <dhcp_handle_nak+0x58>)
 800c8d2:	4a07      	ldr	r2, [pc, #28]	; (800c8f0 <dhcp_handle_nak+0x58>)
 800c8d4:	4906      	ldr	r1, [pc, #24]	; (800c8f0 <dhcp_handle_nak+0x58>)
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7f9 f810 	bl	80058fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fd17 	bl	800d310 <dhcp_discover>
}
 800c8e2:	bf00      	nop
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	08015188 	.word	0x08015188
 800c8f0:	08017678 	.word	0x08017678

0800c8f4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c900:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	481c      	ldr	r0, [pc, #112]	; (800c984 <dhcp_check+0x90>)
 800c914:	f004 fed6 	bl	80116c4 <iprintf>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c918:	2108      	movs	r1, #8
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f001 f9c8 	bl	800dcb0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	331c      	adds	r3, #28
 800c924:	2200      	movs	r2, #0
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f002 fe87 	bl	800f63c <etharp_query>
 800c92e:	4603      	mov	r3, r0
 800c930:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800c932:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <dhcp_check+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 800c93a:	4813      	ldr	r0, [pc, #76]	; (800c988 <dhcp_check+0x94>)
 800c93c:	f004 ff4a 	bl	80117d4 <puts>
  }
  if (dhcp->tries < 255) {
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	799b      	ldrb	r3, [r3, #6]
 800c944:	2bff      	cmp	r3, #255	; 0xff
 800c946:	d005      	beq.n	800c954 <dhcp_check+0x60>
    dhcp->tries++;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	799b      	ldrb	r3, [r3, #6]
 800c94c:	3301      	adds	r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c954:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c958:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c95a:	893b      	ldrh	r3, [r7, #8]
 800c95c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c960:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <dhcp_check+0x98>)
 800c962:	fb82 1203 	smull	r1, r2, r2, r3
 800c966:	1152      	asrs	r2, r2, #5
 800c968:	17db      	asrs	r3, r3, #31
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 800c972:	893b      	ldrh	r3, [r7, #8]
 800c974:	4619      	mov	r1, r3
 800c976:	4806      	ldr	r0, [pc, #24]	; (800c990 <dhcp_check+0x9c>)
 800c978:	f004 fea4 	bl	80116c4 <iprintf>
}
 800c97c:	bf00      	nop
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	080151ac 	.word	0x080151ac
 800c988:	080151c8 	.word	0x080151c8
 800c98c:	10624dd3 	.word	0x10624dd3
 800c990:	080151f0 	.word	0x080151f0

0800c994 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af02      	add	r7, sp, #8
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	4816      	ldr	r0, [pc, #88]	; (800ca1c <dhcp_handle_offer+0x88>)
 800c9c2:	f004 fe7f 	bl	80116c4 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c9c6:	4b16      	ldr	r3, [pc, #88]	; (800ca20 <dhcp_handle_offer+0x8c>)
 800c9c8:	789b      	ldrb	r3, [r3, #2]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d01e      	beq.n	800ca0c <dhcp_handle_offer+0x78>
    dhcp->request_timeout = 0; /* stop timer */
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c9d4:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <dhcp_handle_offer+0x90>)
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f8 f84f 	bl	8004a7c <lwip_htonl>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	480f      	ldr	r0, [pc, #60]	; (800ca28 <dhcp_handle_offer+0x94>)
 800c9ec:	f004 fe6a 	bl	80116c4 <iprintf>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	691a      	ldr	r2, [r3, #16]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	69db      	ldr	r3, [r3, #28]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	480b      	ldr	r0, [pc, #44]	; (800ca2c <dhcp_handle_offer+0x98>)
 800ca00:	f004 fe60 	bl	80116c4 <iprintf>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f815 	bl	800ca34 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ca0a:	e003      	b.n	800ca14 <dhcp_handle_offer+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4808      	ldr	r0, [pc, #32]	; (800ca30 <dhcp_handle_offer+0x9c>)
 800ca10:	f004 fe58 	bl	80116c4 <iprintf>
}
 800ca14:	bf00      	nop
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	08015220 	.word	0x08015220
 800ca20:	200069a8 	.word	0x200069a8
 800ca24:	200069b0 	.word	0x200069b0
 800ca28:	08015248 	.word	0x08015248
 800ca2c:	08015270 	.word	0x08015270
 800ca30:	08015298 	.word	0x08015298

0800ca34 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800ca34:	b5b0      	push	{r4, r5, r7, lr}
 800ca36:	b08a      	sub	sp, #40	; 0x28
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d109      	bne.n	800ca56 <dhcp_select+0x22>
 800ca42:	4b7f      	ldr	r3, [pc, #508]	; (800cc40 <dhcp_select+0x20c>)
 800ca44:	f240 1277 	movw	r2, #375	; 0x177
 800ca48:	497e      	ldr	r1, [pc, #504]	; (800cc44 <dhcp_select+0x210>)
 800ca4a:	487f      	ldr	r0, [pc, #508]	; (800cc48 <dhcp_select+0x214>)
 800ca4c:	f004 fe3a 	bl	80116c4 <iprintf>
 800ca50:	f06f 030f 	mvn.w	r3, #15
 800ca54:	e0ef      	b.n	800cc36 <dhcp_select+0x202>
  dhcp = netif_dhcp_data(netif);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d109      	bne.n	800ca76 <dhcp_select+0x42>
 800ca62:	4b77      	ldr	r3, [pc, #476]	; (800cc40 <dhcp_select+0x20c>)
 800ca64:	f240 1279 	movw	r2, #377	; 0x179
 800ca68:	4978      	ldr	r1, [pc, #480]	; (800cc4c <dhcp_select+0x218>)
 800ca6a:	4877      	ldr	r0, [pc, #476]	; (800cc48 <dhcp_select+0x214>)
 800ca6c:	f004 fe2a 	bl	80116c4 <iprintf>
 800ca70:	f06f 0305 	mvn.w	r3, #5
 800ca74:	e0df      	b.n	800cc36 <dhcp_select+0x202>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ca84:	4619      	mov	r1, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	6879      	ldr	r1, [r7, #4]
 800ca92:	486f      	ldr	r0, [pc, #444]	; (800cc50 <dhcp_select+0x21c>)
 800ca94:	f004 fe16 	bl	80116c4 <iprintf>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ca98:	2101      	movs	r1, #1
 800ca9a:	69b8      	ldr	r0, [r7, #24]
 800ca9c:	f001 f908 	bl	800dcb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800caa0:	f107 030c 	add.w	r3, r7, #12
 800caa4:	2203      	movs	r2, #3
 800caa6:	69b9      	ldr	r1, [r7, #24]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 fe1b 	bl	800e6e4 <dhcp_create_msg>
 800caae:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 8088 	beq.w	800cbc8 <dhcp_select+0x194>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cabe:	89b8      	ldrh	r0, [r7, #12]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cac6:	2302      	movs	r3, #2
 800cac8:	2239      	movs	r2, #57	; 0x39
 800caca:	f001 f90b 	bl	800dce4 <dhcp_option>
 800cace:	4603      	mov	r3, r0
 800cad0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cad2:	89b8      	ldrh	r0, [r7, #12]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cade:	461a      	mov	r2, r3
 800cae0:	f001 f95a 	bl	800dd98 <dhcp_option_short>
 800cae4:	4603      	mov	r3, r0
 800cae6:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800cae8:	89b8      	ldrh	r0, [r7, #12]
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800caf0:	2304      	movs	r3, #4
 800caf2:	2232      	movs	r2, #50	; 0x32
 800caf4:	f001 f8f6 	bl	800dce4 <dhcp_option>
 800caf8:	4603      	mov	r3, r0
 800cafa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800cafc:	89bc      	ldrh	r4, [r7, #12]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f7 ffb7 	bl	8004a7c <lwip_htonl>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	4629      	mov	r1, r5
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 f971 	bl	800ddfc <dhcp_option_long>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800cb1e:	89b8      	ldrh	r0, [r7, #12]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cb26:	2304      	movs	r3, #4
 800cb28:	2236      	movs	r2, #54	; 0x36
 800cb2a:	f001 f8db 	bl	800dce4 <dhcp_option>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800cb32:	89bc      	ldrh	r4, [r7, #12]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f7 ff9c 	bl	8004a7c <lwip_htonl>
 800cb44:	4603      	mov	r3, r0
 800cb46:	461a      	mov	r2, r3
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f001 f956 	bl	800ddfc <dhcp_option_long>
 800cb50:	4603      	mov	r3, r0
 800cb52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cb54:	89b8      	ldrh	r0, [r7, #12]
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	2237      	movs	r2, #55	; 0x37
 800cb60:	f001 f8c0 	bl	800dce4 <dhcp_option>
 800cb64:	4603      	mov	r3, r0
 800cb66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb68:	2300      	movs	r3, #0
 800cb6a:	77bb      	strb	r3, [r7, #30]
 800cb6c:	e00e      	b.n	800cb8c <dhcp_select+0x158>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cb6e:	89b8      	ldrh	r0, [r7, #12]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cb76:	7fbb      	ldrb	r3, [r7, #30]
 800cb78:	4a36      	ldr	r2, [pc, #216]	; (800cc54 <dhcp_select+0x220>)
 800cb7a:	5cd3      	ldrb	r3, [r2, r3]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	f001 f8e5 	bl	800dd4c <dhcp_option_byte>
 800cb82:	4603      	mov	r3, r0
 800cb84:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb86:	7fbb      	ldrb	r3, [r7, #30]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	77bb      	strb	r3, [r7, #30]
 800cb8c:	7fbb      	ldrb	r3, [r7, #30]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d9ed      	bls.n	800cb6e <dhcp_select+0x13a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cb92:	89b8      	ldrh	r0, [r7, #12]
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	33f0      	adds	r3, #240	; 0xf0
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	f001 fe86 	bl	800e8ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cba0:	4b2d      	ldr	r3, [pc, #180]	; (800cc58 <dhcp_select+0x224>)
 800cba2:	6818      	ldr	r0, [r3, #0]
 800cba4:	4b2d      	ldr	r3, [pc, #180]	; (800cc5c <dhcp_select+0x228>)
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	2343      	movs	r3, #67	; 0x43
 800cbae:	4a2c      	ldr	r2, [pc, #176]	; (800cc60 <dhcp_select+0x22c>)
 800cbb0:	6979      	ldr	r1, [r7, #20]
 800cbb2:	f7ff fb6f 	bl	800c294 <udp_sendto_if_src>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800cbba:	6978      	ldr	r0, [r7, #20]
 800cbbc:	f7f9 fb6e 	bl	800629c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 800cbc0:	4828      	ldr	r0, [pc, #160]	; (800cc64 <dhcp_select+0x230>)
 800cbc2:	f004 fe07 	bl	80117d4 <puts>
 800cbc6:	e004      	b.n	800cbd2 <dhcp_select+0x19e>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 800cbc8:	4827      	ldr	r0, [pc, #156]	; (800cc68 <dhcp_select+0x234>)
 800cbca:	f004 fe03 	bl	80117d4 <puts>
    result = ERR_MEM;
 800cbce:	23ff      	movs	r3, #255	; 0xff
 800cbd0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	799b      	ldrb	r3, [r3, #6]
 800cbd6:	2bff      	cmp	r3, #255	; 0xff
 800cbd8:	d005      	beq.n	800cbe6 <dhcp_select+0x1b2>
    dhcp->tries++;
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	799b      	ldrb	r3, [r3, #6]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	799b      	ldrb	r3, [r3, #6]
 800cbea:	2b05      	cmp	r3, #5
 800cbec:	d80d      	bhi.n	800cc0a <dhcp_select+0x1d6>
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	799b      	ldrb	r3, [r3, #6]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	4093      	lsls	r3, r2
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	0152      	lsls	r2, r2, #5
 800cbfe:	1ad2      	subs	r2, r2, r3
 800cc00:	0092      	lsls	r2, r2, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	e001      	b.n	800cc0e <dhcp_select+0x1da>
 800cc0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800cc0e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cc10:	89fb      	ldrh	r3, [r7, #14]
 800cc12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800cc16:	4a15      	ldr	r2, [pc, #84]	; (800cc6c <dhcp_select+0x238>)
 800cc18:	fb82 1203 	smull	r1, r2, r2, r3
 800cc1c:	1152      	asrs	r2, r2, #5
 800cc1e:	17db      	asrs	r3, r3, #31
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 800cc28:	89fb      	ldrh	r3, [r7, #14]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4810      	ldr	r0, [pc, #64]	; (800cc70 <dhcp_select+0x23c>)
 800cc2e:	f004 fd49 	bl	80116c4 <iprintf>
  return result;
 800cc32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	080150dc 	.word	0x080150dc
 800cc44:	080152cc 	.word	0x080152cc
 800cc48:	0801513c 	.word	0x0801513c
 800cc4c:	080152e8 	.word	0x080152e8
 800cc50:	08015304 	.word	0x08015304
 800cc54:	20000014 	.word	0x20000014
 800cc58:	20000114 	.word	0x20000114
 800cc5c:	08017678 	.word	0x08017678
 800cc60:	0801767c 	.word	0x0801767c
 800cc64:	08015324 	.word	0x08015324
 800cc68:	0801533c 	.word	0x0801533c
 800cc6c:	10624dd3 	.word	0x10624dd3
 800cc70:	0801536c 	.word	0x0801536c

0800cc74 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 800cc7a:	482d      	ldr	r0, [pc, #180]	; (800cd30 <dhcp_coarse_tmr+0xbc>)
 800cc7c:	f004 fdaa 	bl	80117d4 <puts>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800cc80:	4b2c      	ldr	r3, [pc, #176]	; (800cd34 <dhcp_coarse_tmr+0xc0>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	e04b      	b.n	800cd20 <dhcp_coarse_tmr+0xac>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8c:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d042      	beq.n	800cd1a <dhcp_coarse_tmr+0xa6>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	795b      	ldrb	r3, [r3, #5]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d03e      	beq.n	800cd1a <dhcp_coarse_tmr+0xa6>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	8a9b      	ldrh	r3, [r3, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d015      	beq.n	800ccd0 <dhcp_coarse_tmr+0x5c>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	8a5b      	ldrh	r3, [r3, #18]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	825a      	strh	r2, [r3, #18]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	8a5a      	ldrh	r2, [r3, #18]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	8a9b      	ldrh	r3, [r3, #20]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d109      	bne.n	800ccd0 <dhcp_coarse_tmr+0x5c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 800ccbc:	481e      	ldr	r0, [pc, #120]	; (800cd38 <dhcp_coarse_tmr+0xc4>)
 800ccbe:	f004 fd89 	bl	80117d4 <puts>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 ff4a 	bl	800db5c <dhcp_release_and_stop>
        dhcp_start(netif);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f9a7 	bl	800d01c <dhcp_start>
 800ccce:	e024      	b.n	800cd1a <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	8a1b      	ldrh	r3, [r3, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00e      	beq.n	800ccf6 <dhcp_coarse_tmr+0x82>
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	8a1b      	ldrh	r3, [r3, #16]
 800ccdc:	1e5a      	subs	r2, r3, #1
 800ccde:	b291      	uxth	r1, r2
 800cce0:	683a      	ldr	r2, [r7, #0]
 800cce2:	8211      	strh	r1, [r2, #16]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d106      	bne.n	800ccf6 <dhcp_coarse_tmr+0x82>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 800cce8:	4814      	ldr	r0, [pc, #80]	; (800cd3c <dhcp_coarse_tmr+0xc8>)
 800ccea:	f004 fd73 	bl	80117d4 <puts>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f8f8 	bl	800cee4 <dhcp_t2_timeout>
 800ccf4:	e011      	b.n	800cd1a <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	89db      	ldrh	r3, [r3, #14]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00d      	beq.n	800cd1a <dhcp_coarse_tmr+0xa6>
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	89db      	ldrh	r3, [r3, #14]
 800cd02:	1e5a      	subs	r2, r3, #1
 800cd04:	b291      	uxth	r1, r2
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	81d1      	strh	r1, [r2, #14]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d105      	bne.n	800cd1a <dhcp_coarse_tmr+0xa6>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 800cd0e:	480c      	ldr	r0, [pc, #48]	; (800cd40 <dhcp_coarse_tmr+0xcc>)
 800cd10:	f004 fd60 	bl	80117d4 <puts>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f8ad 	bl	800ce74 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	607b      	str	r3, [r7, #4]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1b0      	bne.n	800cc88 <dhcp_coarse_tmr+0x14>
      }
    }
  }
}
 800cd26:	bf00      	nop
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	0801539c 	.word	0x0801539c
 800cd34:	2000697c 	.word	0x2000697c
 800cd38:	080153b0 	.word	0x080153b0
 800cd3c:	080153d0 	.word	0x080153d0
 800cd40:	080153f0 	.word	0x080153f0

0800cd44 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800cd4a:	4b17      	ldr	r3, [pc, #92]	; (800cda8 <dhcp_fine_tmr+0x64>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	607b      	str	r3, [r7, #4]
 800cd50:	e023      	b.n	800cd9a <dhcp_fine_tmr+0x56>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd56:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01a      	beq.n	800cd94 <dhcp_fine_tmr+0x50>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	891b      	ldrh	r3, [r3, #8]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d906      	bls.n	800cd74 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	891b      	ldrh	r3, [r3, #8]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	811a      	strh	r2, [r3, #8]
 800cd72:	e00f      	b.n	800cd94 <dhcp_fine_tmr+0x50>
      } else if (dhcp->request_timeout == 1) {
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	891b      	ldrh	r3, [r3, #8]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d10b      	bne.n	800cd94 <dhcp_fine_tmr+0x50>
        dhcp->request_timeout--;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	891b      	ldrh	r3, [r3, #8]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 800cd88:	4808      	ldr	r0, [pc, #32]	; (800cdac <dhcp_fine_tmr+0x68>)
 800cd8a:	f004 fd23 	bl	80117d4 <puts>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f80e 	bl	800cdb0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	607b      	str	r3, [r7, #4]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1d8      	bne.n	800cd52 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	2000697c 	.word	0x2000697c
 800cdac:	08015410 	.word	0x08015410

0800cdb0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 800cdbe:	4828      	ldr	r0, [pc, #160]	; (800ce60 <dhcp_timeout+0xb0>)
 800cdc0:	f004 fd08 	bl	80117d4 <puts>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	795b      	ldrb	r3, [r3, #5]
 800cdc8:	2b0c      	cmp	r3, #12
 800cdca:	d003      	beq.n	800cdd4 <dhcp_timeout+0x24>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	795b      	ldrb	r3, [r3, #5]
 800cdd0:	2b06      	cmp	r3, #6
 800cdd2:	d106      	bne.n	800cde2 <dhcp_timeout+0x32>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 800cdd4:	4823      	ldr	r0, [pc, #140]	; (800ce64 <dhcp_timeout+0xb4>)
 800cdd6:	f004 fcfd 	bl	80117d4 <puts>
    dhcp_discover(netif);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 fa98 	bl	800d310 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800cde0:	e03a      	b.n	800ce58 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	795b      	ldrb	r3, [r3, #5]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d114      	bne.n	800ce14 <dhcp_timeout+0x64>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 800cdea:	481f      	ldr	r0, [pc, #124]	; (800ce68 <dhcp_timeout+0xb8>)
 800cdec:	f004 fcf2 	bl	80117d4 <puts>
    if (dhcp->tries <= 5) {
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	799b      	ldrb	r3, [r3, #6]
 800cdf4:	2b05      	cmp	r3, #5
 800cdf6:	d803      	bhi.n	800ce00 <dhcp_timeout+0x50>
      dhcp_select(netif);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fe1b 	bl	800ca34 <dhcp_select>
}
 800cdfe:	e02b      	b.n	800ce58 <dhcp_timeout+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 800ce00:	481a      	ldr	r0, [pc, #104]	; (800ce6c <dhcp_timeout+0xbc>)
 800ce02:	f004 fce7 	bl	80117d4 <puts>
      dhcp_release_and_stop(netif);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fea8 	bl	800db5c <dhcp_release_and_stop>
      dhcp_start(netif);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f905 	bl	800d01c <dhcp_start>
}
 800ce12:	e021      	b.n	800ce58 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	795b      	ldrb	r3, [r3, #5]
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d10e      	bne.n	800ce3a <dhcp_timeout+0x8a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 800ce1c:	4814      	ldr	r0, [pc, #80]	; (800ce70 <dhcp_timeout+0xc0>)
 800ce1e:	f004 fcd9 	bl	80117d4 <puts>
    if (dhcp->tries <= 1) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	799b      	ldrb	r3, [r3, #6]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d803      	bhi.n	800ce32 <dhcp_timeout+0x82>
      dhcp_check(netif);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff fd62 	bl	800c8f4 <dhcp_check>
}
 800ce30:	e012      	b.n	800ce58 <dhcp_timeout+0xa8>
      dhcp_bind(netif);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fb34 	bl	800d4a0 <dhcp_bind>
}
 800ce38:	e00e      	b.n	800ce58 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	795b      	ldrb	r3, [r3, #5]
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d10a      	bne.n	800ce58 <dhcp_timeout+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	799b      	ldrb	r3, [r3, #6]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d803      	bhi.n	800ce52 <dhcp_timeout+0xa2>
      dhcp_reboot(netif);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fdba 	bl	800d9c4 <dhcp_reboot>
}
 800ce50:	e002      	b.n	800ce58 <dhcp_timeout+0xa8>
      dhcp_discover(netif);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fa5c 	bl	800d310 <dhcp_discover>
}
 800ce58:	bf00      	nop
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	08015434 	.word	0x08015434
 800ce64:	08015444 	.word	0x08015444
 800ce68:	0801546c 	.word	0x0801546c
 800ce6c:	080154a0 	.word	0x080154a0
 800ce70:	080154d4 	.word	0x080154d4

0800ce74 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 800ce82:	4816      	ldr	r0, [pc, #88]	; (800cedc <dhcp_t1_timeout+0x68>)
 800ce84:	f004 fca6 	bl	80117d4 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	795b      	ldrb	r3, [r3, #5]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d007      	beq.n	800cea0 <dhcp_t1_timeout+0x2c>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	795b      	ldrb	r3, [r3, #5]
 800ce94:	2b0a      	cmp	r3, #10
 800ce96:	d003      	beq.n	800cea0 <dhcp_t1_timeout+0x2c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ce9c:	2b05      	cmp	r3, #5
 800ce9e:	d119      	bne.n	800ced4 <dhcp_t1_timeout+0x60>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 800cea0:	480f      	ldr	r0, [pc, #60]	; (800cee0 <dhcp_t1_timeout+0x6c>)
 800cea2:	f004 fc97 	bl	80117d4 <puts>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fc28 	bl	800d6fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	899b      	ldrh	r3, [r3, #12]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	8a5b      	ldrh	r3, [r3, #18]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	dd0b      	ble.n	800ced4 <dhcp_t1_timeout+0x60>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	899b      	ldrh	r3, [r3, #12]
 800cec0:	461a      	mov	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	8a5b      	ldrh	r3, [r3, #18]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	0fda      	lsrs	r2, r3, #31
 800ceca:	4413      	add	r3, r2
 800cecc:	105b      	asrs	r3, r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ced4:	bf00      	nop
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	08015504 	.word	0x08015504
 800cee0:	08015518 	.word	0x08015518

0800cee4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 800cef2:	4818      	ldr	r0, [pc, #96]	; (800cf54 <dhcp_t2_timeout+0x70>)
 800cef4:	f004 fc6e 	bl	80117d4 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	795b      	ldrb	r3, [r3, #5]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d00b      	beq.n	800cf18 <dhcp_t2_timeout+0x34>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	795b      	ldrb	r3, [r3, #5]
 800cf04:	2b0a      	cmp	r3, #10
 800cf06:	d007      	beq.n	800cf18 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cf0c:	2b05      	cmp	r3, #5
 800cf0e:	d003      	beq.n	800cf18 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	795b      	ldrb	r3, [r3, #5]
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d119      	bne.n	800cf4c <dhcp_t2_timeout+0x68>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 800cf18:	480f      	ldr	r0, [pc, #60]	; (800cf58 <dhcp_t2_timeout+0x74>)
 800cf1a:	f004 fc5b 	bl	80117d4 <puts>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fc9e 	bl	800d860 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	8a9b      	ldrh	r3, [r3, #20]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	8a5b      	ldrh	r3, [r3, #18]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	dd0b      	ble.n	800cf4c <dhcp_t2_timeout+0x68>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	8a9b      	ldrh	r3, [r3, #20]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8a5b      	ldrh	r3, [r3, #18]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	0fda      	lsrs	r2, r3, #31
 800cf42:	4413      	add	r3, r2
 800cf44:	105b      	asrs	r3, r3, #1
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800cf4c:	bf00      	nop
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	08015538 	.word	0x08015538
 800cf58:	0801554c 	.word	0x0801554c

0800cf5c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800cf78:	4b26      	ldr	r3, [pc, #152]	; (800d014 <dhcp_handle_ack+0xb8>)
 800cf7a:	78db      	ldrb	r3, [r3, #3]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800cf80:	4b25      	ldr	r3, [pc, #148]	; (800d018 <dhcp_handle_ack+0xbc>)
 800cf82:	68da      	ldr	r2, [r3, #12]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800cf88:	4b22      	ldr	r3, [pc, #136]	; (800d014 <dhcp_handle_ack+0xb8>)
 800cf8a:	791b      	ldrb	r3, [r3, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800cf90:	4b21      	ldr	r3, [pc, #132]	; (800d018 <dhcp_handle_ack+0xbc>)
 800cf92:	691a      	ldr	r2, [r3, #16]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf98:	e004      	b.n	800cfa4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9e:	085a      	lsrs	r2, r3, #1
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800cfa4:	4b1b      	ldr	r3, [pc, #108]	; (800d014 <dhcp_handle_ack+0xb8>)
 800cfa6:	795b      	ldrb	r3, [r3, #5]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d004      	beq.n	800cfb6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800cfac:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <dhcp_handle_ack+0xbc>)
 800cfae:	695a      	ldr	r2, [r3, #20]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	631a      	str	r2, [r3, #48]	; 0x30
 800cfb4:	e007      	b.n	800cfc6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfba:	4613      	mov	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	1a9b      	subs	r3, r3, r2
 800cfc0:	08da      	lsrs	r2, r3, #3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	691a      	ldr	r2, [r3, #16]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800cfce:	4b11      	ldr	r3, [pc, #68]	; (800d014 <dhcp_handle_ack+0xb8>)
 800cfd0:	799b      	ldrb	r3, [r3, #6]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00b      	beq.n	800cfee <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800cfd6:	4b10      	ldr	r3, [pc, #64]	; (800d018 <dhcp_handle_ack+0xbc>)
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f7 fd4e 	bl	8004a7c <lwip_htonl>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	71da      	strb	r2, [r3, #7]
 800cfec:	e002      	b.n	800cff4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800cff4:	4b07      	ldr	r3, [pc, #28]	; (800d014 <dhcp_handle_ack+0xb8>)
 800cff6:	79db      	ldrb	r3, [r3, #7]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d007      	beq.n	800d00c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800cffc:	4b06      	ldr	r3, [pc, #24]	; (800d018 <dhcp_handle_ack+0xbc>)
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	4618      	mov	r0, r3
 800d002:	f7f7 fd3b 	bl	8004a7c <lwip_htonl>
 800d006:	4602      	mov	r2, r0
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800d00c:	bf00      	nop
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	200069a8 	.word	0x200069a8
 800d018:	200069b0 	.word	0x200069b0

0800d01c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af02      	add	r7, sp, #8
 800d022:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d109      	bne.n	800d03e <dhcp_start+0x22>
 800d02a:	4b49      	ldr	r3, [pc, #292]	; (800d150 <dhcp_start+0x134>)
 800d02c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d030:	4948      	ldr	r1, [pc, #288]	; (800d154 <dhcp_start+0x138>)
 800d032:	4849      	ldr	r0, [pc, #292]	; (800d158 <dhcp_start+0x13c>)
 800d034:	f004 fb46 	bl	80116c4 <iprintf>
 800d038:	f06f 030f 	mvn.w	r3, #15
 800d03c:	e083      	b.n	800d146 <dhcp_start+0x12a>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <dhcp_start+0x44>
 800d04c:	4b40      	ldr	r3, [pc, #256]	; (800d150 <dhcp_start+0x134>)
 800d04e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800d052:	4942      	ldr	r1, [pc, #264]	; (800d15c <dhcp_start+0x140>)
 800d054:	4840      	ldr	r0, [pc, #256]	; (800d158 <dhcp_start+0x13c>)
 800d056:	f004 fb35 	bl	80116c4 <iprintf>
 800d05a:	f06f 030f 	mvn.w	r3, #15
 800d05e:	e072      	b.n	800d146 <dhcp_start+0x12a>
  dhcp = netif_dhcp_data(netif);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d06c:	461a      	mov	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d074:	4619      	mov	r1, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	460b      	mov	r3, r1
 800d080:	6879      	ldr	r1, [r7, #4]
 800d082:	4837      	ldr	r0, [pc, #220]	; (800d160 <dhcp_start+0x144>)
 800d084:	f004 fb1e 	bl	80116c4 <iprintf>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d08c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d090:	d205      	bcs.n	800d09e <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 800d092:	4834      	ldr	r0, [pc, #208]	; (800d164 <dhcp_start+0x148>)
 800d094:	f004 fb9e 	bl	80117d4 <puts>
    return ERR_MEM;
 800d098:	f04f 33ff 	mov.w	r3, #4294967295
 800d09c:	e053      	b.n	800d146 <dhcp_start+0x12a>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d116      	bne.n	800d0d2 <dhcp_start+0xb6>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 800d0a4:	4830      	ldr	r0, [pc, #192]	; (800d168 <dhcp_start+0x14c>)
 800d0a6:	f004 fb95 	bl	80117d4 <puts>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800d0aa:	2034      	movs	r0, #52	; 0x34
 800d0ac:	f7f7 ffd2 	bl	8005054 <mem_malloc>
 800d0b0:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d105      	bne.n	800d0c4 <dhcp_start+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 800d0b8:	482c      	ldr	r0, [pc, #176]	; (800d16c <dhcp_start+0x150>)
 800d0ba:	f004 fb8b 	bl	80117d4 <puts>
      return ERR_MEM;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	e040      	b.n	800d146 <dhcp_start+0x12a>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800d0ca:	4829      	ldr	r0, [pc, #164]	; (800d170 <dhcp_start+0x154>)
 800d0cc:	f004 fafa 	bl	80116c4 <iprintf>
 800d0d0:	e008      	b.n	800d0e4 <dhcp_start+0xc8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 800d0d2:	4828      	ldr	r0, [pc, #160]	; (800d174 <dhcp_start+0x158>)
 800d0d4:	f004 fb7e 	bl	80117d4 <puts>

    if (dhcp->pcb_allocated != 0) {
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	791b      	ldrb	r3, [r3, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <dhcp_start+0xc8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d0e0:	f7ff fbb0 	bl	800c844 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800d0e4:	2234      	movs	r2, #52	; 0x34
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f004 fae3 	bl	80116b4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 800d0ee:	4822      	ldr	r0, [pc, #136]	; (800d178 <dhcp_start+0x15c>)
 800d0f0:	f004 fb70 	bl	80117d4 <puts>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d0f4:	f7ff fb54 	bl	800c7a0 <dhcp_inc_pcb_refcount>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <dhcp_start+0xe8>
    return ERR_MEM;
 800d0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d102:	e020      	b.n	800d146 <dhcp_start+0x12a>
  }
  dhcp->pcb_allocated = 1;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d105      	bne.n	800d124 <dhcp_start+0x108>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800d118:	2102      	movs	r1, #2
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f000 fdc8 	bl	800dcb0 <dhcp_set_state>
    return ERR_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	e010      	b.n	800d146 <dhcp_start+0x12a>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f8f3 	bl	800d310 <dhcp_discover>
 800d12a:	4603      	mov	r3, r0
 800d12c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800d12e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <dhcp_start+0x126>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fd10 	bl	800db5c <dhcp_release_and_stop>
    return ERR_MEM;
 800d13c:	f04f 33ff 	mov.w	r3, #4294967295
 800d140:	e001      	b.n	800d146 <dhcp_start+0x12a>
  }
  return result;
 800d142:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	080150dc 	.word	0x080150dc
 800d154:	0801556c 	.word	0x0801556c
 800d158:	0801513c 	.word	0x0801513c
 800d15c:	080155b0 	.word	0x080155b0
 800d160:	080155d4 	.word	0x080155d4
 800d164:	080155f4 	.word	0x080155f4
 800d168:	08015634 	.word	0x08015634
 800d16c:	0801565c 	.word	0x0801565c
 800d170:	08015684 	.word	0x08015684
 800d174:	080156a4 	.word	0x080156a4
 800d178:	080156d0 	.word	0x080156d0

0800d17c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d107      	bne.n	800d19c <dhcp_arp_reply+0x20>
 800d18c:	4b14      	ldr	r3, [pc, #80]	; (800d1e0 <dhcp_arp_reply+0x64>)
 800d18e:	f240 328b 	movw	r2, #907	; 0x38b
 800d192:	4914      	ldr	r1, [pc, #80]	; (800d1e4 <dhcp_arp_reply+0x68>)
 800d194:	4814      	ldr	r0, [pc, #80]	; (800d1e8 <dhcp_arp_reply+0x6c>)
 800d196:	f004 fa95 	bl	80116c4 <iprintf>
 800d19a:	e01e      	b.n	800d1da <dhcp_arp_reply+0x5e>
  dhcp = netif_dhcp_data(netif);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 800d1a2:	4812      	ldr	r0, [pc, #72]	; (800d1ec <dhcp_arp_reply+0x70>)
 800d1a4:	f004 fb16 	bl	80117d4 <puts>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d015      	beq.n	800d1da <dhcp_arp_reply+0x5e>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	795b      	ldrb	r3, [r3, #5]
 800d1b2:	2b08      	cmp	r3, #8
 800d1b4:	d111      	bne.n	800d1da <dhcp_arp_reply+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	480c      	ldr	r0, [pc, #48]	; (800d1f0 <dhcp_arp_reply+0x74>)
 800d1be:	f004 fa81 	bl	80116c4 <iprintf>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d105      	bne.n	800d1da <dhcp_arp_reply+0x5e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 800d1ce:	4809      	ldr	r0, [pc, #36]	; (800d1f4 <dhcp_arp_reply+0x78>)
 800d1d0:	f004 fb00 	bl	80117d4 <puts>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f80f 	bl	800d1f8 <dhcp_decline>
    }
  }
}
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	080150dc 	.word	0x080150dc
 800d1e4:	0801556c 	.word	0x0801556c
 800d1e8:	0801513c 	.word	0x0801513c
 800d1ec:	08015758 	.word	0x08015758
 800d1f0:	0801576c 	.word	0x0801576c
 800d1f4:	080157a0 	.word	0x080157a0

0800d1f8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800d1f8:	b5b0      	push	{r4, r5, r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af02      	add	r7, sp, #8
 800d1fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d204:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 800d206:	483a      	ldr	r0, [pc, #232]	; (800d2f0 <dhcp_decline+0xf8>)
 800d208:	f004 fae4 	bl	80117d4 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d20c:	210c      	movs	r1, #12
 800d20e:	69b8      	ldr	r0, [r7, #24]
 800d210:	f000 fd4e 	bl	800dcb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d214:	f107 030c 	add.w	r3, r7, #12
 800d218:	2204      	movs	r2, #4
 800d21a:	69b9      	ldr	r1, [r7, #24]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 fa61 	bl	800e6e4 <dhcp_create_msg>
 800d222:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d038      	beq.n	800d29c <dhcp_decline+0xa4>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d230:	89b8      	ldrh	r0, [r7, #12]
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d238:	2304      	movs	r3, #4
 800d23a:	2232      	movs	r2, #50	; 0x32
 800d23c:	f000 fd52 	bl	800dce4 <dhcp_option>
 800d240:	4603      	mov	r3, r0
 800d242:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d244:	89bc      	ldrh	r4, [r7, #12]
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	69db      	ldr	r3, [r3, #28]
 800d250:	4618      	mov	r0, r3
 800d252:	f7f7 fc13 	bl	8004a7c <lwip_htonl>
 800d256:	4603      	mov	r3, r0
 800d258:	461a      	mov	r2, r3
 800d25a:	4629      	mov	r1, r5
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 fdcd 	bl	800ddfc <dhcp_option_long>
 800d262:	4603      	mov	r3, r0
 800d264:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d266:	89b8      	ldrh	r0, [r7, #12]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	33f0      	adds	r3, #240	; 0xf0
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	4619      	mov	r1, r3
 800d270:	f001 fb1c 	bl	800e8ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d274:	4b1f      	ldr	r3, [pc, #124]	; (800d2f4 <dhcp_decline+0xfc>)
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	4b1f      	ldr	r3, [pc, #124]	; (800d2f8 <dhcp_decline+0x100>)
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	2343      	movs	r3, #67	; 0x43
 800d282:	4a1e      	ldr	r2, [pc, #120]	; (800d2fc <dhcp_decline+0x104>)
 800d284:	6979      	ldr	r1, [r7, #20]
 800d286:	f7ff f805 	bl	800c294 <udp_sendto_if_src>
 800d28a:	4603      	mov	r3, r0
 800d28c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d28e:	6978      	ldr	r0, [r7, #20]
 800d290:	f7f9 f804 	bl	800629c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 800d294:	481a      	ldr	r0, [pc, #104]	; (800d300 <dhcp_decline+0x108>)
 800d296:	f004 fa9d 	bl	80117d4 <puts>
 800d29a:	e004      	b.n	800d2a6 <dhcp_decline+0xae>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800d29c:	4819      	ldr	r0, [pc, #100]	; (800d304 <dhcp_decline+0x10c>)
 800d29e:	f004 fa99 	bl	80117d4 <puts>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d2a2:	23ff      	movs	r3, #255	; 0xff
 800d2a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	799b      	ldrb	r3, [r3, #6]
 800d2aa:	2bff      	cmp	r3, #255	; 0xff
 800d2ac:	d005      	beq.n	800d2ba <dhcp_decline+0xc2>
    dhcp->tries++;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	799b      	ldrb	r3, [r3, #6]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800d2ba:	f242 7310 	movw	r3, #10000	; 0x2710
 800d2be:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d2c0:	89fb      	ldrh	r3, [r7, #14]
 800d2c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d2c6:	4a10      	ldr	r2, [pc, #64]	; (800d308 <dhcp_decline+0x110>)
 800d2c8:	fb82 1203 	smull	r1, r2, r2, r3
 800d2cc:	1152      	asrs	r2, r2, #5
 800d2ce:	17db      	asrs	r3, r3, #31
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 800d2d8:	89fb      	ldrh	r3, [r7, #14]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	480b      	ldr	r0, [pc, #44]	; (800d30c <dhcp_decline+0x114>)
 800d2de:	f004 f9f1 	bl	80116c4 <iprintf>
  return result;
 800d2e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3720      	adds	r7, #32
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	080157e4 	.word	0x080157e4
 800d2f4:	20000114 	.word	0x20000114
 800d2f8:	08017678 	.word	0x08017678
 800d2fc:	0801767c 	.word	0x0801767c
 800d300:	080157f4 	.word	0x080157f4
 800d304:	08015810 	.word	0x08015810
 800d308:	10624dd3 	.word	0x10624dd3
 800d30c:	08015840 	.word	0x08015840

0800d310 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b08a      	sub	sp, #40	; 0x28
 800d314:	af02      	add	r7, sp, #8
 800d316:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 800d322:	4853      	ldr	r0, [pc, #332]	; (800d470 <dhcp_discover+0x160>)
 800d324:	f004 fa56 	bl	80117d4 <puts>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	2200      	movs	r2, #0
 800d32c:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d32e:	2106      	movs	r1, #6
 800d330:	69b8      	ldr	r0, [r7, #24]
 800d332:	f000 fcbd 	bl	800dcb0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d336:	f107 0308 	add.w	r3, r7, #8
 800d33a:	2201      	movs	r2, #1
 800d33c:	69b9      	ldr	r1, [r7, #24]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f001 f9d0 	bl	800e6e4 <dhcp_create_msg>
 800d344:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d058      	beq.n	800d3fe <dhcp_discover+0xee>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 800d352:	4848      	ldr	r0, [pc, #288]	; (800d474 <dhcp_discover+0x164>)
 800d354:	f004 fa3e 	bl	80117d4 <puts>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d358:	8938      	ldrh	r0, [r7, #8]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d360:	2302      	movs	r3, #2
 800d362:	2239      	movs	r2, #57	; 0x39
 800d364:	f000 fcbe 	bl	800dce4 <dhcp_option>
 800d368:	4603      	mov	r3, r0
 800d36a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d36c:	8938      	ldrh	r0, [r7, #8]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d378:	461a      	mov	r2, r3
 800d37a:	f000 fd0d 	bl	800dd98 <dhcp_option_short>
 800d37e:	4603      	mov	r3, r0
 800d380:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d382:	8938      	ldrh	r0, [r7, #8]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d38a:	2303      	movs	r3, #3
 800d38c:	2237      	movs	r2, #55	; 0x37
 800d38e:	f000 fca9 	bl	800dce4 <dhcp_option>
 800d392:	4603      	mov	r3, r0
 800d394:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d396:	2300      	movs	r3, #0
 800d398:	77fb      	strb	r3, [r7, #31]
 800d39a:	e00e      	b.n	800d3ba <dhcp_discover+0xaa>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d39c:	8938      	ldrh	r0, [r7, #8]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d3a4:	7ffb      	ldrb	r3, [r7, #31]
 800d3a6:	4a34      	ldr	r2, [pc, #208]	; (800d478 <dhcp_discover+0x168>)
 800d3a8:	5cd3      	ldrb	r3, [r2, r3]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f000 fcce 	bl	800dd4c <dhcp_option_byte>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d3b4:	7ffb      	ldrb	r3, [r7, #31]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	77fb      	strb	r3, [r7, #31]
 800d3ba:	7ffb      	ldrb	r3, [r7, #31]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d9ed      	bls.n	800d39c <dhcp_discover+0x8c>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d3c0:	8938      	ldrh	r0, [r7, #8]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	33f0      	adds	r3, #240	; 0xf0
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	f001 fa6f 	bl	800e8ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 800d3ce:	482b      	ldr	r0, [pc, #172]	; (800d47c <dhcp_discover+0x16c>)
 800d3d0:	f004 fa00 	bl	80117d4 <puts>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d3d4:	4b2a      	ldr	r3, [pc, #168]	; (800d480 <dhcp_discover+0x170>)
 800d3d6:	6818      	ldr	r0, [r3, #0]
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <dhcp_discover+0x174>)
 800d3da:	9301      	str	r3, [sp, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	2343      	movs	r3, #67	; 0x43
 800d3e2:	4a29      	ldr	r2, [pc, #164]	; (800d488 <dhcp_discover+0x178>)
 800d3e4:	6939      	ldr	r1, [r7, #16]
 800d3e6:	f7fe ff55 	bl	800c294 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 800d3ea:	4828      	ldr	r0, [pc, #160]	; (800d48c <dhcp_discover+0x17c>)
 800d3ec:	f004 f9f2 	bl	80117d4 <puts>
    pbuf_free(p_out);
 800d3f0:	6938      	ldr	r0, [r7, #16]
 800d3f2:	f7f8 ff53 	bl	800629c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 800d3f6:	4826      	ldr	r0, [pc, #152]	; (800d490 <dhcp_discover+0x180>)
 800d3f8:	f004 f9ec 	bl	80117d4 <puts>
 800d3fc:	e002      	b.n	800d404 <dhcp_discover+0xf4>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 800d3fe:	4825      	ldr	r0, [pc, #148]	; (800d494 <dhcp_discover+0x184>)
 800d400:	f004 f9e8 	bl	80117d4 <puts>
  }
  if (dhcp->tries < 255) {
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	799b      	ldrb	r3, [r3, #6]
 800d408:	2bff      	cmp	r3, #255	; 0xff
 800d40a:	d005      	beq.n	800d418 <dhcp_discover+0x108>
    dhcp->tries++;
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	799b      	ldrb	r3, [r3, #6]
 800d410:	3301      	adds	r3, #1
 800d412:	b2da      	uxtb	r2, r3
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	799b      	ldrb	r3, [r3, #6]
 800d41c:	2b05      	cmp	r3, #5
 800d41e:	d80d      	bhi.n	800d43c <dhcp_discover+0x12c>
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	799b      	ldrb	r3, [r3, #6]
 800d424:	461a      	mov	r2, r3
 800d426:	2301      	movs	r3, #1
 800d428:	4093      	lsls	r3, r2
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	461a      	mov	r2, r3
 800d42e:	0152      	lsls	r2, r2, #5
 800d430:	1ad2      	subs	r2, r2, r3
 800d432:	0092      	lsls	r2, r2, #2
 800d434:	4413      	add	r3, r2
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	b29b      	uxth	r3, r3
 800d43a:	e001      	b.n	800d440 <dhcp_discover+0x130>
 800d43c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d440:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d442:	897b      	ldrh	r3, [r7, #10]
 800d444:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d448:	4a13      	ldr	r2, [pc, #76]	; (800d498 <dhcp_discover+0x188>)
 800d44a:	fb82 1203 	smull	r1, r2, r2, r3
 800d44e:	1152      	asrs	r2, r2, #5
 800d450:	17db      	asrs	r3, r3, #31
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	b29a      	uxth	r2, r3
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 800d45a:	897b      	ldrh	r3, [r7, #10]
 800d45c:	4619      	mov	r1, r3
 800d45e:	480f      	ldr	r0, [pc, #60]	; (800d49c <dhcp_discover+0x18c>)
 800d460:	f004 f930 	bl	80116c4 <iprintf>
  return result;
 800d464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3720      	adds	r7, #32
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	08015870 	.word	0x08015870
 800d474:	08015880 	.word	0x08015880
 800d478:	20000014 	.word	0x20000014
 800d47c:	080158a0 	.word	0x080158a0
 800d480:	20000114 	.word	0x20000114
 800d484:	08017678 	.word	0x08017678
 800d488:	0801767c 	.word	0x0801767c
 800d48c:	080158f0 	.word	0x080158f0
 800d490:	08015910 	.word	0x08015910
 800d494:	0801592c 	.word	0x0801592c
 800d498:	10624dd3 	.word	0x10624dd3
 800d49c:	0801595c 	.word	0x0801595c

0800d4a0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08a      	sub	sp, #40	; 0x28
 800d4a4:	af02      	add	r7, sp, #8
 800d4a6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d107      	bne.n	800d4be <dhcp_bind+0x1e>
 800d4ae:	4b88      	ldr	r3, [pc, #544]	; (800d6d0 <dhcp_bind+0x230>)
 800d4b0:	f240 4215 	movw	r2, #1045	; 0x415
 800d4b4:	4987      	ldr	r1, [pc, #540]	; (800d6d4 <dhcp_bind+0x234>)
 800d4b6:	4888      	ldr	r0, [pc, #544]	; (800d6d8 <dhcp_bind+0x238>)
 800d4b8:	f004 f904 	bl	80116c4 <iprintf>
 800d4bc:	e104      	b.n	800d6c8 <dhcp_bind+0x228>
  dhcp = netif_dhcp_data(netif);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <dhcp_bind+0x3a>
 800d4ca:	4b81      	ldr	r3, [pc, #516]	; (800d6d0 <dhcp_bind+0x230>)
 800d4cc:	f240 4217 	movw	r2, #1047	; 0x417
 800d4d0:	4982      	ldr	r1, [pc, #520]	; (800d6dc <dhcp_bind+0x23c>)
 800d4d2:	4881      	ldr	r0, [pc, #516]	; (800d6d8 <dhcp_bind+0x238>)
 800d4d4:	f004 f8f6 	bl	80116c4 <iprintf>
 800d4d8:	e0f6      	b.n	800d6c8 <dhcp_bind+0x228>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	487a      	ldr	r0, [pc, #488]	; (800d6e0 <dhcp_bind+0x240>)
 800d4f8:	f004 f8e4 	bl	80116c4 <iprintf>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	2200      	movs	r2, #0
 800d500:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50a:	d029      	beq.n	800d560 <dhcp_bind+0xc0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d510:	4619      	mov	r1, r3
 800d512:	4874      	ldr	r0, [pc, #464]	; (800d6e4 <dhcp_bind+0x244>)
 800d514:	f004 f8d6 	bl	80116c4 <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51c:	331e      	adds	r3, #30
 800d51e:	4a72      	ldr	r2, [pc, #456]	; (800d6e8 <dhcp_bind+0x248>)
 800d520:	fba2 2303 	umull	r2, r3, r2, r3
 800d524:	095b      	lsrs	r3, r3, #5
 800d526:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d52e:	d302      	bcc.n	800d536 <dhcp_bind+0x96>
      timeout = 0xffff;
 800d530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d534:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	b29a      	uxth	r2, r3
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	8a9b      	ldrh	r3, [r3, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d102      	bne.n	800d54c <dhcp_bind+0xac>
      dhcp->t0_timeout = 1;
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	2201      	movs	r2, #1
 800d54a:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d554:	fb02 f303 	mul.w	r3, r2, r3
 800d558:	4619      	mov	r1, r3
 800d55a:	4864      	ldr	r0, [pc, #400]	; (800d6ec <dhcp_bind+0x24c>)
 800d55c:	f004 f8b2 	bl	80116c4 <iprintf>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d568:	d02d      	beq.n	800d5c6 <dhcp_bind+0x126>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	4619      	mov	r1, r3
 800d570:	485f      	ldr	r0, [pc, #380]	; (800d6f0 <dhcp_bind+0x250>)
 800d572:	f004 f8a7 	bl	80116c4 <iprintf>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	331e      	adds	r3, #30
 800d57c:	4a5a      	ldr	r2, [pc, #360]	; (800d6e8 <dhcp_bind+0x248>)
 800d57e:	fba2 2303 	umull	r2, r3, r2, r3
 800d582:	095b      	lsrs	r3, r3, #5
 800d584:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d58c:	d302      	bcc.n	800d594 <dhcp_bind+0xf4>
      timeout = 0xffff;
 800d58e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d592:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	b29a      	uxth	r2, r3
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <dhcp_bind+0x10a>
      dhcp->t1_timeout = 1;
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	484c      	ldr	r0, [pc, #304]	; (800d6ec <dhcp_bind+0x24c>)
 800d5ba:	f004 f883 	bl	80116c4 <iprintf>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	895a      	ldrh	r2, [r3, #10]
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ce:	d02d      	beq.n	800d62c <dhcp_bind+0x18c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4847      	ldr	r0, [pc, #284]	; (800d6f4 <dhcp_bind+0x254>)
 800d5d8:	f004 f874 	bl	80116c4 <iprintf>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e0:	331e      	adds	r3, #30
 800d5e2:	4a41      	ldr	r2, [pc, #260]	; (800d6e8 <dhcp_bind+0x248>)
 800d5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e8:	095b      	lsrs	r3, r3, #5
 800d5ea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5f2:	d302      	bcc.n	800d5fa <dhcp_bind+0x15a>
      timeout = 0xffff;
 800d5f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5f8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	899b      	ldrh	r3, [r3, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <dhcp_bind+0x170>
      dhcp->t2_timeout = 1;
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2201      	movs	r2, #1
 800d60e:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d618:	fb02 f303 	mul.w	r3, r2, r3
 800d61c:	4619      	mov	r1, r3
 800d61e:	4833      	ldr	r0, [pc, #204]	; (800d6ec <dhcp_bind+0x24c>)
 800d620:	f004 f850 	bl	80116c4 <iprintf>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	899a      	ldrh	r2, [r3, #12]
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	895a      	ldrh	r2, [r3, #10]
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	899b      	ldrh	r3, [r3, #12]
 800d634:	429a      	cmp	r2, r3
 800d636:	d306      	bcc.n	800d646 <dhcp_bind+0x1a6>
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	899b      	ldrh	r3, [r3, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <dhcp_bind+0x1a6>
    dhcp->t1_timeout = 0;
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	2200      	movs	r2, #0
 800d644:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	79db      	ldrb	r3, [r3, #7]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <dhcp_bind+0x1b6>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	e014      	b.n	800d680 <dhcp_bind+0x1e0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	331c      	adds	r3, #28
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800d65e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d662:	2b00      	cmp	r3, #0
 800d664:	db02      	blt.n	800d66c <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800d666:	23ff      	movs	r3, #255	; 0xff
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	e009      	b.n	800d680 <dhcp_bind+0x1e0>
    } else if (first_octet >= 192) {
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2bbf      	cmp	r3, #191	; 0xbf
 800d670:	d903      	bls.n	800d67a <dhcp_bind+0x1da>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800d672:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800d676:	613b      	str	r3, [r7, #16]
 800d678:	e002      	b.n	800d680 <dhcp_bind+0x1e0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800d67a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d67e:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d108      	bne.n	800d69e <dhcp_bind+0x1fe>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	69da      	ldr	r2, [r3, #28]
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	4013      	ands	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d69c:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	69d9      	ldr	r1, [r3, #28]
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	4814      	ldr	r0, [pc, #80]	; (800d6f8 <dhcp_bind+0x258>)
 800d6a8:	f004 f80c 	bl	80116c4 <iprintf>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800d6ac:	210a      	movs	r1, #10
 800d6ae:	69b8      	ldr	r0, [r7, #24]
 800d6b0:	f000 fafe 	bl	800dcb0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	f103 011c 	add.w	r1, r3, #28
 800d6ba:	f107 030c 	add.w	r3, r7, #12
 800d6be:	f107 0210 	add.w	r2, r7, #16
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7f8 f91a 	bl	80058fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	080150dc 	.word	0x080150dc
 800d6d4:	0801598c 	.word	0x0801598c
 800d6d8:	0801513c 	.word	0x0801513c
 800d6dc:	080159a8 	.word	0x080159a8
 800d6e0:	080159c0 	.word	0x080159c0
 800d6e4:	080159e0 	.word	0x080159e0
 800d6e8:	88888889 	.word	0x88888889
 800d6ec:	08015a08 	.word	0x08015a08
 800d6f0:	08015a34 	.word	0x08015a34
 800d6f4:	08015a5c 	.word	0x08015a5c
 800d6f8:	08015a84 	.word	0x08015a84

0800d6fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	; 0x28
 800d700:	af02      	add	r7, sp, #8
 800d702:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d708:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 800d70a:	484e      	ldr	r0, [pc, #312]	; (800d844 <dhcp_renew+0x148>)
 800d70c:	f004 f862 	bl	80117d4 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800d710:	2105      	movs	r1, #5
 800d712:	69b8      	ldr	r0, [r7, #24]
 800d714:	f000 facc 	bl	800dcb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d718:	f107 030c 	add.w	r3, r7, #12
 800d71c:	2203      	movs	r2, #3
 800d71e:	69b9      	ldr	r1, [r7, #24]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 ffdf 	bl	800e6e4 <dhcp_create_msg>
 800d726:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d051      	beq.n	800d7d2 <dhcp_renew+0xd6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d734:	89b8      	ldrh	r0, [r7, #12]
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d73c:	2302      	movs	r3, #2
 800d73e:	2239      	movs	r2, #57	; 0x39
 800d740:	f000 fad0 	bl	800dce4 <dhcp_option>
 800d744:	4603      	mov	r3, r0
 800d746:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d748:	89b8      	ldrh	r0, [r7, #12]
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d754:	461a      	mov	r2, r3
 800d756:	f000 fb1f 	bl	800dd98 <dhcp_option_short>
 800d75a:	4603      	mov	r3, r0
 800d75c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d75e:	89b8      	ldrh	r0, [r7, #12]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d766:	2303      	movs	r3, #3
 800d768:	2237      	movs	r2, #55	; 0x37
 800d76a:	f000 fabb 	bl	800dce4 <dhcp_option>
 800d76e:	4603      	mov	r3, r0
 800d770:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d772:	2300      	movs	r3, #0
 800d774:	77bb      	strb	r3, [r7, #30]
 800d776:	e00e      	b.n	800d796 <dhcp_renew+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d778:	89b8      	ldrh	r0, [r7, #12]
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d780:	7fbb      	ldrb	r3, [r7, #30]
 800d782:	4a31      	ldr	r2, [pc, #196]	; (800d848 <dhcp_renew+0x14c>)
 800d784:	5cd3      	ldrb	r3, [r2, r3]
 800d786:	461a      	mov	r2, r3
 800d788:	f000 fae0 	bl	800dd4c <dhcp_option_byte>
 800d78c:	4603      	mov	r3, r0
 800d78e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d790:	7fbb      	ldrb	r3, [r7, #30]
 800d792:	3301      	adds	r3, #1
 800d794:	77bb      	strb	r3, [r7, #30]
 800d796:	7fbb      	ldrb	r3, [r7, #30]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d9ed      	bls.n	800d778 <dhcp_renew+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d79c:	89b8      	ldrh	r0, [r7, #12]
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	33f0      	adds	r3, #240	; 0xf0
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	f001 f881 	bl	800e8ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d7aa:	4b28      	ldr	r3, [pc, #160]	; (800d84c <dhcp_renew+0x150>)
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	f103 0218 	add.w	r2, r3, #24
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2343      	movs	r3, #67	; 0x43
 800d7ba:	6979      	ldr	r1, [r7, #20]
 800d7bc:	f7fe fcf6 	bl	800c1ac <udp_sendto_if>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d7c4:	6978      	ldr	r0, [r7, #20]
 800d7c6:	f7f8 fd69 	bl	800629c <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 800d7ca:	4821      	ldr	r0, [pc, #132]	; (800d850 <dhcp_renew+0x154>)
 800d7cc:	f004 f802 	bl	80117d4 <puts>
 800d7d0:	e004      	b.n	800d7dc <dhcp_renew+0xe0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 800d7d2:	4820      	ldr	r0, [pc, #128]	; (800d854 <dhcp_renew+0x158>)
 800d7d4:	f003 fffe 	bl	80117d4 <puts>
    result = ERR_MEM;
 800d7d8:	23ff      	movs	r3, #255	; 0xff
 800d7da:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	799b      	ldrb	r3, [r3, #6]
 800d7e0:	2bff      	cmp	r3, #255	; 0xff
 800d7e2:	d005      	beq.n	800d7f0 <dhcp_renew+0xf4>
    dhcp->tries++;
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	799b      	ldrb	r3, [r3, #6]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	799b      	ldrb	r3, [r3, #6]
 800d7f4:	2b09      	cmp	r3, #9
 800d7f6:	d80a      	bhi.n	800d80e <dhcp_renew+0x112>
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	799b      	ldrb	r3, [r3, #6]
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	461a      	mov	r2, r3
 800d800:	0152      	lsls	r2, r2, #5
 800d802:	1ad2      	subs	r2, r2, r3
 800d804:	0092      	lsls	r2, r2, #2
 800d806:	4413      	add	r3, r2
 800d808:	011b      	lsls	r3, r3, #4
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	e001      	b.n	800d812 <dhcp_renew+0x116>
 800d80e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d812:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d814:	89fb      	ldrh	r3, [r7, #14]
 800d816:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d81a:	4a0f      	ldr	r2, [pc, #60]	; (800d858 <dhcp_renew+0x15c>)
 800d81c:	fb82 1203 	smull	r1, r2, r2, r3
 800d820:	1152      	asrs	r2, r2, #5
 800d822:	17db      	asrs	r3, r3, #31
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	b29a      	uxth	r2, r3
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 800d82c:	89fb      	ldrh	r3, [r7, #14]
 800d82e:	4619      	mov	r1, r3
 800d830:	480a      	ldr	r0, [pc, #40]	; (800d85c <dhcp_renew+0x160>)
 800d832:	f003 ff47 	bl	80116c4 <iprintf>
  return result;
 800d836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	08015ab8 	.word	0x08015ab8
 800d848:	20000014 	.word	0x20000014
 800d84c:	20000114 	.word	0x20000114
 800d850:	08015ac8 	.word	0x08015ac8
 800d854:	08015ae0 	.word	0x08015ae0
 800d858:	10624dd3 	.word	0x10624dd3
 800d85c:	08015b0c 	.word	0x08015b0c

0800d860 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08a      	sub	sp, #40	; 0x28
 800d864:	af02      	add	r7, sp, #8
 800d866:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 800d86e:	484d      	ldr	r0, [pc, #308]	; (800d9a4 <dhcp_rebind+0x144>)
 800d870:	f003 ffb0 	bl	80117d4 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d874:	2104      	movs	r1, #4
 800d876:	69b8      	ldr	r0, [r7, #24]
 800d878:	f000 fa1a 	bl	800dcb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d87c:	f107 030c 	add.w	r3, r7, #12
 800d880:	2203      	movs	r2, #3
 800d882:	69b9      	ldr	r1, [r7, #24]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 ff2d 	bl	800e6e4 <dhcp_create_msg>
 800d88a:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d04f      	beq.n	800d932 <dhcp_rebind+0xd2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d898:	89b8      	ldrh	r0, [r7, #12]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	2239      	movs	r2, #57	; 0x39
 800d8a4:	f000 fa1e 	bl	800dce4 <dhcp_option>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d8ac:	89b8      	ldrh	r0, [r7, #12]
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	f000 fa6d 	bl	800dd98 <dhcp_option_short>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d8c2:	89b8      	ldrh	r0, [r7, #12]
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	2237      	movs	r2, #55	; 0x37
 800d8ce:	f000 fa09 	bl	800dce4 <dhcp_option>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	77bb      	strb	r3, [r7, #30]
 800d8da:	e00e      	b.n	800d8fa <dhcp_rebind+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d8dc:	89b8      	ldrh	r0, [r7, #12]
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d8e4:	7fbb      	ldrb	r3, [r7, #30]
 800d8e6:	4a30      	ldr	r2, [pc, #192]	; (800d9a8 <dhcp_rebind+0x148>)
 800d8e8:	5cd3      	ldrb	r3, [r2, r3]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f000 fa2e 	bl	800dd4c <dhcp_option_byte>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d8f4:	7fbb      	ldrb	r3, [r7, #30]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	77bb      	strb	r3, [r7, #30]
 800d8fa:	7fbb      	ldrb	r3, [r7, #30]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d9ed      	bls.n	800d8dc <dhcp_rebind+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d900:	89b8      	ldrh	r0, [r7, #12]
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	33f0      	adds	r3, #240	; 0xf0
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	4619      	mov	r1, r3
 800d90a:	f000 ffcf 	bl	800e8ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d90e:	4b27      	ldr	r3, [pc, #156]	; (800d9ac <dhcp_rebind+0x14c>)
 800d910:	6818      	ldr	r0, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	2343      	movs	r3, #67	; 0x43
 800d918:	4a25      	ldr	r2, [pc, #148]	; (800d9b0 <dhcp_rebind+0x150>)
 800d91a:	6979      	ldr	r1, [r7, #20]
 800d91c:	f7fe fc46 	bl	800c1ac <udp_sendto_if>
 800d920:	4603      	mov	r3, r0
 800d922:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d924:	6978      	ldr	r0, [r7, #20]
 800d926:	f7f8 fcb9 	bl	800629c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 800d92a:	4822      	ldr	r0, [pc, #136]	; (800d9b4 <dhcp_rebind+0x154>)
 800d92c:	f003 ff52 	bl	80117d4 <puts>
 800d930:	e004      	b.n	800d93c <dhcp_rebind+0xdc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 800d932:	4821      	ldr	r0, [pc, #132]	; (800d9b8 <dhcp_rebind+0x158>)
 800d934:	f003 ff4e 	bl	80117d4 <puts>
    result = ERR_MEM;
 800d938:	23ff      	movs	r3, #255	; 0xff
 800d93a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	799b      	ldrb	r3, [r3, #6]
 800d940:	2bff      	cmp	r3, #255	; 0xff
 800d942:	d005      	beq.n	800d950 <dhcp_rebind+0xf0>
    dhcp->tries++;
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	799b      	ldrb	r3, [r3, #6]
 800d948:	3301      	adds	r3, #1
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	799b      	ldrb	r3, [r3, #6]
 800d954:	2b09      	cmp	r3, #9
 800d956:	d80a      	bhi.n	800d96e <dhcp_rebind+0x10e>
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	799b      	ldrb	r3, [r3, #6]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	461a      	mov	r2, r3
 800d960:	0152      	lsls	r2, r2, #5
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	0092      	lsls	r2, r2, #2
 800d966:	4413      	add	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	e001      	b.n	800d972 <dhcp_rebind+0x112>
 800d96e:	f242 7310 	movw	r3, #10000	; 0x2710
 800d972:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d974:	89fb      	ldrh	r3, [r7, #14]
 800d976:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d97a:	4a10      	ldr	r2, [pc, #64]	; (800d9bc <dhcp_rebind+0x15c>)
 800d97c:	fb82 1203 	smull	r1, r2, r2, r3
 800d980:	1152      	asrs	r2, r2, #5
 800d982:	17db      	asrs	r3, r3, #31
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	b29a      	uxth	r2, r3
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 800d98c:	89fb      	ldrh	r3, [r7, #14]
 800d98e:	4619      	mov	r1, r3
 800d990:	480b      	ldr	r0, [pc, #44]	; (800d9c0 <dhcp_rebind+0x160>)
 800d992:	f003 fe97 	bl	80116c4 <iprintf>
  return result;
 800d996:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3720      	adds	r7, #32
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	08015b3c 	.word	0x08015b3c
 800d9a8:	20000014 	.word	0x20000014
 800d9ac:	20000114 	.word	0x20000114
 800d9b0:	0801767c 	.word	0x0801767c
 800d9b4:	08015b4c 	.word	0x08015b4c
 800d9b8:	08015b64 	.word	0x08015b64
 800d9bc:	10624dd3 	.word	0x10624dd3
 800d9c0:	08015b94 	.word	0x08015b94

0800d9c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d9c4:	b5b0      	push	{r4, r5, r7, lr}
 800d9c6:	b08a      	sub	sp, #40	; 0x28
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 800d9d2:	485a      	ldr	r0, [pc, #360]	; (800db3c <dhcp_reboot+0x178>)
 800d9d4:	f003 fefe 	bl	80117d4 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d9d8:	2103      	movs	r1, #3
 800d9da:	69b8      	ldr	r0, [r7, #24]
 800d9dc:	f000 f968 	bl	800dcb0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d9e0:	f107 030c 	add.w	r3, r7, #12
 800d9e4:	2203      	movs	r2, #3
 800d9e6:	69b9      	ldr	r1, [r7, #24]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fe7b 	bl	800e6e4 <dhcp_create_msg>
 800d9ee:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d069      	beq.n	800daca <dhcp_reboot+0x106>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d9fc:	89b8      	ldrh	r0, [r7, #12]
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800da04:	2302      	movs	r3, #2
 800da06:	2239      	movs	r2, #57	; 0x39
 800da08:	f000 f96c 	bl	800dce4 <dhcp_option>
 800da0c:	4603      	mov	r3, r0
 800da0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800da10:	89b8      	ldrh	r0, [r7, #12]
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	33f0      	adds	r3, #240	; 0xf0
 800da16:	f44f 7210 	mov.w	r2, #576	; 0x240
 800da1a:	4619      	mov	r1, r3
 800da1c:	f000 f9bc 	bl	800dd98 <dhcp_option_short>
 800da20:	4603      	mov	r3, r0
 800da22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800da24:	89b8      	ldrh	r0, [r7, #12]
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800da2c:	2304      	movs	r3, #4
 800da2e:	2232      	movs	r2, #50	; 0x32
 800da30:	f000 f958 	bl	800dce4 <dhcp_option>
 800da34:	4603      	mov	r3, r0
 800da36:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800da38:	89bc      	ldrh	r4, [r7, #12]
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	4618      	mov	r0, r3
 800da46:	f7f7 f819 	bl	8004a7c <lwip_htonl>
 800da4a:	4603      	mov	r3, r0
 800da4c:	461a      	mov	r2, r3
 800da4e:	4629      	mov	r1, r5
 800da50:	4620      	mov	r0, r4
 800da52:	f000 f9d3 	bl	800ddfc <dhcp_option_long>
 800da56:	4603      	mov	r3, r0
 800da58:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800da5a:	89b8      	ldrh	r0, [r7, #12]
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800da62:	2303      	movs	r3, #3
 800da64:	2237      	movs	r2, #55	; 0x37
 800da66:	f000 f93d 	bl	800dce4 <dhcp_option>
 800da6a:	4603      	mov	r3, r0
 800da6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800da6e:	2300      	movs	r3, #0
 800da70:	77bb      	strb	r3, [r7, #30]
 800da72:	e00e      	b.n	800da92 <dhcp_reboot+0xce>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800da74:	89b8      	ldrh	r0, [r7, #12]
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800da7c:	7fbb      	ldrb	r3, [r7, #30]
 800da7e:	4a30      	ldr	r2, [pc, #192]	; (800db40 <dhcp_reboot+0x17c>)
 800da80:	5cd3      	ldrb	r3, [r2, r3]
 800da82:	461a      	mov	r2, r3
 800da84:	f000 f962 	bl	800dd4c <dhcp_option_byte>
 800da88:	4603      	mov	r3, r0
 800da8a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800da8c:	7fbb      	ldrb	r3, [r7, #30]
 800da8e:	3301      	adds	r3, #1
 800da90:	77bb      	strb	r3, [r7, #30]
 800da92:	7fbb      	ldrb	r3, [r7, #30]
 800da94:	2b02      	cmp	r3, #2
 800da96:	d9ed      	bls.n	800da74 <dhcp_reboot+0xb0>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800da98:	89b8      	ldrh	r0, [r7, #12]
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	33f0      	adds	r3, #240	; 0xf0
 800da9e:	697a      	ldr	r2, [r7, #20]
 800daa0:	4619      	mov	r1, r3
 800daa2:	f000 ff03 	bl	800e8ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800daa6:	4b27      	ldr	r3, [pc, #156]	; (800db44 <dhcp_reboot+0x180>)
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	2343      	movs	r3, #67	; 0x43
 800dab0:	4a25      	ldr	r2, [pc, #148]	; (800db48 <dhcp_reboot+0x184>)
 800dab2:	6979      	ldr	r1, [r7, #20]
 800dab4:	f7fe fb7a 	bl	800c1ac <udp_sendto_if>
 800dab8:	4603      	mov	r3, r0
 800daba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dabc:	6978      	ldr	r0, [r7, #20]
 800dabe:	f7f8 fbed 	bl	800629c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 800dac2:	4822      	ldr	r0, [pc, #136]	; (800db4c <dhcp_reboot+0x188>)
 800dac4:	f003 fe86 	bl	80117d4 <puts>
 800dac8:	e004      	b.n	800dad4 <dhcp_reboot+0x110>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 800daca:	4821      	ldr	r0, [pc, #132]	; (800db50 <dhcp_reboot+0x18c>)
 800dacc:	f003 fe82 	bl	80117d4 <puts>
    result = ERR_MEM;
 800dad0:	23ff      	movs	r3, #255	; 0xff
 800dad2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	799b      	ldrb	r3, [r3, #6]
 800dad8:	2bff      	cmp	r3, #255	; 0xff
 800dada:	d005      	beq.n	800dae8 <dhcp_reboot+0x124>
    dhcp->tries++;
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	799b      	ldrb	r3, [r3, #6]
 800dae0:	3301      	adds	r3, #1
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	799b      	ldrb	r3, [r3, #6]
 800daec:	2b09      	cmp	r3, #9
 800daee:	d80a      	bhi.n	800db06 <dhcp_reboot+0x142>
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	799b      	ldrb	r3, [r3, #6]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	461a      	mov	r2, r3
 800daf8:	0152      	lsls	r2, r2, #5
 800dafa:	1ad2      	subs	r2, r2, r3
 800dafc:	0092      	lsls	r2, r2, #2
 800dafe:	4413      	add	r3, r2
 800db00:	00db      	lsls	r3, r3, #3
 800db02:	b29b      	uxth	r3, r3
 800db04:	e001      	b.n	800db0a <dhcp_reboot+0x146>
 800db06:	f242 7310 	movw	r3, #10000	; 0x2710
 800db0a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800db0c:	89fb      	ldrh	r3, [r7, #14]
 800db0e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800db12:	4a10      	ldr	r2, [pc, #64]	; (800db54 <dhcp_reboot+0x190>)
 800db14:	fb82 1203 	smull	r1, r2, r2, r3
 800db18:	1152      	asrs	r2, r2, #5
 800db1a:	17db      	asrs	r3, r3, #31
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	b29a      	uxth	r2, r3
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 800db24:	89fb      	ldrh	r3, [r7, #14]
 800db26:	4619      	mov	r1, r3
 800db28:	480b      	ldr	r0, [pc, #44]	; (800db58 <dhcp_reboot+0x194>)
 800db2a:	f003 fdcb 	bl	80116c4 <iprintf>
  return result;
 800db2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3720      	adds	r7, #32
 800db36:	46bd      	mov	sp, r7
 800db38:	bdb0      	pop	{r4, r5, r7, pc}
 800db3a:	bf00      	nop
 800db3c:	08015bc4 	.word	0x08015bc4
 800db40:	20000014 	.word	0x20000014
 800db44:	20000114 	.word	0x20000114
 800db48:	0801767c 	.word	0x0801767c
 800db4c:	08015bd4 	.word	0x08015bd4
 800db50:	08015bec 	.word	0x08015bec
 800db54:	10624dd3 	.word	0x10624dd3
 800db58:	08015c1c 	.word	0x08015c1c

0800db5c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800db5c:	b5b0      	push	{r4, r5, r7, lr}
 800db5e:	b08a      	sub	sp, #40	; 0x28
 800db60:	af02      	add	r7, sp, #8
 800db62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 800db6a:	484c      	ldr	r0, [pc, #304]	; (800dc9c <dhcp_release_and_stop+0x140>)
 800db6c:	f003 fe32 	bl	80117d4 <puts>
  if (dhcp == NULL) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 808b 	beq.w	800dc8e <dhcp_release_and_stop+0x132>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	795b      	ldrb	r3, [r3, #5]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 8088 	beq.w	800dc92 <dhcp_release_and_stop+0x136>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2200      	movs	r2, #0
 800db8c:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	2200      	movs	r2, #0
 800db92:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	2200      	movs	r2, #0
 800db98:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	2200      	movs	r2, #0
 800db9e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	2200      	movs	r2, #0
 800dba4:	631a      	str	r2, [r3, #48]	; 0x30
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	62da      	str	r2, [r3, #44]	; 0x2c
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	829a      	strh	r2, [r3, #20]
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	8a9a      	ldrh	r2, [r3, #20]
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	825a      	strh	r2, [r3, #18]
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	8a5a      	ldrh	r2, [r3, #18]
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	821a      	strh	r2, [r3, #16]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	8a1a      	ldrh	r2, [r3, #16]
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fe97 	bl	800e908 <dhcp_supplied_address>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d042      	beq.n	800dc66 <dhcp_release_and_stop+0x10a>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800dbe0:	f107 030e 	add.w	r3, r7, #14
 800dbe4:	2207      	movs	r2, #7
 800dbe6:	69f9      	ldr	r1, [r7, #28]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fd7b 	bl	800e6e4 <dhcp_create_msg>
 800dbee:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d034      	beq.n	800dc60 <dhcp_release_and_stop+0x104>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800dbfc:	89f8      	ldrh	r0, [r7, #14]
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dc04:	2304      	movs	r3, #4
 800dc06:	2236      	movs	r2, #54	; 0x36
 800dc08:	f000 f86c 	bl	800dce4 <dhcp_option>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800dc10:	89fc      	ldrh	r4, [r7, #14]
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7f6 ff2e 	bl	8004a7c <lwip_htonl>
 800dc20:	4603      	mov	r3, r0
 800dc22:	461a      	mov	r2, r3
 800dc24:	4629      	mov	r1, r5
 800dc26:	4620      	mov	r0, r4
 800dc28:	f000 f8e8 	bl	800ddfc <dhcp_option_long>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dc30:	89f8      	ldrh	r0, [r7, #14]
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	33f0      	adds	r3, #240	; 0xf0
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f000 fe37 	bl	800e8ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dc3e:	4b18      	ldr	r3, [pc, #96]	; (800dca0 <dhcp_release_and_stop+0x144>)
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	f107 0210 	add.w	r2, r7, #16
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	2343      	movs	r3, #67	; 0x43
 800dc4c:	69b9      	ldr	r1, [r7, #24]
 800dc4e:	f7fe faad 	bl	800c1ac <udp_sendto_if>
      pbuf_free(p_out);
 800dc52:	69b8      	ldr	r0, [r7, #24]
 800dc54:	f7f8 fb22 	bl	800629c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 800dc58:	4812      	ldr	r0, [pc, #72]	; (800dca4 <dhcp_release_and_stop+0x148>)
 800dc5a:	f003 fdbb 	bl	80117d4 <puts>
 800dc5e:	e002      	b.n	800dc66 <dhcp_release_and_stop+0x10a>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 800dc60:	4811      	ldr	r0, [pc, #68]	; (800dca8 <dhcp_release_and_stop+0x14c>)
 800dc62:	f003 fdb7 	bl	80117d4 <puts>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800dc66:	4b11      	ldr	r3, [pc, #68]	; (800dcac <dhcp_release_and_stop+0x150>)
 800dc68:	4a10      	ldr	r2, [pc, #64]	; (800dcac <dhcp_release_and_stop+0x150>)
 800dc6a:	4910      	ldr	r1, [pc, #64]	; (800dcac <dhcp_release_and_stop+0x150>)
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f7 fe45 	bl	80058fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800dc72:	2100      	movs	r1, #0
 800dc74:	69f8      	ldr	r0, [r7, #28]
 800dc76:	f000 f81b 	bl	800dcb0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	791b      	ldrb	r3, [r3, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d008      	beq.n	800dc94 <dhcp_release_and_stop+0x138>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800dc82:	f7fe fddf 	bl	800c844 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	711a      	strb	r2, [r3, #4]
 800dc8c:	e002      	b.n	800dc94 <dhcp_release_and_stop+0x138>
    return;
 800dc8e:	bf00      	nop
 800dc90:	e000      	b.n	800dc94 <dhcp_release_and_stop+0x138>
    return;
 800dc92:	bf00      	nop
  }
}
 800dc94:	3720      	adds	r7, #32
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bdb0      	pop	{r4, r5, r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	08015c4c 	.word	0x08015c4c
 800dca0:	20000114 	.word	0x20000114
 800dca4:	08015c64 	.word	0x08015c64
 800dca8:	08015c8c 	.word	0x08015c8c
 800dcac:	08017678 	.word	0x08017678

0800dcb0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	795b      	ldrb	r3, [r3, #5]
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d008      	beq.n	800dcd8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	78fa      	ldrb	r2, [r7, #3]
 800dcca:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	811a      	strh	r2, [r3, #8]
  }
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6039      	str	r1, [r7, #0]
 800dcec:	4611      	mov	r1, r2
 800dcee:	461a      	mov	r2, r3
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	80fb      	strh	r3, [r7, #6]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	717b      	strb	r3, [r7, #5]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800dcfc:	88fa      	ldrh	r2, [r7, #6]
 800dcfe:	793b      	ldrb	r3, [r7, #4]
 800dd00:	4413      	add	r3, r2
 800dd02:	3302      	adds	r3, #2
 800dd04:	2b44      	cmp	r3, #68	; 0x44
 800dd06:	d906      	bls.n	800dd16 <dhcp_option+0x32>
 800dd08:	4b0d      	ldr	r3, [pc, #52]	; (800dd40 <dhcp_option+0x5c>)
 800dd0a:	f240 529a 	movw	r2, #1434	; 0x59a
 800dd0e:	490d      	ldr	r1, [pc, #52]	; (800dd44 <dhcp_option+0x60>)
 800dd10:	480d      	ldr	r0, [pc, #52]	; (800dd48 <dhcp_option+0x64>)
 800dd12:	f003 fcd7 	bl	80116c4 <iprintf>
  options[options_out_len++] = option_type;
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	80fa      	strh	r2, [r7, #6]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	4413      	add	r3, r2
 800dd22:	797a      	ldrb	r2, [r7, #5]
 800dd24:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800dd26:	88fb      	ldrh	r3, [r7, #6]
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	80fa      	strh	r2, [r7, #6]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	4413      	add	r3, r2
 800dd32:	793a      	ldrb	r2, [r7, #4]
 800dd34:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800dd36:	88fb      	ldrh	r3, [r7, #6]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	080150dc 	.word	0x080150dc
 800dd44:	08015cbc 	.word	0x08015cbc
 800dd48:	0801513c 	.word	0x0801513c

0800dd4c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	6039      	str	r1, [r7, #0]
 800dd56:	80fb      	strh	r3, [r7, #6]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800dd5c:	88fb      	ldrh	r3, [r7, #6]
 800dd5e:	2b43      	cmp	r3, #67	; 0x43
 800dd60:	d906      	bls.n	800dd70 <dhcp_option_byte+0x24>
 800dd62:	4b0a      	ldr	r3, [pc, #40]	; (800dd8c <dhcp_option_byte+0x40>)
 800dd64:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800dd68:	4909      	ldr	r1, [pc, #36]	; (800dd90 <dhcp_option_byte+0x44>)
 800dd6a:	480a      	ldr	r0, [pc, #40]	; (800dd94 <dhcp_option_byte+0x48>)
 800dd6c:	f003 fcaa 	bl	80116c4 <iprintf>
  options[options_out_len++] = value;
 800dd70:	88fb      	ldrh	r3, [r7, #6]
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	80fa      	strh	r2, [r7, #6]
 800dd76:	461a      	mov	r2, r3
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	797a      	ldrb	r2, [r7, #5]
 800dd7e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800dd80:	88fb      	ldrh	r3, [r7, #6]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	080150dc 	.word	0x080150dc
 800dd90:	08015d00 	.word	0x08015d00
 800dd94:	0801513c 	.word	0x0801513c

0800dd98 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	80fb      	strh	r3, [r7, #6]
 800dda4:	4613      	mov	r3, r2
 800dda6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	3302      	adds	r3, #2
 800ddac:	2b44      	cmp	r3, #68	; 0x44
 800ddae:	d906      	bls.n	800ddbe <dhcp_option_short+0x26>
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <dhcp_option_short+0x58>)
 800ddb2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800ddb6:	490f      	ldr	r1, [pc, #60]	; (800ddf4 <dhcp_option_short+0x5c>)
 800ddb8:	480f      	ldr	r0, [pc, #60]	; (800ddf8 <dhcp_option_short+0x60>)
 800ddba:	f003 fc83 	bl	80116c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ddbe:	88bb      	ldrh	r3, [r7, #4]
 800ddc0:	0a1b      	lsrs	r3, r3, #8
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	88fb      	ldrh	r3, [r7, #6]
 800ddc6:	1c59      	adds	r1, r3, #1
 800ddc8:	80f9      	strh	r1, [r7, #6]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	440b      	add	r3, r1
 800ddd0:	b2d2      	uxtb	r2, r2
 800ddd2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800ddd4:	88fb      	ldrh	r3, [r7, #6]
 800ddd6:	1c5a      	adds	r2, r3, #1
 800ddd8:	80fa      	strh	r2, [r7, #6]
 800ddda:	461a      	mov	r2, r3
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	4413      	add	r3, r2
 800dde0:	88ba      	ldrh	r2, [r7, #4]
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800dde6:	88fb      	ldrh	r3, [r7, #6]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	080150dc 	.word	0x080150dc
 800ddf4:	08015d38 	.word	0x08015d38
 800ddf8:	0801513c 	.word	0x0801513c

0800ddfc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	607a      	str	r2, [r7, #4]
 800de08:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800de0a:	89fb      	ldrh	r3, [r7, #14]
 800de0c:	3304      	adds	r3, #4
 800de0e:	2b44      	cmp	r3, #68	; 0x44
 800de10:	d906      	bls.n	800de20 <dhcp_option_long+0x24>
 800de12:	4b19      	ldr	r3, [pc, #100]	; (800de78 <dhcp_option_long+0x7c>)
 800de14:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800de18:	4918      	ldr	r1, [pc, #96]	; (800de7c <dhcp_option_long+0x80>)
 800de1a:	4819      	ldr	r0, [pc, #100]	; (800de80 <dhcp_option_long+0x84>)
 800de1c:	f003 fc52 	bl	80116c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	0e1a      	lsrs	r2, r3, #24
 800de24:	89fb      	ldrh	r3, [r7, #14]
 800de26:	1c59      	adds	r1, r3, #1
 800de28:	81f9      	strh	r1, [r7, #14]
 800de2a:	4619      	mov	r1, r3
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	440b      	add	r3, r1
 800de30:	b2d2      	uxtb	r2, r2
 800de32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	0c1a      	lsrs	r2, r3, #16
 800de38:	89fb      	ldrh	r3, [r7, #14]
 800de3a:	1c59      	adds	r1, r3, #1
 800de3c:	81f9      	strh	r1, [r7, #14]
 800de3e:	4619      	mov	r1, r3
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	440b      	add	r3, r1
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	0a1a      	lsrs	r2, r3, #8
 800de4c:	89fb      	ldrh	r3, [r7, #14]
 800de4e:	1c59      	adds	r1, r3, #1
 800de50:	81f9      	strh	r1, [r7, #14]
 800de52:	4619      	mov	r1, r3
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	440b      	add	r3, r1
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800de5c:	89fb      	ldrh	r3, [r7, #14]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	81fa      	strh	r2, [r7, #14]
 800de62:	461a      	mov	r2, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4413      	add	r3, r2
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800de6e:	89fb      	ldrh	r3, [r7, #14]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	080150dc 	.word	0x080150dc
 800de7c:	08015d74 	.word	0x08015d74
 800de80:	0801513c 	.word	0x0801513c

0800de84 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b090      	sub	sp, #64	; 0x40
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800de96:	2208      	movs	r2, #8
 800de98:	2100      	movs	r1, #0
 800de9a:	48be      	ldr	r0, [pc, #760]	; (800e194 <dhcp_parse_reply+0x310>)
 800de9c:	f003 fc0a 	bl	80116b4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	895b      	ldrh	r3, [r3, #10]
 800dea4:	2b2b      	cmp	r3, #43	; 0x2b
 800dea6:	d802      	bhi.n	800deae <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800dea8:	f06f 0301 	mvn.w	r3, #1
 800deac:	e2bc      	b.n	800e428 <dhcp_parse_reply+0x5a4>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800deb4:	23f0      	movs	r3, #240	; 0xf0
 800deb6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	891b      	ldrh	r3, [r3, #8]
 800debc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800dec2:	e00c      	b.n	800dede <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800dec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec6:	895b      	ldrh	r3, [r3, #10]
 800dec8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded0:	895b      	ldrh	r3, [r3, #10]
 800ded2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800ded8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <dhcp_parse_reply+0x6a>
 800dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee6:	895b      	ldrh	r3, [r3, #10]
 800dee8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800deea:	429a      	cmp	r2, r3
 800deec:	d2ea      	bcs.n	800dec4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800def4:	f06f 0301 	mvn.w	r3, #1
 800def8:	e296      	b.n	800e428 <dhcp_parse_reply+0x5a4>
  }
  offset = options_idx;
 800defa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800defc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800defe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800df00:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800df08:	e23f      	b.n	800e38a <dhcp_parse_reply+0x506>
    u8_t op = options[offset];
 800df0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df0e:	4413      	add	r3, r2
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800df1a:	f04f 33ff 	mov.w	r3, #4294967295
 800df1e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800df20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df22:	3302      	adds	r3, #2
 800df24:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800df26:	8bfa      	ldrh	r2, [r7, #30]
 800df28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d202      	bcs.n	800df34 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800df2e:	f06f 0301 	mvn.w	r3, #1
 800df32:	e279      	b.n	800e428 <dhcp_parse_reply+0x5a4>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800df34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df36:	3301      	adds	r3, #1
 800df38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3a:	8952      	ldrh	r2, [r2, #10]
 800df3c:	4293      	cmp	r3, r2
 800df3e:	da07      	bge.n	800df50 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800df40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df42:	3301      	adds	r3, #1
 800df44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df46:	4413      	add	r3, r2
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df4e:	e00b      	b.n	800df68 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d004      	beq.n	800df62 <dhcp_parse_reply+0xde>
 800df58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	e000      	b.n	800df64 <dhcp_parse_reply+0xe0>
 800df62:	2300      	movs	r3, #0
 800df64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800df68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800df70:	7dfb      	ldrb	r3, [r7, #23]
 800df72:	2b3b      	cmp	r3, #59	; 0x3b
 800df74:	f200 812d 	bhi.w	800e1d2 <dhcp_parse_reply+0x34e>
 800df78:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <dhcp_parse_reply+0xfc>)
 800df7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7e:	bf00      	nop
 800df80:	0800e071 	.word	0x0800e071
 800df84:	0800e081 	.word	0x0800e081
 800df88:	0800e1d3 	.word	0x0800e1d3
 800df8c:	0800e0a3 	.word	0x0800e0a3
 800df90:	0800e1d3 	.word	0x0800e1d3
 800df94:	0800e1d3 	.word	0x0800e1d3
 800df98:	0800e1d3 	.word	0x0800e1d3
 800df9c:	0800e1d3 	.word	0x0800e1d3
 800dfa0:	0800e1d3 	.word	0x0800e1d3
 800dfa4:	0800e1d3 	.word	0x0800e1d3
 800dfa8:	0800e1d3 	.word	0x0800e1d3
 800dfac:	0800e1d3 	.word	0x0800e1d3
 800dfb0:	0800e1d3 	.word	0x0800e1d3
 800dfb4:	0800e1d3 	.word	0x0800e1d3
 800dfb8:	0800e1d3 	.word	0x0800e1d3
 800dfbc:	0800e1d3 	.word	0x0800e1d3
 800dfc0:	0800e1d3 	.word	0x0800e1d3
 800dfc4:	0800e1d3 	.word	0x0800e1d3
 800dfc8:	0800e1d3 	.word	0x0800e1d3
 800dfcc:	0800e1d3 	.word	0x0800e1d3
 800dfd0:	0800e1d3 	.word	0x0800e1d3
 800dfd4:	0800e1d3 	.word	0x0800e1d3
 800dfd8:	0800e1d3 	.word	0x0800e1d3
 800dfdc:	0800e1d3 	.word	0x0800e1d3
 800dfe0:	0800e1d3 	.word	0x0800e1d3
 800dfe4:	0800e1d3 	.word	0x0800e1d3
 800dfe8:	0800e1d3 	.word	0x0800e1d3
 800dfec:	0800e1d3 	.word	0x0800e1d3
 800dff0:	0800e1d3 	.word	0x0800e1d3
 800dff4:	0800e1d3 	.word	0x0800e1d3
 800dff8:	0800e1d3 	.word	0x0800e1d3
 800dffc:	0800e1d3 	.word	0x0800e1d3
 800e000:	0800e1d3 	.word	0x0800e1d3
 800e004:	0800e1d3 	.word	0x0800e1d3
 800e008:	0800e1d3 	.word	0x0800e1d3
 800e00c:	0800e1d3 	.word	0x0800e1d3
 800e010:	0800e1d3 	.word	0x0800e1d3
 800e014:	0800e1d3 	.word	0x0800e1d3
 800e018:	0800e1d3 	.word	0x0800e1d3
 800e01c:	0800e1d3 	.word	0x0800e1d3
 800e020:	0800e1d3 	.word	0x0800e1d3
 800e024:	0800e1d3 	.word	0x0800e1d3
 800e028:	0800e1d3 	.word	0x0800e1d3
 800e02c:	0800e1d3 	.word	0x0800e1d3
 800e030:	0800e1d3 	.word	0x0800e1d3
 800e034:	0800e1d3 	.word	0x0800e1d3
 800e038:	0800e1d3 	.word	0x0800e1d3
 800e03c:	0800e1d3 	.word	0x0800e1d3
 800e040:	0800e1d3 	.word	0x0800e1d3
 800e044:	0800e1d3 	.word	0x0800e1d3
 800e048:	0800e1d3 	.word	0x0800e1d3
 800e04c:	0800e0cf 	.word	0x0800e0cf
 800e050:	0800e0f1 	.word	0x0800e0f1
 800e054:	0800e12d 	.word	0x0800e12d
 800e058:	0800e14f 	.word	0x0800e14f
 800e05c:	0800e1d3 	.word	0x0800e1d3
 800e060:	0800e1d3 	.word	0x0800e1d3
 800e064:	0800e1d3 	.word	0x0800e1d3
 800e068:	0800e171 	.word	0x0800e171
 800e06c:	0800e1b1 	.word	0x0800e1b1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e07a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800e07e:	e0b1      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e084:	2b04      	cmp	r3, #4
 800e086:	d009      	beq.n	800e09c <dhcp_parse_reply+0x218>
 800e088:	4b43      	ldr	r3, [pc, #268]	; (800e198 <dhcp_parse_reply+0x314>)
 800e08a:	f240 622e 	movw	r2, #1582	; 0x62e
 800e08e:	4943      	ldr	r1, [pc, #268]	; (800e19c <dhcp_parse_reply+0x318>)
 800e090:	4843      	ldr	r0, [pc, #268]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e092:	f003 fb17 	bl	80116c4 <iprintf>
 800e096:	f06f 0305 	mvn.w	r3, #5
 800e09a:	e1c5      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e09c:	2306      	movs	r3, #6
 800e09e:	623b      	str	r3, [r7, #32]
        break;
 800e0a0:	e0a0      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800e0a2:	2304      	movs	r3, #4
 800e0a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e0a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e0ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d209      	bcs.n	800e0c8 <dhcp_parse_reply+0x244>
 800e0b4:	4b38      	ldr	r3, [pc, #224]	; (800e198 <dhcp_parse_reply+0x314>)
 800e0b6:	f240 6233 	movw	r2, #1587	; 0x633
 800e0ba:	493a      	ldr	r1, [pc, #232]	; (800e1a4 <dhcp_parse_reply+0x320>)
 800e0bc:	4838      	ldr	r0, [pc, #224]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e0be:	f003 fb01 	bl	80116c4 <iprintf>
 800e0c2:	f06f 0305 	mvn.w	r3, #5
 800e0c6:	e1af      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e0c8:	2307      	movs	r3, #7
 800e0ca:	623b      	str	r3, [r7, #32]
        break;
 800e0cc:	e08a      	b.n	800e1e4 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e0ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	d009      	beq.n	800e0ea <dhcp_parse_reply+0x266>
 800e0d6:	4b30      	ldr	r3, [pc, #192]	; (800e198 <dhcp_parse_reply+0x314>)
 800e0d8:	f240 6241 	movw	r2, #1601	; 0x641
 800e0dc:	492f      	ldr	r1, [pc, #188]	; (800e19c <dhcp_parse_reply+0x318>)
 800e0de:	4830      	ldr	r0, [pc, #192]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e0e0:	f003 faf0 	bl	80116c4 <iprintf>
 800e0e4:	f06f 0305 	mvn.w	r3, #5
 800e0e8:	e19e      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	623b      	str	r3, [r7, #32]
        break;
 800e0ee:	e079      	b.n	800e1e4 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d009      	beq.n	800e10c <dhcp_parse_reply+0x288>
 800e0f8:	4b27      	ldr	r3, [pc, #156]	; (800e198 <dhcp_parse_reply+0x314>)
 800e0fa:	f240 624f 	movw	r2, #1615	; 0x64f
 800e0fe:	492a      	ldr	r1, [pc, #168]	; (800e1a8 <dhcp_parse_reply+0x324>)
 800e100:	4827      	ldr	r0, [pc, #156]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e102:	f003 fadf 	bl	80116c4 <iprintf>
 800e106:	f06f 0305 	mvn.w	r3, #5
 800e10a:	e18d      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e10c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e10e:	2bf0      	cmp	r3, #240	; 0xf0
 800e110:	d009      	beq.n	800e126 <dhcp_parse_reply+0x2a2>
 800e112:	4b21      	ldr	r3, [pc, #132]	; (800e198 <dhcp_parse_reply+0x314>)
 800e114:	f240 6251 	movw	r2, #1617	; 0x651
 800e118:	4924      	ldr	r1, [pc, #144]	; (800e1ac <dhcp_parse_reply+0x328>)
 800e11a:	4821      	ldr	r0, [pc, #132]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e11c:	f003 fad2 	bl	80116c4 <iprintf>
 800e120:	f06f 0305 	mvn.w	r3, #5
 800e124:	e180      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e126:	2300      	movs	r3, #0
 800e128:	623b      	str	r3, [r7, #32]
        break;
 800e12a:	e05b      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e130:	2b01      	cmp	r3, #1
 800e132:	d009      	beq.n	800e148 <dhcp_parse_reply+0x2c4>
 800e134:	4b18      	ldr	r3, [pc, #96]	; (800e198 <dhcp_parse_reply+0x314>)
 800e136:	f240 6255 	movw	r2, #1621	; 0x655
 800e13a:	491b      	ldr	r1, [pc, #108]	; (800e1a8 <dhcp_parse_reply+0x324>)
 800e13c:	4818      	ldr	r0, [pc, #96]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e13e:	f003 fac1 	bl	80116c4 <iprintf>
 800e142:	f06f 0305 	mvn.w	r3, #5
 800e146:	e16f      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e148:	2301      	movs	r3, #1
 800e14a:	623b      	str	r3, [r7, #32]
        break;
 800e14c:	e04a      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e14e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e152:	2b04      	cmp	r3, #4
 800e154:	d009      	beq.n	800e16a <dhcp_parse_reply+0x2e6>
 800e156:	4b10      	ldr	r3, [pc, #64]	; (800e198 <dhcp_parse_reply+0x314>)
 800e158:	f240 6259 	movw	r2, #1625	; 0x659
 800e15c:	490f      	ldr	r1, [pc, #60]	; (800e19c <dhcp_parse_reply+0x318>)
 800e15e:	4810      	ldr	r0, [pc, #64]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e160:	f003 fab0 	bl	80116c4 <iprintf>
 800e164:	f06f 0305 	mvn.w	r3, #5
 800e168:	e15e      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e16a:	2302      	movs	r3, #2
 800e16c:	623b      	str	r3, [r7, #32]
        break;
 800e16e:	e039      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e174:	2b04      	cmp	r3, #4
 800e176:	d009      	beq.n	800e18c <dhcp_parse_reply+0x308>
 800e178:	4b07      	ldr	r3, [pc, #28]	; (800e198 <dhcp_parse_reply+0x314>)
 800e17a:	f240 625d 	movw	r2, #1629	; 0x65d
 800e17e:	4907      	ldr	r1, [pc, #28]	; (800e19c <dhcp_parse_reply+0x318>)
 800e180:	4807      	ldr	r0, [pc, #28]	; (800e1a0 <dhcp_parse_reply+0x31c>)
 800e182:	f003 fa9f 	bl	80116c4 <iprintf>
 800e186:	f06f 0305 	mvn.w	r3, #5
 800e18a:	e14d      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_T1;
 800e18c:	2304      	movs	r3, #4
 800e18e:	623b      	str	r3, [r7, #32]
        break;
 800e190:	e028      	b.n	800e1e4 <dhcp_parse_reply+0x360>
 800e192:	bf00      	nop
 800e194:	200069a8 	.word	0x200069a8
 800e198:	080150dc 	.word	0x080150dc
 800e19c:	08015db0 	.word	0x08015db0
 800e1a0:	0801513c 	.word	0x0801513c
 800e1a4:	08015dbc 	.word	0x08015dbc
 800e1a8:	08015dd0 	.word	0x08015dd0
 800e1ac:	08015ddc 	.word	0x08015ddc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d009      	beq.n	800e1cc <dhcp_parse_reply+0x348>
 800e1b8:	4b9d      	ldr	r3, [pc, #628]	; (800e430 <dhcp_parse_reply+0x5ac>)
 800e1ba:	f240 6261 	movw	r2, #1633	; 0x661
 800e1be:	499d      	ldr	r1, [pc, #628]	; (800e434 <dhcp_parse_reply+0x5b0>)
 800e1c0:	489d      	ldr	r0, [pc, #628]	; (800e438 <dhcp_parse_reply+0x5b4>)
 800e1c2:	f003 fa7f 	bl	80116c4 <iprintf>
 800e1c6:	f06f 0305 	mvn.w	r3, #5
 800e1ca:	e12d      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        decode_idx = DHCP_OPTION_IDX_T2;
 800e1cc:	2305      	movs	r3, #5
 800e1ce:	623b      	str	r3, [r7, #32]
        break;
 800e1d0:	e008      	b.n	800e1e4 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	4619      	mov	r1, r3
 800e1dc:	4897      	ldr	r0, [pc, #604]	; (800e43c <dhcp_parse_reply+0x5b8>)
 800e1de:	f003 fa71 	bl	80116c4 <iprintf>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800e1e2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <dhcp_parse_reply+0x36e>
      offset++;
 800e1ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e1f0:	e0a1      	b.n	800e336 <dhcp_parse_reply+0x4b2>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800e1f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f8:	4413      	add	r3, r2
 800e1fa:	3302      	adds	r3, #2
 800e1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e200:	db02      	blt.n	800e208 <dhcp_parse_reply+0x384>
        /* overflow */
        return ERR_BUF;
 800e202:	f06f 0301 	mvn.w	r3, #1
 800e206:	e10f      	b.n	800e428 <dhcp_parse_reply+0x5a4>
      }
      offset = (u16_t)(offset + len + 2);
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e210:	4413      	add	r3, r2
 800e212:	b29b      	uxth	r3, r3
 800e214:	3302      	adds	r3, #2
 800e216:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800e218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f000 808a 	beq.w	800e336 <dhcp_parse_reply+0x4b2>
        u32_t value = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	db02      	blt.n	800e232 <dhcp_parse_reply+0x3ae>
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	2b07      	cmp	r3, #7
 800e230:	dd06      	ble.n	800e240 <dhcp_parse_reply+0x3bc>
 800e232:	4b7f      	ldr	r3, [pc, #508]	; (800e430 <dhcp_parse_reply+0x5ac>)
 800e234:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800e238:	4981      	ldr	r1, [pc, #516]	; (800e440 <dhcp_parse_reply+0x5bc>)
 800e23a:	487f      	ldr	r0, [pc, #508]	; (800e438 <dhcp_parse_reply+0x5b4>)
 800e23c:	f003 fa42 	bl	80116c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e240:	4a80      	ldr	r2, [pc, #512]	; (800e444 <dhcp_parse_reply+0x5c0>)
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	4413      	add	r3, r2
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d174      	bne.n	800e336 <dhcp_parse_reply+0x4b2>
          copy_len = LWIP_MIN(decode_len, 4);
 800e24c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e250:	2b04      	cmp	r3, #4
 800e252:	bf28      	it	cs
 800e254:	2304      	movcs	r3, #4
 800e256:	b2db      	uxtb	r3, r3
 800e258:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e25a:	8bfb      	ldrh	r3, [r7, #30]
 800e25c:	8aba      	ldrh	r2, [r7, #20]
 800e25e:	f107 0108 	add.w	r1, r7, #8
 800e262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e264:	f7f8 fa40 	bl	80066e8 <pbuf_copy_partial>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	8abb      	ldrh	r3, [r7, #20]
 800e26e:	4293      	cmp	r3, r2
 800e270:	d002      	beq.n	800e278 <dhcp_parse_reply+0x3f4>
            return ERR_BUF;
 800e272:	f06f 0301 	mvn.w	r3, #1
 800e276:	e0d7      	b.n	800e428 <dhcp_parse_reply+0x5a4>
          }
          if (decode_len > 4) {
 800e278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e27c:	2b04      	cmp	r3, #4
 800e27e:	d933      	bls.n	800e2e8 <dhcp_parse_reply+0x464>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e284:	f003 0303 	and.w	r3, r3, #3
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d009      	beq.n	800e2a2 <dhcp_parse_reply+0x41e>
 800e28e:	4b68      	ldr	r3, [pc, #416]	; (800e430 <dhcp_parse_reply+0x5ac>)
 800e290:	f240 6281 	movw	r2, #1665	; 0x681
 800e294:	496c      	ldr	r1, [pc, #432]	; (800e448 <dhcp_parse_reply+0x5c4>)
 800e296:	4868      	ldr	r0, [pc, #416]	; (800e438 <dhcp_parse_reply+0x5b4>)
 800e298:	f003 fa14 	bl	80116c4 <iprintf>
 800e29c:	f06f 0305 	mvn.w	r3, #5
 800e2a0:	e0c2      	b.n	800e428 <dhcp_parse_reply+0x5a4>
            dhcp_got_option(dhcp, decode_idx);
 800e2a2:	4a68      	ldr	r2, [pc, #416]	; (800e444 <dhcp_parse_reply+0x5c0>)
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7f6 fbe4 	bl	8004a7c <lwip_htonl>
 800e2b4:	4601      	mov	r1, r0
 800e2b6:	4a65      	ldr	r2, [pc, #404]	; (800e44c <dhcp_parse_reply+0x5c8>)
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e2be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2c2:	3b04      	subs	r3, #4
 800e2c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800e2c8:	8bfb      	ldrh	r3, [r7, #30]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800e2ce:	8a7a      	ldrh	r2, [r7, #18]
 800e2d0:	8bfb      	ldrh	r3, [r7, #30]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d202      	bcs.n	800e2dc <dhcp_parse_reply+0x458>
              /* overflow */
              return ERR_BUF;
 800e2d6:	f06f 0301 	mvn.w	r3, #1
 800e2da:	e0a5      	b.n	800e428 <dhcp_parse_reply+0x5a4>
            }
            val_offset = next_val_offset;
 800e2dc:	8a7b      	ldrh	r3, [r7, #18]
 800e2de:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800e2e6:	e79e      	b.n	800e226 <dhcp_parse_reply+0x3a2>
          } else if (decode_len == 4) {
 800e2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d106      	bne.n	800e2fe <dhcp_parse_reply+0x47a>
            value = lwip_ntohl(value);
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f6 fbc2 	bl	8004a7c <lwip_htonl>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	60bb      	str	r3, [r7, #8]
 800e2fc:	e011      	b.n	800e322 <dhcp_parse_reply+0x49e>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e2fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e302:	2b01      	cmp	r3, #1
 800e304:	d009      	beq.n	800e31a <dhcp_parse_reply+0x496>
 800e306:	4b4a      	ldr	r3, [pc, #296]	; (800e430 <dhcp_parse_reply+0x5ac>)
 800e308:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800e30c:	4950      	ldr	r1, [pc, #320]	; (800e450 <dhcp_parse_reply+0x5cc>)
 800e30e:	484a      	ldr	r0, [pc, #296]	; (800e438 <dhcp_parse_reply+0x5b4>)
 800e310:	f003 f9d8 	bl	80116c4 <iprintf>
 800e314:	f06f 0305 	mvn.w	r3, #5
 800e318:	e086      	b.n	800e428 <dhcp_parse_reply+0x5a4>
            value = ((u8_t *)&value)[0];
 800e31a:	f107 0308 	add.w	r3, r7, #8
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800e322:	4a48      	ldr	r2, [pc, #288]	; (800e444 <dhcp_parse_reply+0x5c0>)
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	4413      	add	r3, r2
 800e328:	2201      	movs	r2, #1
 800e32a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	4947      	ldr	r1, [pc, #284]	; (800e44c <dhcp_parse_reply+0x5c8>)
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	895b      	ldrh	r3, [r3, #10]
 800e33a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d324      	bcc.n	800e38a <dhcp_parse_reply+0x506>
      offset = (u16_t)(offset - q->len);
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	895b      	ldrh	r3, [r3, #10]
 800e344:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	895b      	ldrh	r3, [r3, #10]
 800e34e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800e354:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e356:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e358:	429a      	cmp	r2, r3
 800e35a:	d213      	bcs.n	800e384 <dhcp_parse_reply+0x500>
        q = q->next;
 800e35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	2b00      	cmp	r3, #0
 800e366:	d109      	bne.n	800e37c <dhcp_parse_reply+0x4f8>
 800e368:	4b31      	ldr	r3, [pc, #196]	; (800e430 <dhcp_parse_reply+0x5ac>)
 800e36a:	f240 629d 	movw	r2, #1693	; 0x69d
 800e36e:	4939      	ldr	r1, [pc, #228]	; (800e454 <dhcp_parse_reply+0x5d0>)
 800e370:	4831      	ldr	r0, [pc, #196]	; (800e438 <dhcp_parse_reply+0x5b4>)
 800e372:	f003 f9a7 	bl	80116c4 <iprintf>
 800e376:	f06f 0305 	mvn.w	r3, #5
 800e37a:	e055      	b.n	800e428 <dhcp_parse_reply+0x5a4>
        options = (u8_t *)q->payload;
 800e37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e382:	e002      	b.n	800e38a <dhcp_parse_reply+0x506>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800e384:	f06f 0301 	mvn.w	r3, #1
 800e388:	e04e      	b.n	800e428 <dhcp_parse_reply+0x5a4>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00a      	beq.n	800e3a6 <dhcp_parse_reply+0x522>
 800e390:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e392:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e394:	429a      	cmp	r2, r3
 800e396:	d206      	bcs.n	800e3a6 <dhcp_parse_reply+0x522>
 800e398:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e39a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e39c:	4413      	add	r3, r2
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	2bff      	cmp	r3, #255	; 0xff
 800e3a2:	f47f adb2 	bne.w	800df0a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e3a6:	4b27      	ldr	r3, [pc, #156]	; (800e444 <dhcp_parse_reply+0x5c0>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d027      	beq.n	800e3fe <dhcp_parse_reply+0x57a>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e3ae:	4b27      	ldr	r3, [pc, #156]	; (800e44c <dhcp_parse_reply+0x5c8>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e3b4:	4b23      	ldr	r3, [pc, #140]	; (800e444 <dhcp_parse_reply+0x5c0>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d105      	bne.n	800e3cc <dhcp_parse_reply+0x548>
      parse_file_as_options = 1;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 800e3c4:	4824      	ldr	r0, [pc, #144]	; (800e458 <dhcp_parse_reply+0x5d4>)
 800e3c6:	f003 fa05 	bl	80117d4 <puts>
 800e3ca:	e018      	b.n	800e3fe <dhcp_parse_reply+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d105      	bne.n	800e3de <dhcp_parse_reply+0x55a>
      parse_sname_as_options = 1;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 800e3d6:	4821      	ldr	r0, [pc, #132]	; (800e45c <dhcp_parse_reply+0x5d8>)
 800e3d8:	f003 f9fc 	bl	80117d4 <puts>
 800e3dc:	e00f      	b.n	800e3fe <dhcp_parse_reply+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d107      	bne.n	800e3f4 <dhcp_parse_reply+0x570>
      parse_sname_as_options = 1;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 800e3ec:	481c      	ldr	r0, [pc, #112]	; (800e460 <dhcp_parse_reply+0x5dc>)
 800e3ee:	f003 f9f1 	bl	80117d4 <puts>
 800e3f2:	e004      	b.n	800e3fe <dhcp_parse_reply+0x57a>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	481a      	ldr	r0, [pc, #104]	; (800e464 <dhcp_parse_reply+0x5e0>)
 800e3fa:	f003 f963 	bl	80116c4 <iprintf>
    }
  }
  if (parse_file_as_options) {
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	2b00      	cmp	r3, #0
 800e402:	d006      	beq.n	800e412 <dhcp_parse_reply+0x58e>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800e408:	236c      	movs	r3, #108	; 0x6c
 800e40a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e40c:	23ec      	movs	r3, #236	; 0xec
 800e40e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800e410:	e555      	b.n	800debe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	2b00      	cmp	r3, #0
 800e416:	d006      	beq.n	800e426 <dhcp_parse_reply+0x5a2>
    parse_sname_as_options = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800e41c:	232c      	movs	r3, #44	; 0x2c
 800e41e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800e420:	236c      	movs	r3, #108	; 0x6c
 800e422:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800e424:	e54b      	b.n	800debe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3740      	adds	r7, #64	; 0x40
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	080150dc 	.word	0x080150dc
 800e434:	08015db0 	.word	0x08015db0
 800e438:	0801513c 	.word	0x0801513c
 800e43c:	08015df4 	.word	0x08015df4
 800e440:	08015e14 	.word	0x08015e14
 800e444:	200069a8 	.word	0x200069a8
 800e448:	08015e28 	.word	0x08015e28
 800e44c:	200069b0 	.word	0x200069b0
 800e450:	08015e40 	.word	0x08015e40
 800e454:	08015e54 	.word	0x08015e54
 800e458:	08015e68 	.word	0x08015e68
 800e45c:	08015e80 	.word	0x08015e80
 800e460:	08015e98 	.word	0x08015e98
 800e464:	08015eb8 	.word	0x08015eb8

0800e468 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e468:	b590      	push	{r4, r7, lr}
 800e46a:	b08f      	sub	sp, #60	; 0x3c
 800e46c:	af04      	add	r7, sp, #16
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
 800e474:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800e476:	4b8b      	ldr	r3, [pc, #556]	; (800e6a4 <dhcp_recv+0x23c>)
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e47c:	6a3b      	ldr	r3, [r7, #32]
 800e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e480:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 8102 	beq.w	800e694 <dhcp_recv+0x22c>
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	791b      	ldrb	r3, [r3, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 80fd 	beq.w	800e694 <dhcp_recv+0x22c>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	461c      	mov	r4, r3
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	3302      	adds	r3, #2
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	3303      	adds	r3, #3
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e4ba:	9302      	str	r3, [sp, #8]
 800e4bc:	9101      	str	r1, [sp, #4]
 800e4be:	9200      	str	r2, [sp, #0]
 800e4c0:	4623      	mov	r3, r4
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	4878      	ldr	r0, [pc, #480]	; (800e6a8 <dhcp_recv+0x240>)
 800e4c8:	f003 f8fc 	bl	80116c4 <iprintf>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	895b      	ldrh	r3, [r3, #10]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4876      	ldr	r0, [pc, #472]	; (800e6ac <dhcp_recv+0x244>)
 800e4d4:	f003 f8f6 	bl	80116c4 <iprintf>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4874      	ldr	r0, [pc, #464]	; (800e6b0 <dhcp_recv+0x248>)
 800e4e0:	f003 f8f0 	bl	80116c4 <iprintf>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	895b      	ldrh	r3, [r3, #10]
 800e4e8:	2b2b      	cmp	r3, #43	; 0x2b
 800e4ea:	d803      	bhi.n	800e4f4 <dhcp_recv+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 800e4ec:	4871      	ldr	r0, [pc, #452]	; (800e6b4 <dhcp_recv+0x24c>)
 800e4ee:	f003 f971 	bl	80117d4 <puts>
    goto free_pbuf_and_return;
 800e4f2:	e0d0      	b.n	800e696 <dhcp_recv+0x22e>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b02      	cmp	r3, #2
 800e4fa:	d006      	beq.n	800e50a <dhcp_recv+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	4619      	mov	r1, r3
 800e502:	486d      	ldr	r0, [pc, #436]	; (800e6b8 <dhcp_recv+0x250>)
 800e504:	f003 f8de 	bl	80116c4 <iprintf>
    goto free_pbuf_and_return;
 800e508:	e0c5      	b.n	800e696 <dhcp_recv+0x22e>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e50a:	2300      	movs	r3, #0
 800e50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e510:	e028      	b.n	800e564 <dhcp_recv+0xfc>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800e512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e516:	6a3a      	ldr	r2, [r7, #32]
 800e518:	4413      	add	r3, r2
 800e51a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e51e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e522:	69b9      	ldr	r1, [r7, #24]
 800e524:	440b      	add	r3, r1
 800e526:	7f1b      	ldrb	r3, [r3, #28]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d016      	beq.n	800e55a <dhcp_recv+0xf2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800e52c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800e530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e534:	6a3a      	ldr	r2, [r7, #32]
 800e536:	4413      	add	r3, r2
 800e538:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e53c:	461c      	mov	r4, r3
 800e53e:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800e542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e546:	69ba      	ldr	r2, [r7, #24]
 800e548:	4413      	add	r3, r2
 800e54a:	7f1b      	ldrb	r3, [r3, #28]
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	4603      	mov	r3, r0
 800e550:	4622      	mov	r2, r4
 800e552:	485a      	ldr	r0, [pc, #360]	; (800e6bc <dhcp_recv+0x254>)
 800e554:	f003 f8b6 	bl	80116c4 <iprintf>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 800e558:	e09d      	b.n	800e696 <dhcp_recv+0x22e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e55a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e55e:	3301      	adds	r3, #1
 800e560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e56a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e56e:	429a      	cmp	r2, r3
 800e570:	d203      	bcs.n	800e57a <dhcp_recv+0x112>
 800e572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e576:	2b05      	cmp	r3, #5
 800e578:	d9cb      	bls.n	800e512 <dhcp_recv+0xaa>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f6 fa7c 	bl	8004a7c <lwip_htonl>
 800e584:	4602      	mov	r2, r0
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d00c      	beq.n	800e5a8 <dhcp_recv+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f6 fa72 	bl	8004a7c <lwip_htonl>
 800e598:	4601      	mov	r1, r0
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	4847      	ldr	r0, [pc, #284]	; (800e6c0 <dhcp_recv+0x258>)
 800e5a2:	f003 f88f 	bl	80116c4 <iprintf>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 800e5a6:	e076      	b.n	800e696 <dhcp_recv+0x22e>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800e5a8:	69f9      	ldr	r1, [r7, #28]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff fc6a 	bl	800de84 <dhcp_parse_reply>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <dhcp_recv+0x156>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800e5b6:	4843      	ldr	r0, [pc, #268]	; (800e6c4 <dhcp_recv+0x25c>)
 800e5b8:	f003 f90c 	bl	80117d4 <puts>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 800e5bc:	e06b      	b.n	800e696 <dhcp_recv+0x22e>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 800e5be:	4842      	ldr	r0, [pc, #264]	; (800e6c8 <dhcp_recv+0x260>)
 800e5c0:	f003 f908 	bl	80117d4 <puts>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800e5c4:	4b41      	ldr	r3, [pc, #260]	; (800e6cc <dhcp_recv+0x264>)
 800e5c6:	785b      	ldrb	r3, [r3, #1]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d103      	bne.n	800e5d4 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 800e5cc:	4840      	ldr	r0, [pc, #256]	; (800e6d0 <dhcp_recv+0x268>)
 800e5ce:	f003 f901 	bl	80117d4 <puts>
    goto free_pbuf_and_return;
 800e5d2:	e060      	b.n	800e696 <dhcp_recv+0x22e>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800e5da:	4b3e      	ldr	r3, [pc, #248]	; (800e6d4 <dhcp_recv+0x26c>)
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800e5e0:	7cfb      	ldrb	r3, [r7, #19]
 800e5e2:	2b05      	cmp	r3, #5
 800e5e4:	d12d      	bne.n	800e642 <dhcp_recv+0x1da>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 800e5e6:	483c      	ldr	r0, [pc, #240]	; (800e6d8 <dhcp_recv+0x270>)
 800e5e8:	f003 f8f4 	bl	80117d4 <puts>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	795b      	ldrb	r3, [r3, #5]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d112      	bne.n	800e61a <dhcp_recv+0x1b2>
      dhcp_handle_ack(netif, msg_in);
 800e5f4:	6979      	ldr	r1, [r7, #20]
 800e5f6:	6a38      	ldr	r0, [r7, #32]
 800e5f8:	f7fe fcb0 	bl	800cf5c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800e5fc:	6a3b      	ldr	r3, [r7, #32]
 800e5fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e602:	f003 0308 	and.w	r3, r3, #8
 800e606:	2b00      	cmp	r3, #0
 800e608:	d003      	beq.n	800e612 <dhcp_recv+0x1aa>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800e60a:	6a38      	ldr	r0, [r7, #32]
 800e60c:	f7fe f972 	bl	800c8f4 <dhcp_check>
 800e610:	e041      	b.n	800e696 <dhcp_recv+0x22e>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800e612:	6a38      	ldr	r0, [r7, #32]
 800e614:	f7fe ff44 	bl	800d4a0 <dhcp_bind>
 800e618:	e03d      	b.n	800e696 <dhcp_recv+0x22e>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	795b      	ldrb	r3, [r3, #5]
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d007      	beq.n	800e632 <dhcp_recv+0x1ca>
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	795b      	ldrb	r3, [r3, #5]
 800e626:	2b04      	cmp	r3, #4
 800e628:	d003      	beq.n	800e632 <dhcp_recv+0x1ca>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e62e:	2b05      	cmp	r3, #5
 800e630:	d131      	bne.n	800e696 <dhcp_recv+0x22e>
      dhcp_handle_ack(netif, msg_in);
 800e632:	6979      	ldr	r1, [r7, #20]
 800e634:	6a38      	ldr	r0, [r7, #32]
 800e636:	f7fe fc91 	bl	800cf5c <dhcp_handle_ack>
      dhcp_bind(netif);
 800e63a:	6a38      	ldr	r0, [r7, #32]
 800e63c:	f7fe ff30 	bl	800d4a0 <dhcp_bind>
 800e640:	e029      	b.n	800e696 <dhcp_recv+0x22e>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800e642:	7cfb      	ldrb	r3, [r7, #19]
 800e644:	2b06      	cmp	r3, #6
 800e646:	d116      	bne.n	800e676 <dhcp_recv+0x20e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800e64c:	2b03      	cmp	r3, #3
 800e64e:	d00b      	beq.n	800e668 <dhcp_recv+0x200>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	795b      	ldrb	r3, [r3, #5]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d007      	beq.n	800e668 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e65c:	2b04      	cmp	r3, #4
 800e65e:	d003      	beq.n	800e668 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	795b      	ldrb	r3, [r3, #5]
 800e664:	2b05      	cmp	r3, #5
 800e666:	d106      	bne.n	800e676 <dhcp_recv+0x20e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 800e668:	481c      	ldr	r0, [pc, #112]	; (800e6dc <dhcp_recv+0x274>)
 800e66a:	f003 f8b3 	bl	80117d4 <puts>
    dhcp_handle_nak(netif);
 800e66e:	6a38      	ldr	r0, [r7, #32]
 800e670:	f7fe f912 	bl	800c898 <dhcp_handle_nak>
 800e674:	e00f      	b.n	800e696 <dhcp_recv+0x22e>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800e676:	7cfb      	ldrb	r3, [r7, #19]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d10b      	bne.n	800e694 <dhcp_recv+0x22c>
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	795b      	ldrb	r3, [r3, #5]
 800e680:	2b06      	cmp	r3, #6
 800e682:	d107      	bne.n	800e694 <dhcp_recv+0x22c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 800e684:	4816      	ldr	r0, [pc, #88]	; (800e6e0 <dhcp_recv+0x278>)
 800e686:	f003 f8a5 	bl	80117d4 <puts>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800e68a:	6979      	ldr	r1, [r7, #20]
 800e68c:	6a38      	ldr	r0, [r7, #32]
 800e68e:	f7fe f981 	bl	800c994 <dhcp_handle_offer>
 800e692:	e000      	b.n	800e696 <dhcp_recv+0x22e>
  }

free_pbuf_and_return:
 800e694:	bf00      	nop
  pbuf_free(p);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7f7 fe00 	bl	800629c <pbuf_free>
}
 800e69c:	bf00      	nop
 800e69e:	372c      	adds	r7, #44	; 0x2c
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd90      	pop	{r4, r7, pc}
 800e6a4:	200033d4 	.word	0x200033d4
 800e6a8:	08015ed8 	.word	0x08015ed8
 800e6ac:	08015f18 	.word	0x08015f18
 800e6b0:	08015f2c 	.word	0x08015f2c
 800e6b4:	08015f44 	.word	0x08015f44
 800e6b8:	08015f6c 	.word	0x08015f6c
 800e6bc:	08015f94 	.word	0x08015f94
 800e6c0:	08015fd0 	.word	0x08015fd0
 800e6c4:	08016010 	.word	0x08016010
 800e6c8:	08016048 	.word	0x08016048
 800e6cc:	200069a8 	.word	0x200069a8
 800e6d0:	0801606c 	.word	0x0801606c
 800e6d4:	200069b0 	.word	0x200069b0
 800e6d8:	08016098 	.word	0x08016098
 800e6dc:	080160ac 	.word	0x080160ac
 800e6e0:	080160c0 	.word	0x080160c0

0800e6e4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d108      	bne.n	800e70c <dhcp_create_msg+0x28>
 800e6fa:	4b64      	ldr	r3, [pc, #400]	; (800e88c <dhcp_create_msg+0x1a8>)
 800e6fc:	f240 7269 	movw	r2, #1897	; 0x769
 800e700:	4963      	ldr	r1, [pc, #396]	; (800e890 <dhcp_create_msg+0x1ac>)
 800e702:	4864      	ldr	r0, [pc, #400]	; (800e894 <dhcp_create_msg+0x1b0>)
 800e704:	f002 ffde 	bl	80116c4 <iprintf>
 800e708:	2300      	movs	r3, #0
 800e70a:	e0ba      	b.n	800e882 <dhcp_create_msg+0x19e>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d108      	bne.n	800e724 <dhcp_create_msg+0x40>
 800e712:	4b5e      	ldr	r3, [pc, #376]	; (800e88c <dhcp_create_msg+0x1a8>)
 800e714:	f240 726a 	movw	r2, #1898	; 0x76a
 800e718:	495f      	ldr	r1, [pc, #380]	; (800e898 <dhcp_create_msg+0x1b4>)
 800e71a:	485e      	ldr	r0, [pc, #376]	; (800e894 <dhcp_create_msg+0x1b0>)
 800e71c:	f002 ffd2 	bl	80116c4 <iprintf>
 800e720:	2300      	movs	r3, #0
 800e722:	e0ae      	b.n	800e882 <dhcp_create_msg+0x19e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e724:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e728:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e72c:	2036      	movs	r0, #54	; 0x36
 800e72e:	f7f7 fa8f 	bl	8005c50 <pbuf_alloc>
 800e732:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d104      	bne.n	800e744 <dhcp_create_msg+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800e73a:	4858      	ldr	r0, [pc, #352]	; (800e89c <dhcp_create_msg+0x1b8>)
 800e73c:	f003 f84a 	bl	80117d4 <puts>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800e740:	2300      	movs	r3, #0
 800e742:	e09e      	b.n	800e882 <dhcp_create_msg+0x19e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	895b      	ldrh	r3, [r3, #10]
 800e748:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e74c:	d206      	bcs.n	800e75c <dhcp_create_msg+0x78>
 800e74e:	4b4f      	ldr	r3, [pc, #316]	; (800e88c <dhcp_create_msg+0x1a8>)
 800e750:	f240 7272 	movw	r2, #1906	; 0x772
 800e754:	4952      	ldr	r1, [pc, #328]	; (800e8a0 <dhcp_create_msg+0x1bc>)
 800e756:	484f      	ldr	r0, [pc, #316]	; (800e894 <dhcp_create_msg+0x1b0>)
 800e758:	f002 ffb4 	bl	80116c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	2b03      	cmp	r3, #3
 800e760:	d103      	bne.n	800e76a <dhcp_create_msg+0x86>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	795b      	ldrb	r3, [r3, #5]
 800e766:	2b03      	cmp	r3, #3
 800e768:	d10d      	bne.n	800e786 <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	799b      	ldrb	r3, [r3, #6]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d105      	bne.n	800e77e <dhcp_create_msg+0x9a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800e772:	f003 f837 	bl	80117e4 <rand>
 800e776:	4603      	mov	r3, r0
 800e778:	461a      	mov	r2, r3
 800e77a:	4b4a      	ldr	r3, [pc, #296]	; (800e8a4 <dhcp_create_msg+0x1c0>)
 800e77c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e77e:	4b49      	ldr	r3, [pc, #292]	; (800e8a4 <dhcp_create_msg+0x1c0>)
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 800e786:	4b47      	ldr	r3, [pc, #284]	; (800e8a4 <dhcp_create_msg+0x1c0>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4619      	mov	r1, r3
 800e78c:	4846      	ldr	r0, [pc, #280]	; (800e8a8 <dhcp_create_msg+0x1c4>)
 800e78e:	f002 ff99 	bl	80116c4 <iprintf>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e798:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e79c:	2100      	movs	r1, #0
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f002 ff88 	bl	80116b4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7f6 f95c 	bl	8004a7c <lwip_htonl>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	2b08      	cmp	r3, #8
 800e7ce:	d010      	beq.n	800e7f2 <dhcp_create_msg+0x10e>
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d00d      	beq.n	800e7f2 <dhcp_create_msg+0x10e>
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	2b07      	cmp	r3, #7
 800e7da:	d00a      	beq.n	800e7f2 <dhcp_create_msg+0x10e>
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	d10c      	bne.n	800e7fc <dhcp_create_msg+0x118>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e7e6:	2b05      	cmp	r3, #5
 800e7e8:	d003      	beq.n	800e7f2 <dhcp_create_msg+0x10e>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	795b      	ldrb	r3, [r3, #5]
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	d104      	bne.n	800e7fc <dhcp_create_msg+0x118>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3304      	adds	r3, #4
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	83fb      	strh	r3, [r7, #30]
 800e800:	e00c      	b.n	800e81c <dhcp_create_msg+0x138>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e802:	8bfa      	ldrh	r2, [r7, #30]
 800e804:	8bfb      	ldrh	r3, [r7, #30]
 800e806:	68f9      	ldr	r1, [r7, #12]
 800e808:	440a      	add	r2, r1
 800e80a:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800e80e:	697a      	ldr	r2, [r7, #20]
 800e810:	4413      	add	r3, r2
 800e812:	460a      	mov	r2, r1
 800e814:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e816:	8bfb      	ldrh	r3, [r7, #30]
 800e818:	3301      	adds	r3, #1
 800e81a:	83fb      	strh	r3, [r7, #30]
 800e81c:	8bfb      	ldrh	r3, [r7, #30]
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d9ef      	bls.n	800e802 <dhcp_create_msg+0x11e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2200      	movs	r2, #0
 800e826:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e82a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800e82e:	2200      	movs	r2, #0
 800e830:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800e834:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800e838:	2200      	movs	r2, #0
 800e83a:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800e83e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800e842:	2200      	movs	r2, #0
 800e844:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e848:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e852:	2301      	movs	r3, #1
 800e854:	2235      	movs	r2, #53	; 0x35
 800e856:	2000      	movs	r0, #0
 800e858:	f7ff fa44 	bl	800dce4 <dhcp_option>
 800e85c:	4603      	mov	r3, r0
 800e85e:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e866:	79fa      	ldrb	r2, [r7, #7]
 800e868:	8a7b      	ldrh	r3, [r7, #18]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff fa6e 	bl	800dd4c <dhcp_option_byte>
 800e870:	4603      	mov	r3, r0
 800e872:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d002      	beq.n	800e880 <dhcp_create_msg+0x19c>
    *options_out_len = options_out_len_loc;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	8a7a      	ldrh	r2, [r7, #18]
 800e87e:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800e880:	69bb      	ldr	r3, [r7, #24]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3720      	adds	r7, #32
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	080150dc 	.word	0x080150dc
 800e890:	080160f4 	.word	0x080160f4
 800e894:	0801513c 	.word	0x0801513c
 800e898:	08016114 	.word	0x08016114
 800e89c:	08016134 	.word	0x08016134
 800e8a0:	08016160 	.word	0x08016160
 800e8a4:	2000011c 	.word	0x2000011c
 800e8a8:	080161a0 	.word	0x080161a0

0800e8ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800e8ba:	89fb      	ldrh	r3, [r7, #14]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	81fa      	strh	r2, [r7, #14]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	22ff      	movs	r2, #255	; 0xff
 800e8c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e8ca:	e007      	b.n	800e8dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800e8cc:	89fb      	ldrh	r3, [r7, #14]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	81fa      	strh	r2, [r7, #14]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	2200      	movs	r2, #0
 800e8da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e8dc:	89fb      	ldrh	r3, [r7, #14]
 800e8de:	2b43      	cmp	r3, #67	; 0x43
 800e8e0:	d904      	bls.n	800e8ec <dhcp_option_trailer+0x40>
 800e8e2:	89fb      	ldrh	r3, [r7, #14]
 800e8e4:	f003 0303 	and.w	r3, r3, #3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <dhcp_option_trailer+0x46>
 800e8ec:	89fb      	ldrh	r3, [r7, #14]
 800e8ee:	2b43      	cmp	r3, #67	; 0x43
 800e8f0:	d9ec      	bls.n	800e8cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e8f2:	89fb      	ldrh	r3, [r7, #14]
 800e8f4:	33f0      	adds	r3, #240	; 0xf0
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7f7 fb2e 	bl	8005f5c <pbuf_realloc>
}
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d017      	beq.n	800e946 <dhcp_supplied_address+0x3e>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d013      	beq.n	800e946 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e922:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	795b      	ldrb	r3, [r3, #5]
 800e928:	2b0a      	cmp	r3, #10
 800e92a:	d007      	beq.n	800e93c <dhcp_supplied_address+0x34>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	795b      	ldrb	r3, [r3, #5]
 800e930:	2b05      	cmp	r3, #5
 800e932:	d003      	beq.n	800e93c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e938:	2b04      	cmp	r3, #4
 800e93a:	d101      	bne.n	800e940 <dhcp_supplied_address+0x38>
 800e93c:	2301      	movs	r3, #1
 800e93e:	e000      	b.n	800e942 <dhcp_supplied_address+0x3a>
 800e940:	2300      	movs	r3, #0
 800e942:	b2db      	uxtb	r3, r3
 800e944:	e000      	b.n	800e948 <dhcp_supplied_address+0x40>
  }
  return 0;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e95c:	4933      	ldr	r1, [pc, #204]	; (800ea2c <etharp_free_entry+0xd8>)
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	4613      	mov	r3, r2
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	4413      	add	r3, r2
 800e966:	00db      	lsls	r3, r3, #3
 800e968:	440b      	add	r3, r1
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d023      	beq.n	800e9b8 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	b29b      	uxth	r3, r3
 800e974:	4618      	mov	r0, r3
 800e976:	492d      	ldr	r1, [pc, #180]	; (800ea2c <etharp_free_entry+0xd8>)
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	4613      	mov	r3, r2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	4413      	add	r3, r2
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	440b      	add	r3, r1
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	4601      	mov	r1, r0
 800e98a:	4829      	ldr	r0, [pc, #164]	; (800ea30 <etharp_free_entry+0xdc>)
 800e98c:	f002 fe9a 	bl	80116c4 <iprintf>
    free_etharp_q(arp_table[i].q);
 800e990:	4926      	ldr	r1, [pc, #152]	; (800ea2c <etharp_free_entry+0xd8>)
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4613      	mov	r3, r2
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4413      	add	r3, r2
 800e99a:	00db      	lsls	r3, r3, #3
 800e99c:	440b      	add	r3, r1
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f7 fc7b 	bl	800629c <pbuf_free>
    arp_table[i].q = NULL;
 800e9a6:	4921      	ldr	r1, [pc, #132]	; (800ea2c <etharp_free_entry+0xd8>)
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	4413      	add	r3, r2
 800e9b0:	00db      	lsls	r3, r3, #3
 800e9b2:	440b      	add	r3, r1
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e9b8:	491c      	ldr	r1, [pc, #112]	; (800ea2c <etharp_free_entry+0xd8>)
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	4413      	add	r3, r2
 800e9c2:	00db      	lsls	r3, r3, #3
 800e9c4:	440b      	add	r3, r1
 800e9c6:	3314      	adds	r3, #20
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800e9cc:	4917      	ldr	r1, [pc, #92]	; (800ea2c <etharp_free_entry+0xd8>)
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4413      	add	r3, r2
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	440b      	add	r3, r1
 800e9da:	3312      	adds	r3, #18
 800e9dc:	2200      	movs	r2, #0
 800e9de:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800e9e0:	4912      	ldr	r1, [pc, #72]	; (800ea2c <etharp_free_entry+0xd8>)
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	4413      	add	r3, r2
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	440b      	add	r3, r1
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800e9f4:	490d      	ldr	r1, [pc, #52]	; (800ea2c <etharp_free_entry+0xd8>)
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	440b      	add	r3, r1
 800ea02:	3304      	adds	r3, #4
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800ea08:	4908      	ldr	r1, [pc, #32]	; (800ea2c <etharp_free_entry+0xd8>)
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	4413      	add	r3, r2
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	440b      	add	r3, r1
 800ea16:	3308      	adds	r3, #8
 800ea18:	4a06      	ldr	r2, [pc, #24]	; (800ea34 <etharp_free_entry+0xe0>)
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	6810      	ldr	r0, [r2, #0]
 800ea1e:	6018      	str	r0, [r3, #0]
 800ea20:	8892      	ldrh	r2, [r2, #4]
 800ea22:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800ea24:	bf00      	nop
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	20000120 	.word	0x20000120
 800ea30:	080161bc 	.word	0x080161bc
 800ea34:	08017688 	.word	0x08017688

0800ea38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 800ea3e:	485c      	ldr	r0, [pc, #368]	; (800ebb0 <etharp_tmr+0x178>)
 800ea40:	f002 fec8 	bl	80117d4 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea44:	2300      	movs	r3, #0
 800ea46:	607b      	str	r3, [r7, #4]
 800ea48:	e0a9      	b.n	800eb9e <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 800ea4a:	495a      	ldr	r1, [pc, #360]	; (800ebb4 <etharp_tmr+0x17c>)
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	005b      	lsls	r3, r3, #1
 800ea52:	4413      	add	r3, r2
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	440b      	add	r3, r1
 800ea58:	3314      	adds	r3, #20
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ea5e:	78fb      	ldrb	r3, [r7, #3]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 8099 	beq.w	800eb98 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ea66:	4953      	ldr	r1, [pc, #332]	; (800ebb4 <etharp_tmr+0x17c>)
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	4413      	add	r3, r2
 800ea70:	00db      	lsls	r3, r3, #3
 800ea72:	440b      	add	r3, r1
 800ea74:	3312      	adds	r3, #18
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	b298      	uxth	r0, r3
 800ea7c:	494d      	ldr	r1, [pc, #308]	; (800ebb4 <etharp_tmr+0x17c>)
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	4413      	add	r3, r2
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	440b      	add	r3, r1
 800ea8a:	3312      	adds	r3, #18
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea90:	4948      	ldr	r1, [pc, #288]	; (800ebb4 <etharp_tmr+0x17c>)
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	4613      	mov	r3, r2
 800ea96:	005b      	lsls	r3, r3, #1
 800ea98:	4413      	add	r3, r2
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	440b      	add	r3, r1
 800ea9e:	3312      	adds	r3, #18
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800eaa6:	d215      	bcs.n	800ead4 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eaa8:	4942      	ldr	r1, [pc, #264]	; (800ebb4 <etharp_tmr+0x17c>)
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	4613      	mov	r3, r2
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	4413      	add	r3, r2
 800eab2:	00db      	lsls	r3, r3, #3
 800eab4:	440b      	add	r3, r1
 800eab6:	3314      	adds	r3, #20
 800eab8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d121      	bne.n	800eb02 <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eabe:	493d      	ldr	r1, [pc, #244]	; (800ebb4 <etharp_tmr+0x17c>)
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	4613      	mov	r3, r2
 800eac4:	005b      	lsls	r3, r3, #1
 800eac6:	4413      	add	r3, r2
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	440b      	add	r3, r1
 800eacc:	3312      	adds	r3, #18
 800eace:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ead0:	2b04      	cmp	r3, #4
 800ead2:	d916      	bls.n	800eb02 <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 800ead4:	4937      	ldr	r1, [pc, #220]	; (800ebb4 <etharp_tmr+0x17c>)
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	4613      	mov	r3, r2
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	4413      	add	r3, r2
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	440b      	add	r3, r1
 800eae2:	3314      	adds	r3, #20
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d901      	bls.n	800eaee <etharp_tmr+0xb6>
 800eaea:	4b33      	ldr	r3, [pc, #204]	; (800ebb8 <etharp_tmr+0x180>)
 800eaec:	e000      	b.n	800eaf0 <etharp_tmr+0xb8>
 800eaee:	4b33      	ldr	r3, [pc, #204]	; (800ebbc <etharp_tmr+0x184>)
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4832      	ldr	r0, [pc, #200]	; (800ebc0 <etharp_tmr+0x188>)
 800eaf6:	f002 fde5 	bl	80116c4 <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff ff2a 	bl	800e954 <etharp_free_entry>
 800eb00:	e04a      	b.n	800eb98 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800eb02:	492c      	ldr	r1, [pc, #176]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	4613      	mov	r3, r2
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	4413      	add	r3, r2
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	440b      	add	r3, r1
 800eb10:	3314      	adds	r3, #20
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b03      	cmp	r3, #3
 800eb16:	d10a      	bne.n	800eb2e <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eb18:	4926      	ldr	r1, [pc, #152]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	440b      	add	r3, r1
 800eb26:	3314      	adds	r3, #20
 800eb28:	2204      	movs	r2, #4
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	e034      	b.n	800eb98 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eb2e:	4921      	ldr	r1, [pc, #132]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	4613      	mov	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	440b      	add	r3, r1
 800eb3c:	3314      	adds	r3, #20
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d10a      	bne.n	800eb5a <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eb44:	491b      	ldr	r1, [pc, #108]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	4413      	add	r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	440b      	add	r3, r1
 800eb52:	3314      	adds	r3, #20
 800eb54:	2202      	movs	r2, #2
 800eb56:	701a      	strb	r2, [r3, #0]
 800eb58:	e01e      	b.n	800eb98 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb5a:	4916      	ldr	r1, [pc, #88]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	005b      	lsls	r3, r3, #1
 800eb62:	4413      	add	r3, r2
 800eb64:	00db      	lsls	r3, r3, #3
 800eb66:	440b      	add	r3, r1
 800eb68:	3314      	adds	r3, #20
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d113      	bne.n	800eb98 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eb70:	4910      	ldr	r1, [pc, #64]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	4613      	mov	r3, r2
 800eb76:	005b      	lsls	r3, r3, #1
 800eb78:	4413      	add	r3, r2
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	440b      	add	r3, r1
 800eb7e:	3308      	adds	r3, #8
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	4613      	mov	r3, r2
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	4413      	add	r3, r2
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	4a09      	ldr	r2, [pc, #36]	; (800ebb4 <etharp_tmr+0x17c>)
 800eb8e:	4413      	add	r3, r2
 800eb90:	3304      	adds	r3, #4
 800eb92:	4619      	mov	r1, r3
 800eb94:	f000 ff70 	bl	800fa78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	607b      	str	r3, [r7, #4]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b09      	cmp	r3, #9
 800eba2:	f77f af52 	ble.w	800ea4a <etharp_tmr+0x12>
      }
    }
  }
}
 800eba6:	bf00      	nop
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	080161f4 	.word	0x080161f4
 800ebb4:	20000120 	.word	0x20000120
 800ebb8:	08016204 	.word	0x08016204
 800ebbc:	0801620c 	.word	0x0801620c
 800ebc0:	08016214 	.word	0x08016214

0800ebc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08a      	sub	sp, #40	; 0x28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	607a      	str	r2, [r7, #4]
 800ebd0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ebd2:	230a      	movs	r3, #10
 800ebd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ebd6:	230a      	movs	r3, #10
 800ebd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ebda:	230a      	movs	r3, #10
 800ebdc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ebe2:	230a      	movs	r3, #10
 800ebe4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	83bb      	strh	r3, [r7, #28]
 800ebea:	2300      	movs	r3, #0
 800ebec:	837b      	strh	r3, [r7, #26]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	843b      	strh	r3, [r7, #32]
 800ebf6:	e0ba      	b.n	800ed6e <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 800ebf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebfc:	4993      	ldr	r1, [pc, #588]	; (800ee4c <etharp_find_entry+0x288>)
 800ebfe:	4613      	mov	r3, r2
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	4413      	add	r3, r2
 800ec04:	00db      	lsls	r3, r3, #3
 800ec06:	440b      	add	r3, r1
 800ec08:	3314      	adds	r3, #20
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ec0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ec12:	2b0a      	cmp	r3, #10
 800ec14:	d10b      	bne.n	800ec2e <etharp_find_entry+0x6a>
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d108      	bne.n	800ec2e <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 800ec1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec20:	4619      	mov	r1, r3
 800ec22:	488b      	ldr	r0, [pc, #556]	; (800ee50 <etharp_find_entry+0x28c>)
 800ec24:	f002 fd4e 	bl	80116c4 <iprintf>
      /* remember first empty entry */
      empty = i;
 800ec28:	8c3b      	ldrh	r3, [r7, #32]
 800ec2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ec2c:	e09b      	b.n	800ed66 <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 8098 	beq.w	800ed66 <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d009      	beq.n	800ec50 <etharp_find_entry+0x8c>
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d806      	bhi.n	800ec50 <etharp_find_entry+0x8c>
 800ec42:	4b84      	ldr	r3, [pc, #528]	; (800ee54 <etharp_find_entry+0x290>)
 800ec44:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ec48:	4983      	ldr	r1, [pc, #524]	; (800ee58 <etharp_find_entry+0x294>)
 800ec4a:	4884      	ldr	r0, [pc, #528]	; (800ee5c <etharp_find_entry+0x298>)
 800ec4c:	f002 fd3a 	bl	80116c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d026      	beq.n	800eca4 <etharp_find_entry+0xe0>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec5e:	487b      	ldr	r0, [pc, #492]	; (800ee4c <etharp_find_entry+0x288>)
 800ec60:	4613      	mov	r3, r2
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	4403      	add	r3, r0
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4299      	cmp	r1, r3
 800ec70:	d118      	bne.n	800eca4 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00c      	beq.n	800ec92 <etharp_find_entry+0xce>
 800ec78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec7c:	4973      	ldr	r1, [pc, #460]	; (800ee4c <etharp_find_entry+0x288>)
 800ec7e:	4613      	mov	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4413      	add	r3, r2
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	440b      	add	r3, r1
 800ec88:	3308      	adds	r3, #8
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d108      	bne.n	800eca4 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 800ec92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec96:	4619      	mov	r1, r3
 800ec98:	4871      	ldr	r0, [pc, #452]	; (800ee60 <etharp_find_entry+0x29c>)
 800ec9a:	f002 fd13 	bl	80116c4 <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 800ec9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eca2:	e142      	b.n	800ef2a <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d140      	bne.n	800ed2c <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ecaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecae:	4967      	ldr	r1, [pc, #412]	; (800ee4c <etharp_find_entry+0x288>)
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	4413      	add	r3, r2
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	440b      	add	r3, r1
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01a      	beq.n	800ecf6 <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 800ecc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecc4:	4961      	ldr	r1, [pc, #388]	; (800ee4c <etharp_find_entry+0x288>)
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	005b      	lsls	r3, r3, #1
 800ecca:	4413      	add	r3, r2
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	440b      	add	r3, r1
 800ecd0:	3312      	adds	r3, #18
 800ecd2:	881b      	ldrh	r3, [r3, #0]
 800ecd4:	8bba      	ldrh	r2, [r7, #28]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d845      	bhi.n	800ed66 <etharp_find_entry+0x1a2>
            old_queue = i;
 800ecda:	8c3b      	ldrh	r3, [r7, #32]
 800ecdc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ecde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ece2:	495a      	ldr	r1, [pc, #360]	; (800ee4c <etharp_find_entry+0x288>)
 800ece4:	4613      	mov	r3, r2
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	4413      	add	r3, r2
 800ecea:	00db      	lsls	r3, r3, #3
 800ecec:	440b      	add	r3, r1
 800ecee:	3312      	adds	r3, #18
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	83bb      	strh	r3, [r7, #28]
 800ecf4:	e037      	b.n	800ed66 <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ecf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecfa:	4954      	ldr	r1, [pc, #336]	; (800ee4c <etharp_find_entry+0x288>)
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	4413      	add	r3, r2
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	440b      	add	r3, r1
 800ed06:	3312      	adds	r3, #18
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	8b7a      	ldrh	r2, [r7, #26]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d82a      	bhi.n	800ed66 <etharp_find_entry+0x1a2>
            old_pending = i;
 800ed10:	8c3b      	ldrh	r3, [r7, #32]
 800ed12:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ed14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed18:	494c      	ldr	r1, [pc, #304]	; (800ee4c <etharp_find_entry+0x288>)
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4413      	add	r3, r2
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	440b      	add	r3, r1
 800ed24:	3312      	adds	r3, #18
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	837b      	strh	r3, [r7, #26]
 800ed2a:	e01c      	b.n	800ed66 <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d919      	bls.n	800ed66 <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ed32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed36:	4945      	ldr	r1, [pc, #276]	; (800ee4c <etharp_find_entry+0x288>)
 800ed38:	4613      	mov	r3, r2
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	440b      	add	r3, r1
 800ed42:	3312      	adds	r3, #18
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	8b3a      	ldrh	r2, [r7, #24]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d80c      	bhi.n	800ed66 <etharp_find_entry+0x1a2>
            old_stable = i;
 800ed4c:	8c3b      	ldrh	r3, [r7, #32]
 800ed4e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ed50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed54:	493d      	ldr	r1, [pc, #244]	; (800ee4c <etharp_find_entry+0x288>)
 800ed56:	4613      	mov	r3, r2
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	4413      	add	r3, r2
 800ed5c:	00db      	lsls	r3, r3, #3
 800ed5e:	440b      	add	r3, r1
 800ed60:	3312      	adds	r3, #18
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed66:	8c3b      	ldrh	r3, [r7, #32]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	843b      	strh	r3, [r7, #32]
 800ed6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed72:	2b09      	cmp	r3, #9
 800ed74:	f77f af40 	ble.w	800ebf8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ed78:	7afb      	ldrb	r3, [r7, #11]
 800ed7a:	f003 0302 	and.w	r3, r3, #2
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d108      	bne.n	800ed94 <etharp_find_entry+0x1d0>
 800ed82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed86:	2b0a      	cmp	r3, #10
 800ed88:	d10a      	bne.n	800eda0 <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d105      	bne.n	800eda0 <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 800ed94:	4833      	ldr	r0, [pc, #204]	; (800ee64 <etharp_find_entry+0x2a0>)
 800ed96:	f002 fd1d 	bl	80117d4 <puts>
    return (s16_t)ERR_MEM;
 800ed9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9e:	e0c4      	b.n	800ef2a <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800eda0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eda4:	2b09      	cmp	r3, #9
 800eda6:	dc08      	bgt.n	800edba <etharp_find_entry+0x1f6>
    i = empty;
 800eda8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edaa:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 800edac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edb0:	4619      	mov	r1, r3
 800edb2:	482d      	ldr	r0, [pc, #180]	; (800ee68 <etharp_find_entry+0x2a4>)
 800edb4:	f002 fc86 	bl	80116c4 <iprintf>
 800edb8:	e072      	b.n	800eea0 <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800edba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800edbe:	2b09      	cmp	r3, #9
 800edc0:	dc1a      	bgt.n	800edf8 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 800edc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edc4:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 800edc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edca:	4619      	mov	r1, r3
 800edcc:	4827      	ldr	r0, [pc, #156]	; (800ee6c <etharp_find_entry+0x2a8>)
 800edce:	f002 fc79 	bl	80116c4 <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800edd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800edd6:	491d      	ldr	r1, [pc, #116]	; (800ee4c <etharp_find_entry+0x288>)
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	440b      	add	r3, r1
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d04b      	beq.n	800ee80 <etharp_find_entry+0x2bc>
 800ede8:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <etharp_find_entry+0x290>)
 800edea:	f240 126d 	movw	r2, #365	; 0x16d
 800edee:	4920      	ldr	r1, [pc, #128]	; (800ee70 <etharp_find_entry+0x2ac>)
 800edf0:	481a      	ldr	r0, [pc, #104]	; (800ee5c <etharp_find_entry+0x298>)
 800edf2:	f002 fc67 	bl	80116c4 <iprintf>
 800edf6:	e043      	b.n	800ee80 <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800edf8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800edfc:	2b09      	cmp	r3, #9
 800edfe:	dc08      	bgt.n	800ee12 <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 800ee00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee02:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 800ee04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	481a      	ldr	r0, [pc, #104]	; (800ee74 <etharp_find_entry+0x2b0>)
 800ee0c:	f002 fc5a 	bl	80116c4 <iprintf>
 800ee10:	e036      	b.n	800ee80 <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ee12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ee16:	2b09      	cmp	r3, #9
 800ee18:	dc12      	bgt.n	800ee40 <etharp_find_entry+0x27c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ee1a:	8bfb      	ldrh	r3, [r7, #30]
 800ee1c:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 800ee1e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800ee22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee26:	4909      	ldr	r1, [pc, #36]	; (800ee4c <etharp_find_entry+0x288>)
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	461a      	mov	r2, r3
 800ee36:	4601      	mov	r1, r0
 800ee38:	480f      	ldr	r0, [pc, #60]	; (800ee78 <etharp_find_entry+0x2b4>)
 800ee3a:	f002 fc43 	bl	80116c4 <iprintf>
 800ee3e:	e01f      	b.n	800ee80 <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 800ee40:	480e      	ldr	r0, [pc, #56]	; (800ee7c <etharp_find_entry+0x2b8>)
 800ee42:	f002 fcc7 	bl	80117d4 <puts>
      return (s16_t)ERR_MEM;
 800ee46:	f04f 33ff 	mov.w	r3, #4294967295
 800ee4a:	e06e      	b.n	800ef2a <etharp_find_entry+0x366>
 800ee4c:	20000120 	.word	0x20000120
 800ee50:	08016238 	.word	0x08016238
 800ee54:	08016264 	.word	0x08016264
 800ee58:	0801629c 	.word	0x0801629c
 800ee5c:	080162dc 	.word	0x080162dc
 800ee60:	08016304 	.word	0x08016304
 800ee64:	08016330 	.word	0x08016330
 800ee68:	08016374 	.word	0x08016374
 800ee6c:	080163a4 	.word	0x080163a4
 800ee70:	080163dc 	.word	0x080163dc
 800ee74:	080163f4 	.word	0x080163f4
 800ee78:	0801643c 	.word	0x0801643c
 800ee7c:	0801648c 	.word	0x0801648c
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ee80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee84:	2b09      	cmp	r3, #9
 800ee86:	dd06      	ble.n	800ee96 <etharp_find_entry+0x2d2>
 800ee88:	4b2a      	ldr	r3, [pc, #168]	; (800ef34 <etharp_find_entry+0x370>)
 800ee8a:	f240 127f 	movw	r2, #383	; 0x17f
 800ee8e:	492a      	ldr	r1, [pc, #168]	; (800ef38 <etharp_find_entry+0x374>)
 800ee90:	482a      	ldr	r0, [pc, #168]	; (800ef3c <etharp_find_entry+0x378>)
 800ee92:	f002 fc17 	bl	80116c4 <iprintf>
    etharp_free_entry(i);
 800ee96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fd5a 	bl	800e954 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800eea0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eea4:	2b09      	cmp	r3, #9
 800eea6:	dd06      	ble.n	800eeb6 <etharp_find_entry+0x2f2>
 800eea8:	4b22      	ldr	r3, [pc, #136]	; (800ef34 <etharp_find_entry+0x370>)
 800eeaa:	f240 1283 	movw	r2, #387	; 0x183
 800eeae:	4922      	ldr	r1, [pc, #136]	; (800ef38 <etharp_find_entry+0x374>)
 800eeb0:	4822      	ldr	r0, [pc, #136]	; (800ef3c <etharp_find_entry+0x378>)
 800eeb2:	f002 fc07 	bl	80116c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800eeb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eeba:	4921      	ldr	r1, [pc, #132]	; (800ef40 <etharp_find_entry+0x37c>)
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	440b      	add	r3, r1
 800eec6:	3314      	adds	r3, #20
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d006      	beq.n	800eedc <etharp_find_entry+0x318>
 800eece:	4b19      	ldr	r3, [pc, #100]	; (800ef34 <etharp_find_entry+0x370>)
 800eed0:	f240 1285 	movw	r2, #389	; 0x185
 800eed4:	491b      	ldr	r1, [pc, #108]	; (800ef44 <etharp_find_entry+0x380>)
 800eed6:	4819      	ldr	r0, [pc, #100]	; (800ef3c <etharp_find_entry+0x378>)
 800eed8:	f002 fbf4 	bl	80116c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00b      	beq.n	800eefa <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eee2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	4815      	ldr	r0, [pc, #84]	; (800ef40 <etharp_find_entry+0x37c>)
 800eeec:	4613      	mov	r3, r2
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	4403      	add	r3, r0
 800eef6:	3304      	adds	r3, #4
 800eef8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800eefa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eefe:	4910      	ldr	r1, [pc, #64]	; (800ef40 <etharp_find_entry+0x37c>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	440b      	add	r3, r1
 800ef0a:	3312      	adds	r3, #18
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ef10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef14:	490a      	ldr	r1, [pc, #40]	; (800ef40 <etharp_find_entry+0x37c>)
 800ef16:	4613      	mov	r3, r2
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	00db      	lsls	r3, r3, #3
 800ef1e:	440b      	add	r3, r1
 800ef20:	3308      	adds	r3, #8
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ef26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3728      	adds	r7, #40	; 0x28
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	08016264 	.word	0x08016264
 800ef38:	080164c4 	.word	0x080164c4
 800ef3c:	080162dc 	.word	0x080162dc
 800ef40:	20000120 	.word	0x20000120
 800ef44:	080164d8 	.word	0x080164d8

0800ef48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	b08e      	sub	sp, #56	; 0x38
 800ef4e:	af08      	add	r7, sp, #32
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	607a      	str	r2, [r7, #4]
 800ef56:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef5e:	2b06      	cmp	r3, #6
 800ef60:	d006      	beq.n	800ef70 <etharp_update_arp_entry+0x28>
 800ef62:	4b64      	ldr	r3, [pc, #400]	; (800f0f4 <etharp_update_arp_entry+0x1ac>)
 800ef64:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ef68:	4963      	ldr	r1, [pc, #396]	; (800f0f8 <etharp_update_arp_entry+0x1b0>)
 800ef6a:	4864      	ldr	r0, [pc, #400]	; (800f0fc <etharp_update_arp_entry+0x1b4>)
 800ef6c:	f002 fbaa 	bl	80116c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	469c      	mov	ip, r3
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	469e      	mov	lr, r3
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	3302      	adds	r3, #2
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	4698      	mov	r8, r3
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3303      	adds	r3, #3
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	4619      	mov	r1, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	785b      	ldrb	r3, [r3, #1]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	789b      	ldrb	r3, [r3, #2]
 800ef9e:	461c      	mov	r4, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	78db      	ldrb	r3, [r3, #3]
 800efa4:	461d      	mov	r5, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	791b      	ldrb	r3, [r3, #4]
 800efaa:	461e      	mov	r6, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	795b      	ldrb	r3, [r3, #5]
 800efb0:	9306      	str	r3, [sp, #24]
 800efb2:	9605      	str	r6, [sp, #20]
 800efb4:	9504      	str	r5, [sp, #16]
 800efb6:	9403      	str	r4, [sp, #12]
 800efb8:	9002      	str	r0, [sp, #8]
 800efba:	9101      	str	r1, [sp, #4]
 800efbc:	9200      	str	r2, [sp, #0]
 800efbe:	4643      	mov	r3, r8
 800efc0:	4672      	mov	r2, lr
 800efc2:	4661      	mov	r1, ip
 800efc4:	484e      	ldr	r0, [pc, #312]	; (800f100 <etharp_update_arp_entry+0x1b8>)
 800efc6:	f002 fb7d 	bl	80116c4 <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d012      	beq.n	800eff6 <etharp_update_arp_entry+0xae>
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00e      	beq.n	800eff6 <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68f9      	ldr	r1, [r7, #12]
 800efde:	4618      	mov	r0, r3
 800efe0:	f001 fb72 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800efe4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eff2:	2be0      	cmp	r3, #224	; 0xe0
 800eff4:	d105      	bne.n	800f002 <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 800eff6:	4843      	ldr	r0, [pc, #268]	; (800f104 <etharp_update_arp_entry+0x1bc>)
 800eff8:	f002 fbec 	bl	80117d4 <puts>
    return ERR_ARG;
 800effc:	f06f 030f 	mvn.w	r3, #15
 800f000:	e072      	b.n	800f0e8 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4619      	mov	r1, r3
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	f7ff fddb 	bl	800ebc4 <etharp_find_entry>
 800f00e:	4603      	mov	r3, r0
 800f010:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f016:	2b00      	cmp	r3, #0
 800f018:	da02      	bge.n	800f020 <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 800f01a:	8afb      	ldrh	r3, [r7, #22]
 800f01c:	b25b      	sxtb	r3, r3
 800f01e:	e063      	b.n	800f0e8 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f024:	4938      	ldr	r1, [pc, #224]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f026:	4613      	mov	r3, r2
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	440b      	add	r3, r1
 800f030:	3314      	adds	r3, #20
 800f032:	2202      	movs	r2, #2
 800f034:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f036:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f03a:	4933      	ldr	r1, [pc, #204]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f03c:	4613      	mov	r3, r2
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	4413      	add	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	440b      	add	r3, r1
 800f046:	3308      	adds	r3, #8
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 800f04c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f050:	4619      	mov	r1, r3
 800f052:	482e      	ldr	r0, [pc, #184]	; (800f10c <etharp_update_arp_entry+0x1c4>)
 800f054:	f002 fb36 	bl	80116c4 <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f058:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f05c:	4613      	mov	r3, r2
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	4413      	add	r3, r2
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	3308      	adds	r3, #8
 800f066:	4a28      	ldr	r2, [pc, #160]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f068:	4413      	add	r3, r2
 800f06a:	3304      	adds	r3, #4
 800f06c:	2206      	movs	r2, #6
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	f002 fb14 	bl	801169e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f076:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f07a:	4923      	ldr	r1, [pc, #140]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f07c:	4613      	mov	r3, r2
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	4413      	add	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	440b      	add	r3, r1
 800f086:	3312      	adds	r3, #18
 800f088:	2200      	movs	r2, #0
 800f08a:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f08c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f090:	491d      	ldr	r1, [pc, #116]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f092:	4613      	mov	r3, r2
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	4413      	add	r3, r2
 800f098:	00db      	lsls	r3, r3, #3
 800f09a:	440b      	add	r3, r1
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d021      	beq.n	800f0e6 <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 800f0a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0a6:	4918      	ldr	r1, [pc, #96]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	4413      	add	r3, r2
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	440b      	add	r3, r1
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f0b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f0ba:	4913      	ldr	r1, [pc, #76]	; (800f108 <etharp_update_arp_entry+0x1c0>)
 800f0bc:	4613      	mov	r3, r2
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	4413      	add	r3, r2
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	440b      	add	r3, r1
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6939      	ldr	r1, [r7, #16]
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f002 fa5a 	bl	8011594 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f0e0:	6938      	ldr	r0, [r7, #16]
 800f0e2:	f7f7 f8db 	bl	800629c <pbuf_free>
  }
  return ERR_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f2:	bf00      	nop
 800f0f4:	08016264 	.word	0x08016264
 800f0f8:	08016504 	.word	0x08016504
 800f0fc:	080162dc 	.word	0x080162dc
 800f100:	08016528 	.word	0x08016528
 800f104:	08016578 	.word	0x08016578
 800f108:	20000120 	.word	0x20000120
 800f10c:	080165c4 	.word	0x080165c4

0800f110 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f118:	2300      	movs	r3, #0
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	e01e      	b.n	800f15c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f11e:	4913      	ldr	r1, [pc, #76]	; (800f16c <etharp_cleanup_netif+0x5c>)
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	4613      	mov	r3, r2
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	4413      	add	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	440b      	add	r3, r1
 800f12c:	3314      	adds	r3, #20
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f132:	7afb      	ldrb	r3, [r7, #11]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00e      	beq.n	800f156 <etharp_cleanup_netif+0x46>
 800f138:	490c      	ldr	r1, [pc, #48]	; (800f16c <etharp_cleanup_netif+0x5c>)
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	4613      	mov	r3, r2
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	4413      	add	r3, r2
 800f142:	00db      	lsls	r3, r3, #3
 800f144:	440b      	add	r3, r1
 800f146:	3308      	adds	r3, #8
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d102      	bne.n	800f156 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7ff fbff 	bl	800e954 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b09      	cmp	r3, #9
 800f160:	dddd      	ble.n	800f11e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	20000120 	.word	0x20000120

0800f170 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f170:	b5b0      	push	{r4, r5, r7, lr}
 800f172:	b08a      	sub	sp, #40	; 0x28
 800f174:	af04      	add	r7, sp, #16
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <etharp_input+0x20>
 800f180:	4b57      	ldr	r3, [pc, #348]	; (800f2e0 <etharp_input+0x170>)
 800f182:	f240 228a 	movw	r2, #650	; 0x28a
 800f186:	4957      	ldr	r1, [pc, #348]	; (800f2e4 <etharp_input+0x174>)
 800f188:	4857      	ldr	r0, [pc, #348]	; (800f2e8 <etharp_input+0x178>)
 800f18a:	f002 fa9b 	bl	80116c4 <iprintf>
 800f18e:	e0a4      	b.n	800f2da <etharp_input+0x16a>

  hdr = (struct etharp_hdr *)p->payload;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1a0:	d10c      	bne.n	800f1bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f1a6:	2b06      	cmp	r3, #6
 800f1a8:	d108      	bne.n	800f1bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f1ae:	2b04      	cmp	r3, #4
 800f1b0:	d104      	bne.n	800f1bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	885b      	ldrh	r3, [r3, #2]
 800f1b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f1b8:	2b08      	cmp	r3, #8
 800f1ba:	d015      	beq.n	800f1e8 <etharp_input+0x78>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	791b      	ldrb	r3, [r3, #4]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	885b      	ldrh	r3, [r3, #2]
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	795b      	ldrb	r3, [r3, #5]
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	4603      	mov	r3, r0
 800f1da:	4844      	ldr	r0, [pc, #272]	; (800f2ec <etharp_input+0x17c>)
 800f1dc:	f002 fa72 	bl	80116c4 <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7f7 f85b 	bl	800629c <pbuf_free>
    return;
 800f1e6:	e078      	b.n	800f2da <etharp_input+0x16a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	330e      	adds	r3, #14
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	3318      	adds	r3, #24
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d102      	bne.n	800f208 <etharp_input+0x98>
    for_us = 0;
 800f202:	2300      	movs	r3, #0
 800f204:	75fb      	strb	r3, [r7, #23]
 800f206:	e009      	b.n	800f21c <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	3304      	adds	r3, #4
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	429a      	cmp	r2, r3
 800f212:	bf0c      	ite	eq
 800f214:	2301      	moveq	r3, #1
 800f216:	2300      	movne	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	f103 0208 	add.w	r2, r3, #8
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <etharp_input+0xbc>
 800f228:	2301      	movs	r3, #1
 800f22a:	e000      	b.n	800f22e <etharp_input+0xbe>
 800f22c:	2302      	movs	r3, #2
 800f22e:	f107 010c 	add.w	r1, r7, #12
 800f232:	6838      	ldr	r0, [r7, #0]
 800f234:	f7ff fe88 	bl	800ef48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	88db      	ldrh	r3, [r3, #6]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f242:	d003      	beq.n	800f24c <etharp_input+0xdc>
 800f244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f248:	d02e      	beq.n	800f2a8 <etharp_input+0x138>
 800f24a:	e037      	b.n	800f2bc <etharp_input+0x14c>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 800f24c:	4828      	ldr	r0, [pc, #160]	; (800f2f0 <etharp_input+0x180>)
 800f24e:	f002 fac1 	bl	80117d4 <puts>
      /* ARP request for our address? */
      if (for_us) {
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01a      	beq.n	800f28e <etharp_input+0x11e>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f272:	2102      	movs	r1, #2
 800f274:	9103      	str	r1, [sp, #12]
 800f276:	f107 010c 	add.w	r1, r7, #12
 800f27a:	9102      	str	r1, [sp, #8]
 800f27c:	9201      	str	r2, [sp, #4]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	462b      	mov	r3, r5
 800f282:	4622      	mov	r2, r4
 800f284:	4601      	mov	r1, r0
 800f286:	6838      	ldr	r0, [r7, #0]
 800f288:	f000 fb3e 	bl	800f908 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 800f28c:	e022      	b.n	800f2d4 <etharp_input+0x164>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	3304      	adds	r3, #4
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d103      	bne.n	800f2a0 <etharp_input+0x130>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 800f298:	4816      	ldr	r0, [pc, #88]	; (800f2f4 <etharp_input+0x184>)
 800f29a:	f002 fa9b 	bl	80117d4 <puts>
      break;
 800f29e:	e019      	b.n	800f2d4 <etharp_input+0x164>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 800f2a0:	4815      	ldr	r0, [pc, #84]	; (800f2f8 <etharp_input+0x188>)
 800f2a2:	f002 fa97 	bl	80117d4 <puts>
      break;
 800f2a6:	e015      	b.n	800f2d4 <etharp_input+0x164>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 800f2a8:	4814      	ldr	r0, [pc, #80]	; (800f2fc <etharp_input+0x18c>)
 800f2aa:	f002 fa93 	bl	80117d4 <puts>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 800f2ae:	f107 030c 	add.w	r3, r7, #12
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	6838      	ldr	r0, [r7, #0]
 800f2b6:	f7fd ff61 	bl	800d17c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 800f2ba:	e00b      	b.n	800f2d4 <etharp_input+0x164>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	88db      	ldrh	r3, [r3, #6]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7f5 fbc5 	bl	8004a52 <lwip_htons>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	480c      	ldr	r0, [pc, #48]	; (800f300 <etharp_input+0x190>)
 800f2ce:	f002 f9f9 	bl	80116c4 <iprintf>
      ETHARP_STATS_INC(etharp.err);
      break;
 800f2d2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7f6 ffe1 	bl	800629c <pbuf_free>
}
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bdb0      	pop	{r4, r5, r7, pc}
 800f2e0:	08016264 	.word	0x08016264
 800f2e4:	0801662c 	.word	0x0801662c
 800f2e8:	080162dc 	.word	0x080162dc
 800f2ec:	0801664c 	.word	0x0801664c
 800f2f0:	080166b4 	.word	0x080166b4
 800f2f4:	080166d8 	.word	0x080166d8
 800f2f8:	08016710 	.word	0x08016710
 800f2fc:	0801673c 	.word	0x0801673c
 800f300:	08016760 	.word	0x08016760

0800f304 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b086      	sub	sp, #24
 800f308:	af02      	add	r7, sp, #8
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	4613      	mov	r3, r2
 800f310:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f312:	79fa      	ldrb	r2, [r7, #7]
 800f314:	4944      	ldr	r1, [pc, #272]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f316:	4613      	mov	r3, r2
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	4413      	add	r3, r2
 800f31c:	00db      	lsls	r3, r3, #3
 800f31e:	440b      	add	r3, r1
 800f320:	3314      	adds	r3, #20
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2b01      	cmp	r3, #1
 800f326:	d806      	bhi.n	800f336 <etharp_output_to_arp_index+0x32>
 800f328:	4b40      	ldr	r3, [pc, #256]	; (800f42c <etharp_output_to_arp_index+0x128>)
 800f32a:	f240 22ef 	movw	r2, #751	; 0x2ef
 800f32e:	4940      	ldr	r1, [pc, #256]	; (800f430 <etharp_output_to_arp_index+0x12c>)
 800f330:	4840      	ldr	r0, [pc, #256]	; (800f434 <etharp_output_to_arp_index+0x130>)
 800f332:	f002 f9c7 	bl	80116c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f336:	79fa      	ldrb	r2, [r7, #7]
 800f338:	493b      	ldr	r1, [pc, #236]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f33a:	4613      	mov	r3, r2
 800f33c:	005b      	lsls	r3, r3, #1
 800f33e:	4413      	add	r3, r2
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	440b      	add	r3, r1
 800f344:	3314      	adds	r3, #20
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d153      	bne.n	800f3f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f34c:	79fa      	ldrb	r2, [r7, #7]
 800f34e:	4936      	ldr	r1, [pc, #216]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f350:	4613      	mov	r3, r2
 800f352:	005b      	lsls	r3, r3, #1
 800f354:	4413      	add	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	440b      	add	r3, r1
 800f35a:	3312      	adds	r3, #18
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f362:	d919      	bls.n	800f398 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f364:	79fa      	ldrb	r2, [r7, #7]
 800f366:	4613      	mov	r3, r2
 800f368:	005b      	lsls	r3, r3, #1
 800f36a:	4413      	add	r3, r2
 800f36c:	00db      	lsls	r3, r3, #3
 800f36e:	4a2e      	ldr	r2, [pc, #184]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f370:	4413      	add	r3, r2
 800f372:	3304      	adds	r3, #4
 800f374:	4619      	mov	r1, r3
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f000 fb7e 	bl	800fa78 <etharp_request>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d138      	bne.n	800f3f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f382:	79fa      	ldrb	r2, [r7, #7]
 800f384:	4928      	ldr	r1, [pc, #160]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f386:	4613      	mov	r3, r2
 800f388:	005b      	lsls	r3, r3, #1
 800f38a:	4413      	add	r3, r2
 800f38c:	00db      	lsls	r3, r3, #3
 800f38e:	440b      	add	r3, r1
 800f390:	3314      	adds	r3, #20
 800f392:	2203      	movs	r2, #3
 800f394:	701a      	strb	r2, [r3, #0]
 800f396:	e02d      	b.n	800f3f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f398:	79fa      	ldrb	r2, [r7, #7]
 800f39a:	4923      	ldr	r1, [pc, #140]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f39c:	4613      	mov	r3, r2
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	4413      	add	r3, r2
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	440b      	add	r3, r1
 800f3a6:	3312      	adds	r3, #18
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f3ae:	d321      	bcc.n	800f3f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f3b0:	79fa      	ldrb	r2, [r7, #7]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	00db      	lsls	r3, r3, #3
 800f3ba:	4a1b      	ldr	r2, [pc, #108]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f3bc:	4413      	add	r3, r2
 800f3be:	1d19      	adds	r1, r3, #4
 800f3c0:	79fa      	ldrb	r2, [r7, #7]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	4413      	add	r3, r2
 800f3c8:	00db      	lsls	r3, r3, #3
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	4a16      	ldr	r2, [pc, #88]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f3ce:	4413      	add	r3, r2
 800f3d0:	3304      	adds	r3, #4
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 fb2d 	bl	800fa34 <etharp_request_dst>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d109      	bne.n	800f3f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f3e0:	79fa      	ldrb	r2, [r7, #7]
 800f3e2:	4911      	ldr	r1, [pc, #68]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	4413      	add	r3, r2
 800f3ea:	00db      	lsls	r3, r3, #3
 800f3ec:	440b      	add	r3, r1
 800f3ee:	3314      	adds	r3, #20
 800f3f0:	2203      	movs	r2, #3
 800f3f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800f3fa:	79fa      	ldrb	r2, [r7, #7]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	4413      	add	r3, r2
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	3308      	adds	r3, #8
 800f406:	4a08      	ldr	r2, [pc, #32]	; (800f428 <etharp_output_to_arp_index+0x124>)
 800f408:	4413      	add	r3, r2
 800f40a:	1d1a      	adds	r2, r3, #4
 800f40c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	4613      	mov	r3, r2
 800f414:	460a      	mov	r2, r1
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f002 f8bb 	bl	8011594 <ethernet_output>
 800f41e:	4603      	mov	r3, r0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20000120 	.word	0x20000120
 800f42c:	08016264 	.word	0x08016264
 800f430:	0801678c 	.word	0x0801678c
 800f434:	080162dc 	.word	0x080162dc

0800f438 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08a      	sub	sp, #40	; 0x28
 800f43c:	af02      	add	r7, sp, #8
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <etharp_output+0x24>
 800f44e:	4b73      	ldr	r3, [pc, #460]	; (800f61c <etharp_output+0x1e4>)
 800f450:	f240 321e 	movw	r2, #798	; 0x31e
 800f454:	4972      	ldr	r1, [pc, #456]	; (800f620 <etharp_output+0x1e8>)
 800f456:	4873      	ldr	r0, [pc, #460]	; (800f624 <etharp_output+0x1ec>)
 800f458:	f002 f934 	bl	80116c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <etharp_output+0x38>
 800f462:	4b6e      	ldr	r3, [pc, #440]	; (800f61c <etharp_output+0x1e4>)
 800f464:	f240 321f 	movw	r2, #799	; 0x31f
 800f468:	496f      	ldr	r1, [pc, #444]	; (800f628 <etharp_output+0x1f0>)
 800f46a:	486e      	ldr	r0, [pc, #440]	; (800f624 <etharp_output+0x1ec>)
 800f46c:	f002 f92a 	bl	80116c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <etharp_output+0x4c>
 800f476:	4b69      	ldr	r3, [pc, #420]	; (800f61c <etharp_output+0x1e4>)
 800f478:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f47c:	496b      	ldr	r1, [pc, #428]	; (800f62c <etharp_output+0x1f4>)
 800f47e:	4869      	ldr	r0, [pc, #420]	; (800f624 <etharp_output+0x1ec>)
 800f480:	f002 f920 	bl	80116c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68f9      	ldr	r1, [r7, #12]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f001 f91c 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f496:	4b66      	ldr	r3, [pc, #408]	; (800f630 <etharp_output+0x1f8>)
 800f498:	61fb      	str	r3, [r7, #28]
 800f49a:	e0af      	b.n	800f5fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4a4:	2be0      	cmp	r3, #224	; 0xe0
 800f4a6:	d118      	bne.n	800f4da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f4b0:	235e      	movs	r3, #94	; 0x5e
 800f4b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	3302      	adds	r3, #2
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	3303      	adds	r3, #3
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f4d2:	f107 0310 	add.w	r3, r7, #16
 800f4d6:	61fb      	str	r3, [r7, #28]
 800f4d8:	e090      	b.n	800f5fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	405a      	eors	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d012      	beq.n	800f518 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f4f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d00b      	beq.n	800f518 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	330c      	adds	r3, #12
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	330c      	adds	r3, #12
 800f50e:	61bb      	str	r3, [r7, #24]
 800f510:	e002      	b.n	800f518 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f512:	f06f 0303 	mvn.w	r3, #3
 800f516:	e07d      	b.n	800f614 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f518:	4b46      	ldr	r3, [pc, #280]	; (800f634 <etharp_output+0x1fc>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	4619      	mov	r1, r3
 800f51e:	4a46      	ldr	r2, [pc, #280]	; (800f638 <etharp_output+0x200>)
 800f520:	460b      	mov	r3, r1
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	440b      	add	r3, r1
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	4413      	add	r3, r2
 800f52a:	3314      	adds	r3, #20
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d925      	bls.n	800f57e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f532:	4b40      	ldr	r3, [pc, #256]	; (800f634 <etharp_output+0x1fc>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	4619      	mov	r1, r3
 800f538:	4a3f      	ldr	r2, [pc, #252]	; (800f638 <etharp_output+0x200>)
 800f53a:	460b      	mov	r3, r1
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	440b      	add	r3, r1
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	4413      	add	r3, r2
 800f544:	3308      	adds	r3, #8
 800f546:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d117      	bne.n	800f57e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	681a      	ldr	r2, [r3, #0]
 800f552:	4b38      	ldr	r3, [pc, #224]	; (800f634 <etharp_output+0x1fc>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	4618      	mov	r0, r3
 800f558:	4937      	ldr	r1, [pc, #220]	; (800f638 <etharp_output+0x200>)
 800f55a:	4603      	mov	r3, r0
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	4403      	add	r3, r0
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	440b      	add	r3, r1
 800f564:	3304      	adds	r3, #4
 800f566:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f568:	429a      	cmp	r2, r3
 800f56a:	d108      	bne.n	800f57e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f56c:	4b31      	ldr	r3, [pc, #196]	; (800f634 <etharp_output+0x1fc>)
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	68b9      	ldr	r1, [r7, #8]
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f7ff fec5 	bl	800f304 <etharp_output_to_arp_index>
 800f57a:	4603      	mov	r3, r0
 800f57c:	e04a      	b.n	800f614 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f57e:	2300      	movs	r3, #0
 800f580:	75fb      	strb	r3, [r7, #23]
 800f582:	e031      	b.n	800f5e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f584:	7dfa      	ldrb	r2, [r7, #23]
 800f586:	492c      	ldr	r1, [pc, #176]	; (800f638 <etharp_output+0x200>)
 800f588:	4613      	mov	r3, r2
 800f58a:	005b      	lsls	r3, r3, #1
 800f58c:	4413      	add	r3, r2
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	440b      	add	r3, r1
 800f592:	3314      	adds	r3, #20
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	2b01      	cmp	r3, #1
 800f598:	d923      	bls.n	800f5e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f59a:	7dfa      	ldrb	r2, [r7, #23]
 800f59c:	4926      	ldr	r1, [pc, #152]	; (800f638 <etharp_output+0x200>)
 800f59e:	4613      	mov	r3, r2
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	4413      	add	r3, r2
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d117      	bne.n	800f5e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	6819      	ldr	r1, [r3, #0]
 800f5b6:	7dfa      	ldrb	r2, [r7, #23]
 800f5b8:	481f      	ldr	r0, [pc, #124]	; (800f638 <etharp_output+0x200>)
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	4413      	add	r3, r2
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	4403      	add	r3, r0
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f5c8:	4299      	cmp	r1, r3
 800f5ca:	d10a      	bne.n	800f5e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f5cc:	4a19      	ldr	r2, [pc, #100]	; (800f634 <etharp_output+0x1fc>)
 800f5ce:	7dfb      	ldrb	r3, [r7, #23]
 800f5d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f5d2:	7dfb      	ldrb	r3, [r7, #23]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	68b9      	ldr	r1, [r7, #8]
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f7ff fe93 	bl	800f304 <etharp_output_to_arp_index>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	e018      	b.n	800f614 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	75fb      	strb	r3, [r7, #23]
 800f5e8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ea:	2b09      	cmp	r3, #9
 800f5ec:	d9ca      	bls.n	800f584 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	69b9      	ldr	r1, [r7, #24]
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f000 f822 	bl	800f63c <etharp_query>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	e00b      	b.n	800f614 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	68b9      	ldr	r1, [r7, #8]
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f001 ffc1 	bl	8011594 <ethernet_output>
 800f612:	4603      	mov	r3, r0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3720      	adds	r7, #32
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	08016264 	.word	0x08016264
 800f620:	0801662c 	.word	0x0801662c
 800f624:	080162dc 	.word	0x080162dc
 800f628:	080167bc 	.word	0x080167bc
 800f62c:	0801661c 	.word	0x0801661c
 800f630:	08017680 	.word	0x08017680
 800f634:	20000210 	.word	0x20000210
 800f638:	20000120 	.word	0x20000120

0800f63c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08c      	sub	sp, #48	; 0x30
 800f640:	af02      	add	r7, sp, #8
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	332a      	adds	r3, #42	; 0x2a
 800f64c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f64e:	23ff      	movs	r3, #255	; 0xff
 800f650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68f9      	ldr	r1, [r7, #12]
 800f65e:	4618      	mov	r0, r3
 800f660:	f001 f832 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d10c      	bne.n	800f684 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f672:	2be0      	cmp	r3, #224	; 0xe0
 800f674:	d006      	beq.n	800f684 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d003      	beq.n	800f684 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d105      	bne.n	800f690 <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 800f684:	4892      	ldr	r0, [pc, #584]	; (800f8d0 <etharp_query+0x294>)
 800f686:	f002 f8a5 	bl	80117d4 <puts>
    return ERR_ARG;
 800f68a:	f06f 030f 	mvn.w	r3, #15
 800f68e:	e11b      	b.n	800f8c8 <etharp_query+0x28c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	2101      	movs	r1, #1
 800f694:	68b8      	ldr	r0, [r7, #8]
 800f696:	f7ff fa95 	bl	800ebc4 <etharp_find_entry>
 800f69a:	4603      	mov	r3, r0
 800f69c:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f69e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	da0b      	bge.n	800f6be <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 800f6a6:	488b      	ldr	r0, [pc, #556]	; (800f8d4 <etharp_query+0x298>)
 800f6a8:	f002 f894 	bl	80117d4 <puts>
    if (q) {
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <etharp_query+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 800f6b2:	4889      	ldr	r0, [pc, #548]	; (800f8d8 <etharp_query+0x29c>)
 800f6b4:	f002 f88e 	bl	80117d4 <puts>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f6b8:	8a7b      	ldrh	r3, [r7, #18]
 800f6ba:	b25b      	sxtb	r3, r3
 800f6bc:	e104      	b.n	800f8c8 <etharp_query+0x28c>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f6be:	8a7b      	ldrh	r3, [r7, #18]
 800f6c0:	2b7e      	cmp	r3, #126	; 0x7e
 800f6c2:	d906      	bls.n	800f6d2 <etharp_query+0x96>
 800f6c4:	4b85      	ldr	r3, [pc, #532]	; (800f8dc <etharp_query+0x2a0>)
 800f6c6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f6ca:	4985      	ldr	r1, [pc, #532]	; (800f8e0 <etharp_query+0x2a4>)
 800f6cc:	4885      	ldr	r0, [pc, #532]	; (800f8e4 <etharp_query+0x2a8>)
 800f6ce:	f001 fff9 	bl	80116c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f6d2:	8a7b      	ldrh	r3, [r7, #18]
 800f6d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f6d6:	7c7a      	ldrb	r2, [r7, #17]
 800f6d8:	4983      	ldr	r1, [pc, #524]	; (800f8e8 <etharp_query+0x2ac>)
 800f6da:	4613      	mov	r3, r2
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	4413      	add	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	440b      	add	r3, r1
 800f6e4:	3314      	adds	r3, #20
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d115      	bne.n	800f718 <etharp_query+0xdc>
    is_new_entry = 1;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f6f0:	7c7a      	ldrb	r2, [r7, #17]
 800f6f2:	497d      	ldr	r1, [pc, #500]	; (800f8e8 <etharp_query+0x2ac>)
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	4413      	add	r3, r2
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	440b      	add	r3, r1
 800f6fe:	3314      	adds	r3, #20
 800f700:	2201      	movs	r2, #1
 800f702:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f704:	7c7a      	ldrb	r2, [r7, #17]
 800f706:	4978      	ldr	r1, [pc, #480]	; (800f8e8 <etharp_query+0x2ac>)
 800f708:	4613      	mov	r3, r2
 800f70a:	005b      	lsls	r3, r3, #1
 800f70c:	4413      	add	r3, r2
 800f70e:	00db      	lsls	r3, r3, #3
 800f710:	440b      	add	r3, r1
 800f712:	3308      	adds	r3, #8
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f718:	7c7a      	ldrb	r2, [r7, #17]
 800f71a:	4973      	ldr	r1, [pc, #460]	; (800f8e8 <etharp_query+0x2ac>)
 800f71c:	4613      	mov	r3, r2
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	4413      	add	r3, r2
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	440b      	add	r3, r1
 800f726:	3314      	adds	r3, #20
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d011      	beq.n	800f752 <etharp_query+0x116>
 800f72e:	7c7a      	ldrb	r2, [r7, #17]
 800f730:	496d      	ldr	r1, [pc, #436]	; (800f8e8 <etharp_query+0x2ac>)
 800f732:	4613      	mov	r3, r2
 800f734:	005b      	lsls	r3, r3, #1
 800f736:	4413      	add	r3, r2
 800f738:	00db      	lsls	r3, r3, #3
 800f73a:	440b      	add	r3, r1
 800f73c:	3314      	adds	r3, #20
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d806      	bhi.n	800f752 <etharp_query+0x116>
 800f744:	4b65      	ldr	r3, [pc, #404]	; (800f8dc <etharp_query+0x2a0>)
 800f746:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f74a:	4968      	ldr	r1, [pc, #416]	; (800f8ec <etharp_query+0x2b0>)
 800f74c:	4865      	ldr	r0, [pc, #404]	; (800f8e4 <etharp_query+0x2a8>)
 800f74e:	f001 ffb9 	bl	80116c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f752:	6a3b      	ldr	r3, [r7, #32]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <etharp_query+0x122>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d10c      	bne.n	800f778 <etharp_query+0x13c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f75e:	68b9      	ldr	r1, [r7, #8]
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f000 f989 	bl	800fa78 <etharp_request>
 800f766:	4603      	mov	r3, r0
 800f768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d102      	bne.n	800f778 <etharp_query+0x13c>
      return result;
 800f772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f776:	e0a7      	b.n	800f8c8 <etharp_query+0x28c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d106      	bne.n	800f78c <etharp_query+0x150>
 800f77e:	4b57      	ldr	r3, [pc, #348]	; (800f8dc <etharp_query+0x2a0>)
 800f780:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f784:	495a      	ldr	r1, [pc, #360]	; (800f8f0 <etharp_query+0x2b4>)
 800f786:	4857      	ldr	r0, [pc, #348]	; (800f8e4 <etharp_query+0x2a8>)
 800f788:	f001 ff9c 	bl	80116c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f78c:	7c7a      	ldrb	r2, [r7, #17]
 800f78e:	4956      	ldr	r1, [pc, #344]	; (800f8e8 <etharp_query+0x2ac>)
 800f790:	4613      	mov	r3, r2
 800f792:	005b      	lsls	r3, r3, #1
 800f794:	4413      	add	r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	440b      	add	r3, r1
 800f79a:	3314      	adds	r3, #20
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d918      	bls.n	800f7d4 <etharp_query+0x198>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f7a2:	4a54      	ldr	r2, [pc, #336]	; (800f8f4 <etharp_query+0x2b8>)
 800f7a4:	7c7b      	ldrb	r3, [r7, #17]
 800f7a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7a8:	7c7a      	ldrb	r2, [r7, #17]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	4413      	add	r3, r2
 800f7b0:	00db      	lsls	r3, r3, #3
 800f7b2:	3308      	adds	r3, #8
 800f7b4:	4a4c      	ldr	r2, [pc, #304]	; (800f8e8 <etharp_query+0x2ac>)
 800f7b6:	4413      	add	r3, r2
 800f7b8:	1d1a      	adds	r2, r3, #4
 800f7ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	697a      	ldr	r2, [r7, #20]
 800f7c4:	6879      	ldr	r1, [r7, #4]
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f001 fee4 	bl	8011594 <ethernet_output>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7d2:	e077      	b.n	800f8c4 <etharp_query+0x288>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f7d4:	7c7a      	ldrb	r2, [r7, #17]
 800f7d6:	4944      	ldr	r1, [pc, #272]	; (800f8e8 <etharp_query+0x2ac>)
 800f7d8:	4613      	mov	r3, r2
 800f7da:	005b      	lsls	r3, r3, #1
 800f7dc:	4413      	add	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	440b      	add	r3, r1
 800f7e2:	3314      	adds	r3, #20
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d16c      	bne.n	800f8c4 <etharp_query+0x288>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f7f2:	e01c      	b.n	800f82e <etharp_query+0x1f2>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	895a      	ldrh	r2, [r3, #10]
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	891b      	ldrh	r3, [r3, #8]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d10a      	bne.n	800f816 <etharp_query+0x1da>
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d006      	beq.n	800f816 <etharp_query+0x1da>
 800f808:	4b34      	ldr	r3, [pc, #208]	; (800f8dc <etharp_query+0x2a0>)
 800f80a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f80e:	493a      	ldr	r1, [pc, #232]	; (800f8f8 <etharp_query+0x2bc>)
 800f810:	4834      	ldr	r0, [pc, #208]	; (800f8e4 <etharp_query+0x2a8>)
 800f812:	f001 ff57 	bl	80116c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	7b1b      	ldrb	r3, [r3, #12]
 800f81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <etharp_query+0x1ec>
        copy_needed = 1;
 800f822:	2301      	movs	r3, #1
 800f824:	61bb      	str	r3, [r7, #24]
        break;
 800f826:	e005      	b.n	800f834 <etharp_query+0x1f8>
      }
      p = p->next;
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1df      	bne.n	800f7f4 <etharp_query+0x1b8>
    }
    if (copy_needed) {
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d007      	beq.n	800f84a <etharp_query+0x20e>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f840:	200e      	movs	r0, #14
 800f842:	f7f6 ffc3 	bl	80067cc <pbuf_clone>
 800f846:	61f8      	str	r0, [r7, #28]
 800f848:	e004      	b.n	800f854 <etharp_query+0x218>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f84e:	69f8      	ldr	r0, [r7, #28]
 800f850:	f7f6 fddc 	bl	800640c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d02d      	beq.n	800f8b6 <etharp_query+0x27a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f85a:	7c7a      	ldrb	r2, [r7, #17]
 800f85c:	4922      	ldr	r1, [pc, #136]	; (800f8e8 <etharp_query+0x2ac>)
 800f85e:	4613      	mov	r3, r2
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	4413      	add	r3, r2
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	440b      	add	r3, r1
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d010      	beq.n	800f890 <etharp_query+0x254>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800f86e:	7c7b      	ldrb	r3, [r7, #17]
 800f870:	461a      	mov	r2, r3
 800f872:	6879      	ldr	r1, [r7, #4]
 800f874:	4821      	ldr	r0, [pc, #132]	; (800f8fc <etharp_query+0x2c0>)
 800f876:	f001 ff25 	bl	80116c4 <iprintf>
        pbuf_free(arp_table[i].q);
 800f87a:	7c7a      	ldrb	r2, [r7, #17]
 800f87c:	491a      	ldr	r1, [pc, #104]	; (800f8e8 <etharp_query+0x2ac>)
 800f87e:	4613      	mov	r3, r2
 800f880:	005b      	lsls	r3, r3, #1
 800f882:	4413      	add	r3, r2
 800f884:	00db      	lsls	r3, r3, #3
 800f886:	440b      	add	r3, r1
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f6 fd06 	bl	800629c <pbuf_free>
      }
      arp_table[i].q = p;
 800f890:	7c7a      	ldrb	r2, [r7, #17]
 800f892:	4915      	ldr	r1, [pc, #84]	; (800f8e8 <etharp_query+0x2ac>)
 800f894:	4613      	mov	r3, r2
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	4413      	add	r3, r2
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	440b      	add	r3, r1
 800f89e:	69fa      	ldr	r2, [r7, #28]
 800f8a0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800f8a8:	7c7b      	ldrb	r3, [r7, #17]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	4814      	ldr	r0, [pc, #80]	; (800f900 <etharp_query+0x2c4>)
 800f8b0:	f001 ff08 	bl	80116c4 <iprintf>
 800f8b4:	e006      	b.n	800f8c4 <etharp_query+0x288>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 800f8b6:	6879      	ldr	r1, [r7, #4]
 800f8b8:	4812      	ldr	r0, [pc, #72]	; (800f904 <etharp_query+0x2c8>)
 800f8ba:	f001 ff03 	bl	80116c4 <iprintf>
      result = ERR_MEM;
 800f8be:	23ff      	movs	r3, #255	; 0xff
 800f8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f8c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3728      	adds	r7, #40	; 0x28
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	080167c8 	.word	0x080167c8
 800f8d4:	08016808 	.word	0x08016808
 800f8d8:	08016834 	.word	0x08016834
 800f8dc:	08016264 	.word	0x08016264
 800f8e0:	08016854 	.word	0x08016854
 800f8e4:	080162dc 	.word	0x080162dc
 800f8e8:	20000120 	.word	0x20000120
 800f8ec:	08016864 	.word	0x08016864
 800f8f0:	080167bc 	.word	0x080167bc
 800f8f4:	20000210 	.word	0x20000210
 800f8f8:	0801688c 	.word	0x0801688c
 800f8fc:	080168a8 	.word	0x080168a8
 800f900:	080168f0 	.word	0x080168f0
 800f904:	08016924 	.word	0x08016924

0800f908 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08a      	sub	sp, #40	; 0x28
 800f90c:	af02      	add	r7, sp, #8
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d106      	bne.n	800f92e <etharp_raw+0x26>
 800f920:	4b3d      	ldr	r3, [pc, #244]	; (800fa18 <etharp_raw+0x110>)
 800f922:	f240 4257 	movw	r2, #1111	; 0x457
 800f926:	493d      	ldr	r1, [pc, #244]	; (800fa1c <etharp_raw+0x114>)
 800f928:	483d      	ldr	r0, [pc, #244]	; (800fa20 <etharp_raw+0x118>)
 800f92a:	f001 fecb 	bl	80116c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f92e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f932:	211c      	movs	r1, #28
 800f934:	200e      	movs	r0, #14
 800f936:	f7f6 f98b 	bl	8005c50 <pbuf_alloc>
 800f93a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d105      	bne.n	800f94e <etharp_raw+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 800f942:	4838      	ldr	r0, [pc, #224]	; (800fa24 <etharp_raw+0x11c>)
 800f944:	f001 ff46 	bl	80117d4 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f948:	f04f 33ff 	mov.w	r3, #4294967295
 800f94c:	e060      	b.n	800fa10 <etharp_raw+0x108>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	895b      	ldrh	r3, [r3, #10]
 800f952:	2b1b      	cmp	r3, #27
 800f954:	d806      	bhi.n	800f964 <etharp_raw+0x5c>
 800f956:	4b30      	ldr	r3, [pc, #192]	; (800fa18 <etharp_raw+0x110>)
 800f958:	f240 4263 	movw	r2, #1123	; 0x463
 800f95c:	4932      	ldr	r1, [pc, #200]	; (800fa28 <etharp_raw+0x120>)
 800f95e:	4830      	ldr	r0, [pc, #192]	; (800fa20 <etharp_raw+0x118>)
 800f960:	f001 feb0 	bl	80116c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 800f96a:	4830      	ldr	r0, [pc, #192]	; (800fa2c <etharp_raw+0x124>)
 800f96c:	f001 ff32 	bl	80117d4 <puts>
  hdr->opcode = lwip_htons(opcode);
 800f970:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f972:	4618      	mov	r0, r3
 800f974:	f7f5 f86d 	bl	8004a52 <lwip_htons>
 800f978:	4603      	mov	r3, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f986:	2b06      	cmp	r3, #6
 800f988:	d006      	beq.n	800f998 <etharp_raw+0x90>
 800f98a:	4b23      	ldr	r3, [pc, #140]	; (800fa18 <etharp_raw+0x110>)
 800f98c:	f240 426a 	movw	r2, #1130	; 0x46a
 800f990:	4927      	ldr	r1, [pc, #156]	; (800fa30 <etharp_raw+0x128>)
 800f992:	4823      	ldr	r0, [pc, #140]	; (800fa20 <etharp_raw+0x118>)
 800f994:	f001 fe96 	bl	80116c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	3308      	adds	r3, #8
 800f99c:	2206      	movs	r2, #6
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f001 fe7c 	bl	801169e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	3312      	adds	r3, #18
 800f9aa:	2206      	movs	r2, #6
 800f9ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f001 fe75 	bl	801169e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	330e      	adds	r3, #14
 800f9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9ba:	6812      	ldr	r2, [r2, #0]
 800f9bc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	3318      	adds	r3, #24
 800f9c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c4:	6812      	ldr	r2, [r2, #0]
 800f9c6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	701a      	strb	r2, [r3, #0]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f042 0201 	orr.w	r2, r2, #1
 800f9d4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f042 0208 	orr.w	r2, r2, #8
 800f9de:	709a      	strb	r2, [r3, #2]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	2206      	movs	r2, #6
 800f9e8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	2204      	movs	r2, #4
 800f9ee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f9f0:	f640 0306 	movw	r3, #2054	; 0x806
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	69b9      	ldr	r1, [r7, #24]
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	f001 fdc9 	bl	8011594 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fa02:	69b8      	ldr	r0, [r7, #24]
 800fa04:	f7f6 fc4a 	bl	800629c <pbuf_free>
  p = NULL;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fa0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3720      	adds	r7, #32
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	08016264 	.word	0x08016264
 800fa1c:	0801662c 	.word	0x0801662c
 800fa20:	080162dc 	.word	0x080162dc
 800fa24:	08016970 	.word	0x08016970
 800fa28:	080169a8 	.word	0x080169a8
 800fa2c:	080169dc 	.word	0x080169dc
 800fa30:	08016a00 	.word	0x08016a00

0800fa34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af04      	add	r7, sp, #16
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa50:	2201      	movs	r2, #1
 800fa52:	9203      	str	r2, [sp, #12]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	9202      	str	r2, [sp, #8]
 800fa58:	4a06      	ldr	r2, [pc, #24]	; (800fa74 <etharp_request_dst+0x40>)
 800fa5a:	9201      	str	r2, [sp, #4]
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4603      	mov	r3, r0
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f7ff ff50 	bl	800f908 <etharp_raw>
 800fa68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	08017688 	.word	0x08017688

0800fa78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 800fa82:	4806      	ldr	r0, [pc, #24]	; (800fa9c <etharp_request+0x24>)
 800fa84:	f001 fea6 	bl	80117d4 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fa88:	4a05      	ldr	r2, [pc, #20]	; (800faa0 <etharp_request+0x28>)
 800fa8a:	6839      	ldr	r1, [r7, #0]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ffd1 	bl	800fa34 <etharp_request_dst>
 800fa92:	4603      	mov	r3, r0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	08016a44 	.word	0x08016a44
 800faa0:	08017680 	.word	0x08017680

0800faa4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08e      	sub	sp, #56	; 0x38
 800faa8:	af04      	add	r7, sp, #16
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800faae:	4b7c      	ldr	r3, [pc, #496]	; (800fca0 <icmp_input+0x1fc>)
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	f003 030f 	and.w	r3, r3, #15
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	009b      	lsls	r3, r3, #2
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fac6:	2b13      	cmp	r3, #19
 800fac8:	f240 80d2 	bls.w	800fc70 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	895b      	ldrh	r3, [r3, #10]
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	f240 80cf 	bls.w	800fc74 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	785b      	ldrb	r3, [r3, #1]
 800fae6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800faea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f000 80b7 	beq.w	800fc62 <icmp_input+0x1be>
 800faf4:	2b08      	cmp	r3, #8
 800faf6:	f040 80b7 	bne.w	800fc68 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fafa:	4b6a      	ldr	r3, [pc, #424]	; (800fca4 <icmp_input+0x200>)
 800fafc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fafe:	4b68      	ldr	r3, [pc, #416]	; (800fca0 <icmp_input+0x1fc>)
 800fb00:	695b      	ldr	r3, [r3, #20]
 800fb02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb06:	2be0      	cmp	r3, #224	; 0xe0
 800fb08:	f000 80bb 	beq.w	800fc82 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fb0c:	4b64      	ldr	r3, [pc, #400]	; (800fca0 <icmp_input+0x1fc>)
 800fb0e:	695a      	ldr	r2, [r3, #20]
 800fb10:	4b63      	ldr	r3, [pc, #396]	; (800fca0 <icmp_input+0x1fc>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4610      	mov	r0, r2
 800fb18:	f000 fdd6 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f040 80b1 	bne.w	800fc86 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	891b      	ldrh	r3, [r3, #8]
 800fb28:	2b07      	cmp	r3, #7
 800fb2a:	f240 80a5 	bls.w	800fc78 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb30:	330e      	adds	r3, #14
 800fb32:	4619      	mov	r1, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7f6 fb13 	bl	8006160 <pbuf_add_header>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d04b      	beq.n	800fbd8 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	891a      	ldrh	r2, [r3, #8]
 800fb44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb46:	4413      	add	r3, r2
 800fb48:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	891b      	ldrh	r3, [r3, #8]
 800fb4e:	8b7a      	ldrh	r2, [r7, #26]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	f0c0 809a 	bcc.w	800fc8a <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fb56:	8b7b      	ldrh	r3, [r7, #26]
 800fb58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	200e      	movs	r0, #14
 800fb60:	f7f6 f876 	bl	8005c50 <pbuf_alloc>
 800fb64:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f000 8090 	beq.w	800fc8e <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	895b      	ldrh	r3, [r3, #10]
 800fb72:	461a      	mov	r2, r3
 800fb74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb76:	3308      	adds	r3, #8
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d203      	bcs.n	800fb84 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fb7c:	6978      	ldr	r0, [r7, #20]
 800fb7e:	f7f6 fb8d 	bl	800629c <pbuf_free>
          goto icmperr;
 800fb82:	e085      	b.n	800fc90 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f001 fd86 	bl	801169e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fb92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb94:	4619      	mov	r1, r3
 800fb96:	6978      	ldr	r0, [r7, #20]
 800fb98:	f7f6 faf2 	bl	8006180 <pbuf_remove_header>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d009      	beq.n	800fbb6 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fba2:	4b41      	ldr	r3, [pc, #260]	; (800fca8 <icmp_input+0x204>)
 800fba4:	22b6      	movs	r2, #182	; 0xb6
 800fba6:	4941      	ldr	r1, [pc, #260]	; (800fcac <icmp_input+0x208>)
 800fba8:	4841      	ldr	r0, [pc, #260]	; (800fcb0 <icmp_input+0x20c>)
 800fbaa:	f001 fd8b 	bl	80116c4 <iprintf>
          pbuf_free(r);
 800fbae:	6978      	ldr	r0, [r7, #20]
 800fbb0:	f7f6 fb74 	bl	800629c <pbuf_free>
          goto icmperr;
 800fbb4:	e06c      	b.n	800fc90 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fbb6:	6879      	ldr	r1, [r7, #4]
 800fbb8:	6978      	ldr	r0, [r7, #20]
 800fbba:	f7f6 fcb7 	bl	800652c <pbuf_copy>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d003      	beq.n	800fbcc <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fbc4:	6978      	ldr	r0, [r7, #20]
 800fbc6:	f7f6 fb69 	bl	800629c <pbuf_free>
          goto icmperr;
 800fbca:	e061      	b.n	800fc90 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7f6 fb65 	bl	800629c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	607b      	str	r3, [r7, #4]
 800fbd6:	e00f      	b.n	800fbf8 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fbd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbda:	330e      	adds	r3, #14
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7f6 face 	bl	8006180 <pbuf_remove_header>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d006      	beq.n	800fbf8 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fbea:	4b2f      	ldr	r3, [pc, #188]	; (800fca8 <icmp_input+0x204>)
 800fbec:	22c7      	movs	r2, #199	; 0xc7
 800fbee:	4931      	ldr	r1, [pc, #196]	; (800fcb4 <icmp_input+0x210>)
 800fbf0:	482f      	ldr	r0, [pc, #188]	; (800fcb0 <icmp_input+0x20c>)
 800fbf2:	f001 fd67 	bl	80116c4 <iprintf>
          goto icmperr;
 800fbf6:	e04b      	b.n	800fc90 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fbfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc00:	4619      	mov	r1, r3
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f7f6 faac 	bl	8006160 <pbuf_add_header>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d12b      	bne.n	800fc66 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fc1c:	4b20      	ldr	r3, [pc, #128]	; (800fca0 <icmp_input+0x1fc>)
 800fc1e:	691a      	ldr	r2, [r3, #16]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	2200      	movs	r2, #0
 800fc28:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	709a      	strb	r2, [r3, #2]
 800fc30:	2200      	movs	r2, #0
 800fc32:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	22ff      	movs	r2, #255	; 0xff
 800fc38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	729a      	strb	r2, [r3, #10]
 800fc40:	2200      	movs	r2, #0
 800fc42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	9302      	str	r3, [sp, #8]
 800fc48:	2301      	movs	r3, #1
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	23ff      	movs	r3, #255	; 0xff
 800fc52:	2200      	movs	r2, #0
 800fc54:	69f9      	ldr	r1, [r7, #28]
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fb78 	bl	801034c <ip4_output_if>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fc60:	e001      	b.n	800fc66 <icmp_input+0x1c2>
      break;
 800fc62:	bf00      	nop
 800fc64:	e000      	b.n	800fc68 <icmp_input+0x1c4>
      break;
 800fc66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7f6 fb17 	bl	800629c <pbuf_free>
  return;
 800fc6e:	e013      	b.n	800fc98 <icmp_input+0x1f4>
    goto lenerr;
 800fc70:	bf00      	nop
 800fc72:	e002      	b.n	800fc7a <icmp_input+0x1d6>
    goto lenerr;
 800fc74:	bf00      	nop
 800fc76:	e000      	b.n	800fc7a <icmp_input+0x1d6>
        goto lenerr;
 800fc78:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7f6 fb0e 	bl	800629c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc80:	e00a      	b.n	800fc98 <icmp_input+0x1f4>
        goto icmperr;
 800fc82:	bf00      	nop
 800fc84:	e004      	b.n	800fc90 <icmp_input+0x1ec>
        goto icmperr;
 800fc86:	bf00      	nop
 800fc88:	e002      	b.n	800fc90 <icmp_input+0x1ec>
          goto icmperr;
 800fc8a:	bf00      	nop
 800fc8c:	e000      	b.n	800fc90 <icmp_input+0x1ec>
          goto icmperr;
 800fc8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7f6 fb03 	bl	800629c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fc98:	3728      	adds	r7, #40	; 0x28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	200033d4 	.word	0x200033d4
 800fca4:	200033e8 	.word	0x200033e8
 800fca8:	08016a6c 	.word	0x08016a6c
 800fcac:	08016aa4 	.word	0x08016aa4
 800fcb0:	08016adc 	.word	0x08016adc
 800fcb4:	08016b04 	.word	0x08016b04

0800fcb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	2103      	movs	r1, #3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f814 	bl	800fcf8 <icmp_send_response>
}
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fce4:	78fb      	ldrb	r3, [r7, #3]
 800fce6:	461a      	mov	r2, r3
 800fce8:	210b      	movs	r1, #11
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f804 	bl	800fcf8 <icmp_send_response>
}
 800fcf0:	bf00      	nop
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08c      	sub	sp, #48	; 0x30
 800fcfc:	af04      	add	r7, sp, #16
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	460b      	mov	r3, r1
 800fd02:	70fb      	strb	r3, [r7, #3]
 800fd04:	4613      	mov	r3, r2
 800fd06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fd08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd0c:	2124      	movs	r1, #36	; 0x24
 800fd0e:	2022      	movs	r0, #34	; 0x22
 800fd10:	f7f5 ff9e 	bl	8005c50 <pbuf_alloc>
 800fd14:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d04c      	beq.n	800fdb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	895b      	ldrh	r3, [r3, #10]
 800fd20:	2b23      	cmp	r3, #35	; 0x23
 800fd22:	d806      	bhi.n	800fd32 <icmp_send_response+0x3a>
 800fd24:	4b26      	ldr	r3, [pc, #152]	; (800fdc0 <icmp_send_response+0xc8>)
 800fd26:	f240 1269 	movw	r2, #361	; 0x169
 800fd2a:	4926      	ldr	r1, [pc, #152]	; (800fdc4 <icmp_send_response+0xcc>)
 800fd2c:	4826      	ldr	r0, [pc, #152]	; (800fdc8 <icmp_send_response+0xd0>)
 800fd2e:	f001 fcc9 	bl	80116c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	78fa      	ldrb	r2, [r7, #3]
 800fd42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	78ba      	ldrb	r2, [r7, #2]
 800fd48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	711a      	strb	r2, [r3, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	2200      	movs	r2, #0
 800fd58:	719a      	strb	r2, [r3, #6]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f103 0008 	add.w	r0, r3, #8
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	221c      	movs	r2, #28
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	f001 fc96 	bl	801169e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fd78:	f107 030c 	add.w	r3, r7, #12
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f000 f825 	bl	800fdcc <ip4_route>
 800fd82:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d011      	beq.n	800fdae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	709a      	strb	r2, [r3, #2]
 800fd90:	2200      	movs	r2, #0
 800fd92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fd94:	f107 020c 	add.w	r2, r7, #12
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	9302      	str	r3, [sp, #8]
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	2300      	movs	r3, #0
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	23ff      	movs	r3, #255	; 0xff
 800fda6:	2100      	movs	r1, #0
 800fda8:	69b8      	ldr	r0, [r7, #24]
 800fdaa:	f000 facf 	bl	801034c <ip4_output_if>
  }
  pbuf_free(q);
 800fdae:	69b8      	ldr	r0, [r7, #24]
 800fdb0:	f7f6 fa74 	bl	800629c <pbuf_free>
 800fdb4:	e000      	b.n	800fdb8 <icmp_send_response+0xc0>
    return;
 800fdb6:	bf00      	nop
}
 800fdb8:	3720      	adds	r7, #32
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08016a6c 	.word	0x08016a6c
 800fdc4:	08016b38 	.word	0x08016b38
 800fdc8:	08016adc 	.word	0x08016adc

0800fdcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af02      	add	r7, sp, #8
 800fdd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fdd4:	4b3b      	ldr	r3, [pc, #236]	; (800fec4 <ip4_route+0xf8>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	e036      	b.n	800fe4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fde2:	f003 0301 	and.w	r3, r3, #1
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d02b      	beq.n	800fe44 <ip4_route+0x78>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fdf2:	089b      	lsrs	r3, r3, #2
 800fdf4:	f003 0301 	and.w	r3, r3, #1
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d022      	beq.n	800fe44 <ip4_route+0x78>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3304      	adds	r3, #4
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01d      	beq.n	800fe44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	3304      	adds	r3, #4
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	405a      	eors	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3308      	adds	r3, #8
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	e04b      	b.n	800febc <ip4_route+0xf0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe2a:	f003 0302 	and.w	r3, r3, #2
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d108      	bne.n	800fe44 <ip4_route+0x78>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	330c      	adds	r3, #12
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d101      	bne.n	800fe44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	e03b      	b.n	800febc <ip4_route+0xf0>
  NETIF_FOREACH(netif) {
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60fb      	str	r3, [r7, #12]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1c5      	bne.n	800fddc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fe50:	4b1d      	ldr	r3, [pc, #116]	; (800fec8 <ip4_route+0xfc>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d01a      	beq.n	800fe8e <ip4_route+0xc2>
 800fe58:	4b1b      	ldr	r3, [pc, #108]	; (800fec8 <ip4_route+0xfc>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe60:	f003 0301 	and.w	r3, r3, #1
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d012      	beq.n	800fe8e <ip4_route+0xc2>
 800fe68:	4b17      	ldr	r3, [pc, #92]	; (800fec8 <ip4_route+0xfc>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe70:	f003 0304 	and.w	r3, r3, #4
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00a      	beq.n	800fe8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fe78:	4b13      	ldr	r3, [pc, #76]	; (800fec8 <ip4_route+0xfc>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	3304      	adds	r3, #4
 800fe7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d004      	beq.n	800fe8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	2b7f      	cmp	r3, #127	; 0x7f
 800fe8c:	d114      	bne.n	800feb8 <ip4_route+0xec>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	4619      	mov	r1, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3301      	adds	r3, #1
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3302      	adds	r3, #2
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	4618      	mov	r0, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3303      	adds	r3, #3
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	4603      	mov	r3, r0
 800feae:	4807      	ldr	r0, [pc, #28]	; (800fecc <ip4_route+0x100>)
 800feb0:	f001 fc08 	bl	80116c4 <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800feb4:	2300      	movs	r3, #0
 800feb6:	e001      	b.n	800febc <ip4_route+0xf0>
  }

  return netif_default;
 800feb8:	4b03      	ldr	r3, [pc, #12]	; (800fec8 <ip4_route+0xfc>)
 800feba:	681b      	ldr	r3, [r3, #0]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	2000697c 	.word	0x2000697c
 800fec8:	20006980 	.word	0x20006980
 800fecc:	08016b64 	.word	0x08016b64

0800fed0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fed0:	b5b0      	push	{r4, r5, r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af02      	add	r7, sp, #8
 800fed6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 800fed8:	4b28      	ldr	r3, [pc, #160]	; (800ff7c <ip4_input_accept+0xac>)
 800feda:	6958      	ldr	r0, [r3, #20]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	3304      	adds	r3, #4
 800fee0:	681c      	ldr	r4, [r3, #0]
 800fee2:	4b26      	ldr	r3, [pc, #152]	; (800ff7c <ip4_input_accept+0xac>)
 800fee4:	695a      	ldr	r2, [r3, #20]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	3308      	adds	r3, #8
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	ea02 0503 	and.w	r5, r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3304      	adds	r3, #4
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	3308      	adds	r3, #8
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4013      	ands	r3, r2
 800fefe:	4a1f      	ldr	r2, [pc, #124]	; (800ff7c <ip4_input_accept+0xac>)
 800ff00:	6951      	ldr	r1, [r2, #20]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	3208      	adds	r2, #8
 800ff06:	6812      	ldr	r2, [r2, #0]
 800ff08:	43d2      	mvns	r2, r2
 800ff0a:	400a      	ands	r2, r1
 800ff0c:	9201      	str	r2, [sp, #4]
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	462b      	mov	r3, r5
 800ff12:	4622      	mov	r2, r4
 800ff14:	4601      	mov	r1, r0
 800ff16:	481a      	ldr	r0, [pc, #104]	; (800ff80 <ip4_input_accept+0xb0>)
 800ff18:	f001 fbd4 	bl	80116c4 <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff22:	f003 0301 	and.w	r3, r3, #1
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d021      	beq.n	800ff70 <ip4_input_accept+0xa0>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	3304      	adds	r3, #4
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d01c      	beq.n	800ff70 <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff36:	4b11      	ldr	r3, [pc, #68]	; (800ff7c <ip4_input_accept+0xac>)
 800ff38:	695a      	ldr	r2, [r3, #20]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d008      	beq.n	800ff56 <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ff44:	4b0d      	ldr	r3, [pc, #52]	; (800ff7c <ip4_input_accept+0xac>)
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	6879      	ldr	r1, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 fbbc 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 800ff50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00c      	beq.n	800ff70 <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ff64:	461a      	mov	r2, r3
 800ff66:	4807      	ldr	r0, [pc, #28]	; (800ff84 <ip4_input_accept+0xb4>)
 800ff68:	f001 fbac 	bl	80116c4 <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e000      	b.n	800ff72 <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3708      	adds	r7, #8
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bdb0      	pop	{r4, r5, r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	200033d4 	.word	0x200033d4
 800ff80:	08016b8c 	.word	0x08016b8c
 800ff84:	08016bd4 	.word	0x08016bd4

0800ff88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	b08a      	sub	sp, #40	; 0x28
 800ff8e:	af02      	add	r7, sp, #8
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800ff94:	2301      	movs	r3, #1
 800ff96:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	091b      	lsrs	r3, r3, #4
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b04      	cmp	r3, #4
 800ffa8:	d00f      	beq.n	800ffca <ip4_input+0x42>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	091b      	lsrs	r3, r3, #4
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	4897      	ldr	r0, [pc, #604]	; (8010214 <ip4_input+0x28c>)
 800ffb6:	f001 fb85 	bl	80116c4 <iprintf>
    ip4_debug_print(p);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fac0 	bl	8010540 <ip4_debug_print>
    pbuf_free(p);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7f6 f96b 	bl	800629c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e1b2      	b.n	8010330 <ip4_input+0x3a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f003 030f 	and.w	r3, r3, #15
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	885b      	ldrh	r3, [r3, #2]
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f4 fd36 	bl	8004a52 <lwip_htons>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	891b      	ldrh	r3, [r3, #8]
 800ffee:	8a3a      	ldrh	r2, [r7, #16]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d204      	bcs.n	800fffe <ip4_input+0x76>
    pbuf_realloc(p, iphdr_len);
 800fff4:	8a3b      	ldrh	r3, [r7, #16]
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7f5 ffaf 	bl	8005f5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	895b      	ldrh	r3, [r3, #10]
 8010002:	8a7a      	ldrh	r2, [r7, #18]
 8010004:	429a      	cmp	r2, r3
 8010006:	d807      	bhi.n	8010018 <ip4_input+0x90>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	891b      	ldrh	r3, [r3, #8]
 801000c:	8a3a      	ldrh	r2, [r7, #16]
 801000e:	429a      	cmp	r2, r3
 8010010:	d802      	bhi.n	8010018 <ip4_input+0x90>
 8010012:	8a7b      	ldrh	r3, [r7, #18]
 8010014:	2b13      	cmp	r3, #19
 8010016:	d824      	bhi.n	8010062 <ip4_input+0xda>
    if (iphdr_hlen < IP_HLEN) {
 8010018:	8a7b      	ldrh	r3, [r7, #18]
 801001a:	2b13      	cmp	r3, #19
 801001c:	d804      	bhi.n	8010028 <ip4_input+0xa0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801001e:	8a7b      	ldrh	r3, [r7, #18]
 8010020:	4619      	mov	r1, r3
 8010022:	487d      	ldr	r0, [pc, #500]	; (8010218 <ip4_input+0x290>)
 8010024:	f001 fb4e 	bl	80116c4 <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	895b      	ldrh	r3, [r3, #10]
 801002c:	8a7a      	ldrh	r2, [r7, #18]
 801002e:	429a      	cmp	r2, r3
 8010030:	d906      	bls.n	8010040 <ip4_input+0xb8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8010032:	8a79      	ldrh	r1, [r7, #18]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	895b      	ldrh	r3, [r3, #10]
 8010038:	461a      	mov	r2, r3
 801003a:	4878      	ldr	r0, [pc, #480]	; (801021c <ip4_input+0x294>)
 801003c:	f001 fb42 	bl	80116c4 <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	891b      	ldrh	r3, [r3, #8]
 8010044:	8a3a      	ldrh	r2, [r7, #16]
 8010046:	429a      	cmp	r2, r3
 8010048:	d906      	bls.n	8010058 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801004a:	8a39      	ldrh	r1, [r7, #16]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	891b      	ldrh	r3, [r3, #8]
 8010050:	461a      	mov	r2, r3
 8010052:	4873      	ldr	r0, [pc, #460]	; (8010220 <ip4_input+0x298>)
 8010054:	f001 fb36 	bl	80116c4 <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7f6 f91f 	bl	800629c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	e166      	b.n	8010330 <ip4_input+0x3a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	4a6f      	ldr	r2, [pc, #444]	; (8010224 <ip4_input+0x29c>)
 8010068:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	4a6d      	ldr	r2, [pc, #436]	; (8010224 <ip4_input+0x29c>)
 8010070:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010072:	4b6c      	ldr	r3, [pc, #432]	; (8010224 <ip4_input+0x29c>)
 8010074:	695b      	ldr	r3, [r3, #20]
 8010076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801007a:	2be0      	cmp	r3, #224	; 0xe0
 801007c:	d112      	bne.n	80100a4 <ip4_input+0x11c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010084:	f003 0301 	and.w	r3, r3, #1
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b00      	cmp	r3, #0
 801008c:	d007      	beq.n	801009e <ip4_input+0x116>
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	3304      	adds	r3, #4
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <ip4_input+0x116>
      netif = inp;
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	61bb      	str	r3, [r7, #24]
 801009c:	e02a      	b.n	80100f4 <ip4_input+0x16c>
    } else {
      netif = NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	61bb      	str	r3, [r7, #24]
 80100a2:	e027      	b.n	80100f4 <ip4_input+0x16c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80100a4:	6838      	ldr	r0, [r7, #0]
 80100a6:	f7ff ff13 	bl	800fed0 <ip4_input_accept>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <ip4_input+0x12e>
      netif = inp;
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	61bb      	str	r3, [r7, #24]
 80100b4:	e01e      	b.n	80100f4 <ip4_input+0x16c>
    } else {
      netif = NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80100ba:	4b5a      	ldr	r3, [pc, #360]	; (8010224 <ip4_input+0x29c>)
 80100bc:	695b      	ldr	r3, [r3, #20]
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b7f      	cmp	r3, #127	; 0x7f
 80100c2:	d017      	beq.n	80100f4 <ip4_input+0x16c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80100c4:	4b58      	ldr	r3, [pc, #352]	; (8010228 <ip4_input+0x2a0>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	61bb      	str	r3, [r7, #24]
 80100ca:	e00e      	b.n	80100ea <ip4_input+0x162>
          if (netif == inp) {
 80100cc:	69ba      	ldr	r2, [r7, #24]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d006      	beq.n	80100e2 <ip4_input+0x15a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80100d4:	69b8      	ldr	r0, [r7, #24]
 80100d6:	f7ff fefb 	bl	800fed0 <ip4_input_accept>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d108      	bne.n	80100f2 <ip4_input+0x16a>
 80100e0:	e000      	b.n	80100e4 <ip4_input+0x15c>
            continue;
 80100e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	61bb      	str	r3, [r7, #24]
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1ed      	bne.n	80100cc <ip4_input+0x144>
 80100f0:	e000      	b.n	80100f4 <ip4_input+0x16c>
            break;
 80100f2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d11f      	bne.n	801013a <ip4_input+0x1b2>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	7a5b      	ldrb	r3, [r3, #9]
 80100fe:	2b11      	cmp	r3, #17
 8010100:	d11b      	bne.n	801013a <ip4_input+0x1b2>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010102:	8a7b      	ldrh	r3, [r7, #18]
 8010104:	69fa      	ldr	r2, [r7, #28]
 8010106:	4413      	add	r3, r2
 8010108:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	885b      	ldrh	r3, [r3, #2]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4618      	mov	r0, r3
 8010112:	f7f4 fc9e 	bl	8004a52 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	4619      	mov	r1, r3
 801011a:	4844      	ldr	r0, [pc, #272]	; (801022c <ip4_input+0x2a4>)
 801011c:	f001 fad2 	bl	80116c4 <iprintf>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	885b      	ldrh	r3, [r3, #2]
 8010124:	b29b      	uxth	r3, r3
 8010126:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801012a:	d106      	bne.n	801013a <ip4_input+0x1b2>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 801012c:	4840      	ldr	r0, [pc, #256]	; (8010230 <ip4_input+0x2a8>)
 801012e:	f001 fb51 	bl	80117d4 <puts>
        netif = inp;
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01a      	beq.n	8010176 <ip4_input+0x1ee>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010140:	4b38      	ldr	r3, [pc, #224]	; (8010224 <ip4_input+0x29c>)
 8010142:	691b      	ldr	r3, [r3, #16]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d016      	beq.n	8010176 <ip4_input+0x1ee>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010148:	4b36      	ldr	r3, [pc, #216]	; (8010224 <ip4_input+0x29c>)
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	4618      	mov	r0, r3
 8010150:	f000 faba 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d105      	bne.n	8010166 <ip4_input+0x1de>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801015a:	4b32      	ldr	r3, [pc, #200]	; (8010224 <ip4_input+0x29c>)
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010162:	2be0      	cmp	r3, #224	; 0xe0
 8010164:	d107      	bne.n	8010176 <ip4_input+0x1ee>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 8010166:	4833      	ldr	r0, [pc, #204]	; (8010234 <ip4_input+0x2ac>)
 8010168:	f001 fb34 	bl	80117d4 <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7f6 f895 	bl	800629c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e0dc      	b.n	8010330 <ip4_input+0x3a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d107      	bne.n	801018c <ip4_input+0x204>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 801017c:	482e      	ldr	r0, [pc, #184]	; (8010238 <ip4_input+0x2b0>)
 801017e:	f001 fb29 	bl	80117d4 <puts>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7f6 f88a 	bl	800629c <pbuf_free>
    return ERR_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	e0d1      	b.n	8010330 <ip4_input+0x3a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	88db      	ldrh	r3, [r3, #6]
 8010190:	b29b      	uxth	r3, r3
 8010192:	461a      	mov	r2, r3
 8010194:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010198:	4013      	ands	r3, r2
 801019a:	2b00      	cmp	r3, #0
 801019c:	d053      	beq.n	8010246 <ip4_input+0x2be>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	889b      	ldrh	r3, [r3, #4]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7f4 fc54 	bl	8004a52 <lwip_htons>
 80101aa:	4603      	mov	r3, r0
 80101ac:	461d      	mov	r5, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	891b      	ldrh	r3, [r3, #8]
 80101b2:	461e      	mov	r6, r3
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	885b      	ldrh	r3, [r3, #2]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7f4 fc49 	bl	8004a52 <lwip_htons>
 80101c0:	4603      	mov	r3, r0
 80101c2:	4698      	mov	r8, r3
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	88db      	ldrh	r3, [r3, #6]
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	f003 0320 	and.w	r3, r3, #32
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	bf14      	ite	ne
 80101d2:	2301      	movne	r3, #1
 80101d4:	2300      	moveq	r3, #0
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	461c      	mov	r4, r3
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	88db      	ldrh	r3, [r3, #6]
 80101de:	b29b      	uxth	r3, r3
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7f4 fc36 	bl	8004a52 <lwip_htons>
 80101e6:	4603      	mov	r3, r0
 80101e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	9301      	str	r3, [sp, #4]
 80101f4:	9400      	str	r4, [sp, #0]
 80101f6:	4643      	mov	r3, r8
 80101f8:	4632      	mov	r2, r6
 80101fa:	4629      	mov	r1, r5
 80101fc:	480f      	ldr	r0, [pc, #60]	; (801023c <ip4_input+0x2b4>)
 80101fe:	f001 fa61 	bl	80116c4 <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f000 fda6 	bl	8010d54 <ip4_reass>
 8010208:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d117      	bne.n	8010240 <ip4_input+0x2b8>
      return ERR_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	e08d      	b.n	8010330 <ip4_input+0x3a8>
 8010214:	08016c04 	.word	0x08016c04
 8010218:	08016c38 	.word	0x08016c38
 801021c:	08016c7c 	.word	0x08016c7c
 8010220:	08016ccc 	.word	0x08016ccc
 8010224:	200033d4 	.word	0x200033d4
 8010228:	2000697c 	.word	0x2000697c
 801022c:	08016d0c 	.word	0x08016d0c
 8010230:	08016d3c 	.word	0x08016d3c
 8010234:	08016d60 	.word	0x08016d60
 8010238:	08016d88 	.word	0x08016d88
 801023c:	08016da8 	.word	0x08016da8
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 8010246:	483d      	ldr	r0, [pc, #244]	; (801033c <ip4_input+0x3b4>)
 8010248:	f001 fac4 	bl	80117d4 <puts>
  ip4_debug_print(p);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f977 	bl	8010540 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	895b      	ldrh	r3, [r3, #10]
 8010256:	4619      	mov	r1, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	891b      	ldrh	r3, [r3, #8]
 801025c:	461a      	mov	r2, r3
 801025e:	4838      	ldr	r0, [pc, #224]	; (8010340 <ip4_input+0x3b8>)
 8010260:	f001 fa30 	bl	80116c4 <iprintf>

  ip_data.current_netif = netif;
 8010264:	4a37      	ldr	r2, [pc, #220]	; (8010344 <ip4_input+0x3bc>)
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801026a:	4a36      	ldr	r2, [pc, #216]	; (8010344 <ip4_input+0x3bc>)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010270:	4a34      	ldr	r2, [pc, #208]	; (8010344 <ip4_input+0x3bc>)
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 030f 	and.w	r3, r3, #15
 801027e:	b2db      	uxtb	r3, r3
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	b2db      	uxtb	r3, r3
 8010284:	b29a      	uxth	r2, r3
 8010286:	4b2f      	ldr	r3, [pc, #188]	; (8010344 <ip4_input+0x3bc>)
 8010288:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801028a:	8a7b      	ldrh	r3, [r7, #18]
 801028c:	4619      	mov	r1, r3
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7f5 ff76 	bl	8006180 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	7a5b      	ldrb	r3, [r3, #9]
 8010298:	2b06      	cmp	r3, #6
 801029a:	d009      	beq.n	80102b0 <ip4_input+0x328>
 801029c:	2b11      	cmp	r3, #17
 801029e:	d002      	beq.n	80102a6 <ip4_input+0x31e>
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d00a      	beq.n	80102ba <ip4_input+0x332>
 80102a4:	e00e      	b.n	80102c4 <ip4_input+0x33c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7fb fe6b 	bl	800bf84 <udp_input>
        break;
 80102ae:	e02c      	b.n	801030a <ip4_input+0x382>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7f7 fe50 	bl	8007f58 <tcp_input>
        break;
 80102b8:	e027      	b.n	801030a <ip4_input+0x382>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fbf1 	bl	800faa4 <icmp_input>
        break;
 80102c2:	e022      	b.n	801030a <ip4_input+0x382>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80102c4:	4b1f      	ldr	r3, [pc, #124]	; (8010344 <ip4_input+0x3bc>)
 80102c6:	695b      	ldr	r3, [r3, #20]
 80102c8:	69b9      	ldr	r1, [r7, #24]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 f9fc 	bl	80106c8 <ip4_addr_isbroadcast_u32>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d10f      	bne.n	80102f6 <ip4_input+0x36e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80102d6:	4b1b      	ldr	r3, [pc, #108]	; (8010344 <ip4_input+0x3bc>)
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80102de:	2be0      	cmp	r3, #224	; 0xe0
 80102e0:	d009      	beq.n	80102f6 <ip4_input+0x36e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80102e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80102e6:	4619      	mov	r1, r3
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7f5 ffc4 	bl	8006276 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80102ee:	2102      	movs	r1, #2
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f7ff fce1 	bl	800fcb8 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	7a5b      	ldrb	r3, [r3, #9]
 80102fa:	4619      	mov	r1, r3
 80102fc:	4812      	ldr	r0, [pc, #72]	; (8010348 <ip4_input+0x3c0>)
 80102fe:	f001 f9e1 	bl	80116c4 <iprintf>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7f5 ffca 	bl	800629c <pbuf_free>
        break;
 8010308:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801030a:	4b0e      	ldr	r3, [pc, #56]	; (8010344 <ip4_input+0x3bc>)
 801030c:	2200      	movs	r2, #0
 801030e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010310:	4b0c      	ldr	r3, [pc, #48]	; (8010344 <ip4_input+0x3bc>)
 8010312:	2200      	movs	r2, #0
 8010314:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010316:	4b0b      	ldr	r3, [pc, #44]	; (8010344 <ip4_input+0x3bc>)
 8010318:	2200      	movs	r2, #0
 801031a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801031c:	4b09      	ldr	r3, [pc, #36]	; (8010344 <ip4_input+0x3bc>)
 801031e:	2200      	movs	r2, #0
 8010320:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010322:	4b08      	ldr	r3, [pc, #32]	; (8010344 <ip4_input+0x3bc>)
 8010324:	2200      	movs	r2, #0
 8010326:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010328:	4b06      	ldr	r3, [pc, #24]	; (8010344 <ip4_input+0x3bc>)
 801032a:	2200      	movs	r2, #0
 801032c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801032e:	2300      	movs	r3, #0
}
 8010330:	4618      	mov	r0, r3
 8010332:	3720      	adds	r7, #32
 8010334:	46bd      	mov	sp, r7
 8010336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033a:	bf00      	nop
 801033c:	08016e0c 	.word	0x08016e0c
 8010340:	08016e18 	.word	0x08016e18
 8010344:	200033d4 	.word	0x200033d4
 8010348:	08016e40 	.word	0x08016e40

0801034c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b08a      	sub	sp, #40	; 0x28
 8010350:	af04      	add	r7, sp, #16
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d009      	beq.n	8010378 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <ip4_output_if+0x26>
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d102      	bne.n	8010378 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010374:	3304      	adds	r3, #4
 8010376:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010378:	78fa      	ldrb	r2, [r7, #3]
 801037a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037c:	9302      	str	r3, [sp, #8]
 801037e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010382:	9301      	str	r3, [sp, #4]
 8010384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	4613      	mov	r3, r2
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	6979      	ldr	r1, [r7, #20]
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f000 f805 	bl	80103a0 <ip4_output_if_src>
 8010396:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010398:	4618      	mov	r0, r3
 801039a:	3718      	adds	r7, #24
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	7b9b      	ldrb	r3, [r3, #14]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d006      	beq.n	80103c4 <ip4_output_if_src+0x24>
 80103b6:	4b58      	ldr	r3, [pc, #352]	; (8010518 <ip4_output_if_src+0x178>)
 80103b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80103bc:	4957      	ldr	r1, [pc, #348]	; (801051c <ip4_output_if_src+0x17c>)
 80103be:	4858      	ldr	r0, [pc, #352]	; (8010520 <ip4_output_if_src+0x180>)
 80103c0:	f001 f980 	bl	80116c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d063      	beq.n	8010492 <ip4_output_if_src+0xf2>
    u16_t ip_hlen = IP_HLEN;
 80103ca:	2314      	movs	r3, #20
 80103cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80103ce:	2114      	movs	r1, #20
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7f5 fec5 	bl	8006160 <pbuf_add_header>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d005      	beq.n	80103e8 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 80103dc:	4851      	ldr	r0, [pc, #324]	; (8010524 <ip4_output_if_src+0x184>)
 80103de:	f001 f9f9 	bl	80117d4 <puts>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80103e2:	f06f 0301 	mvn.w	r3, #1
 80103e6:	e093      	b.n	8010510 <ip4_output_if_src+0x170>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	895b      	ldrh	r3, [r3, #10]
 80103f2:	2b13      	cmp	r3, #19
 80103f4:	d806      	bhi.n	8010404 <ip4_output_if_src+0x64>
 80103f6:	4b48      	ldr	r3, [pc, #288]	; (8010518 <ip4_output_if_src+0x178>)
 80103f8:	f240 3289 	movw	r2, #905	; 0x389
 80103fc:	494a      	ldr	r1, [pc, #296]	; (8010528 <ip4_output_if_src+0x188>)
 80103fe:	4848      	ldr	r0, [pc, #288]	; (8010520 <ip4_output_if_src+0x180>)
 8010400:	f001 f960 	bl	80116c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	78fa      	ldrb	r2, [r7, #3]
 8010408:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010410:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801041a:	8b7b      	ldrh	r3, [r7, #26]
 801041c:	089b      	lsrs	r3, r3, #2
 801041e:	b29b      	uxth	r3, r3
 8010420:	b2db      	uxtb	r3, r3
 8010422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010426:	b2da      	uxtb	r2, r3
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010432:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	891b      	ldrh	r3, [r3, #8]
 8010438:	4618      	mov	r0, r3
 801043a:	f7f4 fb0a 	bl	8004a52 <lwip_htons>
 801043e:	4603      	mov	r3, r0
 8010440:	461a      	mov	r2, r3
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	2200      	movs	r2, #0
 801044a:	719a      	strb	r2, [r3, #6]
 801044c:	2200      	movs	r2, #0
 801044e:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010450:	4b36      	ldr	r3, [pc, #216]	; (801052c <ip4_output_if_src+0x18c>)
 8010452:	881b      	ldrh	r3, [r3, #0]
 8010454:	4618      	mov	r0, r3
 8010456:	f7f4 fafc 	bl	8004a52 <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010462:	4b32      	ldr	r3, [pc, #200]	; (801052c <ip4_output_if_src+0x18c>)
 8010464:	881b      	ldrh	r3, [r3, #0]
 8010466:	3301      	adds	r3, #1
 8010468:	b29a      	uxth	r2, r3
 801046a:	4b30      	ldr	r3, [pc, #192]	; (801052c <ip4_output_if_src+0x18c>)
 801046c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d104      	bne.n	801047e <ip4_output_if_src+0xde>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010474:	4b2e      	ldr	r3, [pc, #184]	; (8010530 <ip4_output_if_src+0x190>)
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	60da      	str	r2, [r3, #12]
 801047c:	e003      	b.n	8010486 <ip4_output_if_src+0xe6>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	2200      	movs	r2, #0
 801048a:	729a      	strb	r2, [r3, #10]
 801048c:	2200      	movs	r2, #0
 801048e:	72da      	strb	r2, [r3, #11]
 8010490:	e012      	b.n	80104b8 <ip4_output_if_src+0x118>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	895b      	ldrh	r3, [r3, #10]
 8010496:	2b13      	cmp	r3, #19
 8010498:	d805      	bhi.n	80104a6 <ip4_output_if_src+0x106>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 801049a:	4826      	ldr	r0, [pc, #152]	; (8010534 <ip4_output_if_src+0x194>)
 801049c:	f001 f99a 	bl	80117d4 <puts>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80104a0:	f06f 0301 	mvn.w	r3, #1
 80104a4:	e034      	b.n	8010510 <ip4_output_if_src+0x170>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	691b      	ldr	r3, [r3, #16]
 80104b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80104b2:	f107 0314 	add.w	r3, r7, #20
 80104b6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104be:	4619      	mov	r1, r3
 80104c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80104c6:	461a      	mov	r2, r3
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104ce:	481a      	ldr	r0, [pc, #104]	; (8010538 <ip4_output_if_src+0x198>)
 80104d0:	f001 f8f8 	bl	80116c4 <iprintf>
  ip4_debug_print(p);
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f000 f833 	bl	8010540 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00c      	beq.n	80104fc <ip4_output_if_src+0x15c>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	891a      	ldrh	r2, [r3, #8]
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d906      	bls.n	80104fc <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f000 fe1c 	bl	8011130 <ip4_frag>
 80104f8:	4603      	mov	r3, r0
 80104fa:	e009      	b.n	8010510 <ip4_output_if_src+0x170>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 80104fc:	480f      	ldr	r0, [pc, #60]	; (801053c <ip4_output_if_src+0x19c>)
 80104fe:	f001 f969 	bl	80117d4 <puts>
  return netif->output(netif, p, dest);
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	68f9      	ldr	r1, [r7, #12]
 801050a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801050c:	4798      	blx	r3
 801050e:	4603      	mov	r3, r0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3720      	adds	r7, #32
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	08016e64 	.word	0x08016e64
 801051c:	08016e98 	.word	0x08016e98
 8010520:	08016ea4 	.word	0x08016ea4
 8010524:	08016ecc 	.word	0x08016ecc
 8010528:	08016f00 	.word	0x08016f00
 801052c:	20000212 	.word	0x20000212
 8010530:	08017678 	.word	0x08017678
 8010534:	08016f30 	.word	0x08016f30
 8010538:	08016f64 	.word	0x08016f64
 801053c:	08016f7c 	.word	0x08016f7c

08010540 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8010540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010544:	b086      	sub	sp, #24
 8010546:	af02      	add	r7, sp, #8
 8010548:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 8010550:	4856      	ldr	r0, [pc, #344]	; (80106ac <ip4_debug_print+0x16c>)
 8010552:	f001 f93f 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8010556:	4856      	ldr	r0, [pc, #344]	; (80106b0 <ip4_debug_print+0x170>)
 8010558:	f001 f93c 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	091b      	lsrs	r3, r3, #4
 8010562:	b2db      	uxtb	r3, r3
 8010564:	461d      	mov	r5, r3
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	f003 040f 	and.w	r4, r3, #15
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	785b      	ldrb	r3, [r3, #1]
 8010572:	461e      	mov	r6, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	885b      	ldrh	r3, [r3, #2]
 8010578:	b29b      	uxth	r3, r3
 801057a:	4618      	mov	r0, r3
 801057c:	f7f4 fa69 	bl	8004a52 <lwip_htons>
 8010580:	4603      	mov	r3, r0
 8010582:	9300      	str	r3, [sp, #0]
 8010584:	4633      	mov	r3, r6
 8010586:	4622      	mov	r2, r4
 8010588:	4629      	mov	r1, r5
 801058a:	484a      	ldr	r0, [pc, #296]	; (80106b4 <ip4_debug_print+0x174>)
 801058c:	f001 f89a 	bl	80116c4 <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8010590:	4847      	ldr	r0, [pc, #284]	; (80106b0 <ip4_debug_print+0x170>)
 8010592:	f001 f91f 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	889b      	ldrh	r3, [r3, #4]
 801059a:	b29b      	uxth	r3, r3
 801059c:	4618      	mov	r0, r3
 801059e:	f7f4 fa58 	bl	8004a52 <lwip_htons>
 80105a2:	4603      	mov	r3, r0
 80105a4:	4698      	mov	r8, r3
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	88db      	ldrh	r3, [r3, #6]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7f4 fa50 	bl	8004a52 <lwip_htons>
 80105b2:	4603      	mov	r3, r0
 80105b4:	0bdb      	lsrs	r3, r3, #15
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	f003 0501 	and.w	r5, r3, #1
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	88db      	ldrh	r3, [r3, #6]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7f4 fa45 	bl	8004a52 <lwip_htons>
 80105c8:	4603      	mov	r3, r0
 80105ca:	0b9b      	lsrs	r3, r3, #14
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	f003 0601 	and.w	r6, r3, #1
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	88db      	ldrh	r3, [r3, #6]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	4618      	mov	r0, r3
 80105da:	f7f4 fa3a 	bl	8004a52 <lwip_htons>
 80105de:	4603      	mov	r3, r0
 80105e0:	0b5b      	lsrs	r3, r3, #13
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	f003 0401 	and.w	r4, r3, #1
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	88db      	ldrh	r3, [r3, #6]
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7f4 fa2f 	bl	8004a52 <lwip_htons>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	9400      	str	r4, [sp, #0]
 80105fe:	4633      	mov	r3, r6
 8010600:	462a      	mov	r2, r5
 8010602:	4641      	mov	r1, r8
 8010604:	482c      	ldr	r0, [pc, #176]	; (80106b8 <ip4_debug_print+0x178>)
 8010606:	f001 f85d 	bl	80116c4 <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801060a:	4829      	ldr	r0, [pc, #164]	; (80106b0 <ip4_debug_print+0x170>)
 801060c:	f001 f8e2 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	7a1b      	ldrb	r3, [r3, #8]
 8010614:	461c      	mov	r4, r3
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	7a5b      	ldrb	r3, [r3, #9]
 801061a:	461d      	mov	r5, r3
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	895b      	ldrh	r3, [r3, #10]
 8010620:	b29b      	uxth	r3, r3
 8010622:	4618      	mov	r0, r3
 8010624:	f7f4 fa15 	bl	8004a52 <lwip_htons>
 8010628:	4603      	mov	r3, r0
 801062a:	462a      	mov	r2, r5
 801062c:	4621      	mov	r1, r4
 801062e:	4823      	ldr	r0, [pc, #140]	; (80106bc <ip4_debug_print+0x17c>)
 8010630:	f001 f848 	bl	80116c4 <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8010634:	481e      	ldr	r0, [pc, #120]	; (80106b0 <ip4_debug_print+0x170>)
 8010636:	f001 f8cd 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	b2db      	uxtb	r3, r3
 8010640:	4619      	mov	r1, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	0a1b      	lsrs	r3, r3, #8
 8010648:	b2db      	uxtb	r3, r3
 801064a:	461a      	mov	r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	0c1b      	lsrs	r3, r3, #16
 8010652:	b2db      	uxtb	r3, r3
 8010654:	4618      	mov	r0, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	0e1b      	lsrs	r3, r3, #24
 801065c:	b2db      	uxtb	r3, r3
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	4603      	mov	r3, r0
 8010662:	4817      	ldr	r0, [pc, #92]	; (80106c0 <ip4_debug_print+0x180>)
 8010664:	f001 f82e 	bl	80116c4 <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8010668:	4811      	ldr	r0, [pc, #68]	; (80106b0 <ip4_debug_print+0x170>)
 801066a:	f001 f8b3 	bl	80117d4 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	b2db      	uxtb	r3, r3
 8010674:	4619      	mov	r1, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	691b      	ldr	r3, [r3, #16]
 801067a:	0a1b      	lsrs	r3, r3, #8
 801067c:	b2db      	uxtb	r3, r3
 801067e:	461a      	mov	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	0c1b      	lsrs	r3, r3, #16
 8010686:	b2db      	uxtb	r3, r3
 8010688:	4618      	mov	r0, r3
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	0e1b      	lsrs	r3, r3, #24
 8010690:	b2db      	uxtb	r3, r3
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4603      	mov	r3, r0
 8010696:	480b      	ldr	r0, [pc, #44]	; (80106c4 <ip4_debug_print+0x184>)
 8010698:	f001 f814 	bl	80116c4 <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801069c:	4804      	ldr	r0, [pc, #16]	; (80106b0 <ip4_debug_print+0x170>)
 801069e:	f001 f899 	bl	80117d4 <puts>
}
 80106a2:	bf00      	nop
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ac:	08016fcc 	.word	0x08016fcc
 80106b0:	08016fd8 	.word	0x08016fd8
 80106b4:	08016ffc 	.word	0x08016ffc
 80106b8:	08017038 	.word	0x08017038
 80106bc:	08017074 	.word	0x08017074
 80106c0:	080170b0 	.word	0x080170b0
 80106c4:	080170e0 	.word	0x080170e0

080106c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106dc:	d002      	beq.n	80106e4 <ip4_addr_isbroadcast_u32+0x1c>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d101      	bne.n	80106e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e02a      	b.n	801073e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80106ee:	f003 0302 	and.w	r3, r3, #2
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d101      	bne.n	80106fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	e021      	b.n	801073e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	3304      	adds	r3, #4
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	429a      	cmp	r2, r3
 8010704:	d101      	bne.n	801070a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010706:	2300      	movs	r3, #0
 8010708:	e019      	b.n	801073e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	3304      	adds	r3, #4
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	405a      	eors	r2, r3
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	3308      	adds	r3, #8
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4013      	ands	r3, r2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10d      	bne.n	801073c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	3308      	adds	r3, #8
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	43da      	mvns	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	3308      	adds	r3, #8
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010734:	429a      	cmp	r2, r3
 8010736:	d101      	bne.n	801073c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010738:	2301      	movs	r3, #1
 801073a:	e000      	b.n	801073e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801073c:	2300      	movs	r3, #0
  }
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
	...

0801074c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010752:	2300      	movs	r3, #0
 8010754:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010756:	4b12      	ldr	r3, [pc, #72]	; (80107a0 <ip_reass_tmr+0x54>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801075c:	e018      	b.n	8010790 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	7fdb      	ldrb	r3, [r3, #31]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00b      	beq.n	801077e <ip_reass_tmr+0x32>
      r->timer--;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	7fdb      	ldrb	r3, [r3, #31]
 801076a:	3b01      	subs	r3, #1
 801076c:	b2da      	uxtb	r2, r3
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	60fb      	str	r3, [r7, #12]
 801077c:	e008      	b.n	8010790 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010788:	68b9      	ldr	r1, [r7, #8]
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f80a 	bl	80107a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1e3      	bne.n	801075e <ip_reass_tmr+0x12>
    }
  }
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20000214 	.word	0x20000214

080107a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b088      	sub	sp, #32
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80107ae:	2300      	movs	r3, #0
 80107b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80107b2:	683a      	ldr	r2, [r7, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d105      	bne.n	80107c6 <ip_reass_free_complete_datagram+0x22>
 80107ba:	4b45      	ldr	r3, [pc, #276]	; (80108d0 <ip_reass_free_complete_datagram+0x12c>)
 80107bc:	22ab      	movs	r2, #171	; 0xab
 80107be:	4945      	ldr	r1, [pc, #276]	; (80108d4 <ip_reass_free_complete_datagram+0x130>)
 80107c0:	4845      	ldr	r0, [pc, #276]	; (80108d8 <ip_reass_free_complete_datagram+0x134>)
 80107c2:	f000 ff7f 	bl	80116c4 <iprintf>
  if (prev != NULL) {
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00a      	beq.n	80107e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d005      	beq.n	80107e2 <ip_reass_free_complete_datagram+0x3e>
 80107d6:	4b3e      	ldr	r3, [pc, #248]	; (80108d0 <ip_reass_free_complete_datagram+0x12c>)
 80107d8:	22ad      	movs	r2, #173	; 0xad
 80107da:	4940      	ldr	r1, [pc, #256]	; (80108dc <ip_reass_free_complete_datagram+0x138>)
 80107dc:	483e      	ldr	r0, [pc, #248]	; (80108d8 <ip_reass_free_complete_datagram+0x134>)
 80107de:	f000 ff71 	bl	80116c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	889b      	ldrh	r3, [r3, #4]
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d12a      	bne.n	801084a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	6858      	ldr	r0, [r3, #4]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3308      	adds	r3, #8
 801080a:	2214      	movs	r2, #20
 801080c:	4619      	mov	r1, r3
 801080e:	f000 ff46 	bl	801169e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010812:	2101      	movs	r1, #1
 8010814:	69b8      	ldr	r0, [r7, #24]
 8010816:	f7ff fa5f 	bl	800fcd8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801081a:	69b8      	ldr	r0, [r7, #24]
 801081c:	f7f5 fdde 	bl	80063dc <pbuf_clen>
 8010820:	4603      	mov	r3, r0
 8010822:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010824:	8bfa      	ldrh	r2, [r7, #30]
 8010826:	8a7b      	ldrh	r3, [r7, #18]
 8010828:	4413      	add	r3, r2
 801082a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801082e:	db05      	blt.n	801083c <ip_reass_free_complete_datagram+0x98>
 8010830:	4b27      	ldr	r3, [pc, #156]	; (80108d0 <ip_reass_free_complete_datagram+0x12c>)
 8010832:	22bc      	movs	r2, #188	; 0xbc
 8010834:	492a      	ldr	r1, [pc, #168]	; (80108e0 <ip_reass_free_complete_datagram+0x13c>)
 8010836:	4828      	ldr	r0, [pc, #160]	; (80108d8 <ip_reass_free_complete_datagram+0x134>)
 8010838:	f000 ff44 	bl	80116c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801083c:	8bfa      	ldrh	r2, [r7, #30]
 801083e:	8a7b      	ldrh	r3, [r7, #18]
 8010840:	4413      	add	r3, r2
 8010842:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010844:	69b8      	ldr	r0, [r7, #24]
 8010846:	f7f5 fd29 	bl	800629c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010850:	e01f      	b.n	8010892 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f7f5 fdba 	bl	80063dc <pbuf_clen>
 8010868:	4603      	mov	r3, r0
 801086a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801086c:	8bfa      	ldrh	r2, [r7, #30]
 801086e:	8a7b      	ldrh	r3, [r7, #18]
 8010870:	4413      	add	r3, r2
 8010872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010876:	db05      	blt.n	8010884 <ip_reass_free_complete_datagram+0xe0>
 8010878:	4b15      	ldr	r3, [pc, #84]	; (80108d0 <ip_reass_free_complete_datagram+0x12c>)
 801087a:	22cc      	movs	r2, #204	; 0xcc
 801087c:	4918      	ldr	r1, [pc, #96]	; (80108e0 <ip_reass_free_complete_datagram+0x13c>)
 801087e:	4816      	ldr	r0, [pc, #88]	; (80108d8 <ip_reass_free_complete_datagram+0x134>)
 8010880:	f000 ff20 	bl	80116c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010884:	8bfa      	ldrh	r2, [r7, #30]
 8010886:	8a7b      	ldrh	r3, [r7, #18]
 8010888:	4413      	add	r3, r2
 801088a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f7f5 fd05 	bl	800629c <pbuf_free>
  while (p != NULL) {
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1dc      	bne.n	8010852 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010898:	6839      	ldr	r1, [r7, #0]
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f000 f8c2 	bl	8010a24 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80108a0:	4b10      	ldr	r3, [pc, #64]	; (80108e4 <ip_reass_free_complete_datagram+0x140>)
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	8bfa      	ldrh	r2, [r7, #30]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d905      	bls.n	80108b6 <ip_reass_free_complete_datagram+0x112>
 80108aa:	4b09      	ldr	r3, [pc, #36]	; (80108d0 <ip_reass_free_complete_datagram+0x12c>)
 80108ac:	22d2      	movs	r2, #210	; 0xd2
 80108ae:	490e      	ldr	r1, [pc, #56]	; (80108e8 <ip_reass_free_complete_datagram+0x144>)
 80108b0:	4809      	ldr	r0, [pc, #36]	; (80108d8 <ip_reass_free_complete_datagram+0x134>)
 80108b2:	f000 ff07 	bl	80116c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80108b6:	4b0b      	ldr	r3, [pc, #44]	; (80108e4 <ip_reass_free_complete_datagram+0x140>)
 80108b8:	881a      	ldrh	r2, [r3, #0]
 80108ba:	8bfb      	ldrh	r3, [r7, #30]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	b29a      	uxth	r2, r3
 80108c0:	4b08      	ldr	r3, [pc, #32]	; (80108e4 <ip_reass_free_complete_datagram+0x140>)
 80108c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80108c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3720      	adds	r7, #32
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	08017110 	.word	0x08017110
 80108d4:	0801714c 	.word	0x0801714c
 80108d8:	08017158 	.word	0x08017158
 80108dc:	08017180 	.word	0x08017180
 80108e0:	08017194 	.word	0x08017194
 80108e4:	20000218 	.word	0x20000218
 80108e8:	080171b4 	.word	0x080171b4

080108ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08a      	sub	sp, #40	; 0x28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80108f6:	2300      	movs	r3, #0
 80108f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80108fa:	2300      	movs	r3, #0
 80108fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010902:	2300      	movs	r3, #0
 8010904:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801090a:	4b28      	ldr	r3, [pc, #160]	; (80109ac <ip_reass_remove_oldest_datagram+0xc0>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010910:	e030      	b.n	8010974 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	695a      	ldr	r2, [r3, #20]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	429a      	cmp	r2, r3
 801091c:	d10c      	bne.n	8010938 <ip_reass_remove_oldest_datagram+0x4c>
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	699a      	ldr	r2, [r3, #24]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	691b      	ldr	r3, [r3, #16]
 8010926:	429a      	cmp	r2, r3
 8010928:	d106      	bne.n	8010938 <ip_reass_remove_oldest_datagram+0x4c>
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	899a      	ldrh	r2, [r3, #12]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	889b      	ldrh	r3, [r3, #4]
 8010932:	b29b      	uxth	r3, r3
 8010934:	429a      	cmp	r2, r3
 8010936:	d014      	beq.n	8010962 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	3301      	adds	r3, #1
 801093c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d104      	bne.n	801094e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	61bb      	str	r3, [r7, #24]
 801094c:	e009      	b.n	8010962 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	7fda      	ldrb	r2, [r3, #31]
 8010952:	6a3b      	ldr	r3, [r7, #32]
 8010954:	7fdb      	ldrb	r3, [r3, #31]
 8010956:	429a      	cmp	r2, r3
 8010958:	d803      	bhi.n	8010962 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1cb      	bne.n	8010912 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801097a:	6a3b      	ldr	r3, [r7, #32]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d008      	beq.n	8010992 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010980:	69b9      	ldr	r1, [r7, #24]
 8010982:	6a38      	ldr	r0, [r7, #32]
 8010984:	f7ff ff0e 	bl	80107a4 <ip_reass_free_complete_datagram>
 8010988:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801098a:	697a      	ldr	r2, [r7, #20]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	4413      	add	r3, r2
 8010990:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010992:	697a      	ldr	r2, [r7, #20]
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	429a      	cmp	r2, r3
 8010998:	da02      	bge.n	80109a0 <ip_reass_remove_oldest_datagram+0xb4>
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	2b01      	cmp	r3, #1
 801099e:	dcac      	bgt.n	80108fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80109a0:	697b      	ldr	r3, [r7, #20]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3728      	adds	r7, #40	; 0x28
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20000214 	.word	0x20000214

080109b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109ba:	2004      	movs	r0, #4
 80109bc:	f7f4 fcc8 	bl	8005350 <memp_malloc>
 80109c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d110      	bne.n	80109ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff ff8e 	bl	80108ec <ip_reass_remove_oldest_datagram>
 80109d0:	4602      	mov	r2, r0
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	4293      	cmp	r3, r2
 80109d6:	dc03      	bgt.n	80109e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109d8:	2004      	movs	r0, #4
 80109da:	f7f4 fcb9 	bl	8005350 <memp_malloc>
 80109de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d101      	bne.n	80109ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	e016      	b.n	8010a18 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80109ea:	2220      	movs	r2, #32
 80109ec:	2100      	movs	r1, #0
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f000 fe60 	bl	80116b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	220f      	movs	r2, #15
 80109f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80109fa:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <ip_reass_enqueue_new_datagram+0x70>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010a02:	4a07      	ldr	r2, [pc, #28]	; (8010a20 <ip_reass_enqueue_new_datagram+0x70>)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	2214      	movs	r2, #20
 8010a0e:	6879      	ldr	r1, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f000 fe44 	bl	801169e <memcpy>
  return ipr;
 8010a16:	68fb      	ldr	r3, [r7, #12]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	20000214 	.word	0x20000214

08010a24 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010a2e:	4b10      	ldr	r3, [pc, #64]	; (8010a70 <ip_reass_dequeue_datagram+0x4c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d104      	bne.n	8010a42 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4a0c      	ldr	r2, [pc, #48]	; (8010a70 <ip_reass_dequeue_datagram+0x4c>)
 8010a3e:	6013      	str	r3, [r2, #0]
 8010a40:	e00d      	b.n	8010a5e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d106      	bne.n	8010a56 <ip_reass_dequeue_datagram+0x32>
 8010a48:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <ip_reass_dequeue_datagram+0x50>)
 8010a4a:	f240 1245 	movw	r2, #325	; 0x145
 8010a4e:	490a      	ldr	r1, [pc, #40]	; (8010a78 <ip_reass_dequeue_datagram+0x54>)
 8010a50:	480a      	ldr	r0, [pc, #40]	; (8010a7c <ip_reass_dequeue_datagram+0x58>)
 8010a52:	f000 fe37 	bl	80116c4 <iprintf>
    prev->next = ipr->next;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010a5e:	6879      	ldr	r1, [r7, #4]
 8010a60:	2004      	movs	r0, #4
 8010a62:	f7f4 fcc1 	bl	80053e8 <memp_free>
}
 8010a66:	bf00      	nop
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20000214 	.word	0x20000214
 8010a74:	08017110 	.word	0x08017110
 8010a78:	080171d8 	.word	0x080171d8
 8010a7c:	08017158 	.word	0x08017158

08010a80 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08c      	sub	sp, #48	; 0x30
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010a90:	2301      	movs	r3, #1
 8010a92:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	885b      	ldrh	r3, [r3, #2]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f3 ffd6 	bl	8004a52 <lwip_htons>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	f003 030f 	and.w	r3, r3, #15
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010ab8:	7e7b      	ldrb	r3, [r7, #25]
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	8b7a      	ldrh	r2, [r7, #26]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d202      	bcs.n	8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac6:	e135      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010ac8:	7e7b      	ldrb	r3, [r7, #25]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	8b7a      	ldrh	r2, [r7, #26]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	88db      	ldrh	r3, [r3, #6]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f3 ffba 	bl	8004a52 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	00db      	lsls	r3, r3, #3
 8010ae8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	2200      	movs	r2, #0
 8010af4:	701a      	strb	r2, [r3, #0]
 8010af6:	2200      	movs	r2, #0
 8010af8:	705a      	strb	r2, [r3, #1]
 8010afa:	2200      	movs	r2, #0
 8010afc:	709a      	strb	r2, [r3, #2]
 8010afe:	2200      	movs	r2, #0
 8010b00:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b04:	8afa      	ldrh	r2, [r7, #22]
 8010b06:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010b08:	8afa      	ldrh	r2, [r7, #22]
 8010b0a:	8b7b      	ldrh	r3, [r7, #26]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b16:	88db      	ldrh	r3, [r3, #6]
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	8afa      	ldrh	r2, [r7, #22]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d902      	bls.n	8010b26 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b20:	f04f 33ff 	mov.w	r3, #4294967295
 8010b24:	e106      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b2c:	e068      	b.n	8010c00 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b36:	889b      	ldrh	r3, [r3, #4]
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	889b      	ldrh	r3, [r3, #4]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d235      	bcs.n	8010bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b48:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d020      	beq.n	8010b92 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b52:	889b      	ldrh	r3, [r3, #4]
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b58:	88db      	ldrh	r3, [r3, #6]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d307      	bcc.n	8010b70 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b62:	88db      	ldrh	r3, [r3, #6]
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	889b      	ldrh	r3, [r3, #4]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d902      	bls.n	8010b76 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b70:	f04f 33ff 	mov.w	r3, #4294967295
 8010b74:	e0de      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7e:	88db      	ldrh	r3, [r3, #6]
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b84:	889b      	ldrh	r3, [r3, #4]
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d03d      	beq.n	8010c08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010b90:	e03a      	b.n	8010c08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b94:	88db      	ldrh	r3, [r3, #6]
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	889b      	ldrh	r3, [r3, #4]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d902      	bls.n	8010ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba6:	e0c5      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	68ba      	ldr	r2, [r7, #8]
 8010bac:	605a      	str	r2, [r3, #4]
      break;
 8010bae:	e02b      	b.n	8010c08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb2:	889b      	ldrh	r3, [r3, #4]
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	889b      	ldrh	r3, [r3, #4]
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d102      	bne.n	8010bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc4:	e0b6      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	889b      	ldrh	r3, [r3, #4]
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	88db      	ldrh	r3, [r3, #6]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d202      	bcs.n	8010bdc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bda:	e0ab      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d009      	beq.n	8010bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be4:	88db      	ldrh	r3, [r3, #6]
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	889b      	ldrh	r3, [r3, #4]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d001      	beq.n	8010bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d193      	bne.n	8010b2e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010c06:	e000      	b.n	8010c0a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010c08:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d12d      	bne.n	8010c6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d01c      	beq.n	8010c50 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c18:	88db      	ldrh	r3, [r3, #6]
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1e:	889b      	ldrh	r3, [r3, #4]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d906      	bls.n	8010c34 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010c26:	4b45      	ldr	r3, [pc, #276]	; (8010d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c28:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010c2c:	4944      	ldr	r1, [pc, #272]	; (8010d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010c2e:	4845      	ldr	r0, [pc, #276]	; (8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c30:	f000 fd48 	bl	80116c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3c:	88db      	ldrh	r3, [r3, #6]
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c42:	889b      	ldrh	r3, [r3, #4]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d010      	beq.n	8010c6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	623b      	str	r3, [r7, #32]
 8010c4e:	e00d      	b.n	8010c6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d006      	beq.n	8010c66 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010c58:	4b38      	ldr	r3, [pc, #224]	; (8010d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c5a:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010c5e:	493a      	ldr	r1, [pc, #232]	; (8010d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010c60:	4838      	ldr	r0, [pc, #224]	; (8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c62:	f000 fd2f 	bl	80116c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d105      	bne.n	8010c7e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	7f9b      	ldrb	r3, [r3, #30]
 8010c76:	f003 0301 	and.w	r3, r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d059      	beq.n	8010d32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d04f      	beq.n	8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d006      	beq.n	8010c9a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	889b      	ldrh	r3, [r3, #4]
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d002      	beq.n	8010ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	623b      	str	r3, [r7, #32]
 8010c9e:	e041      	b.n	8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010caa:	e012      	b.n	8010cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb4:	88db      	ldrh	r3, [r3, #6]
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cba:	889b      	ldrh	r3, [r3, #4]
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d002      	beq.n	8010cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	623b      	str	r3, [r7, #32]
            break;
 8010cc6:	e007      	b.n	8010cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1e9      	bne.n	8010cac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d022      	beq.n	8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d106      	bne.n	8010cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010ce6:	4b15      	ldr	r3, [pc, #84]	; (8010d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010ce8:	f240 12df 	movw	r2, #479	; 0x1df
 8010cec:	4917      	ldr	r1, [pc, #92]	; (8010d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010cee:	4815      	ldr	r0, [pc, #84]	; (8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010cf0:	f000 fce8 	bl	80116c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d106      	bne.n	8010d0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010d00:	4b0e      	ldr	r3, [pc, #56]	; (8010d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d02:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010d06:	4911      	ldr	r1, [pc, #68]	; (8010d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010d08:	480e      	ldr	r0, [pc, #56]	; (8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d0a:	f000 fcdb 	bl	80116c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d006      	beq.n	8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010d16:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d18:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010d1c:	490c      	ldr	r1, [pc, #48]	; (8010d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010d1e:	4809      	ldr	r0, [pc, #36]	; (8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d20:	f000 fcd0 	bl	80116c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010d24:	6a3b      	ldr	r3, [r7, #32]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	bf14      	ite	ne
 8010d2a:	2301      	movne	r3, #1
 8010d2c:	2300      	moveq	r3, #0
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	e000      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3730      	adds	r7, #48	; 0x30
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	08017110 	.word	0x08017110
 8010d40:	080171f4 	.word	0x080171f4
 8010d44:	08017158 	.word	0x08017158
 8010d48:	08017214 	.word	0x08017214
 8010d4c:	0801724c 	.word	0x0801724c
 8010d50:	0801725c 	.word	0x0801725c

08010d54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08e      	sub	sp, #56	; 0x38
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	f003 030f 	and.w	r3, r3, #15
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b14      	cmp	r3, #20
 8010d72:	f040 8167 	bne.w	8011044 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	88db      	ldrh	r3, [r3, #6]
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7f3 fe68 	bl	8004a52 <lwip_htons>
 8010d82:	4603      	mov	r3, r0
 8010d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d90:	885b      	ldrh	r3, [r3, #2]
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7f3 fe5c 	bl	8004a52 <lwip_htons>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	f003 030f 	and.w	r3, r3, #15
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010db6:	429a      	cmp	r2, r3
 8010db8:	f0c0 8146 	bcc.w	8011048 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f7f5 fb07 	bl	80063dc <pbuf_clen>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010dd2:	4b9f      	ldr	r3, [pc, #636]	; (8011050 <ip4_reass+0x2fc>)
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	8c3b      	ldrh	r3, [r7, #32]
 8010dda:	4413      	add	r3, r2
 8010ddc:	2b0a      	cmp	r3, #10
 8010dde:	dd10      	ble.n	8010e02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010de0:	8c3b      	ldrh	r3, [r7, #32]
 8010de2:	4619      	mov	r1, r3
 8010de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010de6:	f7ff fd81 	bl	80108ec <ip_reass_remove_oldest_datagram>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 812d 	beq.w	801104c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010df2:	4b97      	ldr	r3, [pc, #604]	; (8011050 <ip4_reass+0x2fc>)
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	8c3b      	ldrh	r3, [r7, #32]
 8010dfa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010dfc:	2b0a      	cmp	r3, #10
 8010dfe:	f300 8125 	bgt.w	801104c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e02:	4b94      	ldr	r3, [pc, #592]	; (8011054 <ip4_reass+0x300>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	633b      	str	r3, [r7, #48]	; 0x30
 8010e08:	e015      	b.n	8010e36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	695a      	ldr	r2, [r3, #20]
 8010e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d10c      	bne.n	8010e30 <ip4_reass+0xdc>
 8010e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e18:	699a      	ldr	r2, [r3, #24]
 8010e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d106      	bne.n	8010e30 <ip4_reass+0xdc>
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	899a      	ldrh	r2, [r3, #12]
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	889b      	ldrh	r3, [r3, #4]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d006      	beq.n	8010e3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	633b      	str	r3, [r7, #48]	; 0x30
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1e6      	bne.n	8010e0a <ip4_reass+0xb6>
 8010e3c:	e000      	b.n	8010e40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010e3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d109      	bne.n	8010e5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010e46:	8c3b      	ldrh	r3, [r7, #32]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e4c:	f7ff fdb0 	bl	80109b0 <ip_reass_enqueue_new_datagram>
 8010e50:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d11c      	bne.n	8010e92 <ip4_reass+0x13e>
      goto nullreturn;
 8010e58:	e109      	b.n	801106e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	88db      	ldrh	r3, [r3, #6]
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7f3 fdf6 	bl	8004a52 <lwip_htons>
 8010e66:	4603      	mov	r3, r0
 8010e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d110      	bne.n	8010e92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e72:	89db      	ldrh	r3, [r3, #14]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f3 fdec 	bl	8004a52 <lwip_htons>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	3308      	adds	r3, #8
 8010e88:	2214      	movs	r2, #20
 8010e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f000 fc06 	bl	801169e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	88db      	ldrh	r3, [r3, #6]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f003 0320 	and.w	r3, r3, #32
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	bf0c      	ite	eq
 8010ea0:	2301      	moveq	r3, #1
 8010ea2:	2300      	movne	r3, #0
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00e      	beq.n	8010ecc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010eae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eb2:	4413      	add	r3, r2
 8010eb4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010eb6:	8b7a      	ldrh	r2, [r7, #26]
 8010eb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	f0c0 80a0 	bcc.w	8011000 <ip4_reass+0x2ac>
 8010ec0:	8b7b      	ldrh	r3, [r7, #26]
 8010ec2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	f200 809a 	bhi.w	8011000 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010ecc:	69fa      	ldr	r2, [r7, #28]
 8010ece:	6879      	ldr	r1, [r7, #4]
 8010ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ed2:	f7ff fdd5 	bl	8010a80 <ip_reass_chain_frag_into_datagram_and_validate>
 8010ed6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ede:	f000 8091 	beq.w	8011004 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010ee2:	4b5b      	ldr	r3, [pc, #364]	; (8011050 <ip4_reass+0x2fc>)
 8010ee4:	881a      	ldrh	r2, [r3, #0]
 8010ee6:	8c3b      	ldrh	r3, [r7, #32]
 8010ee8:	4413      	add	r3, r2
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	4b58      	ldr	r3, [pc, #352]	; (8011050 <ip4_reass+0x2fc>)
 8010eee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00d      	beq.n	8010f12 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010ef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010efa:	4413      	add	r3, r2
 8010efc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f00:	8a7a      	ldrh	r2, [r7, #18]
 8010f02:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f06:	7f9b      	ldrb	r3, [r3, #30]
 8010f08:	f043 0301 	orr.w	r3, r3, #1
 8010f0c:	b2da      	uxtb	r2, r3
 8010f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f10:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d171      	bne.n	8010ffc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1a:	8b9b      	ldrh	r3, [r3, #28]
 8010f1c:	3314      	adds	r3, #20
 8010f1e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f34:	3308      	adds	r3, #8
 8010f36:	2214      	movs	r2, #20
 8010f38:	4619      	mov	r1, r3
 8010f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f3c:	f000 fbaf 	bl	801169e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010f40:	8a3b      	ldrh	r3, [r7, #16]
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7f3 fd85 	bl	8004a52 <lwip_htons>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	2200      	movs	r2, #0
 8010f54:	719a      	strb	r2, [r3, #6]
 8010f56:	2200      	movs	r2, #0
 8010f58:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	729a      	strb	r2, [r3, #10]
 8010f60:	2200      	movs	r2, #0
 8010f62:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010f6a:	e00d      	b.n	8010f88 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010f72:	2114      	movs	r1, #20
 8010f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f76:	f7f5 f903 	bl	8006180 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7f5 fa67 	bl	8006450 <pbuf_cat>
      r = iprh->next_pbuf;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8010f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1ee      	bne.n	8010f6c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010f8e:	4b31      	ldr	r3, [pc, #196]	; (8011054 <ip4_reass+0x300>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d102      	bne.n	8010f9e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f9c:	e010      	b.n	8010fc0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f9e:	4b2d      	ldr	r3, [pc, #180]	; (8011054 <ip4_reass+0x300>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8010fa4:	e007      	b.n	8010fb6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d006      	beq.n	8010fbe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8010fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1f4      	bne.n	8010fa6 <ip4_reass+0x252>
 8010fbc:	e000      	b.n	8010fc0 <ip4_reass+0x26c>
          break;
 8010fbe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010fc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fc4:	f7ff fd2e 	bl	8010a24 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7f5 fa07 	bl	80063dc <pbuf_clen>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010fd2:	4b1f      	ldr	r3, [pc, #124]	; (8011050 <ip4_reass+0x2fc>)
 8010fd4:	881b      	ldrh	r3, [r3, #0]
 8010fd6:	8c3a      	ldrh	r2, [r7, #32]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d906      	bls.n	8010fea <ip4_reass+0x296>
 8010fdc:	4b1e      	ldr	r3, [pc, #120]	; (8011058 <ip4_reass+0x304>)
 8010fde:	f240 229b 	movw	r2, #667	; 0x29b
 8010fe2:	491e      	ldr	r1, [pc, #120]	; (801105c <ip4_reass+0x308>)
 8010fe4:	481e      	ldr	r0, [pc, #120]	; (8011060 <ip4_reass+0x30c>)
 8010fe6:	f000 fb6d 	bl	80116c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010fea:	4b19      	ldr	r3, [pc, #100]	; (8011050 <ip4_reass+0x2fc>)
 8010fec:	881a      	ldrh	r2, [r3, #0]
 8010fee:	8c3b      	ldrh	r3, [r7, #32]
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	4b16      	ldr	r3, [pc, #88]	; (8011050 <ip4_reass+0x2fc>)
 8010ff6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	e03c      	b.n	8011076 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	e03a      	b.n	8011076 <ip4_reass+0x322>

nullreturn_ipr:
 8011000:	bf00      	nop
 8011002:	e000      	b.n	8011006 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011004:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011008:	2b00      	cmp	r3, #0
 801100a:	d106      	bne.n	801101a <ip4_reass+0x2c6>
 801100c:	4b12      	ldr	r3, [pc, #72]	; (8011058 <ip4_reass+0x304>)
 801100e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011012:	4914      	ldr	r1, [pc, #80]	; (8011064 <ip4_reass+0x310>)
 8011014:	4812      	ldr	r0, [pc, #72]	; (8011060 <ip4_reass+0x30c>)
 8011016:	f000 fb55 	bl	80116c4 <iprintf>
  if (ipr->p == NULL) {
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d124      	bne.n	801106c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011022:	4b0c      	ldr	r3, [pc, #48]	; (8011054 <ip4_reass+0x300>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011028:	429a      	cmp	r2, r3
 801102a:	d006      	beq.n	801103a <ip4_reass+0x2e6>
 801102c:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <ip4_reass+0x304>)
 801102e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011032:	490d      	ldr	r1, [pc, #52]	; (8011068 <ip4_reass+0x314>)
 8011034:	480a      	ldr	r0, [pc, #40]	; (8011060 <ip4_reass+0x30c>)
 8011036:	f000 fb45 	bl	80116c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801103a:	2100      	movs	r1, #0
 801103c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801103e:	f7ff fcf1 	bl	8010a24 <ip_reass_dequeue_datagram>
 8011042:	e014      	b.n	801106e <ip4_reass+0x31a>
    goto nullreturn;
 8011044:	bf00      	nop
 8011046:	e012      	b.n	801106e <ip4_reass+0x31a>
    goto nullreturn;
 8011048:	bf00      	nop
 801104a:	e010      	b.n	801106e <ip4_reass+0x31a>
      goto nullreturn;
 801104c:	bf00      	nop
 801104e:	e00e      	b.n	801106e <ip4_reass+0x31a>
 8011050:	20000218 	.word	0x20000218
 8011054:	20000214 	.word	0x20000214
 8011058:	08017110 	.word	0x08017110
 801105c:	08017280 	.word	0x08017280
 8011060:	08017158 	.word	0x08017158
 8011064:	0801729c 	.word	0x0801729c
 8011068:	080172a8 	.word	0x080172a8
  }

nullreturn:
 801106c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7f5 f914 	bl	800629c <pbuf_free>
  return NULL;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3738      	adds	r7, #56	; 0x38
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop

08011080 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011084:	2005      	movs	r0, #5
 8011086:	f7f4 f963 	bl	8005350 <memp_malloc>
 801108a:	4603      	mov	r3, r0
}
 801108c:	4618      	mov	r0, r3
 801108e:	bd80      	pop	{r7, pc}

08011090 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d106      	bne.n	80110ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801109e:	4b07      	ldr	r3, [pc, #28]	; (80110bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80110a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80110a4:	4906      	ldr	r1, [pc, #24]	; (80110c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80110a6:	4807      	ldr	r0, [pc, #28]	; (80110c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80110a8:	f000 fb0c 	bl	80116c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80110ac:	6879      	ldr	r1, [r7, #4]
 80110ae:	2005      	movs	r0, #5
 80110b0:	f7f4 f99a 	bl	80053e8 <memp_free>
}
 80110b4:	bf00      	nop
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	08017110 	.word	0x08017110
 80110c0:	080172c8 	.word	0x080172c8
 80110c4:	08017158 	.word	0x08017158

080110c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d106      	bne.n	80110e8 <ipfrag_free_pbuf_custom+0x20>
 80110da:	4b11      	ldr	r3, [pc, #68]	; (8011120 <ipfrag_free_pbuf_custom+0x58>)
 80110dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80110e0:	4910      	ldr	r1, [pc, #64]	; (8011124 <ipfrag_free_pbuf_custom+0x5c>)
 80110e2:	4811      	ldr	r0, [pc, #68]	; (8011128 <ipfrag_free_pbuf_custom+0x60>)
 80110e4:	f000 faee 	bl	80116c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d006      	beq.n	80110fe <ipfrag_free_pbuf_custom+0x36>
 80110f0:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <ipfrag_free_pbuf_custom+0x58>)
 80110f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80110f6:	490d      	ldr	r1, [pc, #52]	; (801112c <ipfrag_free_pbuf_custom+0x64>)
 80110f8:	480b      	ldr	r0, [pc, #44]	; (8011128 <ipfrag_free_pbuf_custom+0x60>)
 80110fa:	f000 fae3 	bl	80116c4 <iprintf>
  if (pcr->original != NULL) {
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	695b      	ldr	r3, [r3, #20]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	695b      	ldr	r3, [r3, #20]
 801110a:	4618      	mov	r0, r3
 801110c:	f7f5 f8c6 	bl	800629c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f7ff ffbd 	bl	8011090 <ip_frag_free_pbuf_custom_ref>
}
 8011116:	bf00      	nop
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	08017110 	.word	0x08017110
 8011124:	080172d4 	.word	0x080172d4
 8011128:	08017158 	.word	0x08017158
 801112c:	080172e0 	.word	0x080172e0

08011130 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b094      	sub	sp, #80	; 0x50
 8011134:	af02      	add	r7, sp, #8
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801113c:	2300      	movs	r3, #0
 801113e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011146:	3b14      	subs	r3, #20
 8011148:	2b00      	cmp	r3, #0
 801114a:	da00      	bge.n	801114e <ip4_frag+0x1e>
 801114c:	3307      	adds	r3, #7
 801114e:	10db      	asrs	r3, r3, #3
 8011150:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011152:	2314      	movs	r3, #20
 8011154:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	b2db      	uxtb	r3, r3
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	b2db      	uxtb	r3, r3
 801116e:	2b14      	cmp	r3, #20
 8011170:	d002      	beq.n	8011178 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011172:	f06f 0305 	mvn.w	r3, #5
 8011176:	e10f      	b.n	8011398 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	895b      	ldrh	r3, [r3, #10]
 801117c:	2b13      	cmp	r3, #19
 801117e:	d809      	bhi.n	8011194 <ip4_frag+0x64>
 8011180:	4b87      	ldr	r3, [pc, #540]	; (80113a0 <ip4_frag+0x270>)
 8011182:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011186:	4987      	ldr	r1, [pc, #540]	; (80113a4 <ip4_frag+0x274>)
 8011188:	4887      	ldr	r0, [pc, #540]	; (80113a8 <ip4_frag+0x278>)
 801118a:	f000 fa9b 	bl	80116c4 <iprintf>
 801118e:	f06f 0305 	mvn.w	r3, #5
 8011192:	e101      	b.n	8011398 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011196:	88db      	ldrh	r3, [r3, #6]
 8011198:	b29b      	uxth	r3, r3
 801119a:	4618      	mov	r0, r3
 801119c:	f7f3 fc59 	bl	8004a52 <lwip_htons>
 80111a0:	4603      	mov	r3, r0
 80111a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80111a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80111a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80111ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80111b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80111b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	3b14      	subs	r3, #20
 80111bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80111c0:	e0e0      	b.n	8011384 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80111c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111cc:	4293      	cmp	r3, r2
 80111ce:	bf28      	it	cs
 80111d0:	4613      	movcs	r3, r2
 80111d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80111d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111d8:	2114      	movs	r1, #20
 80111da:	200e      	movs	r0, #14
 80111dc:	f7f4 fd38 	bl	8005c50 <pbuf_alloc>
 80111e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 80d4 	beq.w	8011392 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	895b      	ldrh	r3, [r3, #10]
 80111ee:	2b13      	cmp	r3, #19
 80111f0:	d806      	bhi.n	8011200 <ip4_frag+0xd0>
 80111f2:	4b6b      	ldr	r3, [pc, #428]	; (80113a0 <ip4_frag+0x270>)
 80111f4:	f240 3225 	movw	r2, #805	; 0x325
 80111f8:	496c      	ldr	r1, [pc, #432]	; (80113ac <ip4_frag+0x27c>)
 80111fa:	486b      	ldr	r0, [pc, #428]	; (80113a8 <ip4_frag+0x278>)
 80111fc:	f000 fa62 	bl	80116c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	2214      	movs	r2, #20
 8011206:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011208:	4618      	mov	r0, r3
 801120a:	f000 fa48 	bl	801169e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011214:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011216:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801121a:	e064      	b.n	80112e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	895a      	ldrh	r2, [r3, #10]
 8011220:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	895b      	ldrh	r3, [r3, #10]
 801122a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801122c:	429a      	cmp	r2, r3
 801122e:	d906      	bls.n	801123e <ip4_frag+0x10e>
 8011230:	4b5b      	ldr	r3, [pc, #364]	; (80113a0 <ip4_frag+0x270>)
 8011232:	f240 322d 	movw	r2, #813	; 0x32d
 8011236:	495e      	ldr	r1, [pc, #376]	; (80113b0 <ip4_frag+0x280>)
 8011238:	485b      	ldr	r0, [pc, #364]	; (80113a8 <ip4_frag+0x278>)
 801123a:	f000 fa43 	bl	80116c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801123e:	8bfa      	ldrh	r2, [r7, #30]
 8011240:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011244:	4293      	cmp	r3, r2
 8011246:	bf28      	it	cs
 8011248:	4613      	movcs	r3, r2
 801124a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801124e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011252:	2b00      	cmp	r3, #0
 8011254:	d105      	bne.n	8011262 <ip4_frag+0x132>
        poff = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	60fb      	str	r3, [r7, #12]
        continue;
 8011260:	e041      	b.n	80112e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011262:	f7ff ff0d 	bl	8011080 <ip_frag_alloc_pbuf_custom_ref>
 8011266:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d103      	bne.n	8011276 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801126e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011270:	f7f5 f814 	bl	800629c <pbuf_free>
        goto memerr;
 8011274:	e08e      	b.n	8011394 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011276:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801127c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801127e:	4413      	add	r3, r2
 8011280:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011284:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011288:	9201      	str	r2, [sp, #4]
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	4603      	mov	r3, r0
 801128e:	2241      	movs	r2, #65	; 0x41
 8011290:	2000      	movs	r0, #0
 8011292:	f7f4 fe21 	bl	8005ed8 <pbuf_alloced_custom>
 8011296:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d106      	bne.n	80112ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801129e:	69b8      	ldr	r0, [r7, #24]
 80112a0:	f7ff fef6 	bl	8011090 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80112a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112a6:	f7f4 fff9 	bl	800629c <pbuf_free>
        goto memerr;
 80112aa:	e073      	b.n	8011394 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7f5 f8ad 	bl	800640c <pbuf_ref>
      pcr->original = p;
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	4a3e      	ldr	r2, [pc, #248]	; (80113b4 <ip4_frag+0x284>)
 80112bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80112be:	6979      	ldr	r1, [r7, #20]
 80112c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112c2:	f7f5 f8c5 	bl	8006450 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80112c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80112ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80112d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <ip4_frag+0x1b6>
        poff = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80112e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d196      	bne.n	801121c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80112ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80112f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80112f4:	4413      	add	r3, r2
 80112f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80112f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011300:	3b14      	subs	r3, #20
 8011302:	429a      	cmp	r2, r3
 8011304:	bfd4      	ite	le
 8011306:	2301      	movle	r3, #1
 8011308:	2300      	movgt	r3, #0
 801130a:	b2db      	uxtb	r3, r3
 801130c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801130e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011312:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011316:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d002      	beq.n	8011324 <ip4_frag+0x1f4>
 801131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011320:	2b00      	cmp	r3, #0
 8011322:	d003      	beq.n	801132c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011324:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801132a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801132c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801132e:	4618      	mov	r0, r3
 8011330:	f7f3 fb8f 	bl	8004a52 <lwip_htons>
 8011334:	4603      	mov	r3, r0
 8011336:	461a      	mov	r2, r3
 8011338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801133c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801133e:	3314      	adds	r3, #20
 8011340:	b29b      	uxth	r3, r3
 8011342:	4618      	mov	r0, r3
 8011344:	f7f3 fb85 	bl	8004a52 <lwip_htons>
 8011348:	4603      	mov	r3, r0
 801134a:	461a      	mov	r2, r3
 801134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	2200      	movs	r2, #0
 8011354:	729a      	strb	r2, [r3, #10]
 8011356:	2200      	movs	r2, #0
 8011358:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	695b      	ldr	r3, [r3, #20]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011362:	68b8      	ldr	r0, [r7, #8]
 8011364:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011368:	f7f4 ff98 	bl	800629c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801136c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011378:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801137c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801137e:	4413      	add	r3, r2
 8011380:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011388:	2b00      	cmp	r3, #0
 801138a:	f47f af1a 	bne.w	80111c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801138e:	2300      	movs	r3, #0
 8011390:	e002      	b.n	8011398 <ip4_frag+0x268>
      goto memerr;
 8011392:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011398:	4618      	mov	r0, r3
 801139a:	3748      	adds	r7, #72	; 0x48
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	08017110 	.word	0x08017110
 80113a4:	080172ec 	.word	0x080172ec
 80113a8:	08017158 	.word	0x08017158
 80113ac:	08017308 	.word	0x08017308
 80113b0:	08017328 	.word	0x08017328
 80113b4:	080110c9 	.word	0x080110c9

080113b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80113b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113bc:	b096      	sub	sp, #88	; 0x58
 80113be:	af0a      	add	r7, sp, #40	; 0x28
 80113c0:	61f8      	str	r0, [r7, #28]
 80113c2:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80113c4:	230e      	movs	r3, #14
 80113c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	895b      	ldrh	r3, [r3, #10]
 80113cc:	2b0e      	cmp	r3, #14
 80113ce:	f240 80c8 	bls.w	8011562 <ethernet_input+0x1aa>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	7bdb      	ldrb	r3, [r3, #15]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d106      	bne.n	80113e8 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80113e0:	3301      	adds	r3, #1
 80113e2:	b2da      	uxtb	r2, r3
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	4698      	mov	r8, r3
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	785b      	ldrb	r3, [r3, #1]
 80113f8:	4699      	mov	r9, r3
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	789b      	ldrb	r3, [r3, #2]
 80113fe:	469a      	mov	sl, r3
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	78db      	ldrb	r3, [r3, #3]
 8011404:	461c      	mov	r4, r3
 8011406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011408:	791b      	ldrb	r3, [r3, #4]
 801140a:	461d      	mov	r5, r3
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	795b      	ldrb	r3, [r3, #5]
 8011410:	461e      	mov	r6, r3
 8011412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011414:	799b      	ldrb	r3, [r3, #6]
 8011416:	617b      	str	r3, [r7, #20]
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	79db      	ldrb	r3, [r3, #7]
 801141c:	613b      	str	r3, [r7, #16]
 801141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011420:	7a1b      	ldrb	r3, [r3, #8]
 8011422:	60fb      	str	r3, [r7, #12]
 8011424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011426:	7a5b      	ldrb	r3, [r3, #9]
 8011428:	60bb      	str	r3, [r7, #8]
 801142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142c:	7a9b      	ldrb	r3, [r3, #10]
 801142e:	607b      	str	r3, [r7, #4]
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	7adb      	ldrb	r3, [r3, #11]
 8011434:	603b      	str	r3, [r7, #0]
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	899b      	ldrh	r3, [r3, #12]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	f7f3 fb08 	bl	8004a52 <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	9309      	str	r3, [sp, #36]	; 0x24
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	9208      	str	r2, [sp, #32]
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	9207      	str	r2, [sp, #28]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	9206      	str	r2, [sp, #24]
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	9205      	str	r2, [sp, #20]
 8011456:	693a      	ldr	r2, [r7, #16]
 8011458:	9204      	str	r2, [sp, #16]
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	9303      	str	r3, [sp, #12]
 801145e:	9602      	str	r6, [sp, #8]
 8011460:	9501      	str	r5, [sp, #4]
 8011462:	9400      	str	r4, [sp, #0]
 8011464:	4653      	mov	r3, sl
 8011466:	464a      	mov	r2, r9
 8011468:	4641      	mov	r1, r8
 801146a:	4845      	ldr	r0, [pc, #276]	; (8011580 <ethernet_input+0x1c8>)
 801146c:	f000 f92a 	bl	80116c4 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	7b1a      	ldrb	r2, [r3, #12]
 8011474:	7b5b      	ldrb	r3, [r3, #13]
 8011476:	021b      	lsls	r3, r3, #8
 8011478:	4313      	orrs	r3, r2
 801147a:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 0301 	and.w	r3, r3, #1
 8011484:	2b00      	cmp	r3, #0
 8011486:	d023      	beq.n	80114d0 <ethernet_input+0x118>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d10f      	bne.n	80114b0 <ethernet_input+0xf8>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011492:	785b      	ldrb	r3, [r3, #1]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d11b      	bne.n	80114d0 <ethernet_input+0x118>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801149c:	2b5e      	cmp	r3, #94	; 0x5e
 801149e:	d117      	bne.n	80114d0 <ethernet_input+0x118>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	7b5b      	ldrb	r3, [r3, #13]
 80114a4:	f043 0310 	orr.w	r3, r3, #16
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	735a      	strb	r2, [r3, #13]
 80114ae:	e00f      	b.n	80114d0 <ethernet_input+0x118>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	2206      	movs	r2, #6
 80114b4:	4933      	ldr	r1, [pc, #204]	; (8011584 <ethernet_input+0x1cc>)
 80114b6:	4618      	mov	r0, r3
 80114b8:	f000 f8e2 	bl	8011680 <memcmp>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <ethernet_input+0x118>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80114c2:	69fb      	ldr	r3, [r7, #28]
 80114c4:	7b5b      	ldrb	r3, [r3, #13]
 80114c6:	f043 0308 	orr.w	r3, r3, #8
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80114d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80114d2:	2b08      	cmp	r3, #8
 80114d4:	d003      	beq.n	80114de <ethernet_input+0x126>
 80114d6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80114da:	d020      	beq.n	801151e <ethernet_input+0x166>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80114dc:	e046      	b.n	801156c <ethernet_input+0x1b4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114e4:	f003 0308 	and.w	r3, r3, #8
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d03c      	beq.n	8011566 <ethernet_input+0x1ae>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80114ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80114ee:	4619      	mov	r1, r3
 80114f0:	69f8      	ldr	r0, [r7, #28]
 80114f2:	f7f4 fe45 	bl	8006180 <pbuf_remove_header>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00b      	beq.n	8011514 <ethernet_input+0x15c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	891b      	ldrh	r3, [r3, #8]
 8011500:	4619      	mov	r1, r3
 8011502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011504:	461a      	mov	r2, r3
 8011506:	4820      	ldr	r0, [pc, #128]	; (8011588 <ethernet_input+0x1d0>)
 8011508:	f000 f8dc 	bl	80116c4 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801150c:	481f      	ldr	r0, [pc, #124]	; (801158c <ethernet_input+0x1d4>)
 801150e:	f000 f8d9 	bl	80116c4 <iprintf>
        goto free_and_return;
 8011512:	e02b      	b.n	801156c <ethernet_input+0x1b4>
        ip4_input(p, netif);
 8011514:	69b9      	ldr	r1, [r7, #24]
 8011516:	69f8      	ldr	r0, [r7, #28]
 8011518:	f7fe fd36 	bl	800ff88 <ip4_input>
      break;
 801151c:	e01f      	b.n	801155e <ethernet_input+0x1a6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011524:	f003 0308 	and.w	r3, r3, #8
 8011528:	2b00      	cmp	r3, #0
 801152a:	d01e      	beq.n	801156a <ethernet_input+0x1b2>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801152c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801152e:	4619      	mov	r1, r3
 8011530:	69f8      	ldr	r0, [r7, #28]
 8011532:	f7f4 fe25 	bl	8006180 <pbuf_remove_header>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00b      	beq.n	8011554 <ethernet_input+0x19c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	4619      	mov	r1, r3
 8011542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011544:	461a      	mov	r2, r3
 8011546:	4812      	ldr	r0, [pc, #72]	; (8011590 <ethernet_input+0x1d8>)
 8011548:	f000 f8bc 	bl	80116c4 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801154c:	480f      	ldr	r0, [pc, #60]	; (801158c <ethernet_input+0x1d4>)
 801154e:	f000 f8b9 	bl	80116c4 <iprintf>
        goto free_and_return;
 8011552:	e00b      	b.n	801156c <ethernet_input+0x1b4>
        etharp_input(p, netif);
 8011554:	69b9      	ldr	r1, [r7, #24]
 8011556:	69f8      	ldr	r0, [r7, #28]
 8011558:	f7fd fe0a 	bl	800f170 <etharp_input>
      break;
 801155c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801155e:	2300      	movs	r3, #0
 8011560:	e008      	b.n	8011574 <ethernet_input+0x1bc>
    goto free_and_return;
 8011562:	bf00      	nop
 8011564:	e002      	b.n	801156c <ethernet_input+0x1b4>
        goto free_and_return;
 8011566:	bf00      	nop
 8011568:	e000      	b.n	801156c <ethernet_input+0x1b4>
        goto free_and_return;
 801156a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801156c:	69f8      	ldr	r0, [r7, #28]
 801156e:	f7f4 fe95 	bl	800629c <pbuf_free>
  return ERR_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	3730      	adds	r7, #48	; 0x30
 8011578:	46bd      	mov	sp, r7
 801157a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801157e:	bf00      	nop
 8011580:	08017338 	.word	0x08017338
 8011584:	08017680 	.word	0x08017680
 8011588:	080173b4 	.word	0x080173b4
 801158c:	080173f0 	.word	0x080173f0
 8011590:	08017414 	.word	0x08017414

08011594 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	607a      	str	r2, [r7, #4]
 80115a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80115a2:	8c3b      	ldrh	r3, [r7, #32]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7f3 fa54 	bl	8004a52 <lwip_htons>
 80115aa:	4603      	mov	r3, r0
 80115ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80115ae:	210e      	movs	r1, #14
 80115b0:	68b8      	ldr	r0, [r7, #8]
 80115b2:	f7f4 fdd5 	bl	8006160 <pbuf_add_header>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d129      	bne.n	8011610 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	8afa      	ldrh	r2, [r7, #22]
 80115c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	2206      	movs	r2, #6
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f865 	bl	801169e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	3306      	adds	r3, #6
 80115d8:	2206      	movs	r2, #6
 80115da:	6879      	ldr	r1, [r7, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 f85e 	bl	801169e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115e8:	2b06      	cmp	r3, #6
 80115ea:	d006      	beq.n	80115fa <ethernet_output+0x66>
 80115ec:	4b0d      	ldr	r3, [pc, #52]	; (8011624 <ethernet_output+0x90>)
 80115ee:	f240 1233 	movw	r2, #307	; 0x133
 80115f2:	490d      	ldr	r1, [pc, #52]	; (8011628 <ethernet_output+0x94>)
 80115f4:	480d      	ldr	r0, [pc, #52]	; (801162c <ethernet_output+0x98>)
 80115f6:	f000 f865 	bl	80116c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 80115fa:	68b9      	ldr	r1, [r7, #8]
 80115fc:	480c      	ldr	r0, [pc, #48]	; (8011630 <ethernet_output+0x9c>)
 80115fe:	f000 f861 	bl	80116c4 <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	699b      	ldr	r3, [r3, #24]
 8011606:	68b9      	ldr	r1, [r7, #8]
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	4798      	blx	r3
 801160c:	4603      	mov	r3, r0
 801160e:	e005      	b.n	801161c <ethernet_output+0x88>
      goto pbuf_header_failed;
 8011610:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8011612:	4808      	ldr	r0, [pc, #32]	; (8011634 <ethernet_output+0xa0>)
 8011614:	f000 f8de 	bl	80117d4 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011618:	f06f 0301 	mvn.w	r3, #1
}
 801161c:	4618      	mov	r0, r3
 801161e:	3718      	adds	r7, #24
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	08017458 	.word	0x08017458
 8011628:	08017490 	.word	0x08017490
 801162c:	080174c4 	.word	0x080174c4
 8011630:	080174ec 	.word	0x080174ec
 8011634:	08017510 	.word	0x08017510

08011638 <__libc_init_array>:
 8011638:	b570      	push	{r4, r5, r6, lr}
 801163a:	4e0d      	ldr	r6, [pc, #52]	; (8011670 <__libc_init_array+0x38>)
 801163c:	4c0d      	ldr	r4, [pc, #52]	; (8011674 <__libc_init_array+0x3c>)
 801163e:	1ba4      	subs	r4, r4, r6
 8011640:	10a4      	asrs	r4, r4, #2
 8011642:	2500      	movs	r5, #0
 8011644:	42a5      	cmp	r5, r4
 8011646:	d109      	bne.n	801165c <__libc_init_array+0x24>
 8011648:	4e0b      	ldr	r6, [pc, #44]	; (8011678 <__libc_init_array+0x40>)
 801164a:	4c0c      	ldr	r4, [pc, #48]	; (801167c <__libc_init_array+0x44>)
 801164c:	f001 f808 	bl	8012660 <_init>
 8011650:	1ba4      	subs	r4, r4, r6
 8011652:	10a4      	asrs	r4, r4, #2
 8011654:	2500      	movs	r5, #0
 8011656:	42a5      	cmp	r5, r4
 8011658:	d105      	bne.n	8011666 <__libc_init_array+0x2e>
 801165a:	bd70      	pop	{r4, r5, r6, pc}
 801165c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011660:	4798      	blx	r3
 8011662:	3501      	adds	r5, #1
 8011664:	e7ee      	b.n	8011644 <__libc_init_array+0xc>
 8011666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801166a:	4798      	blx	r3
 801166c:	3501      	adds	r5, #1
 801166e:	e7f2      	b.n	8011656 <__libc_init_array+0x1e>
 8011670:	08017730 	.word	0x08017730
 8011674:	08017730 	.word	0x08017730
 8011678:	08017730 	.word	0x08017730
 801167c:	08017734 	.word	0x08017734

08011680 <memcmp>:
 8011680:	b530      	push	{r4, r5, lr}
 8011682:	2400      	movs	r4, #0
 8011684:	42a2      	cmp	r2, r4
 8011686:	d101      	bne.n	801168c <memcmp+0xc>
 8011688:	2000      	movs	r0, #0
 801168a:	e007      	b.n	801169c <memcmp+0x1c>
 801168c:	5d03      	ldrb	r3, [r0, r4]
 801168e:	3401      	adds	r4, #1
 8011690:	190d      	adds	r5, r1, r4
 8011692:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011696:	42ab      	cmp	r3, r5
 8011698:	d0f4      	beq.n	8011684 <memcmp+0x4>
 801169a:	1b58      	subs	r0, r3, r5
 801169c:	bd30      	pop	{r4, r5, pc}

0801169e <memcpy>:
 801169e:	b510      	push	{r4, lr}
 80116a0:	1e43      	subs	r3, r0, #1
 80116a2:	440a      	add	r2, r1
 80116a4:	4291      	cmp	r1, r2
 80116a6:	d100      	bne.n	80116aa <memcpy+0xc>
 80116a8:	bd10      	pop	{r4, pc}
 80116aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116b2:	e7f7      	b.n	80116a4 <memcpy+0x6>

080116b4 <memset>:
 80116b4:	4402      	add	r2, r0
 80116b6:	4603      	mov	r3, r0
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d100      	bne.n	80116be <memset+0xa>
 80116bc:	4770      	bx	lr
 80116be:	f803 1b01 	strb.w	r1, [r3], #1
 80116c2:	e7f9      	b.n	80116b8 <memset+0x4>

080116c4 <iprintf>:
 80116c4:	b40f      	push	{r0, r1, r2, r3}
 80116c6:	4b0a      	ldr	r3, [pc, #40]	; (80116f0 <iprintf+0x2c>)
 80116c8:	b513      	push	{r0, r1, r4, lr}
 80116ca:	681c      	ldr	r4, [r3, #0]
 80116cc:	b124      	cbz	r4, 80116d8 <iprintf+0x14>
 80116ce:	69a3      	ldr	r3, [r4, #24]
 80116d0:	b913      	cbnz	r3, 80116d8 <iprintf+0x14>
 80116d2:	4620      	mov	r0, r4
 80116d4:	f000 fa6a 	bl	8011bac <__sinit>
 80116d8:	ab05      	add	r3, sp, #20
 80116da:	9a04      	ldr	r2, [sp, #16]
 80116dc:	68a1      	ldr	r1, [r4, #8]
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	4620      	mov	r0, r4
 80116e2:	f000 fc2b 	bl	8011f3c <_vfiprintf_r>
 80116e6:	b002      	add	sp, #8
 80116e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116ec:	b004      	add	sp, #16
 80116ee:	4770      	bx	lr
 80116f0:	20000018 	.word	0x20000018

080116f4 <putchar>:
 80116f4:	b538      	push	{r3, r4, r5, lr}
 80116f6:	4b08      	ldr	r3, [pc, #32]	; (8011718 <putchar+0x24>)
 80116f8:	681c      	ldr	r4, [r3, #0]
 80116fa:	4605      	mov	r5, r0
 80116fc:	b124      	cbz	r4, 8011708 <putchar+0x14>
 80116fe:	69a3      	ldr	r3, [r4, #24]
 8011700:	b913      	cbnz	r3, 8011708 <putchar+0x14>
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fa52 	bl	8011bac <__sinit>
 8011708:	68a2      	ldr	r2, [r4, #8]
 801170a:	4629      	mov	r1, r5
 801170c:	4620      	mov	r0, r4
 801170e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011712:	f000 beb1 	b.w	8012478 <_putc_r>
 8011716:	bf00      	nop
 8011718:	20000018 	.word	0x20000018

0801171c <_puts_r>:
 801171c:	b570      	push	{r4, r5, r6, lr}
 801171e:	460e      	mov	r6, r1
 8011720:	4605      	mov	r5, r0
 8011722:	b118      	cbz	r0, 801172c <_puts_r+0x10>
 8011724:	6983      	ldr	r3, [r0, #24]
 8011726:	b90b      	cbnz	r3, 801172c <_puts_r+0x10>
 8011728:	f000 fa40 	bl	8011bac <__sinit>
 801172c:	69ab      	ldr	r3, [r5, #24]
 801172e:	68ac      	ldr	r4, [r5, #8]
 8011730:	b913      	cbnz	r3, 8011738 <_puts_r+0x1c>
 8011732:	4628      	mov	r0, r5
 8011734:	f000 fa3a 	bl	8011bac <__sinit>
 8011738:	4b23      	ldr	r3, [pc, #140]	; (80117c8 <_puts_r+0xac>)
 801173a:	429c      	cmp	r4, r3
 801173c:	d117      	bne.n	801176e <_puts_r+0x52>
 801173e:	686c      	ldr	r4, [r5, #4]
 8011740:	89a3      	ldrh	r3, [r4, #12]
 8011742:	071b      	lsls	r3, r3, #28
 8011744:	d51d      	bpl.n	8011782 <_puts_r+0x66>
 8011746:	6923      	ldr	r3, [r4, #16]
 8011748:	b1db      	cbz	r3, 8011782 <_puts_r+0x66>
 801174a:	3e01      	subs	r6, #1
 801174c:	68a3      	ldr	r3, [r4, #8]
 801174e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011752:	3b01      	subs	r3, #1
 8011754:	60a3      	str	r3, [r4, #8]
 8011756:	b9e9      	cbnz	r1, 8011794 <_puts_r+0x78>
 8011758:	2b00      	cmp	r3, #0
 801175a:	da2e      	bge.n	80117ba <_puts_r+0x9e>
 801175c:	4622      	mov	r2, r4
 801175e:	210a      	movs	r1, #10
 8011760:	4628      	mov	r0, r5
 8011762:	f000 f873 	bl	801184c <__swbuf_r>
 8011766:	3001      	adds	r0, #1
 8011768:	d011      	beq.n	801178e <_puts_r+0x72>
 801176a:	200a      	movs	r0, #10
 801176c:	e011      	b.n	8011792 <_puts_r+0x76>
 801176e:	4b17      	ldr	r3, [pc, #92]	; (80117cc <_puts_r+0xb0>)
 8011770:	429c      	cmp	r4, r3
 8011772:	d101      	bne.n	8011778 <_puts_r+0x5c>
 8011774:	68ac      	ldr	r4, [r5, #8]
 8011776:	e7e3      	b.n	8011740 <_puts_r+0x24>
 8011778:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <_puts_r+0xb4>)
 801177a:	429c      	cmp	r4, r3
 801177c:	bf08      	it	eq
 801177e:	68ec      	ldreq	r4, [r5, #12]
 8011780:	e7de      	b.n	8011740 <_puts_r+0x24>
 8011782:	4621      	mov	r1, r4
 8011784:	4628      	mov	r0, r5
 8011786:	f000 f8b3 	bl	80118f0 <__swsetup_r>
 801178a:	2800      	cmp	r0, #0
 801178c:	d0dd      	beq.n	801174a <_puts_r+0x2e>
 801178e:	f04f 30ff 	mov.w	r0, #4294967295
 8011792:	bd70      	pop	{r4, r5, r6, pc}
 8011794:	2b00      	cmp	r3, #0
 8011796:	da04      	bge.n	80117a2 <_puts_r+0x86>
 8011798:	69a2      	ldr	r2, [r4, #24]
 801179a:	429a      	cmp	r2, r3
 801179c:	dc06      	bgt.n	80117ac <_puts_r+0x90>
 801179e:	290a      	cmp	r1, #10
 80117a0:	d004      	beq.n	80117ac <_puts_r+0x90>
 80117a2:	6823      	ldr	r3, [r4, #0]
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	6022      	str	r2, [r4, #0]
 80117a8:	7019      	strb	r1, [r3, #0]
 80117aa:	e7cf      	b.n	801174c <_puts_r+0x30>
 80117ac:	4622      	mov	r2, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	f000 f84c 	bl	801184c <__swbuf_r>
 80117b4:	3001      	adds	r0, #1
 80117b6:	d1c9      	bne.n	801174c <_puts_r+0x30>
 80117b8:	e7e9      	b.n	801178e <_puts_r+0x72>
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	200a      	movs	r0, #10
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	6022      	str	r2, [r4, #0]
 80117c2:	7018      	strb	r0, [r3, #0]
 80117c4:	e7e5      	b.n	8011792 <_puts_r+0x76>
 80117c6:	bf00      	nop
 80117c8:	080176b4 	.word	0x080176b4
 80117cc:	080176d4 	.word	0x080176d4
 80117d0:	08017694 	.word	0x08017694

080117d4 <puts>:
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <puts+0xc>)
 80117d6:	4601      	mov	r1, r0
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	f7ff bf9f 	b.w	801171c <_puts_r>
 80117de:	bf00      	nop
 80117e0:	20000018 	.word	0x20000018

080117e4 <rand>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	4b13      	ldr	r3, [pc, #76]	; (8011834 <rand+0x50>)
 80117e8:	681c      	ldr	r4, [r3, #0]
 80117ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80117ec:	b97b      	cbnz	r3, 801180e <rand+0x2a>
 80117ee:	2018      	movs	r0, #24
 80117f0:	f000 faca 	bl	8011d88 <malloc>
 80117f4:	4a10      	ldr	r2, [pc, #64]	; (8011838 <rand+0x54>)
 80117f6:	4b11      	ldr	r3, [pc, #68]	; (801183c <rand+0x58>)
 80117f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80117fa:	e9c0 2300 	strd	r2, r3, [r0]
 80117fe:	4b10      	ldr	r3, [pc, #64]	; (8011840 <rand+0x5c>)
 8011800:	6083      	str	r3, [r0, #8]
 8011802:	230b      	movs	r3, #11
 8011804:	8183      	strh	r3, [r0, #12]
 8011806:	2201      	movs	r2, #1
 8011808:	2300      	movs	r3, #0
 801180a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801180e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011810:	480c      	ldr	r0, [pc, #48]	; (8011844 <rand+0x60>)
 8011812:	690a      	ldr	r2, [r1, #16]
 8011814:	694b      	ldr	r3, [r1, #20]
 8011816:	4c0c      	ldr	r4, [pc, #48]	; (8011848 <rand+0x64>)
 8011818:	4350      	muls	r0, r2
 801181a:	fb04 0003 	mla	r0, r4, r3, r0
 801181e:	fba2 2304 	umull	r2, r3, r2, r4
 8011822:	4403      	add	r3, r0
 8011824:	1c54      	adds	r4, r2, #1
 8011826:	f143 0500 	adc.w	r5, r3, #0
 801182a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801182e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8011832:	bd38      	pop	{r3, r4, r5, pc}
 8011834:	20000018 	.word	0x20000018
 8011838:	abcd330e 	.word	0xabcd330e
 801183c:	e66d1234 	.word	0xe66d1234
 8011840:	0005deec 	.word	0x0005deec
 8011844:	5851f42d 	.word	0x5851f42d
 8011848:	4c957f2d 	.word	0x4c957f2d

0801184c <__swbuf_r>:
 801184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801184e:	460e      	mov	r6, r1
 8011850:	4614      	mov	r4, r2
 8011852:	4605      	mov	r5, r0
 8011854:	b118      	cbz	r0, 801185e <__swbuf_r+0x12>
 8011856:	6983      	ldr	r3, [r0, #24]
 8011858:	b90b      	cbnz	r3, 801185e <__swbuf_r+0x12>
 801185a:	f000 f9a7 	bl	8011bac <__sinit>
 801185e:	4b21      	ldr	r3, [pc, #132]	; (80118e4 <__swbuf_r+0x98>)
 8011860:	429c      	cmp	r4, r3
 8011862:	d12a      	bne.n	80118ba <__swbuf_r+0x6e>
 8011864:	686c      	ldr	r4, [r5, #4]
 8011866:	69a3      	ldr	r3, [r4, #24]
 8011868:	60a3      	str	r3, [r4, #8]
 801186a:	89a3      	ldrh	r3, [r4, #12]
 801186c:	071a      	lsls	r2, r3, #28
 801186e:	d52e      	bpl.n	80118ce <__swbuf_r+0x82>
 8011870:	6923      	ldr	r3, [r4, #16]
 8011872:	b363      	cbz	r3, 80118ce <__swbuf_r+0x82>
 8011874:	6923      	ldr	r3, [r4, #16]
 8011876:	6820      	ldr	r0, [r4, #0]
 8011878:	1ac0      	subs	r0, r0, r3
 801187a:	6963      	ldr	r3, [r4, #20]
 801187c:	b2f6      	uxtb	r6, r6
 801187e:	4283      	cmp	r3, r0
 8011880:	4637      	mov	r7, r6
 8011882:	dc04      	bgt.n	801188e <__swbuf_r+0x42>
 8011884:	4621      	mov	r1, r4
 8011886:	4628      	mov	r0, r5
 8011888:	f000 f926 	bl	8011ad8 <_fflush_r>
 801188c:	bb28      	cbnz	r0, 80118da <__swbuf_r+0x8e>
 801188e:	68a3      	ldr	r3, [r4, #8]
 8011890:	3b01      	subs	r3, #1
 8011892:	60a3      	str	r3, [r4, #8]
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	1c5a      	adds	r2, r3, #1
 8011898:	6022      	str	r2, [r4, #0]
 801189a:	701e      	strb	r6, [r3, #0]
 801189c:	6963      	ldr	r3, [r4, #20]
 801189e:	3001      	adds	r0, #1
 80118a0:	4283      	cmp	r3, r0
 80118a2:	d004      	beq.n	80118ae <__swbuf_r+0x62>
 80118a4:	89a3      	ldrh	r3, [r4, #12]
 80118a6:	07db      	lsls	r3, r3, #31
 80118a8:	d519      	bpl.n	80118de <__swbuf_r+0x92>
 80118aa:	2e0a      	cmp	r6, #10
 80118ac:	d117      	bne.n	80118de <__swbuf_r+0x92>
 80118ae:	4621      	mov	r1, r4
 80118b0:	4628      	mov	r0, r5
 80118b2:	f000 f911 	bl	8011ad8 <_fflush_r>
 80118b6:	b190      	cbz	r0, 80118de <__swbuf_r+0x92>
 80118b8:	e00f      	b.n	80118da <__swbuf_r+0x8e>
 80118ba:	4b0b      	ldr	r3, [pc, #44]	; (80118e8 <__swbuf_r+0x9c>)
 80118bc:	429c      	cmp	r4, r3
 80118be:	d101      	bne.n	80118c4 <__swbuf_r+0x78>
 80118c0:	68ac      	ldr	r4, [r5, #8]
 80118c2:	e7d0      	b.n	8011866 <__swbuf_r+0x1a>
 80118c4:	4b09      	ldr	r3, [pc, #36]	; (80118ec <__swbuf_r+0xa0>)
 80118c6:	429c      	cmp	r4, r3
 80118c8:	bf08      	it	eq
 80118ca:	68ec      	ldreq	r4, [r5, #12]
 80118cc:	e7cb      	b.n	8011866 <__swbuf_r+0x1a>
 80118ce:	4621      	mov	r1, r4
 80118d0:	4628      	mov	r0, r5
 80118d2:	f000 f80d 	bl	80118f0 <__swsetup_r>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d0cc      	beq.n	8011874 <__swbuf_r+0x28>
 80118da:	f04f 37ff 	mov.w	r7, #4294967295
 80118de:	4638      	mov	r0, r7
 80118e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e2:	bf00      	nop
 80118e4:	080176b4 	.word	0x080176b4
 80118e8:	080176d4 	.word	0x080176d4
 80118ec:	08017694 	.word	0x08017694

080118f0 <__swsetup_r>:
 80118f0:	4b32      	ldr	r3, [pc, #200]	; (80119bc <__swsetup_r+0xcc>)
 80118f2:	b570      	push	{r4, r5, r6, lr}
 80118f4:	681d      	ldr	r5, [r3, #0]
 80118f6:	4606      	mov	r6, r0
 80118f8:	460c      	mov	r4, r1
 80118fa:	b125      	cbz	r5, 8011906 <__swsetup_r+0x16>
 80118fc:	69ab      	ldr	r3, [r5, #24]
 80118fe:	b913      	cbnz	r3, 8011906 <__swsetup_r+0x16>
 8011900:	4628      	mov	r0, r5
 8011902:	f000 f953 	bl	8011bac <__sinit>
 8011906:	4b2e      	ldr	r3, [pc, #184]	; (80119c0 <__swsetup_r+0xd0>)
 8011908:	429c      	cmp	r4, r3
 801190a:	d10f      	bne.n	801192c <__swsetup_r+0x3c>
 801190c:	686c      	ldr	r4, [r5, #4]
 801190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011912:	b29a      	uxth	r2, r3
 8011914:	0715      	lsls	r5, r2, #28
 8011916:	d42c      	bmi.n	8011972 <__swsetup_r+0x82>
 8011918:	06d0      	lsls	r0, r2, #27
 801191a:	d411      	bmi.n	8011940 <__swsetup_r+0x50>
 801191c:	2209      	movs	r2, #9
 801191e:	6032      	str	r2, [r6, #0]
 8011920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011924:	81a3      	strh	r3, [r4, #12]
 8011926:	f04f 30ff 	mov.w	r0, #4294967295
 801192a:	e03e      	b.n	80119aa <__swsetup_r+0xba>
 801192c:	4b25      	ldr	r3, [pc, #148]	; (80119c4 <__swsetup_r+0xd4>)
 801192e:	429c      	cmp	r4, r3
 8011930:	d101      	bne.n	8011936 <__swsetup_r+0x46>
 8011932:	68ac      	ldr	r4, [r5, #8]
 8011934:	e7eb      	b.n	801190e <__swsetup_r+0x1e>
 8011936:	4b24      	ldr	r3, [pc, #144]	; (80119c8 <__swsetup_r+0xd8>)
 8011938:	429c      	cmp	r4, r3
 801193a:	bf08      	it	eq
 801193c:	68ec      	ldreq	r4, [r5, #12]
 801193e:	e7e6      	b.n	801190e <__swsetup_r+0x1e>
 8011940:	0751      	lsls	r1, r2, #29
 8011942:	d512      	bpl.n	801196a <__swsetup_r+0x7a>
 8011944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011946:	b141      	cbz	r1, 801195a <__swsetup_r+0x6a>
 8011948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801194c:	4299      	cmp	r1, r3
 801194e:	d002      	beq.n	8011956 <__swsetup_r+0x66>
 8011950:	4630      	mov	r0, r6
 8011952:	f000 fa21 	bl	8011d98 <_free_r>
 8011956:	2300      	movs	r3, #0
 8011958:	6363      	str	r3, [r4, #52]	; 0x34
 801195a:	89a3      	ldrh	r3, [r4, #12]
 801195c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011960:	81a3      	strh	r3, [r4, #12]
 8011962:	2300      	movs	r3, #0
 8011964:	6063      	str	r3, [r4, #4]
 8011966:	6923      	ldr	r3, [r4, #16]
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	89a3      	ldrh	r3, [r4, #12]
 801196c:	f043 0308 	orr.w	r3, r3, #8
 8011970:	81a3      	strh	r3, [r4, #12]
 8011972:	6923      	ldr	r3, [r4, #16]
 8011974:	b94b      	cbnz	r3, 801198a <__swsetup_r+0x9a>
 8011976:	89a3      	ldrh	r3, [r4, #12]
 8011978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011980:	d003      	beq.n	801198a <__swsetup_r+0x9a>
 8011982:	4621      	mov	r1, r4
 8011984:	4630      	mov	r0, r6
 8011986:	f000 f9bf 	bl	8011d08 <__smakebuf_r>
 801198a:	89a2      	ldrh	r2, [r4, #12]
 801198c:	f012 0301 	ands.w	r3, r2, #1
 8011990:	d00c      	beq.n	80119ac <__swsetup_r+0xbc>
 8011992:	2300      	movs	r3, #0
 8011994:	60a3      	str	r3, [r4, #8]
 8011996:	6963      	ldr	r3, [r4, #20]
 8011998:	425b      	negs	r3, r3
 801199a:	61a3      	str	r3, [r4, #24]
 801199c:	6923      	ldr	r3, [r4, #16]
 801199e:	b953      	cbnz	r3, 80119b6 <__swsetup_r+0xc6>
 80119a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80119a8:	d1ba      	bne.n	8011920 <__swsetup_r+0x30>
 80119aa:	bd70      	pop	{r4, r5, r6, pc}
 80119ac:	0792      	lsls	r2, r2, #30
 80119ae:	bf58      	it	pl
 80119b0:	6963      	ldrpl	r3, [r4, #20]
 80119b2:	60a3      	str	r3, [r4, #8]
 80119b4:	e7f2      	b.n	801199c <__swsetup_r+0xac>
 80119b6:	2000      	movs	r0, #0
 80119b8:	e7f7      	b.n	80119aa <__swsetup_r+0xba>
 80119ba:	bf00      	nop
 80119bc:	20000018 	.word	0x20000018
 80119c0:	080176b4 	.word	0x080176b4
 80119c4:	080176d4 	.word	0x080176d4
 80119c8:	08017694 	.word	0x08017694

080119cc <__sflush_r>:
 80119cc:	898a      	ldrh	r2, [r1, #12]
 80119ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d2:	4605      	mov	r5, r0
 80119d4:	0710      	lsls	r0, r2, #28
 80119d6:	460c      	mov	r4, r1
 80119d8:	d458      	bmi.n	8011a8c <__sflush_r+0xc0>
 80119da:	684b      	ldr	r3, [r1, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dc05      	bgt.n	80119ec <__sflush_r+0x20>
 80119e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	dc02      	bgt.n	80119ec <__sflush_r+0x20>
 80119e6:	2000      	movs	r0, #0
 80119e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ee:	2e00      	cmp	r6, #0
 80119f0:	d0f9      	beq.n	80119e6 <__sflush_r+0x1a>
 80119f2:	2300      	movs	r3, #0
 80119f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119f8:	682f      	ldr	r7, [r5, #0]
 80119fa:	6a21      	ldr	r1, [r4, #32]
 80119fc:	602b      	str	r3, [r5, #0]
 80119fe:	d032      	beq.n	8011a66 <__sflush_r+0x9a>
 8011a00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a02:	89a3      	ldrh	r3, [r4, #12]
 8011a04:	075a      	lsls	r2, r3, #29
 8011a06:	d505      	bpl.n	8011a14 <__sflush_r+0x48>
 8011a08:	6863      	ldr	r3, [r4, #4]
 8011a0a:	1ac0      	subs	r0, r0, r3
 8011a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a0e:	b10b      	cbz	r3, 8011a14 <__sflush_r+0x48>
 8011a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a12:	1ac0      	subs	r0, r0, r3
 8011a14:	2300      	movs	r3, #0
 8011a16:	4602      	mov	r2, r0
 8011a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a1a:	6a21      	ldr	r1, [r4, #32]
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	47b0      	blx	r6
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	89a3      	ldrh	r3, [r4, #12]
 8011a24:	d106      	bne.n	8011a34 <__sflush_r+0x68>
 8011a26:	6829      	ldr	r1, [r5, #0]
 8011a28:	291d      	cmp	r1, #29
 8011a2a:	d848      	bhi.n	8011abe <__sflush_r+0xf2>
 8011a2c:	4a29      	ldr	r2, [pc, #164]	; (8011ad4 <__sflush_r+0x108>)
 8011a2e:	40ca      	lsrs	r2, r1
 8011a30:	07d6      	lsls	r6, r2, #31
 8011a32:	d544      	bpl.n	8011abe <__sflush_r+0xf2>
 8011a34:	2200      	movs	r2, #0
 8011a36:	6062      	str	r2, [r4, #4]
 8011a38:	04d9      	lsls	r1, r3, #19
 8011a3a:	6922      	ldr	r2, [r4, #16]
 8011a3c:	6022      	str	r2, [r4, #0]
 8011a3e:	d504      	bpl.n	8011a4a <__sflush_r+0x7e>
 8011a40:	1c42      	adds	r2, r0, #1
 8011a42:	d101      	bne.n	8011a48 <__sflush_r+0x7c>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b903      	cbnz	r3, 8011a4a <__sflush_r+0x7e>
 8011a48:	6560      	str	r0, [r4, #84]	; 0x54
 8011a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a4c:	602f      	str	r7, [r5, #0]
 8011a4e:	2900      	cmp	r1, #0
 8011a50:	d0c9      	beq.n	80119e6 <__sflush_r+0x1a>
 8011a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a56:	4299      	cmp	r1, r3
 8011a58:	d002      	beq.n	8011a60 <__sflush_r+0x94>
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f000 f99c 	bl	8011d98 <_free_r>
 8011a60:	2000      	movs	r0, #0
 8011a62:	6360      	str	r0, [r4, #52]	; 0x34
 8011a64:	e7c0      	b.n	80119e8 <__sflush_r+0x1c>
 8011a66:	2301      	movs	r3, #1
 8011a68:	4628      	mov	r0, r5
 8011a6a:	47b0      	blx	r6
 8011a6c:	1c41      	adds	r1, r0, #1
 8011a6e:	d1c8      	bne.n	8011a02 <__sflush_r+0x36>
 8011a70:	682b      	ldr	r3, [r5, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d0c5      	beq.n	8011a02 <__sflush_r+0x36>
 8011a76:	2b1d      	cmp	r3, #29
 8011a78:	d001      	beq.n	8011a7e <__sflush_r+0xb2>
 8011a7a:	2b16      	cmp	r3, #22
 8011a7c:	d101      	bne.n	8011a82 <__sflush_r+0xb6>
 8011a7e:	602f      	str	r7, [r5, #0]
 8011a80:	e7b1      	b.n	80119e6 <__sflush_r+0x1a>
 8011a82:	89a3      	ldrh	r3, [r4, #12]
 8011a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a88:	81a3      	strh	r3, [r4, #12]
 8011a8a:	e7ad      	b.n	80119e8 <__sflush_r+0x1c>
 8011a8c:	690f      	ldr	r7, [r1, #16]
 8011a8e:	2f00      	cmp	r7, #0
 8011a90:	d0a9      	beq.n	80119e6 <__sflush_r+0x1a>
 8011a92:	0793      	lsls	r3, r2, #30
 8011a94:	680e      	ldr	r6, [r1, #0]
 8011a96:	bf08      	it	eq
 8011a98:	694b      	ldreq	r3, [r1, #20]
 8011a9a:	600f      	str	r7, [r1, #0]
 8011a9c:	bf18      	it	ne
 8011a9e:	2300      	movne	r3, #0
 8011aa0:	eba6 0807 	sub.w	r8, r6, r7
 8011aa4:	608b      	str	r3, [r1, #8]
 8011aa6:	f1b8 0f00 	cmp.w	r8, #0
 8011aaa:	dd9c      	ble.n	80119e6 <__sflush_r+0x1a>
 8011aac:	4643      	mov	r3, r8
 8011aae:	463a      	mov	r2, r7
 8011ab0:	6a21      	ldr	r1, [r4, #32]
 8011ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	47b0      	blx	r6
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	dc06      	bgt.n	8011aca <__sflush_r+0xfe>
 8011abc:	89a3      	ldrh	r3, [r4, #12]
 8011abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ac2:	81a3      	strh	r3, [r4, #12]
 8011ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac8:	e78e      	b.n	80119e8 <__sflush_r+0x1c>
 8011aca:	4407      	add	r7, r0
 8011acc:	eba8 0800 	sub.w	r8, r8, r0
 8011ad0:	e7e9      	b.n	8011aa6 <__sflush_r+0xda>
 8011ad2:	bf00      	nop
 8011ad4:	20400001 	.word	0x20400001

08011ad8 <_fflush_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	690b      	ldr	r3, [r1, #16]
 8011adc:	4605      	mov	r5, r0
 8011ade:	460c      	mov	r4, r1
 8011ae0:	b1db      	cbz	r3, 8011b1a <_fflush_r+0x42>
 8011ae2:	b118      	cbz	r0, 8011aec <_fflush_r+0x14>
 8011ae4:	6983      	ldr	r3, [r0, #24]
 8011ae6:	b90b      	cbnz	r3, 8011aec <_fflush_r+0x14>
 8011ae8:	f000 f860 	bl	8011bac <__sinit>
 8011aec:	4b0c      	ldr	r3, [pc, #48]	; (8011b20 <_fflush_r+0x48>)
 8011aee:	429c      	cmp	r4, r3
 8011af0:	d109      	bne.n	8011b06 <_fflush_r+0x2e>
 8011af2:	686c      	ldr	r4, [r5, #4]
 8011af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af8:	b17b      	cbz	r3, 8011b1a <_fflush_r+0x42>
 8011afa:	4621      	mov	r1, r4
 8011afc:	4628      	mov	r0, r5
 8011afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b02:	f7ff bf63 	b.w	80119cc <__sflush_r>
 8011b06:	4b07      	ldr	r3, [pc, #28]	; (8011b24 <_fflush_r+0x4c>)
 8011b08:	429c      	cmp	r4, r3
 8011b0a:	d101      	bne.n	8011b10 <_fflush_r+0x38>
 8011b0c:	68ac      	ldr	r4, [r5, #8]
 8011b0e:	e7f1      	b.n	8011af4 <_fflush_r+0x1c>
 8011b10:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <_fflush_r+0x50>)
 8011b12:	429c      	cmp	r4, r3
 8011b14:	bf08      	it	eq
 8011b16:	68ec      	ldreq	r4, [r5, #12]
 8011b18:	e7ec      	b.n	8011af4 <_fflush_r+0x1c>
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	bf00      	nop
 8011b20:	080176b4 	.word	0x080176b4
 8011b24:	080176d4 	.word	0x080176d4
 8011b28:	08017694 	.word	0x08017694

08011b2c <std>:
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	b510      	push	{r4, lr}
 8011b30:	4604      	mov	r4, r0
 8011b32:	e9c0 3300 	strd	r3, r3, [r0]
 8011b36:	6083      	str	r3, [r0, #8]
 8011b38:	8181      	strh	r1, [r0, #12]
 8011b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8011b3c:	81c2      	strh	r2, [r0, #14]
 8011b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b42:	6183      	str	r3, [r0, #24]
 8011b44:	4619      	mov	r1, r3
 8011b46:	2208      	movs	r2, #8
 8011b48:	305c      	adds	r0, #92	; 0x5c
 8011b4a:	f7ff fdb3 	bl	80116b4 <memset>
 8011b4e:	4b05      	ldr	r3, [pc, #20]	; (8011b64 <std+0x38>)
 8011b50:	6263      	str	r3, [r4, #36]	; 0x24
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <std+0x3c>)
 8011b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <std+0x40>)
 8011b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b5a:	4b05      	ldr	r3, [pc, #20]	; (8011b70 <std+0x44>)
 8011b5c:	6224      	str	r4, [r4, #32]
 8011b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	bf00      	nop
 8011b64:	08012505 	.word	0x08012505
 8011b68:	08012527 	.word	0x08012527
 8011b6c:	0801255f 	.word	0x0801255f
 8011b70:	08012583 	.word	0x08012583

08011b74 <_cleanup_r>:
 8011b74:	4901      	ldr	r1, [pc, #4]	; (8011b7c <_cleanup_r+0x8>)
 8011b76:	f000 b885 	b.w	8011c84 <_fwalk_reent>
 8011b7a:	bf00      	nop
 8011b7c:	08011ad9 	.word	0x08011ad9

08011b80 <__sfmoreglue>:
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	1e4a      	subs	r2, r1, #1
 8011b84:	2568      	movs	r5, #104	; 0x68
 8011b86:	4355      	muls	r5, r2
 8011b88:	460e      	mov	r6, r1
 8011b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b8e:	f000 f951 	bl	8011e34 <_malloc_r>
 8011b92:	4604      	mov	r4, r0
 8011b94:	b140      	cbz	r0, 8011ba8 <__sfmoreglue+0x28>
 8011b96:	2100      	movs	r1, #0
 8011b98:	e9c0 1600 	strd	r1, r6, [r0]
 8011b9c:	300c      	adds	r0, #12
 8011b9e:	60a0      	str	r0, [r4, #8]
 8011ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ba4:	f7ff fd86 	bl	80116b4 <memset>
 8011ba8:	4620      	mov	r0, r4
 8011baa:	bd70      	pop	{r4, r5, r6, pc}

08011bac <__sinit>:
 8011bac:	6983      	ldr	r3, [r0, #24]
 8011bae:	b510      	push	{r4, lr}
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	bb33      	cbnz	r3, 8011c02 <__sinit+0x56>
 8011bb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011bb8:	6503      	str	r3, [r0, #80]	; 0x50
 8011bba:	4b12      	ldr	r3, [pc, #72]	; (8011c04 <__sinit+0x58>)
 8011bbc:	4a12      	ldr	r2, [pc, #72]	; (8011c08 <__sinit+0x5c>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6282      	str	r2, [r0, #40]	; 0x28
 8011bc2:	4298      	cmp	r0, r3
 8011bc4:	bf04      	itt	eq
 8011bc6:	2301      	moveq	r3, #1
 8011bc8:	6183      	streq	r3, [r0, #24]
 8011bca:	f000 f81f 	bl	8011c0c <__sfp>
 8011bce:	6060      	str	r0, [r4, #4]
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f000 f81b 	bl	8011c0c <__sfp>
 8011bd6:	60a0      	str	r0, [r4, #8]
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 f817 	bl	8011c0c <__sfp>
 8011bde:	2200      	movs	r2, #0
 8011be0:	60e0      	str	r0, [r4, #12]
 8011be2:	2104      	movs	r1, #4
 8011be4:	6860      	ldr	r0, [r4, #4]
 8011be6:	f7ff ffa1 	bl	8011b2c <std>
 8011bea:	2201      	movs	r2, #1
 8011bec:	2109      	movs	r1, #9
 8011bee:	68a0      	ldr	r0, [r4, #8]
 8011bf0:	f7ff ff9c 	bl	8011b2c <std>
 8011bf4:	2202      	movs	r2, #2
 8011bf6:	2112      	movs	r1, #18
 8011bf8:	68e0      	ldr	r0, [r4, #12]
 8011bfa:	f7ff ff97 	bl	8011b2c <std>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	61a3      	str	r3, [r4, #24]
 8011c02:	bd10      	pop	{r4, pc}
 8011c04:	08017690 	.word	0x08017690
 8011c08:	08011b75 	.word	0x08011b75

08011c0c <__sfp>:
 8011c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0e:	4b1b      	ldr	r3, [pc, #108]	; (8011c7c <__sfp+0x70>)
 8011c10:	681e      	ldr	r6, [r3, #0]
 8011c12:	69b3      	ldr	r3, [r6, #24]
 8011c14:	4607      	mov	r7, r0
 8011c16:	b913      	cbnz	r3, 8011c1e <__sfp+0x12>
 8011c18:	4630      	mov	r0, r6
 8011c1a:	f7ff ffc7 	bl	8011bac <__sinit>
 8011c1e:	3648      	adds	r6, #72	; 0x48
 8011c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c24:	3b01      	subs	r3, #1
 8011c26:	d503      	bpl.n	8011c30 <__sfp+0x24>
 8011c28:	6833      	ldr	r3, [r6, #0]
 8011c2a:	b133      	cbz	r3, 8011c3a <__sfp+0x2e>
 8011c2c:	6836      	ldr	r6, [r6, #0]
 8011c2e:	e7f7      	b.n	8011c20 <__sfp+0x14>
 8011c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c34:	b16d      	cbz	r5, 8011c52 <__sfp+0x46>
 8011c36:	3468      	adds	r4, #104	; 0x68
 8011c38:	e7f4      	b.n	8011c24 <__sfp+0x18>
 8011c3a:	2104      	movs	r1, #4
 8011c3c:	4638      	mov	r0, r7
 8011c3e:	f7ff ff9f 	bl	8011b80 <__sfmoreglue>
 8011c42:	6030      	str	r0, [r6, #0]
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d1f1      	bne.n	8011c2c <__sfp+0x20>
 8011c48:	230c      	movs	r3, #12
 8011c4a:	603b      	str	r3, [r7, #0]
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	4620      	mov	r0, r4
 8011c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c52:	4b0b      	ldr	r3, [pc, #44]	; (8011c80 <__sfp+0x74>)
 8011c54:	6665      	str	r5, [r4, #100]	; 0x64
 8011c56:	e9c4 5500 	strd	r5, r5, [r4]
 8011c5a:	60a5      	str	r5, [r4, #8]
 8011c5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011c60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011c64:	2208      	movs	r2, #8
 8011c66:	4629      	mov	r1, r5
 8011c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c6c:	f7ff fd22 	bl	80116b4 <memset>
 8011c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c78:	e7e9      	b.n	8011c4e <__sfp+0x42>
 8011c7a:	bf00      	nop
 8011c7c:	08017690 	.word	0x08017690
 8011c80:	ffff0001 	.word	0xffff0001

08011c84 <_fwalk_reent>:
 8011c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c88:	4680      	mov	r8, r0
 8011c8a:	4689      	mov	r9, r1
 8011c8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c90:	2600      	movs	r6, #0
 8011c92:	b914      	cbnz	r4, 8011c9a <_fwalk_reent+0x16>
 8011c94:	4630      	mov	r0, r6
 8011c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011c9e:	3f01      	subs	r7, #1
 8011ca0:	d501      	bpl.n	8011ca6 <_fwalk_reent+0x22>
 8011ca2:	6824      	ldr	r4, [r4, #0]
 8011ca4:	e7f5      	b.n	8011c92 <_fwalk_reent+0xe>
 8011ca6:	89ab      	ldrh	r3, [r5, #12]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d907      	bls.n	8011cbc <_fwalk_reent+0x38>
 8011cac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	d003      	beq.n	8011cbc <_fwalk_reent+0x38>
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	4640      	mov	r0, r8
 8011cb8:	47c8      	blx	r9
 8011cba:	4306      	orrs	r6, r0
 8011cbc:	3568      	adds	r5, #104	; 0x68
 8011cbe:	e7ee      	b.n	8011c9e <_fwalk_reent+0x1a>

08011cc0 <__swhatbuf_r>:
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	460e      	mov	r6, r1
 8011cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc8:	2900      	cmp	r1, #0
 8011cca:	b096      	sub	sp, #88	; 0x58
 8011ccc:	4614      	mov	r4, r2
 8011cce:	461d      	mov	r5, r3
 8011cd0:	da07      	bge.n	8011ce2 <__swhatbuf_r+0x22>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	602b      	str	r3, [r5, #0]
 8011cd6:	89b3      	ldrh	r3, [r6, #12]
 8011cd8:	061a      	lsls	r2, r3, #24
 8011cda:	d410      	bmi.n	8011cfe <__swhatbuf_r+0x3e>
 8011cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ce0:	e00e      	b.n	8011d00 <__swhatbuf_r+0x40>
 8011ce2:	466a      	mov	r2, sp
 8011ce4:	f000 fc74 	bl	80125d0 <_fstat_r>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	dbf2      	blt.n	8011cd2 <__swhatbuf_r+0x12>
 8011cec:	9a01      	ldr	r2, [sp, #4]
 8011cee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011cf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011cf6:	425a      	negs	r2, r3
 8011cf8:	415a      	adcs	r2, r3
 8011cfa:	602a      	str	r2, [r5, #0]
 8011cfc:	e7ee      	b.n	8011cdc <__swhatbuf_r+0x1c>
 8011cfe:	2340      	movs	r3, #64	; 0x40
 8011d00:	2000      	movs	r0, #0
 8011d02:	6023      	str	r3, [r4, #0]
 8011d04:	b016      	add	sp, #88	; 0x58
 8011d06:	bd70      	pop	{r4, r5, r6, pc}

08011d08 <__smakebuf_r>:
 8011d08:	898b      	ldrh	r3, [r1, #12]
 8011d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d0c:	079d      	lsls	r5, r3, #30
 8011d0e:	4606      	mov	r6, r0
 8011d10:	460c      	mov	r4, r1
 8011d12:	d507      	bpl.n	8011d24 <__smakebuf_r+0x1c>
 8011d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d18:	6023      	str	r3, [r4, #0]
 8011d1a:	6123      	str	r3, [r4, #16]
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	6163      	str	r3, [r4, #20]
 8011d20:	b002      	add	sp, #8
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	ab01      	add	r3, sp, #4
 8011d26:	466a      	mov	r2, sp
 8011d28:	f7ff ffca 	bl	8011cc0 <__swhatbuf_r>
 8011d2c:	9900      	ldr	r1, [sp, #0]
 8011d2e:	4605      	mov	r5, r0
 8011d30:	4630      	mov	r0, r6
 8011d32:	f000 f87f 	bl	8011e34 <_malloc_r>
 8011d36:	b948      	cbnz	r0, 8011d4c <__smakebuf_r+0x44>
 8011d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d3c:	059a      	lsls	r2, r3, #22
 8011d3e:	d4ef      	bmi.n	8011d20 <__smakebuf_r+0x18>
 8011d40:	f023 0303 	bic.w	r3, r3, #3
 8011d44:	f043 0302 	orr.w	r3, r3, #2
 8011d48:	81a3      	strh	r3, [r4, #12]
 8011d4a:	e7e3      	b.n	8011d14 <__smakebuf_r+0xc>
 8011d4c:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <__smakebuf_r+0x7c>)
 8011d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	6020      	str	r0, [r4, #0]
 8011d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d58:	81a3      	strh	r3, [r4, #12]
 8011d5a:	9b00      	ldr	r3, [sp, #0]
 8011d5c:	6163      	str	r3, [r4, #20]
 8011d5e:	9b01      	ldr	r3, [sp, #4]
 8011d60:	6120      	str	r0, [r4, #16]
 8011d62:	b15b      	cbz	r3, 8011d7c <__smakebuf_r+0x74>
 8011d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f000 fc43 	bl	80125f4 <_isatty_r>
 8011d6e:	b128      	cbz	r0, 8011d7c <__smakebuf_r+0x74>
 8011d70:	89a3      	ldrh	r3, [r4, #12]
 8011d72:	f023 0303 	bic.w	r3, r3, #3
 8011d76:	f043 0301 	orr.w	r3, r3, #1
 8011d7a:	81a3      	strh	r3, [r4, #12]
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	431d      	orrs	r5, r3
 8011d80:	81a5      	strh	r5, [r4, #12]
 8011d82:	e7cd      	b.n	8011d20 <__smakebuf_r+0x18>
 8011d84:	08011b75 	.word	0x08011b75

08011d88 <malloc>:
 8011d88:	4b02      	ldr	r3, [pc, #8]	; (8011d94 <malloc+0xc>)
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	6818      	ldr	r0, [r3, #0]
 8011d8e:	f000 b851 	b.w	8011e34 <_malloc_r>
 8011d92:	bf00      	nop
 8011d94:	20000018 	.word	0x20000018

08011d98 <_free_r>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	2900      	cmp	r1, #0
 8011d9e:	d045      	beq.n	8011e2c <_free_r+0x94>
 8011da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011da4:	1f0c      	subs	r4, r1, #4
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	bfb8      	it	lt
 8011daa:	18e4      	addlt	r4, r4, r3
 8011dac:	f000 fc44 	bl	8012638 <__malloc_lock>
 8011db0:	4a1f      	ldr	r2, [pc, #124]	; (8011e30 <_free_r+0x98>)
 8011db2:	6813      	ldr	r3, [r2, #0]
 8011db4:	4610      	mov	r0, r2
 8011db6:	b933      	cbnz	r3, 8011dc6 <_free_r+0x2e>
 8011db8:	6063      	str	r3, [r4, #4]
 8011dba:	6014      	str	r4, [r2, #0]
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dc2:	f000 bc3a 	b.w	801263a <__malloc_unlock>
 8011dc6:	42a3      	cmp	r3, r4
 8011dc8:	d90c      	bls.n	8011de4 <_free_r+0x4c>
 8011dca:	6821      	ldr	r1, [r4, #0]
 8011dcc:	1862      	adds	r2, r4, r1
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	bf04      	itt	eq
 8011dd2:	681a      	ldreq	r2, [r3, #0]
 8011dd4:	685b      	ldreq	r3, [r3, #4]
 8011dd6:	6063      	str	r3, [r4, #4]
 8011dd8:	bf04      	itt	eq
 8011dda:	1852      	addeq	r2, r2, r1
 8011ddc:	6022      	streq	r2, [r4, #0]
 8011dde:	6004      	str	r4, [r0, #0]
 8011de0:	e7ec      	b.n	8011dbc <_free_r+0x24>
 8011de2:	4613      	mov	r3, r2
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	b10a      	cbz	r2, 8011dec <_free_r+0x54>
 8011de8:	42a2      	cmp	r2, r4
 8011dea:	d9fa      	bls.n	8011de2 <_free_r+0x4a>
 8011dec:	6819      	ldr	r1, [r3, #0]
 8011dee:	1858      	adds	r0, r3, r1
 8011df0:	42a0      	cmp	r0, r4
 8011df2:	d10b      	bne.n	8011e0c <_free_r+0x74>
 8011df4:	6820      	ldr	r0, [r4, #0]
 8011df6:	4401      	add	r1, r0
 8011df8:	1858      	adds	r0, r3, r1
 8011dfa:	4282      	cmp	r2, r0
 8011dfc:	6019      	str	r1, [r3, #0]
 8011dfe:	d1dd      	bne.n	8011dbc <_free_r+0x24>
 8011e00:	6810      	ldr	r0, [r2, #0]
 8011e02:	6852      	ldr	r2, [r2, #4]
 8011e04:	605a      	str	r2, [r3, #4]
 8011e06:	4401      	add	r1, r0
 8011e08:	6019      	str	r1, [r3, #0]
 8011e0a:	e7d7      	b.n	8011dbc <_free_r+0x24>
 8011e0c:	d902      	bls.n	8011e14 <_free_r+0x7c>
 8011e0e:	230c      	movs	r3, #12
 8011e10:	602b      	str	r3, [r5, #0]
 8011e12:	e7d3      	b.n	8011dbc <_free_r+0x24>
 8011e14:	6820      	ldr	r0, [r4, #0]
 8011e16:	1821      	adds	r1, r4, r0
 8011e18:	428a      	cmp	r2, r1
 8011e1a:	bf04      	itt	eq
 8011e1c:	6811      	ldreq	r1, [r2, #0]
 8011e1e:	6852      	ldreq	r2, [r2, #4]
 8011e20:	6062      	str	r2, [r4, #4]
 8011e22:	bf04      	itt	eq
 8011e24:	1809      	addeq	r1, r1, r0
 8011e26:	6021      	streq	r1, [r4, #0]
 8011e28:	605c      	str	r4, [r3, #4]
 8011e2a:	e7c7      	b.n	8011dbc <_free_r+0x24>
 8011e2c:	bd38      	pop	{r3, r4, r5, pc}
 8011e2e:	bf00      	nop
 8011e30:	2000021c 	.word	0x2000021c

08011e34 <_malloc_r>:
 8011e34:	b570      	push	{r4, r5, r6, lr}
 8011e36:	1ccd      	adds	r5, r1, #3
 8011e38:	f025 0503 	bic.w	r5, r5, #3
 8011e3c:	3508      	adds	r5, #8
 8011e3e:	2d0c      	cmp	r5, #12
 8011e40:	bf38      	it	cc
 8011e42:	250c      	movcc	r5, #12
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	4606      	mov	r6, r0
 8011e48:	db01      	blt.n	8011e4e <_malloc_r+0x1a>
 8011e4a:	42a9      	cmp	r1, r5
 8011e4c:	d903      	bls.n	8011e56 <_malloc_r+0x22>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	2000      	movs	r0, #0
 8011e54:	bd70      	pop	{r4, r5, r6, pc}
 8011e56:	f000 fbef 	bl	8012638 <__malloc_lock>
 8011e5a:	4a21      	ldr	r2, [pc, #132]	; (8011ee0 <_malloc_r+0xac>)
 8011e5c:	6814      	ldr	r4, [r2, #0]
 8011e5e:	4621      	mov	r1, r4
 8011e60:	b991      	cbnz	r1, 8011e88 <_malloc_r+0x54>
 8011e62:	4c20      	ldr	r4, [pc, #128]	; (8011ee4 <_malloc_r+0xb0>)
 8011e64:	6823      	ldr	r3, [r4, #0]
 8011e66:	b91b      	cbnz	r3, 8011e70 <_malloc_r+0x3c>
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f000 fb3b 	bl	80124e4 <_sbrk_r>
 8011e6e:	6020      	str	r0, [r4, #0]
 8011e70:	4629      	mov	r1, r5
 8011e72:	4630      	mov	r0, r6
 8011e74:	f000 fb36 	bl	80124e4 <_sbrk_r>
 8011e78:	1c43      	adds	r3, r0, #1
 8011e7a:	d124      	bne.n	8011ec6 <_malloc_r+0x92>
 8011e7c:	230c      	movs	r3, #12
 8011e7e:	6033      	str	r3, [r6, #0]
 8011e80:	4630      	mov	r0, r6
 8011e82:	f000 fbda 	bl	801263a <__malloc_unlock>
 8011e86:	e7e4      	b.n	8011e52 <_malloc_r+0x1e>
 8011e88:	680b      	ldr	r3, [r1, #0]
 8011e8a:	1b5b      	subs	r3, r3, r5
 8011e8c:	d418      	bmi.n	8011ec0 <_malloc_r+0x8c>
 8011e8e:	2b0b      	cmp	r3, #11
 8011e90:	d90f      	bls.n	8011eb2 <_malloc_r+0x7e>
 8011e92:	600b      	str	r3, [r1, #0]
 8011e94:	50cd      	str	r5, [r1, r3]
 8011e96:	18cc      	adds	r4, r1, r3
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f000 fbce 	bl	801263a <__malloc_unlock>
 8011e9e:	f104 000b 	add.w	r0, r4, #11
 8011ea2:	1d23      	adds	r3, r4, #4
 8011ea4:	f020 0007 	bic.w	r0, r0, #7
 8011ea8:	1ac3      	subs	r3, r0, r3
 8011eaa:	d0d3      	beq.n	8011e54 <_malloc_r+0x20>
 8011eac:	425a      	negs	r2, r3
 8011eae:	50e2      	str	r2, [r4, r3]
 8011eb0:	e7d0      	b.n	8011e54 <_malloc_r+0x20>
 8011eb2:	428c      	cmp	r4, r1
 8011eb4:	684b      	ldr	r3, [r1, #4]
 8011eb6:	bf16      	itet	ne
 8011eb8:	6063      	strne	r3, [r4, #4]
 8011eba:	6013      	streq	r3, [r2, #0]
 8011ebc:	460c      	movne	r4, r1
 8011ebe:	e7eb      	b.n	8011e98 <_malloc_r+0x64>
 8011ec0:	460c      	mov	r4, r1
 8011ec2:	6849      	ldr	r1, [r1, #4]
 8011ec4:	e7cc      	b.n	8011e60 <_malloc_r+0x2c>
 8011ec6:	1cc4      	adds	r4, r0, #3
 8011ec8:	f024 0403 	bic.w	r4, r4, #3
 8011ecc:	42a0      	cmp	r0, r4
 8011ece:	d005      	beq.n	8011edc <_malloc_r+0xa8>
 8011ed0:	1a21      	subs	r1, r4, r0
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 fb06 	bl	80124e4 <_sbrk_r>
 8011ed8:	3001      	adds	r0, #1
 8011eda:	d0cf      	beq.n	8011e7c <_malloc_r+0x48>
 8011edc:	6025      	str	r5, [r4, #0]
 8011ede:	e7db      	b.n	8011e98 <_malloc_r+0x64>
 8011ee0:	2000021c 	.word	0x2000021c
 8011ee4:	20000220 	.word	0x20000220

08011ee8 <__sfputc_r>:
 8011ee8:	6893      	ldr	r3, [r2, #8]
 8011eea:	3b01      	subs	r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	b410      	push	{r4}
 8011ef0:	6093      	str	r3, [r2, #8]
 8011ef2:	da08      	bge.n	8011f06 <__sfputc_r+0x1e>
 8011ef4:	6994      	ldr	r4, [r2, #24]
 8011ef6:	42a3      	cmp	r3, r4
 8011ef8:	db01      	blt.n	8011efe <__sfputc_r+0x16>
 8011efa:	290a      	cmp	r1, #10
 8011efc:	d103      	bne.n	8011f06 <__sfputc_r+0x1e>
 8011efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f02:	f7ff bca3 	b.w	801184c <__swbuf_r>
 8011f06:	6813      	ldr	r3, [r2, #0]
 8011f08:	1c58      	adds	r0, r3, #1
 8011f0a:	6010      	str	r0, [r2, #0]
 8011f0c:	7019      	strb	r1, [r3, #0]
 8011f0e:	4608      	mov	r0, r1
 8011f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f14:	4770      	bx	lr

08011f16 <__sfputs_r>:
 8011f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f18:	4606      	mov	r6, r0
 8011f1a:	460f      	mov	r7, r1
 8011f1c:	4614      	mov	r4, r2
 8011f1e:	18d5      	adds	r5, r2, r3
 8011f20:	42ac      	cmp	r4, r5
 8011f22:	d101      	bne.n	8011f28 <__sfputs_r+0x12>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e007      	b.n	8011f38 <__sfputs_r+0x22>
 8011f28:	463a      	mov	r2, r7
 8011f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7ff ffda 	bl	8011ee8 <__sfputc_r>
 8011f34:	1c43      	adds	r3, r0, #1
 8011f36:	d1f3      	bne.n	8011f20 <__sfputs_r+0xa>
 8011f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f3c <_vfiprintf_r>:
 8011f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	460c      	mov	r4, r1
 8011f42:	b09d      	sub	sp, #116	; 0x74
 8011f44:	4617      	mov	r7, r2
 8011f46:	461d      	mov	r5, r3
 8011f48:	4606      	mov	r6, r0
 8011f4a:	b118      	cbz	r0, 8011f54 <_vfiprintf_r+0x18>
 8011f4c:	6983      	ldr	r3, [r0, #24]
 8011f4e:	b90b      	cbnz	r3, 8011f54 <_vfiprintf_r+0x18>
 8011f50:	f7ff fe2c 	bl	8011bac <__sinit>
 8011f54:	4b7c      	ldr	r3, [pc, #496]	; (8012148 <_vfiprintf_r+0x20c>)
 8011f56:	429c      	cmp	r4, r3
 8011f58:	d158      	bne.n	801200c <_vfiprintf_r+0xd0>
 8011f5a:	6874      	ldr	r4, [r6, #4]
 8011f5c:	89a3      	ldrh	r3, [r4, #12]
 8011f5e:	0718      	lsls	r0, r3, #28
 8011f60:	d55e      	bpl.n	8012020 <_vfiprintf_r+0xe4>
 8011f62:	6923      	ldr	r3, [r4, #16]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d05b      	beq.n	8012020 <_vfiprintf_r+0xe4>
 8011f68:	2300      	movs	r3, #0
 8011f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f6c:	2320      	movs	r3, #32
 8011f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f72:	2330      	movs	r3, #48	; 0x30
 8011f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f78:	9503      	str	r5, [sp, #12]
 8011f7a:	f04f 0b01 	mov.w	fp, #1
 8011f7e:	46b8      	mov	r8, r7
 8011f80:	4645      	mov	r5, r8
 8011f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f86:	b10b      	cbz	r3, 8011f8c <_vfiprintf_r+0x50>
 8011f88:	2b25      	cmp	r3, #37	; 0x25
 8011f8a:	d154      	bne.n	8012036 <_vfiprintf_r+0xfa>
 8011f8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8011f90:	d00b      	beq.n	8011faa <_vfiprintf_r+0x6e>
 8011f92:	4653      	mov	r3, sl
 8011f94:	463a      	mov	r2, r7
 8011f96:	4621      	mov	r1, r4
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f7ff ffbc 	bl	8011f16 <__sfputs_r>
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	f000 80c2 	beq.w	8012128 <_vfiprintf_r+0x1ec>
 8011fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa6:	4453      	add	r3, sl
 8011fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8011faa:	f898 3000 	ldrb.w	r3, [r8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	f000 80ba 	beq.w	8012128 <_vfiprintf_r+0x1ec>
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fbe:	9304      	str	r3, [sp, #16]
 8011fc0:	9307      	str	r3, [sp, #28]
 8011fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8011fc8:	46a8      	mov	r8, r5
 8011fca:	2205      	movs	r2, #5
 8011fcc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011fd0:	485e      	ldr	r0, [pc, #376]	; (801214c <_vfiprintf_r+0x210>)
 8011fd2:	f7ee f90d 	bl	80001f0 <memchr>
 8011fd6:	9b04      	ldr	r3, [sp, #16]
 8011fd8:	bb78      	cbnz	r0, 801203a <_vfiprintf_r+0xfe>
 8011fda:	06d9      	lsls	r1, r3, #27
 8011fdc:	bf44      	itt	mi
 8011fde:	2220      	movmi	r2, #32
 8011fe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fe4:	071a      	lsls	r2, r3, #28
 8011fe6:	bf44      	itt	mi
 8011fe8:	222b      	movmi	r2, #43	; 0x2b
 8011fea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011fee:	782a      	ldrb	r2, [r5, #0]
 8011ff0:	2a2a      	cmp	r2, #42	; 0x2a
 8011ff2:	d02a      	beq.n	801204a <_vfiprintf_r+0x10e>
 8011ff4:	9a07      	ldr	r2, [sp, #28]
 8011ff6:	46a8      	mov	r8, r5
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	250a      	movs	r5, #10
 8011ffc:	4641      	mov	r1, r8
 8011ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012002:	3b30      	subs	r3, #48	; 0x30
 8012004:	2b09      	cmp	r3, #9
 8012006:	d969      	bls.n	80120dc <_vfiprintf_r+0x1a0>
 8012008:	b360      	cbz	r0, 8012064 <_vfiprintf_r+0x128>
 801200a:	e024      	b.n	8012056 <_vfiprintf_r+0x11a>
 801200c:	4b50      	ldr	r3, [pc, #320]	; (8012150 <_vfiprintf_r+0x214>)
 801200e:	429c      	cmp	r4, r3
 8012010:	d101      	bne.n	8012016 <_vfiprintf_r+0xda>
 8012012:	68b4      	ldr	r4, [r6, #8]
 8012014:	e7a2      	b.n	8011f5c <_vfiprintf_r+0x20>
 8012016:	4b4f      	ldr	r3, [pc, #316]	; (8012154 <_vfiprintf_r+0x218>)
 8012018:	429c      	cmp	r4, r3
 801201a:	bf08      	it	eq
 801201c:	68f4      	ldreq	r4, [r6, #12]
 801201e:	e79d      	b.n	8011f5c <_vfiprintf_r+0x20>
 8012020:	4621      	mov	r1, r4
 8012022:	4630      	mov	r0, r6
 8012024:	f7ff fc64 	bl	80118f0 <__swsetup_r>
 8012028:	2800      	cmp	r0, #0
 801202a:	d09d      	beq.n	8011f68 <_vfiprintf_r+0x2c>
 801202c:	f04f 30ff 	mov.w	r0, #4294967295
 8012030:	b01d      	add	sp, #116	; 0x74
 8012032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012036:	46a8      	mov	r8, r5
 8012038:	e7a2      	b.n	8011f80 <_vfiprintf_r+0x44>
 801203a:	4a44      	ldr	r2, [pc, #272]	; (801214c <_vfiprintf_r+0x210>)
 801203c:	1a80      	subs	r0, r0, r2
 801203e:	fa0b f000 	lsl.w	r0, fp, r0
 8012042:	4318      	orrs	r0, r3
 8012044:	9004      	str	r0, [sp, #16]
 8012046:	4645      	mov	r5, r8
 8012048:	e7be      	b.n	8011fc8 <_vfiprintf_r+0x8c>
 801204a:	9a03      	ldr	r2, [sp, #12]
 801204c:	1d11      	adds	r1, r2, #4
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	9103      	str	r1, [sp, #12]
 8012052:	2a00      	cmp	r2, #0
 8012054:	db01      	blt.n	801205a <_vfiprintf_r+0x11e>
 8012056:	9207      	str	r2, [sp, #28]
 8012058:	e004      	b.n	8012064 <_vfiprintf_r+0x128>
 801205a:	4252      	negs	r2, r2
 801205c:	f043 0302 	orr.w	r3, r3, #2
 8012060:	9207      	str	r2, [sp, #28]
 8012062:	9304      	str	r3, [sp, #16]
 8012064:	f898 3000 	ldrb.w	r3, [r8]
 8012068:	2b2e      	cmp	r3, #46	; 0x2e
 801206a:	d10e      	bne.n	801208a <_vfiprintf_r+0x14e>
 801206c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012070:	2b2a      	cmp	r3, #42	; 0x2a
 8012072:	d138      	bne.n	80120e6 <_vfiprintf_r+0x1aa>
 8012074:	9b03      	ldr	r3, [sp, #12]
 8012076:	1d1a      	adds	r2, r3, #4
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	9203      	str	r2, [sp, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	bfb8      	it	lt
 8012080:	f04f 33ff 	movlt.w	r3, #4294967295
 8012084:	f108 0802 	add.w	r8, r8, #2
 8012088:	9305      	str	r3, [sp, #20]
 801208a:	4d33      	ldr	r5, [pc, #204]	; (8012158 <_vfiprintf_r+0x21c>)
 801208c:	f898 1000 	ldrb.w	r1, [r8]
 8012090:	2203      	movs	r2, #3
 8012092:	4628      	mov	r0, r5
 8012094:	f7ee f8ac 	bl	80001f0 <memchr>
 8012098:	b140      	cbz	r0, 80120ac <_vfiprintf_r+0x170>
 801209a:	2340      	movs	r3, #64	; 0x40
 801209c:	1b40      	subs	r0, r0, r5
 801209e:	fa03 f000 	lsl.w	r0, r3, r0
 80120a2:	9b04      	ldr	r3, [sp, #16]
 80120a4:	4303      	orrs	r3, r0
 80120a6:	f108 0801 	add.w	r8, r8, #1
 80120aa:	9304      	str	r3, [sp, #16]
 80120ac:	f898 1000 	ldrb.w	r1, [r8]
 80120b0:	482a      	ldr	r0, [pc, #168]	; (801215c <_vfiprintf_r+0x220>)
 80120b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120b6:	2206      	movs	r2, #6
 80120b8:	f108 0701 	add.w	r7, r8, #1
 80120bc:	f7ee f898 	bl	80001f0 <memchr>
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d037      	beq.n	8012134 <_vfiprintf_r+0x1f8>
 80120c4:	4b26      	ldr	r3, [pc, #152]	; (8012160 <_vfiprintf_r+0x224>)
 80120c6:	bb1b      	cbnz	r3, 8012110 <_vfiprintf_r+0x1d4>
 80120c8:	9b03      	ldr	r3, [sp, #12]
 80120ca:	3307      	adds	r3, #7
 80120cc:	f023 0307 	bic.w	r3, r3, #7
 80120d0:	3308      	adds	r3, #8
 80120d2:	9303      	str	r3, [sp, #12]
 80120d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d6:	444b      	add	r3, r9
 80120d8:	9309      	str	r3, [sp, #36]	; 0x24
 80120da:	e750      	b.n	8011f7e <_vfiprintf_r+0x42>
 80120dc:	fb05 3202 	mla	r2, r5, r2, r3
 80120e0:	2001      	movs	r0, #1
 80120e2:	4688      	mov	r8, r1
 80120e4:	e78a      	b.n	8011ffc <_vfiprintf_r+0xc0>
 80120e6:	2300      	movs	r3, #0
 80120e8:	f108 0801 	add.w	r8, r8, #1
 80120ec:	9305      	str	r3, [sp, #20]
 80120ee:	4619      	mov	r1, r3
 80120f0:	250a      	movs	r5, #10
 80120f2:	4640      	mov	r0, r8
 80120f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120f8:	3a30      	subs	r2, #48	; 0x30
 80120fa:	2a09      	cmp	r2, #9
 80120fc:	d903      	bls.n	8012106 <_vfiprintf_r+0x1ca>
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d0c3      	beq.n	801208a <_vfiprintf_r+0x14e>
 8012102:	9105      	str	r1, [sp, #20]
 8012104:	e7c1      	b.n	801208a <_vfiprintf_r+0x14e>
 8012106:	fb05 2101 	mla	r1, r5, r1, r2
 801210a:	2301      	movs	r3, #1
 801210c:	4680      	mov	r8, r0
 801210e:	e7f0      	b.n	80120f2 <_vfiprintf_r+0x1b6>
 8012110:	ab03      	add	r3, sp, #12
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	4622      	mov	r2, r4
 8012116:	4b13      	ldr	r3, [pc, #76]	; (8012164 <_vfiprintf_r+0x228>)
 8012118:	a904      	add	r1, sp, #16
 801211a:	4630      	mov	r0, r6
 801211c:	f3af 8000 	nop.w
 8012120:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012124:	4681      	mov	r9, r0
 8012126:	d1d5      	bne.n	80120d4 <_vfiprintf_r+0x198>
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	065b      	lsls	r3, r3, #25
 801212c:	f53f af7e 	bmi.w	801202c <_vfiprintf_r+0xf0>
 8012130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012132:	e77d      	b.n	8012030 <_vfiprintf_r+0xf4>
 8012134:	ab03      	add	r3, sp, #12
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	4622      	mov	r2, r4
 801213a:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <_vfiprintf_r+0x228>)
 801213c:	a904      	add	r1, sp, #16
 801213e:	4630      	mov	r0, r6
 8012140:	f000 f888 	bl	8012254 <_printf_i>
 8012144:	e7ec      	b.n	8012120 <_vfiprintf_r+0x1e4>
 8012146:	bf00      	nop
 8012148:	080176b4 	.word	0x080176b4
 801214c:	080176f4 	.word	0x080176f4
 8012150:	080176d4 	.word	0x080176d4
 8012154:	08017694 	.word	0x08017694
 8012158:	080176fa 	.word	0x080176fa
 801215c:	080176fe 	.word	0x080176fe
 8012160:	00000000 	.word	0x00000000
 8012164:	08011f17 	.word	0x08011f17

08012168 <_printf_common>:
 8012168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801216c:	4691      	mov	r9, r2
 801216e:	461f      	mov	r7, r3
 8012170:	688a      	ldr	r2, [r1, #8]
 8012172:	690b      	ldr	r3, [r1, #16]
 8012174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012178:	4293      	cmp	r3, r2
 801217a:	bfb8      	it	lt
 801217c:	4613      	movlt	r3, r2
 801217e:	f8c9 3000 	str.w	r3, [r9]
 8012182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012186:	4606      	mov	r6, r0
 8012188:	460c      	mov	r4, r1
 801218a:	b112      	cbz	r2, 8012192 <_printf_common+0x2a>
 801218c:	3301      	adds	r3, #1
 801218e:	f8c9 3000 	str.w	r3, [r9]
 8012192:	6823      	ldr	r3, [r4, #0]
 8012194:	0699      	lsls	r1, r3, #26
 8012196:	bf42      	ittt	mi
 8012198:	f8d9 3000 	ldrmi.w	r3, [r9]
 801219c:	3302      	addmi	r3, #2
 801219e:	f8c9 3000 	strmi.w	r3, [r9]
 80121a2:	6825      	ldr	r5, [r4, #0]
 80121a4:	f015 0506 	ands.w	r5, r5, #6
 80121a8:	d107      	bne.n	80121ba <_printf_common+0x52>
 80121aa:	f104 0a19 	add.w	sl, r4, #25
 80121ae:	68e3      	ldr	r3, [r4, #12]
 80121b0:	f8d9 2000 	ldr.w	r2, [r9]
 80121b4:	1a9b      	subs	r3, r3, r2
 80121b6:	42ab      	cmp	r3, r5
 80121b8:	dc28      	bgt.n	801220c <_printf_common+0xa4>
 80121ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80121be:	6822      	ldr	r2, [r4, #0]
 80121c0:	3300      	adds	r3, #0
 80121c2:	bf18      	it	ne
 80121c4:	2301      	movne	r3, #1
 80121c6:	0692      	lsls	r2, r2, #26
 80121c8:	d42d      	bmi.n	8012226 <_printf_common+0xbe>
 80121ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121ce:	4639      	mov	r1, r7
 80121d0:	4630      	mov	r0, r6
 80121d2:	47c0      	blx	r8
 80121d4:	3001      	adds	r0, #1
 80121d6:	d020      	beq.n	801221a <_printf_common+0xb2>
 80121d8:	6823      	ldr	r3, [r4, #0]
 80121da:	68e5      	ldr	r5, [r4, #12]
 80121dc:	f8d9 2000 	ldr.w	r2, [r9]
 80121e0:	f003 0306 	and.w	r3, r3, #6
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	bf08      	it	eq
 80121e8:	1aad      	subeq	r5, r5, r2
 80121ea:	68a3      	ldr	r3, [r4, #8]
 80121ec:	6922      	ldr	r2, [r4, #16]
 80121ee:	bf0c      	ite	eq
 80121f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121f4:	2500      	movne	r5, #0
 80121f6:	4293      	cmp	r3, r2
 80121f8:	bfc4      	itt	gt
 80121fa:	1a9b      	subgt	r3, r3, r2
 80121fc:	18ed      	addgt	r5, r5, r3
 80121fe:	f04f 0900 	mov.w	r9, #0
 8012202:	341a      	adds	r4, #26
 8012204:	454d      	cmp	r5, r9
 8012206:	d11a      	bne.n	801223e <_printf_common+0xd6>
 8012208:	2000      	movs	r0, #0
 801220a:	e008      	b.n	801221e <_printf_common+0xb6>
 801220c:	2301      	movs	r3, #1
 801220e:	4652      	mov	r2, sl
 8012210:	4639      	mov	r1, r7
 8012212:	4630      	mov	r0, r6
 8012214:	47c0      	blx	r8
 8012216:	3001      	adds	r0, #1
 8012218:	d103      	bne.n	8012222 <_printf_common+0xba>
 801221a:	f04f 30ff 	mov.w	r0, #4294967295
 801221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012222:	3501      	adds	r5, #1
 8012224:	e7c3      	b.n	80121ae <_printf_common+0x46>
 8012226:	18e1      	adds	r1, r4, r3
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	2030      	movs	r0, #48	; 0x30
 801222c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012230:	4422      	add	r2, r4
 8012232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012236:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801223a:	3302      	adds	r3, #2
 801223c:	e7c5      	b.n	80121ca <_printf_common+0x62>
 801223e:	2301      	movs	r3, #1
 8012240:	4622      	mov	r2, r4
 8012242:	4639      	mov	r1, r7
 8012244:	4630      	mov	r0, r6
 8012246:	47c0      	blx	r8
 8012248:	3001      	adds	r0, #1
 801224a:	d0e6      	beq.n	801221a <_printf_common+0xb2>
 801224c:	f109 0901 	add.w	r9, r9, #1
 8012250:	e7d8      	b.n	8012204 <_printf_common+0x9c>
	...

08012254 <_printf_i>:
 8012254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012258:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801225c:	460c      	mov	r4, r1
 801225e:	7e09      	ldrb	r1, [r1, #24]
 8012260:	b085      	sub	sp, #20
 8012262:	296e      	cmp	r1, #110	; 0x6e
 8012264:	4617      	mov	r7, r2
 8012266:	4606      	mov	r6, r0
 8012268:	4698      	mov	r8, r3
 801226a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801226c:	f000 80b3 	beq.w	80123d6 <_printf_i+0x182>
 8012270:	d822      	bhi.n	80122b8 <_printf_i+0x64>
 8012272:	2963      	cmp	r1, #99	; 0x63
 8012274:	d036      	beq.n	80122e4 <_printf_i+0x90>
 8012276:	d80a      	bhi.n	801228e <_printf_i+0x3a>
 8012278:	2900      	cmp	r1, #0
 801227a:	f000 80b9 	beq.w	80123f0 <_printf_i+0x19c>
 801227e:	2958      	cmp	r1, #88	; 0x58
 8012280:	f000 8083 	beq.w	801238a <_printf_i+0x136>
 8012284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801228c:	e032      	b.n	80122f4 <_printf_i+0xa0>
 801228e:	2964      	cmp	r1, #100	; 0x64
 8012290:	d001      	beq.n	8012296 <_printf_i+0x42>
 8012292:	2969      	cmp	r1, #105	; 0x69
 8012294:	d1f6      	bne.n	8012284 <_printf_i+0x30>
 8012296:	6820      	ldr	r0, [r4, #0]
 8012298:	6813      	ldr	r3, [r2, #0]
 801229a:	0605      	lsls	r5, r0, #24
 801229c:	f103 0104 	add.w	r1, r3, #4
 80122a0:	d52a      	bpl.n	80122f8 <_printf_i+0xa4>
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	6011      	str	r1, [r2, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	da03      	bge.n	80122b2 <_printf_i+0x5e>
 80122aa:	222d      	movs	r2, #45	; 0x2d
 80122ac:	425b      	negs	r3, r3
 80122ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80122b2:	486f      	ldr	r0, [pc, #444]	; (8012470 <_printf_i+0x21c>)
 80122b4:	220a      	movs	r2, #10
 80122b6:	e039      	b.n	801232c <_printf_i+0xd8>
 80122b8:	2973      	cmp	r1, #115	; 0x73
 80122ba:	f000 809d 	beq.w	80123f8 <_printf_i+0x1a4>
 80122be:	d808      	bhi.n	80122d2 <_printf_i+0x7e>
 80122c0:	296f      	cmp	r1, #111	; 0x6f
 80122c2:	d020      	beq.n	8012306 <_printf_i+0xb2>
 80122c4:	2970      	cmp	r1, #112	; 0x70
 80122c6:	d1dd      	bne.n	8012284 <_printf_i+0x30>
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	f043 0320 	orr.w	r3, r3, #32
 80122ce:	6023      	str	r3, [r4, #0]
 80122d0:	e003      	b.n	80122da <_printf_i+0x86>
 80122d2:	2975      	cmp	r1, #117	; 0x75
 80122d4:	d017      	beq.n	8012306 <_printf_i+0xb2>
 80122d6:	2978      	cmp	r1, #120	; 0x78
 80122d8:	d1d4      	bne.n	8012284 <_printf_i+0x30>
 80122da:	2378      	movs	r3, #120	; 0x78
 80122dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122e0:	4864      	ldr	r0, [pc, #400]	; (8012474 <_printf_i+0x220>)
 80122e2:	e055      	b.n	8012390 <_printf_i+0x13c>
 80122e4:	6813      	ldr	r3, [r2, #0]
 80122e6:	1d19      	adds	r1, r3, #4
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6011      	str	r1, [r2, #0]
 80122ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122f4:	2301      	movs	r3, #1
 80122f6:	e08c      	b.n	8012412 <_printf_i+0x1be>
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6011      	str	r1, [r2, #0]
 80122fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012300:	bf18      	it	ne
 8012302:	b21b      	sxthne	r3, r3
 8012304:	e7cf      	b.n	80122a6 <_printf_i+0x52>
 8012306:	6813      	ldr	r3, [r2, #0]
 8012308:	6825      	ldr	r5, [r4, #0]
 801230a:	1d18      	adds	r0, r3, #4
 801230c:	6010      	str	r0, [r2, #0]
 801230e:	0628      	lsls	r0, r5, #24
 8012310:	d501      	bpl.n	8012316 <_printf_i+0xc2>
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	e002      	b.n	801231c <_printf_i+0xc8>
 8012316:	0668      	lsls	r0, r5, #25
 8012318:	d5fb      	bpl.n	8012312 <_printf_i+0xbe>
 801231a:	881b      	ldrh	r3, [r3, #0]
 801231c:	4854      	ldr	r0, [pc, #336]	; (8012470 <_printf_i+0x21c>)
 801231e:	296f      	cmp	r1, #111	; 0x6f
 8012320:	bf14      	ite	ne
 8012322:	220a      	movne	r2, #10
 8012324:	2208      	moveq	r2, #8
 8012326:	2100      	movs	r1, #0
 8012328:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801232c:	6865      	ldr	r5, [r4, #4]
 801232e:	60a5      	str	r5, [r4, #8]
 8012330:	2d00      	cmp	r5, #0
 8012332:	f2c0 8095 	blt.w	8012460 <_printf_i+0x20c>
 8012336:	6821      	ldr	r1, [r4, #0]
 8012338:	f021 0104 	bic.w	r1, r1, #4
 801233c:	6021      	str	r1, [r4, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d13d      	bne.n	80123be <_printf_i+0x16a>
 8012342:	2d00      	cmp	r5, #0
 8012344:	f040 808e 	bne.w	8012464 <_printf_i+0x210>
 8012348:	4665      	mov	r5, ip
 801234a:	2a08      	cmp	r2, #8
 801234c:	d10b      	bne.n	8012366 <_printf_i+0x112>
 801234e:	6823      	ldr	r3, [r4, #0]
 8012350:	07db      	lsls	r3, r3, #31
 8012352:	d508      	bpl.n	8012366 <_printf_i+0x112>
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	6862      	ldr	r2, [r4, #4]
 8012358:	429a      	cmp	r2, r3
 801235a:	bfde      	ittt	le
 801235c:	2330      	movle	r3, #48	; 0x30
 801235e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012362:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012366:	ebac 0305 	sub.w	r3, ip, r5
 801236a:	6123      	str	r3, [r4, #16]
 801236c:	f8cd 8000 	str.w	r8, [sp]
 8012370:	463b      	mov	r3, r7
 8012372:	aa03      	add	r2, sp, #12
 8012374:	4621      	mov	r1, r4
 8012376:	4630      	mov	r0, r6
 8012378:	f7ff fef6 	bl	8012168 <_printf_common>
 801237c:	3001      	adds	r0, #1
 801237e:	d14d      	bne.n	801241c <_printf_i+0x1c8>
 8012380:	f04f 30ff 	mov.w	r0, #4294967295
 8012384:	b005      	add	sp, #20
 8012386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801238a:	4839      	ldr	r0, [pc, #228]	; (8012470 <_printf_i+0x21c>)
 801238c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012390:	6813      	ldr	r3, [r2, #0]
 8012392:	6821      	ldr	r1, [r4, #0]
 8012394:	1d1d      	adds	r5, r3, #4
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	6015      	str	r5, [r2, #0]
 801239a:	060a      	lsls	r2, r1, #24
 801239c:	d50b      	bpl.n	80123b6 <_printf_i+0x162>
 801239e:	07ca      	lsls	r2, r1, #31
 80123a0:	bf44      	itt	mi
 80123a2:	f041 0120 	orrmi.w	r1, r1, #32
 80123a6:	6021      	strmi	r1, [r4, #0]
 80123a8:	b91b      	cbnz	r3, 80123b2 <_printf_i+0x15e>
 80123aa:	6822      	ldr	r2, [r4, #0]
 80123ac:	f022 0220 	bic.w	r2, r2, #32
 80123b0:	6022      	str	r2, [r4, #0]
 80123b2:	2210      	movs	r2, #16
 80123b4:	e7b7      	b.n	8012326 <_printf_i+0xd2>
 80123b6:	064d      	lsls	r5, r1, #25
 80123b8:	bf48      	it	mi
 80123ba:	b29b      	uxthmi	r3, r3
 80123bc:	e7ef      	b.n	801239e <_printf_i+0x14a>
 80123be:	4665      	mov	r5, ip
 80123c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80123c4:	fb02 3311 	mls	r3, r2, r1, r3
 80123c8:	5cc3      	ldrb	r3, [r0, r3]
 80123ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80123ce:	460b      	mov	r3, r1
 80123d0:	2900      	cmp	r1, #0
 80123d2:	d1f5      	bne.n	80123c0 <_printf_i+0x16c>
 80123d4:	e7b9      	b.n	801234a <_printf_i+0xf6>
 80123d6:	6813      	ldr	r3, [r2, #0]
 80123d8:	6825      	ldr	r5, [r4, #0]
 80123da:	6961      	ldr	r1, [r4, #20]
 80123dc:	1d18      	adds	r0, r3, #4
 80123de:	6010      	str	r0, [r2, #0]
 80123e0:	0628      	lsls	r0, r5, #24
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	d501      	bpl.n	80123ea <_printf_i+0x196>
 80123e6:	6019      	str	r1, [r3, #0]
 80123e8:	e002      	b.n	80123f0 <_printf_i+0x19c>
 80123ea:	066a      	lsls	r2, r5, #25
 80123ec:	d5fb      	bpl.n	80123e6 <_printf_i+0x192>
 80123ee:	8019      	strh	r1, [r3, #0]
 80123f0:	2300      	movs	r3, #0
 80123f2:	6123      	str	r3, [r4, #16]
 80123f4:	4665      	mov	r5, ip
 80123f6:	e7b9      	b.n	801236c <_printf_i+0x118>
 80123f8:	6813      	ldr	r3, [r2, #0]
 80123fa:	1d19      	adds	r1, r3, #4
 80123fc:	6011      	str	r1, [r2, #0]
 80123fe:	681d      	ldr	r5, [r3, #0]
 8012400:	6862      	ldr	r2, [r4, #4]
 8012402:	2100      	movs	r1, #0
 8012404:	4628      	mov	r0, r5
 8012406:	f7ed fef3 	bl	80001f0 <memchr>
 801240a:	b108      	cbz	r0, 8012410 <_printf_i+0x1bc>
 801240c:	1b40      	subs	r0, r0, r5
 801240e:	6060      	str	r0, [r4, #4]
 8012410:	6863      	ldr	r3, [r4, #4]
 8012412:	6123      	str	r3, [r4, #16]
 8012414:	2300      	movs	r3, #0
 8012416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801241a:	e7a7      	b.n	801236c <_printf_i+0x118>
 801241c:	6923      	ldr	r3, [r4, #16]
 801241e:	462a      	mov	r2, r5
 8012420:	4639      	mov	r1, r7
 8012422:	4630      	mov	r0, r6
 8012424:	47c0      	blx	r8
 8012426:	3001      	adds	r0, #1
 8012428:	d0aa      	beq.n	8012380 <_printf_i+0x12c>
 801242a:	6823      	ldr	r3, [r4, #0]
 801242c:	079b      	lsls	r3, r3, #30
 801242e:	d413      	bmi.n	8012458 <_printf_i+0x204>
 8012430:	68e0      	ldr	r0, [r4, #12]
 8012432:	9b03      	ldr	r3, [sp, #12]
 8012434:	4298      	cmp	r0, r3
 8012436:	bfb8      	it	lt
 8012438:	4618      	movlt	r0, r3
 801243a:	e7a3      	b.n	8012384 <_printf_i+0x130>
 801243c:	2301      	movs	r3, #1
 801243e:	464a      	mov	r2, r9
 8012440:	4639      	mov	r1, r7
 8012442:	4630      	mov	r0, r6
 8012444:	47c0      	blx	r8
 8012446:	3001      	adds	r0, #1
 8012448:	d09a      	beq.n	8012380 <_printf_i+0x12c>
 801244a:	3501      	adds	r5, #1
 801244c:	68e3      	ldr	r3, [r4, #12]
 801244e:	9a03      	ldr	r2, [sp, #12]
 8012450:	1a9b      	subs	r3, r3, r2
 8012452:	42ab      	cmp	r3, r5
 8012454:	dcf2      	bgt.n	801243c <_printf_i+0x1e8>
 8012456:	e7eb      	b.n	8012430 <_printf_i+0x1dc>
 8012458:	2500      	movs	r5, #0
 801245a:	f104 0919 	add.w	r9, r4, #25
 801245e:	e7f5      	b.n	801244c <_printf_i+0x1f8>
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1ac      	bne.n	80123be <_printf_i+0x16a>
 8012464:	7803      	ldrb	r3, [r0, #0]
 8012466:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801246a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801246e:	e76c      	b.n	801234a <_printf_i+0xf6>
 8012470:	08017705 	.word	0x08017705
 8012474:	08017716 	.word	0x08017716

08012478 <_putc_r>:
 8012478:	b570      	push	{r4, r5, r6, lr}
 801247a:	460d      	mov	r5, r1
 801247c:	4614      	mov	r4, r2
 801247e:	4606      	mov	r6, r0
 8012480:	b118      	cbz	r0, 801248a <_putc_r+0x12>
 8012482:	6983      	ldr	r3, [r0, #24]
 8012484:	b90b      	cbnz	r3, 801248a <_putc_r+0x12>
 8012486:	f7ff fb91 	bl	8011bac <__sinit>
 801248a:	4b13      	ldr	r3, [pc, #76]	; (80124d8 <_putc_r+0x60>)
 801248c:	429c      	cmp	r4, r3
 801248e:	d112      	bne.n	80124b6 <_putc_r+0x3e>
 8012490:	6874      	ldr	r4, [r6, #4]
 8012492:	68a3      	ldr	r3, [r4, #8]
 8012494:	3b01      	subs	r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	60a3      	str	r3, [r4, #8]
 801249a:	da16      	bge.n	80124ca <_putc_r+0x52>
 801249c:	69a2      	ldr	r2, [r4, #24]
 801249e:	4293      	cmp	r3, r2
 80124a0:	db02      	blt.n	80124a8 <_putc_r+0x30>
 80124a2:	b2eb      	uxtb	r3, r5
 80124a4:	2b0a      	cmp	r3, #10
 80124a6:	d110      	bne.n	80124ca <_putc_r+0x52>
 80124a8:	4622      	mov	r2, r4
 80124aa:	4629      	mov	r1, r5
 80124ac:	4630      	mov	r0, r6
 80124ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124b2:	f7ff b9cb 	b.w	801184c <__swbuf_r>
 80124b6:	4b09      	ldr	r3, [pc, #36]	; (80124dc <_putc_r+0x64>)
 80124b8:	429c      	cmp	r4, r3
 80124ba:	d101      	bne.n	80124c0 <_putc_r+0x48>
 80124bc:	68b4      	ldr	r4, [r6, #8]
 80124be:	e7e8      	b.n	8012492 <_putc_r+0x1a>
 80124c0:	4b07      	ldr	r3, [pc, #28]	; (80124e0 <_putc_r+0x68>)
 80124c2:	429c      	cmp	r4, r3
 80124c4:	bf08      	it	eq
 80124c6:	68f4      	ldreq	r4, [r6, #12]
 80124c8:	e7e3      	b.n	8012492 <_putc_r+0x1a>
 80124ca:	6823      	ldr	r3, [r4, #0]
 80124cc:	1c5a      	adds	r2, r3, #1
 80124ce:	6022      	str	r2, [r4, #0]
 80124d0:	701d      	strb	r5, [r3, #0]
 80124d2:	b2e8      	uxtb	r0, r5
 80124d4:	bd70      	pop	{r4, r5, r6, pc}
 80124d6:	bf00      	nop
 80124d8:	080176b4 	.word	0x080176b4
 80124dc:	080176d4 	.word	0x080176d4
 80124e0:	08017694 	.word	0x08017694

080124e4 <_sbrk_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4c06      	ldr	r4, [pc, #24]	; (8012500 <_sbrk_r+0x1c>)
 80124e8:	2300      	movs	r3, #0
 80124ea:	4605      	mov	r5, r0
 80124ec:	4608      	mov	r0, r1
 80124ee:	6023      	str	r3, [r4, #0]
 80124f0:	f7ee fa9c 	bl	8000a2c <_sbrk>
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	d102      	bne.n	80124fe <_sbrk_r+0x1a>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	b103      	cbz	r3, 80124fe <_sbrk_r+0x1a>
 80124fc:	602b      	str	r3, [r5, #0]
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	200069d0 	.word	0x200069d0

08012504 <__sread>:
 8012504:	b510      	push	{r4, lr}
 8012506:	460c      	mov	r4, r1
 8012508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801250c:	f000 f896 	bl	801263c <_read_r>
 8012510:	2800      	cmp	r0, #0
 8012512:	bfab      	itete	ge
 8012514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012516:	89a3      	ldrhlt	r3, [r4, #12]
 8012518:	181b      	addge	r3, r3, r0
 801251a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801251e:	bfac      	ite	ge
 8012520:	6563      	strge	r3, [r4, #84]	; 0x54
 8012522:	81a3      	strhlt	r3, [r4, #12]
 8012524:	bd10      	pop	{r4, pc}

08012526 <__swrite>:
 8012526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801252a:	461f      	mov	r7, r3
 801252c:	898b      	ldrh	r3, [r1, #12]
 801252e:	05db      	lsls	r3, r3, #23
 8012530:	4605      	mov	r5, r0
 8012532:	460c      	mov	r4, r1
 8012534:	4616      	mov	r6, r2
 8012536:	d505      	bpl.n	8012544 <__swrite+0x1e>
 8012538:	2302      	movs	r3, #2
 801253a:	2200      	movs	r2, #0
 801253c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012540:	f000 f868 	bl	8012614 <_lseek_r>
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801254a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801254e:	81a3      	strh	r3, [r4, #12]
 8012550:	4632      	mov	r2, r6
 8012552:	463b      	mov	r3, r7
 8012554:	4628      	mov	r0, r5
 8012556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801255a:	f000 b817 	b.w	801258c <_write_r>

0801255e <__sseek>:
 801255e:	b510      	push	{r4, lr}
 8012560:	460c      	mov	r4, r1
 8012562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012566:	f000 f855 	bl	8012614 <_lseek_r>
 801256a:	1c43      	adds	r3, r0, #1
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	bf15      	itete	ne
 8012570:	6560      	strne	r0, [r4, #84]	; 0x54
 8012572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801257a:	81a3      	strheq	r3, [r4, #12]
 801257c:	bf18      	it	ne
 801257e:	81a3      	strhne	r3, [r4, #12]
 8012580:	bd10      	pop	{r4, pc}

08012582 <__sclose>:
 8012582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012586:	f000 b813 	b.w	80125b0 <_close_r>
	...

0801258c <_write_r>:
 801258c:	b538      	push	{r3, r4, r5, lr}
 801258e:	4c07      	ldr	r4, [pc, #28]	; (80125ac <_write_r+0x20>)
 8012590:	4605      	mov	r5, r0
 8012592:	4608      	mov	r0, r1
 8012594:	4611      	mov	r1, r2
 8012596:	2200      	movs	r2, #0
 8012598:	6022      	str	r2, [r4, #0]
 801259a:	461a      	mov	r2, r3
 801259c:	f7ee f9f5 	bl	800098a <_write>
 80125a0:	1c43      	adds	r3, r0, #1
 80125a2:	d102      	bne.n	80125aa <_write_r+0x1e>
 80125a4:	6823      	ldr	r3, [r4, #0]
 80125a6:	b103      	cbz	r3, 80125aa <_write_r+0x1e>
 80125a8:	602b      	str	r3, [r5, #0]
 80125aa:	bd38      	pop	{r3, r4, r5, pc}
 80125ac:	200069d0 	.word	0x200069d0

080125b0 <_close_r>:
 80125b0:	b538      	push	{r3, r4, r5, lr}
 80125b2:	4c06      	ldr	r4, [pc, #24]	; (80125cc <_close_r+0x1c>)
 80125b4:	2300      	movs	r3, #0
 80125b6:	4605      	mov	r5, r0
 80125b8:	4608      	mov	r0, r1
 80125ba:	6023      	str	r3, [r4, #0]
 80125bc:	f7ee fa01 	bl	80009c2 <_close>
 80125c0:	1c43      	adds	r3, r0, #1
 80125c2:	d102      	bne.n	80125ca <_close_r+0x1a>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	b103      	cbz	r3, 80125ca <_close_r+0x1a>
 80125c8:	602b      	str	r3, [r5, #0]
 80125ca:	bd38      	pop	{r3, r4, r5, pc}
 80125cc:	200069d0 	.word	0x200069d0

080125d0 <_fstat_r>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	4c07      	ldr	r4, [pc, #28]	; (80125f0 <_fstat_r+0x20>)
 80125d4:	2300      	movs	r3, #0
 80125d6:	4605      	mov	r5, r0
 80125d8:	4608      	mov	r0, r1
 80125da:	4611      	mov	r1, r2
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	f7ee f9fc 	bl	80009da <_fstat>
 80125e2:	1c43      	adds	r3, r0, #1
 80125e4:	d102      	bne.n	80125ec <_fstat_r+0x1c>
 80125e6:	6823      	ldr	r3, [r4, #0]
 80125e8:	b103      	cbz	r3, 80125ec <_fstat_r+0x1c>
 80125ea:	602b      	str	r3, [r5, #0]
 80125ec:	bd38      	pop	{r3, r4, r5, pc}
 80125ee:	bf00      	nop
 80125f0:	200069d0 	.word	0x200069d0

080125f4 <_isatty_r>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	4c06      	ldr	r4, [pc, #24]	; (8012610 <_isatty_r+0x1c>)
 80125f8:	2300      	movs	r3, #0
 80125fa:	4605      	mov	r5, r0
 80125fc:	4608      	mov	r0, r1
 80125fe:	6023      	str	r3, [r4, #0]
 8012600:	f7ee f9fb 	bl	80009fa <_isatty>
 8012604:	1c43      	adds	r3, r0, #1
 8012606:	d102      	bne.n	801260e <_isatty_r+0x1a>
 8012608:	6823      	ldr	r3, [r4, #0]
 801260a:	b103      	cbz	r3, 801260e <_isatty_r+0x1a>
 801260c:	602b      	str	r3, [r5, #0]
 801260e:	bd38      	pop	{r3, r4, r5, pc}
 8012610:	200069d0 	.word	0x200069d0

08012614 <_lseek_r>:
 8012614:	b538      	push	{r3, r4, r5, lr}
 8012616:	4c07      	ldr	r4, [pc, #28]	; (8012634 <_lseek_r+0x20>)
 8012618:	4605      	mov	r5, r0
 801261a:	4608      	mov	r0, r1
 801261c:	4611      	mov	r1, r2
 801261e:	2200      	movs	r2, #0
 8012620:	6022      	str	r2, [r4, #0]
 8012622:	461a      	mov	r2, r3
 8012624:	f7ee f9f4 	bl	8000a10 <_lseek>
 8012628:	1c43      	adds	r3, r0, #1
 801262a:	d102      	bne.n	8012632 <_lseek_r+0x1e>
 801262c:	6823      	ldr	r3, [r4, #0]
 801262e:	b103      	cbz	r3, 8012632 <_lseek_r+0x1e>
 8012630:	602b      	str	r3, [r5, #0]
 8012632:	bd38      	pop	{r3, r4, r5, pc}
 8012634:	200069d0 	.word	0x200069d0

08012638 <__malloc_lock>:
 8012638:	4770      	bx	lr

0801263a <__malloc_unlock>:
 801263a:	4770      	bx	lr

0801263c <_read_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4c07      	ldr	r4, [pc, #28]	; (801265c <_read_r+0x20>)
 8012640:	4605      	mov	r5, r0
 8012642:	4608      	mov	r0, r1
 8012644:	4611      	mov	r1, r2
 8012646:	2200      	movs	r2, #0
 8012648:	6022      	str	r2, [r4, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	f7ee f980 	bl	8000950 <_read>
 8012650:	1c43      	adds	r3, r0, #1
 8012652:	d102      	bne.n	801265a <_read_r+0x1e>
 8012654:	6823      	ldr	r3, [r4, #0]
 8012656:	b103      	cbz	r3, 801265a <_read_r+0x1e>
 8012658:	602b      	str	r3, [r5, #0]
 801265a:	bd38      	pop	{r3, r4, r5, pc}
 801265c:	200069d0 	.word	0x200069d0

08012660 <_init>:
 8012660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012662:	bf00      	nop
 8012664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012666:	bc08      	pop	{r3}
 8012668:	469e      	mov	lr, r3
 801266a:	4770      	bx	lr

0801266c <_fini>:
 801266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266e:	bf00      	nop
 8012670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012672:	bc08      	pop	{r3}
 8012674:	469e      	mov	lr, r3
 8012676:	4770      	bx	lr
