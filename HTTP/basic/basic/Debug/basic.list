
basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b74  08010028  08010028  00020028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b9c  08012b9c  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08012b9c  08012b9c  00022b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ba4  08012ba4  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ba4  08012ba4  00022ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ba8  08012ba8  00022ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08012bac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cc0  2000008c  08012c38  0003008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006d4c  08012c38  00036d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff86  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c09  00000000  00000000  00060042  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  00065c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018d0  00000000  00000000  00067648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003073b  00000000  00000000  00068f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021834  00000000  00000000  00099653  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f30b6  00000000  00000000  000bae87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001adf3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000712c  00000000  00000000  001adfb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010010 	.word	0x08010010

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08010010 	.word	0x08010010

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a4a      	ldr	r2, [pc, #296]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a43      	ldr	r2, [pc, #268]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a35      	ldr	r2, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x148>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <MX_GPIO_Init+0x148>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0101 	movw	r1, #16385	; 0x4001
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000656:	f001 fec9 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <MX_GPIO_Init+0x150>)
 8000660:	f001 fec4 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0x154>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x158>)
 800067a:	f001 fd0d 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800067e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000698:	f001 fcfe 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x150>)
 80006b4:	f001 fcf0 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0x150>)
 80006cc:	f001 fce4 	bl	8002098 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3730      	adds	r7, #48	; 0x30
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	10110000 	.word	0x10110000
 80006e8:	40020800 	.word	0x40020800

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fb98 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f814 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff4a 	bl	8000590 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 fa6e 	bl	8000bdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000700:	f000 fade 	bl	8000cc0 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000704:	f004 f9a0 	bl	8004a48 <MX_LWIP_Init>
  MX_TIM4_Init();
 8000708:	f000 f98e 	bl	8000a28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <main+0x30>)
 8000710:	f002 fc64 	bl	8002fdc <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000714:	f004 fabe 	bl	8004c94 <MX_LWIP_Process>
 8000718:	e7fc      	b.n	8000714 <main+0x28>
 800071a:	bf00      	nop
 800071c:	20000224 	.word	0x20000224

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00e fd46 	bl	800f1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	; (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000794:	23a8      	movs	r3, #168	; 0xa8
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 ff57 	bl	8002658 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f820 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2105      	movs	r1, #5
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f9b0 	bl	8002b38 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f809 	bl	80007f4 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 fb0e 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM4_IRQHandler+0x10>)
 80008b6:	f002 fc15 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000224 	.word	0x20000224

080008c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00a      	b.n	80008ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008d6:	f3af 8000 	nop.w
 80008da:	4601      	mov	r1, r0
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf0      	blt.n	80008d6 <_read+0x12>
	}

return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e009      	b.n	8000924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf1      	blt.n	8000910 <_write+0x12>
	}
	return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095e:	605a      	str	r2, [r3, #4]
	return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_isatty>:

int _isatty(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	return 1;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x50>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x16>
		heap_end = &end;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <_sbrk+0x50>)
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <_sbrk+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <_sbrk+0x50>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <_sbrk+0x50>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	466a      	mov	r2, sp
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d905      	bls.n	80009d6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <_sbrk+0x58>)
 80009cc:	220c      	movs	r2, #12
 80009ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	e006      	b.n	80009e4 <_sbrk+0x44>
	}

	heap_end += incr;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <_sbrk+0x50>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <_sbrk+0x50>)
 80009e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	200000a8 	.word	0x200000a8
 80009f4:	20006d50 	.word	0x20006d50
 80009f8:	20006d48 	.word	0x20006d48

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <SystemInit+0x28>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <SystemInit+0x28>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SystemInit+0x28>)
 8000a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a16:	609a      	str	r2, [r3, #8]
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0xFFFF;
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a80:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a82:	f002 fa4b 	bl	8002f1c <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f7ff feb2 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000a9e:	f002 fc89 	bl	80033b4 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000aa8:	f7ff fea4 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000aae:	f002 fa60 	bl	8002f72 <HAL_TIM_OC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ab8:	f7ff fe9c 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000acc:	f003 f86c 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ad6:	f7ff fe8d 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ada:	2330      	movs	r3, #48	; 0x30
 8000adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2204      	movs	r2, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000af2:	f002 fbff 	bl	80032f4 <HAL_TIM_OC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000afc:	f7ff fe7a 	bl	80007f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM4_Init+0xe8>)
 8000b02:	f000 f831 	bl	8000b68 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000224 	.word	0x20000224
 8000b14:	40000800 	.word	0x40000800

08000b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d115      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201e      	movs	r0, #30
 8000b4c:	f000 fad9 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b50:	201e      	movs	r0, #30
 8000b52:	f000 faf2 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40000800 	.word	0x40000800
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_TIM_MspPostInit+0x68>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d11d      	bne.n	8000bc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_TIM_MspPostInit+0x6c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_TIM_MspPostInit+0x6c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_TIM_MspPostInit+0x6c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = uC_Status_Pin;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(uC_Status_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_TIM_MspPostInit+0x70>)
 8000bc2:	f001 fa69 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40000800 	.word	0x40000800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART3_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART3_UART_Init+0x4c>)
 8000c14:	f003 f858 	bl	8003cc8 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f7ff fde9 	bl	80007f4 <Error_Handler>
  }

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000264 	.word	0x20000264
 8000c2c:	40004800 	.word	0x40004800

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca8:	f001 f9f6 	bl	8002098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40004800 	.word	0x40004800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	f001 fb8b 	bl	800241e <HAL_PCD_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d0e:	f7ff fd71 	bl	80007f4 <Error_Handler>
  }

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200002a4 	.word	0x200002a4

08000d1c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d3c:	d13f      	bne.n	8000dbe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <HAL_PCD_MspInit+0xb0>)
 8000d78:	f001 f98e 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <HAL_PCD_MspInit+0xb0>)
 8000d92:	f001 f981 	bl	8002098 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6353      	str	r3, [r2, #52]	; 0x34
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_PCD_MspInit+0xac>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dd6:	e003      	b.n	8000de0 <LoopCopyDataInit>

08000dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dde:	3104      	adds	r1, #4

08000de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000de8:	d3f6      	bcc.n	8000dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dec:	e002      	b.n	8000df4 <LoopFillZerobss>

08000dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df0:	f842 3b04 	str.w	r3, [r2], #4

08000df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000df8:	d3f9      	bcc.n	8000dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff fdff 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f00e f9a1 	bl	800f144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc73 	bl	80006ec <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e08:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e0c:	08012bac 	.word	0x08012bac
  ldr  r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e14:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8000e18:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8000e1c:	20006d4c 	.word	0x20006d4c

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f94d 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fcd4 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f965 	bl	8001156 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f92d 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200006ac 	.word	0x200006ac

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200006ac 	.word	0x200006ac

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_Delay+0x40>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001180:	4baa      	ldr	r3, [pc, #680]	; (800142c <HAL_ETH_Init+0x2bc>)
 8001182:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e185      	b.n	80014a2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d106      	bne.n	80011b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f003 fd86 	bl	8004cbc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b9e      	ldr	r3, [pc, #632]	; (8001430 <HAL_ETH_Init+0x2c0>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a9d      	ldr	r2, [pc, #628]	; (8001430 <HAL_ETH_Init+0x2c0>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
 80011c0:	4b9b      	ldr	r3, [pc, #620]	; (8001430 <HAL_ETH_Init+0x2c0>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <HAL_ETH_Init+0x2c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a98      	ldr	r2, [pc, #608]	; (8001434 <HAL_ETH_Init+0x2c4>)
 80011d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011d6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011d8:	4b96      	ldr	r3, [pc, #600]	; (8001434 <HAL_ETH_Init+0x2c4>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4994      	ldr	r1, [pc, #592]	; (8001434 <HAL_ETH_Init+0x2c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011fe:	f7ff fe77 	bl	8000ef0 <HAL_GetTick>
 8001202:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001204:	e011      	b.n	800122a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001206:	f7ff fe73 	bl	8000ef0 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001214:	d909      	bls.n	800122a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e13b      	b.n	80014a2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e4      	bne.n	8001206 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f023 031c 	bic.w	r3, r3, #28
 800124a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800124c:	f001 fe32 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8001250:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a78      	ldr	r2, [pc, #480]	; (8001438 <HAL_ETH_Init+0x2c8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d908      	bls.n	800126c <HAL_ETH_Init+0xfc>
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4a77      	ldr	r2, [pc, #476]	; (800143c <HAL_ETH_Init+0x2cc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d804      	bhi.n	800126c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e027      	b.n	80012bc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4a73      	ldr	r2, [pc, #460]	; (800143c <HAL_ETH_Init+0x2cc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d908      	bls.n	8001286 <HAL_ETH_Init+0x116>
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4a72      	ldr	r2, [pc, #456]	; (8001440 <HAL_ETH_Init+0x2d0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d804      	bhi.n	8001286 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f043 030c 	orr.w	r3, r3, #12
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	e01a      	b.n	80012bc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4a6d      	ldr	r2, [pc, #436]	; (8001440 <HAL_ETH_Init+0x2d0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d903      	bls.n	8001296 <HAL_ETH_Init+0x126>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_ETH_Init+0x2d4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d911      	bls.n	80012ba <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4a6a      	ldr	r2, [pc, #424]	; (8001444 <HAL_ETH_Init+0x2d4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d908      	bls.n	80012b0 <HAL_ETH_Init+0x140>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_ETH_Init+0x2d8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d804      	bhi.n	80012b0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e005      	b.n	80012bc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e000      	b.n	80012bc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012ba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c8:	2100      	movs	r1, #0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fb9a 	bl	8001a04 <HAL_ETH_WritePHYRegister>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012da:	6939      	ldr	r1, [r7, #16]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc27 	bl	8001b30 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0d9      	b.n	80014a2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012ee:	20ff      	movs	r0, #255	; 0xff
 80012f0:	f7ff fe0a 	bl	8000f08 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a7 	beq.w	800144c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012fe:	f7ff fdf7 	bl	8000ef0 <HAL_GetTick>
 8001302:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	461a      	mov	r2, r3
 800130a:	2101      	movs	r1, #1
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fb11 	bl	8001934 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001312:	f7ff fded 	bl	8000ef0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d90f      	bls.n	8001344 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fc00 	bl	8001b30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0ae      	b.n	80014a2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0da      	beq.n	8001304 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800134e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fb55 	bl	8001a04 <HAL_ETH_WritePHYRegister>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00b      	beq.n	8001378 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fbe2 	bl	8001b30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001374:	2301      	movs	r3, #1
 8001376:	e094      	b.n	80014a2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001378:	f7ff fdba 	bl	8000ef0 <HAL_GetTick>
 800137c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	461a      	mov	r2, r3
 8001384:	2101      	movs	r1, #1
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fad4 	bl	8001934 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800138c:	f7ff fdb0 	bl	8000ef0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d90f      	bls.n	80013be <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fbc3 	bl	8001b30 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e071      	b.n	80014a2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0320 	and.w	r3, r3, #32
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0da      	beq.n	800137e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	461a      	mov	r2, r3
 80013ce:	211f      	movs	r1, #31
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 faaf 	bl	8001934 <HAL_ETH_ReadPHYRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013e0:	6939      	ldr	r1, [r7, #16]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fba4 	bl	8001b30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013f0:	2301      	movs	r3, #1
 80013f2:	e056      	b.n	80014a2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	e002      	b.n	800140e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e037      	b.n	8001490 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e032      	b.n	8001490 <HAL_ETH_Init+0x320>
 800142a:	bf00      	nop
 800142c:	03938700 	.word	0x03938700
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	01312cff 	.word	0x01312cff
 800143c:	02160ebf 	.word	0x02160ebf
 8001440:	039386ff 	.word	0x039386ff
 8001444:	05f5e0ff 	.word	0x05f5e0ff
 8001448:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800145c:	4313      	orrs	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 facd 	bl	8001a04 <HAL_ETH_WritePHYRegister>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001474:	6939      	ldr	r1, [r7, #16]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fb5a 	bl	8001b30 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e00c      	b.n	80014a2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001488:	f640 70ff 	movw	r0, #4095	; 0xfff
 800148c:	f7ff fd3c 	bl	8000f08 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fb4c 	bl	8001b30 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop

080014ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ETH_DMATxDescListInit+0x20>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e052      	b.n	8001572 <HAL_ETH_DMATxDescListInit+0xc6>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e030      	b.n	800154a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	461a      	mov	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	d208      	bcs.n	800153e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	461a      	mov	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	e002      	b.n	8001544 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3ca      	bcc.n	80014e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155c:	3310      	adds	r3, #16
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ETH_DMARxDescListInit+0x20>
 800159a:	2302      	movs	r3, #2
 800159c:	e056      	b.n	800164c <HAL_ETH_DMARxDescListInit+0xce>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e034      	b.n	8001624 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	4413      	add	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015ca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015d2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	461a      	mov	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3b01      	subs	r3, #1
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	429a      	cmp	r2, r3
 8001604:	d208      	bcs.n	8001618 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	e002      	b.n	800161e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3c6      	bcc.n	80015ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	330c      	adds	r3, #12
 8001638:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_ETH_TransmitFrame+0x24>
 8001678:	2302      	movs	r3, #2
 800167a:	e0cd      	b.n	8001818 <HAL_ETH_TransmitFrame+0x1c0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0b8      	b.n	8001818 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da09      	bge.n	80016c4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2212      	movs	r2, #18
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0a9      	b.n	8001818 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d915      	bls.n	80016fa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4a54      	ldr	r2, [pc, #336]	; (8001824 <HAL_ETH_TransmitFrame+0x1cc>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0a9b      	lsrs	r3, r3, #10
 80016d8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_ETH_TransmitFrame+0x1cc>)
 80016de:	fba3 1302 	umull	r1, r3, r3, r2
 80016e2:	0a9b      	lsrs	r3, r3, #10
 80016e4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e001      	b.n	80016fe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016fa:	2301      	movs	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d11c      	bne.n	800173e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001712:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800171e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800172e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
 800173c:	e04b      	b.n	80017d6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e044      	b.n	80017ce <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001752:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001768:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001772:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3b01      	subs	r3, #1
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	429a      	cmp	r2, r3
 800177c:	d116      	bne.n	80017ac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800178c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4a25      	ldr	r2, [pc, #148]	; (8001828 <HAL_ETH_TransmitFrame+0x1d0>)
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800179e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017aa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	3301      	adds	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3b6      	bcc.n	8001744 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	3314      	adds	r3, #20
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	3314      	adds	r3, #20
 80017f4:	2204      	movs	r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001800:	3304      	adds	r3, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	ac02b00b 	.word	0xac02b00b
 8001828:	fffffa0c 	.word	0xfffffa0c

0800182c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ETH_GetReceivedFrame+0x1a>
 8001842:	2302      	movs	r3, #2
 8001844:	e070      	b.n	8001928 <HAL_ETH_GetReceivedFrame+0xfc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db5a      	blt.n	8001916 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d030      	beq.n	80018d0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	2b01      	cmp	r3, #1
 800187e:	d103      	bne.n	8001888 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800189c:	3b04      	subs	r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e02b      	b.n	8001928 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
 80018fe:	e00a      	b.n	8001916 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	460b      	mov	r3, r1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b82      	cmp	r3, #130	; 0x82
 8001954:	d101      	bne.n	800195a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	e050      	b.n	80019fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2282      	movs	r2, #130	; 0x82
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 031c 	and.w	r3, r3, #28
 8001970:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8a1b      	ldrh	r3, [r3, #16]
 8001976:	02db      	lsls	r3, r3, #11
 8001978:	b29b      	uxth	r3, r3
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f023 0302 	bic.w	r3, r3, #2
 8001994:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019a6:	f7ff faa3 	bl	8000ef0 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ac:	e015      	b.n	80019da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019ae:	f7ff fa9f 	bl	8000ef0 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d309      	bcc.n	80019d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e014      	b.n	80019fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e4      	bne.n	80019ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b42      	cmp	r3, #66	; 0x42
 8001a24:	d101      	bne.n	8001a2a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
 8001a28:	e04e      	b.n	8001ac8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2242      	movs	r2, #66	; 0x42
 8001a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8a1b      	ldrh	r3, [r3, #16]
 8001a46:	02db      	lsls	r3, r3, #11
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fa36 	bl	8000ef0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a86:	e015      	b.n	8001ab4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a88:	f7ff fa32 	bl	8000ef0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a96:	d309      	bcc.n	8001aac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e00d      	b.n	8001ac8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e4      	bne.n	8001a88 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ETH_Start+0x16>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e01f      	b.n	8001b26 <HAL_ETH_Start+0x56>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fa1c 	bl	8001f34 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fa36 	bl	8001f6e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fa80 	bl	8002008 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fa4d 	bl	8001fa8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa62 	bl	8001fd8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b0      	sub	sp, #192	; 0xc0
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b4c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b54:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b7c:	e001      	b.n	8001b82 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b86:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c08:	4bac      	ldr	r3, [pc, #688]	; (8001ebc <ETH_MACDMAConfig+0x38c>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c14:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001c18:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001c1c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c22:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c26:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c2a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c30:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c34:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c38:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c3c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c40:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c44:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f94f 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c72:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c78:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c7c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c82:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c88:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c8e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ca0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ca2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff f92a 	bl	8000f08 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cbc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cc6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cd0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cf4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cfa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001d00:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d06:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001d0c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d20:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff f8eb 	bl	8000f08 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d3c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff f8d6 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d64:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d78:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	3318      	adds	r3, #24
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <ETH_MACDMAConfig+0x390>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dd2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001dd4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001dd6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001dd8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001dda:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ddc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001dde:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001de0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001de2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001de4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001de6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001dea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001df0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df4:	4313      	orrs	r3, r2
 8001df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	3318      	adds	r3, #24
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e08:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	3318      	adds	r3, #24
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff f874 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	3318      	adds	r3, #24
 8001e2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e2e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e34:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e38:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e3c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e40:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e44:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e46:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e4a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff f84d 	bl	8000f08 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e7a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10f      	bne.n	8001ea4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	331c      	adds	r3, #28
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	331c      	adds	r3, #28
 8001ea2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f809 	bl	8001ec4 <ETH_MACAddressConfig>
}
 8001eb2:	bf00      	nop
 8001eb4:	37c0      	adds	r7, #192	; 0xc0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	ff20810f 	.word	0xff20810f
 8001ec0:	f8de3f23 	.word	0xf8de3f23

08001ec4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3305      	adds	r3, #5
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	3204      	adds	r2, #4
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <ETH_MACAddressConfig+0x68>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <ETH_MACAddressConfig+0x6c>)
 8001f16:	4413      	add	r3, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40028040 	.word	0x40028040
 8001f30:	40028044 	.word	0x40028044

08001f34 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f000 f87f 	bl	800205c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0204 	orr.w	r2, r2, #4
 8001f88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 f862 	bl	800205c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb8:	3318      	adds	r3, #24
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	3318      	adds	r3, #24
 8001fca:	601a      	str	r2, [r3, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	3318      	adds	r3, #24
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0202 	orr.w	r2, r2, #2
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	3318      	adds	r3, #24
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	3318      	adds	r3, #24
 800202e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002038:	3318      	adds	r3, #24
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 f80c 	bl	800205c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	3318      	adds	r3, #24
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <ETH_Delay+0x34>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <ETH_Delay+0x38>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a5b      	lsrs	r3, r3, #9
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002078:	bf00      	nop
  } 
  while (Delay --);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	60fa      	str	r2, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f9      	bne.n	8002078 <ETH_Delay+0x1c>
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	20000000 	.word	0x20000000
 8002094:	10624dd3 	.word	0x10624dd3

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e177      	b.n	80023a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f040 8166 	bne.w	800239e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d00b      	beq.n	80020f2 <HAL_GPIO_Init+0x5a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0xfc>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d123      	bne.n	80021dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80c0 	beq.w	800239e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_GPIO_Init+0x320>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_GPIO_Init+0x320>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_GPIO_Init+0x320>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223a:	4a60      	ldr	r2, [pc, #384]	; (80023bc <HAL_GPIO_Init+0x324>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_GPIO_Init+0x328>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d037      	beq.n	80022d6 <HAL_GPIO_Init+0x23e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_GPIO_Init+0x32c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d031      	beq.n	80022d2 <HAL_GPIO_Init+0x23a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_GPIO_Init+0x330>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x236>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x334>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x232>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x338>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x22e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x33c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x22a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_GPIO_Init+0x340>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x226>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_GPIO_Init+0x344>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x222>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x348>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x21e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4e      	ldr	r2, [pc, #312]	; (80023e4 <HAL_GPIO_Init+0x34c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x21a>
 80022ae:	2309      	movs	r3, #9
 80022b0:	e012      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022b2:	230a      	movs	r3, #10
 80022b4:	e010      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022b6:	2308      	movs	r3, #8
 80022b8:	e00e      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x240>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4934      	ldr	r1, [pc, #208]	; (80023bc <HAL_GPIO_Init+0x324>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_GPIO_Init+0x350>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231a:	4a33      	ldr	r2, [pc, #204]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002344:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_GPIO_Init+0x350>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_GPIO_Init+0x350>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae84 	bls.w	80020b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	3724      	adds	r7, #36	; 0x24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40021400 	.word	0x40021400
 80023d8:	40021800 	.word	0x40021800
 80023dc:	40021c00 	.word	0x40021c00
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40022400 	.word	0x40022400
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002420:	b08f      	sub	sp, #60	; 0x3c
 8002422:	af0a      	add	r7, sp, #40	; 0x28
 8002424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e10f      	b.n	8002650 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fc66 	bl	8000d1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f002 f855 	bl	800451e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	687e      	ldr	r6, [r7, #4]
 800247c:	466d      	mov	r5, sp
 800247e:	f106 0410 	add.w	r4, r6, #16
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800248e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002492:	1d33      	adds	r3, r6, #4
 8002494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	f001 ffe0 	bl	800445c <USB_CoreInit>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0d0      	b.n	8002650 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 f843 	bl	8004540 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e04a      	b.n	8002556 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	333d      	adds	r3, #61	; 0x3d
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	333c      	adds	r3, #60	; 0x3c
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	b298      	uxth	r0, r3
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3342      	adds	r3, #66	; 0x42
 80024fc:	4602      	mov	r2, r0
 80024fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	333f      	adds	r3, #63	; 0x3f
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3344      	adds	r3, #68	; 0x44
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3348      	adds	r3, #72	; 0x48
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3350      	adds	r3, #80	; 0x50
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3301      	adds	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	d3af      	bcc.n	80024c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e044      	b.n	80025f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d3b5      	bcc.n	8002566 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	687e      	ldr	r6, [r7, #4]
 8002602:	466d      	mov	r5, sp
 8002604:	f106 0410 	add.w	r4, r6, #16
 8002608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002614:	e885 0003 	stmia.w	r5, {r0, r1}
 8002618:	1d33      	adds	r3, r6, #4
 800261a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	f001 ffb9 	bl	8004594 <USB_DevInit>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00d      	b.n	8002650 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 f968 	bl	800491e <USB_DevDisconnect>

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e25b      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d075      	beq.n	8002762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002676:	4ba3      	ldr	r3, [pc, #652]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d00c      	beq.n	800269c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d112      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268e:	4b9d      	ldr	r3, [pc, #628]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4b99      	ldr	r3, [pc, #612]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05b      	beq.n	8002760 <HAL_RCC_OscConfig+0x108>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d157      	bne.n	8002760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e236      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x74>
 80026be:	4b91      	ldr	r3, [pc, #580]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a90      	ldr	r2, [pc, #576]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a8a      	ldr	r2, [pc, #552]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a87      	ldr	r2, [pc, #540]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026f0:	4b84      	ldr	r3, [pc, #528]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a83      	ldr	r2, [pc, #524]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a80      	ldr	r2, [pc, #512]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fbee 	bl	8000ef0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fbea 	bl	8000ef0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1fb      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xc0>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fbda 	bl	8000ef0 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fbd6 	bl	8000ef0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1e7      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0xe8>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d063      	beq.n	8002836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b62      	ldr	r3, [pc, #392]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	4b5c      	ldr	r3, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1bb      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4952      	ldr	r1, [pc, #328]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	e03a      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_RCC_OscConfig+0x2b0>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fb8f 	bl	8000ef0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fb8b 	bl	8000ef0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e19c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4940      	ldr	r1, [pc, #256]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
 8002808:	e015      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_OscConfig+0x2b0>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe fb6e 	bl	8000ef0 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe fb6a 	bl	8000ef0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e17b      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d030      	beq.n	80028a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x2b4>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fb4e 	bl	8000ef0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002858:	f7fe fb4a 	bl	8000ef0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e15b      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x200>
 8002876:	e015      	b.n	80028a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x2b4>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fb37 	bl	8000ef0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002886:	f7fe fb33 	bl	8000ef0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e144      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a0 	beq.w	80029f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x2b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d121      	bne.n	8002932 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x2b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <HAL_RCC_OscConfig+0x2b8>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7fe faf9 	bl	8000ef0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e011      	b.n	8002926 <HAL_RCC_OscConfig+0x2ce>
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	42470000 	.word	0x42470000
 800290c:	42470e80 	.word	0x42470e80
 8002910:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe faec 	bl	8000ef0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0fd      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b81      	ldr	r3, [pc, #516]	; (8002b2c <HAL_RCC_OscConfig+0x4d4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x2f0>
 800293a:	4b7d      	ldr	r3, [pc, #500]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a7c      	ldr	r2, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	e01c      	b.n	8002982 <HAL_RCC_OscConfig+0x32a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x312>
 8002950:	4b77      	ldr	r3, [pc, #476]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a76      	ldr	r2, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	4b74      	ldr	r3, [pc, #464]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a73      	ldr	r2, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e00b      	b.n	8002982 <HAL_RCC_OscConfig+0x32a>
 800296a:	4b71      	ldr	r3, [pc, #452]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a70      	ldr	r2, [pc, #448]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a6d      	ldr	r2, [pc, #436]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298a:	f7fe fab1 	bl	8000ef0 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe faad 	bl	8000ef0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0bc      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ee      	beq.n	8002992 <HAL_RCC_OscConfig+0x33a>
 80029b4:	e014      	b.n	80029e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fa9b 	bl	8000ef0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fa97 	bl	8000ef0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0a6      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	4b56      	ldr	r3, [pc, #344]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8092 	beq.w	8002b20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d05c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d141      	bne.n	8002a94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fa6b 	bl	8000ef0 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fa67 	bl	8000ef0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e078      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	019b      	lsls	r3, r3, #6
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	4933      	ldr	r1, [pc, #204]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fa40 	bl	8000ef0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fa3c 	bl	8000ef0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e04d      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x41c>
 8002a92:	e045      	b.n	8002b20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x4dc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fa29 	bl	8000ef0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fa25 	bl	8000ef0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e036      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x44a>
 8002ac0:	e02e      	b.n	8002b20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e029      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d11c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d115      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	42470060 	.word	0x42470060

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e067      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe f962 	bl	8000ef0 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe f95e 	bl	8000ef0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	5cd3      	ldrb	r3, [r2, r3]
 8002cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f8c2 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08012a08 	.word	0x08012a08
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d007      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x32>
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d008      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x38>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b4 	bne.w	8002e98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b5e      	ldr	r3, [pc, #376]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d32:	60bb      	str	r3, [r7, #8]
       break;
 8002d34:	e0b3      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d36:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d38:	60bb      	str	r3, [r7, #8]
      break;
 8002d3a:	e0b0      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04a      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	f04f 0400 	mov.w	r4, #0
 8002d5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	ea03 0501 	and.w	r5, r3, r1
 8002d68:	ea04 0602 	and.w	r6, r4, r2
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	4632      	mov	r2, r6
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0154      	lsls	r4, r2, #5
 8002d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d7e:	014b      	lsls	r3, r1, #5
 8002d80:	4619      	mov	r1, r3
 8002d82:	4622      	mov	r2, r4
 8002d84:	1b49      	subs	r1, r1, r5
 8002d86:	eb62 0206 	sbc.w	r2, r2, r6
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	f04f 0400 	mov.w	r4, #0
 8002d92:	0194      	lsls	r4, r2, #6
 8002d94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d98:	018b      	lsls	r3, r1, #6
 8002d9a:	1a5b      	subs	r3, r3, r1
 8002d9c:	eb64 0402 	sbc.w	r4, r4, r2
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	00e2      	lsls	r2, r4, #3
 8002daa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dae:	00d9      	lsls	r1, r3, #3
 8002db0:	460b      	mov	r3, r1
 8002db2:	4614      	mov	r4, r2
 8002db4:	195b      	adds	r3, r3, r5
 8002db6:	eb44 0406 	adc.w	r4, r4, r6
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	0262      	lsls	r2, r4, #9
 8002dc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dc8:	0259      	lsls	r1, r3, #9
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4614      	mov	r4, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 0400 	mov.w	r4, #0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	f7fd fa58 	bl	8000290 <__aeabi_uldivmod>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e049      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	f04f 0400 	mov.w	r4, #0
 8002df2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	ea03 0501 	and.w	r5, r3, r1
 8002dfe:	ea04 0602 	and.w	r6, r4, r2
 8002e02:	4629      	mov	r1, r5
 8002e04:	4632      	mov	r2, r6
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	0154      	lsls	r4, r2, #5
 8002e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e14:	014b      	lsls	r3, r1, #5
 8002e16:	4619      	mov	r1, r3
 8002e18:	4622      	mov	r2, r4
 8002e1a:	1b49      	subs	r1, r1, r5
 8002e1c:	eb62 0206 	sbc.w	r2, r2, r6
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	f04f 0400 	mov.w	r4, #0
 8002e28:	0194      	lsls	r4, r2, #6
 8002e2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	1a5b      	subs	r3, r3, r1
 8002e32:	eb64 0402 	sbc.w	r4, r4, r2
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	00e2      	lsls	r2, r4, #3
 8002e40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e44:	00d9      	lsls	r1, r3, #3
 8002e46:	460b      	mov	r3, r1
 8002e48:	4614      	mov	r4, r2
 8002e4a:	195b      	adds	r3, r3, r5
 8002e4c:	eb44 0406 	adc.w	r4, r4, r6
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	02a2      	lsls	r2, r4, #10
 8002e5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e5e:	0299      	lsls	r1, r3, #10
 8002e60:	460b      	mov	r3, r1
 8002e62:	4614      	mov	r4, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	4621      	mov	r1, r4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f04f 0400 	mov.w	r4, #0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4623      	mov	r3, r4
 8002e72:	f7fd fa0d 	bl	8000290 <__aeabi_uldivmod>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	60bb      	str	r3, [r7, #8]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e9a:	60bb      	str	r3, [r7, #8]
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	007a1200 	.word	0x007a1200

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08012a18 	.word	0x08012a18

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08012a18 	.word	0x08012a18

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01d      	b.n	8002f6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fde8 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fb14 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e01d      	b.n	8002fc0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f815 	bl	8002fc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fae9 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d841      	bhi.n	8003070 <HAL_TIM_OC_Start_IT+0x94>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_TIM_OC_Start_IT+0x18>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003071 	.word	0x08003071
 8002ffc:	08003071 	.word	0x08003071
 8003000:	08003071 	.word	0x08003071
 8003004:	0800303b 	.word	0x0800303b
 8003008:	08003071 	.word	0x08003071
 800300c:	08003071 	.word	0x08003071
 8003010:	08003071 	.word	0x08003071
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003071 	.word	0x08003071
 800301c:	08003071 	.word	0x08003071
 8003020:	08003071 	.word	0x08003071
 8003024:	0800305f 	.word	0x0800305f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0202 	orr.w	r2, r2, #2
 8003036:	60da      	str	r2, [r3, #12]
      break;
 8003038:	e01b      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0204 	orr.w	r2, r2, #4
 8003048:	60da      	str	r2, [r3, #12]
      break;
 800304a:	e012      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0208 	orr.w	r2, r2, #8
 800305a:	60da      	str	r2, [r3, #12]
      break;
 800305c:	e009      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0210 	orr.w	r2, r2, #16
 800306c:	60da      	str	r2, [r3, #12]
      break;
 800306e:	e000      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003070:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd6e 	bl	8003b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_TIM_OC_Start_IT+0x100>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_TIM_OC_Start_IT+0xb8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_TIM_OC_Start_IT+0x104>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_TIM_OC_Start_IT+0xbc>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_TIM_OC_Start_IT+0xbe>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b06      	cmp	r3, #6
 80030be:	d007      	beq.n	80030d0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0202 	mvn.w	r2, #2
 8003110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa0f 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa01 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa12 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9e5 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9d7 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9e8 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f9bb 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9ad 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f9be 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f991 	bl	800354a <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f983 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f994 	bl	800355e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0201 	mvn.w	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f95d 	bl	8003522 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fd10 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f959 	bl	8003572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fcda 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_TIM_OC_ConfigChannel+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e04e      	b.n	80033ac <HAL_TIM_OC_ConfigChannel+0xb8>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d839      	bhi.n	8003398 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	0800336f 	.word	0x0800336f
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	0800337d 	.word	0x0800337d
 8003350:	08003399 	.word	0x08003399
 8003354:	08003399 	.word	0x08003399
 8003358:	08003399 	.word	0x08003399
 800335c:	0800338b 	.word	0x0800338b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f9ae 	bl	80036c8 <TIM_OC1_SetConfig>
      break;
 800336c:	e015      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa17 	bl	80037a8 <TIM_OC2_SetConfig>
      break;
 800337a:	e00e      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fa86 	bl	8003894 <TIM_OC3_SetConfig>
      break;
 8003388:	e007      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 faf3 	bl	800397c <TIM_OC4_SetConfig>
      break;
 8003396:	e000      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003398:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_ConfigClockSource+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0a6      	b.n	800351a <HAL_TIM_ConfigClockSource+0x166>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d067      	beq.n	80034d4 <HAL_TIM_ConfigClockSource+0x120>
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d80b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x6c>
 8003408:	2b10      	cmp	r3, #16
 800340a:	d073      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0x140>
 800340c:	2b10      	cmp	r3, #16
 800340e:	d802      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x62>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d06f      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003414:	e078      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003416:	2b20      	cmp	r3, #32
 8003418:	d06c      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0x140>
 800341a:	2b30      	cmp	r3, #48	; 0x30
 800341c:	d06a      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800341e:	e073      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d00d      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x8c>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d804      	bhi.n	8003432 <HAL_TIM_ConfigClockSource+0x7e>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d033      	beq.n	8003494 <HAL_TIM_ConfigClockSource+0xe0>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d041      	beq.n	80034b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003430:	e06a      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003436:	d066      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x152>
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343c:	d017      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800343e:	e063      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f000 fb64 	bl	8003b1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003462:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e04c      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f000 fb4d 	bl	8003b1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003490:	609a      	str	r2, [r3, #8]
      break;
 8003492:	e039      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f000 fac1 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2150      	movs	r1, #80	; 0x50
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fb1a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80034b2:	e029      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f000 fae0 	bl	8003a86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2160      	movs	r1, #96	; 0x60
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fb0a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80034d2:	e019      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f000 faa1 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2140      	movs	r1, #64	; 0x40
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fafa 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80034f2:	e009      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 faf1 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003504:	e000      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <TIM_Base_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x114>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d027      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d023      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <TIM_Base_SetConfig+0x124>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d017      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <TIM_Base_SetConfig+0x12c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <TIM_Base_SetConfig+0x130>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a25      	ldr	r2, [pc, #148]	; (80036bc <TIM_Base_SetConfig+0x134>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <TIM_Base_SetConfig+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <TIM_Base_SetConfig+0x13c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xf8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <TIM_Base_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40001800 	.word	0x40001800
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40002000 	.word	0x40002000

080036c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 0302 	bic.w	r3, r3, #2
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC1_SetConfig+0x64>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10c      	bne.n	8003746 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0308 	bic.w	r3, r3, #8
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_OC1_SetConfig+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400

080037a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0320 	bic.w	r3, r3, #32
 80037f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC2_SetConfig+0x68>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0x94>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC3_SetConfig+0x66>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10d      	bne.n	8003916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_OC3_SetConfig+0x92>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_OC4_SetConfig+0xa4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC4_SetConfig+0x68>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_OC4_SetConfig+0xa8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d109      	bne.n	80039f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0210 	bic.w	r2, r3, #16
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2201      	movs	r2, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	401a      	ands	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e05a      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d01d      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03f      	b.n	8003d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ff9e 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f829 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003da6:	f023 030c 	bic.w	r3, r3, #12
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	f040 818b 	bne.w	80040ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4ac1      	ldr	r2, [pc, #772]	; (80040e0 <UART_SetConfig+0x37c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d005      	beq.n	8003dec <UART_SetConfig+0x88>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4abf      	ldr	r2, [pc, #764]	; (80040e4 <UART_SetConfig+0x380>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f040 80bd 	bne.w	8003f66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7ff f882 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003df0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	461d      	mov	r5, r3
 8003df6:	f04f 0600 	mov.w	r6, #0
 8003dfa:	46a8      	mov	r8, r5
 8003dfc:	46b1      	mov	r9, r6
 8003dfe:	eb18 0308 	adds.w	r3, r8, r8
 8003e02:	eb49 0409 	adc.w	r4, r9, r9
 8003e06:	4698      	mov	r8, r3
 8003e08:	46a1      	mov	r9, r4
 8003e0a:	eb18 0805 	adds.w	r8, r8, r5
 8003e0e:	eb49 0906 	adc.w	r9, r9, r6
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e26:	4688      	mov	r8, r1
 8003e28:	4691      	mov	r9, r2
 8003e2a:	eb18 0005 	adds.w	r0, r8, r5
 8003e2e:	eb49 0106 	adc.w	r1, r9, r6
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	461d      	mov	r5, r3
 8003e38:	f04f 0600 	mov.w	r6, #0
 8003e3c:	196b      	adds	r3, r5, r5
 8003e3e:	eb46 0406 	adc.w	r4, r6, r6
 8003e42:	461a      	mov	r2, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7fc fa23 	bl	8000290 <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4ba5      	ldr	r3, [pc, #660]	; (80040e8 <UART_SetConfig+0x384>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	461d      	mov	r5, r3
 8003e60:	f04f 0600 	mov.w	r6, #0
 8003e64:	46a9      	mov	r9, r5
 8003e66:	46b2      	mov	sl, r6
 8003e68:	eb19 0309 	adds.w	r3, r9, r9
 8003e6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e70:	4699      	mov	r9, r3
 8003e72:	46a2      	mov	sl, r4
 8003e74:	eb19 0905 	adds.w	r9, r9, r5
 8003e78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e90:	4689      	mov	r9, r1
 8003e92:	4692      	mov	sl, r2
 8003e94:	eb19 0005 	adds.w	r0, r9, r5
 8003e98:	eb4a 0106 	adc.w	r1, sl, r6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	f04f 0600 	mov.w	r6, #0
 8003ea6:	196b      	adds	r3, r5, r5
 8003ea8:	eb46 0406 	adc.w	r4, r6, r6
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	f7fc f9ee 	bl	8000290 <__aeabi_uldivmod>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b8b      	ldr	r3, [pc, #556]	; (80040e8 <UART_SetConfig+0x384>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a86      	ldr	r2, [pc, #536]	; (80040e8 <UART_SetConfig+0x384>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003edc:	4498      	add	r8, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	461d      	mov	r5, r3
 8003ee2:	f04f 0600 	mov.w	r6, #0
 8003ee6:	46a9      	mov	r9, r5
 8003ee8:	46b2      	mov	sl, r6
 8003eea:	eb19 0309 	adds.w	r3, r9, r9
 8003eee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	eb19 0905 	adds.w	r9, r9, r5
 8003efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f12:	4689      	mov	r9, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	eb19 0005 	adds.w	r0, r9, r5
 8003f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	461d      	mov	r5, r3
 8003f24:	f04f 0600 	mov.w	r6, #0
 8003f28:	196b      	adds	r3, r5, r5
 8003f2a:	eb46 0406 	adc.w	r4, r6, r6
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	f7fc f9ad 	bl	8000290 <__aeabi_uldivmod>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <UART_SetConfig+0x384>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a65      	ldr	r2, [pc, #404]	; (80040e8 <UART_SetConfig+0x384>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 0207 	and.w	r2, r3, #7
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4442      	add	r2, r8
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e26f      	b.n	8004446 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7fe ffb1 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003f6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	461d      	mov	r5, r3
 8003f70:	f04f 0600 	mov.w	r6, #0
 8003f74:	46a8      	mov	r8, r5
 8003f76:	46b1      	mov	r9, r6
 8003f78:	eb18 0308 	adds.w	r3, r8, r8
 8003f7c:	eb49 0409 	adc.w	r4, r9, r9
 8003f80:	4698      	mov	r8, r3
 8003f82:	46a1      	mov	r9, r4
 8003f84:	eb18 0805 	adds.w	r8, r8, r5
 8003f88:	eb49 0906 	adc.w	r9, r9, r6
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fa0:	4688      	mov	r8, r1
 8003fa2:	4691      	mov	r9, r2
 8003fa4:	eb18 0005 	adds.w	r0, r8, r5
 8003fa8:	eb49 0106 	adc.w	r1, r9, r6
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	f04f 0600 	mov.w	r6, #0
 8003fb6:	196b      	adds	r3, r5, r5
 8003fb8:	eb46 0406 	adc.w	r4, r6, r6
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	f7fc f966 	bl	8000290 <__aeabi_uldivmod>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <UART_SetConfig+0x384>)
 8003fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	461d      	mov	r5, r3
 8003fda:	f04f 0600 	mov.w	r6, #0
 8003fde:	46a9      	mov	r9, r5
 8003fe0:	46b2      	mov	sl, r6
 8003fe2:	eb19 0309 	adds.w	r3, r9, r9
 8003fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8003fea:	4699      	mov	r9, r3
 8003fec:	46a2      	mov	sl, r4
 8003fee:	eb19 0905 	adds.w	r9, r9, r5
 8003ff2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800400a:	4689      	mov	r9, r1
 800400c:	4692      	mov	sl, r2
 800400e:	eb19 0005 	adds.w	r0, r9, r5
 8004012:	eb4a 0106 	adc.w	r1, sl, r6
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	461d      	mov	r5, r3
 800401c:	f04f 0600 	mov.w	r6, #0
 8004020:	196b      	adds	r3, r5, r5
 8004022:	eb46 0406 	adc.w	r4, r6, r6
 8004026:	461a      	mov	r2, r3
 8004028:	4623      	mov	r3, r4
 800402a:	f7fc f931 	bl	8000290 <__aeabi_uldivmod>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	461a      	mov	r2, r3
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <UART_SetConfig+0x384>)
 8004036:	fba3 1302 	umull	r1, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2164      	movs	r1, #100	; 0x64
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	3332      	adds	r3, #50	; 0x32
 8004048:	4a27      	ldr	r2, [pc, #156]	; (80040e8 <UART_SetConfig+0x384>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004056:	4498      	add	r8, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	461d      	mov	r5, r3
 800405c:	f04f 0600 	mov.w	r6, #0
 8004060:	46a9      	mov	r9, r5
 8004062:	46b2      	mov	sl, r6
 8004064:	eb19 0309 	adds.w	r3, r9, r9
 8004068:	eb4a 040a 	adc.w	r4, sl, sl
 800406c:	4699      	mov	r9, r3
 800406e:	46a2      	mov	sl, r4
 8004070:	eb19 0905 	adds.w	r9, r9, r5
 8004074:	eb4a 0a06 	adc.w	sl, sl, r6
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800408c:	4689      	mov	r9, r1
 800408e:	4692      	mov	sl, r2
 8004090:	eb19 0005 	adds.w	r0, r9, r5
 8004094:	eb4a 0106 	adc.w	r1, sl, r6
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	461d      	mov	r5, r3
 800409e:	f04f 0600 	mov.w	r6, #0
 80040a2:	196b      	adds	r3, r5, r5
 80040a4:	eb46 0406 	adc.w	r4, r6, r6
 80040a8:	461a      	mov	r2, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	f7fc f8f0 	bl	8000290 <__aeabi_uldivmod>
 80040b0:	4603      	mov	r3, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <UART_SetConfig+0x384>)
 80040b8:	fba3 1302 	umull	r1, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2164      	movs	r1, #100	; 0x64
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	3332      	adds	r3, #50	; 0x32
 80040ca:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <UART_SetConfig+0x384>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f003 0207 	and.w	r2, r3, #7
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4442      	add	r2, r8
 80040dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80040de:	e1b2      	b.n	8004446 <UART_SetConfig+0x6e2>
 80040e0:	40011000 	.word	0x40011000
 80040e4:	40011400 	.word	0x40011400
 80040e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4ad7      	ldr	r2, [pc, #860]	; (8004450 <UART_SetConfig+0x6ec>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d005      	beq.n	8004102 <UART_SetConfig+0x39e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4ad6      	ldr	r2, [pc, #856]	; (8004454 <UART_SetConfig+0x6f0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	f040 80d1 	bne.w	80042a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004102:	f7fe fef7 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8004106:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	469a      	mov	sl, r3
 800410c:	f04f 0b00 	mov.w	fp, #0
 8004110:	46d0      	mov	r8, sl
 8004112:	46d9      	mov	r9, fp
 8004114:	eb18 0308 	adds.w	r3, r8, r8
 8004118:	eb49 0409 	adc.w	r4, r9, r9
 800411c:	4698      	mov	r8, r3
 800411e:	46a1      	mov	r9, r4
 8004120:	eb18 080a 	adds.w	r8, r8, sl
 8004124:	eb49 090b 	adc.w	r9, r9, fp
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004134:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004138:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800413c:	4688      	mov	r8, r1
 800413e:	4691      	mov	r9, r2
 8004140:	eb1a 0508 	adds.w	r5, sl, r8
 8004144:	eb4b 0609 	adc.w	r6, fp, r9
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4619      	mov	r1, r3
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	0094      	lsls	r4, r2, #2
 800415c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004160:	008b      	lsls	r3, r1, #2
 8004162:	461a      	mov	r2, r3
 8004164:	4623      	mov	r3, r4
 8004166:	4628      	mov	r0, r5
 8004168:	4631      	mov	r1, r6
 800416a:	f7fc f891 	bl	8000290 <__aeabi_uldivmod>
 800416e:	4603      	mov	r3, r0
 8004170:	460c      	mov	r4, r1
 8004172:	461a      	mov	r2, r3
 8004174:	4bb8      	ldr	r3, [pc, #736]	; (8004458 <UART_SetConfig+0x6f4>)
 8004176:	fba3 2302 	umull	r2, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	469b      	mov	fp, r3
 8004184:	f04f 0c00 	mov.w	ip, #0
 8004188:	46d9      	mov	r9, fp
 800418a:	46e2      	mov	sl, ip
 800418c:	eb19 0309 	adds.w	r3, r9, r9
 8004190:	eb4a 040a 	adc.w	r4, sl, sl
 8004194:	4699      	mov	r9, r3
 8004196:	46a2      	mov	sl, r4
 8004198:	eb19 090b 	adds.w	r9, r9, fp
 800419c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041b4:	4689      	mov	r9, r1
 80041b6:	4692      	mov	sl, r2
 80041b8:	eb1b 0509 	adds.w	r5, fp, r9
 80041bc:	eb4c 060a 	adc.w	r6, ip, sl
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f04f 0400 	mov.w	r4, #0
 80041d2:	0094      	lsls	r4, r2, #2
 80041d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	4623      	mov	r3, r4
 80041de:	4628      	mov	r0, r5
 80041e0:	4631      	mov	r1, r6
 80041e2:	f7fc f855 	bl	8000290 <__aeabi_uldivmod>
 80041e6:	4603      	mov	r3, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b9a      	ldr	r3, [pc, #616]	; (8004458 <UART_SetConfig+0x6f4>)
 80041ee:	fba3 1302 	umull	r1, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2164      	movs	r1, #100	; 0x64
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	3332      	adds	r3, #50	; 0x32
 8004200:	4a95      	ldr	r2, [pc, #596]	; (8004458 <UART_SetConfig+0x6f4>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420c:	4498      	add	r8, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	469b      	mov	fp, r3
 8004212:	f04f 0c00 	mov.w	ip, #0
 8004216:	46d9      	mov	r9, fp
 8004218:	46e2      	mov	sl, ip
 800421a:	eb19 0309 	adds.w	r3, r9, r9
 800421e:	eb4a 040a 	adc.w	r4, sl, sl
 8004222:	4699      	mov	r9, r3
 8004224:	46a2      	mov	sl, r4
 8004226:	eb19 090b 	adds.w	r9, r9, fp
 800422a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800423e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004242:	4689      	mov	r9, r1
 8004244:	4692      	mov	sl, r2
 8004246:	eb1b 0509 	adds.w	r5, fp, r9
 800424a:	eb4c 060a 	adc.w	r6, ip, sl
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f04f 0400 	mov.w	r4, #0
 8004260:	0094      	lsls	r4, r2, #2
 8004262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004266:	008b      	lsls	r3, r1, #2
 8004268:	461a      	mov	r2, r3
 800426a:	4623      	mov	r3, r4
 800426c:	4628      	mov	r0, r5
 800426e:	4631      	mov	r1, r6
 8004270:	f7fc f80e 	bl	8000290 <__aeabi_uldivmod>
 8004274:	4603      	mov	r3, r0
 8004276:	460c      	mov	r4, r1
 8004278:	461a      	mov	r2, r3
 800427a:	4b77      	ldr	r3, [pc, #476]	; (8004458 <UART_SetConfig+0x6f4>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	; 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	3332      	adds	r3, #50	; 0x32
 800428e:	4a72      	ldr	r2, [pc, #456]	; (8004458 <UART_SetConfig+0x6f4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4442      	add	r2, r8
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	e0d0      	b.n	8004446 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe fe12 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 80042a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	469a      	mov	sl, r3
 80042ae:	f04f 0b00 	mov.w	fp, #0
 80042b2:	46d0      	mov	r8, sl
 80042b4:	46d9      	mov	r9, fp
 80042b6:	eb18 0308 	adds.w	r3, r8, r8
 80042ba:	eb49 0409 	adc.w	r4, r9, r9
 80042be:	4698      	mov	r8, r3
 80042c0:	46a1      	mov	r9, r4
 80042c2:	eb18 080a 	adds.w	r8, r8, sl
 80042c6:	eb49 090b 	adc.w	r9, r9, fp
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042de:	4688      	mov	r8, r1
 80042e0:	4691      	mov	r9, r2
 80042e2:	eb1a 0508 	adds.w	r5, sl, r8
 80042e6:	eb4b 0609 	adc.w	r6, fp, r9
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4619      	mov	r1, r3
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	0094      	lsls	r4, r2, #2
 80042fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004302:	008b      	lsls	r3, r1, #2
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	4628      	mov	r0, r5
 800430a:	4631      	mov	r1, r6
 800430c:	f7fb ffc0 	bl	8000290 <__aeabi_uldivmod>
 8004310:	4603      	mov	r3, r0
 8004312:	460c      	mov	r4, r1
 8004314:	461a      	mov	r2, r3
 8004316:	4b50      	ldr	r3, [pc, #320]	; (8004458 <UART_SetConfig+0x6f4>)
 8004318:	fba3 2302 	umull	r2, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	469b      	mov	fp, r3
 8004326:	f04f 0c00 	mov.w	ip, #0
 800432a:	46d9      	mov	r9, fp
 800432c:	46e2      	mov	sl, ip
 800432e:	eb19 0309 	adds.w	r3, r9, r9
 8004332:	eb4a 040a 	adc.w	r4, sl, sl
 8004336:	4699      	mov	r9, r3
 8004338:	46a2      	mov	sl, r4
 800433a:	eb19 090b 	adds.w	r9, r9, fp
 800433e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800434e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004352:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004356:	4689      	mov	r9, r1
 8004358:	4692      	mov	sl, r2
 800435a:	eb1b 0509 	adds.w	r5, fp, r9
 800435e:	eb4c 060a 	adc.w	r6, ip, sl
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	0094      	lsls	r4, r2, #2
 8004376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	4628      	mov	r0, r5
 8004382:	4631      	mov	r1, r6
 8004384:	f7fb ff84 	bl	8000290 <__aeabi_uldivmod>
 8004388:	4603      	mov	r3, r0
 800438a:	460c      	mov	r4, r1
 800438c:	461a      	mov	r2, r3
 800438e:	4b32      	ldr	r3, [pc, #200]	; (8004458 <UART_SetConfig+0x6f4>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	3332      	adds	r3, #50	; 0x32
 80043a2:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <UART_SetConfig+0x6f4>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ae:	4498      	add	r8, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	469b      	mov	fp, r3
 80043b4:	f04f 0c00 	mov.w	ip, #0
 80043b8:	46d9      	mov	r9, fp
 80043ba:	46e2      	mov	sl, ip
 80043bc:	eb19 0309 	adds.w	r3, r9, r9
 80043c0:	eb4a 040a 	adc.w	r4, sl, sl
 80043c4:	4699      	mov	r9, r3
 80043c6:	46a2      	mov	sl, r4
 80043c8:	eb19 090b 	adds.w	r9, r9, fp
 80043cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e4:	4689      	mov	r9, r1
 80043e6:	4692      	mov	sl, r2
 80043e8:	eb1b 0509 	adds.w	r5, fp, r9
 80043ec:	eb4c 060a 	adc.w	r6, ip, sl
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4619      	mov	r1, r3
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	f04f 0400 	mov.w	r4, #0
 8004402:	0094      	lsls	r4, r2, #2
 8004404:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004408:	008b      	lsls	r3, r1, #2
 800440a:	461a      	mov	r2, r3
 800440c:	4623      	mov	r3, r4
 800440e:	4628      	mov	r0, r5
 8004410:	4631      	mov	r1, r6
 8004412:	f7fb ff3d 	bl	8000290 <__aeabi_uldivmod>
 8004416:	4603      	mov	r3, r0
 8004418:	460c      	mov	r4, r1
 800441a:	461a      	mov	r2, r3
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <UART_SetConfig+0x6f4>)
 800441e:	fba3 1302 	umull	r1, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2164      	movs	r1, #100	; 0x64
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <UART_SetConfig+0x6f4>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4442      	add	r2, r8
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	e7ff      	b.n	8004446 <UART_SetConfig+0x6e2>
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004450:	40011000 	.word	0x40011000
 8004454:	40011400 	.word	0x40011400
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800445c:	b084      	sub	sp, #16
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	f107 001c 	add.w	r0, r7, #28
 800446a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	d122      	bne.n	80044ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800449c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa4e 	bl	8004950 <USB_CoreReset>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e01a      	b.n	80044f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa42 	bl	8004950 <USB_CoreReset>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
 80044e2:	e005      	b.n	80044f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10b      	bne.n	800450e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f043 0206 	orr.w	r2, r3, #6
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451a:	b004      	add	sp, #16
 800451c:	4770      	bx	lr

0800451e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d106      	bne.n	800456c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e00b      	b.n	8004584 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e001      	b.n	8004584 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e003      	b.n	800458c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004584:	2032      	movs	r0, #50	; 0x32
 8004586:	f7fc fcbf 	bl	8000f08 <HAL_Delay>

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004594:	b084      	sub	sp, #16
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e009      	b.n	80045c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3340      	adds	r3, #64	; 0x40
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3301      	adds	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0e      	cmp	r3, #14
 80045cc:	d9f2      	bls.n	80045b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11c      	bne.n	800460e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
 800460c:	e00b      	b.n	8004626 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800462c:	461a      	mov	r2, r3
 800462e:	2300      	movs	r3, #0
 8004630:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	4619      	mov	r1, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004640:	461a      	mov	r2, r3
 8004642:	680b      	ldr	r3, [r1, #0]
 8004644:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004652:	2100      	movs	r1, #0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f949 	bl	80048ec <USB_SetDevSpeed>
 800465a:	e008      	b.n	800466e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800465c:	2101      	movs	r1, #1
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f944 	bl	80048ec <USB_SetDevSpeed>
 8004664:	e003      	b.n	800466e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004666:	2103      	movs	r1, #3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f93f 	bl	80048ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800466e:	2110      	movs	r1, #16
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8f3 	bl	800485c <USB_FlushTxFifo>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f911 	bl	80048a8 <USB_FlushRxFifo>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	461a      	mov	r2, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ae:	461a      	mov	r2, r3
 80046b0:	2300      	movs	r3, #0
 80046b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e043      	b.n	8004742 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d0:	d118      	bne.n	8004704 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e013      	b.n	8004716 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e008      	b.n	8004716 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	461a      	mov	r2, r3
 8004736:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800473a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3301      	adds	r3, #1
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	429a      	cmp	r2, r3
 8004748:	d3b7      	bcc.n	80046ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e043      	b.n	80047d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004766:	d118      	bne.n	800479a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	461a      	mov	r2, r3
 800477c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e013      	b.n	80047ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e008      	b.n	80047ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	461a      	mov	r2, r3
 80047cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3301      	adds	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3b7      	bcc.n	8004750 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004800:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f043 0210 	orr.w	r2, r3, #16
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <USB_DevInit+0x2c4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f043 0208 	orr.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004854:	b004      	add	sp, #16
 8004856:	4770      	bx	lr
 8004858:	803c3800 	.word	0x803c3800

0800485c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <USB_FlushTxFifo+0x48>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d0f0      	beq.n	8004876 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2210      	movs	r2, #16
 80048b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <USB_FlushRxFifo+0x40>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d0f0      	beq.n	80048ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	00030d40 	.word	0x00030d40

080048ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800493e:	2003      	movs	r0, #3
 8004940:	f7fc fae2 	bl	8000f08 <HAL_Delay>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <USB_CoreReset+0x64>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e01b      	b.n	80049a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	daf2      	bge.n	800495c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <USB_CoreReset+0x64>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d0f0      	beq.n	8004986 <USB_CoreReset+0x36>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <handle_udp_recv>:
 * Checks that a pbuf structure is valid, and assigns the remote IP and port to the debug UDP port.
 * This is not strictly necessary as it could be added each pack, but we are assuming a single connection.
 * Reply with the same message to the client and enable the debug.
 */
void handle_udp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p,  ip_addr_t *addr, u16_t port)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <handle_udp_recv+0x3a>
        /* send received packet back to sender */
        debug_if->remote_ip=(*addr);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <handle_udp_recv+0x44>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	605a      	str	r2, [r3, #4]
        debug_if->remote_port=port;
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <handle_udp_recv+0x44>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	8b3a      	ldrh	r2, [r7, #24]
 80049dc:	829a      	strh	r2, [r3, #20]
        udp_send(pcb,p);
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f007 fe1b 	bl	800c61c <udp_send>
        /* free the pbuf */
        pbuf_free(p);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 ff16 	bl	8006818 <pbuf_free>
        debugEnabled=0xFF;
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <handle_udp_recv+0x48>)
 80049ee:	22ff      	movs	r2, #255	; 0xff
 80049f0:	701a      	strb	r2, [r3, #0]
    }
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200006fc 	.word	0x200006fc
 8004a00:	200006f4 	.word	0x200006f4

08004a04 <transmit>:
 * Set the payload to the first byte in the message array.
 * send the message on the debug_if interface.
 * free the pbuf structure.
 */
void transmit()
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
	struct pbuf *debug_snd=pbuf_alloc(PBUF_TRANSPORT,10,PBUF_RAM);
 8004a0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004a0e:	210a      	movs	r1, #10
 8004a10:	2036      	movs	r0, #54	; 0x36
 8004a12:	f001 fc21 	bl	8006258 <pbuf_alloc>
 8004a16:	6078      	str	r0, [r7, #4]
	debug_snd->next=NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
	debug_snd->payload=(void*) &message[0];
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <transmit+0x3c>)
 8004a22:	605a      	str	r2, [r3, #4]
	udp_send(debug_if,debug_snd);
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <transmit+0x40>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f007 fdf6 	bl	800c61c <udp_send>
	pbuf_free(debug_snd);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 fef1 	bl	8006818 <pbuf_free>
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000000c 	.word	0x2000000c
 8004a44:	200006fc 	.word	0x200006fc

08004a48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004a4e:	f000 fc76 	bl	800533e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a52:	4b84      	ldr	r3, [pc, #528]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	061a      	lsls	r2, r3, #24
 8004a58:	4b82      	ldr	r3, [pc, #520]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	4b80      	ldr	r3, [pc, #512]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a62:	789b      	ldrb	r3, [r3, #2]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	4a7e      	ldr	r2, [pc, #504]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a6a:	78d2      	ldrb	r2, [r2, #3]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	061a      	lsls	r2, r3, #24
 8004a70:	4b7c      	ldr	r3, [pc, #496]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	0619      	lsls	r1, r3, #24
 8004a76:	4b7b      	ldr	r3, [pc, #492]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	4319      	orrs	r1, r3
 8004a7e:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a80:	789b      	ldrb	r3, [r3, #2]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	430b      	orrs	r3, r1
 8004a86:	4977      	ldr	r1, [pc, #476]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a88:	78c9      	ldrb	r1, [r1, #3]
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a92:	431a      	orrs	r2, r3
 8004a94:	4b73      	ldr	r3, [pc, #460]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	0619      	lsls	r1, r3, #24
 8004a9a:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	4319      	orrs	r1, r3
 8004aa2:	4b70      	ldr	r3, [pc, #448]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	496e      	ldr	r1, [pc, #440]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004aac:	78c9      	ldrb	r1, [r1, #3]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	0619      	lsls	r1, r3, #24
 8004abe:	4b69      	ldr	r3, [pc, #420]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	4319      	orrs	r1, r3
 8004ac6:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004ac8:	789b      	ldrb	r3, [r3, #2]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	430b      	orrs	r3, r1
 8004ace:	4965      	ldr	r1, [pc, #404]	; (8004c64 <MX_LWIP_Init+0x21c>)
 8004ad0:	78c9      	ldrb	r1, [r1, #3]
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	0e1b      	lsrs	r3, r3, #24
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	4a63      	ldr	r2, [pc, #396]	; (8004c68 <MX_LWIP_Init+0x220>)
 8004ada:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004adc:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	061a      	lsls	r2, r3, #24
 8004ae2:	4b62      	ldr	r3, [pc, #392]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	4b60      	ldr	r3, [pc, #384]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004aec:	789b      	ldrb	r3, [r3, #2]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	4313      	orrs	r3, r2
 8004af2:	4a5e      	ldr	r2, [pc, #376]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004af4:	78d2      	ldrb	r2, [r2, #3]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	061a      	lsls	r2, r3, #24
 8004afa:	4b5c      	ldr	r3, [pc, #368]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	0619      	lsls	r1, r3, #24
 8004b00:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	4319      	orrs	r1, r3
 8004b08:	4b58      	ldr	r3, [pc, #352]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b0a:	789b      	ldrb	r3, [r3, #2]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4956      	ldr	r1, [pc, #344]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b12:	78c9      	ldrb	r1, [r1, #3]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	0619      	lsls	r1, r3, #24
 8004b24:	4b51      	ldr	r3, [pc, #324]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	4319      	orrs	r1, r3
 8004b2c:	4b4f      	ldr	r3, [pc, #316]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b2e:	789b      	ldrb	r3, [r3, #2]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	494d      	ldr	r1, [pc, #308]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b36:	78c9      	ldrb	r1, [r1, #3]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b40:	431a      	orrs	r2, r3
 8004b42:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	0619      	lsls	r1, r3, #24
 8004b48:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	4319      	orrs	r1, r3
 8004b50:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b52:	789b      	ldrb	r3, [r3, #2]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	430b      	orrs	r3, r1
 8004b58:	4944      	ldr	r1, [pc, #272]	; (8004c6c <MX_LWIP_Init+0x224>)
 8004b5a:	78c9      	ldrb	r1, [r1, #3]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	0e1b      	lsrs	r3, r3, #24
 8004b60:	4313      	orrs	r3, r2
 8004b62:	4a43      	ldr	r2, [pc, #268]	; (8004c70 <MX_LWIP_Init+0x228>)
 8004b64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b66:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	061a      	lsls	r2, r3, #24
 8004b6c:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b7e:	78d2      	ldrb	r2, [r2, #3]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	061a      	lsls	r2, r3, #24
 8004b84:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	0619      	lsls	r1, r3, #24
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	4319      	orrs	r1, r3
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b94:	789b      	ldrb	r3, [r3, #2]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	4936      	ldr	r1, [pc, #216]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004b9c:	78c9      	ldrb	r1, [r1, #3]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	0619      	lsls	r1, r3, #24
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	4319      	orrs	r1, r3
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bb8:	789b      	ldrb	r3, [r3, #2]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	492d      	ldr	r1, [pc, #180]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bc0:	78c9      	ldrb	r1, [r1, #3]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	0619      	lsls	r1, r3, #24
 8004bd2:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	4319      	orrs	r1, r3
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004bdc:	789b      	ldrb	r3, [r3, #2]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	430b      	orrs	r3, r1
 8004be2:	4924      	ldr	r1, [pc, #144]	; (8004c74 <MX_LWIP_Init+0x22c>)
 8004be4:	78c9      	ldrb	r1, [r1, #3]
 8004be6:	430b      	orrs	r3, r1
 8004be8:	0e1b      	lsrs	r3, r3, #24
 8004bea:	4313      	orrs	r3, r2
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <MX_LWIP_Init+0x230>)
 8004bee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004bf0:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <MX_LWIP_Init+0x234>)
 8004bf2:	9302      	str	r3, [sp, #8]
 8004bf4:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <MX_LWIP_Init+0x238>)
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <MX_LWIP_Init+0x230>)
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <MX_LWIP_Init+0x228>)
 8004c00:	4919      	ldr	r1, [pc, #100]	; (8004c68 <MX_LWIP_Init+0x220>)
 8004c02:	4820      	ldr	r0, [pc, #128]	; (8004c84 <MX_LWIP_Init+0x23c>)
 8004c04:	f001 f840 	bl	8005c88 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c08:	481e      	ldr	r0, [pc, #120]	; (8004c84 <MX_LWIP_Init+0x23c>)
 8004c0a:	f001 f9ed 	bl	8005fe8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <MX_LWIP_Init+0x23c>)
 8004c10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <MX_LWIP_Init+0x1e0>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c20:	4818      	ldr	r0, [pc, #96]	; (8004c84 <MX_LWIP_Init+0x23c>)
 8004c22:	f001 f9f1 	bl	8006008 <netif_set_up>
 8004c26:	e002      	b.n	8004c2e <MX_LWIP_Init+0x1e6>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c28:	4816      	ldr	r0, [pc, #88]	; (8004c84 <MX_LWIP_Init+0x23c>)
 8004c2a:	f001 fa59 	bl	80060e0 <netif_set_down>
/* USER CODE BEGIN 3 */
/* -Set debug enabled to false and instantiate a new udp protocol block.
 * -Bind this to the static ip Address set from cubeMX at port 1000.
 * -set the callback function to the handle_udp_recv function
 */
  debugEnabled=0x00;
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <MX_LWIP_Init+0x240>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
  debug_if = udp_new();
 8004c34:	f007 ff84 	bl	800cb40 <udp_new>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <MX_LWIP_Init+0x244>)
 8004c3c:	601a      	str	r2, [r3, #0]

  udp_bind(debug_if,&ipaddr,1000);
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <MX_LWIP_Init+0x244>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c46:	4908      	ldr	r1, [pc, #32]	; (8004c68 <MX_LWIP_Init+0x220>)
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f007 fed1 	bl	800c9f0 <udp_bind>

  udp_recv(debug_if,&handle_udp_recv,NULL);
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <MX_LWIP_Init+0x244>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	490e      	ldr	r1, [pc, #56]	; (8004c90 <MX_LWIP_Init+0x248>)
 8004c56:	4618      	mov	r0, r3
 8004c58:	f007 ff52 	bl	800cb00 <udp_recv>

/* USER CODE END 3 */
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200006ec 	.word	0x200006ec
 8004c68:	200006e4 	.word	0x200006e4
 8004c6c:	200006e8 	.word	0x200006e8
 8004c70:	200006f0 	.word	0x200006f0
 8004c74:	200006b0 	.word	0x200006b0
 8004c78:	200006f8 	.word	0x200006f8
 8004c7c:	0800ef99 	.word	0x0800ef99
 8004c80:	08005279 	.word	0x08005279
 8004c84:	200006b4 	.word	0x200006b4
 8004c88:	200006f4 	.word	0x200006f4
 8004c8c:	200006fc 	.word	0x200006fc
 8004c90:	080049b9 	.word	0x080049b9

08004c94 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004c98:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <MX_LWIP_Process+0x20>)
 8004c9a:	f000 facd 	bl	8005238 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */


  if(debugEnabled)
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <MX_LWIP_Process+0x24>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_LWIP_Process+0x16>
  {
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,SET);
	  transmit();
 8004ca6:	f7ff fead 	bl	8004a04 <transmit>
  }

/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8004caa:	f007 fab3 	bl	800c214 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200006b4 	.word	0x200006b4
 8004cb8:	200006f4 	.word	0x200006f4

08004cbc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a55      	ldr	r2, [pc, #340]	; (8004e30 <HAL_ETH_MspInit+0x174>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f040 80a4 	bne.w	8004e28 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cee:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	4a44      	ldr	r2, [pc, #272]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d26:	6313      	str	r3, [r2, #48]	; 0x30
 8004d28:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	4a3d      	ldr	r2, [pc, #244]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6313      	str	r3, [r2, #48]	; 0x30
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	4a36      	ldr	r2, [pc, #216]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d96:	6313      	str	r3, [r2, #48]	; 0x30
 8004d98:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <HAL_ETH_MspInit+0x178>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004da4:	2332      	movs	r3, #50	; 0x32
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da8:	2302      	movs	r3, #2
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db0:	2303      	movs	r3, #3
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004db4:	230b      	movs	r3, #11
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	481e      	ldr	r0, [pc, #120]	; (8004e38 <HAL_ETH_MspInit+0x17c>)
 8004dc0:	f7fd f96a 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004dc4:	2386      	movs	r3, #134	; 0x86
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dd4:	230b      	movs	r3, #11
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4817      	ldr	r0, [pc, #92]	; (8004e3c <HAL_ETH_MspInit+0x180>)
 8004de0:	f7fd f95a 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df2:	2303      	movs	r3, #3
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004df6:	230b      	movs	r3, #11
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfe:	4619      	mov	r1, r3
 8004e00:	480f      	ldr	r0, [pc, #60]	; (8004e40 <HAL_ETH_MspInit+0x184>)
 8004e02:	f7fd f949 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e14:	2303      	movs	r3, #3
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e18:	230b      	movs	r3, #11
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	4619      	mov	r1, r3
 8004e22:	4808      	ldr	r0, [pc, #32]	; (8004e44 <HAL_ETH_MspInit+0x188>)
 8004e24:	f7fd f938 	bl	8002098 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e28:	bf00      	nop
 8004e2a:	3738      	adds	r7, #56	; 0x38
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40028000 	.word	0x40028000
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40020800 	.word	0x40020800
 8004e3c:	40020000 	.word	0x40020000
 8004e40:	40020400 	.word	0x40020400
 8004e44:	40021800 	.word	0x40021800

08004e48 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e54:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <low_level_init+0x134>)
 8004e56:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <low_level_init+0x138>)
 8004e58:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004e5a:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <low_level_init+0x134>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004e60:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <low_level_init+0x134>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004e66:	2300      	movs	r3, #0
 8004e68:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004e6e:	23e1      	movs	r3, #225	; 0xe1
 8004e70:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004e72:	2300      	movs	r3, #0
 8004e74:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004e76:	2300      	movs	r3, #0
 8004e78:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004e7e:	4a3f      	ldr	r2, [pc, #252]	; (8004f7c <low_level_init+0x134>)
 8004e80:	f107 0308 	add.w	r3, r7, #8
 8004e84:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <low_level_init+0x134>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <low_level_init+0x134>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004e92:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <low_level_init+0x134>)
 8004e94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e98:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e9a:	4838      	ldr	r0, [pc, #224]	; (8004f7c <low_level_init+0x134>)
 8004e9c:	f7fc f968 	bl	8001170 <HAL_ETH_Init>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <low_level_init+0x13c>)
 8004ec0:	4931      	ldr	r1, [pc, #196]	; (8004f88 <low_level_init+0x140>)
 8004ec2:	482e      	ldr	r0, [pc, #184]	; (8004f7c <low_level_init+0x134>)
 8004ec4:	f7fc faf2 	bl	80014ac <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004ec8:	2304      	movs	r3, #4
 8004eca:	4a30      	ldr	r2, [pc, #192]	; (8004f8c <low_level_init+0x144>)
 8004ecc:	4930      	ldr	r1, [pc, #192]	; (8004f90 <low_level_init+0x148>)
 8004ece:	482b      	ldr	r0, [pc, #172]	; (8004f7c <low_level_init+0x134>)
 8004ed0:	f7fc fb55 	bl	800157e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <low_level_init+0x134>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <low_level_init+0x134>)
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	785a      	ldrb	r2, [r3, #1]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <low_level_init+0x134>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	789a      	ldrb	r2, [r3, #2]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <low_level_init+0x134>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	78da      	ldrb	r2, [r3, #3]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <low_level_init+0x134>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	791a      	ldrb	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <low_level_init+0x134>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	795a      	ldrb	r2, [r3, #5]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f2a:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f32:	f043 030a 	orr.w	r3, r3, #10
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004f3e:	480f      	ldr	r0, [pc, #60]	; (8004f7c <low_level_init+0x134>)
 8004f40:	f7fc fdc6 	bl	8001ad0 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	461a      	mov	r2, r3
 8004f4a:	211d      	movs	r1, #29
 8004f4c:	480b      	ldr	r0, [pc, #44]	; (8004f7c <low_level_init+0x134>)
 8004f4e:	f7fc fcf1 	bl	8001934 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f043 030b 	orr.w	r3, r3, #11
 8004f58:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	211d      	movs	r1, #29
 8004f60:	4806      	ldr	r0, [pc, #24]	; (8004f7c <low_level_init+0x134>)
 8004f62:	f7fc fd4f 	bl	8001a04 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004f66:	f107 0310 	add.w	r3, r7, #16
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	211d      	movs	r1, #29
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <low_level_init+0x134>)
 8004f70:	f7fc fce0 	bl	8001934 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20001fd0 	.word	0x20001fd0
 8004f80:	40028000 	.word	0x40028000
 8004f84:	20002018 	.word	0x20002018
 8004f88:	20000700 	.word	0x20000700
 8004f8c:	20000780 	.word	0x20000780
 8004f90:	20001f50 	.word	0x20001f50

08004f94 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <low_level_output+0x138>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004fb6:	4b45      	ldr	r3, [pc, #276]	; (80050cc <low_level_output+0x138>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	e05a      	b.n	800507c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	da03      	bge.n	8004fd6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004fce:	23f8      	movs	r3, #248	; 0xf8
 8004fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004fd4:	e05c      	b.n	8005090 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	895b      	ldrh	r3, [r3, #10]
 8004fda:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004fe0:	e02f      	b.n	8005042 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	18d0      	adds	r0, r2, r3
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	18d1      	adds	r1, r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f00a f8d6 	bl	800f1aa <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da03      	bge.n	8005014 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800500c:	23f8      	movs	r3, #248	; 0xf8
 800500e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005012:	e03d      	b.n	8005090 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005024:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005030:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800503c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800504c:	4293      	cmp	r3, r2
 800504e:	d8c8      	bhi.n	8004fe2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	18d0      	adds	r0, r2, r3
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4619      	mov	r1, r3
 8005062:	f00a f8a2 	bl	800f1aa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1a1      	bne.n	8004fc6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	4811      	ldr	r0, [pc, #68]	; (80050cc <low_level_output+0x138>)
 8005086:	f7fc fae7 	bl	8001658 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <low_level_output+0x138>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	3314      	adds	r3, #20
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <low_level_output+0x138>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ac:	3314      	adds	r3, #20
 80050ae:	2220      	movs	r2, #32
 80050b0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <low_level_output+0x138>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ba:	3304      	adds	r3, #4
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80050c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3728      	adds	r7, #40	; 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20001fd0 	.word	0x20001fd0

080050d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80050f4:	484f      	ldr	r0, [pc, #316]	; (8005234 <low_level_input+0x164>)
 80050f6:	f7fc fb99 	bl	800182c <HAL_ETH_GetReceivedFrame>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <low_level_input+0x34>
  
    return NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	e092      	b.n	800522a <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <low_level_input+0x164>)
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800510a:	4b4a      	ldr	r3, [pc, #296]	; (8005234 <low_level_input+0x164>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800511c:	4619      	mov	r1, r3
 800511e:	2000      	movs	r0, #0
 8005120:	f001 f89a 	bl	8006258 <pbuf_alloc>
 8005124:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d04b      	beq.n	80051c4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800512c:	4b41      	ldr	r3, [pc, #260]	; (8005234 <low_level_input+0x164>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 800513a:	e040      	b.n	80051be <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	895b      	ldrh	r3, [r3, #10]
 8005140:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005146:	e021      	b.n	800518c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	18d0      	adds	r0, r2, r3
 8005150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	18d1      	adds	r1, r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800515c:	3304      	adds	r3, #4
 800515e:	461a      	mov	r2, r3
 8005160:	f00a f823 	bl	800f1aa <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800517a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005186:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005196:	4293      	cmp	r3, r2
 8005198:	d8d6      	bhi.n	8005148 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	18d0      	adds	r0, r2, r3
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f009 fffd 	bl	800f1aa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1bb      	bne.n	800513c <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <low_level_input+0x164>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e00b      	b.n	80051e8 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3301      	adds	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <low_level_input+0x164>)
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3ee      	bcc.n	80051d0 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <low_level_input+0x164>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <low_level_input+0x164>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	3314      	adds	r3, #20
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <low_level_input+0x164>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005214:	3314      	adds	r3, #20
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <low_level_input+0x164>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	3308      	adds	r3, #8
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800522a:	4618      	mov	r0, r3
 800522c:	3730      	adds	r7, #48	; 0x30
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20001fd0 	.word	0x20001fd0

08005238 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff45 	bl	80050d0 <low_level_input>
 8005246:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	4798      	blx	r3
 8005258:	4603      	mov	r3, r0
 800525a:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800525c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f001 fad7 	bl	8006818 <pbuf_free>
    p = NULL;    
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e000      	b.n	8005272 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005270:	bf00      	nop
  }
}
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <ethernetif_init+0x1c>
 8005286:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <ethernetif_init+0x48>)
 8005288:	f240 2211 	movw	r2, #529	; 0x211
 800528c:	490d      	ldr	r1, [pc, #52]	; (80052c4 <ethernetif_init+0x4c>)
 800528e:	480e      	ldr	r0, [pc, #56]	; (80052c8 <ethernetif_init+0x50>)
 8005290:	f009 ff9e 	bl	800f1d0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2273      	movs	r2, #115	; 0x73
 8005298:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2274      	movs	r2, #116	; 0x74
 80052a0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a09      	ldr	r2, [pc, #36]	; (80052cc <ethernetif_init+0x54>)
 80052a8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <ethernetif_init+0x58>)
 80052ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fdc9 	bl	8004e48 <low_level_init>

  return ERR_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08010028 	.word	0x08010028
 80052c4:	08010044 	.word	0x08010044
 80052c8:	08010054 	.word	0x08010054
 80052cc:	0800d469 	.word	0x0800d469
 80052d0:	08004f95 	.word	0x08004f95

080052d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052d8:	f7fb fe0a 	bl	8000ef0 <HAL_GetTick>
 80052dc:	4603      	mov	r3, r0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	b29b      	uxth	r3, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	061a      	lsls	r2, r3, #24
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	0e1b      	lsrs	r3, r3, #24
 8005330:	4313      	orrs	r3, r2
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005348:	f000 f8d4 	bl	80054f4 <mem_init>
  memp_init();
 800534c:	f000 fbda 	bl	8005b04 <memp_init>
  pbuf_init();
  netif_init();
 8005350:	f000 fc92 	bl	8005c78 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005354:	f006 ffa0 	bl	800c298 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005358:	f001 fcfc 	bl	8006d54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800535c:	f006 ff14 	bl	800c188 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <ptr_to_mem+0x20>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	4413      	add	r3, r2
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200000ac 	.word	0x200000ac

0800538c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <mem_to_ptr+0x20>)
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	b29b      	uxth	r3, r3
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	200000ac 	.word	0x200000ac

080053b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80053b8:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <plug_holes+0x120>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d206      	bcs.n	80053d0 <plug_holes+0x20>
 80053c2:	4b44      	ldr	r3, [pc, #272]	; (80054d4 <plug_holes+0x124>)
 80053c4:	f240 12df 	movw	r2, #479	; 0x1df
 80053c8:	4943      	ldr	r1, [pc, #268]	; (80054d8 <plug_holes+0x128>)
 80053ca:	4844      	ldr	r0, [pc, #272]	; (80054dc <plug_holes+0x12c>)
 80053cc:	f009 ff00 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80053d0:	4b43      	ldr	r3, [pc, #268]	; (80054e0 <plug_holes+0x130>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d306      	bcc.n	80053e8 <plug_holes+0x38>
 80053da:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <plug_holes+0x124>)
 80053dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80053e0:	4940      	ldr	r1, [pc, #256]	; (80054e4 <plug_holes+0x134>)
 80053e2:	483e      	ldr	r0, [pc, #248]	; (80054dc <plug_holes+0x12c>)
 80053e4:	f009 fef4 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	791b      	ldrb	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <plug_holes+0x4e>
 80053f0:	4b38      	ldr	r3, [pc, #224]	; (80054d4 <plug_holes+0x124>)
 80053f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80053f6:	493c      	ldr	r1, [pc, #240]	; (80054e8 <plug_holes+0x138>)
 80053f8:	4838      	ldr	r0, [pc, #224]	; (80054dc <plug_holes+0x12c>)
 80053fa:	f009 fee9 	bl	800f1d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005406:	d906      	bls.n	8005416 <plug_holes+0x66>
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <plug_holes+0x124>)
 800540a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800540e:	4937      	ldr	r1, [pc, #220]	; (80054ec <plug_holes+0x13c>)
 8005410:	4832      	ldr	r0, [pc, #200]	; (80054dc <plug_holes+0x12c>)
 8005412:	f009 fedd 	bl	800f1d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ffa4 	bl	8005368 <ptr_to_mem>
 8005420:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	429a      	cmp	r2, r3
 8005428:	d024      	beq.n	8005474 <plug_holes+0xc4>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d120      	bne.n	8005474 <plug_holes+0xc4>
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <plug_holes+0x130>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d01b      	beq.n	8005474 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800543c:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <plug_holes+0x140>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d102      	bne.n	800544c <plug_holes+0x9c>
      lfree = mem;
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <plug_holes+0x140>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	881a      	ldrh	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800545c:	d00a      	beq.n	8005474 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff80 	bl	8005368 <ptr_to_mem>
 8005468:	4604      	mov	r4, r0
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ff8e 	bl	800538c <mem_to_ptr>
 8005470:	4603      	mov	r3, r0
 8005472:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	885b      	ldrh	r3, [r3, #2]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff ff75 	bl	8005368 <ptr_to_mem>
 800547e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d01f      	beq.n	80054c8 <plug_holes+0x118>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	791b      	ldrb	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11b      	bne.n	80054c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <plug_holes+0x140>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d102      	bne.n	80054a0 <plug_holes+0xf0>
      lfree = pmem;
 800549a:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <plug_holes+0x140>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054b0:	d00a      	beq.n	80054c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff56 	bl	8005368 <ptr_to_mem>
 80054bc:	4604      	mov	r4, r0
 80054be:	68b8      	ldr	r0, [r7, #8]
 80054c0:	f7ff ff64 	bl	800538c <mem_to_ptr>
 80054c4:	4603      	mov	r3, r0
 80054c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	200000ac 	.word	0x200000ac
 80054d4:	0801007c 	.word	0x0801007c
 80054d8:	080100ac 	.word	0x080100ac
 80054dc:	080100c4 	.word	0x080100c4
 80054e0:	200000b0 	.word	0x200000b0
 80054e4:	080100ec 	.word	0x080100ec
 80054e8:	08010108 	.word	0x08010108
 80054ec:	08010124 	.word	0x08010124
 80054f0:	200000b4 	.word	0x200000b4

080054f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80054fa:	4b18      	ldr	r3, [pc, #96]	; (800555c <mem_init+0x68>)
 80054fc:	3303      	adds	r3, #3
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	461a      	mov	r2, r3
 8005504:	4b16      	ldr	r3, [pc, #88]	; (8005560 <mem_init+0x6c>)
 8005506:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <mem_init+0x6c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005514:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005522:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005526:	f7ff ff1f 	bl	8005368 <ptr_to_mem>
 800552a:	4602      	mov	r2, r0
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <mem_init+0x70>)
 800552e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <mem_init+0x70>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <mem_init+0x70>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005540:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <mem_init+0x70>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800554a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <mem_init+0x6c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a05      	ldr	r2, [pc, #20]	; (8005568 <mem_init+0x74>)
 8005552:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20003800 	.word	0x20003800
 8005560:	200000ac 	.word	0x200000ac
 8005564:	200000b0 	.word	0x200000b0
 8005568:	200000b4 	.word	0x200000b4

0800556c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff09 	bl	800538c <mem_to_ptr>
 800557a:	4603      	mov	r3, r0
 800557c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fef0 	bl	8005368 <ptr_to_mem>
 8005588:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	885b      	ldrh	r3, [r3, #2]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff feea 	bl	8005368 <ptr_to_mem>
 8005594:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800559e:	d818      	bhi.n	80055d2 <mem_link_valid+0x66>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	885b      	ldrh	r3, [r3, #2]
 80055a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055a8:	d813      	bhi.n	80055d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80055ae:	8afa      	ldrh	r2, [r7, #22]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d004      	beq.n	80055be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	8afa      	ldrh	r2, [r7, #22]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d109      	bne.n	80055d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <mem_link_valid+0x74>)
 80055c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d006      	beq.n	80055d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	885b      	ldrh	r3, [r3, #2]
 80055cc:	8afa      	ldrh	r2, [r7, #22]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d001      	beq.n	80055d6 <mem_link_valid+0x6a>
    return 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <mem_link_valid+0x6c>
  }
  return 1;
 80055d6:	2301      	movs	r3, #1
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200000b0 	.word	0x200000b0

080055e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04c      	beq.n	800568c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80055fc:	4b25      	ldr	r3, [pc, #148]	; (8005694 <mem_free+0xb0>)
 80055fe:	f240 2273 	movw	r2, #627	; 0x273
 8005602:	4925      	ldr	r1, [pc, #148]	; (8005698 <mem_free+0xb4>)
 8005604:	4825      	ldr	r0, [pc, #148]	; (800569c <mem_free+0xb8>)
 8005606:	f009 fde3 	bl	800f1d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800560a:	e040      	b.n	800568e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3b08      	subs	r3, #8
 8005610:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <mem_free+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d306      	bcc.n	800562a <mem_free+0x46>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f103 020c 	add.w	r2, r3, #12
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <mem_free+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d907      	bls.n	800563a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <mem_free+0xb0>)
 800562c:	f240 227f 	movw	r2, #639	; 0x27f
 8005630:	491d      	ldr	r1, [pc, #116]	; (80056a8 <mem_free+0xc4>)
 8005632:	481a      	ldr	r0, [pc, #104]	; (800569c <mem_free+0xb8>)
 8005634:	f009 fdcc 	bl	800f1d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005638:	e029      	b.n	800568e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	791b      	ldrb	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <mem_free+0xb0>)
 8005644:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005648:	4918      	ldr	r1, [pc, #96]	; (80056ac <mem_free+0xc8>)
 800564a:	4814      	ldr	r0, [pc, #80]	; (800569c <mem_free+0xb8>)
 800564c:	f009 fdc0 	bl	800f1d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005650:	e01d      	b.n	800568e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff ff8a 	bl	800556c <mem_link_valid>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <mem_free+0xb0>)
 8005660:	f240 2295 	movw	r2, #661	; 0x295
 8005664:	4912      	ldr	r1, [pc, #72]	; (80056b0 <mem_free+0xcc>)
 8005666:	480d      	ldr	r0, [pc, #52]	; (800569c <mem_free+0xb8>)
 8005668:	f009 fdb2 	bl	800f1d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800566c:	e00f      	b.n	800568e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <mem_free+0xd0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	429a      	cmp	r2, r3
 800567c:	d202      	bcs.n	8005684 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800567e:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <mem_free+0xd0>)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fe93 	bl	80053b0 <plug_holes>
 800568a:	e000      	b.n	800568e <mem_free+0xaa>
    return;
 800568c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	0801007c 	.word	0x0801007c
 8005698:	08010150 	.word	0x08010150
 800569c:	080100c4 	.word	0x080100c4
 80056a0:	200000ac 	.word	0x200000ac
 80056a4:	200000b0 	.word	0x200000b0
 80056a8:	08010174 	.word	0x08010174
 80056ac:	08010190 	.word	0x08010190
 80056b0:	080101b8 	.word	0x080101b8
 80056b4:	200000b4 	.word	0x200000b4

080056b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	3303      	adds	r3, #3
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	2b0b      	cmp	r3, #11
 80056d4:	d801      	bhi.n	80056da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80056d6:	230c      	movs	r3, #12
 80056d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80056da:	8bfb      	ldrh	r3, [r7, #30]
 80056dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056e0:	d803      	bhi.n	80056ea <mem_trim+0x32>
 80056e2:	8bfa      	ldrh	r2, [r7, #30]
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d201      	bcs.n	80056ee <mem_trim+0x36>
    return NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e0cc      	b.n	8005888 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80056ee:	4b68      	ldr	r3, [pc, #416]	; (8005890 <mem_trim+0x1d8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d304      	bcc.n	8005702 <mem_trim+0x4a>
 80056f8:	4b66      	ldr	r3, [pc, #408]	; (8005894 <mem_trim+0x1dc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d306      	bcc.n	8005710 <mem_trim+0x58>
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <mem_trim+0x1e0>)
 8005704:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005708:	4964      	ldr	r1, [pc, #400]	; (800589c <mem_trim+0x1e4>)
 800570a:	4865      	ldr	r0, [pc, #404]	; (80058a0 <mem_trim+0x1e8>)
 800570c:	f009 fd60 	bl	800f1d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005710:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <mem_trim+0x1d8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d304      	bcc.n	8005724 <mem_trim+0x6c>
 800571a:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <mem_trim+0x1dc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d301      	bcc.n	8005728 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	e0af      	b.n	8005888 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3b08      	subs	r3, #8
 800572c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800572e:	69b8      	ldr	r0, [r7, #24]
 8005730:	f7ff fe2c 	bl	800538c <mem_to_ptr>
 8005734:	4603      	mov	r3, r0
 8005736:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	8afb      	ldrh	r3, [r7, #22]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b08      	subs	r3, #8
 8005744:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005746:	8bfa      	ldrh	r2, [r7, #30]
 8005748:	8abb      	ldrh	r3, [r7, #20]
 800574a:	429a      	cmp	r2, r3
 800574c:	d906      	bls.n	800575c <mem_trim+0xa4>
 800574e:	4b52      	ldr	r3, [pc, #328]	; (8005898 <mem_trim+0x1e0>)
 8005750:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005754:	4953      	ldr	r1, [pc, #332]	; (80058a4 <mem_trim+0x1ec>)
 8005756:	4852      	ldr	r0, [pc, #328]	; (80058a0 <mem_trim+0x1e8>)
 8005758:	f009 fd3a 	bl	800f1d0 <iprintf>
  if (newsize > size) {
 800575c:	8bfa      	ldrh	r2, [r7, #30]
 800575e:	8abb      	ldrh	r3, [r7, #20]
 8005760:	429a      	cmp	r2, r3
 8005762:	d901      	bls.n	8005768 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	e08f      	b.n	8005888 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005768:	8bfa      	ldrh	r2, [r7, #30]
 800576a:	8abb      	ldrh	r3, [r7, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	d101      	bne.n	8005774 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	e089      	b.n	8005888 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fdf5 	bl	8005368 <ptr_to_mem>
 800577e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d13f      	bne.n	8005808 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005790:	d106      	bne.n	80057a0 <mem_trim+0xe8>
 8005792:	4b41      	ldr	r3, [pc, #260]	; (8005898 <mem_trim+0x1e0>)
 8005794:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005798:	4943      	ldr	r1, [pc, #268]	; (80058a8 <mem_trim+0x1f0>)
 800579a:	4841      	ldr	r0, [pc, #260]	; (80058a0 <mem_trim+0x1e8>)
 800579c:	f009 fd18 	bl	800f1d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80057a6:	8afa      	ldrh	r2, [r7, #22]
 80057a8:	8bfb      	ldrh	r3, [r7, #30]
 80057aa:	4413      	add	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3308      	adds	r3, #8
 80057b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <mem_trim+0x1f4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d106      	bne.n	80057ca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80057bc:	89fb      	ldrh	r3, [r7, #14]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fdd2 	bl	8005368 <ptr_to_mem>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <mem_trim+0x1f4>)
 80057c8:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80057ca:	89fb      	ldrh	r3, [r7, #14]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fdcb 	bl	8005368 <ptr_to_mem>
 80057d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2200      	movs	r2, #0
 80057d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	89ba      	ldrh	r2, [r7, #12]
 80057de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	8afa      	ldrh	r2, [r7, #22]
 80057e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	89fa      	ldrh	r2, [r7, #14]
 80057ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057f4:	d047      	beq.n	8005886 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fdb4 	bl	8005368 <ptr_to_mem>
 8005800:	4602      	mov	r2, r0
 8005802:	89fb      	ldrh	r3, [r7, #14]
 8005804:	8053      	strh	r3, [r2, #2]
 8005806:	e03e      	b.n	8005886 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005808:	8bfb      	ldrh	r3, [r7, #30]
 800580a:	f103 0214 	add.w	r2, r3, #20
 800580e:	8abb      	ldrh	r3, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d838      	bhi.n	8005886 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005814:	8afa      	ldrh	r2, [r7, #22]
 8005816:	8bfb      	ldrh	r3, [r7, #30]
 8005818:	4413      	add	r3, r2
 800581a:	b29b      	uxth	r3, r3
 800581c:	3308      	adds	r3, #8
 800581e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005828:	d106      	bne.n	8005838 <mem_trim+0x180>
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <mem_trim+0x1e0>)
 800582c:	f240 3216 	movw	r2, #790	; 0x316
 8005830:	491d      	ldr	r1, [pc, #116]	; (80058a8 <mem_trim+0x1f0>)
 8005832:	481b      	ldr	r0, [pc, #108]	; (80058a0 <mem_trim+0x1e8>)
 8005834:	f009 fccc 	bl	800f1d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005838:	89fb      	ldrh	r3, [r7, #14]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fd94 	bl	8005368 <ptr_to_mem>
 8005840:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <mem_trim+0x1f4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d202      	bcs.n	8005852 <mem_trim+0x19a>
      lfree = mem2;
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <mem_trim+0x1f4>)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2200      	movs	r2, #0
 8005856:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	881a      	ldrh	r2, [r3, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	8afa      	ldrh	r2, [r7, #22]
 8005864:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	89fa      	ldrh	r2, [r7, #14]
 800586a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005874:	d007      	beq.n	8005886 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fd74 	bl	8005368 <ptr_to_mem>
 8005880:	4602      	mov	r2, r0
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005886:	687b      	ldr	r3, [r7, #4]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	200000ac 	.word	0x200000ac
 8005894:	200000b0 	.word	0x200000b0
 8005898:	0801007c 	.word	0x0801007c
 800589c:	080101ec 	.word	0x080101ec
 80058a0:	080100c4 	.word	0x080100c4
 80058a4:	08010204 	.word	0x08010204
 80058a8:	08010224 	.word	0x08010224
 80058ac:	200000b4 	.word	0x200000b4

080058b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <mem_malloc+0x14>
    return NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e0d9      	b.n	8005a78 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	3303      	adds	r3, #3
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80058d0:	8bbb      	ldrh	r3, [r7, #28]
 80058d2:	2b0b      	cmp	r3, #11
 80058d4:	d801      	bhi.n	80058da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80058d6:	230c      	movs	r3, #12
 80058d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80058da:	8bbb      	ldrh	r3, [r7, #28]
 80058dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058e0:	d803      	bhi.n	80058ea <mem_malloc+0x3a>
 80058e2:	8bba      	ldrh	r2, [r7, #28]
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d201      	bcs.n	80058ee <mem_malloc+0x3e>
    return NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e0c4      	b.n	8005a78 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058ee:	4b64      	ldr	r3, [pc, #400]	; (8005a80 <mem_malloc+0x1d0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fd4a 	bl	800538c <mem_to_ptr>
 80058f8:	4603      	mov	r3, r0
 80058fa:	83fb      	strh	r3, [r7, #30]
 80058fc:	e0b4      	b.n	8005a68 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80058fe:	8bfb      	ldrh	r3, [r7, #30]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fd31 	bl	8005368 <ptr_to_mem>
 8005906:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	791b      	ldrb	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80a4 	bne.w	8005a5a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	8bfb      	ldrh	r3, [r7, #30]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f1a3 0208 	sub.w	r2, r3, #8
 8005920:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005922:	429a      	cmp	r2, r3
 8005924:	f0c0 8099 	bcc.w	8005a5a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f1a3 0208 	sub.w	r2, r3, #8
 8005936:	8bbb      	ldrh	r3, [r7, #28]
 8005938:	3314      	adds	r3, #20
 800593a:	429a      	cmp	r2, r3
 800593c:	d333      	bcc.n	80059a6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800593e:	8bfa      	ldrh	r2, [r7, #30]
 8005940:	8bbb      	ldrh	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	3308      	adds	r3, #8
 8005948:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800594a:	8a7b      	ldrh	r3, [r7, #18]
 800594c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005950:	d106      	bne.n	8005960 <mem_malloc+0xb0>
 8005952:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <mem_malloc+0x1d4>)
 8005954:	f240 3287 	movw	r2, #903	; 0x387
 8005958:	494b      	ldr	r1, [pc, #300]	; (8005a88 <mem_malloc+0x1d8>)
 800595a:	484c      	ldr	r0, [pc, #304]	; (8005a8c <mem_malloc+0x1dc>)
 800595c:	f009 fc38 	bl	800f1d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005960:	8a7b      	ldrh	r3, [r7, #18]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fd00 	bl	8005368 <ptr_to_mem>
 8005968:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8bfa      	ldrh	r2, [r7, #30]
 800597c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	8a7a      	ldrh	r2, [r7, #18]
 8005982:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2201      	movs	r2, #1
 8005988:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005992:	d00b      	beq.n	80059ac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fce5 	bl	8005368 <ptr_to_mem>
 800599e:	4602      	mov	r2, r0
 80059a0:	8a7b      	ldrh	r3, [r7, #18]
 80059a2:	8053      	strh	r3, [r2, #2]
 80059a4:	e002      	b.n	80059ac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2201      	movs	r2, #1
 80059aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <mem_malloc+0x1d0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d127      	bne.n	8005a06 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80059b6:	4b32      	ldr	r3, [pc, #200]	; (8005a80 <mem_malloc+0x1d0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80059bc:	e005      	b.n	80059ca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff fcd0 	bl	8005368 <ptr_to_mem>
 80059c8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <mem_malloc+0x12c>
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <mem_malloc+0x1e0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1f0      	bne.n	80059be <mem_malloc+0x10e>
          }
          lfree = cur;
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <mem_malloc+0x1d0>)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059e2:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <mem_malloc+0x1d0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <mem_malloc+0x1e0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d00b      	beq.n	8005a06 <mem_malloc+0x156>
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <mem_malloc+0x1d0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <mem_malloc+0x156>
 80059f8:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <mem_malloc+0x1d4>)
 80059fa:	f240 32b5 	movw	r2, #949	; 0x3b5
 80059fe:	4925      	ldr	r1, [pc, #148]	; (8005a94 <mem_malloc+0x1e4>)
 8005a00:	4822      	ldr	r0, [pc, #136]	; (8005a8c <mem_malloc+0x1dc>)
 8005a02:	f009 fbe5 	bl	800f1d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005a06:	8bba      	ldrh	r2, [r7, #28]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	4a20      	ldr	r2, [pc, #128]	; (8005a90 <mem_malloc+0x1e0>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d906      	bls.n	8005a24 <mem_malloc+0x174>
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <mem_malloc+0x1d4>)
 8005a18:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005a1c:	491e      	ldr	r1, [pc, #120]	; (8005a98 <mem_malloc+0x1e8>)
 8005a1e:	481b      	ldr	r0, [pc, #108]	; (8005a8c <mem_malloc+0x1dc>)
 8005a20:	f009 fbd6 	bl	800f1d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <mem_malloc+0x18c>
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <mem_malloc+0x1d4>)
 8005a30:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005a34:	4919      	ldr	r1, [pc, #100]	; (8005a9c <mem_malloc+0x1ec>)
 8005a36:	4815      	ldr	r0, [pc, #84]	; (8005a8c <mem_malloc+0x1dc>)
 8005a38:	f009 fbca 	bl	800f1d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <mem_malloc+0x1a4>
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <mem_malloc+0x1d4>)
 8005a48:	f240 32be 	movw	r2, #958	; 0x3be
 8005a4c:	4914      	ldr	r1, [pc, #80]	; (8005aa0 <mem_malloc+0x1f0>)
 8005a4e:	480f      	ldr	r0, [pc, #60]	; (8005a8c <mem_malloc+0x1dc>)
 8005a50:	f009 fbbe 	bl	800f1d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3308      	adds	r3, #8
 8005a58:	e00e      	b.n	8005a78 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005a5a:	8bfb      	ldrh	r3, [r7, #30]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fc83 	bl	8005368 <ptr_to_mem>
 8005a62:	4603      	mov	r3, r0
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a68:	8bfa      	ldrh	r2, [r7, #30]
 8005a6a:	8bbb      	ldrh	r3, [r7, #28]
 8005a6c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005a70:	429a      	cmp	r2, r3
 8005a72:	f4ff af44 	bcc.w	80058fe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200000b4 	.word	0x200000b4
 8005a84:	0801007c 	.word	0x0801007c
 8005a88:	08010224 	.word	0x08010224
 8005a8c:	080100c4 	.word	0x080100c4
 8005a90:	200000b0 	.word	0x200000b0
 8005a94:	08010238 	.word	0x08010238
 8005a98:	08010254 	.word	0x08010254
 8005a9c:	08010284 	.word	0x08010284
 8005aa0:	080102b4 	.word	0x080102b4

08005aa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	3303      	adds	r3, #3
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e011      	b.n	8005aea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	885b      	ldrh	r3, [r3, #2]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	dbe7      	blt.n	8005ac6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	80fb      	strh	r3, [r7, #6]
 8005b0e:	e009      	b.n	8005b24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <memp_init+0x30>)
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ffc3 	bl	8005aa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	3301      	adds	r3, #1
 8005b22:	80fb      	strh	r3, [r7, #6]
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d9f2      	bls.n	8005b10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	08012a8c 	.word	0x08012a8c

08005b38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <do_memp_malloc_pool+0x38>
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <do_memp_malloc_pool+0x48>)
 8005b64:	f240 1219 	movw	r2, #281	; 0x119
 8005b68:	4906      	ldr	r1, [pc, #24]	; (8005b84 <do_memp_malloc_pool+0x4c>)
 8005b6a:	4807      	ldr	r0, [pc, #28]	; (8005b88 <do_memp_malloc_pool+0x50>)
 8005b6c:	f009 fb30 	bl	800f1d0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e000      	b.n	8005b76 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	080102d8 	.word	0x080102d8
 8005b84:	08010308 	.word	0x08010308
 8005b88:	0801032c 	.word	0x0801032c

08005b8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d908      	bls.n	8005bae <memp_malloc+0x22>
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <memp_malloc+0x3c>)
 8005b9e:	f240 1257 	movw	r2, #343	; 0x157
 8005ba2:	490a      	ldr	r1, [pc, #40]	; (8005bcc <memp_malloc+0x40>)
 8005ba4:	480a      	ldr	r0, [pc, #40]	; (8005bd0 <memp_malloc+0x44>)
 8005ba6:	f009 fb13 	bl	800f1d0 <iprintf>
 8005baa:	2300      	movs	r3, #0
 8005bac:	e008      	b.n	8005bc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <memp_malloc+0x48>)
 8005bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff ffbe 	bl	8005b38 <do_memp_malloc_pool>
 8005bbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	080102d8 	.word	0x080102d8
 8005bcc:	08010368 	.word	0x08010368
 8005bd0:	0801032c 	.word	0x0801032c
 8005bd4:	08012a8c 	.word	0x08012a8c

08005bd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <do_memp_free_pool+0x22>
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <do_memp_free_pool+0x40>)
 8005bee:	f240 126d 	movw	r2, #365	; 0x16d
 8005bf2:	490a      	ldr	r1, [pc, #40]	; (8005c1c <do_memp_free_pool+0x44>)
 8005bf4:	480a      	ldr	r0, [pc, #40]	; (8005c20 <do_memp_free_pool+0x48>)
 8005bf6:	f009 faeb 	bl	800f1d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	080102d8 	.word	0x080102d8
 8005c1c:	08010388 	.word	0x08010388
 8005c20:	0801032c 	.word	0x0801032c

08005c24 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d907      	bls.n	8005c46 <memp_free+0x22>
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <memp_free+0x44>)
 8005c38:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005c3c:	490b      	ldr	r1, [pc, #44]	; (8005c6c <memp_free+0x48>)
 8005c3e:	480c      	ldr	r0, [pc, #48]	; (8005c70 <memp_free+0x4c>)
 8005c40:	f009 fac6 	bl	800f1d0 <iprintf>
 8005c44:	e00c      	b.n	8005c60 <memp_free+0x3c>

  if (mem == NULL) {
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <memp_free+0x50>)
 8005c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ffbe 	bl	8005bd8 <do_memp_free_pool>
 8005c5c:	e000      	b.n	8005c60 <memp_free+0x3c>
    return;
 8005c5e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	080102d8 	.word	0x080102d8
 8005c6c:	080103a8 	.word	0x080103a8
 8005c70:	0801032c 	.word	0x0801032c
 8005c74:	08012a8c 	.word	0x08012a8c

08005c78 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c7c:	bf00      	nop
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <netif_add+0x26>
 8005c9c:	4b56      	ldr	r3, [pc, #344]	; (8005df8 <netif_add+0x170>)
 8005c9e:	f240 1227 	movw	r2, #295	; 0x127
 8005ca2:	4956      	ldr	r1, [pc, #344]	; (8005dfc <netif_add+0x174>)
 8005ca4:	4856      	ldr	r0, [pc, #344]	; (8005e00 <netif_add+0x178>)
 8005ca6:	f009 fa93 	bl	800f1d0 <iprintf>
 8005caa:	2300      	movs	r3, #0
 8005cac:	e09f      	b.n	8005dee <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d108      	bne.n	8005cc6 <netif_add+0x3e>
 8005cb4:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <netif_add+0x170>)
 8005cb6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005cba:	4952      	ldr	r1, [pc, #328]	; (8005e04 <netif_add+0x17c>)
 8005cbc:	4850      	ldr	r0, [pc, #320]	; (8005e00 <netif_add+0x178>)
 8005cbe:	f009 fa87 	bl	800f1d0 <iprintf>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e093      	b.n	8005dee <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	; (8005e08 <netif_add+0x180>)
 8005cce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005cd6:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <netif_add+0x180>)
 8005cd8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005ce0:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <netif_add+0x180>)
 8005ce2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <netif_add+0x184>)
 8005cfa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <netif_add+0x188>)
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f914 	bl	8005f54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <netif_add+0xb4>
    return NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e058      	b.n	8005dee <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d42:	2bff      	cmp	r3, #255	; 0xff
 8005d44:	d103      	bne.n	8005d4e <netif_add+0xc6>
        netif->num = 0;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <netif_add+0x18c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e02b      	b.n	8005db2 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d106      	bne.n	8005d70 <netif_add+0xe8>
 8005d62:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <netif_add+0x170>)
 8005d64:	f240 128b 	movw	r2, #395	; 0x18b
 8005d68:	492b      	ldr	r1, [pc, #172]	; (8005e18 <netif_add+0x190>)
 8005d6a:	4825      	ldr	r0, [pc, #148]	; (8005e00 <netif_add+0x178>)
 8005d6c:	f009 fa30 	bl	800f1d0 <iprintf>
        num_netifs++;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3301      	adds	r3, #1
 8005d74:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2bff      	cmp	r3, #255	; 0xff
 8005d7a:	dd06      	ble.n	8005d8a <netif_add+0x102>
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <netif_add+0x170>)
 8005d7e:	f240 128d 	movw	r2, #397	; 0x18d
 8005d82:	4926      	ldr	r1, [pc, #152]	; (8005e1c <netif_add+0x194>)
 8005d84:	481e      	ldr	r0, [pc, #120]	; (8005e00 <netif_add+0x178>)
 8005d86:	f009 fa23 	bl	800f1d0 <iprintf>
        if (netif2->num == netif->num) {
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d108      	bne.n	8005dac <netif_add+0x124>
          netif->num++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005da0:	3301      	adds	r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8005daa:	e005      	b.n	8005db8 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1d0      	bne.n	8005d5a <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1be      	bne.n	8005d3c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dc4:	2bfe      	cmp	r3, #254	; 0xfe
 8005dc6:	d103      	bne.n	8005dd0 <netif_add+0x148>
    netif_num = 0;
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <netif_add+0x188>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e006      	b.n	8005dde <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <netif_add+0x188>)
 8005ddc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <netif_add+0x18c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005de6:	4a0b      	ldr	r2, [pc, #44]	; (8005e14 <netif_add+0x18c>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	080103c4 	.word	0x080103c4
 8005dfc:	08010458 	.word	0x08010458
 8005e00:	08010414 	.word	0x08010414
 8005e04:	08010474 	.word	0x08010474
 8005e08:	08012af0 	.word	0x08012af0
 8005e0c:	08006145 	.word	0x08006145
 8005e10:	200000dc 	.word	0x200000dc
 8005e14:	20006d1c 	.word	0x20006d1c
 8005e18:	08010498 	.word	0x08010498
 8005e1c:	080104ac 	.word	0x080104ac

08005e20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 facd 	bl	80083cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f006 fe9b 	bl	800cb70 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <netif_do_set_ipaddr+0x20>
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <netif_do_set_ipaddr+0x88>)
 8005e58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005e5c:	491c      	ldr	r1, [pc, #112]	; (8005ed0 <netif_do_set_ipaddr+0x8c>)
 8005e5e:	481d      	ldr	r0, [pc, #116]	; (8005ed4 <netif_do_set_ipaddr+0x90>)
 8005e60:	f009 f9b6 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <netif_do_set_ipaddr+0x34>
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <netif_do_set_ipaddr+0x88>)
 8005e6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005e70:	4917      	ldr	r1, [pc, #92]	; (8005ed0 <netif_do_set_ipaddr+0x8c>)
 8005e72:	4818      	ldr	r0, [pc, #96]	; (8005ed4 <netif_do_set_ipaddr+0x90>)
 8005e74:	f009 f9ac 	bl	800f1d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d01c      	beq.n	8005ec0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ffbf 	bl	8005e20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <netif_do_set_ipaddr+0x6a>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	e000      	b.n	8005eb0 <netif_do_set_ipaddr+0x6c>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f8d2 	bl	8006060 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	080103c4 	.word	0x080103c4
 8005ed0:	080104dc 	.word	0x080104dc
 8005ed4:	08010414 	.word	0x08010414

08005ed8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3308      	adds	r3, #8
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d00a      	beq.n	8005f08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <netif_do_set_netmask+0x26>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	e000      	b.n	8005f00 <netif_do_set_netmask+0x28>
 8005efe:	2300      	movs	r3, #0
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d00a      	beq.n	8005f46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <netif_do_set_gw+0x26>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	e000      	b.n	8005f3e <netif_do_set_gw+0x28>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005f70:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <netif_set_addr+0x90>)
 8005f72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <netif_set_addr+0x90>)
 8005f7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <netif_set_addr+0x90>)
 8005f86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <netif_set_addr+0x42>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <netif_set_addr+0x46>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <netif_set_addr+0x48>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fa4:	f107 0310 	add.w	r3, r7, #16
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff49 	bl	8005e44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff ff8e 	bl	8005ed8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff ffa8 	bl	8005f16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fcc:	f107 0310 	add.w	r3, r7, #16
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff ff35 	bl	8005e44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005fda:	bf00      	nop
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08012af0 	.word	0x08012af0

08005fe8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <netif_set_default+0x1c>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20006d20 	.word	0x20006d20

08006008 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <netif_set_up+0x1e>
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <netif_set_up+0x4c>)
 8006018:	f44f 7254 	mov.w	r2, #848	; 0x350
 800601c:	490e      	ldr	r1, [pc, #56]	; (8006058 <netif_set_up+0x50>)
 800601e:	480f      	ldr	r0, [pc, #60]	; (800605c <netif_set_up+0x54>)
 8006020:	f009 f8d6 	bl	800f1d0 <iprintf>
 8006024:	e013      	b.n	800604e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10c      	bne.n	800604e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006046:	2103      	movs	r1, #3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f809 	bl	8006060 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	080103c4 	.word	0x080103c4
 8006058:	0801054c 	.word	0x0801054c
 800605c:	08010414 	.word	0x08010414

08006060 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <netif_issue_reports+0x20>
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <netif_issue_reports+0x74>)
 8006074:	f240 326d 	movw	r2, #877	; 0x36d
 8006078:	4917      	ldr	r1, [pc, #92]	; (80060d8 <netif_issue_reports+0x78>)
 800607a:	4818      	ldr	r0, [pc, #96]	; (80060dc <netif_issue_reports+0x7c>)
 800607c:	f009 f8a8 	bl	800f1d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01e      	beq.n	80060cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006094:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	d017      	beq.n	80060cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d013      	beq.n	80060ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3304      	adds	r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f007 fcbd 	bl	800da44 <etharp_request>
 80060ca:	e000      	b.n	80060ce <netif_issue_reports+0x6e>
    return;
 80060cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	080103c4 	.word	0x080103c4
 80060d8:	08010568 	.word	0x08010568
 80060dc:	08010414 	.word	0x08010414

080060e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d107      	bne.n	80060fe <netif_set_down+0x1e>
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <netif_set_down+0x58>)
 80060f0:	f240 329b 	movw	r2, #923	; 0x39b
 80060f4:	4911      	ldr	r1, [pc, #68]	; (800613c <netif_set_down+0x5c>)
 80060f6:	4812      	ldr	r0, [pc, #72]	; (8006140 <netif_set_down+0x60>)
 80060f8:	f009 f86a 	bl	800f1d0 <iprintf>
 80060fc:	e019      	b.n	8006132 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d012      	beq.n	8006132 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f007 f847 	bl	800d1c0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	080103c4 	.word	0x080103c4
 800613c:	0801058c 	.word	0x0801058c
 8006140:	08010414 	.word	0x08010414

08006144 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006150:	f06f 030b 	mvn.w	r3, #11
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <netif_get_by_index+0x48>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e00c      	b.n	8006192 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800617e:	3301      	adds	r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	79fa      	ldrb	r2, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d101      	bne.n	800618c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	e006      	b.n	800619a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ef      	bne.n	8006178 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20006d1c 	.word	0x20006d1c

080061ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <pbuf_free_ooseq+0x38>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <pbuf_free_ooseq+0x3c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	e00a      	b.n	80061d6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f002 f93d 	bl	8008448 <tcp_free_ooseq>
      return;
 80061ce:	e005      	b.n	80061dc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f1      	bne.n	80061c0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20006d24 	.word	0x20006d24
 80061e8:	20006d2c 	.word	0x20006d2c

080061ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <pbuf_pool_is_empty+0x14>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20006d24 	.word	0x20006d24

08006204 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	460b      	mov	r3, r1
 8006214:	80fb      	strh	r3, [r7, #6]
 8006216:	4613      	mov	r3, r2
 8006218:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88ba      	ldrh	r2, [r7, #4]
 8006230:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006232:	8b3b      	ldrh	r3, [r7, #24]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	7f3a      	ldrb	r2, [r7, #28]
 800623e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	73da      	strb	r2, [r3, #15]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af02      	add	r7, sp, #8
 800625e:	4603      	mov	r3, r0
 8006260:	71fb      	strb	r3, [r7, #7]
 8006262:	460b      	mov	r3, r1
 8006264:	80bb      	strh	r3, [r7, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800626e:	887b      	ldrh	r3, [r7, #2]
 8006270:	2b41      	cmp	r3, #65	; 0x41
 8006272:	d00b      	beq.n	800628c <pbuf_alloc+0x34>
 8006274:	2b41      	cmp	r3, #65	; 0x41
 8006276:	dc02      	bgt.n	800627e <pbuf_alloc+0x26>
 8006278:	2b01      	cmp	r3, #1
 800627a:	d007      	beq.n	800628c <pbuf_alloc+0x34>
 800627c:	e0c2      	b.n	8006404 <pbuf_alloc+0x1ac>
 800627e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006282:	d00b      	beq.n	800629c <pbuf_alloc+0x44>
 8006284:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006288:	d070      	beq.n	800636c <pbuf_alloc+0x114>
 800628a:	e0bb      	b.n	8006404 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800628c:	887a      	ldrh	r2, [r7, #2]
 800628e:	88bb      	ldrh	r3, [r7, #4]
 8006290:	4619      	mov	r1, r3
 8006292:	2000      	movs	r0, #0
 8006294:	f000 f8d2 	bl	800643c <pbuf_alloc_reference>
 8006298:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800629a:	e0bd      	b.n	8006418 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062a8:	2008      	movs	r0, #8
 80062aa:	f7ff fc6f 	bl	8005b8c <memp_malloc>
 80062ae:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80062b6:	f7ff ff99 	bl	80061ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80062c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c2:	f000 faa9 	bl	8006818 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e0a7      	b.n	800641a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80062ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062cc:	3303      	adds	r3, #3
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f023 0303 	bic.w	r3, r3, #3
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8b7a      	ldrh	r2, [r7, #26]
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf28      	it	cs
 80062e2:	4613      	movcs	r3, r2
 80062e4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80062e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062e8:	3310      	adds	r3, #16
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	3303      	adds	r3, #3
 80062f0:	f023 0303 	bic.w	r3, r3, #3
 80062f4:	4618      	mov	r0, r3
 80062f6:	89f9      	ldrh	r1, [r7, #14]
 80062f8:	8b7a      	ldrh	r2, [r7, #26]
 80062fa:	2300      	movs	r3, #0
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	460b      	mov	r3, r1
 8006304:	4601      	mov	r1, r0
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f7ff ff7c 	bl	8006204 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <pbuf_alloc+0xce>
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <pbuf_alloc+0x1cc>)
 800631a:	f240 1201 	movw	r2, #257	; 0x101
 800631e:	4942      	ldr	r1, [pc, #264]	; (8006428 <pbuf_alloc+0x1d0>)
 8006320:	4842      	ldr	r0, [pc, #264]	; (800642c <pbuf_alloc+0x1d4>)
 8006322:	f008 ff55 	bl	800f1d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006328:	3303      	adds	r3, #3
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006332:	d106      	bne.n	8006342 <pbuf_alloc+0xea>
 8006334:	4b3b      	ldr	r3, [pc, #236]	; (8006424 <pbuf_alloc+0x1cc>)
 8006336:	f240 1203 	movw	r2, #259	; 0x103
 800633a:	493d      	ldr	r1, [pc, #244]	; (8006430 <pbuf_alloc+0x1d8>)
 800633c:	483b      	ldr	r0, [pc, #236]	; (800642c <pbuf_alloc+0x1d4>)
 800633e:	f008 ff47 	bl	800f1d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
 800634c:	e002      	b.n	8006354 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006358:	8b7a      	ldrh	r2, [r7, #26]
 800635a:	89fb      	ldrh	r3, [r7, #14]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006364:	8b7b      	ldrh	r3, [r7, #26]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d19e      	bne.n	80062a8 <pbuf_alloc+0x50>
      break;
 800636a:	e055      	b.n	8006418 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800636c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800636e:	3303      	adds	r3, #3
 8006370:	b29b      	uxth	r3, r3
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	b29a      	uxth	r2, r3
 8006378:	88bb      	ldrh	r3, [r7, #4]
 800637a:	3303      	adds	r3, #3
 800637c:	b29b      	uxth	r3, r3
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	b29b      	uxth	r3, r3
 8006384:	4413      	add	r3, r2
 8006386:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006388:	8b3b      	ldrh	r3, [r7, #24]
 800638a:	3310      	adds	r3, #16
 800638c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800638e:	8b3a      	ldrh	r2, [r7, #24]
 8006390:	88bb      	ldrh	r3, [r7, #4]
 8006392:	3303      	adds	r3, #3
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	429a      	cmp	r2, r3
 800639a:	d306      	bcc.n	80063aa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800639c:	8afa      	ldrh	r2, [r7, #22]
 800639e:	88bb      	ldrh	r3, [r7, #4]
 80063a0:	3303      	adds	r3, #3
 80063a2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d201      	bcs.n	80063ae <pbuf_alloc+0x156>
        return NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e035      	b.n	800641a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063ae:	8afb      	ldrh	r3, [r7, #22]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fa7d 	bl	80058b0 <mem_malloc>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <pbuf_alloc+0x16a>
        return NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	e02b      	b.n	800641a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063c4:	3310      	adds	r3, #16
 80063c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c8:	4413      	add	r3, r2
 80063ca:	3303      	adds	r3, #3
 80063cc:	f023 0303 	bic.w	r3, r3, #3
 80063d0:	4618      	mov	r0, r3
 80063d2:	88b9      	ldrh	r1, [r7, #4]
 80063d4:	88ba      	ldrh	r2, [r7, #4]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	460b      	mov	r3, r1
 80063e0:	4601      	mov	r1, r0
 80063e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e4:	f7ff ff0e 	bl	8006204 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <pbuf_alloc+0x1be>
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <pbuf_alloc+0x1cc>)
 80063f6:	f240 1223 	movw	r2, #291	; 0x123
 80063fa:	490e      	ldr	r1, [pc, #56]	; (8006434 <pbuf_alloc+0x1dc>)
 80063fc:	480b      	ldr	r0, [pc, #44]	; (800642c <pbuf_alloc+0x1d4>)
 80063fe:	f008 fee7 	bl	800f1d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006402:	e008      	b.n	8006416 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <pbuf_alloc+0x1cc>)
 8006406:	f240 1227 	movw	r2, #295	; 0x127
 800640a:	490b      	ldr	r1, [pc, #44]	; (8006438 <pbuf_alloc+0x1e0>)
 800640c:	4807      	ldr	r0, [pc, #28]	; (800642c <pbuf_alloc+0x1d4>)
 800640e:	f008 fedf 	bl	800f1d0 <iprintf>
      return NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	e001      	b.n	800641a <pbuf_alloc+0x1c2>
      break;
 8006416:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800641a:	4618      	mov	r0, r3
 800641c:	3728      	adds	r7, #40	; 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	080105f4 	.word	0x080105f4
 8006428:	08010624 	.word	0x08010624
 800642c:	08010654 	.word	0x08010654
 8006430:	0801067c 	.word	0x0801067c
 8006434:	080106b0 	.word	0x080106b0
 8006438:	080106dc 	.word	0x080106dc

0800643c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af02      	add	r7, sp, #8
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	807b      	strh	r3, [r7, #2]
 8006448:	4613      	mov	r3, r2
 800644a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800644c:	883b      	ldrh	r3, [r7, #0]
 800644e:	2b41      	cmp	r3, #65	; 0x41
 8006450:	d009      	beq.n	8006466 <pbuf_alloc_reference+0x2a>
 8006452:	883b      	ldrh	r3, [r7, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d006      	beq.n	8006466 <pbuf_alloc_reference+0x2a>
 8006458:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <pbuf_alloc_reference+0x5c>)
 800645a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800645e:	490f      	ldr	r1, [pc, #60]	; (800649c <pbuf_alloc_reference+0x60>)
 8006460:	480f      	ldr	r0, [pc, #60]	; (80064a0 <pbuf_alloc_reference+0x64>)
 8006462:	f008 feb5 	bl	800f1d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006466:	2007      	movs	r0, #7
 8006468:	f7ff fb90 	bl	8005b8c <memp_malloc>
 800646c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	e00b      	b.n	8006490 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006478:	8879      	ldrh	r1, [r7, #2]
 800647a:	887a      	ldrh	r2, [r7, #2]
 800647c:	2300      	movs	r3, #0
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	883b      	ldrh	r3, [r7, #0]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	460b      	mov	r3, r1
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff febb 	bl	8006204 <pbuf_init_alloced_pbuf>
  return p;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	080105f4 	.word	0x080105f4
 800649c:	080106f8 	.word	0x080106f8
 80064a0:	08010654 	.word	0x08010654

080064a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
 80064b0:	460b      	mov	r3, r1
 80064b2:	81bb      	strh	r3, [r7, #12]
 80064b4:	4613      	mov	r3, r2
 80064b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064bc:	8a7b      	ldrh	r3, [r7, #18]
 80064be:	3303      	adds	r3, #3
 80064c0:	f023 0203 	bic.w	r2, r3, #3
 80064c4:	89bb      	ldrh	r3, [r7, #12]
 80064c6:	441a      	add	r2, r3
 80064c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d901      	bls.n	80064d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e018      	b.n	8006504 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064d8:	8a7b      	ldrh	r3, [r7, #18]
 80064da:	3303      	adds	r3, #3
 80064dc:	f023 0303 	bic.w	r3, r3, #3
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	4413      	add	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e001      	b.n	80064ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	89b9      	ldrh	r1, [r7, #12]
 80064f0:	89ba      	ldrh	r2, [r7, #12]
 80064f2:	2302      	movs	r3, #2
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	460b      	mov	r3, r1
 80064fc:	6979      	ldr	r1, [r7, #20]
 80064fe:	f7ff fe81 	bl	8006204 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006502:	687b      	ldr	r3, [r7, #4]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <pbuf_realloc+0x20>
 800651e:	4b3a      	ldr	r3, [pc, #232]	; (8006608 <pbuf_realloc+0xfc>)
 8006520:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006524:	4939      	ldr	r1, [pc, #228]	; (800660c <pbuf_realloc+0x100>)
 8006526:	483a      	ldr	r0, [pc, #232]	; (8006610 <pbuf_realloc+0x104>)
 8006528:	f008 fe52 	bl	800f1d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	891b      	ldrh	r3, [r3, #8]
 8006530:	887a      	ldrh	r2, [r7, #2]
 8006532:	429a      	cmp	r2, r3
 8006534:	d264      	bcs.n	8006600 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	891a      	ldrh	r2, [r3, #8]
 800653a:	887b      	ldrh	r3, [r7, #2]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	817b      	strh	r3, [r7, #10]
  q = p;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006548:	e018      	b.n	800657c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	895b      	ldrh	r3, [r3, #10]
 800654e:	897a      	ldrh	r2, [r7, #10]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	891a      	ldrh	r2, [r3, #8]
 8006558:	893b      	ldrh	r3, [r7, #8]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <pbuf_realloc+0x70>
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <pbuf_realloc+0xfc>)
 8006570:	f240 12af 	movw	r2, #431	; 0x1af
 8006574:	4927      	ldr	r1, [pc, #156]	; (8006614 <pbuf_realloc+0x108>)
 8006576:	4826      	ldr	r0, [pc, #152]	; (8006610 <pbuf_realloc+0x104>)
 8006578:	f008 fe2a 	bl	800f1d0 <iprintf>
  while (rem_len > q->len) {
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	895b      	ldrh	r3, [r3, #10]
 8006580:	897a      	ldrh	r2, [r7, #10]
 8006582:	429a      	cmp	r2, r3
 8006584:	d8e1      	bhi.n	800654a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	7b1b      	ldrb	r3, [r3, #12]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	2b00      	cmp	r3, #0
 8006590:	d122      	bne.n	80065d8 <pbuf_realloc+0xcc>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	895b      	ldrh	r3, [r3, #10]
 8006596:	897a      	ldrh	r2, [r7, #10]
 8006598:	429a      	cmp	r2, r3
 800659a:	d01d      	beq.n	80065d8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	7b5b      	ldrb	r3, [r3, #13]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d117      	bne.n	80065d8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	461a      	mov	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	897b      	ldrh	r3, [r7, #10]
 80065b6:	4413      	add	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4619      	mov	r1, r3
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff f87b 	bl	80056b8 <mem_trim>
 80065c2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <pbuf_realloc+0xcc>
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <pbuf_realloc+0xfc>)
 80065cc:	f240 12bd 	movw	r2, #445	; 0x1bd
 80065d0:	4911      	ldr	r1, [pc, #68]	; (8006618 <pbuf_realloc+0x10c>)
 80065d2:	480f      	ldr	r0, [pc, #60]	; (8006610 <pbuf_realloc+0x104>)
 80065d4:	f008 fdfc 	bl	800f1d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	897a      	ldrh	r2, [r7, #10]
 80065dc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	895a      	ldrh	r2, [r3, #10]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d004      	beq.n	80065f8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f910 	bl	8006818 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e000      	b.n	8006602 <pbuf_realloc+0xf6>
    return;
 8006600:	bf00      	nop

}
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	080105f4 	.word	0x080105f4
 800660c:	0801070c 	.word	0x0801070c
 8006610:	08010654 	.word	0x08010654
 8006614:	08010724 	.word	0x08010724
 8006618:	0801073c 	.word	0x0801073c

0800661c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <pbuf_add_header_impl+0x22>
 8006630:	4b2b      	ldr	r3, [pc, #172]	; (80066e0 <pbuf_add_header_impl+0xc4>)
 8006632:	f240 12df 	movw	r2, #479	; 0x1df
 8006636:	492b      	ldr	r1, [pc, #172]	; (80066e4 <pbuf_add_header_impl+0xc8>)
 8006638:	482b      	ldr	r0, [pc, #172]	; (80066e8 <pbuf_add_header_impl+0xcc>)
 800663a:	f008 fdc9 	bl	800f1d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <pbuf_add_header_impl+0x30>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664a:	d301      	bcc.n	8006650 <pbuf_add_header_impl+0x34>
    return 1;
 800664c:	2301      	movs	r3, #1
 800664e:	e043      	b.n	80066d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <pbuf_add_header_impl+0x3e>
    return 0;
 8006656:	2300      	movs	r3, #0
 8006658:	e03e      	b.n	80066d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	891a      	ldrh	r2, [r3, #8]
 8006662:	8a7b      	ldrh	r3, [r7, #18]
 8006664:	4413      	add	r3, r2
 8006666:	b29b      	uxth	r3, r3
 8006668:	8a7a      	ldrh	r2, [r7, #18]
 800666a:	429a      	cmp	r2, r3
 800666c:	d901      	bls.n	8006672 <pbuf_add_header_impl+0x56>
    return 1;
 800666e:	2301      	movs	r3, #1
 8006670:	e032      	b.n	80066d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	7b1b      	ldrb	r3, [r3, #12]
 8006676:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006678:	8a3b      	ldrh	r3, [r7, #16]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	425b      	negs	r3, r3
 800668a:	4413      	add	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3310      	adds	r3, #16
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	429a      	cmp	r2, r3
 8006696:	d20d      	bcs.n	80066b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006698:	2301      	movs	r3, #1
 800669a:	e01d      	b.n	80066d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	425b      	negs	r3, r3
 80066aa:	4413      	add	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	e001      	b.n	80066b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e011      	b.n	80066d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	895a      	ldrh	r2, [r3, #10]
 80066be:	8a7b      	ldrh	r3, [r7, #18]
 80066c0:	4413      	add	r3, r2
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	891a      	ldrh	r2, [r3, #8]
 80066cc:	8a7b      	ldrh	r3, [r7, #18]
 80066ce:	4413      	add	r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	080105f4 	.word	0x080105f4
 80066e4:	08010758 	.word	0x08010758
 80066e8:	08010654 	.word	0x08010654

080066ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80066f6:	2200      	movs	r2, #0
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ff8e 	bl	800661c <pbuf_add_header_impl>
 8006700:	4603      	mov	r3, r0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <pbuf_remove_header+0x1e>
 800671c:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <pbuf_remove_header+0x94>)
 800671e:	f240 224b 	movw	r2, #587	; 0x24b
 8006722:	4920      	ldr	r1, [pc, #128]	; (80067a4 <pbuf_remove_header+0x98>)
 8006724:	4820      	ldr	r0, [pc, #128]	; (80067a8 <pbuf_remove_header+0x9c>)
 8006726:	f008 fd53 	bl	800f1d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <pbuf_remove_header+0x2c>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006736:	d301      	bcc.n	800673c <pbuf_remove_header+0x30>
    return 1;
 8006738:	2301      	movs	r3, #1
 800673a:	e02c      	b.n	8006796 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <pbuf_remove_header+0x3a>
    return 0;
 8006742:	2300      	movs	r3, #0
 8006744:	e027      	b.n	8006796 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	895b      	ldrh	r3, [r3, #10]
 800674e:	89fa      	ldrh	r2, [r7, #14]
 8006750:	429a      	cmp	r2, r3
 8006752:	d908      	bls.n	8006766 <pbuf_remove_header+0x5a>
 8006754:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <pbuf_remove_header+0x94>)
 8006756:	f240 2255 	movw	r2, #597	; 0x255
 800675a:	4914      	ldr	r1, [pc, #80]	; (80067ac <pbuf_remove_header+0xa0>)
 800675c:	4812      	ldr	r0, [pc, #72]	; (80067a8 <pbuf_remove_header+0x9c>)
 800675e:	f008 fd37 	bl	800f1d0 <iprintf>
 8006762:	2301      	movs	r3, #1
 8006764:	e017      	b.n	8006796 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	441a      	add	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	895a      	ldrh	r2, [r3, #10]
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	891a      	ldrh	r2, [r3, #8]
 800678a:	89fb      	ldrh	r3, [r7, #14]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	080105f4 	.word	0x080105f4
 80067a4:	08010758 	.word	0x08010758
 80067a8:	08010654 	.word	0x08010654
 80067ac:	08010764 	.word	0x08010764

080067b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	807b      	strh	r3, [r7, #2]
 80067bc:	4613      	mov	r3, r2
 80067be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da08      	bge.n	80067da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067cc:	425b      	negs	r3, r3
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ff9b 	bl	800670c <pbuf_remove_header>
 80067d6:	4603      	mov	r3, r0
 80067d8:	e007      	b.n	80067ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80067da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067de:	787a      	ldrb	r2, [r7, #1]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ff1a 	bl	800661c <pbuf_add_header_impl>
 80067e8:	4603      	mov	r3, r0
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80067fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006802:	2201      	movs	r2, #1
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff ffd2 	bl	80067b0 <pbuf_header_impl>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <pbuf_free+0x22>
 800682c:	4b38      	ldr	r3, [pc, #224]	; (8006910 <pbuf_free+0xf8>)
 800682e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006832:	4938      	ldr	r1, [pc, #224]	; (8006914 <pbuf_free+0xfc>)
 8006834:	4838      	ldr	r0, [pc, #224]	; (8006918 <pbuf_free+0x100>)
 8006836:	f008 fccb 	bl	800f1d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800683a:	2300      	movs	r3, #0
 800683c:	e063      	b.n	8006906 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006842:	e05c      	b.n	80068fe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7b9b      	ldrb	r3, [r3, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <pbuf_free+0x42>
 800684c:	4b30      	ldr	r3, [pc, #192]	; (8006910 <pbuf_free+0xf8>)
 800684e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006852:	4932      	ldr	r1, [pc, #200]	; (800691c <pbuf_free+0x104>)
 8006854:	4830      	ldr	r0, [pc, #192]	; (8006918 <pbuf_free+0x100>)
 8006856:	f008 fcbb 	bl	800f1d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7b9b      	ldrb	r3, [r3, #14]
 800685e:	3b01      	subs	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	739a      	strb	r2, [r3, #14]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7b9b      	ldrb	r3, [r3, #14]
 800686a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800686c:	7dbb      	ldrb	r3, [r7, #22]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d143      	bne.n	80068fa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7b1b      	ldrb	r3, [r3, #12]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7b5b      	ldrb	r3, [r3, #13]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <pbuf_free+0x90>
 800689a:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <pbuf_free+0xf8>)
 800689c:	f240 22ff 	movw	r2, #767	; 0x2ff
 80068a0:	491f      	ldr	r1, [pc, #124]	; (8006920 <pbuf_free+0x108>)
 80068a2:	481d      	ldr	r0, [pc, #116]	; (8006918 <pbuf_free+0x100>)
 80068a4:	f008 fc94 	bl	800f1d0 <iprintf>
        pc->custom_free_function(p);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
 80068b0:	e01d      	b.n	80068ee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d104      	bne.n	80068c2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	2008      	movs	r0, #8
 80068bc:	f7ff f9b2 	bl	8005c24 <memp_free>
 80068c0:	e015      	b.n	80068ee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d104      	bne.n	80068d2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	2007      	movs	r0, #7
 80068cc:	f7ff f9aa 	bl	8005c24 <memp_free>
 80068d0:	e00d      	b.n	80068ee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d103      	bne.n	80068e0 <pbuf_free+0xc8>
          mem_free(p);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fe fe83 	bl	80055e4 <mem_free>
 80068de:	e006      	b.n	80068ee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <pbuf_free+0xf8>)
 80068e2:	f240 320f 	movw	r2, #783	; 0x30f
 80068e6:	490f      	ldr	r1, [pc, #60]	; (8006924 <pbuf_free+0x10c>)
 80068e8:	480b      	ldr	r0, [pc, #44]	; (8006918 <pbuf_free+0x100>)
 80068ea:	f008 fc71 	bl	800f1d0 <iprintf>
        }
      }
      count++;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	3301      	adds	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	e001      	b.n	80068fe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d19f      	bne.n	8006844 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006904:	7dfb      	ldrb	r3, [r7, #23]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	080105f4 	.word	0x080105f4
 8006914:	08010758 	.word	0x08010758
 8006918:	08010654 	.word	0x08010654
 800691c:	08010784 	.word	0x08010784
 8006920:	0801079c 	.word	0x0801079c
 8006924:	080107c0 	.word	0x080107c0

08006928 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006934:	e005      	b.n	8006942 <pbuf_clen+0x1a>
    ++len;
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	3301      	adds	r3, #1
 800693a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f6      	bne.n	8006936 <pbuf_clen+0xe>
  }
  return len;
 8006948:	89fb      	ldrh	r3, [r7, #14]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
	...

08006958 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d010      	beq.n	8006988 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7b9b      	ldrb	r3, [r3, #14]
 800696a:	3301      	adds	r3, #1
 800696c:	b2da      	uxtb	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7b9b      	ldrb	r3, [r3, #14]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <pbuf_ref+0x30>
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <pbuf_ref+0x38>)
 800697c:	f240 3242 	movw	r2, #834	; 0x342
 8006980:	4904      	ldr	r1, [pc, #16]	; (8006994 <pbuf_ref+0x3c>)
 8006982:	4805      	ldr	r0, [pc, #20]	; (8006998 <pbuf_ref+0x40>)
 8006984:	f008 fc24 	bl	800f1d0 <iprintf>
  }
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	080105f4 	.word	0x080105f4
 8006994:	080107d4 	.word	0x080107d4
 8006998:	08010654 	.word	0x08010654

0800699c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <pbuf_cat+0x16>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d107      	bne.n	80069c2 <pbuf_cat+0x26>
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <pbuf_cat+0x98>)
 80069b4:	f240 325a 	movw	r2, #858	; 0x35a
 80069b8:	491f      	ldr	r1, [pc, #124]	; (8006a38 <pbuf_cat+0x9c>)
 80069ba:	4820      	ldr	r0, [pc, #128]	; (8006a3c <pbuf_cat+0xa0>)
 80069bc:	f008 fc08 	bl	800f1d0 <iprintf>
 80069c0:	e034      	b.n	8006a2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e00a      	b.n	80069de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	891a      	ldrh	r2, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	891b      	ldrh	r3, [r3, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	891a      	ldrh	r2, [r3, #8]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	895b      	ldrh	r3, [r3, #10]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d006      	beq.n	8006a00 <pbuf_cat+0x64>
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <pbuf_cat+0x98>)
 80069f4:	f240 3262 	movw	r2, #866	; 0x362
 80069f8:	4911      	ldr	r1, [pc, #68]	; (8006a40 <pbuf_cat+0xa4>)
 80069fa:	4810      	ldr	r0, [pc, #64]	; (8006a3c <pbuf_cat+0xa0>)
 80069fc:	f008 fbe8 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <pbuf_cat+0x7a>
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <pbuf_cat+0x98>)
 8006a0a:	f240 3263 	movw	r2, #867	; 0x363
 8006a0e:	490d      	ldr	r1, [pc, #52]	; (8006a44 <pbuf_cat+0xa8>)
 8006a10:	480a      	ldr	r0, [pc, #40]	; (8006a3c <pbuf_cat+0xa0>)
 8006a12:	f008 fbdd 	bl	800f1d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	891a      	ldrh	r2, [r3, #8]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	891b      	ldrh	r3, [r3, #8]
 8006a1e:	4413      	add	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	080105f4 	.word	0x080105f4
 8006a38:	080107e8 	.word	0x080107e8
 8006a3c:	08010654 	.word	0x08010654
 8006a40:	08010820 	.word	0x08010820
 8006a44:	08010850 	.word	0x08010850

08006a48 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ffa1 	bl	800699c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006a5a:	6838      	ldr	r0, [r7, #0]
 8006a5c:	f7ff ff7c 	bl	8006958 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <pbuf_copy+0x2a>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <pbuf_copy+0x2a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	891a      	ldrh	r2, [r3, #8]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	891b      	ldrh	r3, [r3, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d209      	bcs.n	8006aa6 <pbuf_copy+0x3e>
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <pbuf_copy+0x188>)
 8006a94:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006a98:	4956      	ldr	r1, [pc, #344]	; (8006bf4 <pbuf_copy+0x18c>)
 8006a9a:	4857      	ldr	r0, [pc, #348]	; (8006bf8 <pbuf_copy+0x190>)
 8006a9c:	f008 fb98 	bl	800f1d0 <iprintf>
 8006aa0:	f06f 030f 	mvn.w	r3, #15
 8006aa4:	e09f      	b.n	8006be6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	895b      	ldrh	r3, [r3, #10]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	1ad2      	subs	r2, r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	895b      	ldrh	r3, [r3, #10]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1acb      	subs	r3, r1, r3
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d306      	bcc.n	8006acc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	895b      	ldrh	r3, [r3, #10]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e005      	b.n	8006ad8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	895b      	ldrh	r3, [r3, #10]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	18d0      	adds	r0, r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4619      	mov	r1, r3
 8006aec:	f008 fb5d 	bl	800f1aa <memcpy>
    offset_to += len;
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	895b      	ldrh	r3, [r3, #10]
 8006b04:	461a      	mov	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d906      	bls.n	8006b1a <pbuf_copy+0xb2>
 8006b0c:	4b38      	ldr	r3, [pc, #224]	; (8006bf0 <pbuf_copy+0x188>)
 8006b0e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b12:	493a      	ldr	r1, [pc, #232]	; (8006bfc <pbuf_copy+0x194>)
 8006b14:	4838      	ldr	r0, [pc, #224]	; (8006bf8 <pbuf_copy+0x190>)
 8006b16:	f008 fb5b 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	895b      	ldrh	r3, [r3, #10]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d906      	bls.n	8006b34 <pbuf_copy+0xcc>
 8006b26:	4b32      	ldr	r3, [pc, #200]	; (8006bf0 <pbuf_copy+0x188>)
 8006b28:	f240 32da 	movw	r2, #986	; 0x3da
 8006b2c:	4934      	ldr	r1, [pc, #208]	; (8006c00 <pbuf_copy+0x198>)
 8006b2e:	4832      	ldr	r0, [pc, #200]	; (8006bf8 <pbuf_copy+0x190>)
 8006b30:	f008 fb4e 	bl	800f1d0 <iprintf>
    if (offset_from >= p_from->len) {
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	895b      	ldrh	r3, [r3, #10]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d304      	bcc.n	8006b4a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	895b      	ldrh	r3, [r3, #10]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d114      	bne.n	8006b80 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <pbuf_copy+0x118>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d009      	beq.n	8006b80 <pbuf_copy+0x118>
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <pbuf_copy+0x188>)
 8006b6e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b72:	4924      	ldr	r1, [pc, #144]	; (8006c04 <pbuf_copy+0x19c>)
 8006b74:	4820      	ldr	r0, [pc, #128]	; (8006bf8 <pbuf_copy+0x190>)
 8006b76:	f008 fb2b 	bl	800f1d0 <iprintf>
 8006b7a:	f06f 030f 	mvn.w	r3, #15
 8006b7e:	e032      	b.n	8006be6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <pbuf_copy+0x146>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	895a      	ldrh	r2, [r3, #10]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	891b      	ldrh	r3, [r3, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d10d      	bne.n	8006bae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <pbuf_copy+0x146>
 8006b9a:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <pbuf_copy+0x188>)
 8006b9c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8006ba0:	4919      	ldr	r1, [pc, #100]	; (8006c08 <pbuf_copy+0x1a0>)
 8006ba2:	4815      	ldr	r0, [pc, #84]	; (8006bf8 <pbuf_copy+0x190>)
 8006ba4:	f008 fb14 	bl	800f1d0 <iprintf>
 8006ba8:	f06f 0305 	mvn.w	r3, #5
 8006bac:	e01b      	b.n	8006be6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <pbuf_copy+0x174>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	895a      	ldrh	r2, [r3, #10]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	891b      	ldrh	r3, [r3, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d10d      	bne.n	8006bdc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <pbuf_copy+0x174>
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <pbuf_copy+0x188>)
 8006bca:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006bce:	490e      	ldr	r1, [pc, #56]	; (8006c08 <pbuf_copy+0x1a0>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <pbuf_copy+0x190>)
 8006bd2:	f008 fafd 	bl	800f1d0 <iprintf>
 8006bd6:	f06f 0305 	mvn.w	r3, #5
 8006bda:	e004      	b.n	8006be6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f47f af61 	bne.w	8006aa6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	080105f4 	.word	0x080105f4
 8006bf4:	0801089c 	.word	0x0801089c
 8006bf8:	08010654 	.word	0x08010654
 8006bfc:	080108cc 	.word	0x080108cc
 8006c00:	080108e4 	.word	0x080108e4
 8006c04:	08010900 	.word	0x08010900
 8006c08:	08010910 	.word	0x08010910

08006c0c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	80fb      	strh	r3, [r7, #6]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d108      	bne.n	8006c42 <pbuf_copy_partial+0x36>
 8006c30:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <pbuf_copy_partial+0xd4>)
 8006c32:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c36:	492b      	ldr	r1, [pc, #172]	; (8006ce4 <pbuf_copy_partial+0xd8>)
 8006c38:	482b      	ldr	r0, [pc, #172]	; (8006ce8 <pbuf_copy_partial+0xdc>)
 8006c3a:	f008 fac9 	bl	800f1d0 <iprintf>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e04a      	b.n	8006cd8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d108      	bne.n	8006c5a <pbuf_copy_partial+0x4e>
 8006c48:	4b25      	ldr	r3, [pc, #148]	; (8006ce0 <pbuf_copy_partial+0xd4>)
 8006c4a:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c4e:	4927      	ldr	r1, [pc, #156]	; (8006cec <pbuf_copy_partial+0xe0>)
 8006c50:	4825      	ldr	r0, [pc, #148]	; (8006ce8 <pbuf_copy_partial+0xdc>)
 8006c52:	f008 fabd 	bl	800f1d0 <iprintf>
 8006c56:	2300      	movs	r3, #0
 8006c58:	e03e      	b.n	8006cd8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e034      	b.n	8006cca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c60:	88bb      	ldrh	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <pbuf_copy_partial+0x70>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	895b      	ldrh	r3, [r3, #10]
 8006c6a:	88ba      	ldrh	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d305      	bcc.n	8006c7c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	895b      	ldrh	r3, [r3, #10]
 8006c74:	88ba      	ldrh	r2, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	80bb      	strh	r3, [r7, #4]
 8006c7a:	e023      	b.n	8006cc4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	895a      	ldrh	r2, [r3, #10]
 8006c80:	88bb      	ldrh	r3, [r7, #4]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c86:	8b3a      	ldrh	r2, [r7, #24]
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d901      	bls.n	8006c92 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c92:	8b7b      	ldrh	r3, [r7, #26]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	18d0      	adds	r0, r2, r3
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	88bb      	ldrh	r3, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	8b3a      	ldrh	r2, [r7, #24]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f008 fa81 	bl	800f1aa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006ca8:	8afa      	ldrh	r2, [r7, #22]
 8006caa:	8b3b      	ldrh	r3, [r7, #24]
 8006cac:	4413      	add	r3, r2
 8006cae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006cb0:	8b7a      	ldrh	r2, [r7, #26]
 8006cb2:	8b3b      	ldrh	r3, [r7, #24]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	8b3b      	ldrh	r3, [r7, #24]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <pbuf_copy_partial+0xca>
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1c4      	bne.n	8006c60 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006cd6:	8afb      	ldrh	r3, [r7, #22]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	080105f4 	.word	0x080105f4
 8006ce4:	0801093c 	.word	0x0801093c
 8006ce8:	08010654 	.word	0x08010654
 8006cec:	0801095c 	.word	0x0801095c

08006cf0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	603a      	str	r2, [r7, #0]
 8006cfa:	71fb      	strb	r3, [r7, #7]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	8919      	ldrh	r1, [r3, #8]
 8006d04:	88ba      	ldrh	r2, [r7, #4]
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff faa5 	bl	8006258 <pbuf_alloc>
 8006d0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <pbuf_clone+0x2a>
    return NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e011      	b.n	8006d3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fea3 	bl	8006a68 <pbuf_copy>
 8006d22:	4603      	mov	r3, r0
 8006d24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d006      	beq.n	8006d3c <pbuf_clone+0x4c>
 8006d2e:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <pbuf_clone+0x58>)
 8006d30:	f240 5224 	movw	r2, #1316	; 0x524
 8006d34:	4905      	ldr	r1, [pc, #20]	; (8006d4c <pbuf_clone+0x5c>)
 8006d36:	4806      	ldr	r0, [pc, #24]	; (8006d50 <pbuf_clone+0x60>)
 8006d38:	f008 fa4a 	bl	800f1d0 <iprintf>
  return q;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	080105f4 	.word	0x080105f4
 8006d4c:	08010a68 	.word	0x08010a68
 8006d50:	08010654 	.word	0x08010654

08006d54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d58:	f008 fa52 	bl	800f200 <rand>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	4b01      	ldr	r3, [pc, #4]	; (8006d74 <tcp_init+0x20>)
 8006d6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	2000001c 	.word	0x2000001c

08006d78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d105      	bne.n	8006d94 <tcp_free+0x1c>
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <tcp_free+0x2c>)
 8006d8a:	22d4      	movs	r2, #212	; 0xd4
 8006d8c:	4906      	ldr	r1, [pc, #24]	; (8006da8 <tcp_free+0x30>)
 8006d8e:	4807      	ldr	r0, [pc, #28]	; (8006dac <tcp_free+0x34>)
 8006d90:	f008 fa1e 	bl	800f1d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	2001      	movs	r0, #1
 8006d98:	f7fe ff44 	bl	8005c24 <memp_free>
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	08010af4 	.word	0x08010af4
 8006da8:	08010b24 	.word	0x08010b24
 8006dac:	08010b38 	.word	0x08010b38

08006db0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7d1b      	ldrb	r3, [r3, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d105      	bne.n	8006dcc <tcp_free_listen+0x1c>
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <tcp_free_listen+0x2c>)
 8006dc2:	22df      	movs	r2, #223	; 0xdf
 8006dc4:	4906      	ldr	r1, [pc, #24]	; (8006de0 <tcp_free_listen+0x30>)
 8006dc6:	4807      	ldr	r0, [pc, #28]	; (8006de4 <tcp_free_listen+0x34>)
 8006dc8:	f008 fa02 	bl	800f1d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	2002      	movs	r0, #2
 8006dd0:	f7fe ff28 	bl	8005c24 <memp_free>
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	08010af4 	.word	0x08010af4
 8006de0:	08010b60 	.word	0x08010b60
 8006de4:	08010b38 	.word	0x08010b38

08006de8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006dec:	f000 fe98 	bl	8007b20 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <tcp_tmr+0x28>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <tcp_tmr+0x28>)
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <tcp_tmr+0x28>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e08:	f000 fb4c 	bl	80074a4 <tcp_slowtmr>
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	200000dd 	.word	0x200000dd

08006e14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <tcp_remove_listener+0x1c>
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <tcp_remove_listener+0x48>)
 8006e26:	22ff      	movs	r2, #255	; 0xff
 8006e28:	490d      	ldr	r1, [pc, #52]	; (8006e60 <tcp_remove_listener+0x4c>)
 8006e2a:	480e      	ldr	r0, [pc, #56]	; (8006e64 <tcp_remove_listener+0x50>)
 8006e2c:	f008 f9d0 	bl	800f1d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e00a      	b.n	8006e4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d102      	bne.n	8006e46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f1      	bne.n	8006e36 <tcp_remove_listener+0x22>
    }
  }
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08010af4 	.word	0x08010af4
 8006e60:	08010b7c 	.word	0x08010b7c
 8006e64:	08010b38 	.word	0x08010b38

08006e68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <tcp_listen_closed+0x1c>
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <tcp_listen_closed+0x60>)
 8006e78:	f240 1211 	movw	r2, #273	; 0x111
 8006e7c:	4913      	ldr	r1, [pc, #76]	; (8006ecc <tcp_listen_closed+0x64>)
 8006e7e:	4814      	ldr	r0, [pc, #80]	; (8006ed0 <tcp_listen_closed+0x68>)
 8006e80:	f008 f9a6 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7d1b      	ldrb	r3, [r3, #20]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d006      	beq.n	8006e9a <tcp_listen_closed+0x32>
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <tcp_listen_closed+0x60>)
 8006e8e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e92:	4910      	ldr	r1, [pc, #64]	; (8006ed4 <tcp_listen_closed+0x6c>)
 8006e94:	480e      	ldr	r0, [pc, #56]	; (8006ed0 <tcp_listen_closed+0x68>)
 8006e96:	f008 f99b 	bl	800f1d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e00b      	b.n	8006eb8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006ea0:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <tcp_listen_closed+0x70>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff ffb1 	bl	8006e14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d9f0      	bls.n	8006ea0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	08010af4 	.word	0x08010af4
 8006ecc:	08010ba4 	.word	0x08010ba4
 8006ed0:	08010b38 	.word	0x08010b38
 8006ed4:	08010bb0 	.word	0x08010bb0
 8006ed8:	08012ac8 	.word	0x08012ac8

08006edc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006edc:	b5b0      	push	{r4, r5, r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af04      	add	r7, sp, #16
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <tcp_close_shutdown+0x20>
 8006eee:	4b61      	ldr	r3, [pc, #388]	; (8007074 <tcp_close_shutdown+0x198>)
 8006ef0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ef4:	4960      	ldr	r1, [pc, #384]	; (8007078 <tcp_close_shutdown+0x19c>)
 8006ef6:	4861      	ldr	r0, [pc, #388]	; (800707c <tcp_close_shutdown+0x1a0>)
 8006ef8:	f008 f96a 	bl	800f1d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d066      	beq.n	8006fd0 <tcp_close_shutdown+0xf4>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7d1b      	ldrb	r3, [r3, #20]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d003      	beq.n	8006f12 <tcp_close_shutdown+0x36>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7d1b      	ldrb	r3, [r3, #20]
 8006f0e:	2b07      	cmp	r3, #7
 8006f10:	d15e      	bne.n	8006fd0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <tcp_close_shutdown+0x48>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f22:	d055      	beq.n	8006fd0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8b5b      	ldrh	r3, [r3, #26]
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <tcp_close_shutdown+0x62>
 8006f30:	4b50      	ldr	r3, [pc, #320]	; (8007074 <tcp_close_shutdown+0x198>)
 8006f32:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f36:	4952      	ldr	r1, [pc, #328]	; (8007080 <tcp_close_shutdown+0x1a4>)
 8006f38:	4850      	ldr	r0, [pc, #320]	; (800707c <tcp_close_shutdown+0x1a0>)
 8006f3a:	f008 f949 	bl	800f1d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f46:	687d      	ldr	r5, [r7, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	8ad2      	ldrh	r2, [r2, #22]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	8b09      	ldrh	r1, [r1, #24]
 8006f54:	9102      	str	r1, [sp, #8]
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4601      	mov	r1, r0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f004 fe8f 	bl	800bc84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f8ba 	bl	80080e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f6c:	4b45      	ldr	r3, [pc, #276]	; (8007084 <tcp_close_shutdown+0x1a8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d105      	bne.n	8006f82 <tcp_close_shutdown+0xa6>
 8006f76:	4b43      	ldr	r3, [pc, #268]	; (8007084 <tcp_close_shutdown+0x1a8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	4a41      	ldr	r2, [pc, #260]	; (8007084 <tcp_close_shutdown+0x1a8>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	e013      	b.n	8006faa <tcp_close_shutdown+0xce>
 8006f82:	4b40      	ldr	r3, [pc, #256]	; (8007084 <tcp_close_shutdown+0x1a8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e00c      	b.n	8006fa4 <tcp_close_shutdown+0xc8>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d104      	bne.n	8006f9e <tcp_close_shutdown+0xc2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	60da      	str	r2, [r3, #12]
 8006f9c:	e005      	b.n	8006faa <tcp_close_shutdown+0xce>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1ef      	bne.n	8006f8a <tcp_close_shutdown+0xae>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	4b35      	ldr	r3, [pc, #212]	; (8007088 <tcp_close_shutdown+0x1ac>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006fb6:	4b35      	ldr	r3, [pc, #212]	; (800708c <tcp_close_shutdown+0x1b0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d102      	bne.n	8006fc6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fc0:	f003 fd4c 	bl	800aa5c <tcp_trigger_input_pcb_close>
 8006fc4:	e002      	b.n	8006fcc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fed6 	bl	8006d78 <tcp_free>
      }
      return ERR_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e04d      	b.n	800706c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7d1b      	ldrb	r3, [r3, #20]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d02d      	beq.n	8007034 <tcp_close_shutdown+0x158>
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d036      	beq.n	800704a <tcp_close_shutdown+0x16e>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d13f      	bne.n	8007060 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8adb      	ldrh	r3, [r3, #22]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d021      	beq.n	800702c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006fe8:	4b29      	ldr	r3, [pc, #164]	; (8007090 <tcp_close_shutdown+0x1b4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d105      	bne.n	8006ffe <tcp_close_shutdown+0x122>
 8006ff2:	4b27      	ldr	r3, [pc, #156]	; (8007090 <tcp_close_shutdown+0x1b4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <tcp_close_shutdown+0x1b4>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	e013      	b.n	8007026 <tcp_close_shutdown+0x14a>
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <tcp_close_shutdown+0x1b4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	e00c      	b.n	8007020 <tcp_close_shutdown+0x144>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d104      	bne.n	800701a <tcp_close_shutdown+0x13e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e005      	b.n	8007026 <tcp_close_shutdown+0x14a>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ef      	bne.n	8007006 <tcp_close_shutdown+0x12a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fea3 	bl	8006d78 <tcp_free>
      break;
 8007032:	e01a      	b.n	800706a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff17 	bl	8006e68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4815      	ldr	r0, [pc, #84]	; (8007094 <tcp_close_shutdown+0x1b8>)
 800703e:	f001 f89f 	bl	8008180 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff feb4 	bl	8006db0 <tcp_free_listen>
      break;
 8007048:	e00f      	b.n	800706a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	480d      	ldr	r0, [pc, #52]	; (8007084 <tcp_close_shutdown+0x1a8>)
 800704e:	f001 f897 	bl	8008180 <tcp_pcb_remove>
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <tcp_close_shutdown+0x1ac>)
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fe8d 	bl	8006d78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800705e:	e004      	b.n	800706a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f819 	bl	8007098 <tcp_close_shutdown_fin>
 8007066:	4603      	mov	r3, r0
 8007068:	e000      	b.n	800706c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bdb0      	pop	{r4, r5, r7, pc}
 8007074:	08010af4 	.word	0x08010af4
 8007078:	08010bc8 	.word	0x08010bc8
 800707c:	08010b38 	.word	0x08010b38
 8007080:	08010be8 	.word	0x08010be8
 8007084:	20006d2c 	.word	0x20006d2c
 8007088:	20006d28 	.word	0x20006d28
 800708c:	20006d40 	.word	0x20006d40
 8007090:	20006d38 	.word	0x20006d38
 8007094:	20006d34 	.word	0x20006d34

08007098 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <tcp_close_shutdown_fin+0x1c>
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <tcp_close_shutdown_fin+0xc0>)
 80070a8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80070ac:	492b      	ldr	r1, [pc, #172]	; (800715c <tcp_close_shutdown_fin+0xc4>)
 80070ae:	482c      	ldr	r0, [pc, #176]	; (8007160 <tcp_close_shutdown_fin+0xc8>)
 80070b0:	f008 f88e 	bl	800f1d0 <iprintf>

  switch (pcb->state) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7d1b      	ldrb	r3, [r3, #20]
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d010      	beq.n	80070de <tcp_close_shutdown_fin+0x46>
 80070bc:	2b07      	cmp	r3, #7
 80070be:	d01b      	beq.n	80070f8 <tcp_close_shutdown_fin+0x60>
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d126      	bne.n	8007112 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f003 fedb 	bl	800ae80 <tcp_send_fin>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d11f      	bne.n	8007116 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2205      	movs	r2, #5
 80070da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070dc:	e01b      	b.n	8007116 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f003 fece 	bl	800ae80 <tcp_send_fin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d114      	bne.n	800711a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2205      	movs	r2, #5
 80070f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070f6:	e010      	b.n	800711a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f003 fec1 	bl	800ae80 <tcp_send_fin>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2209      	movs	r2, #9
 800710e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007110:	e005      	b.n	800711e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e01c      	b.n	8007150 <tcp_close_shutdown_fin+0xb8>
      break;
 8007116:	bf00      	nop
 8007118:	e002      	b.n	8007120 <tcp_close_shutdown_fin+0x88>
      break;
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <tcp_close_shutdown_fin+0x88>
      break;
 800711e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f003 ffe7 	bl	800b0fc <tcp_output>
 800712e:	e00d      	b.n	800714c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d108      	bne.n	800714c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8b5b      	ldrh	r3, [r3, #26]
 800713e:	f043 0308 	orr.w	r3, r3, #8
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	e001      	b.n	8007150 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800714c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	08010af4 	.word	0x08010af4
 800715c:	08010ba4 	.word	0x08010ba4
 8007160:	08010b38 	.word	0x08010b38

08007164 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <tcp_close+0x22>
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <tcp_close+0x4c>)
 8007174:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007178:	490e      	ldr	r1, [pc, #56]	; (80071b4 <tcp_close+0x50>)
 800717a:	480f      	ldr	r0, [pc, #60]	; (80071b8 <tcp_close+0x54>)
 800717c:	f008 f828 	bl	800f1d0 <iprintf>
 8007180:	f06f 030f 	mvn.w	r3, #15
 8007184:	e00f      	b.n	80071a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7d1b      	ldrb	r3, [r3, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d006      	beq.n	800719c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8b5b      	ldrh	r3, [r3, #26]
 8007192:	f043 0310 	orr.w	r3, r3, #16
 8007196:	b29a      	uxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800719c:	2101      	movs	r1, #1
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fe9c 	bl	8006edc <tcp_close_shutdown>
 80071a4:	4603      	mov	r3, r0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	08010af4 	.word	0x08010af4
 80071b4:	08010c04 	.word	0x08010c04
 80071b8:	08010b38 	.word	0x08010b38

080071bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08e      	sub	sp, #56	; 0x38
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d107      	bne.n	80071dc <tcp_abandon+0x20>
 80071cc:	4b52      	ldr	r3, [pc, #328]	; (8007318 <tcp_abandon+0x15c>)
 80071ce:	f240 223d 	movw	r2, #573	; 0x23d
 80071d2:	4952      	ldr	r1, [pc, #328]	; (800731c <tcp_abandon+0x160>)
 80071d4:	4852      	ldr	r0, [pc, #328]	; (8007320 <tcp_abandon+0x164>)
 80071d6:	f007 fffb 	bl	800f1d0 <iprintf>
 80071da:	e099      	b.n	8007310 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7d1b      	ldrb	r3, [r3, #20]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d106      	bne.n	80071f2 <tcp_abandon+0x36>
 80071e4:	4b4c      	ldr	r3, [pc, #304]	; (8007318 <tcp_abandon+0x15c>)
 80071e6:	f240 2241 	movw	r2, #577	; 0x241
 80071ea:	494e      	ldr	r1, [pc, #312]	; (8007324 <tcp_abandon+0x168>)
 80071ec:	484c      	ldr	r0, [pc, #304]	; (8007320 <tcp_abandon+0x164>)
 80071ee:	f007 ffef 	bl	800f1d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7d1b      	ldrb	r3, [r3, #20]
 80071f6:	2b0a      	cmp	r3, #10
 80071f8:	d107      	bne.n	800720a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	484a      	ldr	r0, [pc, #296]	; (8007328 <tcp_abandon+0x16c>)
 80071fe:	f000 ffbf 	bl	8008180 <tcp_pcb_remove>
    tcp_free(pcb);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fdb8 	bl	8006d78 <tcp_free>
 8007208:	e082      	b.n	8007310 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007224:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7d1b      	ldrb	r3, [r3, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d126      	bne.n	8007282 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8adb      	ldrh	r3, [r3, #22]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02e      	beq.n	800729a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800723c:	4b3b      	ldr	r3, [pc, #236]	; (800732c <tcp_abandon+0x170>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	429a      	cmp	r2, r3
 8007244:	d105      	bne.n	8007252 <tcp_abandon+0x96>
 8007246:	4b39      	ldr	r3, [pc, #228]	; (800732c <tcp_abandon+0x170>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a37      	ldr	r2, [pc, #220]	; (800732c <tcp_abandon+0x170>)
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e013      	b.n	800727a <tcp_abandon+0xbe>
 8007252:	4b36      	ldr	r3, [pc, #216]	; (800732c <tcp_abandon+0x170>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	e00c      	b.n	8007274 <tcp_abandon+0xb8>
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d104      	bne.n	800726e <tcp_abandon+0xb2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e005      	b.n	800727a <tcp_abandon+0xbe>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ef      	bne.n	800725a <tcp_abandon+0x9e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e00b      	b.n	800729a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	8adb      	ldrh	r3, [r3, #22]
 800728a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4828      	ldr	r0, [pc, #160]	; (8007330 <tcp_abandon+0x174>)
 8007290:	f000 ff76 	bl	8008180 <tcp_pcb_remove>
 8007294:	4b27      	ldr	r3, [pc, #156]	; (8007334 <tcp_abandon+0x178>)
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fd1a 	bl	8007ce0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fd11 	bl	8007ce0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fd08 	bl	8007ce0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00e      	beq.n	80072f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3304      	adds	r3, #4
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	8b12      	ldrh	r2, [r2, #24]
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	460b      	mov	r3, r1
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	69b9      	ldr	r1, [r7, #24]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f004 fcc8 	bl	800bc84 <tcp_rst>
    }
    last_state = pcb->state;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7d1b      	ldrb	r3, [r3, #20]
 80072f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fd3c 	bl	8006d78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <tcp_abandon+0x154>
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f06f 010c 	mvn.w	r1, #12
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	4798      	blx	r3
  }
}
 8007310:	3728      	adds	r7, #40	; 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	08010af4 	.word	0x08010af4
 800731c:	08010c38 	.word	0x08010c38
 8007320:	08010b38 	.word	0x08010b38
 8007324:	08010c54 	.word	0x08010c54
 8007328:	20006d3c 	.word	0x20006d3c
 800732c:	20006d38 	.word	0x20006d38
 8007330:	20006d2c 	.word	0x20006d2c
 8007334:	20006d28 	.word	0x20006d28

08007338 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007340:	2101      	movs	r1, #1
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff ff3a 	bl	80071bc <tcp_abandon>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <tcp_update_rcv_ann_wnd+0x1c>
 800735e:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007360:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007364:	4924      	ldr	r1, [pc, #144]	; (80073f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8007366:	4825      	ldr	r0, [pc, #148]	; (80073fc <tcp_update_rcv_ann_wnd+0xac>)
 8007368:	f007 ff32 	bl	800f1d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007374:	4413      	add	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007380:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007384:	bf28      	it	cs
 8007386:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800738a:	b292      	uxth	r2, r2
 800738c:	4413      	add	r3, r2
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	db08      	blt.n	80073a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	e020      	b.n	80073ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd03      	ble.n	80073be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073bc:	e014      	b.n	80073e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d0:	d306      	bcc.n	80073e0 <tcp_update_rcv_ann_wnd+0x90>
 80073d2:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80073d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80073d8:	4909      	ldr	r1, [pc, #36]	; (8007400 <tcp_update_rcv_ann_wnd+0xb0>)
 80073da:	4808      	ldr	r0, [pc, #32]	; (80073fc <tcp_update_rcv_ann_wnd+0xac>)
 80073dc:	f007 fef8 	bl	800f1d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80073e8:	2300      	movs	r3, #0
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	08010af4 	.word	0x08010af4
 80073f8:	08010d50 	.word	0x08010d50
 80073fc:	08010b38 	.word	0x08010b38
 8007400:	08010d74 	.word	0x08010d74

08007404 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <tcp_recved+0x22>
 8007416:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <tcp_recved+0x90>)
 8007418:	f240 32cf 	movw	r2, #975	; 0x3cf
 800741c:	491e      	ldr	r1, [pc, #120]	; (8007498 <tcp_recved+0x94>)
 800741e:	481f      	ldr	r0, [pc, #124]	; (800749c <tcp_recved+0x98>)
 8007420:	f007 fed6 	bl	800f1d0 <iprintf>
 8007424:	e032      	b.n	800748c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d106      	bne.n	800743c <tcp_recved+0x38>
 800742e:	4b19      	ldr	r3, [pc, #100]	; (8007494 <tcp_recved+0x90>)
 8007430:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007434:	491a      	ldr	r1, [pc, #104]	; (80074a0 <tcp_recved+0x9c>)
 8007436:	4819      	ldr	r0, [pc, #100]	; (800749c <tcp_recved+0x98>)
 8007438:	f007 feca 	bl	800f1d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007440:	887b      	ldrh	r3, [r7, #2]
 8007442:	4413      	add	r3, r2
 8007444:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800744c:	d804      	bhi.n	8007458 <tcp_recved+0x54>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007452:	89fa      	ldrh	r2, [r7, #14]
 8007454:	429a      	cmp	r2, r3
 8007456:	d204      	bcs.n	8007462 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800745e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007460:	e002      	b.n	8007468 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	89fa      	ldrh	r2, [r7, #14]
 8007466:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff ff71 	bl	8007350 <tcp_update_rcv_ann_wnd>
 800746e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007476:	d309      	bcc.n	800748c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8b5b      	ldrh	r3, [r3, #26]
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f003 fe38 	bl	800b0fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	08010af4 	.word	0x08010af4
 8007498:	08010d90 	.word	0x08010d90
 800749c:	08010b38 	.word	0x08010b38
 80074a0:	08010da8 	.word	0x08010da8

080074a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074a4:	b5b0      	push	{r4, r5, r7, lr}
 80074a6:	b090      	sub	sp, #64	; 0x40
 80074a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80074b0:	4b94      	ldr	r3, [pc, #592]	; (8007704 <tcp_slowtmr+0x260>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a93      	ldr	r2, [pc, #588]	; (8007704 <tcp_slowtmr+0x260>)
 80074b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074ba:	4b93      	ldr	r3, [pc, #588]	; (8007708 <tcp_slowtmr+0x264>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	4b91      	ldr	r3, [pc, #580]	; (8007708 <tcp_slowtmr+0x264>)
 80074c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80074ca:	4b90      	ldr	r3, [pc, #576]	; (800770c <tcp_slowtmr+0x268>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80074d0:	e29f      	b.n	8007a12 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	7d1b      	ldrb	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <tcp_slowtmr+0x44>
 80074da:	4b8d      	ldr	r3, [pc, #564]	; (8007710 <tcp_slowtmr+0x26c>)
 80074dc:	f240 42be 	movw	r2, #1214	; 0x4be
 80074e0:	498c      	ldr	r1, [pc, #560]	; (8007714 <tcp_slowtmr+0x270>)
 80074e2:	488d      	ldr	r0, [pc, #564]	; (8007718 <tcp_slowtmr+0x274>)
 80074e4:	f007 fe74 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	7d1b      	ldrb	r3, [r3, #20]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d106      	bne.n	80074fe <tcp_slowtmr+0x5a>
 80074f0:	4b87      	ldr	r3, [pc, #540]	; (8007710 <tcp_slowtmr+0x26c>)
 80074f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80074f6:	4989      	ldr	r1, [pc, #548]	; (800771c <tcp_slowtmr+0x278>)
 80074f8:	4887      	ldr	r0, [pc, #540]	; (8007718 <tcp_slowtmr+0x274>)
 80074fa:	f007 fe69 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	7d1b      	ldrb	r3, [r3, #20]
 8007502:	2b0a      	cmp	r3, #10
 8007504:	d106      	bne.n	8007514 <tcp_slowtmr+0x70>
 8007506:	4b82      	ldr	r3, [pc, #520]	; (8007710 <tcp_slowtmr+0x26c>)
 8007508:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800750c:	4984      	ldr	r1, [pc, #528]	; (8007720 <tcp_slowtmr+0x27c>)
 800750e:	4882      	ldr	r0, [pc, #520]	; (8007718 <tcp_slowtmr+0x274>)
 8007510:	f007 fe5e 	bl	800f1d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	7f9a      	ldrb	r2, [r3, #30]
 8007518:	4b7b      	ldr	r3, [pc, #492]	; (8007708 <tcp_slowtmr+0x264>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d105      	bne.n	800752c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800752a:	e272      	b.n	8007a12 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800752c:	4b76      	ldr	r3, [pc, #472]	; (8007708 <tcp_slowtmr+0x264>)
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	7d1b      	ldrb	r3, [r3, #20]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d10a      	bne.n	800755e <tcp_slowtmr+0xba>
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800754e:	2b05      	cmp	r3, #5
 8007550:	d905      	bls.n	800755e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007556:	3301      	adds	r3, #1
 8007558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800755c:	e11e      	b.n	800779c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007564:	2b0b      	cmp	r3, #11
 8007566:	d905      	bls.n	8007574 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756c:	3301      	adds	r3, #1
 800756e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007572:	e113      	b.n	800779c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800757a:	2b00      	cmp	r3, #0
 800757c:	d075      	beq.n	800766a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	2b00      	cmp	r3, #0
 8007584:	d006      	beq.n	8007594 <tcp_slowtmr+0xf0>
 8007586:	4b62      	ldr	r3, [pc, #392]	; (8007710 <tcp_slowtmr+0x26c>)
 8007588:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800758c:	4965      	ldr	r1, [pc, #404]	; (8007724 <tcp_slowtmr+0x280>)
 800758e:	4862      	ldr	r0, [pc, #392]	; (8007718 <tcp_slowtmr+0x274>)
 8007590:	f007 fe1e 	bl	800f1d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <tcp_slowtmr+0x106>
 800759c:	4b5c      	ldr	r3, [pc, #368]	; (8007710 <tcp_slowtmr+0x26c>)
 800759e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80075a2:	4961      	ldr	r1, [pc, #388]	; (8007728 <tcp_slowtmr+0x284>)
 80075a4:	485c      	ldr	r0, [pc, #368]	; (8007718 <tcp_slowtmr+0x274>)
 80075a6:	f007 fe13 	bl	800f1d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	d905      	bls.n	80075c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80075b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b8:	3301      	adds	r3, #1
 80075ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075be:	e0ed      	b.n	800779c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4a58      	ldr	r2, [pc, #352]	; (800772c <tcp_slowtmr+0x288>)
 80075ca:	5cd3      	ldrb	r3, [r2, r3]
 80075cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075d4:	7c7a      	ldrb	r2, [r7, #17]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d907      	bls.n	80075ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075e0:	3301      	adds	r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075f0:	7c7a      	ldrb	r2, [r7, #17]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	f200 80d2 	bhi.w	800779c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80075f8:	2301      	movs	r3, #1
 80075fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007602:	2b00      	cmp	r3, #0
 8007604:	d108      	bne.n	8007618 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007608:	f004 fc30 	bl	800be6c <tcp_zero_window_probe>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d014      	beq.n	800763c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007612:	2300      	movs	r3, #0
 8007614:	623b      	str	r3, [r7, #32]
 8007616:	e011      	b.n	800763c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800761e:	4619      	mov	r1, r3
 8007620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007622:	f003 fae5 	bl	800abf0 <tcp_split_unsent_seg>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d107      	bne.n	800763c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800762c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800762e:	f003 fd65 	bl	800b0fc <tcp_output>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80ac 	beq.w	800779c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007652:	2b06      	cmp	r3, #6
 8007654:	f200 80a2 	bhi.w	800779c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800765e:	3301      	adds	r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007668:	e098      	b.n	800779c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	db0f      	blt.n	8007694 <tcp_slowtmr+0x1f0>
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800767a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800767e:	4293      	cmp	r3, r2
 8007680:	d008      	beq.n	8007694 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007688:	b29b      	uxth	r3, r3
 800768a:	3301      	adds	r3, #1
 800768c:	b29b      	uxth	r3, r3
 800768e:	b21a      	sxth	r2, r3
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80076a0:	429a      	cmp	r2, r3
 80076a2:	db7b      	blt.n	800779c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a6:	f004 f821 	bl	800b6ec <tcp_rexmit_rto_prepare>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <tcp_slowtmr+0x21c>
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d171      	bne.n	800779c <tcp_slowtmr+0x2f8>
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06d      	beq.n	800779c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	7d1b      	ldrb	r3, [r3, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d03a      	beq.n	800773e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076ce:	2b0c      	cmp	r3, #12
 80076d0:	bf28      	it	cs
 80076d2:	230c      	movcs	r3, #12
 80076d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80076dc:	10db      	asrs	r3, r3, #3
 80076de:	b21b      	sxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80076e8:	4413      	add	r3, r2
 80076ea:	7efa      	ldrb	r2, [r7, #27]
 80076ec:	4910      	ldr	r1, [pc, #64]	; (8007730 <tcp_slowtmr+0x28c>)
 80076ee:	5c8a      	ldrb	r2, [r1, r2]
 80076f0:	4093      	lsls	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80076fa:	4293      	cmp	r3, r2
 80076fc:	dc1a      	bgt.n	8007734 <tcp_slowtmr+0x290>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	b21a      	sxth	r2, r3
 8007702:	e019      	b.n	8007738 <tcp_slowtmr+0x294>
 8007704:	20006d30 	.word	0x20006d30
 8007708:	200000de 	.word	0x200000de
 800770c:	20006d2c 	.word	0x20006d2c
 8007710:	08010af4 	.word	0x08010af4
 8007714:	08010e38 	.word	0x08010e38
 8007718:	08010b38 	.word	0x08010b38
 800771c:	08010e64 	.word	0x08010e64
 8007720:	08010e90 	.word	0x08010e90
 8007724:	08010ec0 	.word	0x08010ec0
 8007728:	08010ef4 	.word	0x08010ef4
 800772c:	08012ac0 	.word	0x08012ac0
 8007730:	08012ab0 	.word	0x08012ab0
 8007734:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	2200      	movs	r2, #0
 8007742:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007750:	4293      	cmp	r3, r2
 8007752:	bf28      	it	cs
 8007754:	4613      	movcs	r3, r2
 8007756:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007758:	8a7b      	ldrh	r3, [r7, #18]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	429a      	cmp	r2, r3
 8007774:	d206      	bcs.n	8007784 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	2200      	movs	r2, #0
 8007792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007798:	f004 f818 	bl	800b7cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	7d1b      	ldrb	r3, [r3, #20]
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d111      	bne.n	80077c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	8b5b      	ldrh	r3, [r3, #26]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077b0:	4b9d      	ldr	r3, [pc, #628]	; (8007a28 <tcp_slowtmr+0x584>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b28      	cmp	r3, #40	; 0x28
 80077bc:	d904      	bls.n	80077c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80077be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c2:	3301      	adds	r3, #1
 80077c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	7a5b      	ldrb	r3, [r3, #9]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d04c      	beq.n	800786e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d003      	beq.n	80077e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	d144      	bne.n	800786e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077e4:	4b90      	ldr	r3, [pc, #576]	; (8007a28 <tcp_slowtmr+0x584>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80077f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80077fc:	498b      	ldr	r1, [pc, #556]	; (8007a2c <tcp_slowtmr+0x588>)
 80077fe:	fba1 1303 	umull	r1, r3, r1, r3
 8007802:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007804:	429a      	cmp	r2, r3
 8007806:	d90a      	bls.n	800781e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800780c:	3301      	adds	r3, #1
 800780e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007816:	3301      	adds	r3, #1
 8007818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800781c:	e027      	b.n	800786e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800781e:	4b82      	ldr	r3, [pc, #520]	; (8007a28 <tcp_slowtmr+0x584>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007834:	4618      	mov	r0, r3
 8007836:	4b7e      	ldr	r3, [pc, #504]	; (8007a30 <tcp_slowtmr+0x58c>)
 8007838:	fb03 f300 	mul.w	r3, r3, r0
 800783c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800783e:	497b      	ldr	r1, [pc, #492]	; (8007a2c <tcp_slowtmr+0x588>)
 8007840:	fba1 1303 	umull	r1, r3, r1, r3
 8007844:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007846:	429a      	cmp	r2, r3
 8007848:	d911      	bls.n	800786e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800784a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800784c:	f004 face 	bl	800bdec <tcp_keepalive>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007856:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007864:	3301      	adds	r3, #1
 8007866:	b2da      	uxtb	r2, r3
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	2b00      	cmp	r3, #0
 8007874:	d011      	beq.n	800789a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007876:	4b6c      	ldr	r3, [pc, #432]	; (8007a28 <tcp_slowtmr+0x584>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007886:	4619      	mov	r1, r3
 8007888:	460b      	mov	r3, r1
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	440b      	add	r3, r1
 800788e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007890:	429a      	cmp	r2, r3
 8007892:	d302      	bcc.n	800789a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007896:	f000 fdd7 	bl	8008448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	7d1b      	ldrb	r3, [r3, #20]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d10b      	bne.n	80078ba <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078a2:	4b61      	ldr	r3, [pc, #388]	; (8007a28 <tcp_slowtmr+0x584>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b28      	cmp	r3, #40	; 0x28
 80078ae:	d904      	bls.n	80078ba <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80078b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b4:	3301      	adds	r3, #1
 80078b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	d10b      	bne.n	80078da <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078c2:	4b59      	ldr	r3, [pc, #356]	; (8007a28 <tcp_slowtmr+0x584>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2bf0      	cmp	r3, #240	; 0xf0
 80078ce:	d904      	bls.n	80078da <tcp_slowtmr+0x436>
        ++pcb_remove;
 80078d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d4:	3301      	adds	r3, #1
 80078d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80078da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d060      	beq.n	80079a4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80078ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ec:	f000 fbf8 	bl	80080e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80078f6:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <tcp_slowtmr+0x590>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d106      	bne.n	800790e <tcp_slowtmr+0x46a>
 8007900:	4b4d      	ldr	r3, [pc, #308]	; (8007a38 <tcp_slowtmr+0x594>)
 8007902:	f240 526d 	movw	r2, #1389	; 0x56d
 8007906:	494d      	ldr	r1, [pc, #308]	; (8007a3c <tcp_slowtmr+0x598>)
 8007908:	484d      	ldr	r0, [pc, #308]	; (8007a40 <tcp_slowtmr+0x59c>)
 800790a:	f007 fc61 	bl	800f1d0 <iprintf>
        prev->next = pcb->next;
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e00f      	b.n	8007938 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007918:	4b46      	ldr	r3, [pc, #280]	; (8007a34 <tcp_slowtmr+0x590>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791e:	429a      	cmp	r2, r3
 8007920:	d006      	beq.n	8007930 <tcp_slowtmr+0x48c>
 8007922:	4b45      	ldr	r3, [pc, #276]	; (8007a38 <tcp_slowtmr+0x594>)
 8007924:	f240 5271 	movw	r2, #1393	; 0x571
 8007928:	4946      	ldr	r1, [pc, #280]	; (8007a44 <tcp_slowtmr+0x5a0>)
 800792a:	4845      	ldr	r0, [pc, #276]	; (8007a40 <tcp_slowtmr+0x59c>)
 800792c:	f007 fc50 	bl	800f1d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	4a3f      	ldr	r2, [pc, #252]	; (8007a34 <tcp_slowtmr+0x590>)
 8007936:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007938:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007948:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	3304      	adds	r3, #4
 800794e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007950:	8ad2      	ldrh	r2, [r2, #22]
 8007952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007954:	8b09      	ldrh	r1, [r1, #24]
 8007956:	9102      	str	r1, [sp, #8]
 8007958:	9201      	str	r2, [sp, #4]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462b      	mov	r3, r5
 800795e:	4622      	mov	r2, r4
 8007960:	4601      	mov	r1, r0
 8007962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007964:	f004 f98e 	bl	800bc84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	7d1b      	ldrb	r3, [r3, #20]
 8007972:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f7ff f9fa 	bl	8006d78 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007984:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <tcp_slowtmr+0x5a4>)
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d004      	beq.n	800799a <tcp_slowtmr+0x4f6>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f06f 010c 	mvn.w	r1, #12
 8007996:	68b8      	ldr	r0, [r7, #8]
 8007998:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800799a:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <tcp_slowtmr+0x5a4>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d037      	beq.n	8007a12 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80079a2:	e590      	b.n	80074c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	7f1b      	ldrb	r3, [r3, #28]
 80079b2:	3301      	adds	r3, #1
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	7f1a      	ldrb	r2, [r3, #28]
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	7f5b      	ldrb	r3, [r3, #29]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d325      	bcc.n	8007a12 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80079cc:	4b1e      	ldr	r3, [pc, #120]	; (8007a48 <tcp_slowtmr+0x5a4>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <tcp_slowtmr+0x550>
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e4:	6912      	ldr	r2, [r2, #16]
 80079e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80079f2:	e002      	b.n	80079fa <tcp_slowtmr+0x556>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <tcp_slowtmr+0x5a4>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d000      	beq.n	8007a04 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007a02:	e560      	b.n	80074c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a04:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0e:	f003 fb75 	bl	800b0fc <tcp_output>
  while (pcb != NULL) {
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f47f ad5c 	bne.w	80074d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <tcp_slowtmr+0x5a8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007a24:	e067      	b.n	8007af6 <tcp_slowtmr+0x652>
 8007a26:	bf00      	nop
 8007a28:	20006d30 	.word	0x20006d30
 8007a2c:	10624dd3 	.word	0x10624dd3
 8007a30:	000124f8 	.word	0x000124f8
 8007a34:	20006d2c 	.word	0x20006d2c
 8007a38:	08010af4 	.word	0x08010af4
 8007a3c:	08010f2c 	.word	0x08010f2c
 8007a40:	08010b38 	.word	0x08010b38
 8007a44:	08010f58 	.word	0x08010f58
 8007a48:	20006d28 	.word	0x20006d28
 8007a4c:	20006d3c 	.word	0x20006d3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	7d1b      	ldrb	r3, [r3, #20]
 8007a54:	2b0a      	cmp	r3, #10
 8007a56:	d006      	beq.n	8007a66 <tcp_slowtmr+0x5c2>
 8007a58:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <tcp_slowtmr+0x660>)
 8007a5a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007a5e:	492a      	ldr	r1, [pc, #168]	; (8007b08 <tcp_slowtmr+0x664>)
 8007a60:	482a      	ldr	r0, [pc, #168]	; (8007b0c <tcp_slowtmr+0x668>)
 8007a62:	f007 fbb5 	bl	800f1d0 <iprintf>
    pcb_remove = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a6c:	4b28      	ldr	r3, [pc, #160]	; (8007b10 <tcp_slowtmr+0x66c>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2bf0      	cmp	r3, #240	; 0xf0
 8007a78:	d904      	bls.n	8007a84 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a7e:	3301      	adds	r3, #1
 8007a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02f      	beq.n	8007aec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a8e:	f000 fb27 	bl	80080e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <tcp_slowtmr+0x670>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d106      	bne.n	8007ab0 <tcp_slowtmr+0x60c>
 8007aa2:	4b18      	ldr	r3, [pc, #96]	; (8007b04 <tcp_slowtmr+0x660>)
 8007aa4:	f240 52af 	movw	r2, #1455	; 0x5af
 8007aa8:	491b      	ldr	r1, [pc, #108]	; (8007b18 <tcp_slowtmr+0x674>)
 8007aaa:	4818      	ldr	r0, [pc, #96]	; (8007b0c <tcp_slowtmr+0x668>)
 8007aac:	f007 fb90 	bl	800f1d0 <iprintf>
        prev->next = pcb->next;
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	60da      	str	r2, [r3, #12]
 8007ab8:	e00f      	b.n	8007ada <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007aba:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <tcp_slowtmr+0x670>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d006      	beq.n	8007ad2 <tcp_slowtmr+0x62e>
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <tcp_slowtmr+0x660>)
 8007ac6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007aca:	4914      	ldr	r1, [pc, #80]	; (8007b1c <tcp_slowtmr+0x678>)
 8007acc:	480f      	ldr	r0, [pc, #60]	; (8007b0c <tcp_slowtmr+0x668>)
 8007ace:	f007 fb7f 	bl	800f1d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4a0f      	ldr	r2, [pc, #60]	; (8007b14 <tcp_slowtmr+0x670>)
 8007ad8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007ae4:	69f8      	ldr	r0, [r7, #28]
 8007ae6:	f7ff f947 	bl	8006d78 <tcp_free>
 8007aea:	e004      	b.n	8007af6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1a9      	bne.n	8007a50 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007afc:	bf00      	nop
 8007afe:	3730      	adds	r7, #48	; 0x30
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bdb0      	pop	{r4, r5, r7, pc}
 8007b04:	08010af4 	.word	0x08010af4
 8007b08:	08010f84 	.word	0x08010f84
 8007b0c:	08010b38 	.word	0x08010b38
 8007b10:	20006d30 	.word	0x20006d30
 8007b14:	20006d3c 	.word	0x20006d3c
 8007b18:	08010fb4 	.word	0x08010fb4
 8007b1c:	08010fdc 	.word	0x08010fdc

08007b20 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b26:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <tcp_fasttmr+0xbc>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	4b2b      	ldr	r3, [pc, #172]	; (8007bdc <tcp_fasttmr+0xbc>)
 8007b30:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b32:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <tcp_fasttmr+0xc0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b38:	e048      	b.n	8007bcc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7f9a      	ldrb	r2, [r3, #30]
 8007b3e:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <tcp_fasttmr+0xbc>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d03f      	beq.n	8007bc6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b46:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <tcp_fasttmr+0xbc>)
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8b5b      	ldrh	r3, [r3, #26]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8b5b      	ldrh	r3, [r3, #26]
 8007b5e:	f043 0302 	orr.w	r3, r3, #2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f003 fac7 	bl	800b0fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	8b5b      	ldrh	r3, [r3, #26]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8b5b      	ldrh	r3, [r3, #26]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8b5b      	ldrh	r3, [r3, #26]
 8007b8c:	f023 0308 	bic.w	r3, r3, #8
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fa7e 	bl	8007098 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <tcp_fasttmr+0xc4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f819 	bl	8007be8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <tcp_fasttmr+0xc4>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d000      	beq.n	8007bc0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007bbe:	e7b8      	b.n	8007b32 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	e002      	b.n	8007bcc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1b3      	bne.n	8007b3a <tcp_fasttmr+0x1a>
    }
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200000de 	.word	0x200000de
 8007be0:	20006d2c 	.word	0x20006d2c
 8007be4:	20006d28 	.word	0x20006d28

08007be8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <tcp_process_refused_data+0x22>
 8007bf6:	4b37      	ldr	r3, [pc, #220]	; (8007cd4 <tcp_process_refused_data+0xec>)
 8007bf8:	f240 6209 	movw	r2, #1545	; 0x609
 8007bfc:	4936      	ldr	r1, [pc, #216]	; (8007cd8 <tcp_process_refused_data+0xf0>)
 8007bfe:	4837      	ldr	r0, [pc, #220]	; (8007cdc <tcp_process_refused_data+0xf4>)
 8007c00:	f007 fae6 	bl	800f1d0 <iprintf>
 8007c04:	f06f 030f 	mvn.w	r3, #15
 8007c08:	e060      	b.n	8007ccc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0e:	7b5b      	ldrb	r3, [r3, #13]
 8007c10:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <tcp_process_refused_data+0x58>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6918      	ldr	r0, [r3, #16]
 8007c32:	2300      	movs	r3, #0
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	47a0      	blx	r4
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	e007      	b.n	8007c50 <tcp_process_refused_data+0x68>
 8007c40:	2300      	movs	r3, #0
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	2000      	movs	r0, #0
 8007c48:	f000 f8a2 	bl	8007d90 <tcp_recv_null>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d12a      	bne.n	8007cae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d033      	beq.n	8007cca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c6a:	d005      	beq.n	8007c78 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c70:	3301      	adds	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <tcp_process_refused_data+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6918      	ldr	r0, [r3, #16]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	2200      	movs	r2, #0
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	47a0      	blx	r4
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
 8007c98:	e001      	b.n	8007c9e <tcp_process_refused_data+0xb6>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca2:	f113 0f0d 	cmn.w	r3, #13
 8007ca6:	d110      	bne.n	8007cca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007ca8:	f06f 030c 	mvn.w	r3, #12
 8007cac:	e00e      	b.n	8007ccc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cb2:	f113 0f0d 	cmn.w	r3, #13
 8007cb6:	d102      	bne.n	8007cbe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007cb8:	f06f 030c 	mvn.w	r3, #12
 8007cbc:	e006      	b.n	8007ccc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007cc4:	f06f 0304 	mvn.w	r3, #4
 8007cc8:	e000      	b.n	8007ccc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd90      	pop	{r4, r7, pc}
 8007cd4:	08010af4 	.word	0x08010af4
 8007cd8:	08011004 	.word	0x08011004
 8007cdc:	08010b38 	.word	0x08010b38

08007ce0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007ce8:	e007      	b.n	8007cfa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f809 	bl	8007d08 <tcp_seg_free>
    seg = next;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f4      	bne.n	8007cea <tcp_segs_free+0xa>
  }
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00c      	beq.n	8007d30 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fd78 	bl	8006818 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	2003      	movs	r0, #3
 8007d2c:	f7fd ff7a 	bl	8005c24 <memp_free>
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <tcp_seg_copy+0x1c>
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <tcp_seg_copy+0x4c>)
 8007d48:	f240 6282 	movw	r2, #1666	; 0x682
 8007d4c:	490e      	ldr	r1, [pc, #56]	; (8007d88 <tcp_seg_copy+0x50>)
 8007d4e:	480f      	ldr	r0, [pc, #60]	; (8007d8c <tcp_seg_copy+0x54>)
 8007d50:	f007 fa3e 	bl	800f1d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d54:	2003      	movs	r0, #3
 8007d56:	f7fd ff19 	bl	8005b8c <memp_malloc>
 8007d5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <tcp_seg_copy+0x2e>
    return NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e00a      	b.n	8007d7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d66:	2210      	movs	r2, #16
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f007 fa1d 	bl	800f1aa <memcpy>
  pbuf_ref(cseg->p);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fdef 	bl	8006958 <pbuf_ref>
  return cseg;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	08010af4 	.word	0x08010af4
 8007d88:	08011048 	.word	0x08011048
 8007d8c:	08010b38 	.word	0x08010b38

08007d90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <tcp_recv_null+0x28>
 8007da4:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <tcp_recv_null+0x60>)
 8007da6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007daa:	4912      	ldr	r1, [pc, #72]	; (8007df4 <tcp_recv_null+0x64>)
 8007dac:	4812      	ldr	r0, [pc, #72]	; (8007df8 <tcp_recv_null+0x68>)
 8007dae:	f007 fa0f 	bl	800f1d0 <iprintf>
 8007db2:	f06f 030f 	mvn.w	r3, #15
 8007db6:	e016      	b.n	8007de6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68b8      	ldr	r0, [r7, #8]
 8007dc6:	f7ff fb1d 	bl	8007404 <tcp_recved>
    pbuf_free(p);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe fd24 	bl	8006818 <pbuf_free>
 8007dd0:	e008      	b.n	8007de4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007dda:	68b8      	ldr	r0, [r7, #8]
 8007ddc:	f7ff f9c2 	bl	8007164 <tcp_close>
 8007de0:	4603      	mov	r3, r0
 8007de2:	e000      	b.n	8007de6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	08010af4 	.word	0x08010af4
 8007df4:	08011064 	.word	0x08011064
 8007df8:	08010b38 	.word	0x08010b38

08007dfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db01      	blt.n	8007e12 <tcp_kill_prio+0x16>
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	e000      	b.n	8007e14 <tcp_kill_prio+0x18>
 8007e12:	237f      	movs	r3, #127	; 0x7f
 8007e14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d034      	beq.n	8007e86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e2a:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <tcp_kill_prio+0x94>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e01f      	b.n	8007e72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	7d5b      	ldrb	r3, [r3, #21]
 8007e36:	7afa      	ldrb	r2, [r7, #11]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d80c      	bhi.n	8007e56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e40:	7afa      	ldrb	r2, [r7, #11]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d112      	bne.n	8007e6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <tcp_kill_prio+0x98>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d80a      	bhi.n	8007e6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <tcp_kill_prio+0x98>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	7d5b      	ldrb	r3, [r3, #21]
 8007e6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1dc      	bne.n	8007e32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7ff fa5a 	bl	8007338 <tcp_abort>
 8007e84:	e000      	b.n	8007e88 <tcp_kill_prio+0x8c>
    return;
 8007e86:	bf00      	nop
  }
}
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20006d2c 	.word	0x20006d2c
 8007e94:	20006d30 	.word	0x20006d30

08007e98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d009      	beq.n	8007ebc <tcp_kill_state+0x24>
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d006      	beq.n	8007ebc <tcp_kill_state+0x24>
 8007eae:	4b1a      	ldr	r3, [pc, #104]	; (8007f18 <tcp_kill_state+0x80>)
 8007eb0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007eb4:	4919      	ldr	r1, [pc, #100]	; (8007f1c <tcp_kill_state+0x84>)
 8007eb6:	481a      	ldr	r0, [pc, #104]	; (8007f20 <tcp_kill_state+0x88>)
 8007eb8:	f007 f98a 	bl	800f1d0 <iprintf>

  inactivity = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ec4:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <tcp_kill_state+0x8c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e017      	b.n	8007efc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	7d1b      	ldrb	r3, [r3, #20]
 8007ed0:	79fa      	ldrb	r2, [r7, #7]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d10f      	bne.n	8007ef6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <tcp_kill_state+0x90>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d807      	bhi.n	8007ef6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <tcp_kill_state+0x90>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e4      	bne.n	8007ecc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6938      	ldr	r0, [r7, #16]
 8007f0c:	f7ff f956 	bl	80071bc <tcp_abandon>
  }
}
 8007f10:	bf00      	nop
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	08010af4 	.word	0x08010af4
 8007f1c:	08011080 	.word	0x08011080
 8007f20:	08010b38 	.word	0x08010b38
 8007f24:	20006d2c 	.word	0x20006d2c
 8007f28:	20006d30 	.word	0x20006d30

08007f2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f3a:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <tcp_kill_timewait+0x58>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e012      	b.n	8007f68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <tcp_kill_timewait+0x5c>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d807      	bhi.n	8007f62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f52:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <tcp_kill_timewait+0x5c>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e9      	bne.n	8007f42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f74:	68b8      	ldr	r0, [r7, #8]
 8007f76:	f7ff f9df 	bl	8007338 <tcp_abort>
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20006d3c 	.word	0x20006d3c
 8007f88:	20006d30 	.word	0x20006d30

08007f8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007f92:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <tcp_handle_closepend+0x48>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f98:	e014      	b.n	8007fc4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8b5b      	ldrh	r3, [r3, #26]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d009      	beq.n	8007fc0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8b5b      	ldrh	r3, [r3, #26]
 8007fb0:	f023 0308 	bic.w	r3, r3, #8
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f86c 	bl	8007098 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e7      	bne.n	8007f9a <tcp_handle_closepend+0xe>
  }
}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20006d2c 	.word	0x20006d2c

08007fd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	f7fd fdd2 	bl	8005b8c <memp_malloc>
 8007fe8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d126      	bne.n	800803e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007ff0:	f7ff ffcc 	bl	8007f8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007ff4:	f7ff ff9a 	bl	8007f2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f7fd fdc7 	bl	8005b8c <memp_malloc>
 8007ffe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d11b      	bne.n	800803e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008006:	2009      	movs	r0, #9
 8008008:	f7ff ff46 	bl	8007e98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800800c:	2001      	movs	r0, #1
 800800e:	f7fd fdbd 	bl	8005b8c <memp_malloc>
 8008012:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d111      	bne.n	800803e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800801a:	2008      	movs	r0, #8
 800801c:	f7ff ff3c 	bl	8007e98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008020:	2001      	movs	r0, #1
 8008022:	f7fd fdb3 	bl	8005b8c <memp_malloc>
 8008026:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d107      	bne.n	800803e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fee3 	bl	8007dfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008036:	2001      	movs	r0, #1
 8008038:	f7fd fda8 	bl	8005b8c <memp_malloc>
 800803c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d03f      	beq.n	80080c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008044:	229c      	movs	r2, #156	; 0x9c
 8008046:	2100      	movs	r1, #0
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f007 f8b9 	bl	800f1c0 <memset>
    pcb->prio = prio;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	79fa      	ldrb	r2, [r7, #7]
 8008052:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800805a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008064:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f44f 7206 	mov.w	r2, #536	; 0x218
 800807a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2206      	movs	r2, #6
 8008080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2206      	movs	r2, #6
 8008088:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008090:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <tcp_alloc+0xf8>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <tcp_alloc+0xfc>)
 80080a4:	781a      	ldrb	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80080b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4a08      	ldr	r2, [pc, #32]	; (80080d8 <tcp_alloc+0x100>)
 80080b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4a07      	ldr	r2, [pc, #28]	; (80080dc <tcp_alloc+0x104>)
 80080c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20006d30 	.word	0x20006d30
 80080d4:	200000de 	.word	0x200000de
 80080d8:	08007d91 	.word	0x08007d91
 80080dc:	006ddd00 	.word	0x006ddd00

080080e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d107      	bne.n	80080fe <tcp_pcb_purge+0x1e>
 80080ee:	4b21      	ldr	r3, [pc, #132]	; (8008174 <tcp_pcb_purge+0x94>)
 80080f0:	f640 0251 	movw	r2, #2129	; 0x851
 80080f4:	4920      	ldr	r1, [pc, #128]	; (8008178 <tcp_pcb_purge+0x98>)
 80080f6:	4821      	ldr	r0, [pc, #132]	; (800817c <tcp_pcb_purge+0x9c>)
 80080f8:	f007 f86a 	bl	800f1d0 <iprintf>
 80080fc:	e037      	b.n	800816e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7d1b      	ldrb	r3, [r3, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d033      	beq.n	800816e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800810a:	2b0a      	cmp	r3, #10
 800810c:	d02f      	beq.n	800816e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008112:	2b01      	cmp	r3, #1
 8008114:	d02b      	beq.n	800816e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fb78 	bl	8006818 <pbuf_free>
      pcb->refused_data = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f986 	bl	8008448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008142:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fdc9 	bl	8007ce0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fdc4 	bl	8007ce0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	66da      	str	r2, [r3, #108]	; 0x6c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	08010af4 	.word	0x08010af4
 8008178:	08011140 	.word	0x08011140
 800817c:	08010b38 	.word	0x08010b38

08008180 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <tcp_pcb_remove+0x1e>
 8008190:	4b3e      	ldr	r3, [pc, #248]	; (800828c <tcp_pcb_remove+0x10c>)
 8008192:	f640 0283 	movw	r2, #2179	; 0x883
 8008196:	493e      	ldr	r1, [pc, #248]	; (8008290 <tcp_pcb_remove+0x110>)
 8008198:	483e      	ldr	r0, [pc, #248]	; (8008294 <tcp_pcb_remove+0x114>)
 800819a:	f007 f819 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <tcp_pcb_remove+0x32>
 80081a4:	4b39      	ldr	r3, [pc, #228]	; (800828c <tcp_pcb_remove+0x10c>)
 80081a6:	f640 0284 	movw	r2, #2180	; 0x884
 80081aa:	493b      	ldr	r1, [pc, #236]	; (8008298 <tcp_pcb_remove+0x118>)
 80081ac:	4839      	ldr	r0, [pc, #228]	; (8008294 <tcp_pcb_remove+0x114>)
 80081ae:	f007 f80f 	bl	800f1d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d105      	bne.n	80081c8 <tcp_pcb_remove+0x48>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e013      	b.n	80081f0 <tcp_pcb_remove+0x70>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e00c      	b.n	80081ea <tcp_pcb_remove+0x6a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d104      	bne.n	80081e4 <tcp_pcb_remove+0x64>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	e005      	b.n	80081f0 <tcp_pcb_remove+0x70>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ef      	bne.n	80081d0 <tcp_pcb_remove+0x50>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80081f6:	6838      	ldr	r0, [r7, #0]
 80081f8:	f7ff ff72 	bl	80080e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	2b0a      	cmp	r3, #10
 8008202:	d013      	beq.n	800822c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008208:	2b01      	cmp	r3, #1
 800820a:	d00f      	beq.n	800822c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	8b5b      	ldrh	r3, [r3, #26]
 8008210:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	8b5b      	ldrh	r3, [r3, #26]
 800821c:	f043 0302 	orr.w	r3, r3, #2
 8008220:	b29a      	uxth	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008226:	6838      	ldr	r0, [r7, #0]
 8008228:	f002 ff68 	bl	800b0fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	7d1b      	ldrb	r3, [r3, #20]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d020      	beq.n	8008276 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <tcp_pcb_remove+0xca>
 800823c:	4b13      	ldr	r3, [pc, #76]	; (800828c <tcp_pcb_remove+0x10c>)
 800823e:	f640 0293 	movw	r2, #2195	; 0x893
 8008242:	4916      	ldr	r1, [pc, #88]	; (800829c <tcp_pcb_remove+0x11c>)
 8008244:	4813      	ldr	r0, [pc, #76]	; (8008294 <tcp_pcb_remove+0x114>)
 8008246:	f006 ffc3 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <tcp_pcb_remove+0xe0>
 8008252:	4b0e      	ldr	r3, [pc, #56]	; (800828c <tcp_pcb_remove+0x10c>)
 8008254:	f640 0294 	movw	r2, #2196	; 0x894
 8008258:	4911      	ldr	r1, [pc, #68]	; (80082a0 <tcp_pcb_remove+0x120>)
 800825a:	480e      	ldr	r0, [pc, #56]	; (8008294 <tcp_pcb_remove+0x114>)
 800825c:	f006 ffb8 	bl	800f1d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <tcp_pcb_remove+0xf6>
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <tcp_pcb_remove+0x10c>)
 800826a:	f640 0296 	movw	r2, #2198	; 0x896
 800826e:	490d      	ldr	r1, [pc, #52]	; (80082a4 <tcp_pcb_remove+0x124>)
 8008270:	4808      	ldr	r0, [pc, #32]	; (8008294 <tcp_pcb_remove+0x114>)
 8008272:	f006 ffad 	bl	800f1d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08010af4 	.word	0x08010af4
 8008290:	0801115c 	.word	0x0801115c
 8008294:	08010b38 	.word	0x08010b38
 8008298:	08011178 	.word	0x08011178
 800829c:	08011198 	.word	0x08011198
 80082a0:	080111b0 	.word	0x080111b0
 80082a4:	080111cc 	.word	0x080111cc

080082a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <tcp_next_iss+0x1c>
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <tcp_next_iss+0x38>)
 80082b8:	f640 02af 	movw	r2, #2223	; 0x8af
 80082bc:	4909      	ldr	r1, [pc, #36]	; (80082e4 <tcp_next_iss+0x3c>)
 80082be:	480a      	ldr	r0, [pc, #40]	; (80082e8 <tcp_next_iss+0x40>)
 80082c0:	f006 ff86 	bl	800f1d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <tcp_next_iss+0x44>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <tcp_next_iss+0x48>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4413      	add	r3, r2
 80082ce:	4a07      	ldr	r2, [pc, #28]	; (80082ec <tcp_next_iss+0x44>)
 80082d0:	6013      	str	r3, [r2, #0]
  return iss;
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <tcp_next_iss+0x44>)
 80082d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	08010af4 	.word	0x08010af4
 80082e4:	080111e4 	.word	0x080111e4
 80082e8:	08010b38 	.word	0x08010b38
 80082ec:	20000020 	.word	0x20000020
 80082f0:	20006d30 	.word	0x20006d30

080082f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <tcp_eff_send_mss_netif+0x22>
 8008308:	4b14      	ldr	r3, [pc, #80]	; (800835c <tcp_eff_send_mss_netif+0x68>)
 800830a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800830e:	4914      	ldr	r1, [pc, #80]	; (8008360 <tcp_eff_send_mss_netif+0x6c>)
 8008310:	4814      	ldr	r0, [pc, #80]	; (8008364 <tcp_eff_send_mss_netif+0x70>)
 8008312:	f006 ff5d 	bl	800f1d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	e019      	b.n	8008354 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	8c1b      	ldrh	r3, [r3, #32]
 8008324:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008326:	8afb      	ldrh	r3, [r7, #22]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d012      	beq.n	8008352 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800832c:	2328      	movs	r3, #40	; 0x28
 800832e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008330:	8afa      	ldrh	r2, [r7, #22]
 8008332:	8abb      	ldrh	r3, [r7, #20]
 8008334:	429a      	cmp	r2, r3
 8008336:	d904      	bls.n	8008342 <tcp_eff_send_mss_netif+0x4e>
 8008338:	8afa      	ldrh	r2, [r7, #22]
 800833a:	8abb      	ldrh	r3, [r7, #20]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	b29b      	uxth	r3, r3
 8008340:	e000      	b.n	8008344 <tcp_eff_send_mss_netif+0x50>
 8008342:	2300      	movs	r3, #0
 8008344:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008346:	8a7a      	ldrh	r2, [r7, #18]
 8008348:	89fb      	ldrh	r3, [r7, #14]
 800834a:	4293      	cmp	r3, r2
 800834c:	bf28      	it	cs
 800834e:	4613      	movcs	r3, r2
 8008350:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008352:	89fb      	ldrh	r3, [r7, #14]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	08010af4 	.word	0x08010af4
 8008360:	08011200 	.word	0x08011200
 8008364:	08010b38 	.word	0x08010b38

08008368 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d119      	bne.n	80083b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800837e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008382:	4910      	ldr	r1, [pc, #64]	; (80083c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008384:	4810      	ldr	r0, [pc, #64]	; (80083c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008386:	f006 ff23 	bl	800f1d0 <iprintf>

  while (pcb != NULL) {
 800838a:	e011      	b.n	80083b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d108      	bne.n	80083aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7fe ffca 	bl	8007338 <tcp_abort>
      pcb = next;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e002      	b.n	80083b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1ea      	bne.n	800838c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	08010af4 	.word	0x08010af4
 80083c4:	08011228 	.word	0x08011228
 80083c8:	08010b38 	.word	0x08010b38

080083cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02a      	beq.n	8008432 <tcp_netif_ip_addr_changed+0x66>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d026      	beq.n	8008432 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <tcp_netif_ip_addr_changed+0x70>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ffbc 	bl	8008368 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80083f0:	4b13      	ldr	r3, [pc, #76]	; (8008440 <tcp_netif_ip_addr_changed+0x74>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff ffb6 	bl	8008368 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d017      	beq.n	8008432 <tcp_netif_ip_addr_changed+0x66>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d013      	beq.n	8008432 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800840a:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <tcp_netif_ip_addr_changed+0x78>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e00c      	b.n	800842c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d103      	bne.n	8008426 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ef      	bne.n	8008412 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20006d2c 	.word	0x20006d2c
 8008440:	20006d38 	.word	0x20006d38
 8008444:	20006d34 	.word	0x20006d34

08008448 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fc3f 	bl	8007ce0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b08d      	sub	sp, #52	; 0x34
 8008474:	af04      	add	r7, sp, #16
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d105      	bne.n	800848c <tcp_input+0x1c>
 8008480:	4b9b      	ldr	r3, [pc, #620]	; (80086f0 <tcp_input+0x280>)
 8008482:	2283      	movs	r2, #131	; 0x83
 8008484:	499b      	ldr	r1, [pc, #620]	; (80086f4 <tcp_input+0x284>)
 8008486:	489c      	ldr	r0, [pc, #624]	; (80086f8 <tcp_input+0x288>)
 8008488:	f006 fea2 	bl	800f1d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4a9a      	ldr	r2, [pc, #616]	; (80086fc <tcp_input+0x28c>)
 8008492:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	895b      	ldrh	r3, [r3, #10]
 8008498:	2b13      	cmp	r3, #19
 800849a:	f240 83c4 	bls.w	8008c26 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800849e:	4b98      	ldr	r3, [pc, #608]	; (8008700 <tcp_input+0x290>)
 80084a0:	695a      	ldr	r2, [r3, #20]
 80084a2:	4b97      	ldr	r3, [pc, #604]	; (8008700 <tcp_input+0x290>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f005 feff 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 83ba 	bne.w	8008c2a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084b6:	4b92      	ldr	r3, [pc, #584]	; (8008700 <tcp_input+0x290>)
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084be:	2be0      	cmp	r3, #224	; 0xe0
 80084c0:	f000 83b3 	beq.w	8008c2a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80084c4:	4b8d      	ldr	r3, [pc, #564]	; (80086fc <tcp_input+0x28c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	899b      	ldrh	r3, [r3, #12]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fc ff08 	bl	80052e2 <lwip_htons>
 80084d2:	4603      	mov	r3, r0
 80084d4:	0b1b      	lsrs	r3, r3, #12
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80084de:	7cbb      	ldrb	r3, [r7, #18]
 80084e0:	2b13      	cmp	r3, #19
 80084e2:	f240 83a2 	bls.w	8008c2a <tcp_input+0x7ba>
 80084e6:	7cbb      	ldrb	r3, [r7, #18]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	891b      	ldrh	r3, [r3, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	f200 839b 	bhi.w	8008c2a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80084f4:	7cbb      	ldrb	r3, [r7, #18]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b14      	subs	r3, #20
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	4b81      	ldr	r3, [pc, #516]	; (8008704 <tcp_input+0x294>)
 80084fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008500:	4b81      	ldr	r3, [pc, #516]	; (8008708 <tcp_input+0x298>)
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	895a      	ldrh	r2, [r3, #10]
 800850a:	7cbb      	ldrb	r3, [r7, #18]
 800850c:	b29b      	uxth	r3, r3
 800850e:	429a      	cmp	r2, r3
 8008510:	d309      	bcc.n	8008526 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008512:	4b7c      	ldr	r3, [pc, #496]	; (8008704 <tcp_input+0x294>)
 8008514:	881a      	ldrh	r2, [r3, #0]
 8008516:	4b7d      	ldr	r3, [pc, #500]	; (800870c <tcp_input+0x29c>)
 8008518:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800851a:	7cbb      	ldrb	r3, [r7, #18]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe f8f4 	bl	800670c <pbuf_remove_header>
 8008524:	e04e      	b.n	80085c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d105      	bne.n	800853a <tcp_input+0xca>
 800852e:	4b70      	ldr	r3, [pc, #448]	; (80086f0 <tcp_input+0x280>)
 8008530:	22c2      	movs	r2, #194	; 0xc2
 8008532:	4977      	ldr	r1, [pc, #476]	; (8008710 <tcp_input+0x2a0>)
 8008534:	4870      	ldr	r0, [pc, #448]	; (80086f8 <tcp_input+0x288>)
 8008536:	f006 fe4b 	bl	800f1d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800853a:	2114      	movs	r1, #20
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fe f8e5 	bl	800670c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	895a      	ldrh	r2, [r3, #10]
 8008546:	4b71      	ldr	r3, [pc, #452]	; (800870c <tcp_input+0x29c>)
 8008548:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800854a:	4b6e      	ldr	r3, [pc, #440]	; (8008704 <tcp_input+0x294>)
 800854c:	881a      	ldrh	r2, [r3, #0]
 800854e:	4b6f      	ldr	r3, [pc, #444]	; (800870c <tcp_input+0x29c>)
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008556:	4b6d      	ldr	r3, [pc, #436]	; (800870c <tcp_input+0x29c>)
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe f8d5 	bl	800670c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	895b      	ldrh	r3, [r3, #10]
 8008568:	8a3a      	ldrh	r2, [r7, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	f200 835f 	bhi.w	8008c2e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4a64      	ldr	r2, [pc, #400]	; (8008708 <tcp_input+0x298>)
 8008578:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	8a3a      	ldrh	r2, [r7, #16]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe f8c2 	bl	800670c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	891a      	ldrh	r2, [r3, #8]
 800858c:	8a3b      	ldrh	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	895b      	ldrh	r3, [r3, #10]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <tcp_input+0x13a>
 800859e:	4b54      	ldr	r3, [pc, #336]	; (80086f0 <tcp_input+0x280>)
 80085a0:	22df      	movs	r2, #223	; 0xdf
 80085a2:	495c      	ldr	r1, [pc, #368]	; (8008714 <tcp_input+0x2a4>)
 80085a4:	4854      	ldr	r0, [pc, #336]	; (80086f8 <tcp_input+0x288>)
 80085a6:	f006 fe13 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	891a      	ldrh	r2, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	891b      	ldrh	r3, [r3, #8]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d005      	beq.n	80085c4 <tcp_input+0x154>
 80085b8:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <tcp_input+0x280>)
 80085ba:	22e0      	movs	r2, #224	; 0xe0
 80085bc:	4956      	ldr	r1, [pc, #344]	; (8008718 <tcp_input+0x2a8>)
 80085be:	484e      	ldr	r0, [pc, #312]	; (80086f8 <tcp_input+0x288>)
 80085c0:	f006 fe06 	bl	800f1d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085c4:	4b4d      	ldr	r3, [pc, #308]	; (80086fc <tcp_input+0x28c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	4b4b      	ldr	r3, [pc, #300]	; (80086fc <tcp_input+0x28c>)
 80085ce:	681c      	ldr	r4, [r3, #0]
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fc fe86 	bl	80052e2 <lwip_htons>
 80085d6:	4603      	mov	r3, r0
 80085d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80085da:	4b48      	ldr	r3, [pc, #288]	; (80086fc <tcp_input+0x28c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	885b      	ldrh	r3, [r3, #2]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	4b46      	ldr	r3, [pc, #280]	; (80086fc <tcp_input+0x28c>)
 80085e4:	681c      	ldr	r4, [r3, #0]
 80085e6:	4610      	mov	r0, r2
 80085e8:	f7fc fe7b 	bl	80052e2 <lwip_htons>
 80085ec:	4603      	mov	r3, r0
 80085ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80085f0:	4b42      	ldr	r3, [pc, #264]	; (80086fc <tcp_input+0x28c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4b41      	ldr	r3, [pc, #260]	; (80086fc <tcp_input+0x28c>)
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fc fe86 	bl	800530c <lwip_htonl>
 8008600:	4603      	mov	r3, r0
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	4a45      	ldr	r2, [pc, #276]	; (800871c <tcp_input+0x2ac>)
 8008608:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800860a:	4b3c      	ldr	r3, [pc, #240]	; (80086fc <tcp_input+0x28c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	4b3a      	ldr	r3, [pc, #232]	; (80086fc <tcp_input+0x28c>)
 8008612:	681c      	ldr	r4, [r3, #0]
 8008614:	4610      	mov	r0, r2
 8008616:	f7fc fe79 	bl	800530c <lwip_htonl>
 800861a:	4603      	mov	r3, r0
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <tcp_input+0x2b0>)
 8008622:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008624:	4b35      	ldr	r3, [pc, #212]	; (80086fc <tcp_input+0x28c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	89db      	ldrh	r3, [r3, #14]
 800862a:	b29a      	uxth	r2, r3
 800862c:	4b33      	ldr	r3, [pc, #204]	; (80086fc <tcp_input+0x28c>)
 800862e:	681c      	ldr	r4, [r3, #0]
 8008630:	4610      	mov	r0, r2
 8008632:	f7fc fe56 	bl	80052e2 <lwip_htons>
 8008636:	4603      	mov	r3, r0
 8008638:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800863a:	4b30      	ldr	r3, [pc, #192]	; (80086fc <tcp_input+0x28c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	899b      	ldrh	r3, [r3, #12]
 8008640:	b29b      	uxth	r3, r3
 8008642:	4618      	mov	r0, r3
 8008644:	f7fc fe4d 	bl	80052e2 <lwip_htons>
 8008648:	4603      	mov	r3, r0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008650:	b2da      	uxtb	r2, r3
 8008652:	4b34      	ldr	r3, [pc, #208]	; (8008724 <tcp_input+0x2b4>)
 8008654:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	891a      	ldrh	r2, [r3, #8]
 800865a:	4b33      	ldr	r3, [pc, #204]	; (8008728 <tcp_input+0x2b8>)
 800865c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800865e:	4b31      	ldr	r3, [pc, #196]	; (8008724 <tcp_input+0x2b4>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <tcp_input+0x214>
    tcplen++;
 800866a:	4b2f      	ldr	r3, [pc, #188]	; (8008728 <tcp_input+0x2b8>)
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	4b2d      	ldr	r3, [pc, #180]	; (8008728 <tcp_input+0x2b8>)
 8008674:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	891a      	ldrh	r2, [r3, #8]
 800867a:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <tcp_input+0x2b8>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	f200 82d7 	bhi.w	8008c32 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008684:	2300      	movs	r3, #0
 8008686:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008688:	4b28      	ldr	r3, [pc, #160]	; (800872c <tcp_input+0x2bc>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e09d      	b.n	80087cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	7d1b      	ldrb	r3, [r3, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <tcp_input+0x234>
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <tcp_input+0x280>)
 800869a:	22fb      	movs	r2, #251	; 0xfb
 800869c:	4924      	ldr	r1, [pc, #144]	; (8008730 <tcp_input+0x2c0>)
 800869e:	4816      	ldr	r0, [pc, #88]	; (80086f8 <tcp_input+0x288>)
 80086a0:	f006 fd96 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	7d1b      	ldrb	r3, [r3, #20]
 80086a8:	2b0a      	cmp	r3, #10
 80086aa:	d105      	bne.n	80086b8 <tcp_input+0x248>
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <tcp_input+0x280>)
 80086ae:	22fc      	movs	r2, #252	; 0xfc
 80086b0:	4920      	ldr	r1, [pc, #128]	; (8008734 <tcp_input+0x2c4>)
 80086b2:	4811      	ldr	r0, [pc, #68]	; (80086f8 <tcp_input+0x288>)
 80086b4:	f006 fd8c 	bl	800f1d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	7d1b      	ldrb	r3, [r3, #20]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d105      	bne.n	80086cc <tcp_input+0x25c>
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <tcp_input+0x280>)
 80086c2:	22fd      	movs	r2, #253	; 0xfd
 80086c4:	491c      	ldr	r1, [pc, #112]	; (8008738 <tcp_input+0x2c8>)
 80086c6:	480c      	ldr	r0, [pc, #48]	; (80086f8 <tcp_input+0x288>)
 80086c8:	f006 fd82 	bl	800f1d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	7a1b      	ldrb	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d033      	beq.n	800873c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	7a1a      	ldrb	r2, [r3, #8]
 80086d8:	4b09      	ldr	r3, [pc, #36]	; (8008700 <tcp_input+0x290>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086e0:	3301      	adds	r3, #1
 80086e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d029      	beq.n	800873c <tcp_input+0x2cc>
      prev = pcb;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	61bb      	str	r3, [r7, #24]
      continue;
 80086ec:	e06b      	b.n	80087c6 <tcp_input+0x356>
 80086ee:	bf00      	nop
 80086f0:	0801125c 	.word	0x0801125c
 80086f4:	08011290 	.word	0x08011290
 80086f8:	080112a8 	.word	0x080112a8
 80086fc:	200000f0 	.word	0x200000f0
 8008700:	200037e8 	.word	0x200037e8
 8008704:	200000f4 	.word	0x200000f4
 8008708:	200000f8 	.word	0x200000f8
 800870c:	200000f6 	.word	0x200000f6
 8008710:	080112d0 	.word	0x080112d0
 8008714:	080112e0 	.word	0x080112e0
 8008718:	080112ec 	.word	0x080112ec
 800871c:	20000100 	.word	0x20000100
 8008720:	20000104 	.word	0x20000104
 8008724:	2000010c 	.word	0x2000010c
 8008728:	2000010a 	.word	0x2000010a
 800872c:	20006d2c 	.word	0x20006d2c
 8008730:	0801130c 	.word	0x0801130c
 8008734:	08011334 	.word	0x08011334
 8008738:	08011360 	.word	0x08011360
    }

    if (pcb->remote_port == tcphdr->src &&
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	8b1a      	ldrh	r2, [r3, #24]
 8008740:	4b94      	ldr	r3, [pc, #592]	; (8008994 <tcp_input+0x524>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	429a      	cmp	r2, r3
 800874a:	d13a      	bne.n	80087c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	8ada      	ldrh	r2, [r3, #22]
 8008750:	4b90      	ldr	r3, [pc, #576]	; (8008994 <tcp_input+0x524>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008758:	429a      	cmp	r2, r3
 800875a:	d132      	bne.n	80087c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <tcp_input+0x528>)
 8008762:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008764:	429a      	cmp	r2, r3
 8008766:	d12c      	bne.n	80087c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b8a      	ldr	r3, [pc, #552]	; (8008998 <tcp_input+0x528>)
 800876e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008770:	429a      	cmp	r2, r3
 8008772:	d126      	bne.n	80087c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	429a      	cmp	r2, r3
 800877c:	d106      	bne.n	800878c <tcp_input+0x31c>
 800877e:	4b87      	ldr	r3, [pc, #540]	; (800899c <tcp_input+0x52c>)
 8008780:	f240 120d 	movw	r2, #269	; 0x10d
 8008784:	4986      	ldr	r1, [pc, #536]	; (80089a0 <tcp_input+0x530>)
 8008786:	4887      	ldr	r0, [pc, #540]	; (80089a4 <tcp_input+0x534>)
 8008788:	f006 fd22 	bl	800f1d0 <iprintf>
      if (prev != NULL) {
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <tcp_input+0x338>
        prev->next = pcb->next;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800879a:	4b83      	ldr	r3, [pc, #524]	; (80089a8 <tcp_input+0x538>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80087a2:	4a81      	ldr	r2, [pc, #516]	; (80089a8 <tcp_input+0x538>)
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d111      	bne.n	80087d6 <tcp_input+0x366>
 80087b2:	4b7a      	ldr	r3, [pc, #488]	; (800899c <tcp_input+0x52c>)
 80087b4:	f240 1215 	movw	r2, #277	; 0x115
 80087b8:	497c      	ldr	r1, [pc, #496]	; (80089ac <tcp_input+0x53c>)
 80087ba:	487a      	ldr	r0, [pc, #488]	; (80089a4 <tcp_input+0x534>)
 80087bc:	f006 fd08 	bl	800f1d0 <iprintf>
      break;
 80087c0:	e009      	b.n	80087d6 <tcp_input+0x366>
    }
    prev = pcb;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f47f af5e 	bne.w	8008690 <tcp_input+0x220>
 80087d4:	e000      	b.n	80087d8 <tcp_input+0x368>
      break;
 80087d6:	bf00      	nop
  }

  if (pcb == NULL) {
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 8095 	bne.w	800890a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087e0:	4b73      	ldr	r3, [pc, #460]	; (80089b0 <tcp_input+0x540>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e03f      	b.n	8008868 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	7d1b      	ldrb	r3, [r3, #20]
 80087ec:	2b0a      	cmp	r3, #10
 80087ee:	d006      	beq.n	80087fe <tcp_input+0x38e>
 80087f0:	4b6a      	ldr	r3, [pc, #424]	; (800899c <tcp_input+0x52c>)
 80087f2:	f240 121f 	movw	r2, #287	; 0x11f
 80087f6:	496f      	ldr	r1, [pc, #444]	; (80089b4 <tcp_input+0x544>)
 80087f8:	486a      	ldr	r0, [pc, #424]	; (80089a4 <tcp_input+0x534>)
 80087fa:	f006 fce9 	bl	800f1d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	7a1b      	ldrb	r3, [r3, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	7a1a      	ldrb	r2, [r3, #8]
 800880a:	4b63      	ldr	r3, [pc, #396]	; (8008998 <tcp_input+0x528>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008812:	3301      	adds	r3, #1
 8008814:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008816:	429a      	cmp	r2, r3
 8008818:	d122      	bne.n	8008860 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	8b1a      	ldrh	r2, [r3, #24]
 800881e:	4b5d      	ldr	r3, [pc, #372]	; (8008994 <tcp_input+0x524>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	429a      	cmp	r2, r3
 8008828:	d11b      	bne.n	8008862 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	8ada      	ldrh	r2, [r3, #22]
 800882e:	4b59      	ldr	r3, [pc, #356]	; (8008994 <tcp_input+0x524>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	885b      	ldrh	r3, [r3, #2]
 8008834:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008836:	429a      	cmp	r2, r3
 8008838:	d113      	bne.n	8008862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	4b56      	ldr	r3, [pc, #344]	; (8008998 <tcp_input+0x528>)
 8008840:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008842:	429a      	cmp	r2, r3
 8008844:	d10d      	bne.n	8008862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b53      	ldr	r3, [pc, #332]	; (8008998 <tcp_input+0x528>)
 800884c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800884e:	429a      	cmp	r2, r3
 8008850:	d107      	bne.n	8008862 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008852:	69f8      	ldr	r0, [r7, #28]
 8008854:	f000 fb52 	bl	8008efc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7fd ffdd 	bl	8006818 <pbuf_free>
        return;
 800885e:	e1ee      	b.n	8008c3e <tcp_input+0x7ce>
        continue;
 8008860:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	61fb      	str	r3, [r7, #28]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1bc      	bne.n	80087e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008872:	4b51      	ldr	r3, [pc, #324]	; (80089b8 <tcp_input+0x548>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e02a      	b.n	80088d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	7a1b      	ldrb	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00c      	beq.n	800889c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	7a1a      	ldrb	r2, [r3, #8]
 8008886:	4b44      	ldr	r3, [pc, #272]	; (8008998 <tcp_input+0x528>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800888e:	3301      	adds	r3, #1
 8008890:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008892:	429a      	cmp	r2, r3
 8008894:	d002      	beq.n	800889c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	61bb      	str	r3, [r7, #24]
        continue;
 800889a:	e016      	b.n	80088ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	8ada      	ldrh	r2, [r3, #22]
 80088a0:	4b3c      	ldr	r3, [pc, #240]	; (8008994 <tcp_input+0x524>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d10c      	bne.n	80088c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4b39      	ldr	r3, [pc, #228]	; (8008998 <tcp_input+0x528>)
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d00f      	beq.n	80088d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00d      	beq.n	80088da <tcp_input+0x46a>
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1d1      	bne.n	800887a <tcp_input+0x40a>
 80088d6:	e000      	b.n	80088da <tcp_input+0x46a>
            break;
 80088d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d014      	beq.n	800890a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80088ee:	4b32      	ldr	r3, [pc, #200]	; (80089b8 <tcp_input+0x548>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80088f6:	4a30      	ldr	r2, [pc, #192]	; (80089b8 <tcp_input+0x548>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	f000 f9ff 	bl	8008d00 <tcp_listen_input>
      }
      pbuf_free(p);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7fd ff88 	bl	8006818 <pbuf_free>
      return;
 8008908:	e199      	b.n	8008c3e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8160 	beq.w	8008bd2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008912:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <tcp_input+0x54c>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	891a      	ldrh	r2, [r3, #8]
 800891c:	4b27      	ldr	r3, [pc, #156]	; (80089bc <tcp_input+0x54c>)
 800891e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008920:	4a26      	ldr	r2, [pc, #152]	; (80089bc <tcp_input+0x54c>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008926:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <tcp_input+0x524>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a24      	ldr	r2, [pc, #144]	; (80089bc <tcp_input+0x54c>)
 800892c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800892e:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <tcp_input+0x550>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008934:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <tcp_input+0x554>)
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <tcp_input+0x558>)
 800893c:	2200      	movs	r2, #0
 800893e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <tcp_input+0x55c>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7b5b      	ldrb	r3, [r3, #13]
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895e:	2b00      	cmp	r3, #0
 8008960:	d038      	beq.n	80089d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008962:	69f8      	ldr	r0, [r7, #28]
 8008964:	f7ff f940 	bl	8007be8 <tcp_process_refused_data>
 8008968:	4603      	mov	r3, r0
 800896a:	f113 0f0d 	cmn.w	r3, #13
 800896e:	d007      	beq.n	8008980 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02d      	beq.n	80089d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <tcp_input+0x560>)
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d029      	beq.n	80089d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 8104 	bne.w	8008b92 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800898a:	69f8      	ldr	r0, [r7, #28]
 800898c:	f003 f9cc 	bl	800bd28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008990:	e0ff      	b.n	8008b92 <tcp_input+0x722>
 8008992:	bf00      	nop
 8008994:	200000f0 	.word	0x200000f0
 8008998:	200037e8 	.word	0x200037e8
 800899c:	0801125c 	.word	0x0801125c
 80089a0:	08011388 	.word	0x08011388
 80089a4:	080112a8 	.word	0x080112a8
 80089a8:	20006d2c 	.word	0x20006d2c
 80089ac:	080113b4 	.word	0x080113b4
 80089b0:	20006d3c 	.word	0x20006d3c
 80089b4:	080113e0 	.word	0x080113e0
 80089b8:	20006d34 	.word	0x20006d34
 80089bc:	200000e0 	.word	0x200000e0
 80089c0:	20000110 	.word	0x20000110
 80089c4:	2000010d 	.word	0x2000010d
 80089c8:	20000108 	.word	0x20000108
 80089cc:	2000010c 	.word	0x2000010c
 80089d0:	2000010a 	.word	0x2000010a
      }
    }
    tcp_input_pcb = pcb;
 80089d4:	4a9b      	ldr	r2, [pc, #620]	; (8008c44 <tcp_input+0x7d4>)
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80089da:	69f8      	ldr	r0, [r7, #28]
 80089dc:	f000 fb0a 	bl	8008ff4 <tcp_process>
 80089e0:	4603      	mov	r3, r0
 80089e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80089e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e8:	f113 0f0d 	cmn.w	r3, #13
 80089ec:	f000 80d3 	beq.w	8008b96 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80089f0:	4b95      	ldr	r3, [pc, #596]	; (8008c48 <tcp_input+0x7d8>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d015      	beq.n	8008a28 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <tcp_input+0x5a8>
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	6912      	ldr	r2, [r2, #16]
 8008a10:	f06f 010d 	mvn.w	r1, #13
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a18:	69f9      	ldr	r1, [r7, #28]
 8008a1a:	488c      	ldr	r0, [pc, #560]	; (8008c4c <tcp_input+0x7dc>)
 8008a1c:	f7ff fbb0 	bl	8008180 <tcp_pcb_remove>
        tcp_free(pcb);
 8008a20:	69f8      	ldr	r0, [r7, #28]
 8008a22:	f7fe f9a9 	bl	8006d78 <tcp_free>
 8008a26:	e0c1      	b.n	8008bac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a2c:	4b88      	ldr	r3, [pc, #544]	; (8008c50 <tcp_input+0x7e0>)
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01d      	beq.n	8008a70 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008a34:	4b86      	ldr	r3, [pc, #536]	; (8008c50 <tcp_input+0x7e0>)
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00a      	beq.n	8008a5a <tcp_input+0x5ea>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	6910      	ldr	r0, [r2, #16]
 8008a4e:	89fa      	ldrh	r2, [r7, #14]
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	4798      	blx	r3
 8008a54:	4603      	mov	r3, r0
 8008a56:	74fb      	strb	r3, [r7, #19]
 8008a58:	e001      	b.n	8008a5e <tcp_input+0x5ee>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a62:	f113 0f0d 	cmn.w	r3, #13
 8008a66:	f000 8098 	beq.w	8008b9a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a6a:	4b79      	ldr	r3, [pc, #484]	; (8008c50 <tcp_input+0x7e0>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a70:	69f8      	ldr	r0, [r7, #28]
 8008a72:	f000 f905 	bl	8008c80 <tcp_input_delayed_close>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 8090 	bne.w	8008b9e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008a7e:	4b75      	ldr	r3, [pc, #468]	; (8008c54 <tcp_input+0x7e4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d041      	beq.n	8008b0a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d006      	beq.n	8008a9c <tcp_input+0x62c>
 8008a8e:	4b72      	ldr	r3, [pc, #456]	; (8008c58 <tcp_input+0x7e8>)
 8008a90:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008a94:	4971      	ldr	r1, [pc, #452]	; (8008c5c <tcp_input+0x7ec>)
 8008a96:	4872      	ldr	r0, [pc, #456]	; (8008c60 <tcp_input+0x7f0>)
 8008a98:	f006 fb9a 	bl	800f1d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	8b5b      	ldrh	r3, [r3, #26]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	; (8008c54 <tcp_input+0x7e4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fd feb3 	bl	8006818 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ab2:	69f8      	ldr	r0, [r7, #28]
 8008ab4:	f7fe fc40 	bl	8007338 <tcp_abort>
            goto aborted;
 8008ab8:	e078      	b.n	8008bac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00c      	beq.n	8008ade <tcp_input+0x66e>
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	6918      	ldr	r0, [r3, #16]
 8008ace:	4b61      	ldr	r3, [pc, #388]	; (8008c54 <tcp_input+0x7e4>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	69f9      	ldr	r1, [r7, #28]
 8008ad6:	47a0      	blx	r4
 8008ad8:	4603      	mov	r3, r0
 8008ada:	74fb      	strb	r3, [r7, #19]
 8008adc:	e008      	b.n	8008af0 <tcp_input+0x680>
 8008ade:	4b5d      	ldr	r3, [pc, #372]	; (8008c54 <tcp_input+0x7e4>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	69f9      	ldr	r1, [r7, #28]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7ff f952 	bl	8007d90 <tcp_recv_null>
 8008aec:	4603      	mov	r3, r0
 8008aee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008af0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008af4:	f113 0f0d 	cmn.w	r3, #13
 8008af8:	d053      	beq.n	8008ba2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008afa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008b02:	4b54      	ldr	r3, [pc, #336]	; (8008c54 <tcp_input+0x7e4>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b0a:	4b4f      	ldr	r3, [pc, #316]	; (8008c48 <tcp_input+0x7d8>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d030      	beq.n	8008b78 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b22:	7b5a      	ldrb	r2, [r3, #13]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b28:	f042 0220 	orr.w	r2, r2, #32
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	735a      	strb	r2, [r3, #13]
 8008b30:	e022      	b.n	8008b78 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b3a:	d005      	beq.n	8008b48 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b40:	3301      	adds	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <tcp_input+0x6fa>
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	6918      	ldr	r0, [r3, #16]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	69f9      	ldr	r1, [r7, #28]
 8008b62:	47a0      	blx	r4
 8008b64:	4603      	mov	r3, r0
 8008b66:	74fb      	strb	r3, [r7, #19]
 8008b68:	e001      	b.n	8008b6e <tcp_input+0x6fe>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b72:	f113 0f0d 	cmn.w	r3, #13
 8008b76:	d016      	beq.n	8008ba6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008b78:	4b32      	ldr	r3, [pc, #200]	; (8008c44 <tcp_input+0x7d4>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008b7e:	69f8      	ldr	r0, [r7, #28]
 8008b80:	f000 f87e 	bl	8008c80 <tcp_input_delayed_close>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10f      	bne.n	8008baa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008b8a:	69f8      	ldr	r0, [r7, #28]
 8008b8c:	f002 fab6 	bl	800b0fc <tcp_output>
 8008b90:	e00c      	b.n	8008bac <tcp_input+0x73c>
        goto aborted;
 8008b92:	bf00      	nop
 8008b94:	e00a      	b.n	8008bac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008b96:	bf00      	nop
 8008b98:	e008      	b.n	8008bac <tcp_input+0x73c>
              goto aborted;
 8008b9a:	bf00      	nop
 8008b9c:	e006      	b.n	8008bac <tcp_input+0x73c>
          goto aborted;
 8008b9e:	bf00      	nop
 8008ba0:	e004      	b.n	8008bac <tcp_input+0x73c>
            goto aborted;
 8008ba2:	bf00      	nop
 8008ba4:	e002      	b.n	8008bac <tcp_input+0x73c>
              goto aborted;
 8008ba6:	bf00      	nop
 8008ba8:	e000      	b.n	8008bac <tcp_input+0x73c>
          goto aborted;
 8008baa:	bf00      	nop
    tcp_input_pcb = NULL;
 8008bac:	4b25      	ldr	r3, [pc, #148]	; (8008c44 <tcp_input+0x7d4>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008bb2:	4b28      	ldr	r3, [pc, #160]	; (8008c54 <tcp_input+0x7e4>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <tcp_input+0x7f4>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d03d      	beq.n	8008c3c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <tcp_input+0x7f4>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd fe27 	bl	8006818 <pbuf_free>
      inseg.p = NULL;
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <tcp_input+0x7f4>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008bd0:	e034      	b.n	8008c3c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008bd2:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <tcp_input+0x7f8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	899b      	ldrh	r3, [r3, #12]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fc fb81 	bl	80052e2 <lwip_htons>
 8008be0:	4603      	mov	r3, r0
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d118      	bne.n	8008c1e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bec:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <tcp_input+0x7fc>)
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	4b1f      	ldr	r3, [pc, #124]	; (8008c70 <tcp_input+0x800>)
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <tcp_input+0x804>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <tcp_input+0x7f8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c00:	885b      	ldrh	r3, [r3, #2]
 8008c02:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <tcp_input+0x7f8>)
 8008c06:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c08:	8812      	ldrh	r2, [r2, #0]
 8008c0a:	b292      	uxth	r2, r2
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <tcp_input+0x808>)
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4b19      	ldr	r3, [pc, #100]	; (8008c7c <tcp_input+0x80c>)
 8008c16:	4602      	mov	r2, r0
 8008c18:	2000      	movs	r0, #0
 8008c1a:	f003 f833 	bl	800bc84 <tcp_rst>
    pbuf_free(p);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fd fdfa 	bl	8006818 <pbuf_free>
  return;
 8008c24:	e00a      	b.n	8008c3c <tcp_input+0x7cc>
    goto dropped;
 8008c26:	bf00      	nop
 8008c28:	e004      	b.n	8008c34 <tcp_input+0x7c4>
dropped:
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <tcp_input+0x7c4>
      goto dropped;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <tcp_input+0x7c4>
      goto dropped;
 8008c32:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fd fdef 	bl	8006818 <pbuf_free>
 8008c3a:	e000      	b.n	8008c3e <tcp_input+0x7ce>
  return;
 8008c3c:	bf00      	nop
}
 8008c3e:	3724      	adds	r7, #36	; 0x24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd90      	pop	{r4, r7, pc}
 8008c44:	20006d40 	.word	0x20006d40
 8008c48:	2000010d 	.word	0x2000010d
 8008c4c:	20006d2c 	.word	0x20006d2c
 8008c50:	20000108 	.word	0x20000108
 8008c54:	20000110 	.word	0x20000110
 8008c58:	0801125c 	.word	0x0801125c
 8008c5c:	08011410 	.word	0x08011410
 8008c60:	080112a8 	.word	0x080112a8
 8008c64:	200000e0 	.word	0x200000e0
 8008c68:	200000f0 	.word	0x200000f0
 8008c6c:	20000104 	.word	0x20000104
 8008c70:	2000010a 	.word	0x2000010a
 8008c74:	20000100 	.word	0x20000100
 8008c78:	200037f8 	.word	0x200037f8
 8008c7c:	200037fc 	.word	0x200037fc

08008c80 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <tcp_input_delayed_close+0x1c>
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <tcp_input_delayed_close+0x6c>)
 8008c90:	f240 225a 	movw	r2, #602	; 0x25a
 8008c94:	4916      	ldr	r1, [pc, #88]	; (8008cf0 <tcp_input_delayed_close+0x70>)
 8008c96:	4817      	ldr	r0, [pc, #92]	; (8008cf4 <tcp_input_delayed_close+0x74>)
 8008c98:	f006 fa9a 	bl	800f1d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008c9c:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <tcp_input_delayed_close+0x78>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01c      	beq.n	8008ce2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8b5b      	ldrh	r3, [r3, #26]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <tcp_input_delayed_close+0x50>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6912      	ldr	r2, [r2, #16]
 8008cc8:	f06f 010e 	mvn.w	r1, #14
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	480a      	ldr	r0, [pc, #40]	; (8008cfc <tcp_input_delayed_close+0x7c>)
 8008cd4:	f7ff fa54 	bl	8008180 <tcp_pcb_remove>
    tcp_free(pcb);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fe f84d 	bl	8006d78 <tcp_free>
    return 1;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	0801125c 	.word	0x0801125c
 8008cf0:	0801142c 	.word	0x0801142c
 8008cf4:	080112a8 	.word	0x080112a8
 8008cf8:	2000010d 	.word	0x2000010d
 8008cfc:	20006d2c 	.word	0x20006d2c

08008d00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b08b      	sub	sp, #44	; 0x2c
 8008d04:	af04      	add	r7, sp, #16
 8008d06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d08:	4b6f      	ldr	r3, [pc, #444]	; (8008ec8 <tcp_listen_input+0x1c8>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 80d3 	bne.w	8008ebc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <tcp_listen_input+0x2a>
 8008d1c:	4b6b      	ldr	r3, [pc, #428]	; (8008ecc <tcp_listen_input+0x1cc>)
 8008d1e:	f240 2281 	movw	r2, #641	; 0x281
 8008d22:	496b      	ldr	r1, [pc, #428]	; (8008ed0 <tcp_listen_input+0x1d0>)
 8008d24:	486b      	ldr	r0, [pc, #428]	; (8008ed4 <tcp_listen_input+0x1d4>)
 8008d26:	f006 fa53 	bl	800f1d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d2a:	4b67      	ldr	r3, [pc, #412]	; (8008ec8 <tcp_listen_input+0x1c8>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 0310 	and.w	r3, r3, #16
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d019      	beq.n	8008d6a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d36:	4b68      	ldr	r3, [pc, #416]	; (8008ed8 <tcp_listen_input+0x1d8>)
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	4b68      	ldr	r3, [pc, #416]	; (8008edc <tcp_listen_input+0x1dc>)
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4b67      	ldr	r3, [pc, #412]	; (8008ee0 <tcp_listen_input+0x1e0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d46:	4b67      	ldr	r3, [pc, #412]	; (8008ee4 <tcp_listen_input+0x1e4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d4a:	885b      	ldrh	r3, [r3, #2]
 8008d4c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d4e:	4a65      	ldr	r2, [pc, #404]	; (8008ee4 <tcp_listen_input+0x1e4>)
 8008d50:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d52:	8812      	ldrh	r2, [r2, #0]
 8008d54:	b292      	uxth	r2, r2
 8008d56:	9202      	str	r2, [sp, #8]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	4b63      	ldr	r3, [pc, #396]	; (8008ee8 <tcp_listen_input+0x1e8>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4b63      	ldr	r3, [pc, #396]	; (8008eec <tcp_listen_input+0x1ec>)
 8008d60:	4602      	mov	r2, r0
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f002 ff8e 	bl	800bc84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008d68:	e0aa      	b.n	8008ec0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008d6a:	4b57      	ldr	r3, [pc, #348]	; (8008ec8 <tcp_listen_input+0x1c8>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80a4 	beq.w	8008ec0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7d5b      	ldrb	r3, [r3, #21]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff f92b 	bl	8007fd8 <tcp_alloc>
 8008d82:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d111      	bne.n	8008dae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <tcp_listen_input+0xa8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6910      	ldr	r0, [r2, #16]
 8008d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4798      	blx	r3
 8008da2:	4603      	mov	r3, r0
 8008da4:	73bb      	strb	r3, [r7, #14]
      return;
 8008da6:	e08c      	b.n	8008ec2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008da8:	23f0      	movs	r3, #240	; 0xf0
 8008daa:	73bb      	strb	r3, [r7, #14]
      return;
 8008dac:	e089      	b.n	8008ec2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008dae:	4b50      	ldr	r3, [pc, #320]	; (8008ef0 <tcp_listen_input+0x1f0>)
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008db6:	4b4e      	ldr	r3, [pc, #312]	; (8008ef0 <tcp_listen_input+0x1f0>)
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8ada      	ldrh	r2, [r3, #22]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008dc6:	4b47      	ldr	r3, [pc, #284]	; (8008ee4 <tcp_listen_input+0x1e4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008dd8:	4b41      	ldr	r3, [pc, #260]	; (8008ee0 <tcp_listen_input+0x1e0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008dea:	6978      	ldr	r0, [r7, #20]
 8008dec:	f7ff fa5c 	bl	80082a8 <tcp_next_iss>
 8008df0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e0a:	4b35      	ldr	r3, [pc, #212]	; (8008ee0 <tcp_listen_input+0x1e0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	7a5b      	ldrb	r3, [r3, #9]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7a1a      	ldrb	r2, [r3, #8]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008e38:	4b2e      	ldr	r3, [pc, #184]	; (8008ef4 <tcp_listen_input+0x1f4>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	4a2c      	ldr	r2, [pc, #176]	; (8008ef4 <tcp_listen_input+0x1f4>)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	f003 f8df 	bl	800c008 <tcp_timer_needed>
 8008e4a:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <tcp_listen_input+0x1f8>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008e50:	6978      	ldr	r0, [r7, #20]
 8008e52:	f001 fd8f 	bl	800a974 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008e56:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <tcp_listen_input+0x1e4>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	89db      	ldrh	r3, [r3, #14]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f004 ff83 	bl	800dd84 <ip4_route>
 8008e7e:	4601      	mov	r1, r0
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	3304      	adds	r3, #4
 8008e84:	461a      	mov	r2, r3
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7ff fa34 	bl	80082f4 <tcp_eff_send_mss_netif>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008e94:	2112      	movs	r1, #18
 8008e96:	6978      	ldr	r0, [r7, #20]
 8008e98:	f002 f842 	bl	800af20 <tcp_enqueue_flags>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6978      	ldr	r0, [r7, #20]
 8008eac:	f7fe f986 	bl	80071bc <tcp_abandon>
      return;
 8008eb0:	e007      	b.n	8008ec2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f002 f922 	bl	800b0fc <tcp_output>
  return;
 8008eb8:	bf00      	nop
 8008eba:	e001      	b.n	8008ec0 <tcp_listen_input+0x1c0>
    return;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <tcp_listen_input+0x1c2>
  return;
 8008ec0:	bf00      	nop
}
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd90      	pop	{r4, r7, pc}
 8008ec8:	2000010c 	.word	0x2000010c
 8008ecc:	0801125c 	.word	0x0801125c
 8008ed0:	08011454 	.word	0x08011454
 8008ed4:	080112a8 	.word	0x080112a8
 8008ed8:	20000104 	.word	0x20000104
 8008edc:	2000010a 	.word	0x2000010a
 8008ee0:	20000100 	.word	0x20000100
 8008ee4:	200000f0 	.word	0x200000f0
 8008ee8:	200037f8 	.word	0x200037f8
 8008eec:	200037fc 	.word	0x200037fc
 8008ef0:	200037e8 	.word	0x200037e8
 8008ef4:	20006d2c 	.word	0x20006d2c
 8008ef8:	20006d28 	.word	0x20006d28

08008efc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af04      	add	r7, sp, #16
 8008f02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f04:	4b30      	ldr	r3, [pc, #192]	; (8008fc8 <tcp_timewait_input+0xcc>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d154      	bne.n	8008fba <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <tcp_timewait_input+0x28>
 8008f16:	4b2d      	ldr	r3, [pc, #180]	; (8008fcc <tcp_timewait_input+0xd0>)
 8008f18:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008f1c:	492c      	ldr	r1, [pc, #176]	; (8008fd0 <tcp_timewait_input+0xd4>)
 8008f1e:	482d      	ldr	r0, [pc, #180]	; (8008fd4 <tcp_timewait_input+0xd8>)
 8008f20:	f006 f956 	bl	800f1d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f24:	4b28      	ldr	r3, [pc, #160]	; (8008fc8 <tcp_timewait_input+0xcc>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d02a      	beq.n	8008f86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008f30:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <tcp_timewait_input+0xdc>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	db2d      	blt.n	8008f9a <tcp_timewait_input+0x9e>
 8008f3e:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <tcp_timewait_input+0xdc>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f4a:	440b      	add	r3, r1
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc23      	bgt.n	8008f9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f52:	4b22      	ldr	r3, [pc, #136]	; (8008fdc <tcp_timewait_input+0xe0>)
 8008f54:	6819      	ldr	r1, [r3, #0]
 8008f56:	4b22      	ldr	r3, [pc, #136]	; (8008fe0 <tcp_timewait_input+0xe4>)
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	4b1e      	ldr	r3, [pc, #120]	; (8008fd8 <tcp_timewait_input+0xdc>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f62:	4b20      	ldr	r3, [pc, #128]	; (8008fe4 <tcp_timewait_input+0xe8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <tcp_timewait_input+0xe8>)
 8008f6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f6e:	8812      	ldrh	r2, [r2, #0]
 8008f70:	b292      	uxth	r2, r2
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	4b1c      	ldr	r3, [pc, #112]	; (8008fe8 <tcp_timewait_input+0xec>)
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <tcp_timewait_input+0xf0>)
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f002 fe80 	bl	800bc84 <tcp_rst>
      return;
 8008f84:	e01c      	b.n	8008fc0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <tcp_timewait_input+0xcc>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008f92:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <tcp_timewait_input+0xf4>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <tcp_timewait_input+0xe4>)
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00d      	beq.n	8008fbe <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8b5b      	ldrh	r3, [r3, #26]
 8008fa6:	f043 0302 	orr.w	r3, r3, #2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f002 f8a3 	bl	800b0fc <tcp_output>
  }
  return;
 8008fb6:	bf00      	nop
 8008fb8:	e001      	b.n	8008fbe <tcp_timewait_input+0xc2>
    return;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <tcp_timewait_input+0xc4>
  return;
 8008fbe:	bf00      	nop
}
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	2000010c 	.word	0x2000010c
 8008fcc:	0801125c 	.word	0x0801125c
 8008fd0:	08011474 	.word	0x08011474
 8008fd4:	080112a8 	.word	0x080112a8
 8008fd8:	20000100 	.word	0x20000100
 8008fdc:	20000104 	.word	0x20000104
 8008fe0:	2000010a 	.word	0x2000010a
 8008fe4:	200000f0 	.word	0x200000f0
 8008fe8:	200037f8 	.word	0x200037f8
 8008fec:	200037fc 	.word	0x200037fc
 8008ff0:	20006d30 	.word	0x20006d30

08008ff4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b08d      	sub	sp, #52	; 0x34
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <tcp_process+0x24>
 800900a:	4ba5      	ldr	r3, [pc, #660]	; (80092a0 <tcp_process+0x2ac>)
 800900c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009010:	49a4      	ldr	r1, [pc, #656]	; (80092a4 <tcp_process+0x2b0>)
 8009012:	48a5      	ldr	r0, [pc, #660]	; (80092a8 <tcp_process+0x2b4>)
 8009014:	f006 f8dc 	bl	800f1d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009018:	4ba4      	ldr	r3, [pc, #656]	; (80092ac <tcp_process+0x2b8>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d04e      	beq.n	80090c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7d1b      	ldrb	r3, [r3, #20]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d108      	bne.n	800903e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009030:	4b9f      	ldr	r3, [pc, #636]	; (80092b0 <tcp_process+0x2bc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d123      	bne.n	8009080 <tcp_process+0x8c>
        acceptable = 1;
 8009038:	2301      	movs	r3, #1
 800903a:	76fb      	strb	r3, [r7, #27]
 800903c:	e020      	b.n	8009080 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009042:	4b9c      	ldr	r3, [pc, #624]	; (80092b4 <tcp_process+0x2c0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d102      	bne.n	8009050 <tcp_process+0x5c>
        acceptable = 1;
 800904a:	2301      	movs	r3, #1
 800904c:	76fb      	strb	r3, [r7, #27]
 800904e:	e017      	b.n	8009080 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009050:	4b98      	ldr	r3, [pc, #608]	; (80092b4 <tcp_process+0x2c0>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	db10      	blt.n	8009080 <tcp_process+0x8c>
 800905e:	4b95      	ldr	r3, [pc, #596]	; (80092b4 <tcp_process+0x2c0>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800906a:	440b      	add	r3, r1
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	dc06      	bgt.n	8009080 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8b5b      	ldrh	r3, [r3, #26]
 8009076:	f043 0302 	orr.w	r3, r3, #2
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009080:	7efb      	ldrb	r3, [r7, #27]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01b      	beq.n	80090be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7d1b      	ldrb	r3, [r3, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <tcp_process+0xa8>
 800908e:	4b84      	ldr	r3, [pc, #528]	; (80092a0 <tcp_process+0x2ac>)
 8009090:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009094:	4988      	ldr	r1, [pc, #544]	; (80092b8 <tcp_process+0x2c4>)
 8009096:	4884      	ldr	r0, [pc, #528]	; (80092a8 <tcp_process+0x2b4>)
 8009098:	f006 f89a 	bl	800f1d0 <iprintf>
      recv_flags |= TF_RESET;
 800909c:	4b87      	ldr	r3, [pc, #540]	; (80092bc <tcp_process+0x2c8>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f043 0308 	orr.w	r3, r3, #8
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	4b85      	ldr	r3, [pc, #532]	; (80092bc <tcp_process+0x2c8>)
 80090a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	8b5b      	ldrh	r3, [r3, #26]
 80090ae:	f023 0301 	bic.w	r3, r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80090b8:	f06f 030d 	mvn.w	r3, #13
 80090bc:	e37a      	b.n	80097b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	e378      	b.n	80097b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80090c2:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <tcp_process+0x2b8>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d010      	beq.n	80090f0 <tcp_process+0xfc>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7d1b      	ldrb	r3, [r3, #20]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d00c      	beq.n	80090f0 <tcp_process+0xfc>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d008      	beq.n	80090f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	8b5b      	ldrh	r3, [r3, #26]
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	e361      	b.n	80097b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80090fc:	4b70      	ldr	r3, [pc, #448]	; (80092c0 <tcp_process+0x2cc>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 fc2d 	bl	800a974 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	3b02      	subs	r3, #2
 8009120:	2b07      	cmp	r3, #7
 8009122:	f200 8337 	bhi.w	8009794 <tcp_process+0x7a0>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <tcp_process+0x138>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	0800914d 	.word	0x0800914d
 8009130:	0800937d 	.word	0x0800937d
 8009134:	080094f5 	.word	0x080094f5
 8009138:	0800951f 	.word	0x0800951f
 800913c:	08009643 	.word	0x08009643
 8009140:	080094f5 	.word	0x080094f5
 8009144:	080096cf 	.word	0x080096cf
 8009148:	0800975f 	.word	0x0800975f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800914c:	4b57      	ldr	r3, [pc, #348]	; (80092ac <tcp_process+0x2b8>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80e4 	beq.w	8009322 <tcp_process+0x32e>
 800915a:	4b54      	ldr	r3, [pc, #336]	; (80092ac <tcp_process+0x2b8>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80dd 	beq.w	8009322 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <tcp_process+0x2bc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	f040 80d5 	bne.w	8009322 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009178:	4b4e      	ldr	r3, [pc, #312]	; (80092b4 <tcp_process+0x2c0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800918a:	4b49      	ldr	r3, [pc, #292]	; (80092b0 <tcp_process+0x2bc>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009192:	4b4c      	ldr	r3, [pc, #304]	; (80092c4 <tcp_process+0x2d0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	89db      	ldrh	r3, [r3, #14]
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80091ac:	4b41      	ldr	r3, [pc, #260]	; (80092b4 <tcp_process+0x2c0>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	1e5a      	subs	r2, r3, #1
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2204      	movs	r2, #4
 80091ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4618      	mov	r0, r3
 80091c6:	f004 fddd 	bl	800dd84 <ip4_route>
 80091ca:	4601      	mov	r1, r0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3304      	adds	r3, #4
 80091d0:	461a      	mov	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff f88e 	bl	80082f4 <tcp_eff_send_mss_netif>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091e4:	009a      	lsls	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf38      	it	cc
 80091f4:	460b      	movcc	r3, r1
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d204      	bcs.n	8009204 <tcp_process+0x210>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	b29b      	uxth	r3, r3
 8009202:	e00d      	b.n	8009220 <tcp_process+0x22c>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	f241 121c 	movw	r2, #4380	; 0x111c
 800920e:	4293      	cmp	r3, r2
 8009210:	d904      	bls.n	800921c <tcp_process+0x228>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	b29b      	uxth	r3, r3
 800921a:	e001      	b.n	8009220 <tcp_process+0x22c>
 800921c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800922c:	2b00      	cmp	r3, #0
 800922e:	d106      	bne.n	800923e <tcp_process+0x24a>
 8009230:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <tcp_process+0x2ac>)
 8009232:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009236:	4924      	ldr	r1, [pc, #144]	; (80092c8 <tcp_process+0x2d4>)
 8009238:	481b      	ldr	r0, [pc, #108]	; (80092a8 <tcp_process+0x2b4>)
 800923a:	f005 ffc9 	bl	800f1d0 <iprintf>
        --pcb->snd_queuelen;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d111      	bne.n	800927e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <tcp_process+0x280>
 8009266:	4b0e      	ldr	r3, [pc, #56]	; (80092a0 <tcp_process+0x2ac>)
 8009268:	f44f 725d 	mov.w	r2, #884	; 0x374
 800926c:	4917      	ldr	r1, [pc, #92]	; (80092cc <tcp_process+0x2d8>)
 800926e:	480e      	ldr	r0, [pc, #56]	; (80092a8 <tcp_process+0x2b4>)
 8009270:	f005 ffae 	bl	800f1d0 <iprintf>
          pcb->unsent = rseg->next;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	66da      	str	r2, [r3, #108]	; 0x6c
 800927c:	e003      	b.n	8009286 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009286:	69f8      	ldr	r0, [r7, #28]
 8009288:	f7fe fd3e 	bl	8007d08 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11d      	bne.n	80092d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800929a:	861a      	strh	r2, [r3, #48]	; 0x30
 800929c:	e01f      	b.n	80092de <tcp_process+0x2ea>
 800929e:	bf00      	nop
 80092a0:	0801125c 	.word	0x0801125c
 80092a4:	08011494 	.word	0x08011494
 80092a8:	080112a8 	.word	0x080112a8
 80092ac:	2000010c 	.word	0x2000010c
 80092b0:	20000104 	.word	0x20000104
 80092b4:	20000100 	.word	0x20000100
 80092b8:	080114b0 	.word	0x080114b0
 80092bc:	2000010d 	.word	0x2000010d
 80092c0:	20006d30 	.word	0x20006d30
 80092c4:	200000f0 	.word	0x200000f0
 80092c8:	080114d0 	.word	0x080114d0
 80092cc:	080114e8 	.word	0x080114e8
        } else {
          pcb->rtime = 0;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <tcp_process+0x30a>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6910      	ldr	r0, [r2, #16]
 80092f2:	2200      	movs	r2, #0
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4798      	blx	r3
 80092f8:	4603      	mov	r3, r0
 80092fa:	76bb      	strb	r3, [r7, #26]
 80092fc:	e001      	b.n	8009302 <tcp_process+0x30e>
 80092fe:	2300      	movs	r3, #0
 8009300:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009302:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009306:	f113 0f0d 	cmn.w	r3, #13
 800930a:	d102      	bne.n	8009312 <tcp_process+0x31e>
          return ERR_ABRT;
 800930c:	f06f 030c 	mvn.w	r3, #12
 8009310:	e250      	b.n	80097b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8b5b      	ldrh	r3, [r3, #26]
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009320:	e23a      	b.n	8009798 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009322:	4b9d      	ldr	r3, [pc, #628]	; (8009598 <tcp_process+0x5a4>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8234 	beq.w	8009798 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009330:	4b9a      	ldr	r3, [pc, #616]	; (800959c <tcp_process+0x5a8>)
 8009332:	6819      	ldr	r1, [r3, #0]
 8009334:	4b9a      	ldr	r3, [pc, #616]	; (80095a0 <tcp_process+0x5ac>)
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	4b9a      	ldr	r3, [pc, #616]	; (80095a4 <tcp_process+0x5b0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009340:	4b99      	ldr	r3, [pc, #612]	; (80095a8 <tcp_process+0x5b4>)
 8009342:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009344:	885b      	ldrh	r3, [r3, #2]
 8009346:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009348:	4a97      	ldr	r2, [pc, #604]	; (80095a8 <tcp_process+0x5b4>)
 800934a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800934c:	8812      	ldrh	r2, [r2, #0]
 800934e:	b292      	uxth	r2, r2
 8009350:	9202      	str	r2, [sp, #8]
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	4b95      	ldr	r3, [pc, #596]	; (80095ac <tcp_process+0x5b8>)
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4b95      	ldr	r3, [pc, #596]	; (80095b0 <tcp_process+0x5bc>)
 800935a:	4602      	mov	r2, r0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f002 fc91 	bl	800bc84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009368:	2b05      	cmp	r3, #5
 800936a:	f200 8215 	bhi.w	8009798 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f002 fa51 	bl	800b81c <tcp_rexmit_rto>
      break;
 800937a:	e20d      	b.n	8009798 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800937c:	4b86      	ldr	r3, [pc, #536]	; (8009598 <tcp_process+0x5a4>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 0310 	and.w	r3, r3, #16
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 80a1 	beq.w	80094cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800938a:	4b84      	ldr	r3, [pc, #528]	; (800959c <tcp_process+0x5a8>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	db7e      	blt.n	8009498 <tcp_process+0x4a4>
 800939a:	4b80      	ldr	r3, [pc, #512]	; (800959c <tcp_process+0x5a8>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dc77      	bgt.n	8009498 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2204      	movs	r2, #4
 80093ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80093b6:	23fa      	movs	r3, #250	; 0xfa
 80093b8:	76bb      	strb	r3, [r7, #26]
 80093ba:	e01d      	b.n	80093f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d106      	bne.n	80093d4 <tcp_process+0x3e0>
 80093c6:	4b7b      	ldr	r3, [pc, #492]	; (80095b4 <tcp_process+0x5c0>)
 80093c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80093cc:	497a      	ldr	r1, [pc, #488]	; (80095b8 <tcp_process+0x5c4>)
 80093ce:	487b      	ldr	r0, [pc, #492]	; (80095bc <tcp_process+0x5c8>)
 80093d0:	f005 fefe 	bl	800f1d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <tcp_process+0x400>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6910      	ldr	r0, [r2, #16]
 80093e8:	2200      	movs	r2, #0
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4798      	blx	r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	76bb      	strb	r3, [r7, #26]
 80093f2:	e001      	b.n	80093f8 <tcp_process+0x404>
 80093f4:	23f0      	movs	r3, #240	; 0xf0
 80093f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80093f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009400:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009404:	f113 0f0d 	cmn.w	r3, #13
 8009408:	d002      	beq.n	8009410 <tcp_process+0x41c>
              tcp_abort(pcb);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fd ff94 	bl	8007338 <tcp_abort>
            }
            return ERR_ABRT;
 8009410:	f06f 030c 	mvn.w	r3, #12
 8009414:	e1ce      	b.n	80097b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fae0 	bl	80099dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800941c:	4b68      	ldr	r3, [pc, #416]	; (80095c0 <tcp_process+0x5cc>)
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <tcp_process+0x43c>
            recv_acked--;
 8009424:	4b66      	ldr	r3, [pc, #408]	; (80095c0 <tcp_process+0x5cc>)
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	4b64      	ldr	r3, [pc, #400]	; (80095c0 <tcp_process+0x5cc>)
 800942e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009434:	009a      	lsls	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009440:	428b      	cmp	r3, r1
 8009442:	bf38      	it	cc
 8009444:	460b      	movcc	r3, r1
 8009446:	429a      	cmp	r2, r3
 8009448:	d204      	bcs.n	8009454 <tcp_process+0x460>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	b29b      	uxth	r3, r3
 8009452:	e00d      	b.n	8009470 <tcp_process+0x47c>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	f241 121c 	movw	r2, #4380	; 0x111c
 800945e:	4293      	cmp	r3, r2
 8009460:	d904      	bls.n	800946c <tcp_process+0x478>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	b29b      	uxth	r3, r3
 800946a:	e001      	b.n	8009470 <tcp_process+0x47c>
 800946c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009476:	4b53      	ldr	r3, [pc, #332]	; (80095c4 <tcp_process+0x5d0>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d037      	beq.n	80094f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8b5b      	ldrh	r3, [r3, #26]
 8009486:	f043 0302 	orr.w	r3, r3, #2
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2207      	movs	r2, #7
 8009494:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009496:	e02c      	b.n	80094f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009498:	4b40      	ldr	r3, [pc, #256]	; (800959c <tcp_process+0x5a8>)
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	4b40      	ldr	r3, [pc, #256]	; (80095a0 <tcp_process+0x5ac>)
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <tcp_process+0x5b0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094a8:	4b3f      	ldr	r3, [pc, #252]	; (80095a8 <tcp_process+0x5b4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ac:	885b      	ldrh	r3, [r3, #2]
 80094ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094b0:	4a3d      	ldr	r2, [pc, #244]	; (80095a8 <tcp_process+0x5b4>)
 80094b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094b4:	8812      	ldrh	r2, [r2, #0]
 80094b6:	b292      	uxth	r2, r2
 80094b8:	9202      	str	r2, [sp, #8]
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	4b3b      	ldr	r3, [pc, #236]	; (80095ac <tcp_process+0x5b8>)
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4b3b      	ldr	r3, [pc, #236]	; (80095b0 <tcp_process+0x5bc>)
 80094c2:	4602      	mov	r2, r0
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f002 fbdd 	bl	800bc84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80094ca:	e167      	b.n	800979c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80094cc:	4b32      	ldr	r3, [pc, #200]	; (8009598 <tcp_process+0x5a4>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8161 	beq.w	800979c <tcp_process+0x7a8>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	1e5a      	subs	r2, r3, #1
 80094e0:	4b30      	ldr	r3, [pc, #192]	; (80095a4 <tcp_process+0x5b0>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	f040 8159 	bne.w	800979c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f002 f9b8 	bl	800b860 <tcp_rexmit>
      break;
 80094f0:	e154      	b.n	800979c <tcp_process+0x7a8>
 80094f2:	e153      	b.n	800979c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa71 	bl	80099dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80094fa:	4b32      	ldr	r3, [pc, #200]	; (80095c4 <tcp_process+0x5d0>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 814c 	beq.w	80097a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8b5b      	ldrh	r3, [r3, #26]
 800950c:	f043 0302 	orr.w	r3, r3, #2
 8009510:	b29a      	uxth	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2207      	movs	r2, #7
 800951a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800951c:	e140      	b.n	80097a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa5c 	bl	80099dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009524:	4b27      	ldr	r3, [pc, #156]	; (80095c4 <tcp_process+0x5d0>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d071      	beq.n	8009614 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <tcp_process+0x5a4>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 0310 	and.w	r3, r3, #16
 8009538:	2b00      	cmp	r3, #0
 800953a:	d060      	beq.n	80095fe <tcp_process+0x60a>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009540:	4b16      	ldr	r3, [pc, #88]	; (800959c <tcp_process+0x5a8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d15a      	bne.n	80095fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800954c:	2b00      	cmp	r3, #0
 800954e:	d156      	bne.n	80095fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8b5b      	ldrh	r3, [r3, #26]
 8009554:	f043 0302 	orr.w	r3, r3, #2
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fe fdbe 	bl	80080e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009564:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <tcp_process+0x5d4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	d105      	bne.n	800957a <tcp_process+0x586>
 800956e:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <tcp_process+0x5d4>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4a14      	ldr	r2, [pc, #80]	; (80095c8 <tcp_process+0x5d4>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	e02e      	b.n	80095d8 <tcp_process+0x5e4>
 800957a:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <tcp_process+0x5d4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e027      	b.n	80095d2 <tcp_process+0x5de>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d11f      	bne.n	80095cc <tcp_process+0x5d8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	60da      	str	r2, [r3, #12]
 8009594:	e020      	b.n	80095d8 <tcp_process+0x5e4>
 8009596:	bf00      	nop
 8009598:	2000010c 	.word	0x2000010c
 800959c:	20000104 	.word	0x20000104
 80095a0:	2000010a 	.word	0x2000010a
 80095a4:	20000100 	.word	0x20000100
 80095a8:	200000f0 	.word	0x200000f0
 80095ac:	200037f8 	.word	0x200037f8
 80095b0:	200037fc 	.word	0x200037fc
 80095b4:	0801125c 	.word	0x0801125c
 80095b8:	080114fc 	.word	0x080114fc
 80095bc:	080112a8 	.word	0x080112a8
 80095c0:	20000108 	.word	0x20000108
 80095c4:	2000010d 	.word	0x2000010d
 80095c8:	20006d2c 	.word	0x20006d2c
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1d4      	bne.n	8009582 <tcp_process+0x58e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	60da      	str	r2, [r3, #12]
 80095de:	4b77      	ldr	r3, [pc, #476]	; (80097bc <tcp_process+0x7c8>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	220a      	movs	r2, #10
 80095e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80095ea:	4b75      	ldr	r3, [pc, #468]	; (80097c0 <tcp_process+0x7cc>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60da      	str	r2, [r3, #12]
 80095f2:	4a73      	ldr	r2, [pc, #460]	; (80097c0 <tcp_process+0x7cc>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	f002 fd06 	bl	800c008 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80095fc:	e0d2      	b.n	80097a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8b5b      	ldrh	r3, [r3, #26]
 8009602:	f043 0302 	orr.w	r3, r3, #2
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2208      	movs	r2, #8
 8009610:	751a      	strb	r2, [r3, #20]
      break;
 8009612:	e0c7      	b.n	80097a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009614:	4b6b      	ldr	r3, [pc, #428]	; (80097c4 <tcp_process+0x7d0>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80c1 	beq.w	80097a4 <tcp_process+0x7b0>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009626:	4b68      	ldr	r3, [pc, #416]	; (80097c8 <tcp_process+0x7d4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	f040 80ba 	bne.w	80097a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009634:	2b00      	cmp	r3, #0
 8009636:	f040 80b5 	bne.w	80097a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2206      	movs	r2, #6
 800963e:	751a      	strb	r2, [r3, #20]
      break;
 8009640:	e0b0      	b.n	80097a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9ca 	bl	80099dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009648:	4b60      	ldr	r3, [pc, #384]	; (80097cc <tcp_process+0x7d8>)
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80a9 	beq.w	80097a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8b5b      	ldrh	r3, [r3, #26]
 800965a:	f043 0302 	orr.w	r3, r3, #2
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7fe fd3b 	bl	80080e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800966a:	4b59      	ldr	r3, [pc, #356]	; (80097d0 <tcp_process+0x7dc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d105      	bne.n	8009680 <tcp_process+0x68c>
 8009674:	4b56      	ldr	r3, [pc, #344]	; (80097d0 <tcp_process+0x7dc>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	4a55      	ldr	r2, [pc, #340]	; (80097d0 <tcp_process+0x7dc>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	e013      	b.n	80096a8 <tcp_process+0x6b4>
 8009680:	4b53      	ldr	r3, [pc, #332]	; (80097d0 <tcp_process+0x7dc>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	613b      	str	r3, [r7, #16]
 8009686:	e00c      	b.n	80096a2 <tcp_process+0x6ae>
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d104      	bne.n	800969c <tcp_process+0x6a8>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	60da      	str	r2, [r3, #12]
 800969a:	e005      	b.n	80096a8 <tcp_process+0x6b4>
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1ef      	bne.n	8009688 <tcp_process+0x694>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	60da      	str	r2, [r3, #12]
 80096ae:	4b43      	ldr	r3, [pc, #268]	; (80097bc <tcp_process+0x7c8>)
 80096b0:	2201      	movs	r2, #1
 80096b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	220a      	movs	r2, #10
 80096b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096ba:	4b41      	ldr	r3, [pc, #260]	; (80097c0 <tcp_process+0x7cc>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]
 80096c2:	4a3f      	ldr	r2, [pc, #252]	; (80097c0 <tcp_process+0x7cc>)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	f002 fc9e 	bl	800c008 <tcp_timer_needed>
      }
      break;
 80096cc:	e06c      	b.n	80097a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f984 	bl	80099dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80096d4:	4b3b      	ldr	r3, [pc, #236]	; (80097c4 <tcp_process+0x7d0>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d065      	beq.n	80097ac <tcp_process+0x7b8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096e4:	4b38      	ldr	r3, [pc, #224]	; (80097c8 <tcp_process+0x7d4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d15f      	bne.n	80097ac <tcp_process+0x7b8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d15b      	bne.n	80097ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fe fcf3 	bl	80080e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80096fa:	4b35      	ldr	r3, [pc, #212]	; (80097d0 <tcp_process+0x7dc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d105      	bne.n	8009710 <tcp_process+0x71c>
 8009704:	4b32      	ldr	r3, [pc, #200]	; (80097d0 <tcp_process+0x7dc>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	4a31      	ldr	r2, [pc, #196]	; (80097d0 <tcp_process+0x7dc>)
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e013      	b.n	8009738 <tcp_process+0x744>
 8009710:	4b2f      	ldr	r3, [pc, #188]	; (80097d0 <tcp_process+0x7dc>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e00c      	b.n	8009732 <tcp_process+0x73e>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	429a      	cmp	r2, r3
 8009720:	d104      	bne.n	800972c <tcp_process+0x738>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	60da      	str	r2, [r3, #12]
 800972a:	e005      	b.n	8009738 <tcp_process+0x744>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1ef      	bne.n	8009718 <tcp_process+0x724>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	60da      	str	r2, [r3, #12]
 800973e:	4b1f      	ldr	r3, [pc, #124]	; (80097bc <tcp_process+0x7c8>)
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	220a      	movs	r2, #10
 8009748:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <tcp_process+0x7cc>)
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	4a1b      	ldr	r2, [pc, #108]	; (80097c0 <tcp_process+0x7cc>)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	f002 fc56 	bl	800c008 <tcp_timer_needed>
      }
      break;
 800975c:	e026      	b.n	80097ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f93c 	bl	80099dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009764:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <tcp_process+0x7d0>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01f      	beq.n	80097b0 <tcp_process+0x7bc>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009774:	4b14      	ldr	r3, [pc, #80]	; (80097c8 <tcp_process+0x7d4>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d119      	bne.n	80097b0 <tcp_process+0x7bc>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009780:	2b00      	cmp	r3, #0
 8009782:	d115      	bne.n	80097b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009784:	4b11      	ldr	r3, [pc, #68]	; (80097cc <tcp_process+0x7d8>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	f043 0310 	orr.w	r3, r3, #16
 800978c:	b2da      	uxtb	r2, r3
 800978e:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <tcp_process+0x7d8>)
 8009790:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009792:	e00d      	b.n	80097b0 <tcp_process+0x7bc>
    default:
      break;
 8009794:	bf00      	nop
 8009796:	e00c      	b.n	80097b2 <tcp_process+0x7be>
      break;
 8009798:	bf00      	nop
 800979a:	e00a      	b.n	80097b2 <tcp_process+0x7be>
      break;
 800979c:	bf00      	nop
 800979e:	e008      	b.n	80097b2 <tcp_process+0x7be>
      break;
 80097a0:	bf00      	nop
 80097a2:	e006      	b.n	80097b2 <tcp_process+0x7be>
      break;
 80097a4:	bf00      	nop
 80097a6:	e004      	b.n	80097b2 <tcp_process+0x7be>
      break;
 80097a8:	bf00      	nop
 80097aa:	e002      	b.n	80097b2 <tcp_process+0x7be>
      break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <tcp_process+0x7be>
      break;
 80097b0:	bf00      	nop
  }
  return ERR_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3724      	adds	r7, #36	; 0x24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}
 80097bc:	20006d28 	.word	0x20006d28
 80097c0:	20006d3c 	.word	0x20006d3c
 80097c4:	2000010c 	.word	0x2000010c
 80097c8:	20000104 	.word	0x20000104
 80097cc:	2000010d 	.word	0x2000010d
 80097d0:	20006d2c 	.word	0x20006d2c

080097d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80097d4:	b590      	push	{r4, r7, lr}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <tcp_oos_insert_segment+0x1e>
 80097e4:	4b3b      	ldr	r3, [pc, #236]	; (80098d4 <tcp_oos_insert_segment+0x100>)
 80097e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80097ea:	493b      	ldr	r1, [pc, #236]	; (80098d8 <tcp_oos_insert_segment+0x104>)
 80097ec:	483b      	ldr	r0, [pc, #236]	; (80098dc <tcp_oos_insert_segment+0x108>)
 80097ee:	f005 fcef 	bl	800f1d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	899b      	ldrh	r3, [r3, #12]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fb fd71 	bl	80052e2 <lwip_htons>
 8009800:	4603      	mov	r3, r0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d028      	beq.n	800985e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800980c:	6838      	ldr	r0, [r7, #0]
 800980e:	f7fe fa67 	bl	8007ce0 <tcp_segs_free>
    next = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	e056      	b.n	80098c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	899b      	ldrh	r3, [r3, #12]
 800981e:	b29b      	uxth	r3, r3
 8009820:	4618      	mov	r0, r3
 8009822:	f7fb fd5e 	bl	80052e2 <lwip_htons>
 8009826:	4603      	mov	r3, r0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	899b      	ldrh	r3, [r3, #12]
 8009838:	b29c      	uxth	r4, r3
 800983a:	2001      	movs	r0, #1
 800983c:	f7fb fd51 	bl	80052e2 <lwip_htons>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4322      	orrs	r2, r4
 800984a:	b292      	uxth	r2, r2
 800984c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7fe fa55 	bl	8007d08 <tcp_seg_free>
    while (next &&
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	891b      	ldrh	r3, [r3, #8]
 8009868:	461a      	mov	r2, r3
 800986a:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <tcp_oos_insert_segment+0x10c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	441a      	add	r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	8909      	ldrh	r1, [r1, #8]
 800987a:	440b      	add	r3, r1
 800987c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800987e:	2b00      	cmp	r3, #0
 8009880:	daca      	bge.n	8009818 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01e      	beq.n	80098c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	891b      	ldrh	r3, [r3, #8]
 800988c:	461a      	mov	r2, r3
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <tcp_oos_insert_segment+0x10c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	441a      	add	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800989c:	2b00      	cmp	r3, #0
 800989e:	dd12      	ble.n	80098c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <tcp_oos_insert_segment+0x10c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	891b      	ldrh	r3, [r3, #8]
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7fc fe23 	bl	800650c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	601a      	str	r2, [r3, #0]
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd90      	pop	{r4, r7, pc}
 80098d4:	0801125c 	.word	0x0801125c
 80098d8:	0801151c 	.word	0x0801151c
 80098dc:	080112a8 	.word	0x080112a8
 80098e0:	20000100 	.word	0x20000100

080098e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80098f2:	e03e      	b.n	8009972 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	4618      	mov	r0, r3
 8009904:	f7fd f810 	bl	8006928 <pbuf_clen>
 8009908:	4603      	mov	r3, r0
 800990a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009912:	8a7a      	ldrh	r2, [r7, #18]
 8009914:	429a      	cmp	r2, r3
 8009916:	d906      	bls.n	8009926 <tcp_free_acked_segments+0x42>
 8009918:	4b2a      	ldr	r3, [pc, #168]	; (80099c4 <tcp_free_acked_segments+0xe0>)
 800991a:	f240 4257 	movw	r2, #1111	; 0x457
 800991e:	492a      	ldr	r1, [pc, #168]	; (80099c8 <tcp_free_acked_segments+0xe4>)
 8009920:	482a      	ldr	r0, [pc, #168]	; (80099cc <tcp_free_acked_segments+0xe8>)
 8009922:	f005 fc55 	bl	800f1d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800992c:	8a7b      	ldrh	r3, [r7, #18]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	891a      	ldrh	r2, [r3, #8]
 800993c:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <tcp_free_acked_segments+0xec>)
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	4413      	add	r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <tcp_free_acked_segments+0xec>)
 8009946:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009948:	6978      	ldr	r0, [r7, #20]
 800994a:	f7fe f9dd 	bl	8007d08 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00c      	beq.n	8009972 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <tcp_free_acked_segments+0x8e>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <tcp_free_acked_segments+0x8e>
 8009964:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <tcp_free_acked_segments+0xe0>)
 8009966:	f240 4262 	movw	r2, #1122	; 0x462
 800996a:	491a      	ldr	r1, [pc, #104]	; (80099d4 <tcp_free_acked_segments+0xf0>)
 800996c:	4817      	ldr	r0, [pc, #92]	; (80099cc <tcp_free_acked_segments+0xe8>)
 800996e:	f005 fc2f 	bl	800f1d0 <iprintf>
  while (seg_list != NULL &&
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d020      	beq.n	80099ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fb fcc4 	bl	800530c <lwip_htonl>
 8009984:	4604      	mov	r4, r0
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	891b      	ldrh	r3, [r3, #8]
 800998a:	461d      	mov	r5, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	899b      	ldrh	r3, [r3, #12]
 8009992:	b29b      	uxth	r3, r3
 8009994:	4618      	mov	r0, r3
 8009996:	f7fb fca4 	bl	80052e2 <lwip_htons>
 800999a:	4603      	mov	r3, r0
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <tcp_free_acked_segments+0xc6>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <tcp_free_acked_segments+0xc8>
 80099aa:	2300      	movs	r3, #0
 80099ac:	442b      	add	r3, r5
 80099ae:	18e2      	adds	r2, r4, r3
 80099b0:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <tcp_free_acked_segments+0xf4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd9c      	ble.n	80098f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80099ba:	68bb      	ldr	r3, [r7, #8]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bdb0      	pop	{r4, r5, r7, pc}
 80099c4:	0801125c 	.word	0x0801125c
 80099c8:	08011544 	.word	0x08011544
 80099cc:	080112a8 	.word	0x080112a8
 80099d0:	20000108 	.word	0x20000108
 80099d4:	0801156c 	.word	0x0801156c
 80099d8:	20000104 	.word	0x20000104

080099dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b094      	sub	sp, #80	; 0x50
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <tcp_receive+0x20>
 80099ee:	4ba6      	ldr	r3, [pc, #664]	; (8009c88 <tcp_receive+0x2ac>)
 80099f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80099f4:	49a5      	ldr	r1, [pc, #660]	; (8009c8c <tcp_receive+0x2b0>)
 80099f6:	48a6      	ldr	r0, [pc, #664]	; (8009c90 <tcp_receive+0x2b4>)
 80099f8:	f005 fbea 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d806      	bhi.n	8009a12 <tcp_receive+0x36>
 8009a04:	4ba0      	ldr	r3, [pc, #640]	; (8009c88 <tcp_receive+0x2ac>)
 8009a06:	f240 427c 	movw	r2, #1148	; 0x47c
 8009a0a:	49a2      	ldr	r1, [pc, #648]	; (8009c94 <tcp_receive+0x2b8>)
 8009a0c:	48a0      	ldr	r0, [pc, #640]	; (8009c90 <tcp_receive+0x2b4>)
 8009a0e:	f005 fbdf 	bl	800f1d0 <iprintf>

  if (flags & TCP_ACK) {
 8009a12:	4ba1      	ldr	r3, [pc, #644]	; (8009c98 <tcp_receive+0x2bc>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8263 	beq.w	8009ee6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2c:	4413      	add	r3, r2
 8009a2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a34:	4b99      	ldr	r3, [pc, #612]	; (8009c9c <tcp_receive+0x2c0>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	db1b      	blt.n	8009a76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a42:	4b96      	ldr	r3, [pc, #600]	; (8009c9c <tcp_receive+0x2c0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d106      	bne.n	8009a58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a4e:	4b94      	ldr	r3, [pc, #592]	; (8009ca0 <tcp_receive+0x2c4>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db0e      	blt.n	8009a76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a5c:	4b90      	ldr	r3, [pc, #576]	; (8009ca0 <tcp_receive+0x2c4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d125      	bne.n	8009ab0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a64:	4b8f      	ldr	r3, [pc, #572]	; (8009ca4 <tcp_receive+0x2c8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	89db      	ldrh	r3, [r3, #14]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d91c      	bls.n	8009ab0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009a76:	4b8b      	ldr	r3, [pc, #556]	; (8009ca4 <tcp_receive+0x2c8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	89db      	ldrh	r3, [r3, #14]
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d205      	bcs.n	8009aa0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009aa0:	4b7e      	ldr	r3, [pc, #504]	; (8009c9c <tcp_receive+0x2c0>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009aa8:	4b7d      	ldr	r3, [pc, #500]	; (8009ca0 <tcp_receive+0x2c4>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ab0:	4b7b      	ldr	r3, [pc, #492]	; (8009ca0 <tcp_receive+0x2c4>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	dc58      	bgt.n	8009b70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009abe:	4b7a      	ldr	r3, [pc, #488]	; (8009ca8 <tcp_receive+0x2cc>)
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d14b      	bne.n	8009b5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009ad0:	4413      	add	r3, r2
 8009ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d142      	bne.n	8009b5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	db3d      	blt.n	8009b5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae6:	4b6e      	ldr	r3, [pc, #440]	; (8009ca0 <tcp_receive+0x2c4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d137      	bne.n	8009b5e <tcp_receive+0x182>
              found_dupack = 1;
 8009aee:	2301      	movs	r3, #1
 8009af0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009af8:	2bff      	cmp	r3, #255	; 0xff
 8009afa:	d007      	beq.n	8009b0c <tcp_receive+0x130>
                ++pcb->dupacks;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b02:	3301      	adds	r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d91b      	bls.n	8009b4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b20:	4413      	add	r3, r2
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d30a      	bcc.n	8009b44 <tcp_receive+0x168>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b38:	4413      	add	r3, r2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b42:	e004      	b.n	8009b4e <tcp_receive+0x172>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d902      	bls.n	8009b5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 feed 	bl	800b938 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f040 8160 	bne.w	8009e26 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b6e:	e15a      	b.n	8009e26 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b70:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <tcp_receive+0x2c4>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f2c0 814d 	blt.w	8009e1c <tcp_receive+0x440>
 8009b82:	4b47      	ldr	r3, [pc, #284]	; (8009ca0 <tcp_receive+0x2c4>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f300 8145 	bgt.w	8009e1c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8b5b      	ldrh	r3, [r3, #26]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d010      	beq.n	8009bc0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	f023 0304 	bic.w	r3, r3, #4
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009bce:	10db      	asrs	r3, r3, #3
 8009bd0:	b21b      	sxth	r3, r3
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	b21a      	sxth	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009be8:	4b2d      	ldr	r3, [pc, #180]	; (8009ca0 <tcp_receive+0x2c4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <tcp_receive+0x2c4>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7d1b      	ldrb	r3, [r3, #20]
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	f240 8096 	bls.w	8009d3e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d244      	bcs.n	8009cac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8b5b      	ldrh	r3, [r3, #26]
 8009c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <tcp_receive+0x256>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <tcp_receive+0x258>
 8009c32:	2302      	movs	r3, #2
 8009c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009c38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c42:	fb12 f303 	smulbb	r3, r2, r3
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	bf28      	it	cs
 8009c4e:	4613      	movcs	r3, r2
 8009c50:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c5a:	4413      	add	r3, r2
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d309      	bcc.n	8009c7c <tcp_receive+0x2a0>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c70:	4413      	add	r3, r2
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c7a:	e060      	b.n	8009d3e <tcp_receive+0x362>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c86:	e05a      	b.n	8009d3e <tcp_receive+0x362>
 8009c88:	0801125c 	.word	0x0801125c
 8009c8c:	0801158c 	.word	0x0801158c
 8009c90:	080112a8 	.word	0x080112a8
 8009c94:	080115a8 	.word	0x080115a8
 8009c98:	2000010c 	.word	0x2000010c
 8009c9c:	20000100 	.word	0x20000100
 8009ca0:	20000104 	.word	0x20000104
 8009ca4:	200000f0 	.word	0x200000f0
 8009ca8:	2000010a 	.word	0x2000010a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009cb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cb4:	4413      	add	r3, r2
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d309      	bcc.n	8009cd6 <tcp_receive+0x2fa>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009cc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cca:	4413      	add	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009cd4:	e004      	b.n	8009ce0 <tcp_receive+0x304>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d326      	bcc.n	8009d3e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d10:	4413      	add	r3, r2
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d30a      	bcc.n	8009d34 <tcp_receive+0x358>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d28:	4413      	add	r3, r2
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009d32:	e004      	b.n	8009d3e <tcp_receive+0x362>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d46:	4a98      	ldr	r2, [pc, #608]	; (8009fa8 <tcp_receive+0x5cc>)
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fdcb 	bl	80098e4 <tcp_free_acked_segments>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5c:	4a93      	ldr	r2, [pc, #588]	; (8009fac <tcp_receive+0x5d0>)
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fdc0 	bl	80098e4 <tcp_free_acked_segments>
 8009d64:	4602      	mov	r2, r0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d104      	bne.n	8009d7c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d78:	861a      	strh	r2, [r3, #48]	; 0x30
 8009d7a:	e002      	b.n	8009d82 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009d9e:	4b84      	ldr	r3, [pc, #528]	; (8009fb0 <tcp_receive+0x5d4>)
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	4413      	add	r3, r2
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	8b5b      	ldrh	r3, [r3, #26]
 8009db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d035      	beq.n	8009e24 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d118      	bne.n	8009df2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00c      	beq.n	8009de2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fb fa99 	bl	800530c <lwip_htonl>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc20      	bgt.n	8009e24 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8b5b      	ldrh	r3, [r3, #26]
 8009de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009df0:	e018      	b.n	8009e24 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fb fa84 	bl	800530c <lwip_htonl>
 8009e04:	4603      	mov	r3, r0
 8009e06:	1ae3      	subs	r3, r4, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dc0b      	bgt.n	8009e24 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	8b5b      	ldrh	r3, [r3, #26]
 8009e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e1a:	e003      	b.n	8009e24 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 ff83 	bl	800bd28 <tcp_send_empty_ack>
 8009e22:	e000      	b.n	8009e26 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e24:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d05b      	beq.n	8009ee6 <tcp_receive+0x50a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e32:	4b60      	ldr	r3, [pc, #384]	; (8009fb4 <tcp_receive+0x5d8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	da54      	bge.n	8009ee6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009e3c:	4b5e      	ldr	r3, [pc, #376]	; (8009fb8 <tcp_receive+0x5dc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e5a:	10db      	asrs	r3, r3, #3
 8009e5c:	b21b      	sxth	r3, r3
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e74:	4413      	add	r3, r2
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	b21a      	sxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009e7e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da05      	bge.n	8009e92 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e8a:	425b      	negs	r3, r3
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009e92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009e9c:	109b      	asrs	r3, r3, #2
 8009e9e:	b21b      	sxth	r3, r3
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	b21a      	sxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ec6:	10db      	asrs	r3, r3, #3
 8009ec8:	b21b      	sxth	r3, r3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	b21a      	sxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009ee6:	4b35      	ldr	r3, [pc, #212]	; (8009fbc <tcp_receive+0x5e0>)
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 84e1 	beq.w	800a8b2 <tcp_receive+0xed6>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7d1b      	ldrb	r3, [r3, #20]
 8009ef4:	2b06      	cmp	r3, #6
 8009ef6:	f200 84dc 	bhi.w	800a8b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009efe:	4b30      	ldr	r3, [pc, #192]	; (8009fc0 <tcp_receive+0x5e4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f2c0 808e 	blt.w	800a028 <tcp_receive+0x64c>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f10:	4b2a      	ldr	r3, [pc, #168]	; (8009fbc <tcp_receive+0x5e0>)
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4b2a      	ldr	r3, [pc, #168]	; (8009fc0 <tcp_receive+0x5e4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	3301      	adds	r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f300 8081 	bgt.w	800a028 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f30:	4b23      	ldr	r3, [pc, #140]	; (8009fc0 <tcp_receive+0x5e4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009f38:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <tcp_receive+0x572>
 8009f40:	4b21      	ldr	r3, [pc, #132]	; (8009fc8 <tcp_receive+0x5ec>)
 8009f42:	f240 5294 	movw	r2, #1428	; 0x594
 8009f46:	4921      	ldr	r1, [pc, #132]	; (8009fcc <tcp_receive+0x5f0>)
 8009f48:	4821      	ldr	r0, [pc, #132]	; (8009fd0 <tcp_receive+0x5f4>)
 8009f4a:	f005 f941 	bl	800f1d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d906      	bls.n	8009f66 <tcp_receive+0x58a>
 8009f58:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <tcp_receive+0x5ec>)
 8009f5a:	f240 5295 	movw	r2, #1429	; 0x595
 8009f5e:	491d      	ldr	r1, [pc, #116]	; (8009fd4 <tcp_receive+0x5f8>)
 8009f60:	481b      	ldr	r0, [pc, #108]	; (8009fd0 <tcp_receive+0x5f4>)
 8009f62:	f005 f935 	bl	800f1d0 <iprintf>
      off = (u16_t)off32;
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009f6c:	4b15      	ldr	r3, [pc, #84]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	891b      	ldrh	r3, [r3, #8]
 8009f72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d906      	bls.n	8009f88 <tcp_receive+0x5ac>
 8009f7a:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <tcp_receive+0x5ec>)
 8009f7c:	f240 5297 	movw	r2, #1431	; 0x597
 8009f80:	4915      	ldr	r1, [pc, #84]	; (8009fd8 <tcp_receive+0x5fc>)
 8009f82:	4813      	ldr	r0, [pc, #76]	; (8009fd0 <tcp_receive+0x5f4>)
 8009f84:	f005 f924 	bl	800f1d0 <iprintf>
      inseg.len -= off;
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f8a:	891a      	ldrh	r2, [r3, #8]
 8009f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	4b0b      	ldr	r3, [pc, #44]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f96:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <tcp_receive+0x5e8>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	891a      	ldrh	r2, [r3, #8]
 8009f9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009fa6:	e029      	b.n	8009ffc <tcp_receive+0x620>
 8009fa8:	080115c4 	.word	0x080115c4
 8009fac:	080115cc 	.word	0x080115cc
 8009fb0:	20000108 	.word	0x20000108
 8009fb4:	20000104 	.word	0x20000104
 8009fb8:	20006d30 	.word	0x20006d30
 8009fbc:	2000010a 	.word	0x2000010a
 8009fc0:	20000100 	.word	0x20000100
 8009fc4:	200000e0 	.word	0x200000e0
 8009fc8:	0801125c 	.word	0x0801125c
 8009fcc:	080115d4 	.word	0x080115d4
 8009fd0:	080112a8 	.word	0x080112a8
 8009fd4:	080115e4 	.word	0x080115e4
 8009fd8:	080115f4 	.word	0x080115f4
        off -= p->len;
 8009fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009fee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ffe:	895b      	ldrh	r3, [r3, #10]
 800a000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a004:	429a      	cmp	r2, r3
 800a006:	d8e9      	bhi.n	8009fdc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a00c:	4619      	mov	r1, r3
 800a00e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a010:	f7fc fb7c 	bl	800670c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	4a91      	ldr	r2, [pc, #580]	; (800a260 <tcp_receive+0x884>)
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	4b91      	ldr	r3, [pc, #580]	; (800a264 <tcp_receive+0x888>)
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	4a8f      	ldr	r2, [pc, #572]	; (800a260 <tcp_receive+0x884>)
 800a022:	6812      	ldr	r2, [r2, #0]
 800a024:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a026:	e00d      	b.n	800a044 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a028:	4b8d      	ldr	r3, [pc, #564]	; (800a260 <tcp_receive+0x884>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	da06      	bge.n	800a044 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8b5b      	ldrh	r3, [r3, #26]
 800a03a:	f043 0302 	orr.w	r3, r3, #2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a044:	4b86      	ldr	r3, [pc, #536]	; (800a260 <tcp_receive+0x884>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f2c0 842a 	blt.w	800a8a8 <tcp_receive+0xecc>
 800a054:	4b82      	ldr	r3, [pc, #520]	; (800a260 <tcp_receive+0x884>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a060:	440b      	add	r3, r1
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	3301      	adds	r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	f300 841e 	bgt.w	800a8a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a070:	4b7b      	ldr	r3, [pc, #492]	; (800a260 <tcp_receive+0x884>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	429a      	cmp	r2, r3
 800a076:	f040 829a 	bne.w	800a5ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a07a:	4b7a      	ldr	r3, [pc, #488]	; (800a264 <tcp_receive+0x888>)
 800a07c:	891c      	ldrh	r4, [r3, #8]
 800a07e:	4b79      	ldr	r3, [pc, #484]	; (800a264 <tcp_receive+0x888>)
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	899b      	ldrh	r3, [r3, #12]
 800a084:	b29b      	uxth	r3, r3
 800a086:	4618      	mov	r0, r3
 800a088:	f7fb f92b 	bl	80052e2 <lwip_htons>
 800a08c:	4603      	mov	r3, r0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 0303 	and.w	r3, r3, #3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <tcp_receive+0x6c0>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <tcp_receive+0x6c2>
 800a09c:	2300      	movs	r3, #0
 800a09e:	4423      	add	r3, r4
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	4b71      	ldr	r3, [pc, #452]	; (800a268 <tcp_receive+0x88c>)
 800a0a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0aa:	4b6f      	ldr	r3, [pc, #444]	; (800a268 <tcp_receive+0x88c>)
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d275      	bcs.n	800a19e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0b2:	4b6c      	ldr	r3, [pc, #432]	; (800a264 <tcp_receive+0x888>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	899b      	ldrh	r3, [r3, #12]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fb f911 	bl	80052e2 <lwip_htons>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d01f      	beq.n	800a10c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a0cc:	4b65      	ldr	r3, [pc, #404]	; (800a264 <tcp_receive+0x888>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	899b      	ldrh	r3, [r3, #12]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	b21b      	sxth	r3, r3
 800a0d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a0da:	b21c      	sxth	r4, r3
 800a0dc:	4b61      	ldr	r3, [pc, #388]	; (800a264 <tcp_receive+0x888>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	899b      	ldrh	r3, [r3, #12]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fb f8fc 	bl	80052e2 <lwip_htons>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fb f8f3 	bl	80052e2 <lwip_htons>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	b21b      	sxth	r3, r3
 800a100:	4323      	orrs	r3, r4
 800a102:	b21a      	sxth	r2, r3
 800a104:	4b57      	ldr	r3, [pc, #348]	; (800a264 <tcp_receive+0x888>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	b292      	uxth	r2, r2
 800a10a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a110:	4b54      	ldr	r3, [pc, #336]	; (800a264 <tcp_receive+0x888>)
 800a112:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a114:	4b53      	ldr	r3, [pc, #332]	; (800a264 <tcp_receive+0x888>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	899b      	ldrh	r3, [r3, #12]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fb f8e0 	bl	80052e2 <lwip_htons>
 800a122:	4603      	mov	r3, r0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f003 0302 	and.w	r3, r3, #2
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <tcp_receive+0x75e>
            inseg.len -= 1;
 800a12e:	4b4d      	ldr	r3, [pc, #308]	; (800a264 <tcp_receive+0x888>)
 800a130:	891b      	ldrh	r3, [r3, #8]
 800a132:	3b01      	subs	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	4b4b      	ldr	r3, [pc, #300]	; (800a264 <tcp_receive+0x888>)
 800a138:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a13a:	4b4a      	ldr	r3, [pc, #296]	; (800a264 <tcp_receive+0x888>)
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	4b49      	ldr	r3, [pc, #292]	; (800a264 <tcp_receive+0x888>)
 800a140:	891b      	ldrh	r3, [r3, #8]
 800a142:	4619      	mov	r1, r3
 800a144:	4610      	mov	r0, r2
 800a146:	f7fc f9e1 	bl	800650c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a14a:	4b46      	ldr	r3, [pc, #280]	; (800a264 <tcp_receive+0x888>)
 800a14c:	891c      	ldrh	r4, [r3, #8]
 800a14e:	4b45      	ldr	r3, [pc, #276]	; (800a264 <tcp_receive+0x888>)
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	899b      	ldrh	r3, [r3, #12]
 800a154:	b29b      	uxth	r3, r3
 800a156:	4618      	mov	r0, r3
 800a158:	f7fb f8c3 	bl	80052e2 <lwip_htons>
 800a15c:	4603      	mov	r3, r0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <tcp_receive+0x790>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <tcp_receive+0x792>
 800a16c:	2300      	movs	r3, #0
 800a16e:	4423      	add	r3, r4
 800a170:	b29a      	uxth	r2, r3
 800a172:	4b3d      	ldr	r3, [pc, #244]	; (800a268 <tcp_receive+0x88c>)
 800a174:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a176:	4b3c      	ldr	r3, [pc, #240]	; (800a268 <tcp_receive+0x88c>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	4b38      	ldr	r3, [pc, #224]	; (800a260 <tcp_receive+0x884>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	441a      	add	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a18a:	440b      	add	r3, r1
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d006      	beq.n	800a19e <tcp_receive+0x7c2>
 800a190:	4b36      	ldr	r3, [pc, #216]	; (800a26c <tcp_receive+0x890>)
 800a192:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a196:	4936      	ldr	r1, [pc, #216]	; (800a270 <tcp_receive+0x894>)
 800a198:	4836      	ldr	r0, [pc, #216]	; (800a274 <tcp_receive+0x898>)
 800a19a:	f005 f819 	bl	800f1d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 80e7 	beq.w	800a376 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1a8:	4b2e      	ldr	r3, [pc, #184]	; (800a264 <tcp_receive+0x888>)
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	899b      	ldrh	r3, [r3, #12]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fb f896 	bl	80052e2 <lwip_htons>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d010      	beq.n	800a1e4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a1c2:	e00a      	b.n	800a1da <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7fd fd97 	bl	8007d08 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f0      	bne.n	800a1c4 <tcp_receive+0x7e8>
 800a1e2:	e0c8      	b.n	800a376 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a1ea:	e052      	b.n	800a292 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	899b      	ldrh	r3, [r3, #12]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fb f874 	bl	80052e2 <lwip_htons>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d03d      	beq.n	800a282 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a206:	4b17      	ldr	r3, [pc, #92]	; (800a264 <tcp_receive+0x888>)
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	899b      	ldrh	r3, [r3, #12]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fb f867 	bl	80052e2 <lwip_htons>
 800a214:	4603      	mov	r3, r0
 800a216:	b2db      	uxtb	r3, r3
 800a218:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d130      	bne.n	800a282 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a220:	4b10      	ldr	r3, [pc, #64]	; (800a264 <tcp_receive+0x888>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	899b      	ldrh	r3, [r3, #12]
 800a226:	b29c      	uxth	r4, r3
 800a228:	2001      	movs	r0, #1
 800a22a:	f7fb f85a 	bl	80052e2 <lwip_htons>
 800a22e:	4603      	mov	r3, r0
 800a230:	461a      	mov	r2, r3
 800a232:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <tcp_receive+0x888>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	4322      	orrs	r2, r4
 800a238:	b292      	uxth	r2, r2
 800a23a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <tcp_receive+0x888>)
 800a23e:	891c      	ldrh	r4, [r3, #8]
 800a240:	4b08      	ldr	r3, [pc, #32]	; (800a264 <tcp_receive+0x888>)
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	899b      	ldrh	r3, [r3, #12]
 800a246:	b29b      	uxth	r3, r3
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fb f84a 	bl	80052e2 <lwip_htons>
 800a24e:	4603      	mov	r3, r0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00e      	beq.n	800a278 <tcp_receive+0x89c>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e00d      	b.n	800a27a <tcp_receive+0x89e>
 800a25e:	bf00      	nop
 800a260:	20000100 	.word	0x20000100
 800a264:	200000e0 	.word	0x200000e0
 800a268:	2000010a 	.word	0x2000010a
 800a26c:	0801125c 	.word	0x0801125c
 800a270:	08011604 	.word	0x08011604
 800a274:	080112a8 	.word	0x080112a8
 800a278:	2300      	movs	r3, #0
 800a27a:	4423      	add	r3, r4
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	4b98      	ldr	r3, [pc, #608]	; (800a4e0 <tcp_receive+0xb04>)
 800a280:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a28c:	6938      	ldr	r0, [r7, #16]
 800a28e:	f7fd fd3b 	bl	8007d08 <tcp_seg_free>
            while (next &&
 800a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00e      	beq.n	800a2b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a298:	4b91      	ldr	r3, [pc, #580]	; (800a4e0 <tcp_receive+0xb04>)
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	461a      	mov	r2, r3
 800a29e:	4b91      	ldr	r3, [pc, #580]	; (800a4e4 <tcp_receive+0xb08>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ac:	8909      	ldrh	r1, [r1, #8]
 800a2ae:	440b      	add	r3, r1
 800a2b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da9a      	bge.n	800a1ec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d059      	beq.n	800a370 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a2bc:	4b88      	ldr	r3, [pc, #544]	; (800a4e0 <tcp_receive+0xb04>)
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b88      	ldr	r3, [pc, #544]	; (800a4e4 <tcp_receive+0xb08>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dd4d      	ble.n	800a370 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	4b81      	ldr	r3, [pc, #516]	; (800a4e4 <tcp_receive+0xb08>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	4b80      	ldr	r3, [pc, #512]	; (800a4e8 <tcp_receive+0xb0c>)
 800a2e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a2ea:	4b7f      	ldr	r3, [pc, #508]	; (800a4e8 <tcp_receive+0xb0c>)
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	899b      	ldrh	r3, [r3, #12]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fa fff5 	bl	80052e2 <lwip_htons>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <tcp_receive+0x934>
                inseg.len -= 1;
 800a304:	4b78      	ldr	r3, [pc, #480]	; (800a4e8 <tcp_receive+0xb0c>)
 800a306:	891b      	ldrh	r3, [r3, #8]
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	4b76      	ldr	r3, [pc, #472]	; (800a4e8 <tcp_receive+0xb0c>)
 800a30e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a310:	4b75      	ldr	r3, [pc, #468]	; (800a4e8 <tcp_receive+0xb0c>)
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	4b74      	ldr	r3, [pc, #464]	; (800a4e8 <tcp_receive+0xb0c>)
 800a316:	891b      	ldrh	r3, [r3, #8]
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7fc f8f6 	bl	800650c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a320:	4b71      	ldr	r3, [pc, #452]	; (800a4e8 <tcp_receive+0xb0c>)
 800a322:	891c      	ldrh	r4, [r3, #8]
 800a324:	4b70      	ldr	r3, [pc, #448]	; (800a4e8 <tcp_receive+0xb0c>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	899b      	ldrh	r3, [r3, #12]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fa ffd8 	bl	80052e2 <lwip_htons>
 800a332:	4603      	mov	r3, r0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <tcp_receive+0x966>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <tcp_receive+0x968>
 800a342:	2300      	movs	r3, #0
 800a344:	4423      	add	r3, r4
 800a346:	b29a      	uxth	r2, r3
 800a348:	4b65      	ldr	r3, [pc, #404]	; (800a4e0 <tcp_receive+0xb04>)
 800a34a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a34c:	4b64      	ldr	r3, [pc, #400]	; (800a4e0 <tcp_receive+0xb04>)
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	461a      	mov	r2, r3
 800a352:	4b64      	ldr	r3, [pc, #400]	; (800a4e4 <tcp_receive+0xb08>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	441a      	add	r2, r3
 800a358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d006      	beq.n	800a370 <tcp_receive+0x994>
 800a362:	4b62      	ldr	r3, [pc, #392]	; (800a4ec <tcp_receive+0xb10>)
 800a364:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800a368:	4961      	ldr	r1, [pc, #388]	; (800a4f0 <tcp_receive+0xb14>)
 800a36a:	4862      	ldr	r0, [pc, #392]	; (800a4f4 <tcp_receive+0xb18>)
 800a36c:	f004 ff30 	bl	800f1d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a374:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a376:	4b5a      	ldr	r3, [pc, #360]	; (800a4e0 <tcp_receive+0xb04>)
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	4b59      	ldr	r3, [pc, #356]	; (800a4e4 <tcp_receive+0xb08>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	441a      	add	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a38a:	4b55      	ldr	r3, [pc, #340]	; (800a4e0 <tcp_receive+0xb04>)
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d206      	bcs.n	800a3a0 <tcp_receive+0x9c4>
 800a392:	4b56      	ldr	r3, [pc, #344]	; (800a4ec <tcp_receive+0xb10>)
 800a394:	f240 6207 	movw	r2, #1543	; 0x607
 800a398:	4957      	ldr	r1, [pc, #348]	; (800a4f8 <tcp_receive+0xb1c>)
 800a39a:	4856      	ldr	r0, [pc, #344]	; (800a4f4 <tcp_receive+0xb18>)
 800a39c:	f004 ff18 	bl	800f1d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3a4:	4b4e      	ldr	r3, [pc, #312]	; (800a4e0 <tcp_receive+0xb04>)
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7fc ffcd 	bl	8007350 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <tcp_receive+0xb0c>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a3c0:	4b49      	ldr	r3, [pc, #292]	; (800a4e8 <tcp_receive+0xb0c>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	4a4d      	ldr	r2, [pc, #308]	; (800a4fc <tcp_receive+0xb20>)
 800a3c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a3c8:	4b47      	ldr	r3, [pc, #284]	; (800a4e8 <tcp_receive+0xb0c>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3ce:	4b46      	ldr	r3, [pc, #280]	; (800a4e8 <tcp_receive+0xb0c>)
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	899b      	ldrh	r3, [r3, #12]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fa ff83 	bl	80052e2 <lwip_htons>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80b8 	beq.w	800a55a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a3ea:	4b45      	ldr	r3, [pc, #276]	; (800a500 <tcp_receive+0xb24>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	f043 0320 	orr.w	r3, r3, #32
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	4b42      	ldr	r3, [pc, #264]	; (800a500 <tcp_receive+0xb24>)
 800a3f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a3f8:	e0af      	b.n	800a55a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a36      	ldr	r2, [pc, #216]	; (800a4e4 <tcp_receive+0xb08>)
 800a40a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	891b      	ldrh	r3, [r3, #8]
 800a410:	461c      	mov	r4, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	899b      	ldrh	r3, [r3, #12]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fa ff61 	bl	80052e2 <lwip_htons>
 800a420:	4603      	mov	r3, r0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0303 	and.w	r3, r3, #3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <tcp_receive+0xa54>
 800a42c:	2301      	movs	r3, #1
 800a42e:	e000      	b.n	800a432 <tcp_receive+0xa56>
 800a430:	2300      	movs	r3, #0
 800a432:	191a      	adds	r2, r3, r4
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	441a      	add	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a442:	461c      	mov	r4, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	891b      	ldrh	r3, [r3, #8]
 800a448:	461d      	mov	r5, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	899b      	ldrh	r3, [r3, #12]
 800a450:	b29b      	uxth	r3, r3
 800a452:	4618      	mov	r0, r3
 800a454:	f7fa ff45 	bl	80052e2 <lwip_htons>
 800a458:	4603      	mov	r3, r0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <tcp_receive+0xa8c>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <tcp_receive+0xa8e>
 800a468:	2300      	movs	r3, #0
 800a46a:	442b      	add	r3, r5
 800a46c:	429c      	cmp	r4, r3
 800a46e:	d206      	bcs.n	800a47e <tcp_receive+0xaa2>
 800a470:	4b1e      	ldr	r3, [pc, #120]	; (800a4ec <tcp_receive+0xb10>)
 800a472:	f240 622c 	movw	r2, #1580	; 0x62c
 800a476:	4923      	ldr	r1, [pc, #140]	; (800a504 <tcp_receive+0xb28>)
 800a478:	481e      	ldr	r0, [pc, #120]	; (800a4f4 <tcp_receive+0xb18>)
 800a47a:	f004 fea9 	bl	800f1d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	891b      	ldrh	r3, [r3, #8]
 800a482:	461c      	mov	r4, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	899b      	ldrh	r3, [r3, #12]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fa ff28 	bl	80052e2 <lwip_htons>
 800a492:	4603      	mov	r3, r0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <tcp_receive+0xac6>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <tcp_receive+0xac8>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	1919      	adds	r1, r3, r4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4aa:	b28b      	uxth	r3, r1
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fc ff4b 	bl	8007350 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	891b      	ldrh	r3, [r3, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d028      	beq.n	800a516 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a4c4:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <tcp_receive+0xb20>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01d      	beq.n	800a508 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <tcp_receive+0xb20>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	f7fc fa60 	bl	800699c <pbuf_cat>
 800a4dc:	e018      	b.n	800a510 <tcp_receive+0xb34>
 800a4de:	bf00      	nop
 800a4e0:	2000010a 	.word	0x2000010a
 800a4e4:	20000100 	.word	0x20000100
 800a4e8:	200000e0 	.word	0x200000e0
 800a4ec:	0801125c 	.word	0x0801125c
 800a4f0:	0801163c 	.word	0x0801163c
 800a4f4:	080112a8 	.word	0x080112a8
 800a4f8:	08011678 	.word	0x08011678
 800a4fc:	20000110 	.word	0x20000110
 800a500:	2000010d 	.word	0x2000010d
 800a504:	08011698 	.word	0x08011698
            } else {
              recv_data = cseg->p;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4a70      	ldr	r2, [pc, #448]	; (800a6d0 <tcp_receive+0xcf4>)
 800a50e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2200      	movs	r2, #0
 800a514:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	899b      	ldrh	r3, [r3, #12]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fa fedf 	bl	80052e2 <lwip_htons>
 800a524:	4603      	mov	r3, r0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00d      	beq.n	800a54c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a530:	4b68      	ldr	r3, [pc, #416]	; (800a6d4 <tcp_receive+0xcf8>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f043 0320 	orr.w	r3, r3, #32
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	4b66      	ldr	r3, [pc, #408]	; (800a6d4 <tcp_receive+0xcf8>)
 800a53c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	2b04      	cmp	r3, #4
 800a544:	d102      	bne.n	800a54c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2207      	movs	r2, #7
 800a54a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a554:	68b8      	ldr	r0, [r7, #8]
 800a556:	f7fd fbd7 	bl	8007d08 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a56e:	429a      	cmp	r2, r3
 800a570:	f43f af43 	beq.w	800a3fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8b5b      	ldrh	r3, [r3, #26]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <tcp_receive+0xbc2>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	8b5b      	ldrh	r3, [r3, #26]
 800a584:	f023 0301 	bic.w	r3, r3, #1
 800a588:	b29a      	uxth	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	835a      	strh	r2, [r3, #26]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8b5b      	ldrh	r3, [r3, #26]
 800a592:	f043 0302 	orr.w	r3, r3, #2
 800a596:	b29a      	uxth	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a59c:	e188      	b.n	800a8b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8b5b      	ldrh	r3, [r3, #26]
 800a5a2:	f043 0301 	orr.w	r3, r3, #1
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5ac:	e180      	b.n	800a8b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a5b6:	4848      	ldr	r0, [pc, #288]	; (800a6d8 <tcp_receive+0xcfc>)
 800a5b8:	f7fd fbbe 	bl	8007d38 <tcp_seg_copy>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	675a      	str	r2, [r3, #116]	; 0x74
 800a5c2:	e16d      	b.n	800a8a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ce:	e157      	b.n	800a880 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	4b41      	ldr	r3, [pc, #260]	; (800a6dc <tcp_receive+0xd00>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d11d      	bne.n	800a61a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a5de:	4b3e      	ldr	r3, [pc, #248]	; (800a6d8 <tcp_receive+0xcfc>)
 800a5e0:	891a      	ldrh	r2, [r3, #8]
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	891b      	ldrh	r3, [r3, #8]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	f240 814f 	bls.w	800a88a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a5ec:	483a      	ldr	r0, [pc, #232]	; (800a6d8 <tcp_receive+0xcfc>)
 800a5ee:	f7fd fba3 	bl	8007d38 <tcp_seg_copy>
 800a5f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8149 	beq.w	800a88e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	e002      	b.n	800a610 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a612:	6978      	ldr	r0, [r7, #20]
 800a614:	f7ff f8de 	bl	80097d4 <tcp_oos_insert_segment>
                }
                break;
 800a618:	e139      	b.n	800a88e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d117      	bne.n	800a650 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a620:	4b2e      	ldr	r3, [pc, #184]	; (800a6dc <tcp_receive+0xd00>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	da57      	bge.n	800a6e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a630:	4829      	ldr	r0, [pc, #164]	; (800a6d8 <tcp_receive+0xcfc>)
 800a632:	f7fd fb81 	bl	8007d38 <tcp_seg_copy>
 800a636:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 8129 	beq.w	800a892 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a648:	69b8      	ldr	r0, [r7, #24]
 800a64a:	f7ff f8c3 	bl	80097d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a64e:	e120      	b.n	800a892 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a650:	4b22      	ldr	r3, [pc, #136]	; (800a6dc <tcp_receive+0xd00>)
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	3b01      	subs	r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	db3e      	blt.n	800a6e0 <tcp_receive+0xd04>
 800a662:	4b1e      	ldr	r3, [pc, #120]	; (800a6dc <tcp_receive+0xd00>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	3301      	adds	r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc35      	bgt.n	800a6e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a674:	4818      	ldr	r0, [pc, #96]	; (800a6d8 <tcp_receive+0xcfc>)
 800a676:	f7fd fb5f 	bl	8007d38 <tcp_seg_copy>
 800a67a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8109 	beq.w	800a896 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68c:	8912      	ldrh	r2, [r2, #8]
 800a68e:	441a      	add	r2, r3
 800a690:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <tcp_receive+0xd00>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	dd12      	ble.n	800a6c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a69a:	4b10      	ldr	r3, [pc, #64]	; (800a6dc <tcp_receive+0xd00>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	891b      	ldrh	r3, [r3, #8]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f7fb ff26 	bl	800650c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a6c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6c8:	69f8      	ldr	r0, [r7, #28]
 800a6ca:	f7ff f883 	bl	80097d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a6ce:	e0e2      	b.n	800a896 <tcp_receive+0xeba>
 800a6d0:	20000110 	.word	0x20000110
 800a6d4:	2000010d 	.word	0x2000010d
 800a6d8:	200000e0 	.word	0x200000e0
 800a6dc:	20000100 	.word	0x20000100
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f040 80c6 	bne.w	800a87a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a6ee:	4b80      	ldr	r3, [pc, #512]	; (800a8f0 <tcp_receive+0xf14>)
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f340 80bd 	ble.w	800a87a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	899b      	ldrh	r3, [r3, #12]
 800a706:	b29b      	uxth	r3, r3
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fa fdea 	bl	80052e2 <lwip_htons>
 800a70e:	4603      	mov	r3, r0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 80bf 	bne.w	800a89a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a71c:	4875      	ldr	r0, [pc, #468]	; (800a8f4 <tcp_receive+0xf18>)
 800a71e:	f7fd fb0b 	bl	8007d38 <tcp_seg_copy>
 800a722:	4602      	mov	r2, r0
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80b6 	beq.w	800a89e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a73a:	8912      	ldrh	r2, [r2, #8]
 800a73c:	441a      	add	r2, r3
 800a73e:	4b6c      	ldr	r3, [pc, #432]	; (800a8f0 <tcp_receive+0xf14>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	dd12      	ble.n	800a76e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a748:	4b69      	ldr	r3, [pc, #420]	; (800a8f0 <tcp_receive+0xf14>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	b29b      	uxth	r3, r3
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	b29a      	uxth	r2, r3
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	891b      	ldrh	r3, [r3, #8]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f7fb fecf 	bl	800650c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a76e:	4b62      	ldr	r3, [pc, #392]	; (800a8f8 <tcp_receive+0xf1c>)
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	4b5e      	ldr	r3, [pc, #376]	; (800a8f0 <tcp_receive+0xf14>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	441a      	add	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a782:	440b      	add	r3, r1
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	f340 8089 	ble.w	800a89e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	899b      	ldrh	r3, [r3, #12]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4618      	mov	r0, r3
 800a798:	f7fa fda3 	bl	80052e2 <lwip_htons>
 800a79c:	4603      	mov	r3, r0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d022      	beq.n	800a7ee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	899b      	ldrh	r3, [r3, #12]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7b8:	b21c      	sxth	r4, r3
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fa fd8c 	bl	80052e2 <lwip_htons>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fa fd83 	bl	80052e2 <lwip_htons>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4323      	orrs	r3, r4
 800a7e2:	b21a      	sxth	r2, r3
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f8:	4413      	add	r3, r2
 800a7fa:	b299      	uxth	r1, r3
 800a7fc:	4b3c      	ldr	r3, [pc, #240]	; (800a8f0 <tcp_receive+0xf14>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	b29a      	uxth	r2, r3
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	1a8a      	subs	r2, r1, r2
 800a808:	b292      	uxth	r2, r2
 800a80a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	891b      	ldrh	r3, [r3, #8]
 800a818:	4619      	mov	r1, r3
 800a81a:	4610      	mov	r0, r2
 800a81c:	f7fb fe76 	bl	800650c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	891c      	ldrh	r4, [r3, #8]
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	899b      	ldrh	r3, [r3, #12]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	4618      	mov	r0, r3
 800a832:	f7fa fd56 	bl	80052e2 <lwip_htons>
 800a836:	4603      	mov	r3, r0
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <tcp_receive+0xe6a>
 800a842:	2301      	movs	r3, #1
 800a844:	e000      	b.n	800a848 <tcp_receive+0xe6c>
 800a846:	2300      	movs	r3, #0
 800a848:	4423      	add	r3, r4
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	4b2a      	ldr	r3, [pc, #168]	; (800a8f8 <tcp_receive+0xf1c>)
 800a84e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a850:	4b29      	ldr	r3, [pc, #164]	; (800a8f8 <tcp_receive+0xf1c>)
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	4b26      	ldr	r3, [pc, #152]	; (800a8f0 <tcp_receive+0xf14>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	441a      	add	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a864:	440b      	add	r3, r1
 800a866:	429a      	cmp	r2, r3
 800a868:	d019      	beq.n	800a89e <tcp_receive+0xec2>
 800a86a:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <tcp_receive+0xf20>)
 800a86c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a870:	4923      	ldr	r1, [pc, #140]	; (800a900 <tcp_receive+0xf24>)
 800a872:	4824      	ldr	r0, [pc, #144]	; (800a904 <tcp_receive+0xf28>)
 800a874:	f004 fcac 	bl	800f1d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a878:	e011      	b.n	800a89e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a882:	2b00      	cmp	r3, #0
 800a884:	f47f aea4 	bne.w	800a5d0 <tcp_receive+0xbf4>
 800a888:	e00a      	b.n	800a8a0 <tcp_receive+0xec4>
                break;
 800a88a:	bf00      	nop
 800a88c:	e008      	b.n	800a8a0 <tcp_receive+0xec4>
                break;
 800a88e:	bf00      	nop
 800a890:	e006      	b.n	800a8a0 <tcp_receive+0xec4>
                  break;
 800a892:	bf00      	nop
 800a894:	e004      	b.n	800a8a0 <tcp_receive+0xec4>
                  break;
 800a896:	bf00      	nop
 800a898:	e002      	b.n	800a8a0 <tcp_receive+0xec4>
                  break;
 800a89a:	bf00      	nop
 800a89c:	e000      	b.n	800a8a0 <tcp_receive+0xec4>
                break;
 800a89e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 fa41 	bl	800bd28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a8a6:	e003      	b.n	800a8b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fa3d 	bl	800bd28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a8ae:	e01a      	b.n	800a8e6 <tcp_receive+0xf0a>
 800a8b0:	e019      	b.n	800a8e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <tcp_receive+0xf14>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	db0a      	blt.n	800a8d6 <tcp_receive+0xefa>
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <tcp_receive+0xf14>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8cc:	440b      	add	r3, r1
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dd07      	ble.n	800a8e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8b5b      	ldrh	r3, [r3, #26]
 800a8da:	f043 0302 	orr.w	r3, r3, #2
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a8e4:	e7ff      	b.n	800a8e6 <tcp_receive+0xf0a>
 800a8e6:	bf00      	nop
 800a8e8:	3750      	adds	r7, #80	; 0x50
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000100 	.word	0x20000100
 800a8f4:	200000e0 	.word	0x200000e0
 800a8f8:	2000010a 	.word	0x2000010a
 800a8fc:	0801125c 	.word	0x0801125c
 800a900:	08011604 	.word	0x08011604
 800a904:	080112a8 	.word	0x080112a8

0800a908 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a90e:	4b15      	ldr	r3, [pc, #84]	; (800a964 <tcp_get_next_optbyte+0x5c>)
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	b291      	uxth	r1, r2
 800a916:	4a13      	ldr	r2, [pc, #76]	; (800a964 <tcp_get_next_optbyte+0x5c>)
 800a918:	8011      	strh	r1, [r2, #0]
 800a91a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a91c:	4b12      	ldr	r3, [pc, #72]	; (800a968 <tcp_get_next_optbyte+0x60>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <tcp_get_next_optbyte+0x26>
 800a924:	4b11      	ldr	r3, [pc, #68]	; (800a96c <tcp_get_next_optbyte+0x64>)
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	88fa      	ldrh	r2, [r7, #6]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d208      	bcs.n	800a940 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a92e:	4b10      	ldr	r3, [pc, #64]	; (800a970 <tcp_get_next_optbyte+0x68>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3314      	adds	r3, #20
 800a934:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	4413      	add	r3, r2
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	e00b      	b.n	800a958 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	b2da      	uxtb	r2, r3
 800a944:	4b09      	ldr	r3, [pc, #36]	; (800a96c <tcp_get_next_optbyte+0x64>)
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a94e:	4b06      	ldr	r3, [pc, #24]	; (800a968 <tcp_get_next_optbyte+0x60>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	797b      	ldrb	r3, [r7, #5]
 800a954:	4413      	add	r3, r2
 800a956:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a958:	4618      	mov	r0, r3
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	200000fc 	.word	0x200000fc
 800a968:	200000f8 	.word	0x200000f8
 800a96c:	200000f6 	.word	0x200000f6
 800a970:	200000f0 	.word	0x200000f0

0800a974 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <tcp_parseopt+0x1c>
 800a982:	4b31      	ldr	r3, [pc, #196]	; (800aa48 <tcp_parseopt+0xd4>)
 800a984:	f240 727d 	movw	r2, #1917	; 0x77d
 800a988:	4930      	ldr	r1, [pc, #192]	; (800aa4c <tcp_parseopt+0xd8>)
 800a98a:	4831      	ldr	r0, [pc, #196]	; (800aa50 <tcp_parseopt+0xdc>)
 800a98c:	f004 fc20 	bl	800f1d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a990:	4b30      	ldr	r3, [pc, #192]	; (800aa54 <tcp_parseopt+0xe0>)
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d053      	beq.n	800aa40 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a998:	4b2f      	ldr	r3, [pc, #188]	; (800aa58 <tcp_parseopt+0xe4>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	801a      	strh	r2, [r3, #0]
 800a99e:	e043      	b.n	800aa28 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800a9a0:	f7ff ffb2 	bl	800a908 <tcp_get_next_optbyte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d03c      	beq.n	800aa28 <tcp_parseopt+0xb4>
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d002      	beq.n	800a9b8 <tcp_parseopt+0x44>
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d03f      	beq.n	800aa36 <tcp_parseopt+0xc2>
 800a9b6:	e026      	b.n	800aa06 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a9b8:	f7ff ffa6 	bl	800a908 <tcp_get_next_optbyte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d13b      	bne.n	800aa3a <tcp_parseopt+0xc6>
 800a9c2:	4b25      	ldr	r3, [pc, #148]	; (800aa58 <tcp_parseopt+0xe4>)
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	3302      	adds	r3, #2
 800a9c8:	4a22      	ldr	r2, [pc, #136]	; (800aa54 <tcp_parseopt+0xe0>)
 800a9ca:	8812      	ldrh	r2, [r2, #0]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	dc34      	bgt.n	800aa3a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a9d0:	f7ff ff9a 	bl	800a908 <tcp_get_next_optbyte>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	021b      	lsls	r3, r3, #8
 800a9da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a9dc:	f7ff ff94 	bl	800a908 <tcp_get_next_optbyte>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	89bb      	ldrh	r3, [r7, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a9ea:	89bb      	ldrh	r3, [r7, #12]
 800a9ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a9f0:	d804      	bhi.n	800a9fc <tcp_parseopt+0x88>
 800a9f2:	89bb      	ldrh	r3, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <tcp_parseopt+0x88>
 800a9f8:	89ba      	ldrh	r2, [r7, #12]
 800a9fa:	e001      	b.n	800aa00 <tcp_parseopt+0x8c>
 800a9fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800aa04:	e010      	b.n	800aa28 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aa06:	f7ff ff7f 	bl	800a908 <tcp_get_next_optbyte>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aa0e:	7afb      	ldrb	r3, [r7, #11]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d914      	bls.n	800aa3e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <tcp_parseopt+0xe4>)
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	3b02      	subs	r3, #2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <tcp_parseopt+0xe4>)
 800aa26:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa28:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <tcp_parseopt+0xe4>)
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <tcp_parseopt+0xe0>)
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3b5      	bcc.n	800a9a0 <tcp_parseopt+0x2c>
 800aa34:	e004      	b.n	800aa40 <tcp_parseopt+0xcc>
          return;
 800aa36:	bf00      	nop
 800aa38:	e002      	b.n	800aa40 <tcp_parseopt+0xcc>
            return;
 800aa3a:	bf00      	nop
 800aa3c:	e000      	b.n	800aa40 <tcp_parseopt+0xcc>
            return;
 800aa3e:	bf00      	nop
      }
    }
  }
}
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	0801125c 	.word	0x0801125c
 800aa4c:	080116c0 	.word	0x080116c0
 800aa50:	080112a8 	.word	0x080112a8
 800aa54:	200000f4 	.word	0x200000f4
 800aa58:	200000fc 	.word	0x200000fc

0800aa5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <tcp_trigger_input_pcb_close+0x1c>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	f043 0310 	orr.w	r3, r3, #16
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b03      	ldr	r3, [pc, #12]	; (800aa78 <tcp_trigger_input_pcb_close+0x1c>)
 800aa6c:	701a      	strb	r2, [r3, #0]
}
 800aa6e:	bf00      	nop
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	2000010d 	.word	0x2000010d

0800aa7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <tcp_route+0x28>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	7a1b      	ldrb	r3, [r3, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	7a1b      	ldrb	r3, [r3, #8]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fb fb60 	bl	8006160 <netif_get_by_index>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	e003      	b.n	800aaac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f003 f96d 	bl	800dd84 <ip4_route>
 800aaaa:	4603      	mov	r3, r0
  }
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	4613      	mov	r3, r2
 800aac2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <tcp_create_segment+0x22>
 800aaca:	4b44      	ldr	r3, [pc, #272]	; (800abdc <tcp_create_segment+0x128>)
 800aacc:	22a3      	movs	r2, #163	; 0xa3
 800aace:	4944      	ldr	r1, [pc, #272]	; (800abe0 <tcp_create_segment+0x12c>)
 800aad0:	4844      	ldr	r0, [pc, #272]	; (800abe4 <tcp_create_segment+0x130>)
 800aad2:	f004 fb7d 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <tcp_create_segment+0x34>
 800aadc:	4b3f      	ldr	r3, [pc, #252]	; (800abdc <tcp_create_segment+0x128>)
 800aade:	22a4      	movs	r2, #164	; 0xa4
 800aae0:	4941      	ldr	r1, [pc, #260]	; (800abe8 <tcp_create_segment+0x134>)
 800aae2:	4840      	ldr	r0, [pc, #256]	; (800abe4 <tcp_create_segment+0x130>)
 800aae4:	f004 fb74 	bl	800f1d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aaf6:	2003      	movs	r0, #3
 800aaf8:	f7fb f848 	bl	8005b8c <memp_malloc>
 800aafc:	6138      	str	r0, [r7, #16]
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ab04:	68b8      	ldr	r0, [r7, #8]
 800ab06:	f7fb fe87 	bl	8006818 <pbuf_free>
    return NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e061      	b.n	800abd2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ab14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	891a      	ldrh	r2, [r3, #8]
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d205      	bcs.n	800ab3a <tcp_create_segment+0x86>
 800ab2e:	4b2b      	ldr	r3, [pc, #172]	; (800abdc <tcp_create_segment+0x128>)
 800ab30:	22b0      	movs	r2, #176	; 0xb0
 800ab32:	492e      	ldr	r1, [pc, #184]	; (800abec <tcp_create_segment+0x138>)
 800ab34:	482b      	ldr	r0, [pc, #172]	; (800abe4 <tcp_create_segment+0x130>)
 800ab36:	f004 fb4b 	bl	800f1d0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	891a      	ldrh	r2, [r3, #8]
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ab4a:	2114      	movs	r1, #20
 800ab4c:	68b8      	ldr	r0, [r7, #8]
 800ab4e:	f7fb fdcd 	bl	80066ec <pbuf_add_header>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ab58:	6938      	ldr	r0, [r7, #16]
 800ab5a:	f7fd f8d5 	bl	8007d08 <tcp_seg_free>
    return NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e037      	b.n	800abd2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	8ada      	ldrh	r2, [r3, #22]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	68dc      	ldr	r4, [r3, #12]
 800ab74:	4610      	mov	r0, r2
 800ab76:	f7fa fbb4 	bl	80052e2 <lwip_htons>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8b1a      	ldrh	r2, [r3, #24]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	68dc      	ldr	r4, [r3, #12]
 800ab86:	4610      	mov	r0, r2
 800ab88:	f7fa fbab 	bl	80052e2 <lwip_htons>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	68dc      	ldr	r4, [r3, #12]
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f7fa fbb9 	bl	800530c <lwip_htonl>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	089b      	lsrs	r3, r3, #2
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3305      	adds	r3, #5
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	031b      	lsls	r3, r3, #12
 800abac:	b29a      	uxth	r2, r3
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	68dc      	ldr	r4, [r3, #12]
 800abba:	4610      	mov	r0, r2
 800abbc:	f7fa fb91 	bl	80052e2 <lwip_htons>
 800abc0:	4603      	mov	r3, r0
 800abc2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	749a      	strb	r2, [r3, #18]
 800abcc:	2200      	movs	r2, #0
 800abce:	74da      	strb	r2, [r3, #19]
  return seg;
 800abd0:	693b      	ldr	r3, [r7, #16]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd90      	pop	{r4, r7, pc}
 800abda:	bf00      	nop
 800abdc:	080116dc 	.word	0x080116dc
 800abe0:	08011710 	.word	0x08011710
 800abe4:	08011730 	.word	0x08011730
 800abe8:	08011758 	.word	0x08011758
 800abec:	0801177c 	.word	0x0801177c

0800abf0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b08b      	sub	sp, #44	; 0x2c
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	2300      	movs	r3, #0
 800ac02:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <tcp_split_unsent_seg+0x2c>
 800ac0e:	4b95      	ldr	r3, [pc, #596]	; (800ae64 <tcp_split_unsent_seg+0x274>)
 800ac10:	f240 324b 	movw	r2, #843	; 0x34b
 800ac14:	4994      	ldr	r1, [pc, #592]	; (800ae68 <tcp_split_unsent_seg+0x278>)
 800ac16:	4895      	ldr	r0, [pc, #596]	; (800ae6c <tcp_split_unsent_seg+0x27c>)
 800ac18:	f004 fada 	bl	800f1d0 <iprintf>

  useg = pcb->unsent;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac20:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ac28:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2c:	e116      	b.n	800ae5c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ac2e:	887b      	ldrh	r3, [r7, #2]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d109      	bne.n	800ac48 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ac34:	4b8b      	ldr	r3, [pc, #556]	; (800ae64 <tcp_split_unsent_seg+0x274>)
 800ac36:	f240 3253 	movw	r2, #851	; 0x353
 800ac3a:	498d      	ldr	r1, [pc, #564]	; (800ae70 <tcp_split_unsent_seg+0x280>)
 800ac3c:	488b      	ldr	r0, [pc, #556]	; (800ae6c <tcp_split_unsent_seg+0x27c>)
 800ac3e:	f004 fac7 	bl	800f1d0 <iprintf>
    return ERR_VAL;
 800ac42:	f06f 0305 	mvn.w	r3, #5
 800ac46:	e109      	b.n	800ae5c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	891b      	ldrh	r3, [r3, #8]
 800ac4c:	887a      	ldrh	r2, [r7, #2]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d301      	bcc.n	800ac56 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e102      	b.n	800ae5c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac5a:	887a      	ldrh	r2, [r7, #2]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d906      	bls.n	800ac6e <tcp_split_unsent_seg+0x7e>
 800ac60:	4b80      	ldr	r3, [pc, #512]	; (800ae64 <tcp_split_unsent_seg+0x274>)
 800ac62:	f240 325b 	movw	r2, #859	; 0x35b
 800ac66:	4983      	ldr	r1, [pc, #524]	; (800ae74 <tcp_split_unsent_seg+0x284>)
 800ac68:	4880      	ldr	r0, [pc, #512]	; (800ae6c <tcp_split_unsent_seg+0x27c>)
 800ac6a:	f004 fab1 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	891b      	ldrh	r3, [r3, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <tcp_split_unsent_seg+0x94>
 800ac76:	4b7b      	ldr	r3, [pc, #492]	; (800ae64 <tcp_split_unsent_seg+0x274>)
 800ac78:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ac7c:	497e      	ldr	r1, [pc, #504]	; (800ae78 <tcp_split_unsent_seg+0x288>)
 800ac7e:	487b      	ldr	r0, [pc, #492]	; (800ae6c <tcp_split_unsent_seg+0x27c>)
 800ac80:	f004 faa6 	bl	800f1d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	7a9b      	ldrb	r3, [r3, #10]
 800ac88:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	891a      	ldrh	r2, [r3, #8]
 800ac9a:	887b      	ldrh	r3, [r7, #2]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	89bb      	ldrh	r3, [r7, #12]
 800aca6:	4413      	add	r3, r2
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acae:	4619      	mov	r1, r3
 800acb0:	2036      	movs	r0, #54	; 0x36
 800acb2:	f7fb fad1 	bl	8006258 <pbuf_alloc>
 800acb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 80b7 	beq.w	800ae2e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	891a      	ldrh	r2, [r3, #8]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	891b      	ldrh	r3, [r3, #8]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	b29a      	uxth	r2, r3
 800acce:	887b      	ldrh	r3, [r7, #2]
 800acd0:	4413      	add	r3, r2
 800acd2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	6858      	ldr	r0, [r3, #4]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	18d1      	adds	r1, r2, r3
 800ace0:	897b      	ldrh	r3, [r7, #10]
 800ace2:	89ba      	ldrh	r2, [r7, #12]
 800ace4:	f7fb ff92 	bl	8006c0c <pbuf_copy_partial>
 800ace8:	4603      	mov	r3, r0
 800acea:	461a      	mov	r2, r3
 800acec:	89bb      	ldrh	r3, [r7, #12]
 800acee:	4293      	cmp	r3, r2
 800acf0:	f040 809f 	bne.w	800ae32 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	899b      	ldrh	r3, [r3, #12]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fa faf0 	bl	80052e2 <lwip_htons>
 800ad02:	4603      	mov	r3, r0
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad0a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ad10:	7efb      	ldrb	r3, [r7, #27]
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ad1a:	7efb      	ldrb	r3, [r7, #27]
 800ad1c:	f023 0308 	bic.w	r3, r3, #8
 800ad20:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ad22:	7ebb      	ldrb	r3, [r7, #26]
 800ad24:	f043 0308 	orr.w	r3, r3, #8
 800ad28:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ad2a:	7efb      	ldrb	r3, [r7, #27]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ad34:	7efb      	ldrb	r3, [r7, #27]
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ad3c:	7ebb      	ldrb	r3, [r7, #26]
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fa fade 	bl	800530c <lwip_htonl>
 800ad50:	4602      	mov	r2, r0
 800ad52:	887b      	ldrh	r3, [r7, #2]
 800ad54:	18d1      	adds	r1, r2, r3
 800ad56:	7eba      	ldrb	r2, [r7, #26]
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	6939      	ldr	r1, [r7, #16]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fea7 	bl	800aab4 <tcp_create_segment>
 800ad66:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d063      	beq.n	800ae36 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fb fdd8 	bl	8006928 <pbuf_clen>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	6858      	ldr	r0, [r3, #4]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	891a      	ldrh	r2, [r3, #8]
 800ad96:	89bb      	ldrh	r3, [r7, #12]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f7fb fbb5 	bl	800650c <pbuf_realloc>
  useg->len -= remainder;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	891a      	ldrh	r2, [r3, #8]
 800ada6:	89bb      	ldrh	r3, [r7, #12]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	b29a      	uxth	r2, r3
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	b29c      	uxth	r4, r3
 800adb8:	7efb      	ldrb	r3, [r7, #27]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fa fa90 	bl	80052e2 <lwip_htons>
 800adc2:	4603      	mov	r3, r0
 800adc4:	461a      	mov	r2, r3
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	4322      	orrs	r2, r4
 800adcc:	b292      	uxth	r2, r2
 800adce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	f7fb fda7 	bl	8006928 <pbuf_clen>
 800adda:	4603      	mov	r3, r0
 800addc:	461a      	mov	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ade4:	4413      	add	r3, r2
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fb fd98 	bl	8006928 <pbuf_clen>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae02:	4413      	add	r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d103      	bne.n	800ae2a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e016      	b.n	800ae5c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ae2e:	bf00      	nop
 800ae30:	e002      	b.n	800ae38 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae32:	bf00      	nop
 800ae34:	e000      	b.n	800ae38 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae36:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d006      	beq.n	800ae4c <tcp_split_unsent_seg+0x25c>
 800ae3e:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <tcp_split_unsent_seg+0x274>)
 800ae40:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ae44:	490d      	ldr	r1, [pc, #52]	; (800ae7c <tcp_split_unsent_seg+0x28c>)
 800ae46:	4809      	ldr	r0, [pc, #36]	; (800ae6c <tcp_split_unsent_seg+0x27c>)
 800ae48:	f004 f9c2 	bl	800f1d0 <iprintf>
  if (p != NULL) {
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ae52:	6938      	ldr	r0, [r7, #16]
 800ae54:	f7fb fce0 	bl	8006818 <pbuf_free>
  }

  return ERR_MEM;
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3724      	adds	r7, #36	; 0x24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd90      	pop	{r4, r7, pc}
 800ae64:	080116dc 	.word	0x080116dc
 800ae68:	08011a70 	.word	0x08011a70
 800ae6c:	08011730 	.word	0x08011730
 800ae70:	08011a94 	.word	0x08011a94
 800ae74:	08011ab8 	.word	0x08011ab8
 800ae78:	08011ac8 	.word	0x08011ac8
 800ae7c:	08011ad8 	.word	0x08011ad8

0800ae80 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <tcp_send_fin+0x1c>
 800ae8e:	4b21      	ldr	r3, [pc, #132]	; (800af14 <tcp_send_fin+0x94>)
 800ae90:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ae94:	4920      	ldr	r1, [pc, #128]	; (800af18 <tcp_send_fin+0x98>)
 800ae96:	4821      	ldr	r0, [pc, #132]	; (800af1c <tcp_send_fin+0x9c>)
 800ae98:	f004 f99a 	bl	800f1d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d02e      	beq.n	800af02 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e002      	b.n	800aeb2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1f8      	bne.n	800aeac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	899b      	ldrh	r3, [r3, #12]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fa fa0d 	bl	80052e2 <lwip_htons>
 800aec8:	4603      	mov	r3, r0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0307 	and.w	r3, r3, #7
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d116      	bne.n	800af02 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	899b      	ldrh	r3, [r3, #12]
 800aeda:	b29c      	uxth	r4, r3
 800aedc:	2001      	movs	r0, #1
 800aede:	f7fa fa00 	bl	80052e2 <lwip_htons>
 800aee2:	4603      	mov	r3, r0
 800aee4:	461a      	mov	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	4322      	orrs	r2, r4
 800aeec:	b292      	uxth	r2, r2
 800aeee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	8b5b      	ldrh	r3, [r3, #26]
 800aef4:	f043 0320 	orr.w	r3, r3, #32
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e004      	b.n	800af0c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800af02:	2101      	movs	r1, #1
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f80b 	bl	800af20 <tcp_enqueue_flags>
 800af0a:	4603      	mov	r3, r0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	bd90      	pop	{r4, r7, pc}
 800af14:	080116dc 	.word	0x080116dc
 800af18:	08011ae4 	.word	0x08011ae4
 800af1c:	08011730 	.word	0x08011730

0800af20 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	f003 0303 	and.w	r3, r3, #3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d106      	bne.n	800af4c <tcp_enqueue_flags+0x2c>
 800af3e:	4b67      	ldr	r3, [pc, #412]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800af40:	f240 4212 	movw	r2, #1042	; 0x412
 800af44:	4966      	ldr	r1, [pc, #408]	; (800b0e0 <tcp_enqueue_flags+0x1c0>)
 800af46:	4867      	ldr	r0, [pc, #412]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800af48:	f004 f942 	bl	800f1d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <tcp_enqueue_flags+0x40>
 800af52:	4b62      	ldr	r3, [pc, #392]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800af54:	f240 4213 	movw	r2, #1043	; 0x413
 800af58:	4963      	ldr	r1, [pc, #396]	; (800b0e8 <tcp_enqueue_flags+0x1c8>)
 800af5a:	4862      	ldr	r0, [pc, #392]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800af5c:	f004 f938 	bl	800f1d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800af6a:	2301      	movs	r3, #1
 800af6c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af6e:	7ffb      	ldrb	r3, [r7, #31]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af82:	4619      	mov	r1, r3
 800af84:	2036      	movs	r0, #54	; 0x36
 800af86:	f7fb f967 	bl	8006258 <pbuf_alloc>
 800af8a:	6138      	str	r0, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d109      	bne.n	800afa6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8b5b      	ldrh	r3, [r3, #26]
 800af96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afa0:	f04f 33ff 	mov.w	r3, #4294967295
 800afa4:	e095      	b.n	800b0d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	895a      	ldrh	r2, [r3, #10]
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	b29b      	uxth	r3, r3
 800afae:	429a      	cmp	r2, r3
 800afb0:	d206      	bcs.n	800afc0 <tcp_enqueue_flags+0xa0>
 800afb2:	4b4a      	ldr	r3, [pc, #296]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800afb4:	f240 423a 	movw	r2, #1082	; 0x43a
 800afb8:	494c      	ldr	r1, [pc, #304]	; (800b0ec <tcp_enqueue_flags+0x1cc>)
 800afba:	484a      	ldr	r0, [pc, #296]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800afbc:	f004 f908 	bl	800f1d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800afc4:	78fa      	ldrb	r2, [r7, #3]
 800afc6:	7ffb      	ldrb	r3, [r7, #31]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	460b      	mov	r3, r1
 800afcc:	6939      	ldr	r1, [r7, #16]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff fd70 	bl	800aab4 <tcp_create_segment>
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d109      	bne.n	800aff0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	8b5b      	ldrh	r3, [r3, #26]
 800afe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	e070      	b.n	800b0d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <tcp_enqueue_flags+0xea>
 800affc:	4b37      	ldr	r3, [pc, #220]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800affe:	f240 4242 	movw	r2, #1090	; 0x442
 800b002:	493b      	ldr	r1, [pc, #236]	; (800b0f0 <tcp_enqueue_flags+0x1d0>)
 800b004:	4837      	ldr	r0, [pc, #220]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800b006:	f004 f8e3 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	891b      	ldrh	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d006      	beq.n	800b020 <tcp_enqueue_flags+0x100>
 800b012:	4b32      	ldr	r3, [pc, #200]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800b014:	f240 4243 	movw	r2, #1091	; 0x443
 800b018:	4936      	ldr	r1, [pc, #216]	; (800b0f4 <tcp_enqueue_flags+0x1d4>)
 800b01a:	4832      	ldr	r0, [pc, #200]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800b01c:	f004 f8d8 	bl	800f1d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b024:	2b00      	cmp	r3, #0
 800b026:	d103      	bne.n	800b030 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b02e:	e00d      	b.n	800b04c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b034:	61bb      	str	r3, [r7, #24]
 800b036:	e002      	b.n	800b03e <tcp_enqueue_flags+0x11e>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f8      	bne.n	800b038 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d104      	bne.n	800b068 <tcp_enqueue_flags+0x148>
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b072:	78fb      	ldrb	r3, [r7, #3]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d006      	beq.n	800b08a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	8b5b      	ldrh	r3, [r3, #26]
 800b080:	f043 0320 	orr.w	r3, r3, #32
 800b084:	b29a      	uxth	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fb fc4a 	bl	8006928 <pbuf_clen>
 800b094:	4603      	mov	r3, r0
 800b096:	461a      	mov	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b09e:	4413      	add	r3, r2
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <tcp_enqueue_flags+0x1b0>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <tcp_enqueue_flags+0x1b0>
 800b0c2:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <tcp_enqueue_flags+0x1bc>)
 800b0c4:	f240 4266 	movw	r2, #1126	; 0x466
 800b0c8:	490b      	ldr	r1, [pc, #44]	; (800b0f8 <tcp_enqueue_flags+0x1d8>)
 800b0ca:	4806      	ldr	r0, [pc, #24]	; (800b0e4 <tcp_enqueue_flags+0x1c4>)
 800b0cc:	f004 f880 	bl	800f1d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3720      	adds	r7, #32
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	080116dc 	.word	0x080116dc
 800b0e0:	08011b00 	.word	0x08011b00
 800b0e4:	08011730 	.word	0x08011730
 800b0e8:	08011b58 	.word	0x08011b58
 800b0ec:	08011b78 	.word	0x08011b78
 800b0f0:	08011bb4 	.word	0x08011bb4
 800b0f4:	08011bcc 	.word	0x08011bcc
 800b0f8:	08011bf8 	.word	0x08011bf8

0800b0fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b0fc:	b5b0      	push	{r4, r5, r7, lr}
 800b0fe:	b08a      	sub	sp, #40	; 0x28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <tcp_output+0x1c>
 800b10a:	4ba0      	ldr	r3, [pc, #640]	; (800b38c <tcp_output+0x290>)
 800b10c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b110:	499f      	ldr	r1, [pc, #636]	; (800b390 <tcp_output+0x294>)
 800b112:	48a0      	ldr	r0, [pc, #640]	; (800b394 <tcp_output+0x298>)
 800b114:	f004 f85c 	bl	800f1d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	7d1b      	ldrb	r3, [r3, #20]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d106      	bne.n	800b12e <tcp_output+0x32>
 800b120:	4b9a      	ldr	r3, [pc, #616]	; (800b38c <tcp_output+0x290>)
 800b122:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800b126:	499c      	ldr	r1, [pc, #624]	; (800b398 <tcp_output+0x29c>)
 800b128:	489a      	ldr	r0, [pc, #616]	; (800b394 <tcp_output+0x298>)
 800b12a:	f004 f851 	bl	800f1d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b12e:	4b9b      	ldr	r3, [pc, #620]	; (800b39c <tcp_output+0x2a0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d101      	bne.n	800b13c <tcp_output+0x40>
    return ERR_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	e1d2      	b.n	800b4e2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b148:	429a      	cmp	r2, r3
 800b14a:	d203      	bcs.n	800b154 <tcp_output+0x58>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b152:	e002      	b.n	800b15a <tcp_output+0x5e>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b15a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b160:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10b      	bne.n	800b180 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	8b5b      	ldrh	r3, [r3, #26]
 800b16c:	f003 0302 	and.w	r3, r3, #2
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 81a9 	beq.w	800b4c8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fdd6 	bl	800bd28 <tcp_send_empty_ack>
 800b17c:	4603      	mov	r3, r0
 800b17e:	e1b0      	b.n	800b4e2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3304      	adds	r3, #4
 800b186:	461a      	mov	r2, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff fc77 	bl	800aa7c <tcp_route>
 800b18e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <tcp_output+0xa0>
    return ERR_RTE;
 800b196:	f06f 0303 	mvn.w	r3, #3
 800b19a:	e1a2      	b.n	800b4e2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <tcp_output+0xae>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d111      	bne.n	800b1ce <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <tcp_output+0xba>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	e000      	b.n	800b1b8 <tcp_output+0xbc>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <tcp_output+0xca>
      return ERR_RTE;
 800b1c0:	f06f 0303 	mvn.w	r3, #3
 800b1c4:	e18d      	b.n	800b4e2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fa f899 	bl	800530c <lwip_htonl>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e4:	8912      	ldrh	r2, [r2, #8]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d227      	bcs.n	800b23e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d114      	bne.n	800b226 <tcp_output+0x12a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b200:	2b00      	cmp	r3, #0
 800b202:	d110      	bne.n	800b226 <tcp_output+0x12a>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10b      	bne.n	800b226 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	8b5b      	ldrh	r3, [r3, #26]
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 814c 	beq.w	800b4cc <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fd77 	bl	800bd28 <tcp_send_empty_ack>
 800b23a:	4603      	mov	r3, r0
 800b23c:	e151      	b.n	800b4e2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 811b 	beq.w	800b48a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800b254:	e002      	b.n	800b25c <tcp_output+0x160>
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	623b      	str	r3, [r7, #32]
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1f8      	bne.n	800b256 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b264:	e111      	b.n	800b48a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	899b      	ldrh	r3, [r3, #12]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fa f837 	bl	80052e2 <lwip_htons>
 800b274:	4603      	mov	r3, r0
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <tcp_output+0x192>
 800b280:	4b42      	ldr	r3, [pc, #264]	; (800b38c <tcp_output+0x290>)
 800b282:	f240 5237 	movw	r2, #1335	; 0x537
 800b286:	4946      	ldr	r1, [pc, #280]	; (800b3a0 <tcp_output+0x2a4>)
 800b288:	4842      	ldr	r0, [pc, #264]	; (800b394 <tcp_output+0x298>)
 800b28a:	f003 ffa1 	bl	800f1d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01f      	beq.n	800b2d6 <tcp_output+0x1da>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8b5b      	ldrh	r3, [r3, #26]
 800b29a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d119      	bne.n	800b2d6 <tcp_output+0x1da>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <tcp_output+0x1c6>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d110      	bne.n	800b2d6 <tcp_output+0x1da>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b8:	891a      	ldrh	r2, [r3, #8]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d209      	bcs.n	800b2d6 <tcp_output+0x1da>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <tcp_output+0x1da>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d901      	bls.n	800b2da <tcp_output+0x1de>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <tcp_output+0x1e0>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	8b5b      	ldrh	r3, [r3, #26]
 800b2e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 80e3 	beq.w	800b4b4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7d1b      	ldrb	r3, [r3, #20]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d00d      	beq.n	800b312 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	899b      	ldrh	r3, [r3, #12]
 800b2fc:	b29c      	uxth	r4, r3
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7f9 ffef 	bl	80052e2 <lwip_htons>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	4322      	orrs	r2, r4
 800b30e:	b292      	uxth	r2, r2
 800b310:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	6879      	ldr	r1, [r7, #4]
 800b316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b318:	f000 f908 	bl	800b52c <tcp_output_segment>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	8b5b      	ldrh	r3, [r3, #26]
 800b32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b330:	b29a      	uxth	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	835a      	strh	r2, [r3, #26]
      return err;
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b33a:	e0d2      	b.n	800b4e2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d006      	beq.n	800b35a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8b5b      	ldrh	r3, [r3, #26]
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f9 ffd3 	bl	800530c <lwip_htonl>
 800b366:	4604      	mov	r4, r0
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	891b      	ldrh	r3, [r3, #8]
 800b36c:	461d      	mov	r5, r3
 800b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	899b      	ldrh	r3, [r3, #12]
 800b374:	b29b      	uxth	r3, r3
 800b376:	4618      	mov	r0, r3
 800b378:	f7f9 ffb3 	bl	80052e2 <lwip_htons>
 800b37c:	4603      	mov	r3, r0
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00d      	beq.n	800b3a4 <tcp_output+0x2a8>
 800b388:	2301      	movs	r3, #1
 800b38a:	e00c      	b.n	800b3a6 <tcp_output+0x2aa>
 800b38c:	080116dc 	.word	0x080116dc
 800b390:	08011c20 	.word	0x08011c20
 800b394:	08011730 	.word	0x08011730
 800b398:	08011c38 	.word	0x08011c38
 800b39c:	20006d40 	.word	0x20006d40
 800b3a0:	08011c60 	.word	0x08011c60
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	442b      	add	r3, r5
 800b3a8:	4423      	add	r3, r4
 800b3aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	da02      	bge.n	800b3be <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	891b      	ldrh	r3, [r3, #8]
 800b3c2:	461c      	mov	r4, r3
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	899b      	ldrh	r3, [r3, #12]
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7f9 ff88 	bl	80052e2 <lwip_htons>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <tcp_output+0x2e6>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e000      	b.n	800b3e4 <tcp_output+0x2e8>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4423      	add	r3, r4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d049      	beq.n	800b47e <tcp_output+0x382>
      seg->next = NULL;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <tcp_output+0x308>
        pcb->unacked = seg;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	623b      	str	r3, [r7, #32]
 800b402:	e03f      	b.n	800b484 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f9 ff7e 	bl	800530c <lwip_htonl>
 800b410:	4604      	mov	r4, r0
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	4618      	mov	r0, r3
 800b41a:	f7f9 ff77 	bl	800530c <lwip_htonl>
 800b41e:	4603      	mov	r3, r0
 800b420:	1ae3      	subs	r3, r4, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	da24      	bge.n	800b470 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3370      	adds	r3, #112	; 0x70
 800b42a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b42c:	e002      	b.n	800b434 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d011      	beq.n	800b460 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4618      	mov	r0, r3
 800b446:	f7f9 ff61 	bl	800530c <lwip_htonl>
 800b44a:	4604      	mov	r4, r0
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	f7f9 ff5a 	bl	800530c <lwip_htonl>
 800b458:	4603      	mov	r3, r0
 800b45a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dbe6      	blt.n	800b42e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e009      	b.n	800b484 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b474:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	623b      	str	r3, [r7, #32]
 800b47c:	e002      	b.n	800b484 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b480:	f7fc fc42 	bl	8007d08 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d012      	beq.n	800b4b6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4618      	mov	r0, r3
 800b498:	f7f9 ff38 	bl	800530c <lwip_htonl>
 800b49c:	4602      	mov	r2, r0
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a6:	8912      	ldrh	r2, [r2, #8]
 800b4a8:	4413      	add	r3, r2
  while (seg != NULL &&
 800b4aa:	69ba      	ldr	r2, [r7, #24]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	f4bf aeda 	bcs.w	800b266 <tcp_output+0x16a>
 800b4b2:	e000      	b.n	800b4b6 <tcp_output+0x3ba>
      break;
 800b4b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d108      	bne.n	800b4d0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b4c6:	e004      	b.n	800b4d2 <tcp_output+0x3d6>
    goto output_done;
 800b4c8:	bf00      	nop
 800b4ca:	e002      	b.n	800b4d2 <tcp_output+0x3d6>
    goto output_done;
 800b4cc:	bf00      	nop
 800b4ce:	e000      	b.n	800b4d2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b4d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	8b5b      	ldrh	r3, [r3, #26]
 800b4d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3728      	adds	r7, #40	; 0x28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b4ea:	bf00      	nop

0800b4ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <tcp_output_segment_busy+0x1c>
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <tcp_output_segment_busy+0x34>)
 800b4fc:	f240 529a 	movw	r2, #1434	; 0x59a
 800b500:	4908      	ldr	r1, [pc, #32]	; (800b524 <tcp_output_segment_busy+0x38>)
 800b502:	4809      	ldr	r0, [pc, #36]	; (800b528 <tcp_output_segment_busy+0x3c>)
 800b504:	f003 fe64 	bl	800f1d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	7b9b      	ldrb	r3, [r3, #14]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d001      	beq.n	800b516 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b512:	2301      	movs	r3, #1
 800b514:	e000      	b.n	800b518 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	080116dc 	.word	0x080116dc
 800b524:	08011c78 	.word	0x08011c78
 800b528:	08011730 	.word	0x08011730

0800b52c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b52c:	b5b0      	push	{r4, r5, r7, lr}
 800b52e:	b08c      	sub	sp, #48	; 0x30
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <tcp_output_segment+0x20>
 800b53e:	4b64      	ldr	r3, [pc, #400]	; (800b6d0 <tcp_output_segment+0x1a4>)
 800b540:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b544:	4963      	ldr	r1, [pc, #396]	; (800b6d4 <tcp_output_segment+0x1a8>)
 800b546:	4864      	ldr	r0, [pc, #400]	; (800b6d8 <tcp_output_segment+0x1ac>)
 800b548:	f003 fe42 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <tcp_output_segment+0x34>
 800b552:	4b5f      	ldr	r3, [pc, #380]	; (800b6d0 <tcp_output_segment+0x1a4>)
 800b554:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b558:	4960      	ldr	r1, [pc, #384]	; (800b6dc <tcp_output_segment+0x1b0>)
 800b55a:	485f      	ldr	r0, [pc, #380]	; (800b6d8 <tcp_output_segment+0x1ac>)
 800b55c:	f003 fe38 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <tcp_output_segment+0x48>
 800b566:	4b5a      	ldr	r3, [pc, #360]	; (800b6d0 <tcp_output_segment+0x1a4>)
 800b568:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b56c:	495c      	ldr	r1, [pc, #368]	; (800b6e0 <tcp_output_segment+0x1b4>)
 800b56e:	485a      	ldr	r0, [pc, #360]	; (800b6d8 <tcp_output_segment+0x1ac>)
 800b570:	f003 fe2e 	bl	800f1d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7ff ffb9 	bl	800b4ec <tcp_output_segment_busy>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	e0a0      	b.n	800b6c6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68dc      	ldr	r4, [r3, #12]
 800b58c:	4610      	mov	r0, r2
 800b58e:	f7f9 febd 	bl	800530c <lwip_htonl>
 800b592:	4603      	mov	r3, r0
 800b594:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68dc      	ldr	r4, [r3, #12]
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f7f9 fe9f 	bl	80052e2 <lwip_htons>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b5b0:	441a      	add	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	7a9b      	ldrb	r3, [r3, #10]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d015      	beq.n	800b5f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b5d6:	f7fc fe8d 	bl	80082f4 <tcp_eff_send_mss_netif>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b5de:	8b7b      	ldrh	r3, [r7, #26]
 800b5e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f9 fe91 	bl	800530c <lwip_htonl>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da02      	bge.n	800b606 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2200      	movs	r2, #0
 800b604:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10c      	bne.n	800b628 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b60e:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <tcp_output_segment+0x1b8>)
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f9 fe75 	bl	800530c <lwip_htonl>
 800b622:	4602      	mov	r2, r0
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	461a      	mov	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	8959      	ldrh	r1, [r3, #10]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	8b3a      	ldrh	r2, [r7, #24]
 800b644:	1a8a      	subs	r2, r1, r2
 800b646:	b292      	uxth	r2, r2
 800b648:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	8919      	ldrh	r1, [r3, #8]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	8b3a      	ldrh	r2, [r7, #24]
 800b656:	1a8a      	subs	r2, r1, r2
 800b658:	b292      	uxth	r2, r2
 800b65a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	68d2      	ldr	r2, [r2, #12]
 800b664:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	741a      	strb	r2, [r3, #16]
 800b66e:	2200      	movs	r2, #0
 800b670:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f103 0214 	add.w	r2, r3, #20
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	7a9b      	ldrb	r3, [r3, #10]
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	4413      	add	r3, r2
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d006      	beq.n	800b69a <tcp_output_segment+0x16e>
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <tcp_output_segment+0x1a4>)
 800b68e:	f240 621c 	movw	r2, #1564	; 0x61c
 800b692:	4915      	ldr	r1, [pc, #84]	; (800b6e8 <tcp_output_segment+0x1bc>)
 800b694:	4810      	ldr	r0, [pc, #64]	; (800b6d8 <tcp_output_segment+0x1ac>)
 800b696:	f003 fd9b 	bl	800f1d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6858      	ldr	r0, [r3, #4]
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	1d1c      	adds	r4, r3, #4
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	7add      	ldrb	r5, [r3, #11]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	7a9b      	ldrb	r3, [r3, #10]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	9202      	str	r2, [sp, #8]
 800b6b0:	2206      	movs	r2, #6
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	f002 fd1f 	bl	800e0fc <ip4_output_if>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	080116dc 	.word	0x080116dc
 800b6d4:	08011ca0 	.word	0x08011ca0
 800b6d8:	08011730 	.word	0x08011730
 800b6dc:	08011cc0 	.word	0x08011cc0
 800b6e0:	08011ce0 	.word	0x08011ce0
 800b6e4:	20006d30 	.word	0x20006d30
 800b6e8:	08011d04 	.word	0x08011d04

0800b6ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b6ec:	b5b0      	push	{r4, r5, r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <tcp_rexmit_rto_prepare+0x1c>
 800b6fa:	4b31      	ldr	r3, [pc, #196]	; (800b7c0 <tcp_rexmit_rto_prepare+0xd4>)
 800b6fc:	f240 6263 	movw	r2, #1635	; 0x663
 800b700:	4930      	ldr	r1, [pc, #192]	; (800b7c4 <tcp_rexmit_rto_prepare+0xd8>)
 800b702:	4831      	ldr	r0, [pc, #196]	; (800b7c8 <tcp_rexmit_rto_prepare+0xdc>)
 800b704:	f003 fd64 	bl	800f1d0 <iprintf>

  if (pcb->unacked == NULL) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b710:	f06f 0305 	mvn.w	r3, #5
 800b714:	e050      	b.n	800b7b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	e00b      	b.n	800b736 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fee4 	bl	800b4ec <tcp_output_segment_busy>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b72a:	f06f 0305 	mvn.w	r3, #5
 800b72e:	e043      	b.n	800b7b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ef      	bne.n	800b71e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fed4 	bl	800b4ec <tcp_output_segment_busy>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b74a:	f06f 0305 	mvn.w	r3, #5
 800b74e:	e033      	b.n	800b7b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	8b5b      	ldrh	r3, [r3, #26]
 800b76a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f9 fdc6 	bl	800530c <lwip_htonl>
 800b780:	4604      	mov	r4, r0
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	891b      	ldrh	r3, [r3, #8]
 800b786:	461d      	mov	r5, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	899b      	ldrh	r3, [r3, #12]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4618      	mov	r0, r3
 800b792:	f7f9 fda6 	bl	80052e2 <lwip_htons>
 800b796:	4603      	mov	r3, r0
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <tcp_rexmit_rto_prepare+0xba>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <tcp_rexmit_rto_prepare+0xbc>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	442b      	add	r3, r5
 800b7aa:	18e2      	adds	r2, r4, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bdb0      	pop	{r4, r5, r7, pc}
 800b7c0:	080116dc 	.word	0x080116dc
 800b7c4:	08011d18 	.word	0x08011d18
 800b7c8:	08011730 	.word	0x08011730

0800b7cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <tcp_rexmit_rto_commit+0x1c>
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <tcp_rexmit_rto_commit+0x44>)
 800b7dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b7e0:	490c      	ldr	r1, [pc, #48]	; (800b814 <tcp_rexmit_rto_commit+0x48>)
 800b7e2:	480d      	ldr	r0, [pc, #52]	; (800b818 <tcp_rexmit_rto_commit+0x4c>)
 800b7e4:	f003 fcf4 	bl	800f1d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7ee:	2bff      	cmp	r3, #255	; 0xff
 800b7f0:	d007      	beq.n	800b802 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7ff fc7a 	bl	800b0fc <tcp_output>
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	080116dc 	.word	0x080116dc
 800b814:	08011d3c 	.word	0x08011d3c
 800b818:	08011730 	.word	0x08011730

0800b81c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <tcp_rexmit_rto+0x1c>
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <tcp_rexmit_rto+0x38>)
 800b82c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b830:	4909      	ldr	r1, [pc, #36]	; (800b858 <tcp_rexmit_rto+0x3c>)
 800b832:	480a      	ldr	r0, [pc, #40]	; (800b85c <tcp_rexmit_rto+0x40>)
 800b834:	f003 fccc 	bl	800f1d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ff57 	bl	800b6ec <tcp_rexmit_rto_prepare>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff ffc1 	bl	800b7cc <tcp_rexmit_rto_commit>
  }
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	080116dc 	.word	0x080116dc
 800b858:	08011d60 	.word	0x08011d60
 800b85c:	08011730 	.word	0x08011730

0800b860 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <tcp_rexmit+0x1c>
 800b86e:	4b2f      	ldr	r3, [pc, #188]	; (800b92c <tcp_rexmit+0xcc>)
 800b870:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b874:	492e      	ldr	r1, [pc, #184]	; (800b930 <tcp_rexmit+0xd0>)
 800b876:	482f      	ldr	r0, [pc, #188]	; (800b934 <tcp_rexmit+0xd4>)
 800b878:	f003 fcaa 	bl	800f1d0 <iprintf>

  if (pcb->unacked == NULL) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b880:	2b00      	cmp	r3, #0
 800b882:	d102      	bne.n	800b88a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b884:	f06f 0305 	mvn.w	r3, #5
 800b888:	e04c      	b.n	800b924 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b88e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b890:	68b8      	ldr	r0, [r7, #8]
 800b892:	f7ff fe2b 	bl	800b4ec <tcp_output_segment_busy>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b89c:	f06f 0305 	mvn.w	r3, #5
 800b8a0:	e040      	b.n	800b924 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	336c      	adds	r3, #108	; 0x6c
 800b8ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8b0:	e002      	b.n	800b8b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d011      	beq.n	800b8e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f9 fd1f 	bl	800530c <lwip_htonl>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f9 fd18 	bl	800530c <lwip_htonl>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dbe6      	blt.n	800b8b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d103      	bne.n	800b902 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b908:	2bff      	cmp	r3, #255	; 0xff
 800b90a:	d007      	beq.n	800b91c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b912:	3301      	adds	r3, #1
 800b914:	b2da      	uxtb	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd90      	pop	{r4, r7, pc}
 800b92c:	080116dc 	.word	0x080116dc
 800b930:	08011d7c 	.word	0x08011d7c
 800b934:	08011730 	.word	0x08011730

0800b938 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <tcp_rexmit_fast+0x1c>
 800b946:	4b2e      	ldr	r3, [pc, #184]	; (800ba00 <tcp_rexmit_fast+0xc8>)
 800b948:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b94c:	492d      	ldr	r1, [pc, #180]	; (800ba04 <tcp_rexmit_fast+0xcc>)
 800b94e:	482e      	ldr	r0, [pc, #184]	; (800ba08 <tcp_rexmit_fast+0xd0>)
 800b950:	f003 fc3e 	bl	800f1d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d04d      	beq.n	800b9f8 <tcp_rexmit_fast+0xc0>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	8b5b      	ldrh	r3, [r3, #26]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d147      	bne.n	800b9f8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff ff79 	bl	800b860 <tcp_rexmit>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d141      	bne.n	800b9f8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b980:	429a      	cmp	r2, r3
 800b982:	d207      	bcs.n	800b994 <tcp_rexmit_fast+0x5c>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b98a:	0fda      	lsrs	r2, r3, #31
 800b98c:	4413      	add	r3, r2
 800b98e:	105b      	asrs	r3, r3, #1
 800b990:	b29b      	uxth	r3, r3
 800b992:	e006      	b.n	800b9a2 <tcp_rexmit_fast+0x6a>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b99a:	0fda      	lsrs	r2, r3, #31
 800b99c:	4413      	add	r3, r2
 800b99e:	105b      	asrs	r3, r3, #1
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d206      	bcs.n	800b9c8 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	0049      	lsls	r1, r1, #1
 800b9d6:	440b      	add	r3, r1
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	4413      	add	r3, r2
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8b5b      	ldrh	r3, [r3, #26]
 800b9e8:	f043 0304 	orr.w	r3, r3, #4
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	080116dc 	.word	0x080116dc
 800ba04:	08011d94 	.word	0x08011d94
 800ba08:	08011730 	.word	0x08011730

0800ba0c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	817b      	strh	r3, [r7, #10]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba1e:	897a      	ldrh	r2, [r7, #10]
 800ba20:	893b      	ldrh	r3, [r7, #8]
 800ba22:	4413      	add	r3, r2
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3314      	adds	r3, #20
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba2e:	4619      	mov	r1, r3
 800ba30:	2022      	movs	r0, #34	; 0x22
 800ba32:	f7fa fc11 	bl	8006258 <pbuf_alloc>
 800ba36:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d04e      	beq.n	800badc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	895b      	ldrh	r3, [r3, #10]
 800ba42:	461a      	mov	r2, r3
 800ba44:	897b      	ldrh	r3, [r7, #10]
 800ba46:	3314      	adds	r3, #20
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	da06      	bge.n	800ba5a <tcp_output_alloc_header_common+0x4e>
 800ba4c:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <tcp_output_alloc_header_common+0xdc>)
 800ba4e:	f240 7224 	movw	r2, #1828	; 0x724
 800ba52:	4926      	ldr	r1, [pc, #152]	; (800baec <tcp_output_alloc_header_common+0xe0>)
 800ba54:	4826      	ldr	r0, [pc, #152]	; (800baf0 <tcp_output_alloc_header_common+0xe4>)
 800ba56:	f003 fbbb 	bl	800f1d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba60:	8c3b      	ldrh	r3, [r7, #32]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f9 fc3d 	bl	80052e2 <lwip_htons>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f9 fc35 	bl	80052e2 <lwip_htons>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7f9 fc40 	bl	800530c <lwip_htonl>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ba92:	897b      	ldrh	r3, [r7, #10]
 800ba94:	089b      	lsrs	r3, r3, #2
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3305      	adds	r3, #5
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	031b      	lsls	r3, r3, #12
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	4313      	orrs	r3, r2
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	4618      	mov	r0, r3
 800baac:	f7f9 fc19 	bl	80052e2 <lwip_htons>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bab8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800baba:	4618      	mov	r0, r3
 800babc:	f7f9 fc11 	bl	80052e2 <lwip_htons>
 800bac0:	4603      	mov	r3, r0
 800bac2:	461a      	mov	r2, r3
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2200      	movs	r2, #0
 800bacc:	741a      	strb	r2, [r3, #16]
 800bace:	2200      	movs	r2, #0
 800bad0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2200      	movs	r2, #0
 800bad6:	749a      	strb	r2, [r3, #18]
 800bad8:	2200      	movs	r2, #0
 800bada:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800badc:	697b      	ldr	r3, [r7, #20]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	080116dc 	.word	0x080116dc
 800baec:	08011db4 	.word	0x08011db4
 800baf0:	08011730 	.word	0x08011730

0800baf4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800baf4:	b5b0      	push	{r4, r5, r7, lr}
 800baf6:	b08a      	sub	sp, #40	; 0x28
 800baf8:	af04      	add	r7, sp, #16
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	607b      	str	r3, [r7, #4]
 800bafe:	460b      	mov	r3, r1
 800bb00:	817b      	strh	r3, [r7, #10]
 800bb02:	4613      	mov	r3, r2
 800bb04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d106      	bne.n	800bb1a <tcp_output_alloc_header+0x26>
 800bb0c:	4b15      	ldr	r3, [pc, #84]	; (800bb64 <tcp_output_alloc_header+0x70>)
 800bb0e:	f240 7242 	movw	r2, #1858	; 0x742
 800bb12:	4915      	ldr	r1, [pc, #84]	; (800bb68 <tcp_output_alloc_header+0x74>)
 800bb14:	4815      	ldr	r0, [pc, #84]	; (800bb6c <tcp_output_alloc_header+0x78>)
 800bb16:	f003 fb5b 	bl	800f1d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8adb      	ldrh	r3, [r3, #22]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	8b12      	ldrh	r2, [r2, #24]
 800bb26:	68f9      	ldr	r1, [r7, #12]
 800bb28:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bb2a:	893d      	ldrh	r5, [r7, #8]
 800bb2c:	897c      	ldrh	r4, [r7, #10]
 800bb2e:	9103      	str	r1, [sp, #12]
 800bb30:	2110      	movs	r1, #16
 800bb32:	9102      	str	r1, [sp, #8]
 800bb34:	9201      	str	r2, [sp, #4]
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	462a      	mov	r2, r5
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	f7ff ff65 	bl	800ba0c <tcp_output_alloc_header_common>
 800bb42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d006      	beq.n	800bb58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb52:	441a      	add	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bb58:	697b      	ldr	r3, [r7, #20]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bdb0      	pop	{r4, r5, r7, pc}
 800bb62:	bf00      	nop
 800bb64:	080116dc 	.word	0x080116dc
 800bb68:	08011de4 	.word	0x08011de4
 800bb6c:	08011730 	.word	0x08011730

0800bb70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	460b      	mov	r3, r1
 800bb80:	71fb      	strb	r3, [r7, #7]
 800bb82:	4613      	mov	r3, r2
 800bb84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d106      	bne.n	800bb9e <tcp_output_fill_options+0x2e>
 800bb90:	4b13      	ldr	r3, [pc, #76]	; (800bbe0 <tcp_output_fill_options+0x70>)
 800bb92:	f240 7256 	movw	r2, #1878	; 0x756
 800bb96:	4913      	ldr	r1, [pc, #76]	; (800bbe4 <tcp_output_fill_options+0x74>)
 800bb98:	4813      	ldr	r0, [pc, #76]	; (800bbe8 <tcp_output_fill_options+0x78>)
 800bb9a:	f003 fb19 	bl	800f1d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	3314      	adds	r3, #20
 800bba8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	f103 0214 	add.w	r2, r3, #20
 800bbb0:	8bfb      	ldrh	r3, [r7, #30]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	f003 0304 	and.w	r3, r3, #4
 800bbbe:	440b      	add	r3, r1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d006      	beq.n	800bbd6 <tcp_output_fill_options+0x66>
 800bbc8:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <tcp_output_fill_options+0x70>)
 800bbca:	f240 7275 	movw	r2, #1909	; 0x775
 800bbce:	4907      	ldr	r1, [pc, #28]	; (800bbec <tcp_output_fill_options+0x7c>)
 800bbd0:	4805      	ldr	r0, [pc, #20]	; (800bbe8 <tcp_output_fill_options+0x78>)
 800bbd2:	f003 fafd 	bl	800f1d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bbd6:	bf00      	nop
 800bbd8:	3720      	adds	r7, #32
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	080116dc 	.word	0x080116dc
 800bbe4:	08011e0c 	.word	0x08011e0c
 800bbe8:	08011730 	.word	0x08011730
 800bbec:	08011d04 	.word	0x08011d04

0800bbf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af04      	add	r7, sp, #16
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <tcp_output_control_segment+0x22>
 800bc04:	4b1c      	ldr	r3, [pc, #112]	; (800bc78 <tcp_output_control_segment+0x88>)
 800bc06:	f240 7287 	movw	r2, #1927	; 0x787
 800bc0a:	491c      	ldr	r1, [pc, #112]	; (800bc7c <tcp_output_control_segment+0x8c>)
 800bc0c:	481c      	ldr	r0, [pc, #112]	; (800bc80 <tcp_output_control_segment+0x90>)
 800bc0e:	f003 fadf 	bl	800f1d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7fe ff30 	bl	800aa7c <tcp_route>
 800bc1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bc24:	23fc      	movs	r3, #252	; 0xfc
 800bc26:	75fb      	strb	r3, [r7, #23]
 800bc28:	e01c      	b.n	800bc64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d006      	beq.n	800bc3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	7adb      	ldrb	r3, [r3, #11]
 800bc34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7a9b      	ldrb	r3, [r3, #10]
 800bc3a:	757b      	strb	r3, [r7, #21]
 800bc3c:	e003      	b.n	800bc46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bc3e:	23ff      	movs	r3, #255	; 0xff
 800bc40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bc46:	7dba      	ldrb	r2, [r7, #22]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	2306      	movs	r3, #6
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	7d7b      	ldrb	r3, [r7, #21]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	4613      	mov	r3, r2
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	68b8      	ldr	r0, [r7, #8]
 800bc5c:	f002 fa4e 	bl	800e0fc <ip4_output_if>
 800bc60:	4603      	mov	r3, r0
 800bc62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc64:	68b8      	ldr	r0, [r7, #8]
 800bc66:	f7fa fdd7 	bl	8006818 <pbuf_free>
  return err;
 800bc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	080116dc 	.word	0x080116dc
 800bc7c:	08011e34 	.word	0x08011e34
 800bc80:	08011730 	.word	0x08011730

0800bc84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b08b      	sub	sp, #44	; 0x2c
 800bc88:	af04      	add	r7, sp, #16
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <tcp_rst+0x22>
 800bc98:	4b1f      	ldr	r3, [pc, #124]	; (800bd18 <tcp_rst+0x94>)
 800bc9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bc9e:	491f      	ldr	r1, [pc, #124]	; (800bd1c <tcp_rst+0x98>)
 800bca0:	481f      	ldr	r0, [pc, #124]	; (800bd20 <tcp_rst+0x9c>)
 800bca2:	f003 fa95 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <tcp_rst+0x36>
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <tcp_rst+0x94>)
 800bcae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bcb2:	491c      	ldr	r1, [pc, #112]	; (800bd24 <tcp_rst+0xa0>)
 800bcb4:	481a      	ldr	r0, [pc, #104]	; (800bd20 <tcp_rst+0x9c>)
 800bcb6:	f003 fa8b 	bl	800f1d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bcbe:	f246 0308 	movw	r3, #24584	; 0x6008
 800bcc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	b29c      	uxth	r4, r3
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7f9 fb1f 	bl	800530c <lwip_htonl>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	8abb      	ldrh	r3, [r7, #20]
 800bcd2:	9303      	str	r3, [sp, #12]
 800bcd4:	2314      	movs	r3, #20
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4613      	mov	r3, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	4621      	mov	r1, r4
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff fe90 	bl	800ba0c <tcp_output_alloc_header_common>
 800bcec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6939      	ldr	r1, [r7, #16]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff ff38 	bl	800bb70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6939      	ldr	r1, [r7, #16]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff ff72 	bl	800bbf0 <tcp_output_control_segment>
 800bd0c:	e000      	b.n	800bd10 <tcp_rst+0x8c>
    return;
 800bd0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	080116dc 	.word	0x080116dc
 800bd1c:	08011e60 	.word	0x08011e60
 800bd20:	08011730 	.word	0x08011730
 800bd24:	08011e7c 	.word	0x08011e7c

0800bd28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <tcp_send_empty_ack+0x24>
 800bd3e:	4b28      	ldr	r3, [pc, #160]	; (800bde0 <tcp_send_empty_ack+0xb8>)
 800bd40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bd44:	4927      	ldr	r1, [pc, #156]	; (800bde4 <tcp_send_empty_ack+0xbc>)
 800bd46:	4828      	ldr	r0, [pc, #160]	; (800bde8 <tcp_send_empty_ack+0xc0>)
 800bd48:	f003 fa42 	bl	800f1d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bd58:	7d7b      	ldrb	r3, [r7, #21]
 800bd5a:	b29c      	uxth	r4, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f9 fad3 	bl	800530c <lwip_htonl>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fec1 	bl	800baf4 <tcp_output_alloc_header>
 800bd72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8b5b      	ldrh	r3, [r3, #26]
 800bd7e:	f043 0303 	orr.w	r3, r3, #3
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bd88:	f06f 0301 	mvn.w	r3, #1
 800bd8c:	e023      	b.n	800bdd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bd8e:	7dbb      	ldrb	r3, [r7, #22]
 800bd90:	7dfa      	ldrb	r2, [r7, #23]
 800bd92:	6939      	ldr	r1, [r7, #16]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff feeb 	bl	800bb70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	6939      	ldr	r1, [r7, #16]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ff24 	bl	800bbf0 <tcp_output_control_segment>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8b5b      	ldrh	r3, [r3, #26]
 800bdb8:	f043 0303 	orr.w	r3, r3, #3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	835a      	strh	r2, [r3, #26]
 800bdc2:	e006      	b.n	800bdd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd90      	pop	{r4, r7, pc}
 800bdde:	bf00      	nop
 800bde0:	080116dc 	.word	0x080116dc
 800bde4:	08011e98 	.word	0x08011e98
 800bde8:	08011730 	.word	0x08011730

0800bdec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bdec:	b590      	push	{r4, r7, lr}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <tcp_keepalive+0x20>
 800bdfe:	4b18      	ldr	r3, [pc, #96]	; (800be60 <tcp_keepalive+0x74>)
 800be00:	f640 0224 	movw	r2, #2084	; 0x824
 800be04:	4917      	ldr	r1, [pc, #92]	; (800be64 <tcp_keepalive+0x78>)
 800be06:	4818      	ldr	r0, [pc, #96]	; (800be68 <tcp_keepalive+0x7c>)
 800be08:	f003 f9e2 	bl	800f1d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	b29c      	uxth	r4, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be14:	3b01      	subs	r3, #1
 800be16:	4618      	mov	r0, r3
 800be18:	f7f9 fa78 	bl	800530c <lwip_htonl>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2200      	movs	r2, #0
 800be20:	4621      	mov	r1, r4
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff fe66 	bl	800baf4 <tcp_output_alloc_header>
 800be28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800be30:	f04f 33ff 	mov.w	r3, #4294967295
 800be34:	e010      	b.n	800be58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2200      	movs	r2, #0
 800be3a:	6939      	ldr	r1, [r7, #16]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fe97 	bl	800bb70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3304      	adds	r3, #4
 800be48:	6939      	ldr	r1, [r7, #16]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff fed0 	bl	800bbf0 <tcp_output_control_segment>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd90      	pop	{r4, r7, pc}
 800be60:	080116dc 	.word	0x080116dc
 800be64:	08011eb8 	.word	0x08011eb8
 800be68:	08011730 	.word	0x08011730

0800be6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b08b      	sub	sp, #44	; 0x2c
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <tcp_zero_window_probe+0x22>
 800be80:	4b4c      	ldr	r3, [pc, #304]	; (800bfb4 <tcp_zero_window_probe+0x148>)
 800be82:	f640 024f 	movw	r2, #2127	; 0x84f
 800be86:	494c      	ldr	r1, [pc, #304]	; (800bfb8 <tcp_zero_window_probe+0x14c>)
 800be88:	484c      	ldr	r0, [pc, #304]	; (800bfbc <tcp_zero_window_probe+0x150>)
 800be8a:	f003 f9a1 	bl	800f1d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e086      	b.n	800bfac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bea4:	2bff      	cmp	r3, #255	; 0xff
 800bea6:	d007      	beq.n	800beb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800beae:	3301      	adds	r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	899b      	ldrh	r3, [r3, #12]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7f9 fa0e 	bl	80052e2 <lwip_htons>
 800bec6:	4603      	mov	r3, r0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <tcp_zero_window_probe+0x72>
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	891b      	ldrh	r3, [r3, #8]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <tcp_zero_window_probe+0x72>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <tcp_zero_window_probe+0x74>
 800bede:	2300      	movs	r3, #0
 800bee0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bee2:	7ffb      	ldrb	r3, [r7, #31]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bf0c      	ite	eq
 800bee8:	2301      	moveq	r3, #1
 800beea:	2300      	movne	r3, #0
 800beec:	b2db      	uxtb	r3, r3
 800beee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bef4:	b299      	uxth	r1, r3
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	8bba      	ldrh	r2, [r7, #28]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fdf8 	bl	800baf4 <tcp_output_alloc_header>
 800bf04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bf0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf10:	e04c      	b.n	800bfac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	899b      	ldrh	r3, [r3, #12]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	b21b      	sxth	r3, r3
 800bf26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf2a:	b21c      	sxth	r4, r3
 800bf2c:	2011      	movs	r0, #17
 800bf2e:	f7f9 f9d8 	bl	80052e2 <lwip_htons>
 800bf32:	4603      	mov	r3, r0
 800bf34:	b21b      	sxth	r3, r3
 800bf36:	4323      	orrs	r3, r4
 800bf38:	b21b      	sxth	r3, r3
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	819a      	strh	r2, [r3, #12]
 800bf40:	e010      	b.n	800bf64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	3314      	adds	r3, #20
 800bf48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	6858      	ldr	r0, [r3, #4]
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	891a      	ldrh	r2, [r3, #8]
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	6939      	ldr	r1, [r7, #16]
 800bf60:	f7fa fe54 	bl	8006c0c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f9 f9ce 	bl	800530c <lwip_htonl>
 800bf70:	4603      	mov	r3, r0
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	da02      	bge.n	800bf88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	69b9      	ldr	r1, [r7, #24]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fded 	bl	800bb70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	69b9      	ldr	r1, [r7, #24]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe26 	bl	800bbf0 <tcp_output_control_segment>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	372c      	adds	r7, #44	; 0x2c
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd90      	pop	{r4, r7, pc}
 800bfb4:	080116dc 	.word	0x080116dc
 800bfb8:	08011ed4 	.word	0x08011ed4
 800bfbc:	08011730 	.word	0x08011730

0800bfc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bfc8:	f7fa ff0e 	bl	8006de8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <tcpip_tcp_timer+0x38>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d103      	bne.n	800bfdc <tcpip_tcp_timer+0x1c>
 800bfd4:	4b09      	ldr	r3, [pc, #36]	; (800bffc <tcpip_tcp_timer+0x3c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4908      	ldr	r1, [pc, #32]	; (800c000 <tcpip_tcp_timer+0x40>)
 800bfe0:	20fa      	movs	r0, #250	; 0xfa
 800bfe2:	f000 f8f1 	bl	800c1c8 <sys_timeout>
 800bfe6:	e002      	b.n	800bfee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bfe8:	4b06      	ldr	r3, [pc, #24]	; (800c004 <tcpip_tcp_timer+0x44>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
  }
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20006d2c 	.word	0x20006d2c
 800bffc:	20006d3c 	.word	0x20006d3c
 800c000:	0800bfc1 	.word	0x0800bfc1
 800c004:	2000011c 	.word	0x2000011c

0800c008 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c00c:	4b0a      	ldr	r3, [pc, #40]	; (800c038 <tcp_timer_needed+0x30>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10f      	bne.n	800c034 <tcp_timer_needed+0x2c>
 800c014:	4b09      	ldr	r3, [pc, #36]	; (800c03c <tcp_timer_needed+0x34>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <tcp_timer_needed+0x1c>
 800c01c:	4b08      	ldr	r3, [pc, #32]	; (800c040 <tcp_timer_needed+0x38>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c024:	4b04      	ldr	r3, [pc, #16]	; (800c038 <tcp_timer_needed+0x30>)
 800c026:	2201      	movs	r2, #1
 800c028:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c02a:	2200      	movs	r2, #0
 800c02c:	4905      	ldr	r1, [pc, #20]	; (800c044 <tcp_timer_needed+0x3c>)
 800c02e:	20fa      	movs	r0, #250	; 0xfa
 800c030:	f000 f8ca 	bl	800c1c8 <sys_timeout>
  }
}
 800c034:	bf00      	nop
 800c036:	bd80      	pop	{r7, pc}
 800c038:	2000011c 	.word	0x2000011c
 800c03c:	20006d2c 	.word	0x20006d2c
 800c040:	20006d3c 	.word	0x20006d3c
 800c044:	0800bfc1 	.word	0x0800bfc1

0800c048 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c054:	2006      	movs	r0, #6
 800c056:	f7f9 fd99 	bl	8005b8c <memp_malloc>
 800c05a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d109      	bne.n	800c076 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d151      	bne.n	800c10c <sys_timeout_abs+0xc4>
 800c068:	4b2a      	ldr	r3, [pc, #168]	; (800c114 <sys_timeout_abs+0xcc>)
 800c06a:	22be      	movs	r2, #190	; 0xbe
 800c06c:	492a      	ldr	r1, [pc, #168]	; (800c118 <sys_timeout_abs+0xd0>)
 800c06e:	482b      	ldr	r0, [pc, #172]	; (800c11c <sys_timeout_abs+0xd4>)
 800c070:	f003 f8ae 	bl	800f1d0 <iprintf>
    return;
 800c074:	e04a      	b.n	800c10c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c08e:	4b24      	ldr	r3, [pc, #144]	; (800c120 <sys_timeout_abs+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c096:	4a22      	ldr	r2, [pc, #136]	; (800c120 <sys_timeout_abs+0xd8>)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6013      	str	r3, [r2, #0]
    return;
 800c09c:	e037      	b.n	800c10e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4b1f      	ldr	r3, [pc, #124]	; (800c120 <sys_timeout_abs+0xd8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	0fdb      	lsrs	r3, r3, #31
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <sys_timeout_abs+0xd8>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0be:	4a18      	ldr	r2, [pc, #96]	; (800c120 <sys_timeout_abs+0xd8>)
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e023      	b.n	800c10e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0c6:	4b16      	ldr	r3, [pc, #88]	; (800c120 <sys_timeout_abs+0xd8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	e01a      	b.n	800c104 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00b      	beq.n	800c0ee <sys_timeout_abs+0xa6>
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	0fdb      	lsrs	r3, r3, #31
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d007      	beq.n	800c0fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	601a      	str	r2, [r3, #0]
        break;
 800c0fc:	e007      	b.n	800c10e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e1      	bne.n	800c0ce <sys_timeout_abs+0x86>
 800c10a:	e000      	b.n	800c10e <sys_timeout_abs+0xc6>
    return;
 800c10c:	bf00      	nop
      }
    }
  }
}
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	08011ef8 	.word	0x08011ef8
 800c118:	08011f2c 	.word	0x08011f2c
 800c11c:	08011f6c 	.word	0x08011f6c
 800c120:	20000114 	.word	0x20000114

0800c124 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	4798      	blx	r3

  now = sys_now();
 800c136:	f7f9 f8cd 	bl	80052d4 <sys_now>
 800c13a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <lwip_cyclic_timer+0x5c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4413      	add	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	0fdb      	lsrs	r3, r3, #31
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4907      	ldr	r1, [pc, #28]	; (800c184 <lwip_cyclic_timer+0x60>)
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff ff6e 	bl	800c048 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c16c:	e004      	b.n	800c178 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	4904      	ldr	r1, [pc, #16]	; (800c184 <lwip_cyclic_timer+0x60>)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff ff68 	bl	800c048 <sys_timeout_abs>
}
 800c178:	bf00      	nop
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20000118 	.word	0x20000118
 800c184:	0800c125 	.word	0x0800c125

0800c188 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c18e:	2301      	movs	r3, #1
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e00e      	b.n	800c1b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c194:	4a0a      	ldr	r2, [pc, #40]	; (800c1c0 <sys_timeouts_init+0x38>)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	4a07      	ldr	r2, [pc, #28]	; (800c1c0 <sys_timeouts_init+0x38>)
 800c1a2:	4413      	add	r3, r2
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4907      	ldr	r1, [pc, #28]	; (800c1c4 <sys_timeouts_init+0x3c>)
 800c1a8:	f000 f80e 	bl	800c1c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	607b      	str	r3, [r7, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d9ed      	bls.n	800c194 <sys_timeouts_init+0xc>
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	08012ad8 	.word	0x08012ad8
 800c1c4:	0800c125 	.word	0x0800c125

0800c1c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1da:	d306      	bcc.n	800c1ea <sys_timeout+0x22>
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <sys_timeout+0x40>)
 800c1de:	f240 1229 	movw	r2, #297	; 0x129
 800c1e2:	490a      	ldr	r1, [pc, #40]	; (800c20c <sys_timeout+0x44>)
 800c1e4:	480a      	ldr	r0, [pc, #40]	; (800c210 <sys_timeout+0x48>)
 800c1e6:	f002 fff3 	bl	800f1d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1ea:	f7f9 f873 	bl	80052d4 <sys_now>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	6978      	ldr	r0, [r7, #20]
 800c1fc:	f7ff ff24 	bl	800c048 <sys_timeout_abs>
#endif
}
 800c200:	bf00      	nop
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	08011ef8 	.word	0x08011ef8
 800c20c:	08011f94 	.word	0x08011f94
 800c210:	08011f6c 	.word	0x08011f6c

0800c214 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c21a:	f7f9 f85b 	bl	80052d4 <sys_now>
 800c21e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c220:	4b1a      	ldr	r3, [pc, #104]	; (800c28c <sys_check_timeouts+0x78>)
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <sys_check_timeouts+0x1a>
 800c22a:	f7f9 ffbf 	bl	80061ac <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c22e:	4b18      	ldr	r3, [pc, #96]	; (800c290 <sys_check_timeouts+0x7c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d022      	beq.n	800c280 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	0fdb      	lsrs	r3, r3, #31
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d11a      	bne.n	800c284 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a0f      	ldr	r2, [pc, #60]	; (800c290 <sys_check_timeouts+0x7c>)
 800c254:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	4a0b      	ldr	r2, [pc, #44]	; (800c294 <sys_check_timeouts+0x80>)
 800c268:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	2006      	movs	r0, #6
 800c26e:	f7f9 fcd9 	bl	8005c24 <memp_free>
    if (handler != NULL) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0d3      	beq.n	800c220 <sys_check_timeouts+0xc>
      handler(arg);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6838      	ldr	r0, [r7, #0]
 800c27c:	4798      	blx	r3
  do {
 800c27e:	e7cf      	b.n	800c220 <sys_check_timeouts+0xc>
      return;
 800c280:	bf00      	nop
 800c282:	e000      	b.n	800c286 <sys_check_timeouts+0x72>
      return;
 800c284:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20006d24 	.word	0x20006d24
 800c290:	20000114 	.word	0x20000114
 800c294:	20000118 	.word	0x20000118

0800c298 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c29c:	f002 ffb0 	bl	800f200 <rand>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	4b01      	ldr	r3, [pc, #4]	; (800c2b8 <udp_init+0x20>)
 800c2b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c2b4:	bf00      	nop
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20000024 	.word	0x20000024

0800c2bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c2c6:	4b17      	ldr	r3, [pc, #92]	; (800c324 <udp_new_port+0x68>)
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	b291      	uxth	r1, r2
 800c2ce:	4a15      	ldr	r2, [pc, #84]	; (800c324 <udp_new_port+0x68>)
 800c2d0:	8011      	strh	r1, [r2, #0]
 800c2d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d103      	bne.n	800c2e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c2da:	4b12      	ldr	r3, [pc, #72]	; (800c324 <udp_new_port+0x68>)
 800c2dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c2e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2e2:	4b11      	ldr	r3, [pc, #68]	; (800c328 <udp_new_port+0x6c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	e011      	b.n	800c30e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	8a5a      	ldrh	r2, [r3, #18]
 800c2ee:	4b0d      	ldr	r3, [pc, #52]	; (800c324 <udp_new_port+0x68>)
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d108      	bne.n	800c308 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	80fb      	strh	r3, [r7, #6]
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c302:	d3e0      	bcc.n	800c2c6 <udp_new_port+0xa>
        return 0;
 800c304:	2300      	movs	r3, #0
 800c306:	e007      	b.n	800c318 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	603b      	str	r3, [r7, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1ea      	bne.n	800c2ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c314:	4b03      	ldr	r3, [pc, #12]	; (800c324 <udp_new_port+0x68>)
 800c316:	881b      	ldrh	r3, [r3, #0]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20000024 	.word	0x20000024
 800c328:	20006d44 	.word	0x20006d44

0800c32c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <udp_input_local_match+0x20>
 800c340:	4b27      	ldr	r3, [pc, #156]	; (800c3e0 <udp_input_local_match+0xb4>)
 800c342:	2287      	movs	r2, #135	; 0x87
 800c344:	4927      	ldr	r1, [pc, #156]	; (800c3e4 <udp_input_local_match+0xb8>)
 800c346:	4828      	ldr	r0, [pc, #160]	; (800c3e8 <udp_input_local_match+0xbc>)
 800c348:	f002 ff42 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d105      	bne.n	800c35e <udp_input_local_match+0x32>
 800c352:	4b23      	ldr	r3, [pc, #140]	; (800c3e0 <udp_input_local_match+0xb4>)
 800c354:	2288      	movs	r2, #136	; 0x88
 800c356:	4925      	ldr	r1, [pc, #148]	; (800c3ec <udp_input_local_match+0xc0>)
 800c358:	4823      	ldr	r0, [pc, #140]	; (800c3e8 <udp_input_local_match+0xbc>)
 800c35a:	f002 ff39 	bl	800f1d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	7a1b      	ldrb	r3, [r3, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	7a1a      	ldrb	r2, [r3, #8]
 800c36a:	4b21      	ldr	r3, [pc, #132]	; (800c3f0 <udp_input_local_match+0xc4>)
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c372:	3301      	adds	r3, #1
 800c374:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c376:	429a      	cmp	r2, r3
 800c378:	d001      	beq.n	800c37e <udp_input_local_match+0x52>
    return 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	e02b      	b.n	800c3d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d018      	beq.n	800c3b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d013      	beq.n	800c3b2 <udp_input_local_match+0x86>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c392:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <udp_input_local_match+0xc4>)
 800c394:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39a:	d00a      	beq.n	800c3b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b13      	ldr	r3, [pc, #76]	; (800c3f0 <udp_input_local_match+0xc4>)
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	405a      	eors	r2, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d110      	bne.n	800c3d4 <udp_input_local_match+0xa8>
          return 1;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e00f      	b.n	800c3d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d009      	beq.n	800c3d0 <udp_input_local_match+0xa4>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <udp_input_local_match+0xa4>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <udp_input_local_match+0xc4>)
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d101      	bne.n	800c3d4 <udp_input_local_match+0xa8>
        return 1;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e000      	b.n	800c3d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	08011fe0 	.word	0x08011fe0
 800c3e4:	08012010 	.word	0x08012010
 800c3e8:	08012034 	.word	0x08012034
 800c3ec:	0801205c 	.word	0x0801205c
 800c3f0:	200037e8 	.word	0x200037e8

0800c3f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b08d      	sub	sp, #52	; 0x34
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d105      	bne.n	800c414 <udp_input+0x20>
 800c408:	4b7c      	ldr	r3, [pc, #496]	; (800c5fc <udp_input+0x208>)
 800c40a:	22cf      	movs	r2, #207	; 0xcf
 800c40c:	497c      	ldr	r1, [pc, #496]	; (800c600 <udp_input+0x20c>)
 800c40e:	487d      	ldr	r0, [pc, #500]	; (800c604 <udp_input+0x210>)
 800c410:	f002 fede 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d105      	bne.n	800c426 <udp_input+0x32>
 800c41a:	4b78      	ldr	r3, [pc, #480]	; (800c5fc <udp_input+0x208>)
 800c41c:	22d0      	movs	r2, #208	; 0xd0
 800c41e:	497a      	ldr	r1, [pc, #488]	; (800c608 <udp_input+0x214>)
 800c420:	4878      	ldr	r0, [pc, #480]	; (800c604 <udp_input+0x210>)
 800c422:	f002 fed5 	bl	800f1d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	895b      	ldrh	r3, [r3, #10]
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	d803      	bhi.n	800c436 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7fa f9f2 	bl	8006818 <pbuf_free>
    goto end;
 800c434:	e0de      	b.n	800c5f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c43c:	4b73      	ldr	r3, [pc, #460]	; (800c60c <udp_input+0x218>)
 800c43e:	695a      	ldr	r2, [r3, #20]
 800c440:	4b72      	ldr	r3, [pc, #456]	; (800c60c <udp_input+0x218>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f001 ff30 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800c44c:	4603      	mov	r3, r0
 800c44e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	b29b      	uxth	r3, r3
 800c456:	4618      	mov	r0, r3
 800c458:	f7f8 ff43 	bl	80052e2 <lwip_htons>
 800c45c:	4603      	mov	r3, r0
 800c45e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	885b      	ldrh	r3, [r3, #2]
 800c464:	b29b      	uxth	r3, r3
 800c466:	4618      	mov	r0, r3
 800c468:	f7f8 ff3b 	bl	80052e2 <lwip_htons>
 800c46c:	4603      	mov	r3, r0
 800c46e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c470:	2300      	movs	r3, #0
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c474:	2300      	movs	r3, #0
 800c476:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c478:	2300      	movs	r3, #0
 800c47a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c47c:	4b64      	ldr	r3, [pc, #400]	; (800c610 <udp_input+0x21c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	627b      	str	r3, [r7, #36]	; 0x24
 800c482:	e054      	b.n	800c52e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	8a5b      	ldrh	r3, [r3, #18]
 800c488:	89fa      	ldrh	r2, [r7, #14]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d14a      	bne.n	800c524 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c48e:	7cfb      	ldrb	r3, [r7, #19]
 800c490:	461a      	mov	r2, r3
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c496:	f7ff ff49 	bl	800c32c <udp_input_local_match>
 800c49a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d041      	beq.n	800c524 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	7c1b      	ldrb	r3, [r3, #16]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d11d      	bne.n	800c4e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d102      	bne.n	800c4b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	61fb      	str	r3, [r7, #28]
 800c4b6:	e017      	b.n	800c4e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c4b8:	7cfb      	ldrb	r3, [r7, #19]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d014      	beq.n	800c4e8 <udp_input+0xf4>
 800c4be:	4b53      	ldr	r3, [pc, #332]	; (800c60c <udp_input+0x218>)
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c6:	d10f      	bne.n	800c4e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d008      	beq.n	800c4e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d101      	bne.n	800c4e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	8a9b      	ldrh	r3, [r3, #20]
 800c4ec:	8a3a      	ldrh	r2, [r7, #16]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d118      	bne.n	800c524 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	4b43      	ldr	r3, [pc, #268]	; (800c60c <udp_input+0x218>)
 800c500:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c502:	429a      	cmp	r2, r3
 800c504:	d10e      	bne.n	800c524 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d014      	beq.n	800c536 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c514:	4b3e      	ldr	r3, [pc, #248]	; (800c610 <udp_input+0x21c>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c51c:	4a3c      	ldr	r2, [pc, #240]	; (800c610 <udp_input+0x21c>)
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c522:	e008      	b.n	800c536 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1a7      	bne.n	800c484 <udp_input+0x90>
 800c534:	e000      	b.n	800c538 <udp_input+0x144>
        break;
 800c536:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <udp_input+0x15a>
    for_us = 1;
 800c548:	2301      	movs	r3, #1
 800c54a:	76fb      	strb	r3, [r7, #27]
 800c54c:	e00a      	b.n	800c564 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	3304      	adds	r3, #4
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4b2d      	ldr	r3, [pc, #180]	; (800c60c <udp_input+0x218>)
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	429a      	cmp	r2, r3
 800c55a:	bf0c      	ite	eq
 800c55c:	2301      	moveq	r3, #1
 800c55e:	2300      	movne	r3, #0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c564:	7efb      	ldrb	r3, [r7, #27]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d041      	beq.n	800c5ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c56a:	2108      	movs	r1, #8
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7fa f8cd 	bl	800670c <pbuf_remove_header>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00a      	beq.n	800c58e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c578:	4b20      	ldr	r3, [pc, #128]	; (800c5fc <udp_input+0x208>)
 800c57a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c57e:	4925      	ldr	r1, [pc, #148]	; (800c614 <udp_input+0x220>)
 800c580:	4820      	ldr	r0, [pc, #128]	; (800c604 <udp_input+0x210>)
 800c582:	f002 fe25 	bl	800f1d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fa f946 	bl	8006818 <pbuf_free>
      goto end;
 800c58c:	e032      	b.n	800c5f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	2b00      	cmp	r3, #0
 800c592:	d012      	beq.n	800c5ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	699c      	ldr	r4, [r3, #24]
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	69d8      	ldr	r0, [r3, #28]
 800c5a4:	8a3b      	ldrh	r3, [r7, #16]
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	4b1b      	ldr	r3, [pc, #108]	; (800c618 <udp_input+0x224>)
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c5b0:	e021      	b.n	800c5f6 <udp_input+0x202>
        pbuf_free(p);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fa f930 	bl	8006818 <pbuf_free>
        goto end;
 800c5b8:	e01c      	b.n	800c5f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c5ba:	7cfb      	ldrb	r3, [r7, #19]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d112      	bne.n	800c5e6 <udp_input+0x1f2>
 800c5c0:	4b12      	ldr	r3, [pc, #72]	; (800c60c <udp_input+0x218>)
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5c8:	2be0      	cmp	r3, #224	; 0xe0
 800c5ca:	d00c      	beq.n	800c5e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c5cc:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <udp_input+0x218>)
 800c5ce:	899b      	ldrh	r3, [r3, #12]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	b21b      	sxth	r3, r3
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7fa f90a 	bl	80067f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c5de:	2103      	movs	r1, #3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f001 fb45 	bl	800dc70 <icmp_dest_unreach>
      pbuf_free(p);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7fa f916 	bl	8006818 <pbuf_free>
  return;
 800c5ec:	e003      	b.n	800c5f6 <udp_input+0x202>
    pbuf_free(p);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7fa f912 	bl	8006818 <pbuf_free>
  return;
 800c5f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c5f6:	372c      	adds	r7, #44	; 0x2c
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}
 800c5fc:	08011fe0 	.word	0x08011fe0
 800c600:	08012084 	.word	0x08012084
 800c604:	08012034 	.word	0x08012034
 800c608:	0801209c 	.word	0x0801209c
 800c60c:	200037e8 	.word	0x200037e8
 800c610:	20006d44 	.word	0x20006d44
 800c614:	080120b8 	.word	0x080120b8
 800c618:	200037f8 	.word	0x200037f8

0800c61c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d109      	bne.n	800c640 <udp_send+0x24>
 800c62c:	4b11      	ldr	r3, [pc, #68]	; (800c674 <udp_send+0x58>)
 800c62e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c632:	4911      	ldr	r1, [pc, #68]	; (800c678 <udp_send+0x5c>)
 800c634:	4811      	ldr	r0, [pc, #68]	; (800c67c <udp_send+0x60>)
 800c636:	f002 fdcb 	bl	800f1d0 <iprintf>
 800c63a:	f06f 030f 	mvn.w	r3, #15
 800c63e:	e015      	b.n	800c66c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d109      	bne.n	800c65a <udp_send+0x3e>
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <udp_send+0x58>)
 800c648:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c64c:	490c      	ldr	r1, [pc, #48]	; (800c680 <udp_send+0x64>)
 800c64e:	480b      	ldr	r0, [pc, #44]	; (800c67c <udp_send+0x60>)
 800c650:	f002 fdbe 	bl	800f1d0 <iprintf>
 800c654:	f06f 030f 	mvn.w	r3, #15
 800c658:	e008      	b.n	800c66c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	1d1a      	adds	r2, r3, #4
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8a9b      	ldrh	r3, [r3, #20]
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f80d 	bl	800c684 <udp_sendto>
 800c66a:	4603      	mov	r3, r0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	08011fe0 	.word	0x08011fe0
 800c678:	080120d4 	.word	0x080120d4
 800c67c:	08012034 	.word	0x08012034
 800c680:	080120ec 	.word	0x080120ec

0800c684 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af02      	add	r7, sp, #8
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <udp_sendto+0x28>
 800c698:	4b23      	ldr	r3, [pc, #140]	; (800c728 <udp_sendto+0xa4>)
 800c69a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c69e:	4923      	ldr	r1, [pc, #140]	; (800c72c <udp_sendto+0xa8>)
 800c6a0:	4823      	ldr	r0, [pc, #140]	; (800c730 <udp_sendto+0xac>)
 800c6a2:	f002 fd95 	bl	800f1d0 <iprintf>
 800c6a6:	f06f 030f 	mvn.w	r3, #15
 800c6aa:	e038      	b.n	800c71e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d109      	bne.n	800c6c6 <udp_sendto+0x42>
 800c6b2:	4b1d      	ldr	r3, [pc, #116]	; (800c728 <udp_sendto+0xa4>)
 800c6b4:	f240 2219 	movw	r2, #537	; 0x219
 800c6b8:	491e      	ldr	r1, [pc, #120]	; (800c734 <udp_sendto+0xb0>)
 800c6ba:	481d      	ldr	r0, [pc, #116]	; (800c730 <udp_sendto+0xac>)
 800c6bc:	f002 fd88 	bl	800f1d0 <iprintf>
 800c6c0:	f06f 030f 	mvn.w	r3, #15
 800c6c4:	e02b      	b.n	800c71e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <udp_sendto+0x5c>
 800c6cc:	4b16      	ldr	r3, [pc, #88]	; (800c728 <udp_sendto+0xa4>)
 800c6ce:	f240 221a 	movw	r2, #538	; 0x21a
 800c6d2:	4919      	ldr	r1, [pc, #100]	; (800c738 <udp_sendto+0xb4>)
 800c6d4:	4816      	ldr	r0, [pc, #88]	; (800c730 <udp_sendto+0xac>)
 800c6d6:	f002 fd7b 	bl	800f1d0 <iprintf>
 800c6da:	f06f 030f 	mvn.w	r3, #15
 800c6de:	e01e      	b.n	800c71e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7a1b      	ldrb	r3, [r3, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d006      	beq.n	800c6f6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	7a1b      	ldrb	r3, [r3, #8]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7f9 fd37 	bl	8006160 <netif_get_by_index>
 800c6f2:	6178      	str	r0, [r7, #20]
 800c6f4:	e003      	b.n	800c6fe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f001 fb44 	bl	800dd84 <ip4_route>
 800c6fc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d102      	bne.n	800c70a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c704:	f06f 0303 	mvn.w	r3, #3
 800c708:	e009      	b.n	800c71e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c70a:	887a      	ldrh	r2, [r7, #2]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	4613      	mov	r3, r2
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	68b9      	ldr	r1, [r7, #8]
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f000 f810 	bl	800c73c <udp_sendto_if>
 800c71c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	08011fe0 	.word	0x08011fe0
 800c72c:	08012104 	.word	0x08012104
 800c730:	08012034 	.word	0x08012034
 800c734:	0801211c 	.word	0x0801211c
 800c738:	08012138 	.word	0x08012138

0800c73c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af02      	add	r7, sp, #8
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d109      	bne.n	800c764 <udp_sendto_if+0x28>
 800c750:	4b2e      	ldr	r3, [pc, #184]	; (800c80c <udp_sendto_if+0xd0>)
 800c752:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c756:	492e      	ldr	r1, [pc, #184]	; (800c810 <udp_sendto_if+0xd4>)
 800c758:	482e      	ldr	r0, [pc, #184]	; (800c814 <udp_sendto_if+0xd8>)
 800c75a:	f002 fd39 	bl	800f1d0 <iprintf>
 800c75e:	f06f 030f 	mvn.w	r3, #15
 800c762:	e04f      	b.n	800c804 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d109      	bne.n	800c77e <udp_sendto_if+0x42>
 800c76a:	4b28      	ldr	r3, [pc, #160]	; (800c80c <udp_sendto_if+0xd0>)
 800c76c:	f240 2281 	movw	r2, #641	; 0x281
 800c770:	4929      	ldr	r1, [pc, #164]	; (800c818 <udp_sendto_if+0xdc>)
 800c772:	4828      	ldr	r0, [pc, #160]	; (800c814 <udp_sendto_if+0xd8>)
 800c774:	f002 fd2c 	bl	800f1d0 <iprintf>
 800c778:	f06f 030f 	mvn.w	r3, #15
 800c77c:	e042      	b.n	800c804 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d109      	bne.n	800c798 <udp_sendto_if+0x5c>
 800c784:	4b21      	ldr	r3, [pc, #132]	; (800c80c <udp_sendto_if+0xd0>)
 800c786:	f240 2282 	movw	r2, #642	; 0x282
 800c78a:	4924      	ldr	r1, [pc, #144]	; (800c81c <udp_sendto_if+0xe0>)
 800c78c:	4821      	ldr	r0, [pc, #132]	; (800c814 <udp_sendto_if+0xd8>)
 800c78e:	f002 fd1f 	bl	800f1d0 <iprintf>
 800c792:	f06f 030f 	mvn.w	r3, #15
 800c796:	e035      	b.n	800c804 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d109      	bne.n	800c7b2 <udp_sendto_if+0x76>
 800c79e:	4b1b      	ldr	r3, [pc, #108]	; (800c80c <udp_sendto_if+0xd0>)
 800c7a0:	f240 2283 	movw	r2, #643	; 0x283
 800c7a4:	491e      	ldr	r1, [pc, #120]	; (800c820 <udp_sendto_if+0xe4>)
 800c7a6:	481b      	ldr	r0, [pc, #108]	; (800c814 <udp_sendto_if+0xd8>)
 800c7a8:	f002 fd12 	bl	800f1d0 <iprintf>
 800c7ac:	f06f 030f 	mvn.w	r3, #15
 800c7b0:	e028      	b.n	800c804 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <udp_sendto_if+0x90>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d005      	beq.n	800c7cc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c7c8:	2be0      	cmp	r3, #224	; 0xe0
 800c7ca:	d103      	bne.n	800c7d4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	617b      	str	r3, [r7, #20]
 800c7d2:	e00b      	b.n	800c7ec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d002      	beq.n	800c7e8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c7e2:	f06f 0303 	mvn.w	r3, #3
 800c7e6:	e00d      	b.n	800c804 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c7ec:	887a      	ldrh	r2, [r7, #2]
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	68b9      	ldr	r1, [r7, #8]
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f811 	bl	800c824 <udp_sendto_if_src>
 800c802:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c804:	4618      	mov	r0, r3
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	08011fe0 	.word	0x08011fe0
 800c810:	08012154 	.word	0x08012154
 800c814:	08012034 	.word	0x08012034
 800c818:	08012170 	.word	0x08012170
 800c81c:	0801218c 	.word	0x0801218c
 800c820:	080121ac 	.word	0x080121ac

0800c824 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08c      	sub	sp, #48	; 0x30
 800c828:	af04      	add	r7, sp, #16
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d109      	bne.n	800c84c <udp_sendto_if_src+0x28>
 800c838:	4b65      	ldr	r3, [pc, #404]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c83a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c83e:	4965      	ldr	r1, [pc, #404]	; (800c9d4 <udp_sendto_if_src+0x1b0>)
 800c840:	4865      	ldr	r0, [pc, #404]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c842:	f002 fcc5 	bl	800f1d0 <iprintf>
 800c846:	f06f 030f 	mvn.w	r3, #15
 800c84a:	e0bc      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d109      	bne.n	800c866 <udp_sendto_if_src+0x42>
 800c852:	4b5f      	ldr	r3, [pc, #380]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c854:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c858:	4960      	ldr	r1, [pc, #384]	; (800c9dc <udp_sendto_if_src+0x1b8>)
 800c85a:	485f      	ldr	r0, [pc, #380]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c85c:	f002 fcb8 	bl	800f1d0 <iprintf>
 800c860:	f06f 030f 	mvn.w	r3, #15
 800c864:	e0af      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d109      	bne.n	800c880 <udp_sendto_if_src+0x5c>
 800c86c:	4b58      	ldr	r3, [pc, #352]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c86e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c872:	495b      	ldr	r1, [pc, #364]	; (800c9e0 <udp_sendto_if_src+0x1bc>)
 800c874:	4858      	ldr	r0, [pc, #352]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c876:	f002 fcab 	bl	800f1d0 <iprintf>
 800c87a:	f06f 030f 	mvn.w	r3, #15
 800c87e:	e0a2      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d109      	bne.n	800c89a <udp_sendto_if_src+0x76>
 800c886:	4b52      	ldr	r3, [pc, #328]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c888:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c88c:	4955      	ldr	r1, [pc, #340]	; (800c9e4 <udp_sendto_if_src+0x1c0>)
 800c88e:	4852      	ldr	r0, [pc, #328]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c890:	f002 fc9e 	bl	800f1d0 <iprintf>
 800c894:	f06f 030f 	mvn.w	r3, #15
 800c898:	e095      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d109      	bne.n	800c8b4 <udp_sendto_if_src+0x90>
 800c8a0:	4b4b      	ldr	r3, [pc, #300]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c8a2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c8a6:	4950      	ldr	r1, [pc, #320]	; (800c9e8 <udp_sendto_if_src+0x1c4>)
 800c8a8:	484b      	ldr	r0, [pc, #300]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c8aa:	f002 fc91 	bl	800f1d0 <iprintf>
 800c8ae:	f06f 030f 	mvn.w	r3, #15
 800c8b2:	e088      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8a5b      	ldrh	r3, [r3, #18]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10f      	bne.n	800c8dc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	8a5b      	ldrh	r3, [r3, #18]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 f893 	bl	800c9f0 <udp_bind>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c8ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c8d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c8da:	e074      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	891b      	ldrh	r3, [r3, #8]
 800c8e0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d902      	bls.n	800c8ee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ec:	e06b      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c8ee:	2108      	movs	r1, #8
 800c8f0:	68b8      	ldr	r0, [r7, #8]
 800c8f2:	f7f9 fefb 	bl	80066ec <pbuf_add_header>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d015      	beq.n	800c928 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c8fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c900:	2108      	movs	r1, #8
 800c902:	2022      	movs	r0, #34	; 0x22
 800c904:	f7f9 fca8 	bl	8006258 <pbuf_alloc>
 800c908:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295
 800c914:	e057      	b.n	800c9c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	891b      	ldrh	r3, [r3, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d006      	beq.n	800c92c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c91e:	68b9      	ldr	r1, [r7, #8]
 800c920:	69f8      	ldr	r0, [r7, #28]
 800c922:	f7fa f891 	bl	8006a48 <pbuf_chain>
 800c926:	e001      	b.n	800c92c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	895b      	ldrh	r3, [r3, #10]
 800c930:	2b07      	cmp	r3, #7
 800c932:	d806      	bhi.n	800c942 <udp_sendto_if_src+0x11e>
 800c934:	4b26      	ldr	r3, [pc, #152]	; (800c9d0 <udp_sendto_if_src+0x1ac>)
 800c936:	f240 320e 	movw	r2, #782	; 0x30e
 800c93a:	492c      	ldr	r1, [pc, #176]	; (800c9ec <udp_sendto_if_src+0x1c8>)
 800c93c:	4826      	ldr	r0, [pc, #152]	; (800c9d8 <udp_sendto_if_src+0x1b4>)
 800c93e:	f002 fc47 	bl	800f1d0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8a5b      	ldrh	r3, [r3, #18]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f8 fcc8 	bl	80052e2 <lwip_htons>
 800c952:	4603      	mov	r3, r0
 800c954:	461a      	mov	r2, r3
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c95a:	887b      	ldrh	r3, [r7, #2]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7f8 fcc0 	bl	80052e2 <lwip_htons>
 800c962:	4603      	mov	r3, r0
 800c964:	461a      	mov	r2, r3
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2200      	movs	r2, #0
 800c96e:	719a      	strb	r2, [r3, #6]
 800c970:	2200      	movs	r2, #0
 800c972:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	891b      	ldrh	r3, [r3, #8]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f8 fcb2 	bl	80052e2 <lwip_htons>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c986:	2311      	movs	r3, #17
 800c988:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	7adb      	ldrb	r3, [r3, #11]
 800c98e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	7a9b      	ldrb	r3, [r3, #10]
 800c994:	7cb9      	ldrb	r1, [r7, #18]
 800c996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c998:	9202      	str	r2, [sp, #8]
 800c99a:	7cfa      	ldrb	r2, [r7, #19]
 800c99c:	9201      	str	r2, [sp, #4]
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9a6:	69f8      	ldr	r0, [r7, #28]
 800c9a8:	f001 fbd2 	bl	800e150 <ip4_output_if_src>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c9b0:	69fa      	ldr	r2, [r7, #28]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d004      	beq.n	800c9c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c9b8:	69f8      	ldr	r0, [r7, #28]
 800c9ba:	f7f9 ff2d 	bl	8006818 <pbuf_free>
    q = NULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c9c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3720      	adds	r7, #32
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08011fe0 	.word	0x08011fe0
 800c9d4:	080121cc 	.word	0x080121cc
 800c9d8:	08012034 	.word	0x08012034
 800c9dc:	080121ec 	.word	0x080121ec
 800c9e0:	0801220c 	.word	0x0801220c
 800c9e4:	08012230 	.word	0x08012230
 800c9e8:	08012254 	.word	0x08012254
 800c9ec:	08012278 	.word	0x08012278

0800c9f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ca04:	4b39      	ldr	r3, [pc, #228]	; (800caec <udp_bind+0xfc>)
 800ca06:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d109      	bne.n	800ca22 <udp_bind+0x32>
 800ca0e:	4b38      	ldr	r3, [pc, #224]	; (800caf0 <udp_bind+0x100>)
 800ca10:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ca14:	4937      	ldr	r1, [pc, #220]	; (800caf4 <udp_bind+0x104>)
 800ca16:	4838      	ldr	r0, [pc, #224]	; (800caf8 <udp_bind+0x108>)
 800ca18:	f002 fbda 	bl	800f1d0 <iprintf>
 800ca1c:	f06f 030f 	mvn.w	r3, #15
 800ca20:	e060      	b.n	800cae4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca26:	4b35      	ldr	r3, [pc, #212]	; (800cafc <udp_bind+0x10c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e009      	b.n	800ca42 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d102      	bne.n	800ca3c <udp_bind+0x4c>
      rebind = 1;
 800ca36:	2301      	movs	r3, #1
 800ca38:	74fb      	strb	r3, [r7, #19]
      break;
 800ca3a:	e005      	b.n	800ca48 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1f2      	bne.n	800ca2e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d109      	bne.n	800ca62 <udp_bind+0x72>
    port = udp_new_port();
 800ca4e:	f7ff fc35 	bl	800c2bc <udp_new_port>
 800ca52:	4603      	mov	r3, r0
 800ca54:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ca56:	88fb      	ldrh	r3, [r7, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d12c      	bne.n	800cab6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ca5c:	f06f 0307 	mvn.w	r3, #7
 800ca60:	e040      	b.n	800cae4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca62:	4b26      	ldr	r3, [pc, #152]	; (800cafc <udp_bind+0x10c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	e022      	b.n	800cab0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d01b      	beq.n	800caaa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	8a5b      	ldrh	r3, [r3, #18]
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d116      	bne.n	800caaa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d00d      	beq.n	800caa4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <udp_bind+0xb4>
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d006      	beq.n	800caa4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ca96:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800caa4:	f06f 0307 	mvn.w	r3, #7
 800caa8:	e01c      	b.n	800cae4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1d9      	bne.n	800ca6a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <udp_bind+0xd2>
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	e000      	b.n	800cac4 <udp_bind+0xd4>
 800cac2:	2300      	movs	r3, #0
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	88fa      	ldrh	r2, [r7, #6]
 800cacc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cace:	7cfb      	ldrb	r3, [r7, #19]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d106      	bne.n	800cae2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cad4:	4b09      	ldr	r3, [pc, #36]	; (800cafc <udp_bind+0x10c>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cadc:	4a07      	ldr	r2, [pc, #28]	; (800cafc <udp_bind+0x10c>)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	08012af0 	.word	0x08012af0
 800caf0:	08011fe0 	.word	0x08011fe0
 800caf4:	080122a8 	.word	0x080122a8
 800caf8:	08012034 	.word	0x08012034
 800cafc:	20006d44 	.word	0x20006d44

0800cb00 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d107      	bne.n	800cb22 <udp_recv+0x22>
 800cb12:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <udp_recv+0x34>)
 800cb14:	f240 428a 	movw	r2, #1162	; 0x48a
 800cb18:	4907      	ldr	r1, [pc, #28]	; (800cb38 <udp_recv+0x38>)
 800cb1a:	4808      	ldr	r0, [pc, #32]	; (800cb3c <udp_recv+0x3c>)
 800cb1c:	f002 fb58 	bl	800f1d0 <iprintf>
 800cb20:	e005      	b.n	800cb2e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	61da      	str	r2, [r3, #28]
}
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	08011fe0 	.word	0x08011fe0
 800cb38:	08012314 	.word	0x08012314
 800cb3c:	08012034 	.word	0x08012034

0800cb40 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cb46:	2000      	movs	r0, #0
 800cb48:	f7f9 f820 	bl	8005b8c <memp_malloc>
 800cb4c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d007      	beq.n	800cb64 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cb54:	2220      	movs	r2, #32
 800cb56:	2100      	movs	r1, #0
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f002 fb31 	bl	800f1c0 <memset>
    pcb->ttl = UDP_TTL;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	22ff      	movs	r2, #255	; 0xff
 800cb62:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cb64:	687b      	ldr	r3, [r7, #4]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01e      	beq.n	800cbbe <udp_netif_ip_addr_changed+0x4e>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01a      	beq.n	800cbbe <udp_netif_ip_addr_changed+0x4e>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d017      	beq.n	800cbbe <udp_netif_ip_addr_changed+0x4e>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d013      	beq.n	800cbbe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb96:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <udp_netif_ip_addr_changed+0x5c>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	e00c      	b.n	800cbb8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d103      	bne.n	800cbb2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1ef      	bne.n	800cb9e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cbbe:	bf00      	nop
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	20006d44 	.word	0x20006d44

0800cbd0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cbd8:	4915      	ldr	r1, [pc, #84]	; (800cc30 <etharp_free_entry+0x60>)
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	4413      	add	r3, r2
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	440b      	add	r3, r1
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d013      	beq.n	800cc14 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cbec:	4910      	ldr	r1, [pc, #64]	; (800cc30 <etharp_free_entry+0x60>)
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	4413      	add	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	440b      	add	r3, r1
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f9 fe0b 	bl	8006818 <pbuf_free>
    arp_table[i].q = NULL;
 800cc02:	490b      	ldr	r1, [pc, #44]	; (800cc30 <etharp_free_entry+0x60>)
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	4413      	add	r3, r2
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	440b      	add	r3, r1
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cc14:	4906      	ldr	r1, [pc, #24]	; (800cc30 <etharp_free_entry+0x60>)
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	440b      	add	r3, r1
 800cc22:	3314      	adds	r3, #20
 800cc24:	2200      	movs	r2, #0
 800cc26:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20000120 	.word	0x20000120

0800cc34 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	607b      	str	r3, [r7, #4]
 800cc3e:	e096      	b.n	800cd6e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cc40:	494f      	ldr	r1, [pc, #316]	; (800cd80 <etharp_tmr+0x14c>)
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	4613      	mov	r3, r2
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	4413      	add	r3, r2
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	440b      	add	r3, r1
 800cc4e:	3314      	adds	r3, #20
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f000 8086 	beq.w	800cd68 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cc5c:	4948      	ldr	r1, [pc, #288]	; (800cd80 <etharp_tmr+0x14c>)
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	4613      	mov	r3, r2
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	440b      	add	r3, r1
 800cc6a:	3312      	adds	r3, #18
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	b298      	uxth	r0, r3
 800cc72:	4943      	ldr	r1, [pc, #268]	; (800cd80 <etharp_tmr+0x14c>)
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	3312      	adds	r3, #18
 800cc82:	4602      	mov	r2, r0
 800cc84:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc86:	493e      	ldr	r1, [pc, #248]	; (800cd80 <etharp_tmr+0x14c>)
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	4413      	add	r3, r2
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	440b      	add	r3, r1
 800cc94:	3312      	adds	r3, #18
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc9c:	d215      	bcs.n	800ccca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc9e:	4938      	ldr	r1, [pc, #224]	; (800cd80 <etharp_tmr+0x14c>)
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	4613      	mov	r3, r2
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	4413      	add	r3, r2
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	440b      	add	r3, r1
 800ccac:	3314      	adds	r3, #20
 800ccae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d10e      	bne.n	800ccd2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ccb4:	4932      	ldr	r1, [pc, #200]	; (800cd80 <etharp_tmr+0x14c>)
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	005b      	lsls	r3, r3, #1
 800ccbc:	4413      	add	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	440b      	add	r3, r1
 800ccc2:	3312      	adds	r3, #18
 800ccc4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d903      	bls.n	800ccd2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff ff80 	bl	800cbd0 <etharp_free_entry>
 800ccd0:	e04a      	b.n	800cd68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ccd2:	492b      	ldr	r1, [pc, #172]	; (800cd80 <etharp_tmr+0x14c>)
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	4413      	add	r3, r2
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	440b      	add	r3, r1
 800cce0:	3314      	adds	r3, #20
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	2b03      	cmp	r3, #3
 800cce6:	d10a      	bne.n	800ccfe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cce8:	4925      	ldr	r1, [pc, #148]	; (800cd80 <etharp_tmr+0x14c>)
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	4613      	mov	r3, r2
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	4413      	add	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	2204      	movs	r2, #4
 800ccfa:	701a      	strb	r2, [r3, #0]
 800ccfc:	e034      	b.n	800cd68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ccfe:	4920      	ldr	r1, [pc, #128]	; (800cd80 <etharp_tmr+0x14c>)
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	4613      	mov	r3, r2
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4413      	add	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b04      	cmp	r3, #4
 800cd12:	d10a      	bne.n	800cd2a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cd14:	491a      	ldr	r1, [pc, #104]	; (800cd80 <etharp_tmr+0x14c>)
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3314      	adds	r3, #20
 800cd24:	2202      	movs	r2, #2
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	e01e      	b.n	800cd68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cd2a:	4915      	ldr	r1, [pc, #84]	; (800cd80 <etharp_tmr+0x14c>)
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	3314      	adds	r3, #20
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d113      	bne.n	800cd68 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cd40:	490f      	ldr	r1, [pc, #60]	; (800cd80 <etharp_tmr+0x14c>)
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	4613      	mov	r3, r2
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	4413      	add	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	440b      	add	r3, r1
 800cd4e:	3308      	adds	r3, #8
 800cd50:	6818      	ldr	r0, [r3, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4613      	mov	r3, r2
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	4a08      	ldr	r2, [pc, #32]	; (800cd80 <etharp_tmr+0x14c>)
 800cd5e:	4413      	add	r3, r2
 800cd60:	3304      	adds	r3, #4
 800cd62:	4619      	mov	r1, r3
 800cd64:	f000 fe6e 	bl	800da44 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	607b      	str	r3, [r7, #4]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b09      	cmp	r3, #9
 800cd72:	f77f af65 	ble.w	800cc40 <etharp_tmr+0xc>
      }
    }
  }
}
 800cd76:	bf00      	nop
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20000120 	.word	0x20000120

0800cd84 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08a      	sub	sp, #40	; 0x28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd92:	230a      	movs	r3, #10
 800cd94:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd96:	230a      	movs	r3, #10
 800cd98:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd9a:	230a      	movs	r3, #10
 800cd9c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cda2:	230a      	movs	r3, #10
 800cda4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	83bb      	strh	r3, [r7, #28]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	837b      	strh	r3, [r7, #26]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	843b      	strh	r3, [r7, #32]
 800cdb6:	e0ae      	b.n	800cf16 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cdb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdbc:	49a6      	ldr	r1, [pc, #664]	; (800d058 <etharp_find_entry+0x2d4>)
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3314      	adds	r3, #20
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cdce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cdd2:	2b0a      	cmp	r3, #10
 800cdd4:	d105      	bne.n	800cde2 <etharp_find_entry+0x5e>
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cddc:	8c3b      	ldrh	r3, [r7, #32]
 800cdde:	847b      	strh	r3, [r7, #34]	; 0x22
 800cde0:	e095      	b.n	800cf0e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8092 	beq.w	800cf0e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d009      	beq.n	800ce04 <etharp_find_entry+0x80>
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d806      	bhi.n	800ce04 <etharp_find_entry+0x80>
 800cdf6:	4b99      	ldr	r3, [pc, #612]	; (800d05c <etharp_find_entry+0x2d8>)
 800cdf8:	f44f 7292 	mov.w	r2, #292	; 0x124
 800cdfc:	4998      	ldr	r1, [pc, #608]	; (800d060 <etharp_find_entry+0x2dc>)
 800cdfe:	4899      	ldr	r0, [pc, #612]	; (800d064 <etharp_find_entry+0x2e0>)
 800ce00:	f002 f9e6 	bl	800f1d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d020      	beq.n	800ce4c <etharp_find_entry+0xc8>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6819      	ldr	r1, [r3, #0]
 800ce0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce12:	4891      	ldr	r0, [pc, #580]	; (800d058 <etharp_find_entry+0x2d4>)
 800ce14:	4613      	mov	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	4403      	add	r3, r0
 800ce1e:	3304      	adds	r3, #4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4299      	cmp	r1, r3
 800ce24:	d112      	bne.n	800ce4c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00c      	beq.n	800ce46 <etharp_find_entry+0xc2>
 800ce2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce30:	4989      	ldr	r1, [pc, #548]	; (800d058 <etharp_find_entry+0x2d4>)
 800ce32:	4613      	mov	r3, r2
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4413      	add	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d102      	bne.n	800ce4c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ce46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce4a:	e100      	b.n	800d04e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d140      	bne.n	800ced4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ce52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce56:	4980      	ldr	r1, [pc, #512]	; (800d058 <etharp_find_entry+0x2d4>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01a      	beq.n	800ce9e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ce68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce6c:	497a      	ldr	r1, [pc, #488]	; (800d058 <etharp_find_entry+0x2d4>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3312      	adds	r3, #18
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	8bba      	ldrh	r2, [r7, #28]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d845      	bhi.n	800cf0e <etharp_find_entry+0x18a>
            old_queue = i;
 800ce82:	8c3b      	ldrh	r3, [r7, #32]
 800ce84:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce8a:	4973      	ldr	r1, [pc, #460]	; (800d058 <etharp_find_entry+0x2d4>)
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	4413      	add	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	440b      	add	r3, r1
 800ce96:	3312      	adds	r3, #18
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	83bb      	strh	r3, [r7, #28]
 800ce9c:	e037      	b.n	800cf0e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cea2:	496d      	ldr	r1, [pc, #436]	; (800d058 <etharp_find_entry+0x2d4>)
 800cea4:	4613      	mov	r3, r2
 800cea6:	005b      	lsls	r3, r3, #1
 800cea8:	4413      	add	r3, r2
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	440b      	add	r3, r1
 800ceae:	3312      	adds	r3, #18
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	8b7a      	ldrh	r2, [r7, #26]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d82a      	bhi.n	800cf0e <etharp_find_entry+0x18a>
            old_pending = i;
 800ceb8:	8c3b      	ldrh	r3, [r7, #32]
 800ceba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cec0:	4965      	ldr	r1, [pc, #404]	; (800d058 <etharp_find_entry+0x2d4>)
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	440b      	add	r3, r1
 800cecc:	3312      	adds	r3, #18
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	837b      	strh	r3, [r7, #26]
 800ced2:	e01c      	b.n	800cf0e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d919      	bls.n	800cf0e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ceda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cede:	495e      	ldr	r1, [pc, #376]	; (800d058 <etharp_find_entry+0x2d4>)
 800cee0:	4613      	mov	r3, r2
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	4413      	add	r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	440b      	add	r3, r1
 800ceea:	3312      	adds	r3, #18
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	8b3a      	ldrh	r2, [r7, #24]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d80c      	bhi.n	800cf0e <etharp_find_entry+0x18a>
            old_stable = i;
 800cef4:	8c3b      	ldrh	r3, [r7, #32]
 800cef6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cefc:	4956      	ldr	r1, [pc, #344]	; (800d058 <etharp_find_entry+0x2d4>)
 800cefe:	4613      	mov	r3, r2
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	440b      	add	r3, r1
 800cf08:	3312      	adds	r3, #18
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf0e:	8c3b      	ldrh	r3, [r7, #32]
 800cf10:	3301      	adds	r3, #1
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	843b      	strh	r3, [r7, #32]
 800cf16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf1a:	2b09      	cmp	r3, #9
 800cf1c:	f77f af4c 	ble.w	800cdb8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cf20:	7afb      	ldrb	r3, [r7, #11]
 800cf22:	f003 0302 	and.w	r3, r3, #2
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d108      	bne.n	800cf3c <etharp_find_entry+0x1b8>
 800cf2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf2e:	2b0a      	cmp	r3, #10
 800cf30:	d107      	bne.n	800cf42 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cf32:	7afb      	ldrb	r3, [r7, #11]
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf40:	e085      	b.n	800d04e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cf42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	dc02      	bgt.n	800cf50 <etharp_find_entry+0x1cc>
    i = empty;
 800cf4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf4c:	843b      	strh	r3, [r7, #32]
 800cf4e:	e039      	b.n	800cfc4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cf50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	dc14      	bgt.n	800cf82 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cf58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cf5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf60:	493d      	ldr	r1, [pc, #244]	; (800d058 <etharp_find_entry+0x2d4>)
 800cf62:	4613      	mov	r3, r2
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	4413      	add	r3, r2
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	440b      	add	r3, r1
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d018      	beq.n	800cfa4 <etharp_find_entry+0x220>
 800cf72:	4b3a      	ldr	r3, [pc, #232]	; (800d05c <etharp_find_entry+0x2d8>)
 800cf74:	f240 126d 	movw	r2, #365	; 0x16d
 800cf78:	493b      	ldr	r1, [pc, #236]	; (800d068 <etharp_find_entry+0x2e4>)
 800cf7a:	483a      	ldr	r0, [pc, #232]	; (800d064 <etharp_find_entry+0x2e0>)
 800cf7c:	f002 f928 	bl	800f1d0 <iprintf>
 800cf80:	e010      	b.n	800cfa4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf86:	2b09      	cmp	r3, #9
 800cf88:	dc02      	bgt.n	800cf90 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf8c:	843b      	strh	r3, [r7, #32]
 800cf8e:	e009      	b.n	800cfa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	dc02      	bgt.n	800cf9e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf98:	8bfb      	ldrh	r3, [r7, #30]
 800cf9a:	843b      	strh	r3, [r7, #32]
 800cf9c:	e002      	b.n	800cfa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa2:	e054      	b.n	800d04e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cfa4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfa8:	2b09      	cmp	r3, #9
 800cfaa:	dd06      	ble.n	800cfba <etharp_find_entry+0x236>
 800cfac:	4b2b      	ldr	r3, [pc, #172]	; (800d05c <etharp_find_entry+0x2d8>)
 800cfae:	f240 127f 	movw	r2, #383	; 0x17f
 800cfb2:	492e      	ldr	r1, [pc, #184]	; (800d06c <etharp_find_entry+0x2e8>)
 800cfb4:	482b      	ldr	r0, [pc, #172]	; (800d064 <etharp_find_entry+0x2e0>)
 800cfb6:	f002 f90b 	bl	800f1d0 <iprintf>
    etharp_free_entry(i);
 800cfba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fe06 	bl	800cbd0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cfc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	dd06      	ble.n	800cfda <etharp_find_entry+0x256>
 800cfcc:	4b23      	ldr	r3, [pc, #140]	; (800d05c <etharp_find_entry+0x2d8>)
 800cfce:	f240 1283 	movw	r2, #387	; 0x183
 800cfd2:	4926      	ldr	r1, [pc, #152]	; (800d06c <etharp_find_entry+0x2e8>)
 800cfd4:	4823      	ldr	r0, [pc, #140]	; (800d064 <etharp_find_entry+0x2e0>)
 800cfd6:	f002 f8fb 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfde:	491e      	ldr	r1, [pc, #120]	; (800d058 <etharp_find_entry+0x2d4>)
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	440b      	add	r3, r1
 800cfea:	3314      	adds	r3, #20
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d006      	beq.n	800d000 <etharp_find_entry+0x27c>
 800cff2:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <etharp_find_entry+0x2d8>)
 800cff4:	f240 1285 	movw	r2, #389	; 0x185
 800cff8:	491d      	ldr	r1, [pc, #116]	; (800d070 <etharp_find_entry+0x2ec>)
 800cffa:	481a      	ldr	r0, [pc, #104]	; (800d064 <etharp_find_entry+0x2e0>)
 800cffc:	f002 f8e8 	bl	800f1d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00b      	beq.n	800d01e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6819      	ldr	r1, [r3, #0]
 800d00e:	4812      	ldr	r0, [pc, #72]	; (800d058 <etharp_find_entry+0x2d4>)
 800d010:	4613      	mov	r3, r2
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	4413      	add	r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	4403      	add	r3, r0
 800d01a:	3304      	adds	r3, #4
 800d01c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d01e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d022:	490d      	ldr	r1, [pc, #52]	; (800d058 <etharp_find_entry+0x2d4>)
 800d024:	4613      	mov	r3, r2
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	4413      	add	r3, r2
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	440b      	add	r3, r1
 800d02e:	3312      	adds	r3, #18
 800d030:	2200      	movs	r2, #0
 800d032:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d038:	4907      	ldr	r1, [pc, #28]	; (800d058 <etharp_find_entry+0x2d4>)
 800d03a:	4613      	mov	r3, r2
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4413      	add	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	440b      	add	r3, r1
 800d044:	3308      	adds	r3, #8
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d04a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3728      	adds	r7, #40	; 0x28
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20000120 	.word	0x20000120
 800d05c:	08012344 	.word	0x08012344
 800d060:	0801237c 	.word	0x0801237c
 800d064:	080123bc 	.word	0x080123bc
 800d068:	080123e4 	.word	0x080123e4
 800d06c:	080123fc 	.word	0x080123fc
 800d070:	08012410 	.word	0x08012410

0800d074 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
 800d080:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d088:	2b06      	cmp	r3, #6
 800d08a:	d006      	beq.n	800d09a <etharp_update_arp_entry+0x26>
 800d08c:	4b48      	ldr	r3, [pc, #288]	; (800d1b0 <etharp_update_arp_entry+0x13c>)
 800d08e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d092:	4948      	ldr	r1, [pc, #288]	; (800d1b4 <etharp_update_arp_entry+0x140>)
 800d094:	4848      	ldr	r0, [pc, #288]	; (800d1b8 <etharp_update_arp_entry+0x144>)
 800d096:	f002 f89b 	bl	800f1d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d012      	beq.n	800d0c6 <etharp_update_arp_entry+0x52>
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00e      	beq.n	800d0c6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68f9      	ldr	r1, [r7, #12]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f001 f8fc 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800d0b4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0c2:	2be0      	cmp	r3, #224	; 0xe0
 800d0c4:	d102      	bne.n	800d0cc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d0c6:	f06f 030f 	mvn.w	r3, #15
 800d0ca:	e06c      	b.n	800d1a6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d0cc:	78fb      	ldrb	r3, [r7, #3]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	68b8      	ldr	r0, [r7, #8]
 800d0d4:	f7ff fe56 	bl	800cd84 <etharp_find_entry>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d0dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da02      	bge.n	800d0ea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d0e4:	8afb      	ldrh	r3, [r7, #22]
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	e05d      	b.n	800d1a6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d0ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0ee:	4933      	ldr	r1, [pc, #204]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	440b      	add	r3, r1
 800d0fa:	3314      	adds	r3, #20
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d100:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d104:	492d      	ldr	r1, [pc, #180]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d106:	4613      	mov	r3, r2
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	4413      	add	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	440b      	add	r3, r1
 800d110:	3308      	adds	r3, #8
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d116:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d11a:	4613      	mov	r3, r2
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	4413      	add	r3, r2
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	3308      	adds	r3, #8
 800d124:	4a25      	ldr	r2, [pc, #148]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d126:	4413      	add	r3, r2
 800d128:	3304      	adds	r3, #4
 800d12a:	2206      	movs	r2, #6
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	f002 f83b 	bl	800f1aa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d134:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d138:	4920      	ldr	r1, [pc, #128]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	440b      	add	r3, r1
 800d144:	3312      	adds	r3, #18
 800d146:	2200      	movs	r2, #0
 800d148:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d14a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d14e:	491b      	ldr	r1, [pc, #108]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d150:	4613      	mov	r3, r2
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	4413      	add	r3, r2
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	440b      	add	r3, r1
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d021      	beq.n	800d1a4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d160:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d164:	4915      	ldr	r1, [pc, #84]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d166:	4613      	mov	r3, r2
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	4413      	add	r3, r2
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	440b      	add	r3, r1
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d178:	4910      	ldr	r1, [pc, #64]	; (800d1bc <etharp_update_arp_entry+0x148>)
 800d17a:	4613      	mov	r3, r2
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	4413      	add	r3, r2
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	440b      	add	r3, r1
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800d18e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6939      	ldr	r1, [r7, #16]
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f001 ff8b 	bl	800f0b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d19e:	6938      	ldr	r0, [r7, #16]
 800d1a0:	f7f9 fb3a 	bl	8006818 <pbuf_free>
  }
  return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	08012344 	.word	0x08012344
 800d1b4:	0801243c 	.word	0x0801243c
 800d1b8:	080123bc 	.word	0x080123bc
 800d1bc:	20000120 	.word	0x20000120

0800d1c0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	e01e      	b.n	800d20c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d1ce:	4913      	ldr	r1, [pc, #76]	; (800d21c <etharp_cleanup_netif+0x5c>)
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	4413      	add	r3, r2
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	440b      	add	r3, r1
 800d1dc:	3314      	adds	r3, #20
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d1e2:	7afb      	ldrb	r3, [r7, #11]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00e      	beq.n	800d206 <etharp_cleanup_netif+0x46>
 800d1e8:	490c      	ldr	r1, [pc, #48]	; (800d21c <etharp_cleanup_netif+0x5c>)
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	440b      	add	r3, r1
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d102      	bne.n	800d206 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f7ff fce5 	bl	800cbd0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3301      	adds	r3, #1
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2b09      	cmp	r3, #9
 800d210:	dddd      	ble.n	800d1ce <etharp_cleanup_netif+0xe>
    }
  }
}
 800d212:	bf00      	nop
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20000120 	.word	0x20000120

0800d220 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d220:	b5b0      	push	{r4, r5, r7, lr}
 800d222:	b08a      	sub	sp, #40	; 0x28
 800d224:	af04      	add	r7, sp, #16
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d107      	bne.n	800d240 <etharp_input+0x20>
 800d230:	4b3d      	ldr	r3, [pc, #244]	; (800d328 <etharp_input+0x108>)
 800d232:	f240 228a 	movw	r2, #650	; 0x28a
 800d236:	493d      	ldr	r1, [pc, #244]	; (800d32c <etharp_input+0x10c>)
 800d238:	483d      	ldr	r0, [pc, #244]	; (800d330 <etharp_input+0x110>)
 800d23a:	f001 ffc9 	bl	800f1d0 <iprintf>
 800d23e:	e06f      	b.n	800d320 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d250:	d10c      	bne.n	800d26c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d256:	2b06      	cmp	r3, #6
 800d258:	d108      	bne.n	800d26c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d25e:	2b04      	cmp	r3, #4
 800d260:	d104      	bne.n	800d26c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d268:	2b08      	cmp	r3, #8
 800d26a:	d003      	beq.n	800d274 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7f9 fad3 	bl	8006818 <pbuf_free>
    return;
 800d272:	e055      	b.n	800d320 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	330e      	adds	r3, #14
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	3318      	adds	r3, #24
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	3304      	adds	r3, #4
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <etharp_input+0x74>
    for_us = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	75fb      	strb	r3, [r7, #23]
 800d292:	e009      	b.n	800d2a8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	3304      	adds	r3, #4
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	bf0c      	ite	eq
 800d2a0:	2301      	moveq	r3, #1
 800d2a2:	2300      	movne	r3, #0
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	f103 0208 	add.w	r2, r3, #8
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <etharp_input+0x98>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e000      	b.n	800d2ba <etharp_input+0x9a>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	f107 010c 	add.w	r1, r7, #12
 800d2be:	6838      	ldr	r0, [r7, #0]
 800d2c0:	f7ff fed8 	bl	800d074 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	88db      	ldrh	r3, [r3, #6]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2ce:	d003      	beq.n	800d2d8 <etharp_input+0xb8>
 800d2d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2d4:	d01e      	beq.n	800d314 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d2d6:	e020      	b.n	800d31a <etharp_input+0xfa>
      if (for_us) {
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d01c      	beq.n	800d318 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d2f4:	693a      	ldr	r2, [r7, #16]
 800d2f6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d2f8:	2102      	movs	r1, #2
 800d2fa:	9103      	str	r1, [sp, #12]
 800d2fc:	f107 010c 	add.w	r1, r7, #12
 800d300:	9102      	str	r1, [sp, #8]
 800d302:	9201      	str	r2, [sp, #4]
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	462b      	mov	r3, r5
 800d308:	4622      	mov	r2, r4
 800d30a:	4601      	mov	r1, r0
 800d30c:	6838      	ldr	r0, [r7, #0]
 800d30e:	f000 faeb 	bl	800d8e8 <etharp_raw>
      break;
 800d312:	e001      	b.n	800d318 <etharp_input+0xf8>
      break;
 800d314:	bf00      	nop
 800d316:	e000      	b.n	800d31a <etharp_input+0xfa>
      break;
 800d318:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7f9 fa7c 	bl	8006818 <pbuf_free>
}
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bdb0      	pop	{r4, r5, r7, pc}
 800d326:	bf00      	nop
 800d328:	08012344 	.word	0x08012344
 800d32c:	08012494 	.word	0x08012494
 800d330:	080123bc 	.word	0x080123bc

0800d334 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af02      	add	r7, sp, #8
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d342:	79fa      	ldrb	r2, [r7, #7]
 800d344:	4944      	ldr	r1, [pc, #272]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d346:	4613      	mov	r3, r2
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	4413      	add	r3, r2
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	440b      	add	r3, r1
 800d350:	3314      	adds	r3, #20
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d806      	bhi.n	800d366 <etharp_output_to_arp_index+0x32>
 800d358:	4b40      	ldr	r3, [pc, #256]	; (800d45c <etharp_output_to_arp_index+0x128>)
 800d35a:	f240 22ef 	movw	r2, #751	; 0x2ef
 800d35e:	4940      	ldr	r1, [pc, #256]	; (800d460 <etharp_output_to_arp_index+0x12c>)
 800d360:	4840      	ldr	r0, [pc, #256]	; (800d464 <etharp_output_to_arp_index+0x130>)
 800d362:	f001 ff35 	bl	800f1d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d366:	79fa      	ldrb	r2, [r7, #7]
 800d368:	493b      	ldr	r1, [pc, #236]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d36a:	4613      	mov	r3, r2
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	4413      	add	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	440b      	add	r3, r1
 800d374:	3314      	adds	r3, #20
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d153      	bne.n	800d424 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d37c:	79fa      	ldrb	r2, [r7, #7]
 800d37e:	4936      	ldr	r1, [pc, #216]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3312      	adds	r3, #18
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d392:	d919      	bls.n	800d3c8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d394:	79fa      	ldrb	r2, [r7, #7]
 800d396:	4613      	mov	r3, r2
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	4413      	add	r3, r2
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	4a2e      	ldr	r2, [pc, #184]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d3a0:	4413      	add	r3, r2
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 fb4c 	bl	800da44 <etharp_request>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d138      	bne.n	800d424 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d3b2:	79fa      	ldrb	r2, [r7, #7]
 800d3b4:	4928      	ldr	r1, [pc, #160]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	440b      	add	r3, r1
 800d3c0:	3314      	adds	r3, #20
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	e02d      	b.n	800d424 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d3c8:	79fa      	ldrb	r2, [r7, #7]
 800d3ca:	4923      	ldr	r1, [pc, #140]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	005b      	lsls	r3, r3, #1
 800d3d0:	4413      	add	r3, r2
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	440b      	add	r3, r1
 800d3d6:	3312      	adds	r3, #18
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d3de:	d321      	bcc.n	800d424 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d3e0:	79fa      	ldrb	r2, [r7, #7]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4413      	add	r3, r2
 800d3e8:	00db      	lsls	r3, r3, #3
 800d3ea:	4a1b      	ldr	r2, [pc, #108]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d3ec:	4413      	add	r3, r2
 800d3ee:	1d19      	adds	r1, r3, #4
 800d3f0:	79fa      	ldrb	r2, [r7, #7]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	4413      	add	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	4a16      	ldr	r2, [pc, #88]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d3fe:	4413      	add	r3, r2
 800d400:	3304      	adds	r3, #4
 800d402:	461a      	mov	r2, r3
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f000 fafb 	bl	800da00 <etharp_request_dst>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d109      	bne.n	800d424 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d410:	79fa      	ldrb	r2, [r7, #7]
 800d412:	4911      	ldr	r1, [pc, #68]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d414:	4613      	mov	r3, r2
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	4413      	add	r3, r2
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	440b      	add	r3, r1
 800d41e:	3314      	adds	r3, #20
 800d420:	2203      	movs	r2, #3
 800d422:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800d42a:	79fa      	ldrb	r2, [r7, #7]
 800d42c:	4613      	mov	r3, r2
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4413      	add	r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	3308      	adds	r3, #8
 800d436:	4a08      	ldr	r2, [pc, #32]	; (800d458 <etharp_output_to_arp_index+0x124>)
 800d438:	4413      	add	r3, r2
 800d43a:	1d1a      	adds	r2, r3, #4
 800d43c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4613      	mov	r3, r2
 800d444:	460a      	mov	r2, r1
 800d446:	68b9      	ldr	r1, [r7, #8]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f001 fe33 	bl	800f0b4 <ethernet_output>
 800d44e:	4603      	mov	r3, r0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000120 	.word	0x20000120
 800d45c:	08012344 	.word	0x08012344
 800d460:	080124b4 	.word	0x080124b4
 800d464:	080123bc 	.word	0x080123bc

0800d468 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	; 0x28
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d106      	bne.n	800d48c <etharp_output+0x24>
 800d47e:	4b73      	ldr	r3, [pc, #460]	; (800d64c <etharp_output+0x1e4>)
 800d480:	f240 321e 	movw	r2, #798	; 0x31e
 800d484:	4972      	ldr	r1, [pc, #456]	; (800d650 <etharp_output+0x1e8>)
 800d486:	4873      	ldr	r0, [pc, #460]	; (800d654 <etharp_output+0x1ec>)
 800d488:	f001 fea2 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <etharp_output+0x38>
 800d492:	4b6e      	ldr	r3, [pc, #440]	; (800d64c <etharp_output+0x1e4>)
 800d494:	f240 321f 	movw	r2, #799	; 0x31f
 800d498:	496f      	ldr	r1, [pc, #444]	; (800d658 <etharp_output+0x1f0>)
 800d49a:	486e      	ldr	r0, [pc, #440]	; (800d654 <etharp_output+0x1ec>)
 800d49c:	f001 fe98 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <etharp_output+0x4c>
 800d4a6:	4b69      	ldr	r3, [pc, #420]	; (800d64c <etharp_output+0x1e4>)
 800d4a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d4ac:	496b      	ldr	r1, [pc, #428]	; (800d65c <etharp_output+0x1f4>)
 800d4ae:	4869      	ldr	r0, [pc, #420]	; (800d654 <etharp_output+0x1ec>)
 800d4b0:	f001 fe8e 	bl	800f1d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68f9      	ldr	r1, [r7, #12]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 fef6 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d4c6:	4b66      	ldr	r3, [pc, #408]	; (800d660 <etharp_output+0x1f8>)
 800d4c8:	61fb      	str	r3, [r7, #28]
 800d4ca:	e0af      	b.n	800d62c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4d4:	2be0      	cmp	r3, #224	; 0xe0
 800d4d6:	d118      	bne.n	800d50a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d4e0:	235e      	movs	r3, #94	; 0x5e
 800d4e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3303      	adds	r3, #3
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d502:	f107 0310 	add.w	r3, r7, #16
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e090      	b.n	800d62c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3304      	adds	r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	405a      	eors	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3308      	adds	r3, #8
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4013      	ands	r3, r2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d012      	beq.n	800d548 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d528:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d00b      	beq.n	800d548 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	330c      	adds	r3, #12
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d003      	beq.n	800d542 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	330c      	adds	r3, #12
 800d53e:	61bb      	str	r3, [r7, #24]
 800d540:	e002      	b.n	800d548 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d542:	f06f 0303 	mvn.w	r3, #3
 800d546:	e07d      	b.n	800d644 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d548:	4b46      	ldr	r3, [pc, #280]	; (800d664 <etharp_output+0x1fc>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	4619      	mov	r1, r3
 800d54e:	4a46      	ldr	r2, [pc, #280]	; (800d668 <etharp_output+0x200>)
 800d550:	460b      	mov	r3, r1
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	440b      	add	r3, r1
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	4413      	add	r3, r2
 800d55a:	3314      	adds	r3, #20
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d925      	bls.n	800d5ae <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d562:	4b40      	ldr	r3, [pc, #256]	; (800d664 <etharp_output+0x1fc>)
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	4a3f      	ldr	r2, [pc, #252]	; (800d668 <etharp_output+0x200>)
 800d56a:	460b      	mov	r3, r1
 800d56c:	005b      	lsls	r3, r3, #1
 800d56e:	440b      	add	r3, r1
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	4413      	add	r3, r2
 800d574:	3308      	adds	r3, #8
 800d576:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d117      	bne.n	800d5ae <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b38      	ldr	r3, [pc, #224]	; (800d664 <etharp_output+0x1fc>)
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	4618      	mov	r0, r3
 800d588:	4937      	ldr	r1, [pc, #220]	; (800d668 <etharp_output+0x200>)
 800d58a:	4603      	mov	r3, r0
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4403      	add	r3, r0
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	440b      	add	r3, r1
 800d594:	3304      	adds	r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d598:	429a      	cmp	r2, r3
 800d59a:	d108      	bne.n	800d5ae <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d59c:	4b31      	ldr	r3, [pc, #196]	; (800d664 <etharp_output+0x1fc>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fec5 	bl	800d334 <etharp_output_to_arp_index>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	e04a      	b.n	800d644 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	75fb      	strb	r3, [r7, #23]
 800d5b2:	e031      	b.n	800d618 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d5b4:	7dfa      	ldrb	r2, [r7, #23]
 800d5b6:	492c      	ldr	r1, [pc, #176]	; (800d668 <etharp_output+0x200>)
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	005b      	lsls	r3, r3, #1
 800d5bc:	4413      	add	r3, r2
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	440b      	add	r3, r1
 800d5c2:	3314      	adds	r3, #20
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d923      	bls.n	800d612 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d5ca:	7dfa      	ldrb	r2, [r7, #23]
 800d5cc:	4926      	ldr	r1, [pc, #152]	; (800d668 <etharp_output+0x200>)
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	4413      	add	r3, r2
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	440b      	add	r3, r1
 800d5d8:	3308      	adds	r3, #8
 800d5da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d117      	bne.n	800d612 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	6819      	ldr	r1, [r3, #0]
 800d5e6:	7dfa      	ldrb	r2, [r7, #23]
 800d5e8:	481f      	ldr	r0, [pc, #124]	; (800d668 <etharp_output+0x200>)
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	005b      	lsls	r3, r3, #1
 800d5ee:	4413      	add	r3, r2
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	4403      	add	r3, r0
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d10a      	bne.n	800d612 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d5fc:	4a19      	ldr	r2, [pc, #100]	; (800d664 <etharp_output+0x1fc>)
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	461a      	mov	r2, r3
 800d606:	68b9      	ldr	r1, [r7, #8]
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f7ff fe93 	bl	800d334 <etharp_output_to_arp_index>
 800d60e:	4603      	mov	r3, r0
 800d610:	e018      	b.n	800d644 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	3301      	adds	r3, #1
 800d616:	75fb      	strb	r3, [r7, #23]
 800d618:	7dfb      	ldrb	r3, [r7, #23]
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	d9ca      	bls.n	800d5b4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	69b9      	ldr	r1, [r7, #24]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 f822 	bl	800d66c <etharp_query>
 800d628:	4603      	mov	r3, r0
 800d62a:	e00b      	b.n	800d644 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800d632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	68b9      	ldr	r1, [r7, #8]
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f001 fd39 	bl	800f0b4 <ethernet_output>
 800d642:	4603      	mov	r3, r0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	08012344 	.word	0x08012344
 800d650:	08012494 	.word	0x08012494
 800d654:	080123bc 	.word	0x080123bc
 800d658:	080124e4 	.word	0x080124e4
 800d65c:	08012484 	.word	0x08012484
 800d660:	08012af4 	.word	0x08012af4
 800d664:	20000210 	.word	0x20000210
 800d668:	20000120 	.word	0x20000120

0800d66c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08c      	sub	sp, #48	; 0x30
 800d670:	af02      	add	r7, sp, #8
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3322      	adds	r3, #34	; 0x22
 800d67c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d67e:	23ff      	movs	r3, #255	; 0xff
 800d680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68f9      	ldr	r1, [r7, #12]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 fe0c 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10c      	bne.n	800d6b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6a2:	2be0      	cmp	r3, #224	; 0xe0
 800d6a4:	d006      	beq.n	800d6b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d6b4:	f06f 030f 	mvn.w	r3, #15
 800d6b8:	e102      	b.n	800d8c0 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	2101      	movs	r1, #1
 800d6be:	68b8      	ldr	r0, [r7, #8]
 800d6c0:	f7ff fb60 	bl	800cd84 <etharp_find_entry>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d6c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	da02      	bge.n	800d6d6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d6d0:	8a7b      	ldrh	r3, [r7, #18]
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	e0f4      	b.n	800d8c0 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d6d6:	8a7b      	ldrh	r3, [r7, #18]
 800d6d8:	2b7e      	cmp	r3, #126	; 0x7e
 800d6da:	d906      	bls.n	800d6ea <etharp_query+0x7e>
 800d6dc:	4b7a      	ldr	r3, [pc, #488]	; (800d8c8 <etharp_query+0x25c>)
 800d6de:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d6e2:	497a      	ldr	r1, [pc, #488]	; (800d8cc <etharp_query+0x260>)
 800d6e4:	487a      	ldr	r0, [pc, #488]	; (800d8d0 <etharp_query+0x264>)
 800d6e6:	f001 fd73 	bl	800f1d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d6ea:	8a7b      	ldrh	r3, [r7, #18]
 800d6ec:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d6ee:	7c7a      	ldrb	r2, [r7, #17]
 800d6f0:	4978      	ldr	r1, [pc, #480]	; (800d8d4 <etharp_query+0x268>)
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3314      	adds	r3, #20
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d115      	bne.n	800d730 <etharp_query+0xc4>
    is_new_entry = 1;
 800d704:	2301      	movs	r3, #1
 800d706:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d708:	7c7a      	ldrb	r2, [r7, #17]
 800d70a:	4972      	ldr	r1, [pc, #456]	; (800d8d4 <etharp_query+0x268>)
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	440b      	add	r3, r1
 800d716:	3314      	adds	r3, #20
 800d718:	2201      	movs	r2, #1
 800d71a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d71c:	7c7a      	ldrb	r2, [r7, #17]
 800d71e:	496d      	ldr	r1, [pc, #436]	; (800d8d4 <etharp_query+0x268>)
 800d720:	4613      	mov	r3, r2
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	4413      	add	r3, r2
 800d726:	00db      	lsls	r3, r3, #3
 800d728:	440b      	add	r3, r1
 800d72a:	3308      	adds	r3, #8
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d730:	7c7a      	ldrb	r2, [r7, #17]
 800d732:	4968      	ldr	r1, [pc, #416]	; (800d8d4 <etharp_query+0x268>)
 800d734:	4613      	mov	r3, r2
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	4413      	add	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	440b      	add	r3, r1
 800d73e:	3314      	adds	r3, #20
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d011      	beq.n	800d76a <etharp_query+0xfe>
 800d746:	7c7a      	ldrb	r2, [r7, #17]
 800d748:	4962      	ldr	r1, [pc, #392]	; (800d8d4 <etharp_query+0x268>)
 800d74a:	4613      	mov	r3, r2
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	4413      	add	r3, r2
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	440b      	add	r3, r1
 800d754:	3314      	adds	r3, #20
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d806      	bhi.n	800d76a <etharp_query+0xfe>
 800d75c:	4b5a      	ldr	r3, [pc, #360]	; (800d8c8 <etharp_query+0x25c>)
 800d75e:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d762:	495d      	ldr	r1, [pc, #372]	; (800d8d8 <etharp_query+0x26c>)
 800d764:	485a      	ldr	r0, [pc, #360]	; (800d8d0 <etharp_query+0x264>)
 800d766:	f001 fd33 	bl	800f1d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d102      	bne.n	800d776 <etharp_query+0x10a>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10c      	bne.n	800d790 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 f963 	bl	800da44 <etharp_request>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <etharp_query+0x124>
      return result;
 800d78a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d78e:	e097      	b.n	800d8c0 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <etharp_query+0x138>
 800d796:	4b4c      	ldr	r3, [pc, #304]	; (800d8c8 <etharp_query+0x25c>)
 800d798:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d79c:	494f      	ldr	r1, [pc, #316]	; (800d8dc <etharp_query+0x270>)
 800d79e:	484c      	ldr	r0, [pc, #304]	; (800d8d0 <etharp_query+0x264>)
 800d7a0:	f001 fd16 	bl	800f1d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d7a4:	7c7a      	ldrb	r2, [r7, #17]
 800d7a6:	494b      	ldr	r1, [pc, #300]	; (800d8d4 <etharp_query+0x268>)
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3314      	adds	r3, #20
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d918      	bls.n	800d7ec <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d7ba:	4a49      	ldr	r2, [pc, #292]	; (800d8e0 <etharp_query+0x274>)
 800d7bc:	7c7b      	ldrb	r3, [r7, #17]
 800d7be:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d7c0:	7c7a      	ldrb	r2, [r7, #17]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	4413      	add	r3, r2
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	4a41      	ldr	r2, [pc, #260]	; (800d8d4 <etharp_query+0x268>)
 800d7ce:	4413      	add	r3, r2
 800d7d0:	1d1a      	adds	r2, r3, #4
 800d7d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f001 fc68 	bl	800f0b4 <ethernet_output>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7ea:	e067      	b.n	800d8bc <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7ec:	7c7a      	ldrb	r2, [r7, #17]
 800d7ee:	4939      	ldr	r1, [pc, #228]	; (800d8d4 <etharp_query+0x268>)
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	4413      	add	r3, r2
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	440b      	add	r3, r1
 800d7fa:	3314      	adds	r3, #20
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d15c      	bne.n	800d8bc <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d80a:	e01c      	b.n	800d846 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	895a      	ldrh	r2, [r3, #10]
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	891b      	ldrh	r3, [r3, #8]
 800d814:	429a      	cmp	r2, r3
 800d816:	d10a      	bne.n	800d82e <etharp_query+0x1c2>
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d006      	beq.n	800d82e <etharp_query+0x1c2>
 800d820:	4b29      	ldr	r3, [pc, #164]	; (800d8c8 <etharp_query+0x25c>)
 800d822:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d826:	492f      	ldr	r1, [pc, #188]	; (800d8e4 <etharp_query+0x278>)
 800d828:	4829      	ldr	r0, [pc, #164]	; (800d8d0 <etharp_query+0x264>)
 800d82a:	f001 fcd1 	bl	800f1d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	7b1b      	ldrb	r3, [r3, #12]
 800d832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <etharp_query+0x1d4>
        copy_needed = 1;
 800d83a:	2301      	movs	r3, #1
 800d83c:	61bb      	str	r3, [r7, #24]
        break;
 800d83e:	e005      	b.n	800d84c <etharp_query+0x1e0>
      }
      p = p->next;
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1df      	bne.n	800d80c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d858:	200e      	movs	r0, #14
 800d85a:	f7f9 fa49 	bl	8006cf0 <pbuf_clone>
 800d85e:	61f8      	str	r0, [r7, #28]
 800d860:	e004      	b.n	800d86c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d866:	69f8      	ldr	r0, [r7, #28]
 800d868:	f7f9 f876 	bl	8006958 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d021      	beq.n	800d8b6 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d872:	7c7a      	ldrb	r2, [r7, #17]
 800d874:	4917      	ldr	r1, [pc, #92]	; (800d8d4 <etharp_query+0x268>)
 800d876:	4613      	mov	r3, r2
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	00db      	lsls	r3, r3, #3
 800d87e:	440b      	add	r3, r1
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00a      	beq.n	800d89c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d886:	7c7a      	ldrb	r2, [r7, #17]
 800d888:	4912      	ldr	r1, [pc, #72]	; (800d8d4 <etharp_query+0x268>)
 800d88a:	4613      	mov	r3, r2
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	4413      	add	r3, r2
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	440b      	add	r3, r1
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f7f8 ffbe 	bl	8006818 <pbuf_free>
      }
      arp_table[i].q = p;
 800d89c:	7c7a      	ldrb	r2, [r7, #17]
 800d89e:	490d      	ldr	r1, [pc, #52]	; (800d8d4 <etharp_query+0x268>)
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	4413      	add	r3, r2
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	440b      	add	r3, r1
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8b4:	e002      	b.n	800d8bc <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d8b6:	23ff      	movs	r3, #255	; 0xff
 800d8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d8bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3728      	adds	r7, #40	; 0x28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	08012344 	.word	0x08012344
 800d8cc:	080124f0 	.word	0x080124f0
 800d8d0:	080123bc 	.word	0x080123bc
 800d8d4:	20000120 	.word	0x20000120
 800d8d8:	08012500 	.word	0x08012500
 800d8dc:	080124e4 	.word	0x080124e4
 800d8e0:	20000210 	.word	0x20000210
 800d8e4:	08012528 	.word	0x08012528

0800d8e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <etharp_raw+0x26>
 800d900:	4b3a      	ldr	r3, [pc, #232]	; (800d9ec <etharp_raw+0x104>)
 800d902:	f240 4257 	movw	r2, #1111	; 0x457
 800d906:	493a      	ldr	r1, [pc, #232]	; (800d9f0 <etharp_raw+0x108>)
 800d908:	483a      	ldr	r0, [pc, #232]	; (800d9f4 <etharp_raw+0x10c>)
 800d90a:	f001 fc61 	bl	800f1d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d90e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d912:	211c      	movs	r1, #28
 800d914:	200e      	movs	r0, #14
 800d916:	f7f8 fc9f 	bl	8006258 <pbuf_alloc>
 800d91a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d922:	f04f 33ff 	mov.w	r3, #4294967295
 800d926:	e05d      	b.n	800d9e4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	895b      	ldrh	r3, [r3, #10]
 800d92c:	2b1b      	cmp	r3, #27
 800d92e:	d806      	bhi.n	800d93e <etharp_raw+0x56>
 800d930:	4b2e      	ldr	r3, [pc, #184]	; (800d9ec <etharp_raw+0x104>)
 800d932:	f240 4263 	movw	r2, #1123	; 0x463
 800d936:	4930      	ldr	r1, [pc, #192]	; (800d9f8 <etharp_raw+0x110>)
 800d938:	482e      	ldr	r0, [pc, #184]	; (800d9f4 <etharp_raw+0x10c>)
 800d93a:	f001 fc49 	bl	800f1d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d944:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d946:	4618      	mov	r0, r3
 800d948:	f7f7 fccb 	bl	80052e2 <lwip_htons>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d95a:	2b06      	cmp	r3, #6
 800d95c:	d006      	beq.n	800d96c <etharp_raw+0x84>
 800d95e:	4b23      	ldr	r3, [pc, #140]	; (800d9ec <etharp_raw+0x104>)
 800d960:	f240 426a 	movw	r2, #1130	; 0x46a
 800d964:	4925      	ldr	r1, [pc, #148]	; (800d9fc <etharp_raw+0x114>)
 800d966:	4823      	ldr	r0, [pc, #140]	; (800d9f4 <etharp_raw+0x10c>)
 800d968:	f001 fc32 	bl	800f1d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	3308      	adds	r3, #8
 800d970:	2206      	movs	r2, #6
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f001 fc18 	bl	800f1aa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	3312      	adds	r3, #18
 800d97e:	2206      	movs	r2, #6
 800d980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d982:	4618      	mov	r0, r3
 800d984:	f001 fc11 	bl	800f1aa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	330e      	adds	r3, #14
 800d98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d98e:	6812      	ldr	r2, [r2, #0]
 800d990:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	3318      	adds	r3, #24
 800d996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	701a      	strb	r2, [r3, #0]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f042 0201 	orr.w	r2, r2, #1
 800d9a8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f042 0208 	orr.w	r2, r2, #8
 800d9b2:	709a      	strb	r2, [r3, #2]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	2204      	movs	r2, #4
 800d9c2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d9c4:	f640 0306 	movw	r3, #2054	; 0x806
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	69b9      	ldr	r1, [r7, #24]
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f001 fb6f 	bl	800f0b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d9d6:	69b8      	ldr	r0, [r7, #24]
 800d9d8:	f7f8 ff1e 	bl	8006818 <pbuf_free>
  p = NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d9e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3720      	adds	r7, #32
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	08012344 	.word	0x08012344
 800d9f0:	08012494 	.word	0x08012494
 800d9f4:	080123bc 	.word	0x080123bc
 800d9f8:	08012544 	.word	0x08012544
 800d9fc:	08012578 	.word	0x08012578

0800da00 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af04      	add	r7, sp, #16
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800da1c:	2201      	movs	r2, #1
 800da1e:	9203      	str	r2, [sp, #12]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	9202      	str	r2, [sp, #8]
 800da24:	4a06      	ldr	r2, [pc, #24]	; (800da40 <etharp_request_dst+0x40>)
 800da26:	9201      	str	r2, [sp, #4]
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	4603      	mov	r3, r0
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f7ff ff5a 	bl	800d8e8 <etharp_raw>
 800da34:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	08012afc 	.word	0x08012afc

0800da44 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800da4e:	4a05      	ldr	r2, [pc, #20]	; (800da64 <etharp_request+0x20>)
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff ffd4 	bl	800da00 <etharp_request_dst>
 800da58:	4603      	mov	r3, r0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	08012af4 	.word	0x08012af4

0800da68 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08e      	sub	sp, #56	; 0x38
 800da6c:	af04      	add	r7, sp, #16
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800da72:	4b79      	ldr	r3, [pc, #484]	; (800dc58 <icmp_input+0x1f0>)
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f003 030f 	and.w	r3, r3, #15
 800da80:	b2db      	uxtb	r3, r3
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	b2db      	uxtb	r3, r3
 800da86:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800da88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da8a:	2b13      	cmp	r3, #19
 800da8c:	f240 80cd 	bls.w	800dc2a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	895b      	ldrh	r3, [r3, #10]
 800da94:	2b03      	cmp	r3, #3
 800da96:	f240 80ca 	bls.w	800dc2e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800daa4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 80b7 	beq.w	800dc1c <icmp_input+0x1b4>
 800daae:	2b08      	cmp	r3, #8
 800dab0:	f040 80b7 	bne.w	800dc22 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dab4:	4b69      	ldr	r3, [pc, #420]	; (800dc5c <icmp_input+0x1f4>)
 800dab6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dab8:	4b67      	ldr	r3, [pc, #412]	; (800dc58 <icmp_input+0x1f0>)
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dac0:	2be0      	cmp	r3, #224	; 0xe0
 800dac2:	f000 80bb 	beq.w	800dc3c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dac6:	4b64      	ldr	r3, [pc, #400]	; (800dc58 <icmp_input+0x1f0>)
 800dac8:	695a      	ldr	r2, [r3, #20]
 800daca:	4b63      	ldr	r3, [pc, #396]	; (800dc58 <icmp_input+0x1f0>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4619      	mov	r1, r3
 800dad0:	4610      	mov	r0, r2
 800dad2:	f000 fbeb 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f040 80b1 	bne.w	800dc40 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	891b      	ldrh	r3, [r3, #8]
 800dae2:	2b07      	cmp	r3, #7
 800dae4:	f240 80a5 	bls.w	800dc32 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daea:	330e      	adds	r3, #14
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f8 fdfc 	bl	80066ec <pbuf_add_header>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d04b      	beq.n	800db92 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	891a      	ldrh	r2, [r3, #8]
 800dafe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db00:	4413      	add	r3, r2
 800db02:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	891b      	ldrh	r3, [r3, #8]
 800db08:	8b7a      	ldrh	r2, [r7, #26]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	f0c0 809a 	bcc.w	800dc44 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800db10:	8b7b      	ldrh	r3, [r7, #26]
 800db12:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db16:	4619      	mov	r1, r3
 800db18:	200e      	movs	r0, #14
 800db1a:	f7f8 fb9d 	bl	8006258 <pbuf_alloc>
 800db1e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 8090 	beq.w	800dc48 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	895b      	ldrh	r3, [r3, #10]
 800db2c:	461a      	mov	r2, r3
 800db2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db30:	3308      	adds	r3, #8
 800db32:	429a      	cmp	r2, r3
 800db34:	d203      	bcs.n	800db3e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800db36:	6978      	ldr	r0, [r7, #20]
 800db38:	f7f8 fe6e 	bl	8006818 <pbuf_free>
          goto icmperr;
 800db3c:	e085      	b.n	800dc4a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800db44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f001 fb2f 	bl	800f1aa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800db4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db4e:	4619      	mov	r1, r3
 800db50:	6978      	ldr	r0, [r7, #20]
 800db52:	f7f8 fddb 	bl	800670c <pbuf_remove_header>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d009      	beq.n	800db70 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db5c:	4b40      	ldr	r3, [pc, #256]	; (800dc60 <icmp_input+0x1f8>)
 800db5e:	22b6      	movs	r2, #182	; 0xb6
 800db60:	4940      	ldr	r1, [pc, #256]	; (800dc64 <icmp_input+0x1fc>)
 800db62:	4841      	ldr	r0, [pc, #260]	; (800dc68 <icmp_input+0x200>)
 800db64:	f001 fb34 	bl	800f1d0 <iprintf>
          pbuf_free(r);
 800db68:	6978      	ldr	r0, [r7, #20]
 800db6a:	f7f8 fe55 	bl	8006818 <pbuf_free>
          goto icmperr;
 800db6e:	e06c      	b.n	800dc4a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f7f8 ff78 	bl	8006a68 <pbuf_copy>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d003      	beq.n	800db86 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db7e:	6978      	ldr	r0, [r7, #20]
 800db80:	f7f8 fe4a 	bl	8006818 <pbuf_free>
          goto icmperr;
 800db84:	e061      	b.n	800dc4a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7f8 fe46 	bl	8006818 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	607b      	str	r3, [r7, #4]
 800db90:	e00f      	b.n	800dbb2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db94:	330e      	adds	r3, #14
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7f8 fdb7 	bl	800670c <pbuf_remove_header>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d006      	beq.n	800dbb2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dba4:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <icmp_input+0x1f8>)
 800dba6:	22c7      	movs	r2, #199	; 0xc7
 800dba8:	4930      	ldr	r1, [pc, #192]	; (800dc6c <icmp_input+0x204>)
 800dbaa:	482f      	ldr	r0, [pc, #188]	; (800dc68 <icmp_input+0x200>)
 800dbac:	f001 fb10 	bl	800f1d0 <iprintf>
          goto icmperr;
 800dbb0:	e04b      	b.n	800dc4a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dbb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7f8 fd95 	bl	80066ec <pbuf_add_header>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d12b      	bne.n	800dc20 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dbd6:	4b20      	ldr	r3, [pc, #128]	; (800dc58 <icmp_input+0x1f0>)
 800dbd8:	691a      	ldr	r2, [r3, #16]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	709a      	strb	r2, [r3, #2]
 800dbea:	2200      	movs	r2, #0
 800dbec:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	22ff      	movs	r2, #255	; 0xff
 800dbf2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	729a      	strb	r2, [r3, #10]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	9302      	str	r3, [sp, #8]
 800dc02:	2301      	movs	r3, #1
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	23ff      	movs	r3, #255	; 0xff
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	69f9      	ldr	r1, [r7, #28]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fa73 	bl	800e0fc <ip4_output_if>
 800dc16:	4603      	mov	r3, r0
 800dc18:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dc1a:	e001      	b.n	800dc20 <icmp_input+0x1b8>
      break;
 800dc1c:	bf00      	nop
 800dc1e:	e000      	b.n	800dc22 <icmp_input+0x1ba>
      break;
 800dc20:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7f8 fdf8 	bl	8006818 <pbuf_free>
  return;
 800dc28:	e013      	b.n	800dc52 <icmp_input+0x1ea>
    goto lenerr;
 800dc2a:	bf00      	nop
 800dc2c:	e002      	b.n	800dc34 <icmp_input+0x1cc>
    goto lenerr;
 800dc2e:	bf00      	nop
 800dc30:	e000      	b.n	800dc34 <icmp_input+0x1cc>
        goto lenerr;
 800dc32:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7f8 fdef 	bl	8006818 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc3a:	e00a      	b.n	800dc52 <icmp_input+0x1ea>
        goto icmperr;
 800dc3c:	bf00      	nop
 800dc3e:	e004      	b.n	800dc4a <icmp_input+0x1e2>
        goto icmperr;
 800dc40:	bf00      	nop
 800dc42:	e002      	b.n	800dc4a <icmp_input+0x1e2>
          goto icmperr;
 800dc44:	bf00      	nop
 800dc46:	e000      	b.n	800dc4a <icmp_input+0x1e2>
          goto icmperr;
 800dc48:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7f8 fde4 	bl	8006818 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dc50:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dc52:	3728      	adds	r7, #40	; 0x28
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	200037e8 	.word	0x200037e8
 800dc5c:	200037fc 	.word	0x200037fc
 800dc60:	080125bc 	.word	0x080125bc
 800dc64:	080125f4 	.word	0x080125f4
 800dc68:	0801262c 	.word	0x0801262c
 800dc6c:	08012654 	.word	0x08012654

0800dc70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc7c:	78fb      	ldrb	r3, [r7, #3]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	2103      	movs	r1, #3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f814 	bl	800dcb0 <icmp_send_response>
}
 800dc88:	bf00      	nop
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc9c:	78fb      	ldrb	r3, [r7, #3]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	210b      	movs	r1, #11
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f804 	bl	800dcb0 <icmp_send_response>
}
 800dca8:	bf00      	nop
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08c      	sub	sp, #48	; 0x30
 800dcb4:	af04      	add	r7, sp, #16
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dcc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcc4:	2124      	movs	r1, #36	; 0x24
 800dcc6:	2022      	movs	r0, #34	; 0x22
 800dcc8:	f7f8 fac6 	bl	8006258 <pbuf_alloc>
 800dccc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d04c      	beq.n	800dd6e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	895b      	ldrh	r3, [r3, #10]
 800dcd8:	2b23      	cmp	r3, #35	; 0x23
 800dcda:	d806      	bhi.n	800dcea <icmp_send_response+0x3a>
 800dcdc:	4b26      	ldr	r3, [pc, #152]	; (800dd78 <icmp_send_response+0xc8>)
 800dcde:	f240 1269 	movw	r2, #361	; 0x169
 800dce2:	4926      	ldr	r1, [pc, #152]	; (800dd7c <icmp_send_response+0xcc>)
 800dce4:	4826      	ldr	r0, [pc, #152]	; (800dd80 <icmp_send_response+0xd0>)
 800dce6:	f001 fa73 	bl	800f1d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	78fa      	ldrb	r2, [r7, #3]
 800dcfa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	78ba      	ldrb	r2, [r7, #2]
 800dd00:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2200      	movs	r2, #0
 800dd06:	711a      	strb	r2, [r3, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	719a      	strb	r2, [r3, #6]
 800dd12:	2200      	movs	r2, #0
 800dd14:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f103 0008 	add.w	r0, r3, #8
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	221c      	movs	r2, #28
 800dd24:	4619      	mov	r1, r3
 800dd26:	f001 fa40 	bl	800f1aa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dd30:	f107 030c 	add.w	r3, r7, #12
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f825 	bl	800dd84 <ip4_route>
 800dd3a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d011      	beq.n	800dd66 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2200      	movs	r2, #0
 800dd46:	709a      	strb	r2, [r3, #2]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dd4c:	f107 020c 	add.w	r2, r7, #12
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	9302      	str	r3, [sp, #8]
 800dd54:	2301      	movs	r3, #1
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	23ff      	movs	r3, #255	; 0xff
 800dd5e:	2100      	movs	r1, #0
 800dd60:	69f8      	ldr	r0, [r7, #28]
 800dd62:	f000 f9cb 	bl	800e0fc <ip4_output_if>
  }
  pbuf_free(q);
 800dd66:	69f8      	ldr	r0, [r7, #28]
 800dd68:	f7f8 fd56 	bl	8006818 <pbuf_free>
 800dd6c:	e000      	b.n	800dd70 <icmp_send_response+0xc0>
    return;
 800dd6e:	bf00      	nop
}
 800dd70:	3720      	adds	r7, #32
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	080125bc 	.word	0x080125bc
 800dd7c:	08012688 	.word	0x08012688
 800dd80:	0801262c 	.word	0x0801262c

0800dd84 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd8c:	4b33      	ldr	r3, [pc, #204]	; (800de5c <ip4_route+0xd8>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	60fb      	str	r3, [r7, #12]
 800dd92:	e036      	b.n	800de02 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dd9a:	f003 0301 	and.w	r3, r3, #1
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d02b      	beq.n	800ddfc <ip4_route+0x78>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ddaa:	089b      	lsrs	r3, r3, #2
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d022      	beq.n	800ddfc <ip4_route+0x78>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d01d      	beq.n	800ddfc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	405a      	eors	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4013      	ands	r3, r2
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	e038      	b.n	800de4e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d108      	bne.n	800ddfc <ip4_route+0x78>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	330c      	adds	r3, #12
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d101      	bne.n	800ddfc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	e028      	b.n	800de4e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1c5      	bne.n	800dd94 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800de08:	4b15      	ldr	r3, [pc, #84]	; (800de60 <ip4_route+0xdc>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d01a      	beq.n	800de46 <ip4_route+0xc2>
 800de10:	4b13      	ldr	r3, [pc, #76]	; (800de60 <ip4_route+0xdc>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d012      	beq.n	800de46 <ip4_route+0xc2>
 800de20:	4b0f      	ldr	r3, [pc, #60]	; (800de60 <ip4_route+0xdc>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800de28:	f003 0304 	and.w	r3, r3, #4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00a      	beq.n	800de46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <ip4_route+0xdc>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3304      	adds	r3, #4
 800de36:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b7f      	cmp	r3, #127	; 0x7f
 800de44:	d101      	bne.n	800de4a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800de46:	2300      	movs	r3, #0
 800de48:	e001      	b.n	800de4e <ip4_route+0xca>
  }

  return netif_default;
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <ip4_route+0xdc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	20006d1c 	.word	0x20006d1c
 800de60:	20006d20 	.word	0x20006d20

0800de64 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d016      	beq.n	800deaa <ip4_input_accept+0x46>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3304      	adds	r3, #4
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d011      	beq.n	800deaa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de86:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <ip4_input_accept+0x50>)
 800de88:	695a      	ldr	r2, [r3, #20]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3304      	adds	r3, #4
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	429a      	cmp	r2, r3
 800de92:	d008      	beq.n	800dea6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de94:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <ip4_input_accept+0x50>)
 800de96:	695b      	ldr	r3, [r3, #20]
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f000 fa06 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800dea0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e000      	b.n	800deac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	200037e8 	.word	0x200037e8

0800deb8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	091b      	lsrs	r3, r3, #4
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b04      	cmp	r3, #4
 800ded2:	d004      	beq.n	800dede <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7f8 fc9f 	bl	8006818 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	e105      	b.n	800e0ea <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 030f 	and.w	r3, r3, #15
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	b2db      	uxtb	r3, r3
 800deec:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	885b      	ldrh	r3, [r3, #2]
 800def2:	b29b      	uxth	r3, r3
 800def4:	4618      	mov	r0, r3
 800def6:	f7f7 f9f4 	bl	80052e2 <lwip_htons>
 800defa:	4603      	mov	r3, r0
 800defc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	891b      	ldrh	r3, [r3, #8]
 800df02:	89ba      	ldrh	r2, [r7, #12]
 800df04:	429a      	cmp	r2, r3
 800df06:	d204      	bcs.n	800df12 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800df08:	89bb      	ldrh	r3, [r7, #12]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7f8 fafd 	bl	800650c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	895b      	ldrh	r3, [r3, #10]
 800df16:	89fa      	ldrh	r2, [r7, #14]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d807      	bhi.n	800df2c <ip4_input+0x74>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	891b      	ldrh	r3, [r3, #8]
 800df20:	89ba      	ldrh	r2, [r7, #12]
 800df22:	429a      	cmp	r2, r3
 800df24:	d802      	bhi.n	800df2c <ip4_input+0x74>
 800df26:	89fb      	ldrh	r3, [r7, #14]
 800df28:	2b13      	cmp	r3, #19
 800df2a:	d804      	bhi.n	800df36 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7f8 fc73 	bl	8006818 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	e0d9      	b.n	800e0ea <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	691b      	ldr	r3, [r3, #16]
 800df3a:	4a6e      	ldr	r2, [pc, #440]	; (800e0f4 <ip4_input+0x23c>)
 800df3c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	4a6c      	ldr	r2, [pc, #432]	; (800e0f4 <ip4_input+0x23c>)
 800df44:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df46:	4b6b      	ldr	r3, [pc, #428]	; (800e0f4 <ip4_input+0x23c>)
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df4e:	2be0      	cmp	r3, #224	; 0xe0
 800df50:	d112      	bne.n	800df78 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <ip4_input+0xba>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	3304      	adds	r3, #4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <ip4_input+0xba>
      netif = inp;
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	613b      	str	r3, [r7, #16]
 800df70:	e02a      	b.n	800dfc8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
 800df76:	e027      	b.n	800dfc8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800df78:	6838      	ldr	r0, [r7, #0]
 800df7a:	f7ff ff73 	bl	800de64 <ip4_input_accept>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <ip4_input+0xd2>
      netif = inp;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	613b      	str	r3, [r7, #16]
 800df88:	e01e      	b.n	800dfc8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df8e:	4b59      	ldr	r3, [pc, #356]	; (800e0f4 <ip4_input+0x23c>)
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b7f      	cmp	r3, #127	; 0x7f
 800df96:	d017      	beq.n	800dfc8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df98:	4b57      	ldr	r3, [pc, #348]	; (800e0f8 <ip4_input+0x240>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	613b      	str	r3, [r7, #16]
 800df9e:	e00e      	b.n	800dfbe <ip4_input+0x106>
          if (netif == inp) {
 800dfa0:	693a      	ldr	r2, [r7, #16]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d006      	beq.n	800dfb6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dfa8:	6938      	ldr	r0, [r7, #16]
 800dfaa:	f7ff ff5b 	bl	800de64 <ip4_input_accept>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d108      	bne.n	800dfc6 <ip4_input+0x10e>
 800dfb4:	e000      	b.n	800dfb8 <ip4_input+0x100>
            continue;
 800dfb6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	613b      	str	r3, [r7, #16]
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1ed      	bne.n	800dfa0 <ip4_input+0xe8>
 800dfc4:	e000      	b.n	800dfc8 <ip4_input+0x110>
            break;
 800dfc6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dfc8:	4b4a      	ldr	r3, [pc, #296]	; (800e0f4 <ip4_input+0x23c>)
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	6839      	ldr	r1, [r7, #0]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 f96c 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d105      	bne.n	800dfe6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dfda:	4b46      	ldr	r3, [pc, #280]	; (800e0f4 <ip4_input+0x23c>)
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dfe2:	2be0      	cmp	r3, #224	; 0xe0
 800dfe4:	d104      	bne.n	800dff0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7f8 fc16 	bl	8006818 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	e07c      	b.n	800e0ea <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d104      	bne.n	800e000 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7f8 fc0e 	bl	8006818 <pbuf_free>
    return ERR_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	e074      	b.n	800e0ea <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	88db      	ldrh	r3, [r3, #6]
 800e004:	b29b      	uxth	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e00c:	4013      	ands	r3, r2
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fc90 	bl	800e938 <ip4_reass>
 800e018:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <ip4_input+0x16c>
      return ERR_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	e062      	b.n	800e0ea <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e02a:	4a32      	ldr	r2, [pc, #200]	; (800e0f4 <ip4_input+0x23c>)
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e030:	4a30      	ldr	r2, [pc, #192]	; (800e0f4 <ip4_input+0x23c>)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e036:	4a2f      	ldr	r2, [pc, #188]	; (800e0f4 <ip4_input+0x23c>)
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	f003 030f 	and.w	r3, r3, #15
 800e044:	b2db      	uxtb	r3, r3
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <ip4_input+0x23c>)
 800e04e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e050:	89fb      	ldrh	r3, [r7, #14]
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7f8 fb59 	bl	800670c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	7a5b      	ldrb	r3, [r3, #9]
 800e05e:	2b06      	cmp	r3, #6
 800e060:	d009      	beq.n	800e076 <ip4_input+0x1be>
 800e062:	2b11      	cmp	r3, #17
 800e064:	d002      	beq.n	800e06c <ip4_input+0x1b4>
 800e066:	2b01      	cmp	r3, #1
 800e068:	d00a      	beq.n	800e080 <ip4_input+0x1c8>
 800e06a:	e00e      	b.n	800e08a <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7fe f9c0 	bl	800c3f4 <udp_input>
        break;
 800e074:	e026      	b.n	800e0c4 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e076:	6839      	ldr	r1, [r7, #0]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7fa f9f9 	bl	8008470 <tcp_input>
        break;
 800e07e:	e021      	b.n	800e0c4 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff fcf0 	bl	800da68 <icmp_input>
        break;
 800e088:	e01c      	b.n	800e0c4 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e08a:	4b1a      	ldr	r3, [pc, #104]	; (800e0f4 <ip4_input+0x23c>)
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	6939      	ldr	r1, [r7, #16]
 800e090:	4618      	mov	r0, r3
 800e092:	f000 f90b 	bl	800e2ac <ip4_addr_isbroadcast_u32>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10f      	bne.n	800e0bc <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e09c:	4b15      	ldr	r3, [pc, #84]	; (800e0f4 <ip4_input+0x23c>)
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e0a4:	2be0      	cmp	r3, #224	; 0xe0
 800e0a6:	d009      	beq.n	800e0bc <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e0a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7f8 fb9f 	bl	80067f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e0b4:	2102      	movs	r1, #2
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f7ff fdda 	bl	800dc70 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7f8 fbab 	bl	8006818 <pbuf_free>
        break;
 800e0c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e0c4:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <ip4_input+0x23c>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e0ca:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <ip4_input+0x23c>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e0d0:	4b08      	ldr	r3, [pc, #32]	; (800e0f4 <ip4_input+0x23c>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e0d6:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <ip4_input+0x23c>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <ip4_input+0x23c>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e0e2:	4b04      	ldr	r3, [pc, #16]	; (800e0f4 <ip4_input+0x23c>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	200037e8 	.word	0x200037e8
 800e0f8:	20006d1c 	.word	0x20006d1c

0800e0fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08a      	sub	sp, #40	; 0x28
 800e100:	af04      	add	r7, sp, #16
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d009      	beq.n	800e128 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <ip4_output_if+0x26>
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d102      	bne.n	800e128 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	3304      	adds	r3, #4
 800e126:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e128:	78fa      	ldrb	r2, [r7, #3]
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	9302      	str	r3, [sp, #8]
 800e12e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e138:	9300      	str	r3, [sp, #0]
 800e13a:	4613      	mov	r3, r2
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	6979      	ldr	r1, [r7, #20]
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 f805 	bl	800e150 <ip4_output_if_src>
 800e146:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3718      	adds	r7, #24
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	7b9b      	ldrb	r3, [r3, #14]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d006      	beq.n	800e174 <ip4_output_if_src+0x24>
 800e166:	4b4b      	ldr	r3, [pc, #300]	; (800e294 <ip4_output_if_src+0x144>)
 800e168:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e16c:	494a      	ldr	r1, [pc, #296]	; (800e298 <ip4_output_if_src+0x148>)
 800e16e:	484b      	ldr	r0, [pc, #300]	; (800e29c <ip4_output_if_src+0x14c>)
 800e170:	f001 f82e 	bl	800f1d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d060      	beq.n	800e23c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e17a:	2314      	movs	r3, #20
 800e17c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e17e:	2114      	movs	r1, #20
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7f8 fab3 	bl	80066ec <pbuf_add_header>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e18c:	f06f 0301 	mvn.w	r3, #1
 800e190:	e07c      	b.n	800e28c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	895b      	ldrh	r3, [r3, #10]
 800e19c:	2b13      	cmp	r3, #19
 800e19e:	d806      	bhi.n	800e1ae <ip4_output_if_src+0x5e>
 800e1a0:	4b3c      	ldr	r3, [pc, #240]	; (800e294 <ip4_output_if_src+0x144>)
 800e1a2:	f240 3289 	movw	r2, #905	; 0x389
 800e1a6:	493e      	ldr	r1, [pc, #248]	; (800e2a0 <ip4_output_if_src+0x150>)
 800e1a8:	483c      	ldr	r0, [pc, #240]	; (800e29c <ip4_output_if_src+0x14c>)
 800e1aa:	f001 f811 	bl	800f1d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e1ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e1c4:	8b7b      	ldrh	r3, [r7, #26]
 800e1c6:	089b      	lsrs	r3, r3, #2
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e1dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	891b      	ldrh	r3, [r3, #8]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f7 f87d 	bl	80052e2 <lwip_htons>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	719a      	strb	r2, [r3, #6]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e1fa:	4b2a      	ldr	r3, [pc, #168]	; (800e2a4 <ip4_output_if_src+0x154>)
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f7 f86f 	bl	80052e2 <lwip_htons>
 800e204:	4603      	mov	r3, r0
 800e206:	461a      	mov	r2, r3
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e20c:	4b25      	ldr	r3, [pc, #148]	; (800e2a4 <ip4_output_if_src+0x154>)
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	3301      	adds	r3, #1
 800e212:	b29a      	uxth	r2, r3
 800e214:	4b23      	ldr	r3, [pc, #140]	; (800e2a4 <ip4_output_if_src+0x154>)
 800e216:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d104      	bne.n	800e228 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e21e:	4b22      	ldr	r3, [pc, #136]	; (800e2a8 <ip4_output_if_src+0x158>)
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	60da      	str	r2, [r3, #12]
 800e226:	e003      	b.n	800e230 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2200      	movs	r2, #0
 800e234:	729a      	strb	r2, [r3, #10]
 800e236:	2200      	movs	r2, #0
 800e238:	72da      	strb	r2, [r3, #11]
 800e23a:	e00f      	b.n	800e25c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	895b      	ldrh	r3, [r3, #10]
 800e240:	2b13      	cmp	r3, #19
 800e242:	d802      	bhi.n	800e24a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e244:	f06f 0301 	mvn.w	r3, #1
 800e248:	e020      	b.n	800e28c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e256:	f107 0314 	add.w	r3, r7, #20
 800e25a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	8c1b      	ldrh	r3, [r3, #32]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00c      	beq.n	800e27e <ip4_output_if_src+0x12e>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	891a      	ldrh	r2, [r3, #8]
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	8c1b      	ldrh	r3, [r3, #32]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d906      	bls.n	800e27e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 fd4b 	bl	800ed10 <ip4_frag>
 800e27a:	4603      	mov	r3, r0
 800e27c:	e006      	b.n	800e28c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e280:	695b      	ldr	r3, [r3, #20]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	68f9      	ldr	r1, [r7, #12]
 800e286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e288:	4798      	blx	r3
 800e28a:	4603      	mov	r3, r0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3720      	adds	r7, #32
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	080126b4 	.word	0x080126b4
 800e298:	080126e8 	.word	0x080126e8
 800e29c:	080126f4 	.word	0x080126f4
 800e2a0:	0801271c 	.word	0x0801271c
 800e2a4:	20000212 	.word	0x20000212
 800e2a8:	08012af0 	.word	0x08012af0

0800e2ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d002      	beq.n	800e2c8 <ip4_addr_isbroadcast_u32+0x1c>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e02a      	b.n	800e322 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e2d2:	f003 0302 	and.w	r3, r3, #2
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e021      	b.n	800e322 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d101      	bne.n	800e2ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e019      	b.n	800e322 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	405a      	eors	r2, r3
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4013      	ands	r3, r2
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10d      	bne.n	800e320 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	3308      	adds	r3, #8
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	43da      	mvns	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	3308      	adds	r3, #8
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e318:	429a      	cmp	r2, r3
 800e31a:	d101      	bne.n	800e320 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e31c:	2301      	movs	r3, #1
 800e31e:	e000      	b.n	800e322 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e320:	2300      	movs	r3, #0
  }
}
 800e322:	4618      	mov	r0, r3
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
	...

0800e330 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e33a:	4b12      	ldr	r3, [pc, #72]	; (800e384 <ip_reass_tmr+0x54>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e340:	e018      	b.n	800e374 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	7fdb      	ldrb	r3, [r3, #31]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00b      	beq.n	800e362 <ip_reass_tmr+0x32>
      r->timer--;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	7fdb      	ldrb	r3, [r3, #31]
 800e34e:	3b01      	subs	r3, #1
 800e350:	b2da      	uxtb	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	e008      	b.n	800e374 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f80a 	bl	800e388 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e3      	bne.n	800e342 <ip_reass_tmr+0x12>
    }
  }
}
 800e37a:	bf00      	nop
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20000214 	.word	0x20000214

0800e388 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d105      	bne.n	800e3aa <ip_reass_free_complete_datagram+0x22>
 800e39e:	4b45      	ldr	r3, [pc, #276]	; (800e4b4 <ip_reass_free_complete_datagram+0x12c>)
 800e3a0:	22ab      	movs	r2, #171	; 0xab
 800e3a2:	4945      	ldr	r1, [pc, #276]	; (800e4b8 <ip_reass_free_complete_datagram+0x130>)
 800e3a4:	4845      	ldr	r0, [pc, #276]	; (800e4bc <ip_reass_free_complete_datagram+0x134>)
 800e3a6:	f000 ff13 	bl	800f1d0 <iprintf>
  if (prev != NULL) {
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d005      	beq.n	800e3c6 <ip_reass_free_complete_datagram+0x3e>
 800e3ba:	4b3e      	ldr	r3, [pc, #248]	; (800e4b4 <ip_reass_free_complete_datagram+0x12c>)
 800e3bc:	22ad      	movs	r2, #173	; 0xad
 800e3be:	4940      	ldr	r1, [pc, #256]	; (800e4c0 <ip_reass_free_complete_datagram+0x138>)
 800e3c0:	483e      	ldr	r0, [pc, #248]	; (800e4bc <ip_reass_free_complete_datagram+0x134>)
 800e3c2:	f000 ff05 	bl	800f1d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	889b      	ldrh	r3, [r3, #4]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d12a      	bne.n	800e42e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	6858      	ldr	r0, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	2214      	movs	r2, #20
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	f000 feda 	bl	800f1aa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	69b8      	ldr	r0, [r7, #24]
 800e3fa:	f7ff fc49 	bl	800dc90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e3fe:	69b8      	ldr	r0, [r7, #24]
 800e400:	f7f8 fa92 	bl	8006928 <pbuf_clen>
 800e404:	4603      	mov	r3, r0
 800e406:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e408:	8bfa      	ldrh	r2, [r7, #30]
 800e40a:	8a7b      	ldrh	r3, [r7, #18]
 800e40c:	4413      	add	r3, r2
 800e40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e412:	db05      	blt.n	800e420 <ip_reass_free_complete_datagram+0x98>
 800e414:	4b27      	ldr	r3, [pc, #156]	; (800e4b4 <ip_reass_free_complete_datagram+0x12c>)
 800e416:	22bc      	movs	r2, #188	; 0xbc
 800e418:	492a      	ldr	r1, [pc, #168]	; (800e4c4 <ip_reass_free_complete_datagram+0x13c>)
 800e41a:	4828      	ldr	r0, [pc, #160]	; (800e4bc <ip_reass_free_complete_datagram+0x134>)
 800e41c:	f000 fed8 	bl	800f1d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e420:	8bfa      	ldrh	r2, [r7, #30]
 800e422:	8a7b      	ldrh	r3, [r7, #18]
 800e424:	4413      	add	r3, r2
 800e426:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e428:	69b8      	ldr	r0, [r7, #24]
 800e42a:	f7f8 f9f5 	bl	8006818 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e434:	e01f      	b.n	800e476 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f7f8 fa6e 	bl	8006928 <pbuf_clen>
 800e44c:	4603      	mov	r3, r0
 800e44e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e450:	8bfa      	ldrh	r2, [r7, #30]
 800e452:	8a7b      	ldrh	r3, [r7, #18]
 800e454:	4413      	add	r3, r2
 800e456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e45a:	db05      	blt.n	800e468 <ip_reass_free_complete_datagram+0xe0>
 800e45c:	4b15      	ldr	r3, [pc, #84]	; (800e4b4 <ip_reass_free_complete_datagram+0x12c>)
 800e45e:	22cc      	movs	r2, #204	; 0xcc
 800e460:	4918      	ldr	r1, [pc, #96]	; (800e4c4 <ip_reass_free_complete_datagram+0x13c>)
 800e462:	4816      	ldr	r0, [pc, #88]	; (800e4bc <ip_reass_free_complete_datagram+0x134>)
 800e464:	f000 feb4 	bl	800f1d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e468:	8bfa      	ldrh	r2, [r7, #30]
 800e46a:	8a7b      	ldrh	r3, [r7, #18]
 800e46c:	4413      	add	r3, r2
 800e46e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f7f8 f9d1 	bl	8006818 <pbuf_free>
  while (p != NULL) {
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1dc      	bne.n	800e436 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f8c2 	bl	800e608 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e484:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <ip_reass_free_complete_datagram+0x140>)
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	8bfa      	ldrh	r2, [r7, #30]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d905      	bls.n	800e49a <ip_reass_free_complete_datagram+0x112>
 800e48e:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <ip_reass_free_complete_datagram+0x12c>)
 800e490:	22d2      	movs	r2, #210	; 0xd2
 800e492:	490e      	ldr	r1, [pc, #56]	; (800e4cc <ip_reass_free_complete_datagram+0x144>)
 800e494:	4809      	ldr	r0, [pc, #36]	; (800e4bc <ip_reass_free_complete_datagram+0x134>)
 800e496:	f000 fe9b 	bl	800f1d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e49a:	4b0b      	ldr	r3, [pc, #44]	; (800e4c8 <ip_reass_free_complete_datagram+0x140>)
 800e49c:	881a      	ldrh	r2, [r3, #0]
 800e49e:	8bfb      	ldrh	r3, [r7, #30]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	4b08      	ldr	r3, [pc, #32]	; (800e4c8 <ip_reass_free_complete_datagram+0x140>)
 800e4a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e4a8:	8bfb      	ldrh	r3, [r7, #30]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3720      	adds	r7, #32
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	0801274c 	.word	0x0801274c
 800e4b8:	08012788 	.word	0x08012788
 800e4bc:	08012794 	.word	0x08012794
 800e4c0:	080127bc 	.word	0x080127bc
 800e4c4:	080127d0 	.word	0x080127d0
 800e4c8:	20000218 	.word	0x20000218
 800e4cc:	080127f0 	.word	0x080127f0

0800e4d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08a      	sub	sp, #40	; 0x28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e4ee:	4b28      	ldr	r3, [pc, #160]	; (800e590 <ip_reass_remove_oldest_datagram+0xc0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4f4:	e030      	b.n	800e558 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	695a      	ldr	r2, [r3, #20]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d10c      	bne.n	800e51c <ip_reass_remove_oldest_datagram+0x4c>
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	699a      	ldr	r2, [r3, #24]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	691b      	ldr	r3, [r3, #16]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d106      	bne.n	800e51c <ip_reass_remove_oldest_datagram+0x4c>
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	899a      	ldrh	r2, [r3, #12]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	889b      	ldrh	r3, [r3, #4]
 800e516:	b29b      	uxth	r3, r3
 800e518:	429a      	cmp	r2, r3
 800e51a:	d014      	beq.n	800e546 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	3301      	adds	r3, #1
 800e520:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d104      	bne.n	800e532 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	61bb      	str	r3, [r7, #24]
 800e530:	e009      	b.n	800e546 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	7fda      	ldrb	r2, [r3, #31]
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	7fdb      	ldrb	r3, [r3, #31]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d803      	bhi.n	800e546 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1cb      	bne.n	800e4f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d008      	beq.n	800e576 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e564:	69b9      	ldr	r1, [r7, #24]
 800e566:	6a38      	ldr	r0, [r7, #32]
 800e568:	f7ff ff0e 	bl	800e388 <ip_reass_free_complete_datagram>
 800e56c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4413      	add	r3, r2
 800e574:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	da02      	bge.n	800e584 <ip_reass_remove_oldest_datagram+0xb4>
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	2b01      	cmp	r3, #1
 800e582:	dcac      	bgt.n	800e4de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e584:	697b      	ldr	r3, [r7, #20]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3728      	adds	r7, #40	; 0x28
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20000214 	.word	0x20000214

0800e594 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e59e:	2004      	movs	r0, #4
 800e5a0:	f7f7 faf4 	bl	8005b8c <memp_malloc>
 800e5a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d110      	bne.n	800e5ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff ff8e 	bl	800e4d0 <ip_reass_remove_oldest_datagram>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	dc03      	bgt.n	800e5c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5bc:	2004      	movs	r0, #4
 800e5be:	f7f7 fae5 	bl	8005b8c <memp_malloc>
 800e5c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e016      	b.n	800e5fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e5ce:	2220      	movs	r2, #32
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f000 fdf4 	bl	800f1c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	220f      	movs	r2, #15
 800e5dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e5de:	4b09      	ldr	r3, [pc, #36]	; (800e604 <ip_reass_enqueue_new_datagram+0x70>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e5e6:	4a07      	ldr	r2, [pc, #28]	; (800e604 <ip_reass_enqueue_new_datagram+0x70>)
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	2214      	movs	r2, #20
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 fdd8 	bl	800f1aa <memcpy>
  return ipr;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20000214 	.word	0x20000214

0800e608 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e612:	4b10      	ldr	r3, [pc, #64]	; (800e654 <ip_reass_dequeue_datagram+0x4c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d104      	bne.n	800e626 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a0c      	ldr	r2, [pc, #48]	; (800e654 <ip_reass_dequeue_datagram+0x4c>)
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	e00d      	b.n	800e642 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <ip_reass_dequeue_datagram+0x32>
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <ip_reass_dequeue_datagram+0x50>)
 800e62e:	f240 1245 	movw	r2, #325	; 0x145
 800e632:	490a      	ldr	r1, [pc, #40]	; (800e65c <ip_reass_dequeue_datagram+0x54>)
 800e634:	480a      	ldr	r0, [pc, #40]	; (800e660 <ip_reass_dequeue_datagram+0x58>)
 800e636:	f000 fdcb 	bl	800f1d0 <iprintf>
    prev->next = ipr->next;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	2004      	movs	r0, #4
 800e646:	f7f7 faed 	bl	8005c24 <memp_free>
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000214 	.word	0x20000214
 800e658:	0801274c 	.word	0x0801274c
 800e65c:	08012814 	.word	0x08012814
 800e660:	08012794 	.word	0x08012794

0800e664 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	; 0x30
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e670:	2300      	movs	r3, #0
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e674:	2301      	movs	r3, #1
 800e676:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	885b      	ldrh	r3, [r3, #2]
 800e682:	b29b      	uxth	r3, r3
 800e684:	4618      	mov	r0, r3
 800e686:	f7f6 fe2c 	bl	80052e2 <lwip_htons>
 800e68a:	4603      	mov	r3, r0
 800e68c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	f003 030f 	and.w	r3, r3, #15
 800e696:	b2db      	uxtb	r3, r3
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e69c:	7e7b      	ldrb	r3, [r7, #25]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	8b7a      	ldrh	r2, [r7, #26]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d202      	bcs.n	800e6ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6aa:	e135      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e6ac:	7e7b      	ldrb	r3, [r7, #25]
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	8b7a      	ldrh	r2, [r7, #26]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	88db      	ldrh	r3, [r3, #6]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7f6 fe10 	bl	80052e2 <lwip_htons>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	00db      	lsls	r3, r3, #3
 800e6cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	701a      	strb	r2, [r3, #0]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	705a      	strb	r2, [r3, #1]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	709a      	strb	r2, [r3, #2]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	8afa      	ldrh	r2, [r7, #22]
 800e6ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e6ec:	8afa      	ldrh	r2, [r7, #22]
 800e6ee:	8b7b      	ldrh	r3, [r7, #26]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	88db      	ldrh	r3, [r3, #6]
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	8afa      	ldrh	r2, [r7, #22]
 800e700:	429a      	cmp	r2, r3
 800e702:	d902      	bls.n	800e70a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	e106      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
 800e710:	e068      	b.n	800e7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	889b      	ldrh	r3, [r3, #4]
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	889b      	ldrh	r3, [r3, #4]
 800e722:	b29b      	uxth	r3, r3
 800e724:	429a      	cmp	r2, r3
 800e726:	d235      	bcs.n	800e794 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e72c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	2b00      	cmp	r3, #0
 800e732:	d020      	beq.n	800e776 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	889b      	ldrh	r3, [r3, #4]
 800e738:	b29a      	uxth	r2, r3
 800e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73c:	88db      	ldrh	r3, [r3, #6]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	429a      	cmp	r2, r3
 800e742:	d307      	bcc.n	800e754 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	88db      	ldrh	r3, [r3, #6]
 800e748:	b29a      	uxth	r2, r3
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	889b      	ldrh	r3, [r3, #4]
 800e74e:	b29b      	uxth	r3, r3
 800e750:	429a      	cmp	r2, r3
 800e752:	d902      	bls.n	800e75a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e754:	f04f 33ff 	mov.w	r3, #4294967295
 800e758:	e0de      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	88db      	ldrh	r3, [r3, #6]
 800e764:	b29a      	uxth	r2, r3
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	889b      	ldrh	r3, [r3, #4]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d03d      	beq.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e774:	e03a      	b.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	88db      	ldrh	r3, [r3, #6]
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	889b      	ldrh	r3, [r3, #4]
 800e780:	b29b      	uxth	r3, r3
 800e782:	429a      	cmp	r2, r3
 800e784:	d902      	bls.n	800e78c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e0c5      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	605a      	str	r2, [r3, #4]
      break;
 800e792:	e02b      	b.n	800e7ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	889b      	ldrh	r3, [r3, #4]
 800e798:	b29a      	uxth	r2, r3
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	889b      	ldrh	r3, [r3, #4]
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d102      	bne.n	800e7aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	e0b6      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	889b      	ldrh	r3, [r3, #4]
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	88db      	ldrh	r3, [r3, #6]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d202      	bcs.n	800e7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e7be:	e0ab      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d009      	beq.n	800e7da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	88db      	ldrh	r3, [r3, #6]
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	889b      	ldrh	r3, [r3, #4]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d001      	beq.n	800e7da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d193      	bne.n	800e712 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e7ea:	e000      	b.n	800e7ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e7ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d12d      	bne.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d01c      	beq.n	800e834 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	88db      	ldrh	r3, [r3, #6]
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	889b      	ldrh	r3, [r3, #4]
 800e804:	b29b      	uxth	r3, r3
 800e806:	429a      	cmp	r2, r3
 800e808:	d906      	bls.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e80a:	4b45      	ldr	r3, [pc, #276]	; (800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e80c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e810:	4944      	ldr	r1, [pc, #272]	; (800e924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e812:	4845      	ldr	r0, [pc, #276]	; (800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e814:	f000 fcdc 	bl	800f1d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	b29a      	uxth	r2, r3
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	889b      	ldrh	r3, [r3, #4]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d010      	beq.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	623b      	str	r3, [r7, #32]
 800e832:	e00d      	b.n	800e850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d006      	beq.n	800e84a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e83c:	4b38      	ldr	r3, [pc, #224]	; (800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e83e:	f240 12bf 	movw	r2, #447	; 0x1bf
 800e842:	493a      	ldr	r1, [pc, #232]	; (800e92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e844:	4838      	ldr	r0, [pc, #224]	; (800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e846:	f000 fcc3 	bl	800f1d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d105      	bne.n	800e862 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	7f9b      	ldrb	r3, [r3, #30]
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d059      	beq.n	800e916 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d04f      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d006      	beq.n	800e87e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	889b      	ldrh	r3, [r3, #4]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d002      	beq.n	800e884 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	623b      	str	r3, [r7, #32]
 800e882:	e041      	b.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e88e:	e012      	b.n	800e8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	88db      	ldrh	r3, [r3, #6]
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	889b      	ldrh	r3, [r3, #4]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d002      	beq.n	800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	623b      	str	r3, [r7, #32]
            break;
 800e8aa:	e007      	b.n	800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e9      	bne.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d022      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e8ca:	4b15      	ldr	r3, [pc, #84]	; (800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8cc:	f240 12df 	movw	r2, #479	; 0x1df
 800e8d0:	4917      	ldr	r1, [pc, #92]	; (800e930 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8d2:	4815      	ldr	r0, [pc, #84]	; (800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8d4:	f000 fc7c 	bl	800f1d0 <iprintf>
          LWIP_ASSERT("sanity check",
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d106      	bne.n	800e8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e8e4:	4b0e      	ldr	r3, [pc, #56]	; (800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e8ea:	4911      	ldr	r1, [pc, #68]	; (800e930 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8ec:	480e      	ldr	r0, [pc, #56]	; (800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8ee:	f000 fc6f 	bl	800f1d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d006      	beq.n	800e908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e8fa:	4b09      	ldr	r3, [pc, #36]	; (800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8fc:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e900:	490c      	ldr	r1, [pc, #48]	; (800e934 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e902:	4809      	ldr	r0, [pc, #36]	; (800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e904:	f000 fc64 	bl	800f1d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bf14      	ite	ne
 800e90e:	2301      	movne	r3, #1
 800e910:	2300      	moveq	r3, #0
 800e912:	b2db      	uxtb	r3, r3
 800e914:	e000      	b.n	800e918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3730      	adds	r7, #48	; 0x30
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	0801274c 	.word	0x0801274c
 800e924:	08012830 	.word	0x08012830
 800e928:	08012794 	.word	0x08012794
 800e92c:	08012850 	.word	0x08012850
 800e930:	08012888 	.word	0x08012888
 800e934:	08012898 	.word	0x08012898

0800e938 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08e      	sub	sp, #56	; 0x38
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	f003 030f 	and.w	r3, r3, #15
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	b2db      	uxtb	r3, r3
 800e954:	2b14      	cmp	r3, #20
 800e956:	f040 8167 	bne.w	800ec28 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	88db      	ldrh	r3, [r3, #6]
 800e95e:	b29b      	uxth	r3, r3
 800e960:	4618      	mov	r0, r3
 800e962:	f7f6 fcbe 	bl	80052e2 <lwip_htons>
 800e966:	4603      	mov	r3, r0
 800e968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	885b      	ldrh	r3, [r3, #2]
 800e976:	b29b      	uxth	r3, r3
 800e978:	4618      	mov	r0, r3
 800e97a:	f7f6 fcb2 	bl	80052e2 <lwip_htons>
 800e97e:	4603      	mov	r3, r0
 800e980:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	f003 030f 	and.w	r3, r3, #15
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e996:	b29b      	uxth	r3, r3
 800e998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e99a:	429a      	cmp	r2, r3
 800e99c:	f0c0 8146 	bcc.w	800ec2c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e9a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7f7 ffbb 	bl	8006928 <pbuf_clen>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e9b6:	4ba3      	ldr	r3, [pc, #652]	; (800ec44 <ip4_reass+0x30c>)
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	8c3b      	ldrh	r3, [r7, #32]
 800e9be:	4413      	add	r3, r2
 800e9c0:	2b0a      	cmp	r3, #10
 800e9c2:	dd10      	ble.n	800e9e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9c4:	8c3b      	ldrh	r3, [r7, #32]
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ca:	f7ff fd81 	bl	800e4d0 <ip_reass_remove_oldest_datagram>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 812d 	beq.w	800ec30 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e9d6:	4b9b      	ldr	r3, [pc, #620]	; (800ec44 <ip4_reass+0x30c>)
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	8c3b      	ldrh	r3, [r7, #32]
 800e9de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9e0:	2b0a      	cmp	r3, #10
 800e9e2:	f300 8125 	bgt.w	800ec30 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e9e6:	4b98      	ldr	r3, [pc, #608]	; (800ec48 <ip4_reass+0x310>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e9ec:	e015      	b.n	800ea1a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	695a      	ldr	r2, [r3, #20]
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d10c      	bne.n	800ea14 <ip4_reass+0xdc>
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	699a      	ldr	r2, [r3, #24]
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d106      	bne.n	800ea14 <ip4_reass+0xdc>
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	899a      	ldrh	r2, [r3, #12]
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	889b      	ldrh	r3, [r3, #4]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d006      	beq.n	800ea22 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	633b      	str	r3, [r7, #48]	; 0x30
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e6      	bne.n	800e9ee <ip4_reass+0xb6>
 800ea20:	e000      	b.n	800ea24 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ea22:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d109      	bne.n	800ea3e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ea2a:	8c3b      	ldrh	r3, [r7, #32]
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea30:	f7ff fdb0 	bl	800e594 <ip_reass_enqueue_new_datagram>
 800ea34:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ea36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d11c      	bne.n	800ea76 <ip4_reass+0x13e>
      goto nullreturn;
 800ea3c:	e0f9      	b.n	800ec32 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	88db      	ldrh	r3, [r3, #6]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7f6 fc4c 	bl	80052e2 <lwip_htons>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d110      	bne.n	800ea76 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea56:	89db      	ldrh	r3, [r3, #14]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f6 fc42 	bl	80052e2 <lwip_htons>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d006      	beq.n	800ea76 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	2214      	movs	r2, #20
 800ea6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fb9a 	bl	800f1aa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	88db      	ldrh	r3, [r3, #6]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	f003 0320 	and.w	r3, r3, #32
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf0c      	ite	eq
 800ea84:	2301      	moveq	r3, #1
 800ea86:	2300      	movne	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00e      	beq.n	800eab0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea96:	4413      	add	r3, r2
 800ea98:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea9a:	8b7a      	ldrh	r2, [r7, #26]
 800ea9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	f0c0 80a0 	bcc.w	800ebe4 <ip4_reass+0x2ac>
 800eaa4:	8b7b      	ldrh	r3, [r7, #26]
 800eaa6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	f200 809a 	bhi.w	800ebe4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eab6:	f7ff fdd5 	bl	800e664 <ip_reass_chain_frag_into_datagram_and_validate>
 800eaba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	f000 8091 	beq.w	800ebe8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eac6:	4b5f      	ldr	r3, [pc, #380]	; (800ec44 <ip4_reass+0x30c>)
 800eac8:	881a      	ldrh	r2, [r3, #0]
 800eaca:	8c3b      	ldrh	r3, [r7, #32]
 800eacc:	4413      	add	r3, r2
 800eace:	b29a      	uxth	r2, r3
 800ead0:	4b5c      	ldr	r3, [pc, #368]	; (800ec44 <ip4_reass+0x30c>)
 800ead2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00d      	beq.n	800eaf6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800eada:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eadc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eade:	4413      	add	r3, r2
 800eae0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	8a7a      	ldrh	r2, [r7, #18]
 800eae6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	7f9b      	ldrb	r3, [r3, #30]
 800eaec:	f043 0301 	orr.w	r3, r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d171      	bne.n	800ebe0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	8b9b      	ldrh	r3, [r3, #28]
 800eb00:	3314      	adds	r3, #20
 800eb02:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	3308      	adds	r3, #8
 800eb1a:	2214      	movs	r2, #20
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb20:	f000 fb43 	bl	800f1aa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eb24:	8a3b      	ldrh	r3, [r7, #16]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f6 fbdb 	bl	80052e2 <lwip_htons>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	461a      	mov	r2, r3
 800eb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb36:	2200      	movs	r2, #0
 800eb38:	719a      	strb	r2, [r3, #6]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	2200      	movs	r2, #0
 800eb42:	729a      	strb	r2, [r3, #10]
 800eb44:	2200      	movs	r2, #0
 800eb46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eb4e:	e00d      	b.n	800eb6c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eb56:	2114      	movs	r1, #20
 800eb58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb5a:	f7f7 fdd7 	bl	800670c <pbuf_remove_header>
      pbuf_cat(p, r);
 800eb5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7f7 ff1b 	bl	800699c <pbuf_cat>
      r = iprh->next_pbuf;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1ee      	bne.n	800eb50 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb72:	4b35      	ldr	r3, [pc, #212]	; (800ec48 <ip4_reass+0x310>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d102      	bne.n	800eb82 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb80:	e010      	b.n	800eba4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb82:	4b31      	ldr	r3, [pc, #196]	; (800ec48 <ip4_reass+0x310>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb88:	e007      	b.n	800eb9a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d006      	beq.n	800eba2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1f4      	bne.n	800eb8a <ip4_reass+0x252>
 800eba0:	e000      	b.n	800eba4 <ip4_reass+0x26c>
          break;
 800eba2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eba8:	f7ff fd2e 	bl	800e608 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7f7 febb 	bl	8006928 <pbuf_clen>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ebb6:	4b23      	ldr	r3, [pc, #140]	; (800ec44 <ip4_reass+0x30c>)
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	8c3a      	ldrh	r2, [r7, #32]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d906      	bls.n	800ebce <ip4_reass+0x296>
 800ebc0:	4b22      	ldr	r3, [pc, #136]	; (800ec4c <ip4_reass+0x314>)
 800ebc2:	f240 229b 	movw	r2, #667	; 0x29b
 800ebc6:	4922      	ldr	r1, [pc, #136]	; (800ec50 <ip4_reass+0x318>)
 800ebc8:	4822      	ldr	r0, [pc, #136]	; (800ec54 <ip4_reass+0x31c>)
 800ebca:	f000 fb01 	bl	800f1d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ebce:	4b1d      	ldr	r3, [pc, #116]	; (800ec44 <ip4_reass+0x30c>)
 800ebd0:	881a      	ldrh	r2, [r3, #0]
 800ebd2:	8c3b      	ldrh	r3, [r7, #32]
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	4b1a      	ldr	r3, [pc, #104]	; (800ec44 <ip4_reass+0x30c>)
 800ebda:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	e02c      	b.n	800ec3a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	e02a      	b.n	800ec3a <ip4_reass+0x302>

nullreturn_ipr:
 800ebe4:	bf00      	nop
 800ebe6:	e000      	b.n	800ebea <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800ebe8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d106      	bne.n	800ebfe <ip4_reass+0x2c6>
 800ebf0:	4b16      	ldr	r3, [pc, #88]	; (800ec4c <ip4_reass+0x314>)
 800ebf2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ebf6:	4918      	ldr	r1, [pc, #96]	; (800ec58 <ip4_reass+0x320>)
 800ebf8:	4816      	ldr	r0, [pc, #88]	; (800ec54 <ip4_reass+0x31c>)
 800ebfa:	f000 fae9 	bl	800f1d0 <iprintf>
  if (ipr->p == NULL) {
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d114      	bne.n	800ec30 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ec06:	4b10      	ldr	r3, [pc, #64]	; (800ec48 <ip4_reass+0x310>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d006      	beq.n	800ec1e <ip4_reass+0x2e6>
 800ec10:	4b0e      	ldr	r3, [pc, #56]	; (800ec4c <ip4_reass+0x314>)
 800ec12:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ec16:	4911      	ldr	r1, [pc, #68]	; (800ec5c <ip4_reass+0x324>)
 800ec18:	480e      	ldr	r0, [pc, #56]	; (800ec54 <ip4_reass+0x31c>)
 800ec1a:	f000 fad9 	bl	800f1d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ec1e:	2100      	movs	r1, #0
 800ec20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec22:	f7ff fcf1 	bl	800e608 <ip_reass_dequeue_datagram>
 800ec26:	e004      	b.n	800ec32 <ip4_reass+0x2fa>
    goto nullreturn;
 800ec28:	bf00      	nop
 800ec2a:	e002      	b.n	800ec32 <ip4_reass+0x2fa>
    goto nullreturn;
 800ec2c:	bf00      	nop
 800ec2e:	e000      	b.n	800ec32 <ip4_reass+0x2fa>
  }

nullreturn:
 800ec30:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7f7 fdf0 	bl	8006818 <pbuf_free>
  return NULL;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3738      	adds	r7, #56	; 0x38
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	20000218 	.word	0x20000218
 800ec48:	20000214 	.word	0x20000214
 800ec4c:	0801274c 	.word	0x0801274c
 800ec50:	080128bc 	.word	0x080128bc
 800ec54:	08012794 	.word	0x08012794
 800ec58:	080128d8 	.word	0x080128d8
 800ec5c:	080128e4 	.word	0x080128e4

0800ec60 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec64:	2005      	movs	r0, #5
 800ec66:	f7f6 ff91 	bl	8005b8c <memp_malloc>
 800ec6a:	4603      	mov	r3, r0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d106      	bne.n	800ec8c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec7e:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec80:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec84:	4906      	ldr	r1, [pc, #24]	; (800eca0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec86:	4807      	ldr	r0, [pc, #28]	; (800eca4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec88:	f000 faa2 	bl	800f1d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec8c:	6879      	ldr	r1, [r7, #4]
 800ec8e:	2005      	movs	r0, #5
 800ec90:	f7f6 ffc8 	bl	8005c24 <memp_free>
}
 800ec94:	bf00      	nop
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801274c 	.word	0x0801274c
 800eca0:	08012904 	.word	0x08012904
 800eca4:	08012794 	.word	0x08012794

0800eca8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d106      	bne.n	800ecc8 <ipfrag_free_pbuf_custom+0x20>
 800ecba:	4b11      	ldr	r3, [pc, #68]	; (800ed00 <ipfrag_free_pbuf_custom+0x58>)
 800ecbc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ecc0:	4910      	ldr	r1, [pc, #64]	; (800ed04 <ipfrag_free_pbuf_custom+0x5c>)
 800ecc2:	4811      	ldr	r0, [pc, #68]	; (800ed08 <ipfrag_free_pbuf_custom+0x60>)
 800ecc4:	f000 fa84 	bl	800f1d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d006      	beq.n	800ecde <ipfrag_free_pbuf_custom+0x36>
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <ipfrag_free_pbuf_custom+0x58>)
 800ecd2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ecd6:	490d      	ldr	r1, [pc, #52]	; (800ed0c <ipfrag_free_pbuf_custom+0x64>)
 800ecd8:	480b      	ldr	r0, [pc, #44]	; (800ed08 <ipfrag_free_pbuf_custom+0x60>)
 800ecda:	f000 fa79 	bl	800f1d0 <iprintf>
  if (pcr->original != NULL) {
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d004      	beq.n	800ecf0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	695b      	ldr	r3, [r3, #20]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7f7 fd94 	bl	8006818 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f7ff ffbd 	bl	800ec70 <ip_frag_free_pbuf_custom_ref>
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	0801274c 	.word	0x0801274c
 800ed04:	08012910 	.word	0x08012910
 800ed08:	08012794 	.word	0x08012794
 800ed0c:	0801291c 	.word	0x0801291c

0800ed10 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b094      	sub	sp, #80	; 0x50
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	8c1b      	ldrh	r3, [r3, #32]
 800ed26:	3b14      	subs	r3, #20
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da00      	bge.n	800ed2e <ip4_frag+0x1e>
 800ed2c:	3307      	adds	r3, #7
 800ed2e:	10db      	asrs	r3, r3, #3
 800ed30:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ed32:	2314      	movs	r3, #20
 800ed34:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 030f 	and.w	r3, r3, #15
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b14      	cmp	r3, #20
 800ed50:	d002      	beq.n	800ed58 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed52:	f06f 0305 	mvn.w	r3, #5
 800ed56:	e10f      	b.n	800ef78 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	2b13      	cmp	r3, #19
 800ed5e:	d809      	bhi.n	800ed74 <ip4_frag+0x64>
 800ed60:	4b87      	ldr	r3, [pc, #540]	; (800ef80 <ip4_frag+0x270>)
 800ed62:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed66:	4987      	ldr	r1, [pc, #540]	; (800ef84 <ip4_frag+0x274>)
 800ed68:	4887      	ldr	r0, [pc, #540]	; (800ef88 <ip4_frag+0x278>)
 800ed6a:	f000 fa31 	bl	800f1d0 <iprintf>
 800ed6e:	f06f 0305 	mvn.w	r3, #5
 800ed72:	e101      	b.n	800ef78 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	88db      	ldrh	r3, [r3, #6]
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f6 fab1 	bl	80052e2 <lwip_htons>
 800ed80:	4603      	mov	r3, r0
 800ed82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed94:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	891b      	ldrh	r3, [r3, #8]
 800ed9a:	3b14      	subs	r3, #20
 800ed9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800eda0:	e0e0      	b.n	800ef64 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800eda2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eda4:	00db      	lsls	r3, r3, #3
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edac:	4293      	cmp	r3, r2
 800edae:	bf28      	it	cs
 800edb0:	4613      	movcs	r3, r2
 800edb2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800edb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edb8:	2114      	movs	r1, #20
 800edba:	200e      	movs	r0, #14
 800edbc:	f7f7 fa4c 	bl	8006258 <pbuf_alloc>
 800edc0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 80d4 	beq.w	800ef72 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	895b      	ldrh	r3, [r3, #10]
 800edce:	2b13      	cmp	r3, #19
 800edd0:	d806      	bhi.n	800ede0 <ip4_frag+0xd0>
 800edd2:	4b6b      	ldr	r3, [pc, #428]	; (800ef80 <ip4_frag+0x270>)
 800edd4:	f240 3225 	movw	r2, #805	; 0x325
 800edd8:	496c      	ldr	r1, [pc, #432]	; (800ef8c <ip4_frag+0x27c>)
 800edda:	486b      	ldr	r0, [pc, #428]	; (800ef88 <ip4_frag+0x278>)
 800eddc:	f000 f9f8 	bl	800f1d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	2214      	movs	r2, #20
 800ede6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 f9de 	bl	800f1aa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800edf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800edf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800edfa:	e064      	b.n	800eec6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	895a      	ldrh	r2, [r3, #10]
 800ee00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	895b      	ldrh	r3, [r3, #10]
 800ee0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d906      	bls.n	800ee1e <ip4_frag+0x10e>
 800ee10:	4b5b      	ldr	r3, [pc, #364]	; (800ef80 <ip4_frag+0x270>)
 800ee12:	f240 322d 	movw	r2, #813	; 0x32d
 800ee16:	495e      	ldr	r1, [pc, #376]	; (800ef90 <ip4_frag+0x280>)
 800ee18:	485b      	ldr	r0, [pc, #364]	; (800ef88 <ip4_frag+0x278>)
 800ee1a:	f000 f9d9 	bl	800f1d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ee1e:	8bfa      	ldrh	r2, [r7, #30]
 800ee20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee24:	4293      	cmp	r3, r2
 800ee26:	bf28      	it	cs
 800ee28:	4613      	movcs	r3, r2
 800ee2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ee2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d105      	bne.n	800ee42 <ip4_frag+0x132>
        poff = 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60fb      	str	r3, [r7, #12]
        continue;
 800ee40:	e041      	b.n	800eec6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ee42:	f7ff ff0d 	bl	800ec60 <ip_frag_alloc_pbuf_custom_ref>
 800ee46:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d103      	bne.n	800ee56 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ee4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee50:	f7f7 fce2 	bl	8006818 <pbuf_free>
        goto memerr;
 800ee54:	e08e      	b.n	800ef74 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee56:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee5e:	4413      	add	r3, r2
 800ee60:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee68:	9201      	str	r2, [sp, #4]
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2241      	movs	r2, #65	; 0x41
 800ee70:	2000      	movs	r0, #0
 800ee72:	f7f7 fb17 	bl	80064a4 <pbuf_alloced_custom>
 800ee76:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee7e:	69b8      	ldr	r0, [r7, #24]
 800ee80:	f7ff fef6 	bl	800ec70 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee86:	f7f7 fcc7 	bl	8006818 <pbuf_free>
        goto memerr;
 800ee8a:	e073      	b.n	800ef74 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7f7 fd63 	bl	8006958 <pbuf_ref>
      pcr->original = p;
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	4a3e      	ldr	r2, [pc, #248]	; (800ef94 <ip4_frag+0x284>)
 800ee9c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee9e:	6979      	ldr	r1, [r7, #20]
 800eea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea2:	f7f7 fd7b 	bl	800699c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800eea6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800eeaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800eeb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d004      	beq.n	800eec6 <ip4_frag+0x1b6>
        poff = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800eec6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d196      	bne.n	800edfc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800eece:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eed0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eed4:	4413      	add	r3, r2
 800eed6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800eed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	8c1b      	ldrh	r3, [r3, #32]
 800eee0:	3b14      	subs	r3, #20
 800eee2:	429a      	cmp	r2, r3
 800eee4:	bfd4      	ite	le
 800eee6:	2301      	movle	r3, #1
 800eee8:	2300      	movgt	r3, #0
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eeee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eef6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <ip4_frag+0x1f4>
 800eefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d003      	beq.n	800ef0c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ef04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ef0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ef0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f6 f9e7 	bl	80052e2 <lwip_htons>
 800ef14:	4603      	mov	r3, r0
 800ef16:	461a      	mov	r2, r3
 800ef18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ef1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef1e:	3314      	adds	r3, #20
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f6 f9dd 	bl	80052e2 <lwip_htons>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	2200      	movs	r2, #0
 800ef34:	729a      	strb	r2, [r3, #10]
 800ef36:	2200      	movs	r2, #0
 800ef38:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	695b      	ldr	r3, [r3, #20]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef42:	68b8      	ldr	r0, [r7, #8]
 800ef44:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ef46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef48:	f7f7 fc66 	bl	8006818 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ef4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ef5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef5e:	4413      	add	r3, r2
 800ef60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f47f af1a 	bne.w	800eda2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e002      	b.n	800ef78 <ip4_frag+0x268>
      goto memerr;
 800ef72:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef74:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3748      	adds	r7, #72	; 0x48
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	0801274c 	.word	0x0801274c
 800ef84:	08012928 	.word	0x08012928
 800ef88:	08012794 	.word	0x08012794
 800ef8c:	08012944 	.word	0x08012944
 800ef90:	08012964 	.word	0x08012964
 800ef94:	0800eca9 	.word	0x0800eca9

0800ef98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b086      	sub	sp, #24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800efa2:	230e      	movs	r3, #14
 800efa4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	895b      	ldrh	r3, [r3, #10]
 800efaa:	2b0e      	cmp	r3, #14
 800efac:	d96e      	bls.n	800f08c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	7bdb      	ldrb	r3, [r3, #15]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d106      	bne.n	800efc4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800efbc:	3301      	adds	r3, #1
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	7b1a      	ldrb	r2, [r3, #12]
 800efce:	7b5b      	ldrb	r3, [r3, #13]
 800efd0:	021b      	lsls	r3, r3, #8
 800efd2:	4313      	orrs	r3, r2
 800efd4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d023      	beq.n	800f02a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d10f      	bne.n	800f00a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	785b      	ldrb	r3, [r3, #1]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11b      	bne.n	800f02a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eff6:	2b5e      	cmp	r3, #94	; 0x5e
 800eff8:	d117      	bne.n	800f02a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7b5b      	ldrb	r3, [r3, #13]
 800effe:	f043 0310 	orr.w	r3, r3, #16
 800f002:	b2da      	uxtb	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	735a      	strb	r2, [r3, #13]
 800f008:	e00f      	b.n	800f02a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	2206      	movs	r2, #6
 800f00e:	4928      	ldr	r1, [pc, #160]	; (800f0b0 <ethernet_input+0x118>)
 800f010:	4618      	mov	r0, r3
 800f012:	f000 f8bb 	bl	800f18c <memcmp>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d106      	bne.n	800f02a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	7b5b      	ldrb	r3, [r3, #13]
 800f020:	f043 0308 	orr.w	r3, r3, #8
 800f024:	b2da      	uxtb	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f02a:	89fb      	ldrh	r3, [r7, #14]
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d003      	beq.n	800f038 <ethernet_input+0xa0>
 800f030:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f034:	d014      	beq.n	800f060 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f036:	e032      	b.n	800f09e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f03e:	f003 0308 	and.w	r3, r3, #8
 800f042:	2b00      	cmp	r3, #0
 800f044:	d024      	beq.n	800f090 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f046:	8afb      	ldrh	r3, [r7, #22]
 800f048:	4619      	mov	r1, r3
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7f7 fb5e 	bl	800670c <pbuf_remove_header>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d11e      	bne.n	800f094 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7fe ff2d 	bl	800deb8 <ip4_input>
      break;
 800f05e:	e013      	b.n	800f088 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f066:	f003 0308 	and.w	r3, r3, #8
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d014      	beq.n	800f098 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f06e:	8afb      	ldrh	r3, [r7, #22]
 800f070:	4619      	mov	r1, r3
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7f7 fb4a 	bl	800670c <pbuf_remove_header>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10e      	bne.n	800f09c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7fe f8cd 	bl	800d220 <etharp_input>
      break;
 800f086:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f088:	2300      	movs	r3, #0
 800f08a:	e00c      	b.n	800f0a6 <ethernet_input+0x10e>
    goto free_and_return;
 800f08c:	bf00      	nop
 800f08e:	e006      	b.n	800f09e <ethernet_input+0x106>
        goto free_and_return;
 800f090:	bf00      	nop
 800f092:	e004      	b.n	800f09e <ethernet_input+0x106>
        goto free_and_return;
 800f094:	bf00      	nop
 800f096:	e002      	b.n	800f09e <ethernet_input+0x106>
        goto free_and_return;
 800f098:	bf00      	nop
 800f09a:	e000      	b.n	800f09e <ethernet_input+0x106>
        goto free_and_return;
 800f09c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7f7 fbba 	bl	8006818 <pbuf_free>
  return ERR_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	08012af4 	.word	0x08012af4

0800f0b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	60b9      	str	r1, [r7, #8]
 800f0be:	607a      	str	r2, [r7, #4]
 800f0c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f0c2:	8c3b      	ldrh	r3, [r7, #32]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f6 f90c 	bl	80052e2 <lwip_htons>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f0ce:	210e      	movs	r1, #14
 800f0d0:	68b8      	ldr	r0, [r7, #8]
 800f0d2:	f7f7 fb0b 	bl	80066ec <pbuf_add_header>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d125      	bne.n	800f128 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	8afa      	ldrh	r2, [r7, #22]
 800f0e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	2206      	movs	r2, #6
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 f85b 	bl	800f1aa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	3306      	adds	r3, #6
 800f0f8:	2206      	movs	r2, #6
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f854 	bl	800f1aa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f108:	2b06      	cmp	r3, #6
 800f10a:	d006      	beq.n	800f11a <ethernet_output+0x66>
 800f10c:	4b0a      	ldr	r3, [pc, #40]	; (800f138 <ethernet_output+0x84>)
 800f10e:	f240 1233 	movw	r2, #307	; 0x133
 800f112:	490a      	ldr	r1, [pc, #40]	; (800f13c <ethernet_output+0x88>)
 800f114:	480a      	ldr	r0, [pc, #40]	; (800f140 <ethernet_output+0x8c>)
 800f116:	f000 f85b 	bl	800f1d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	699b      	ldr	r3, [r3, #24]
 800f11e:	68b9      	ldr	r1, [r7, #8]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	4798      	blx	r3
 800f124:	4603      	mov	r3, r0
 800f126:	e002      	b.n	800f12e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f128:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f12a:	f06f 0301 	mvn.w	r3, #1
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	08012974 	.word	0x08012974
 800f13c:	080129ac 	.word	0x080129ac
 800f140:	080129e0 	.word	0x080129e0

0800f144 <__libc_init_array>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	4e0d      	ldr	r6, [pc, #52]	; (800f17c <__libc_init_array+0x38>)
 800f148:	4c0d      	ldr	r4, [pc, #52]	; (800f180 <__libc_init_array+0x3c>)
 800f14a:	1ba4      	subs	r4, r4, r6
 800f14c:	10a4      	asrs	r4, r4, #2
 800f14e:	2500      	movs	r5, #0
 800f150:	42a5      	cmp	r5, r4
 800f152:	d109      	bne.n	800f168 <__libc_init_array+0x24>
 800f154:	4e0b      	ldr	r6, [pc, #44]	; (800f184 <__libc_init_array+0x40>)
 800f156:	4c0c      	ldr	r4, [pc, #48]	; (800f188 <__libc_init_array+0x44>)
 800f158:	f000 ff5a 	bl	8010010 <_init>
 800f15c:	1ba4      	subs	r4, r4, r6
 800f15e:	10a4      	asrs	r4, r4, #2
 800f160:	2500      	movs	r5, #0
 800f162:	42a5      	cmp	r5, r4
 800f164:	d105      	bne.n	800f172 <__libc_init_array+0x2e>
 800f166:	bd70      	pop	{r4, r5, r6, pc}
 800f168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f16c:	4798      	blx	r3
 800f16e:	3501      	adds	r5, #1
 800f170:	e7ee      	b.n	800f150 <__libc_init_array+0xc>
 800f172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f176:	4798      	blx	r3
 800f178:	3501      	adds	r5, #1
 800f17a:	e7f2      	b.n	800f162 <__libc_init_array+0x1e>
 800f17c:	08012ba4 	.word	0x08012ba4
 800f180:	08012ba4 	.word	0x08012ba4
 800f184:	08012ba4 	.word	0x08012ba4
 800f188:	08012ba8 	.word	0x08012ba8

0800f18c <memcmp>:
 800f18c:	b530      	push	{r4, r5, lr}
 800f18e:	2400      	movs	r4, #0
 800f190:	42a2      	cmp	r2, r4
 800f192:	d101      	bne.n	800f198 <memcmp+0xc>
 800f194:	2000      	movs	r0, #0
 800f196:	e007      	b.n	800f1a8 <memcmp+0x1c>
 800f198:	5d03      	ldrb	r3, [r0, r4]
 800f19a:	3401      	adds	r4, #1
 800f19c:	190d      	adds	r5, r1, r4
 800f19e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f1a2:	42ab      	cmp	r3, r5
 800f1a4:	d0f4      	beq.n	800f190 <memcmp+0x4>
 800f1a6:	1b58      	subs	r0, r3, r5
 800f1a8:	bd30      	pop	{r4, r5, pc}

0800f1aa <memcpy>:
 800f1aa:	b510      	push	{r4, lr}
 800f1ac:	1e43      	subs	r3, r0, #1
 800f1ae:	440a      	add	r2, r1
 800f1b0:	4291      	cmp	r1, r2
 800f1b2:	d100      	bne.n	800f1b6 <memcpy+0xc>
 800f1b4:	bd10      	pop	{r4, pc}
 800f1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1be:	e7f7      	b.n	800f1b0 <memcpy+0x6>

0800f1c0 <memset>:
 800f1c0:	4402      	add	r2, r0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d100      	bne.n	800f1ca <memset+0xa>
 800f1c8:	4770      	bx	lr
 800f1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f1ce:	e7f9      	b.n	800f1c4 <memset+0x4>

0800f1d0 <iprintf>:
 800f1d0:	b40f      	push	{r0, r1, r2, r3}
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <iprintf+0x2c>)
 800f1d4:	b513      	push	{r0, r1, r4, lr}
 800f1d6:	681c      	ldr	r4, [r3, #0]
 800f1d8:	b124      	cbz	r4, 800f1e4 <iprintf+0x14>
 800f1da:	69a3      	ldr	r3, [r4, #24]
 800f1dc:	b913      	cbnz	r3, 800f1e4 <iprintf+0x14>
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 f882 	bl	800f2e8 <__sinit>
 800f1e4:	ab05      	add	r3, sp, #20
 800f1e6:	9a04      	ldr	r2, [sp, #16]
 800f1e8:	68a1      	ldr	r1, [r4, #8]
 800f1ea:	9301      	str	r3, [sp, #4]
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 f9df 	bl	800f5b0 <_vfiprintf_r>
 800f1f2:	b002      	add	sp, #8
 800f1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1f8:	b004      	add	sp, #16
 800f1fa:	4770      	bx	lr
 800f1fc:	20000028 	.word	0x20000028

0800f200 <rand>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4b13      	ldr	r3, [pc, #76]	; (800f250 <rand+0x50>)
 800f204:	681c      	ldr	r4, [r3, #0]
 800f206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f208:	b97b      	cbnz	r3, 800f22a <rand+0x2a>
 800f20a:	2018      	movs	r0, #24
 800f20c:	f000 f8f6 	bl	800f3fc <malloc>
 800f210:	4a10      	ldr	r2, [pc, #64]	; (800f254 <rand+0x54>)
 800f212:	4b11      	ldr	r3, [pc, #68]	; (800f258 <rand+0x58>)
 800f214:	63a0      	str	r0, [r4, #56]	; 0x38
 800f216:	e9c0 2300 	strd	r2, r3, [r0]
 800f21a:	4b10      	ldr	r3, [pc, #64]	; (800f25c <rand+0x5c>)
 800f21c:	6083      	str	r3, [r0, #8]
 800f21e:	230b      	movs	r3, #11
 800f220:	8183      	strh	r3, [r0, #12]
 800f222:	2201      	movs	r2, #1
 800f224:	2300      	movs	r3, #0
 800f226:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f22a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f22c:	480c      	ldr	r0, [pc, #48]	; (800f260 <rand+0x60>)
 800f22e:	690a      	ldr	r2, [r1, #16]
 800f230:	694b      	ldr	r3, [r1, #20]
 800f232:	4c0c      	ldr	r4, [pc, #48]	; (800f264 <rand+0x64>)
 800f234:	4350      	muls	r0, r2
 800f236:	fb04 0003 	mla	r0, r4, r3, r0
 800f23a:	fba2 2304 	umull	r2, r3, r2, r4
 800f23e:	4403      	add	r3, r0
 800f240:	1c54      	adds	r4, r2, #1
 800f242:	f143 0500 	adc.w	r5, r3, #0
 800f246:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f24a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	20000028 	.word	0x20000028
 800f254:	abcd330e 	.word	0xabcd330e
 800f258:	e66d1234 	.word	0xe66d1234
 800f25c:	0005deec 	.word	0x0005deec
 800f260:	5851f42d 	.word	0x5851f42d
 800f264:	4c957f2d 	.word	0x4c957f2d

0800f268 <std>:
 800f268:	2300      	movs	r3, #0
 800f26a:	b510      	push	{r4, lr}
 800f26c:	4604      	mov	r4, r0
 800f26e:	e9c0 3300 	strd	r3, r3, [r0]
 800f272:	6083      	str	r3, [r0, #8]
 800f274:	8181      	strh	r1, [r0, #12]
 800f276:	6643      	str	r3, [r0, #100]	; 0x64
 800f278:	81c2      	strh	r2, [r0, #14]
 800f27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f27e:	6183      	str	r3, [r0, #24]
 800f280:	4619      	mov	r1, r3
 800f282:	2208      	movs	r2, #8
 800f284:	305c      	adds	r0, #92	; 0x5c
 800f286:	f7ff ff9b 	bl	800f1c0 <memset>
 800f28a:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <std+0x38>)
 800f28c:	6263      	str	r3, [r4, #36]	; 0x24
 800f28e:	4b05      	ldr	r3, [pc, #20]	; (800f2a4 <std+0x3c>)
 800f290:	62a3      	str	r3, [r4, #40]	; 0x28
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <std+0x40>)
 800f294:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f296:	4b05      	ldr	r3, [pc, #20]	; (800f2ac <std+0x44>)
 800f298:	6224      	str	r4, [r4, #32]
 800f29a:	6323      	str	r3, [r4, #48]	; 0x30
 800f29c:	bd10      	pop	{r4, pc}
 800f29e:	bf00      	nop
 800f2a0:	0800fb0d 	.word	0x0800fb0d
 800f2a4:	0800fb2f 	.word	0x0800fb2f
 800f2a8:	0800fb67 	.word	0x0800fb67
 800f2ac:	0800fb8b 	.word	0x0800fb8b

0800f2b0 <_cleanup_r>:
 800f2b0:	4901      	ldr	r1, [pc, #4]	; (800f2b8 <_cleanup_r+0x8>)
 800f2b2:	f000 b885 	b.w	800f3c0 <_fwalk_reent>
 800f2b6:	bf00      	nop
 800f2b8:	0800fe65 	.word	0x0800fe65

0800f2bc <__sfmoreglue>:
 800f2bc:	b570      	push	{r4, r5, r6, lr}
 800f2be:	1e4a      	subs	r2, r1, #1
 800f2c0:	2568      	movs	r5, #104	; 0x68
 800f2c2:	4355      	muls	r5, r2
 800f2c4:	460e      	mov	r6, r1
 800f2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f2ca:	f000 f8ed 	bl	800f4a8 <_malloc_r>
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	b140      	cbz	r0, 800f2e4 <__sfmoreglue+0x28>
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800f2d8:	300c      	adds	r0, #12
 800f2da:	60a0      	str	r0, [r4, #8]
 800f2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f2e0:	f7ff ff6e 	bl	800f1c0 <memset>
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	bd70      	pop	{r4, r5, r6, pc}

0800f2e8 <__sinit>:
 800f2e8:	6983      	ldr	r3, [r0, #24]
 800f2ea:	b510      	push	{r4, lr}
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	bb33      	cbnz	r3, 800f33e <__sinit+0x56>
 800f2f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f2f4:	6503      	str	r3, [r0, #80]	; 0x50
 800f2f6:	4b12      	ldr	r3, [pc, #72]	; (800f340 <__sinit+0x58>)
 800f2f8:	4a12      	ldr	r2, [pc, #72]	; (800f344 <__sinit+0x5c>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6282      	str	r2, [r0, #40]	; 0x28
 800f2fe:	4298      	cmp	r0, r3
 800f300:	bf04      	itt	eq
 800f302:	2301      	moveq	r3, #1
 800f304:	6183      	streq	r3, [r0, #24]
 800f306:	f000 f81f 	bl	800f348 <__sfp>
 800f30a:	6060      	str	r0, [r4, #4]
 800f30c:	4620      	mov	r0, r4
 800f30e:	f000 f81b 	bl	800f348 <__sfp>
 800f312:	60a0      	str	r0, [r4, #8]
 800f314:	4620      	mov	r0, r4
 800f316:	f000 f817 	bl	800f348 <__sfp>
 800f31a:	2200      	movs	r2, #0
 800f31c:	60e0      	str	r0, [r4, #12]
 800f31e:	2104      	movs	r1, #4
 800f320:	6860      	ldr	r0, [r4, #4]
 800f322:	f7ff ffa1 	bl	800f268 <std>
 800f326:	2201      	movs	r2, #1
 800f328:	2109      	movs	r1, #9
 800f32a:	68a0      	ldr	r0, [r4, #8]
 800f32c:	f7ff ff9c 	bl	800f268 <std>
 800f330:	2202      	movs	r2, #2
 800f332:	2112      	movs	r1, #18
 800f334:	68e0      	ldr	r0, [r4, #12]
 800f336:	f7ff ff97 	bl	800f268 <std>
 800f33a:	2301      	movs	r3, #1
 800f33c:	61a3      	str	r3, [r4, #24]
 800f33e:	bd10      	pop	{r4, pc}
 800f340:	08012b04 	.word	0x08012b04
 800f344:	0800f2b1 	.word	0x0800f2b1

0800f348 <__sfp>:
 800f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34a:	4b1b      	ldr	r3, [pc, #108]	; (800f3b8 <__sfp+0x70>)
 800f34c:	681e      	ldr	r6, [r3, #0]
 800f34e:	69b3      	ldr	r3, [r6, #24]
 800f350:	4607      	mov	r7, r0
 800f352:	b913      	cbnz	r3, 800f35a <__sfp+0x12>
 800f354:	4630      	mov	r0, r6
 800f356:	f7ff ffc7 	bl	800f2e8 <__sinit>
 800f35a:	3648      	adds	r6, #72	; 0x48
 800f35c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f360:	3b01      	subs	r3, #1
 800f362:	d503      	bpl.n	800f36c <__sfp+0x24>
 800f364:	6833      	ldr	r3, [r6, #0]
 800f366:	b133      	cbz	r3, 800f376 <__sfp+0x2e>
 800f368:	6836      	ldr	r6, [r6, #0]
 800f36a:	e7f7      	b.n	800f35c <__sfp+0x14>
 800f36c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f370:	b16d      	cbz	r5, 800f38e <__sfp+0x46>
 800f372:	3468      	adds	r4, #104	; 0x68
 800f374:	e7f4      	b.n	800f360 <__sfp+0x18>
 800f376:	2104      	movs	r1, #4
 800f378:	4638      	mov	r0, r7
 800f37a:	f7ff ff9f 	bl	800f2bc <__sfmoreglue>
 800f37e:	6030      	str	r0, [r6, #0]
 800f380:	2800      	cmp	r0, #0
 800f382:	d1f1      	bne.n	800f368 <__sfp+0x20>
 800f384:	230c      	movs	r3, #12
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	4604      	mov	r4, r0
 800f38a:	4620      	mov	r0, r4
 800f38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f38e:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <__sfp+0x74>)
 800f390:	6665      	str	r5, [r4, #100]	; 0x64
 800f392:	e9c4 5500 	strd	r5, r5, [r4]
 800f396:	60a5      	str	r5, [r4, #8]
 800f398:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f39c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f3a0:	2208      	movs	r2, #8
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f3a8:	f7ff ff0a 	bl	800f1c0 <memset>
 800f3ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f3b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f3b4:	e7e9      	b.n	800f38a <__sfp+0x42>
 800f3b6:	bf00      	nop
 800f3b8:	08012b04 	.word	0x08012b04
 800f3bc:	ffff0001 	.word	0xffff0001

0800f3c0 <_fwalk_reent>:
 800f3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3c4:	4680      	mov	r8, r0
 800f3c6:	4689      	mov	r9, r1
 800f3c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3cc:	2600      	movs	r6, #0
 800f3ce:	b914      	cbnz	r4, 800f3d6 <_fwalk_reent+0x16>
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f3da:	3f01      	subs	r7, #1
 800f3dc:	d501      	bpl.n	800f3e2 <_fwalk_reent+0x22>
 800f3de:	6824      	ldr	r4, [r4, #0]
 800f3e0:	e7f5      	b.n	800f3ce <_fwalk_reent+0xe>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d907      	bls.n	800f3f8 <_fwalk_reent+0x38>
 800f3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	d003      	beq.n	800f3f8 <_fwalk_reent+0x38>
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	47c8      	blx	r9
 800f3f6:	4306      	orrs	r6, r0
 800f3f8:	3568      	adds	r5, #104	; 0x68
 800f3fa:	e7ee      	b.n	800f3da <_fwalk_reent+0x1a>

0800f3fc <malloc>:
 800f3fc:	4b02      	ldr	r3, [pc, #8]	; (800f408 <malloc+0xc>)
 800f3fe:	4601      	mov	r1, r0
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	f000 b851 	b.w	800f4a8 <_malloc_r>
 800f406:	bf00      	nop
 800f408:	20000028 	.word	0x20000028

0800f40c <_free_r>:
 800f40c:	b538      	push	{r3, r4, r5, lr}
 800f40e:	4605      	mov	r5, r0
 800f410:	2900      	cmp	r1, #0
 800f412:	d045      	beq.n	800f4a0 <_free_r+0x94>
 800f414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f418:	1f0c      	subs	r4, r1, #4
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	bfb8      	it	lt
 800f41e:	18e4      	addlt	r4, r4, r3
 800f420:	f000 fdc0 	bl	800ffa4 <__malloc_lock>
 800f424:	4a1f      	ldr	r2, [pc, #124]	; (800f4a4 <_free_r+0x98>)
 800f426:	6813      	ldr	r3, [r2, #0]
 800f428:	4610      	mov	r0, r2
 800f42a:	b933      	cbnz	r3, 800f43a <_free_r+0x2e>
 800f42c:	6063      	str	r3, [r4, #4]
 800f42e:	6014      	str	r4, [r2, #0]
 800f430:	4628      	mov	r0, r5
 800f432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f436:	f000 bdb6 	b.w	800ffa6 <__malloc_unlock>
 800f43a:	42a3      	cmp	r3, r4
 800f43c:	d90c      	bls.n	800f458 <_free_r+0x4c>
 800f43e:	6821      	ldr	r1, [r4, #0]
 800f440:	1862      	adds	r2, r4, r1
 800f442:	4293      	cmp	r3, r2
 800f444:	bf04      	itt	eq
 800f446:	681a      	ldreq	r2, [r3, #0]
 800f448:	685b      	ldreq	r3, [r3, #4]
 800f44a:	6063      	str	r3, [r4, #4]
 800f44c:	bf04      	itt	eq
 800f44e:	1852      	addeq	r2, r2, r1
 800f450:	6022      	streq	r2, [r4, #0]
 800f452:	6004      	str	r4, [r0, #0]
 800f454:	e7ec      	b.n	800f430 <_free_r+0x24>
 800f456:	4613      	mov	r3, r2
 800f458:	685a      	ldr	r2, [r3, #4]
 800f45a:	b10a      	cbz	r2, 800f460 <_free_r+0x54>
 800f45c:	42a2      	cmp	r2, r4
 800f45e:	d9fa      	bls.n	800f456 <_free_r+0x4a>
 800f460:	6819      	ldr	r1, [r3, #0]
 800f462:	1858      	adds	r0, r3, r1
 800f464:	42a0      	cmp	r0, r4
 800f466:	d10b      	bne.n	800f480 <_free_r+0x74>
 800f468:	6820      	ldr	r0, [r4, #0]
 800f46a:	4401      	add	r1, r0
 800f46c:	1858      	adds	r0, r3, r1
 800f46e:	4282      	cmp	r2, r0
 800f470:	6019      	str	r1, [r3, #0]
 800f472:	d1dd      	bne.n	800f430 <_free_r+0x24>
 800f474:	6810      	ldr	r0, [r2, #0]
 800f476:	6852      	ldr	r2, [r2, #4]
 800f478:	605a      	str	r2, [r3, #4]
 800f47a:	4401      	add	r1, r0
 800f47c:	6019      	str	r1, [r3, #0]
 800f47e:	e7d7      	b.n	800f430 <_free_r+0x24>
 800f480:	d902      	bls.n	800f488 <_free_r+0x7c>
 800f482:	230c      	movs	r3, #12
 800f484:	602b      	str	r3, [r5, #0]
 800f486:	e7d3      	b.n	800f430 <_free_r+0x24>
 800f488:	6820      	ldr	r0, [r4, #0]
 800f48a:	1821      	adds	r1, r4, r0
 800f48c:	428a      	cmp	r2, r1
 800f48e:	bf04      	itt	eq
 800f490:	6811      	ldreq	r1, [r2, #0]
 800f492:	6852      	ldreq	r2, [r2, #4]
 800f494:	6062      	str	r2, [r4, #4]
 800f496:	bf04      	itt	eq
 800f498:	1809      	addeq	r1, r1, r0
 800f49a:	6021      	streq	r1, [r4, #0]
 800f49c:	605c      	str	r4, [r3, #4]
 800f49e:	e7c7      	b.n	800f430 <_free_r+0x24>
 800f4a0:	bd38      	pop	{r3, r4, r5, pc}
 800f4a2:	bf00      	nop
 800f4a4:	2000021c 	.word	0x2000021c

0800f4a8 <_malloc_r>:
 800f4a8:	b570      	push	{r4, r5, r6, lr}
 800f4aa:	1ccd      	adds	r5, r1, #3
 800f4ac:	f025 0503 	bic.w	r5, r5, #3
 800f4b0:	3508      	adds	r5, #8
 800f4b2:	2d0c      	cmp	r5, #12
 800f4b4:	bf38      	it	cc
 800f4b6:	250c      	movcc	r5, #12
 800f4b8:	2d00      	cmp	r5, #0
 800f4ba:	4606      	mov	r6, r0
 800f4bc:	db01      	blt.n	800f4c2 <_malloc_r+0x1a>
 800f4be:	42a9      	cmp	r1, r5
 800f4c0:	d903      	bls.n	800f4ca <_malloc_r+0x22>
 800f4c2:	230c      	movs	r3, #12
 800f4c4:	6033      	str	r3, [r6, #0]
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ca:	f000 fd6b 	bl	800ffa4 <__malloc_lock>
 800f4ce:	4a21      	ldr	r2, [pc, #132]	; (800f554 <_malloc_r+0xac>)
 800f4d0:	6814      	ldr	r4, [r2, #0]
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	b991      	cbnz	r1, 800f4fc <_malloc_r+0x54>
 800f4d6:	4c20      	ldr	r4, [pc, #128]	; (800f558 <_malloc_r+0xb0>)
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	b91b      	cbnz	r3, 800f4e4 <_malloc_r+0x3c>
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 fb05 	bl	800faec <_sbrk_r>
 800f4e2:	6020      	str	r0, [r4, #0]
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	f000 fb00 	bl	800faec <_sbrk_r>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d124      	bne.n	800f53a <_malloc_r+0x92>
 800f4f0:	230c      	movs	r3, #12
 800f4f2:	6033      	str	r3, [r6, #0]
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f000 fd56 	bl	800ffa6 <__malloc_unlock>
 800f4fa:	e7e4      	b.n	800f4c6 <_malloc_r+0x1e>
 800f4fc:	680b      	ldr	r3, [r1, #0]
 800f4fe:	1b5b      	subs	r3, r3, r5
 800f500:	d418      	bmi.n	800f534 <_malloc_r+0x8c>
 800f502:	2b0b      	cmp	r3, #11
 800f504:	d90f      	bls.n	800f526 <_malloc_r+0x7e>
 800f506:	600b      	str	r3, [r1, #0]
 800f508:	50cd      	str	r5, [r1, r3]
 800f50a:	18cc      	adds	r4, r1, r3
 800f50c:	4630      	mov	r0, r6
 800f50e:	f000 fd4a 	bl	800ffa6 <__malloc_unlock>
 800f512:	f104 000b 	add.w	r0, r4, #11
 800f516:	1d23      	adds	r3, r4, #4
 800f518:	f020 0007 	bic.w	r0, r0, #7
 800f51c:	1ac3      	subs	r3, r0, r3
 800f51e:	d0d3      	beq.n	800f4c8 <_malloc_r+0x20>
 800f520:	425a      	negs	r2, r3
 800f522:	50e2      	str	r2, [r4, r3]
 800f524:	e7d0      	b.n	800f4c8 <_malloc_r+0x20>
 800f526:	428c      	cmp	r4, r1
 800f528:	684b      	ldr	r3, [r1, #4]
 800f52a:	bf16      	itet	ne
 800f52c:	6063      	strne	r3, [r4, #4]
 800f52e:	6013      	streq	r3, [r2, #0]
 800f530:	460c      	movne	r4, r1
 800f532:	e7eb      	b.n	800f50c <_malloc_r+0x64>
 800f534:	460c      	mov	r4, r1
 800f536:	6849      	ldr	r1, [r1, #4]
 800f538:	e7cc      	b.n	800f4d4 <_malloc_r+0x2c>
 800f53a:	1cc4      	adds	r4, r0, #3
 800f53c:	f024 0403 	bic.w	r4, r4, #3
 800f540:	42a0      	cmp	r0, r4
 800f542:	d005      	beq.n	800f550 <_malloc_r+0xa8>
 800f544:	1a21      	subs	r1, r4, r0
 800f546:	4630      	mov	r0, r6
 800f548:	f000 fad0 	bl	800faec <_sbrk_r>
 800f54c:	3001      	adds	r0, #1
 800f54e:	d0cf      	beq.n	800f4f0 <_malloc_r+0x48>
 800f550:	6025      	str	r5, [r4, #0]
 800f552:	e7db      	b.n	800f50c <_malloc_r+0x64>
 800f554:	2000021c 	.word	0x2000021c
 800f558:	20000220 	.word	0x20000220

0800f55c <__sfputc_r>:
 800f55c:	6893      	ldr	r3, [r2, #8]
 800f55e:	3b01      	subs	r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	b410      	push	{r4}
 800f564:	6093      	str	r3, [r2, #8]
 800f566:	da08      	bge.n	800f57a <__sfputc_r+0x1e>
 800f568:	6994      	ldr	r4, [r2, #24]
 800f56a:	42a3      	cmp	r3, r4
 800f56c:	db01      	blt.n	800f572 <__sfputc_r+0x16>
 800f56e:	290a      	cmp	r1, #10
 800f570:	d103      	bne.n	800f57a <__sfputc_r+0x1e>
 800f572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f576:	f000 bb0d 	b.w	800fb94 <__swbuf_r>
 800f57a:	6813      	ldr	r3, [r2, #0]
 800f57c:	1c58      	adds	r0, r3, #1
 800f57e:	6010      	str	r0, [r2, #0]
 800f580:	7019      	strb	r1, [r3, #0]
 800f582:	4608      	mov	r0, r1
 800f584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <__sfputs_r>:
 800f58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58c:	4606      	mov	r6, r0
 800f58e:	460f      	mov	r7, r1
 800f590:	4614      	mov	r4, r2
 800f592:	18d5      	adds	r5, r2, r3
 800f594:	42ac      	cmp	r4, r5
 800f596:	d101      	bne.n	800f59c <__sfputs_r+0x12>
 800f598:	2000      	movs	r0, #0
 800f59a:	e007      	b.n	800f5ac <__sfputs_r+0x22>
 800f59c:	463a      	mov	r2, r7
 800f59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7ff ffda 	bl	800f55c <__sfputc_r>
 800f5a8:	1c43      	adds	r3, r0, #1
 800f5aa:	d1f3      	bne.n	800f594 <__sfputs_r+0xa>
 800f5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5b0 <_vfiprintf_r>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	b09d      	sub	sp, #116	; 0x74
 800f5b8:	4617      	mov	r7, r2
 800f5ba:	461d      	mov	r5, r3
 800f5bc:	4606      	mov	r6, r0
 800f5be:	b118      	cbz	r0, 800f5c8 <_vfiprintf_r+0x18>
 800f5c0:	6983      	ldr	r3, [r0, #24]
 800f5c2:	b90b      	cbnz	r3, 800f5c8 <_vfiprintf_r+0x18>
 800f5c4:	f7ff fe90 	bl	800f2e8 <__sinit>
 800f5c8:	4b7c      	ldr	r3, [pc, #496]	; (800f7bc <_vfiprintf_r+0x20c>)
 800f5ca:	429c      	cmp	r4, r3
 800f5cc:	d158      	bne.n	800f680 <_vfiprintf_r+0xd0>
 800f5ce:	6874      	ldr	r4, [r6, #4]
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	0718      	lsls	r0, r3, #28
 800f5d4:	d55e      	bpl.n	800f694 <_vfiprintf_r+0xe4>
 800f5d6:	6923      	ldr	r3, [r4, #16]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d05b      	beq.n	800f694 <_vfiprintf_r+0xe4>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5e6:	2330      	movs	r3, #48	; 0x30
 800f5e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ec:	9503      	str	r5, [sp, #12]
 800f5ee:	f04f 0b01 	mov.w	fp, #1
 800f5f2:	46b8      	mov	r8, r7
 800f5f4:	4645      	mov	r5, r8
 800f5f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5fa:	b10b      	cbz	r3, 800f600 <_vfiprintf_r+0x50>
 800f5fc:	2b25      	cmp	r3, #37	; 0x25
 800f5fe:	d154      	bne.n	800f6aa <_vfiprintf_r+0xfa>
 800f600:	ebb8 0a07 	subs.w	sl, r8, r7
 800f604:	d00b      	beq.n	800f61e <_vfiprintf_r+0x6e>
 800f606:	4653      	mov	r3, sl
 800f608:	463a      	mov	r2, r7
 800f60a:	4621      	mov	r1, r4
 800f60c:	4630      	mov	r0, r6
 800f60e:	f7ff ffbc 	bl	800f58a <__sfputs_r>
 800f612:	3001      	adds	r0, #1
 800f614:	f000 80c2 	beq.w	800f79c <_vfiprintf_r+0x1ec>
 800f618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61a:	4453      	add	r3, sl
 800f61c:	9309      	str	r3, [sp, #36]	; 0x24
 800f61e:	f898 3000 	ldrb.w	r3, [r8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 80ba 	beq.w	800f79c <_vfiprintf_r+0x1ec>
 800f628:	2300      	movs	r3, #0
 800f62a:	f04f 32ff 	mov.w	r2, #4294967295
 800f62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f632:	9304      	str	r3, [sp, #16]
 800f634:	9307      	str	r3, [sp, #28]
 800f636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f63a:	931a      	str	r3, [sp, #104]	; 0x68
 800f63c:	46a8      	mov	r8, r5
 800f63e:	2205      	movs	r2, #5
 800f640:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f644:	485e      	ldr	r0, [pc, #376]	; (800f7c0 <_vfiprintf_r+0x210>)
 800f646:	f7f0 fdd3 	bl	80001f0 <memchr>
 800f64a:	9b04      	ldr	r3, [sp, #16]
 800f64c:	bb78      	cbnz	r0, 800f6ae <_vfiprintf_r+0xfe>
 800f64e:	06d9      	lsls	r1, r3, #27
 800f650:	bf44      	itt	mi
 800f652:	2220      	movmi	r2, #32
 800f654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f658:	071a      	lsls	r2, r3, #28
 800f65a:	bf44      	itt	mi
 800f65c:	222b      	movmi	r2, #43	; 0x2b
 800f65e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f662:	782a      	ldrb	r2, [r5, #0]
 800f664:	2a2a      	cmp	r2, #42	; 0x2a
 800f666:	d02a      	beq.n	800f6be <_vfiprintf_r+0x10e>
 800f668:	9a07      	ldr	r2, [sp, #28]
 800f66a:	46a8      	mov	r8, r5
 800f66c:	2000      	movs	r0, #0
 800f66e:	250a      	movs	r5, #10
 800f670:	4641      	mov	r1, r8
 800f672:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f676:	3b30      	subs	r3, #48	; 0x30
 800f678:	2b09      	cmp	r3, #9
 800f67a:	d969      	bls.n	800f750 <_vfiprintf_r+0x1a0>
 800f67c:	b360      	cbz	r0, 800f6d8 <_vfiprintf_r+0x128>
 800f67e:	e024      	b.n	800f6ca <_vfiprintf_r+0x11a>
 800f680:	4b50      	ldr	r3, [pc, #320]	; (800f7c4 <_vfiprintf_r+0x214>)
 800f682:	429c      	cmp	r4, r3
 800f684:	d101      	bne.n	800f68a <_vfiprintf_r+0xda>
 800f686:	68b4      	ldr	r4, [r6, #8]
 800f688:	e7a2      	b.n	800f5d0 <_vfiprintf_r+0x20>
 800f68a:	4b4f      	ldr	r3, [pc, #316]	; (800f7c8 <_vfiprintf_r+0x218>)
 800f68c:	429c      	cmp	r4, r3
 800f68e:	bf08      	it	eq
 800f690:	68f4      	ldreq	r4, [r6, #12]
 800f692:	e79d      	b.n	800f5d0 <_vfiprintf_r+0x20>
 800f694:	4621      	mov	r1, r4
 800f696:	4630      	mov	r0, r6
 800f698:	f000 fae0 	bl	800fc5c <__swsetup_r>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d09d      	beq.n	800f5dc <_vfiprintf_r+0x2c>
 800f6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a4:	b01d      	add	sp, #116	; 0x74
 800f6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6aa:	46a8      	mov	r8, r5
 800f6ac:	e7a2      	b.n	800f5f4 <_vfiprintf_r+0x44>
 800f6ae:	4a44      	ldr	r2, [pc, #272]	; (800f7c0 <_vfiprintf_r+0x210>)
 800f6b0:	1a80      	subs	r0, r0, r2
 800f6b2:	fa0b f000 	lsl.w	r0, fp, r0
 800f6b6:	4318      	orrs	r0, r3
 800f6b8:	9004      	str	r0, [sp, #16]
 800f6ba:	4645      	mov	r5, r8
 800f6bc:	e7be      	b.n	800f63c <_vfiprintf_r+0x8c>
 800f6be:	9a03      	ldr	r2, [sp, #12]
 800f6c0:	1d11      	adds	r1, r2, #4
 800f6c2:	6812      	ldr	r2, [r2, #0]
 800f6c4:	9103      	str	r1, [sp, #12]
 800f6c6:	2a00      	cmp	r2, #0
 800f6c8:	db01      	blt.n	800f6ce <_vfiprintf_r+0x11e>
 800f6ca:	9207      	str	r2, [sp, #28]
 800f6cc:	e004      	b.n	800f6d8 <_vfiprintf_r+0x128>
 800f6ce:	4252      	negs	r2, r2
 800f6d0:	f043 0302 	orr.w	r3, r3, #2
 800f6d4:	9207      	str	r2, [sp, #28]
 800f6d6:	9304      	str	r3, [sp, #16]
 800f6d8:	f898 3000 	ldrb.w	r3, [r8]
 800f6dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6de:	d10e      	bne.n	800f6fe <_vfiprintf_r+0x14e>
 800f6e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f6e6:	d138      	bne.n	800f75a <_vfiprintf_r+0x1aa>
 800f6e8:	9b03      	ldr	r3, [sp, #12]
 800f6ea:	1d1a      	adds	r2, r3, #4
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	9203      	str	r2, [sp, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	bfb8      	it	lt
 800f6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6f8:	f108 0802 	add.w	r8, r8, #2
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	4d33      	ldr	r5, [pc, #204]	; (800f7cc <_vfiprintf_r+0x21c>)
 800f700:	f898 1000 	ldrb.w	r1, [r8]
 800f704:	2203      	movs	r2, #3
 800f706:	4628      	mov	r0, r5
 800f708:	f7f0 fd72 	bl	80001f0 <memchr>
 800f70c:	b140      	cbz	r0, 800f720 <_vfiprintf_r+0x170>
 800f70e:	2340      	movs	r3, #64	; 0x40
 800f710:	1b40      	subs	r0, r0, r5
 800f712:	fa03 f000 	lsl.w	r0, r3, r0
 800f716:	9b04      	ldr	r3, [sp, #16]
 800f718:	4303      	orrs	r3, r0
 800f71a:	f108 0801 	add.w	r8, r8, #1
 800f71e:	9304      	str	r3, [sp, #16]
 800f720:	f898 1000 	ldrb.w	r1, [r8]
 800f724:	482a      	ldr	r0, [pc, #168]	; (800f7d0 <_vfiprintf_r+0x220>)
 800f726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f72a:	2206      	movs	r2, #6
 800f72c:	f108 0701 	add.w	r7, r8, #1
 800f730:	f7f0 fd5e 	bl	80001f0 <memchr>
 800f734:	2800      	cmp	r0, #0
 800f736:	d037      	beq.n	800f7a8 <_vfiprintf_r+0x1f8>
 800f738:	4b26      	ldr	r3, [pc, #152]	; (800f7d4 <_vfiprintf_r+0x224>)
 800f73a:	bb1b      	cbnz	r3, 800f784 <_vfiprintf_r+0x1d4>
 800f73c:	9b03      	ldr	r3, [sp, #12]
 800f73e:	3307      	adds	r3, #7
 800f740:	f023 0307 	bic.w	r3, r3, #7
 800f744:	3308      	adds	r3, #8
 800f746:	9303      	str	r3, [sp, #12]
 800f748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f74a:	444b      	add	r3, r9
 800f74c:	9309      	str	r3, [sp, #36]	; 0x24
 800f74e:	e750      	b.n	800f5f2 <_vfiprintf_r+0x42>
 800f750:	fb05 3202 	mla	r2, r5, r2, r3
 800f754:	2001      	movs	r0, #1
 800f756:	4688      	mov	r8, r1
 800f758:	e78a      	b.n	800f670 <_vfiprintf_r+0xc0>
 800f75a:	2300      	movs	r3, #0
 800f75c:	f108 0801 	add.w	r8, r8, #1
 800f760:	9305      	str	r3, [sp, #20]
 800f762:	4619      	mov	r1, r3
 800f764:	250a      	movs	r5, #10
 800f766:	4640      	mov	r0, r8
 800f768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f76c:	3a30      	subs	r2, #48	; 0x30
 800f76e:	2a09      	cmp	r2, #9
 800f770:	d903      	bls.n	800f77a <_vfiprintf_r+0x1ca>
 800f772:	2b00      	cmp	r3, #0
 800f774:	d0c3      	beq.n	800f6fe <_vfiprintf_r+0x14e>
 800f776:	9105      	str	r1, [sp, #20]
 800f778:	e7c1      	b.n	800f6fe <_vfiprintf_r+0x14e>
 800f77a:	fb05 2101 	mla	r1, r5, r1, r2
 800f77e:	2301      	movs	r3, #1
 800f780:	4680      	mov	r8, r0
 800f782:	e7f0      	b.n	800f766 <_vfiprintf_r+0x1b6>
 800f784:	ab03      	add	r3, sp, #12
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	4622      	mov	r2, r4
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <_vfiprintf_r+0x228>)
 800f78c:	a904      	add	r1, sp, #16
 800f78e:	4630      	mov	r0, r6
 800f790:	f3af 8000 	nop.w
 800f794:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f798:	4681      	mov	r9, r0
 800f79a:	d1d5      	bne.n	800f748 <_vfiprintf_r+0x198>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	065b      	lsls	r3, r3, #25
 800f7a0:	f53f af7e 	bmi.w	800f6a0 <_vfiprintf_r+0xf0>
 800f7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7a6:	e77d      	b.n	800f6a4 <_vfiprintf_r+0xf4>
 800f7a8:	ab03      	add	r3, sp, #12
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4622      	mov	r2, r4
 800f7ae:	4b0a      	ldr	r3, [pc, #40]	; (800f7d8 <_vfiprintf_r+0x228>)
 800f7b0:	a904      	add	r1, sp, #16
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f000 f888 	bl	800f8c8 <_printf_i>
 800f7b8:	e7ec      	b.n	800f794 <_vfiprintf_r+0x1e4>
 800f7ba:	bf00      	nop
 800f7bc:	08012b28 	.word	0x08012b28
 800f7c0:	08012b68 	.word	0x08012b68
 800f7c4:	08012b48 	.word	0x08012b48
 800f7c8:	08012b08 	.word	0x08012b08
 800f7cc:	08012b6e 	.word	0x08012b6e
 800f7d0:	08012b72 	.word	0x08012b72
 800f7d4:	00000000 	.word	0x00000000
 800f7d8:	0800f58b 	.word	0x0800f58b

0800f7dc <_printf_common>:
 800f7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e0:	4691      	mov	r9, r2
 800f7e2:	461f      	mov	r7, r3
 800f7e4:	688a      	ldr	r2, [r1, #8]
 800f7e6:	690b      	ldr	r3, [r1, #16]
 800f7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	bfb8      	it	lt
 800f7f0:	4613      	movlt	r3, r2
 800f7f2:	f8c9 3000 	str.w	r3, [r9]
 800f7f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460c      	mov	r4, r1
 800f7fe:	b112      	cbz	r2, 800f806 <_printf_common+0x2a>
 800f800:	3301      	adds	r3, #1
 800f802:	f8c9 3000 	str.w	r3, [r9]
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	0699      	lsls	r1, r3, #26
 800f80a:	bf42      	ittt	mi
 800f80c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f810:	3302      	addmi	r3, #2
 800f812:	f8c9 3000 	strmi.w	r3, [r9]
 800f816:	6825      	ldr	r5, [r4, #0]
 800f818:	f015 0506 	ands.w	r5, r5, #6
 800f81c:	d107      	bne.n	800f82e <_printf_common+0x52>
 800f81e:	f104 0a19 	add.w	sl, r4, #25
 800f822:	68e3      	ldr	r3, [r4, #12]
 800f824:	f8d9 2000 	ldr.w	r2, [r9]
 800f828:	1a9b      	subs	r3, r3, r2
 800f82a:	42ab      	cmp	r3, r5
 800f82c:	dc28      	bgt.n	800f880 <_printf_common+0xa4>
 800f82e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f832:	6822      	ldr	r2, [r4, #0]
 800f834:	3300      	adds	r3, #0
 800f836:	bf18      	it	ne
 800f838:	2301      	movne	r3, #1
 800f83a:	0692      	lsls	r2, r2, #26
 800f83c:	d42d      	bmi.n	800f89a <_printf_common+0xbe>
 800f83e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f842:	4639      	mov	r1, r7
 800f844:	4630      	mov	r0, r6
 800f846:	47c0      	blx	r8
 800f848:	3001      	adds	r0, #1
 800f84a:	d020      	beq.n	800f88e <_printf_common+0xb2>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	68e5      	ldr	r5, [r4, #12]
 800f850:	f8d9 2000 	ldr.w	r2, [r9]
 800f854:	f003 0306 	and.w	r3, r3, #6
 800f858:	2b04      	cmp	r3, #4
 800f85a:	bf08      	it	eq
 800f85c:	1aad      	subeq	r5, r5, r2
 800f85e:	68a3      	ldr	r3, [r4, #8]
 800f860:	6922      	ldr	r2, [r4, #16]
 800f862:	bf0c      	ite	eq
 800f864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f868:	2500      	movne	r5, #0
 800f86a:	4293      	cmp	r3, r2
 800f86c:	bfc4      	itt	gt
 800f86e:	1a9b      	subgt	r3, r3, r2
 800f870:	18ed      	addgt	r5, r5, r3
 800f872:	f04f 0900 	mov.w	r9, #0
 800f876:	341a      	adds	r4, #26
 800f878:	454d      	cmp	r5, r9
 800f87a:	d11a      	bne.n	800f8b2 <_printf_common+0xd6>
 800f87c:	2000      	movs	r0, #0
 800f87e:	e008      	b.n	800f892 <_printf_common+0xb6>
 800f880:	2301      	movs	r3, #1
 800f882:	4652      	mov	r2, sl
 800f884:	4639      	mov	r1, r7
 800f886:	4630      	mov	r0, r6
 800f888:	47c0      	blx	r8
 800f88a:	3001      	adds	r0, #1
 800f88c:	d103      	bne.n	800f896 <_printf_common+0xba>
 800f88e:	f04f 30ff 	mov.w	r0, #4294967295
 800f892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f896:	3501      	adds	r5, #1
 800f898:	e7c3      	b.n	800f822 <_printf_common+0x46>
 800f89a:	18e1      	adds	r1, r4, r3
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	2030      	movs	r0, #48	; 0x30
 800f8a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8a4:	4422      	add	r2, r4
 800f8a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8ae:	3302      	adds	r3, #2
 800f8b0:	e7c5      	b.n	800f83e <_printf_common+0x62>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4622      	mov	r2, r4
 800f8b6:	4639      	mov	r1, r7
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	47c0      	blx	r8
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d0e6      	beq.n	800f88e <_printf_common+0xb2>
 800f8c0:	f109 0901 	add.w	r9, r9, #1
 800f8c4:	e7d8      	b.n	800f878 <_printf_common+0x9c>
	...

0800f8c8 <_printf_i>:
 800f8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f8d0:	460c      	mov	r4, r1
 800f8d2:	7e09      	ldrb	r1, [r1, #24]
 800f8d4:	b085      	sub	sp, #20
 800f8d6:	296e      	cmp	r1, #110	; 0x6e
 800f8d8:	4617      	mov	r7, r2
 800f8da:	4606      	mov	r6, r0
 800f8dc:	4698      	mov	r8, r3
 800f8de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8e0:	f000 80b3 	beq.w	800fa4a <_printf_i+0x182>
 800f8e4:	d822      	bhi.n	800f92c <_printf_i+0x64>
 800f8e6:	2963      	cmp	r1, #99	; 0x63
 800f8e8:	d036      	beq.n	800f958 <_printf_i+0x90>
 800f8ea:	d80a      	bhi.n	800f902 <_printf_i+0x3a>
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	f000 80b9 	beq.w	800fa64 <_printf_i+0x19c>
 800f8f2:	2958      	cmp	r1, #88	; 0x58
 800f8f4:	f000 8083 	beq.w	800f9fe <_printf_i+0x136>
 800f8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f900:	e032      	b.n	800f968 <_printf_i+0xa0>
 800f902:	2964      	cmp	r1, #100	; 0x64
 800f904:	d001      	beq.n	800f90a <_printf_i+0x42>
 800f906:	2969      	cmp	r1, #105	; 0x69
 800f908:	d1f6      	bne.n	800f8f8 <_printf_i+0x30>
 800f90a:	6820      	ldr	r0, [r4, #0]
 800f90c:	6813      	ldr	r3, [r2, #0]
 800f90e:	0605      	lsls	r5, r0, #24
 800f910:	f103 0104 	add.w	r1, r3, #4
 800f914:	d52a      	bpl.n	800f96c <_printf_i+0xa4>
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6011      	str	r1, [r2, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da03      	bge.n	800f926 <_printf_i+0x5e>
 800f91e:	222d      	movs	r2, #45	; 0x2d
 800f920:	425b      	negs	r3, r3
 800f922:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f926:	486f      	ldr	r0, [pc, #444]	; (800fae4 <_printf_i+0x21c>)
 800f928:	220a      	movs	r2, #10
 800f92a:	e039      	b.n	800f9a0 <_printf_i+0xd8>
 800f92c:	2973      	cmp	r1, #115	; 0x73
 800f92e:	f000 809d 	beq.w	800fa6c <_printf_i+0x1a4>
 800f932:	d808      	bhi.n	800f946 <_printf_i+0x7e>
 800f934:	296f      	cmp	r1, #111	; 0x6f
 800f936:	d020      	beq.n	800f97a <_printf_i+0xb2>
 800f938:	2970      	cmp	r1, #112	; 0x70
 800f93a:	d1dd      	bne.n	800f8f8 <_printf_i+0x30>
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	f043 0320 	orr.w	r3, r3, #32
 800f942:	6023      	str	r3, [r4, #0]
 800f944:	e003      	b.n	800f94e <_printf_i+0x86>
 800f946:	2975      	cmp	r1, #117	; 0x75
 800f948:	d017      	beq.n	800f97a <_printf_i+0xb2>
 800f94a:	2978      	cmp	r1, #120	; 0x78
 800f94c:	d1d4      	bne.n	800f8f8 <_printf_i+0x30>
 800f94e:	2378      	movs	r3, #120	; 0x78
 800f950:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f954:	4864      	ldr	r0, [pc, #400]	; (800fae8 <_printf_i+0x220>)
 800f956:	e055      	b.n	800fa04 <_printf_i+0x13c>
 800f958:	6813      	ldr	r3, [r2, #0]
 800f95a:	1d19      	adds	r1, r3, #4
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6011      	str	r1, [r2, #0]
 800f960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f968:	2301      	movs	r3, #1
 800f96a:	e08c      	b.n	800fa86 <_printf_i+0x1be>
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6011      	str	r1, [r2, #0]
 800f970:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f974:	bf18      	it	ne
 800f976:	b21b      	sxthne	r3, r3
 800f978:	e7cf      	b.n	800f91a <_printf_i+0x52>
 800f97a:	6813      	ldr	r3, [r2, #0]
 800f97c:	6825      	ldr	r5, [r4, #0]
 800f97e:	1d18      	adds	r0, r3, #4
 800f980:	6010      	str	r0, [r2, #0]
 800f982:	0628      	lsls	r0, r5, #24
 800f984:	d501      	bpl.n	800f98a <_printf_i+0xc2>
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	e002      	b.n	800f990 <_printf_i+0xc8>
 800f98a:	0668      	lsls	r0, r5, #25
 800f98c:	d5fb      	bpl.n	800f986 <_printf_i+0xbe>
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	4854      	ldr	r0, [pc, #336]	; (800fae4 <_printf_i+0x21c>)
 800f992:	296f      	cmp	r1, #111	; 0x6f
 800f994:	bf14      	ite	ne
 800f996:	220a      	movne	r2, #10
 800f998:	2208      	moveq	r2, #8
 800f99a:	2100      	movs	r1, #0
 800f99c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9a0:	6865      	ldr	r5, [r4, #4]
 800f9a2:	60a5      	str	r5, [r4, #8]
 800f9a4:	2d00      	cmp	r5, #0
 800f9a6:	f2c0 8095 	blt.w	800fad4 <_printf_i+0x20c>
 800f9aa:	6821      	ldr	r1, [r4, #0]
 800f9ac:	f021 0104 	bic.w	r1, r1, #4
 800f9b0:	6021      	str	r1, [r4, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d13d      	bne.n	800fa32 <_printf_i+0x16a>
 800f9b6:	2d00      	cmp	r5, #0
 800f9b8:	f040 808e 	bne.w	800fad8 <_printf_i+0x210>
 800f9bc:	4665      	mov	r5, ip
 800f9be:	2a08      	cmp	r2, #8
 800f9c0:	d10b      	bne.n	800f9da <_printf_i+0x112>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	07db      	lsls	r3, r3, #31
 800f9c6:	d508      	bpl.n	800f9da <_printf_i+0x112>
 800f9c8:	6923      	ldr	r3, [r4, #16]
 800f9ca:	6862      	ldr	r2, [r4, #4]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	bfde      	ittt	le
 800f9d0:	2330      	movle	r3, #48	; 0x30
 800f9d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f9d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f9da:	ebac 0305 	sub.w	r3, ip, r5
 800f9de:	6123      	str	r3, [r4, #16]
 800f9e0:	f8cd 8000 	str.w	r8, [sp]
 800f9e4:	463b      	mov	r3, r7
 800f9e6:	aa03      	add	r2, sp, #12
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7ff fef6 	bl	800f7dc <_printf_common>
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d14d      	bne.n	800fa90 <_printf_i+0x1c8>
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f8:	b005      	add	sp, #20
 800f9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fe:	4839      	ldr	r0, [pc, #228]	; (800fae4 <_printf_i+0x21c>)
 800fa00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fa04:	6813      	ldr	r3, [r2, #0]
 800fa06:	6821      	ldr	r1, [r4, #0]
 800fa08:	1d1d      	adds	r5, r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	6015      	str	r5, [r2, #0]
 800fa0e:	060a      	lsls	r2, r1, #24
 800fa10:	d50b      	bpl.n	800fa2a <_printf_i+0x162>
 800fa12:	07ca      	lsls	r2, r1, #31
 800fa14:	bf44      	itt	mi
 800fa16:	f041 0120 	orrmi.w	r1, r1, #32
 800fa1a:	6021      	strmi	r1, [r4, #0]
 800fa1c:	b91b      	cbnz	r3, 800fa26 <_printf_i+0x15e>
 800fa1e:	6822      	ldr	r2, [r4, #0]
 800fa20:	f022 0220 	bic.w	r2, r2, #32
 800fa24:	6022      	str	r2, [r4, #0]
 800fa26:	2210      	movs	r2, #16
 800fa28:	e7b7      	b.n	800f99a <_printf_i+0xd2>
 800fa2a:	064d      	lsls	r5, r1, #25
 800fa2c:	bf48      	it	mi
 800fa2e:	b29b      	uxthmi	r3, r3
 800fa30:	e7ef      	b.n	800fa12 <_printf_i+0x14a>
 800fa32:	4665      	mov	r5, ip
 800fa34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa38:	fb02 3311 	mls	r3, r2, r1, r3
 800fa3c:	5cc3      	ldrb	r3, [r0, r3]
 800fa3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fa42:	460b      	mov	r3, r1
 800fa44:	2900      	cmp	r1, #0
 800fa46:	d1f5      	bne.n	800fa34 <_printf_i+0x16c>
 800fa48:	e7b9      	b.n	800f9be <_printf_i+0xf6>
 800fa4a:	6813      	ldr	r3, [r2, #0]
 800fa4c:	6825      	ldr	r5, [r4, #0]
 800fa4e:	6961      	ldr	r1, [r4, #20]
 800fa50:	1d18      	adds	r0, r3, #4
 800fa52:	6010      	str	r0, [r2, #0]
 800fa54:	0628      	lsls	r0, r5, #24
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	d501      	bpl.n	800fa5e <_printf_i+0x196>
 800fa5a:	6019      	str	r1, [r3, #0]
 800fa5c:	e002      	b.n	800fa64 <_printf_i+0x19c>
 800fa5e:	066a      	lsls	r2, r5, #25
 800fa60:	d5fb      	bpl.n	800fa5a <_printf_i+0x192>
 800fa62:	8019      	strh	r1, [r3, #0]
 800fa64:	2300      	movs	r3, #0
 800fa66:	6123      	str	r3, [r4, #16]
 800fa68:	4665      	mov	r5, ip
 800fa6a:	e7b9      	b.n	800f9e0 <_printf_i+0x118>
 800fa6c:	6813      	ldr	r3, [r2, #0]
 800fa6e:	1d19      	adds	r1, r3, #4
 800fa70:	6011      	str	r1, [r2, #0]
 800fa72:	681d      	ldr	r5, [r3, #0]
 800fa74:	6862      	ldr	r2, [r4, #4]
 800fa76:	2100      	movs	r1, #0
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f7f0 fbb9 	bl	80001f0 <memchr>
 800fa7e:	b108      	cbz	r0, 800fa84 <_printf_i+0x1bc>
 800fa80:	1b40      	subs	r0, r0, r5
 800fa82:	6060      	str	r0, [r4, #4]
 800fa84:	6863      	ldr	r3, [r4, #4]
 800fa86:	6123      	str	r3, [r4, #16]
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa8e:	e7a7      	b.n	800f9e0 <_printf_i+0x118>
 800fa90:	6923      	ldr	r3, [r4, #16]
 800fa92:	462a      	mov	r2, r5
 800fa94:	4639      	mov	r1, r7
 800fa96:	4630      	mov	r0, r6
 800fa98:	47c0      	blx	r8
 800fa9a:	3001      	adds	r0, #1
 800fa9c:	d0aa      	beq.n	800f9f4 <_printf_i+0x12c>
 800fa9e:	6823      	ldr	r3, [r4, #0]
 800faa0:	079b      	lsls	r3, r3, #30
 800faa2:	d413      	bmi.n	800facc <_printf_i+0x204>
 800faa4:	68e0      	ldr	r0, [r4, #12]
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	4298      	cmp	r0, r3
 800faaa:	bfb8      	it	lt
 800faac:	4618      	movlt	r0, r3
 800faae:	e7a3      	b.n	800f9f8 <_printf_i+0x130>
 800fab0:	2301      	movs	r3, #1
 800fab2:	464a      	mov	r2, r9
 800fab4:	4639      	mov	r1, r7
 800fab6:	4630      	mov	r0, r6
 800fab8:	47c0      	blx	r8
 800faba:	3001      	adds	r0, #1
 800fabc:	d09a      	beq.n	800f9f4 <_printf_i+0x12c>
 800fabe:	3501      	adds	r5, #1
 800fac0:	68e3      	ldr	r3, [r4, #12]
 800fac2:	9a03      	ldr	r2, [sp, #12]
 800fac4:	1a9b      	subs	r3, r3, r2
 800fac6:	42ab      	cmp	r3, r5
 800fac8:	dcf2      	bgt.n	800fab0 <_printf_i+0x1e8>
 800faca:	e7eb      	b.n	800faa4 <_printf_i+0x1dc>
 800facc:	2500      	movs	r5, #0
 800face:	f104 0919 	add.w	r9, r4, #25
 800fad2:	e7f5      	b.n	800fac0 <_printf_i+0x1f8>
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1ac      	bne.n	800fa32 <_printf_i+0x16a>
 800fad8:	7803      	ldrb	r3, [r0, #0]
 800fada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fade:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fae2:	e76c      	b.n	800f9be <_printf_i+0xf6>
 800fae4:	08012b79 	.word	0x08012b79
 800fae8:	08012b8a 	.word	0x08012b8a

0800faec <_sbrk_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4c06      	ldr	r4, [pc, #24]	; (800fb08 <_sbrk_r+0x1c>)
 800faf0:	2300      	movs	r3, #0
 800faf2:	4605      	mov	r5, r0
 800faf4:	4608      	mov	r0, r1
 800faf6:	6023      	str	r3, [r4, #0]
 800faf8:	f7f0 ff52 	bl	80009a0 <_sbrk>
 800fafc:	1c43      	adds	r3, r0, #1
 800fafe:	d102      	bne.n	800fb06 <_sbrk_r+0x1a>
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	b103      	cbz	r3, 800fb06 <_sbrk_r+0x1a>
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	20006d48 	.word	0x20006d48

0800fb0c <__sread>:
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	460c      	mov	r4, r1
 800fb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb14:	f000 fa48 	bl	800ffa8 <_read_r>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	bfab      	itete	ge
 800fb1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb1e:	89a3      	ldrhlt	r3, [r4, #12]
 800fb20:	181b      	addge	r3, r3, r0
 800fb22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb26:	bfac      	ite	ge
 800fb28:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb2a:	81a3      	strhlt	r3, [r4, #12]
 800fb2c:	bd10      	pop	{r4, pc}

0800fb2e <__swrite>:
 800fb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb32:	461f      	mov	r7, r3
 800fb34:	898b      	ldrh	r3, [r1, #12]
 800fb36:	05db      	lsls	r3, r3, #23
 800fb38:	4605      	mov	r5, r0
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	4616      	mov	r6, r2
 800fb3e:	d505      	bpl.n	800fb4c <__swrite+0x1e>
 800fb40:	2302      	movs	r3, #2
 800fb42:	2200      	movs	r2, #0
 800fb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb48:	f000 f9b6 	bl	800feb8 <_lseek_r>
 800fb4c:	89a3      	ldrh	r3, [r4, #12]
 800fb4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb56:	81a3      	strh	r3, [r4, #12]
 800fb58:	4632      	mov	r2, r6
 800fb5a:	463b      	mov	r3, r7
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb62:	f000 b869 	b.w	800fc38 <_write_r>

0800fb66 <__sseek>:
 800fb66:	b510      	push	{r4, lr}
 800fb68:	460c      	mov	r4, r1
 800fb6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb6e:	f000 f9a3 	bl	800feb8 <_lseek_r>
 800fb72:	1c43      	adds	r3, r0, #1
 800fb74:	89a3      	ldrh	r3, [r4, #12]
 800fb76:	bf15      	itete	ne
 800fb78:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb82:	81a3      	strheq	r3, [r4, #12]
 800fb84:	bf18      	it	ne
 800fb86:	81a3      	strhne	r3, [r4, #12]
 800fb88:	bd10      	pop	{r4, pc}

0800fb8a <__sclose>:
 800fb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb8e:	f000 b8d3 	b.w	800fd38 <_close_r>
	...

0800fb94 <__swbuf_r>:
 800fb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb96:	460e      	mov	r6, r1
 800fb98:	4614      	mov	r4, r2
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	b118      	cbz	r0, 800fba6 <__swbuf_r+0x12>
 800fb9e:	6983      	ldr	r3, [r0, #24]
 800fba0:	b90b      	cbnz	r3, 800fba6 <__swbuf_r+0x12>
 800fba2:	f7ff fba1 	bl	800f2e8 <__sinit>
 800fba6:	4b21      	ldr	r3, [pc, #132]	; (800fc2c <__swbuf_r+0x98>)
 800fba8:	429c      	cmp	r4, r3
 800fbaa:	d12a      	bne.n	800fc02 <__swbuf_r+0x6e>
 800fbac:	686c      	ldr	r4, [r5, #4]
 800fbae:	69a3      	ldr	r3, [r4, #24]
 800fbb0:	60a3      	str	r3, [r4, #8]
 800fbb2:	89a3      	ldrh	r3, [r4, #12]
 800fbb4:	071a      	lsls	r2, r3, #28
 800fbb6:	d52e      	bpl.n	800fc16 <__swbuf_r+0x82>
 800fbb8:	6923      	ldr	r3, [r4, #16]
 800fbba:	b363      	cbz	r3, 800fc16 <__swbuf_r+0x82>
 800fbbc:	6923      	ldr	r3, [r4, #16]
 800fbbe:	6820      	ldr	r0, [r4, #0]
 800fbc0:	1ac0      	subs	r0, r0, r3
 800fbc2:	6963      	ldr	r3, [r4, #20]
 800fbc4:	b2f6      	uxtb	r6, r6
 800fbc6:	4283      	cmp	r3, r0
 800fbc8:	4637      	mov	r7, r6
 800fbca:	dc04      	bgt.n	800fbd6 <__swbuf_r+0x42>
 800fbcc:	4621      	mov	r1, r4
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f000 f948 	bl	800fe64 <_fflush_r>
 800fbd4:	bb28      	cbnz	r0, 800fc22 <__swbuf_r+0x8e>
 800fbd6:	68a3      	ldr	r3, [r4, #8]
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	60a3      	str	r3, [r4, #8]
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	6022      	str	r2, [r4, #0]
 800fbe2:	701e      	strb	r6, [r3, #0]
 800fbe4:	6963      	ldr	r3, [r4, #20]
 800fbe6:	3001      	adds	r0, #1
 800fbe8:	4283      	cmp	r3, r0
 800fbea:	d004      	beq.n	800fbf6 <__swbuf_r+0x62>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	07db      	lsls	r3, r3, #31
 800fbf0:	d519      	bpl.n	800fc26 <__swbuf_r+0x92>
 800fbf2:	2e0a      	cmp	r6, #10
 800fbf4:	d117      	bne.n	800fc26 <__swbuf_r+0x92>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f000 f933 	bl	800fe64 <_fflush_r>
 800fbfe:	b190      	cbz	r0, 800fc26 <__swbuf_r+0x92>
 800fc00:	e00f      	b.n	800fc22 <__swbuf_r+0x8e>
 800fc02:	4b0b      	ldr	r3, [pc, #44]	; (800fc30 <__swbuf_r+0x9c>)
 800fc04:	429c      	cmp	r4, r3
 800fc06:	d101      	bne.n	800fc0c <__swbuf_r+0x78>
 800fc08:	68ac      	ldr	r4, [r5, #8]
 800fc0a:	e7d0      	b.n	800fbae <__swbuf_r+0x1a>
 800fc0c:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <__swbuf_r+0xa0>)
 800fc0e:	429c      	cmp	r4, r3
 800fc10:	bf08      	it	eq
 800fc12:	68ec      	ldreq	r4, [r5, #12]
 800fc14:	e7cb      	b.n	800fbae <__swbuf_r+0x1a>
 800fc16:	4621      	mov	r1, r4
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f000 f81f 	bl	800fc5c <__swsetup_r>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d0cc      	beq.n	800fbbc <__swbuf_r+0x28>
 800fc22:	f04f 37ff 	mov.w	r7, #4294967295
 800fc26:	4638      	mov	r0, r7
 800fc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	08012b28 	.word	0x08012b28
 800fc30:	08012b48 	.word	0x08012b48
 800fc34:	08012b08 	.word	0x08012b08

0800fc38 <_write_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4c07      	ldr	r4, [pc, #28]	; (800fc58 <_write_r+0x20>)
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	4608      	mov	r0, r1
 800fc40:	4611      	mov	r1, r2
 800fc42:	2200      	movs	r2, #0
 800fc44:	6022      	str	r2, [r4, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	f7f0 fe59 	bl	80008fe <_write>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_write_r+0x1e>
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_write_r+0x1e>
 800fc54:	602b      	str	r3, [r5, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	20006d48 	.word	0x20006d48

0800fc5c <__swsetup_r>:
 800fc5c:	4b32      	ldr	r3, [pc, #200]	; (800fd28 <__swsetup_r+0xcc>)
 800fc5e:	b570      	push	{r4, r5, r6, lr}
 800fc60:	681d      	ldr	r5, [r3, #0]
 800fc62:	4606      	mov	r6, r0
 800fc64:	460c      	mov	r4, r1
 800fc66:	b125      	cbz	r5, 800fc72 <__swsetup_r+0x16>
 800fc68:	69ab      	ldr	r3, [r5, #24]
 800fc6a:	b913      	cbnz	r3, 800fc72 <__swsetup_r+0x16>
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	f7ff fb3b 	bl	800f2e8 <__sinit>
 800fc72:	4b2e      	ldr	r3, [pc, #184]	; (800fd2c <__swsetup_r+0xd0>)
 800fc74:	429c      	cmp	r4, r3
 800fc76:	d10f      	bne.n	800fc98 <__swsetup_r+0x3c>
 800fc78:	686c      	ldr	r4, [r5, #4]
 800fc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	0715      	lsls	r5, r2, #28
 800fc82:	d42c      	bmi.n	800fcde <__swsetup_r+0x82>
 800fc84:	06d0      	lsls	r0, r2, #27
 800fc86:	d411      	bmi.n	800fcac <__swsetup_r+0x50>
 800fc88:	2209      	movs	r2, #9
 800fc8a:	6032      	str	r2, [r6, #0]
 800fc8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc90:	81a3      	strh	r3, [r4, #12]
 800fc92:	f04f 30ff 	mov.w	r0, #4294967295
 800fc96:	e03e      	b.n	800fd16 <__swsetup_r+0xba>
 800fc98:	4b25      	ldr	r3, [pc, #148]	; (800fd30 <__swsetup_r+0xd4>)
 800fc9a:	429c      	cmp	r4, r3
 800fc9c:	d101      	bne.n	800fca2 <__swsetup_r+0x46>
 800fc9e:	68ac      	ldr	r4, [r5, #8]
 800fca0:	e7eb      	b.n	800fc7a <__swsetup_r+0x1e>
 800fca2:	4b24      	ldr	r3, [pc, #144]	; (800fd34 <__swsetup_r+0xd8>)
 800fca4:	429c      	cmp	r4, r3
 800fca6:	bf08      	it	eq
 800fca8:	68ec      	ldreq	r4, [r5, #12]
 800fcaa:	e7e6      	b.n	800fc7a <__swsetup_r+0x1e>
 800fcac:	0751      	lsls	r1, r2, #29
 800fcae:	d512      	bpl.n	800fcd6 <__swsetup_r+0x7a>
 800fcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcb2:	b141      	cbz	r1, 800fcc6 <__swsetup_r+0x6a>
 800fcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcb8:	4299      	cmp	r1, r3
 800fcba:	d002      	beq.n	800fcc2 <__swsetup_r+0x66>
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f7ff fba5 	bl	800f40c <_free_r>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	6363      	str	r3, [r4, #52]	; 0x34
 800fcc6:	89a3      	ldrh	r3, [r4, #12]
 800fcc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fccc:	81a3      	strh	r3, [r4, #12]
 800fcce:	2300      	movs	r3, #0
 800fcd0:	6063      	str	r3, [r4, #4]
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	89a3      	ldrh	r3, [r4, #12]
 800fcd8:	f043 0308 	orr.w	r3, r3, #8
 800fcdc:	81a3      	strh	r3, [r4, #12]
 800fcde:	6923      	ldr	r3, [r4, #16]
 800fce0:	b94b      	cbnz	r3, 800fcf6 <__swsetup_r+0x9a>
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcec:	d003      	beq.n	800fcf6 <__swsetup_r+0x9a>
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f000 f917 	bl	800ff24 <__smakebuf_r>
 800fcf6:	89a2      	ldrh	r2, [r4, #12]
 800fcf8:	f012 0301 	ands.w	r3, r2, #1
 800fcfc:	d00c      	beq.n	800fd18 <__swsetup_r+0xbc>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	60a3      	str	r3, [r4, #8]
 800fd02:	6963      	ldr	r3, [r4, #20]
 800fd04:	425b      	negs	r3, r3
 800fd06:	61a3      	str	r3, [r4, #24]
 800fd08:	6923      	ldr	r3, [r4, #16]
 800fd0a:	b953      	cbnz	r3, 800fd22 <__swsetup_r+0xc6>
 800fd0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fd14:	d1ba      	bne.n	800fc8c <__swsetup_r+0x30>
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	0792      	lsls	r2, r2, #30
 800fd1a:	bf58      	it	pl
 800fd1c:	6963      	ldrpl	r3, [r4, #20]
 800fd1e:	60a3      	str	r3, [r4, #8]
 800fd20:	e7f2      	b.n	800fd08 <__swsetup_r+0xac>
 800fd22:	2000      	movs	r0, #0
 800fd24:	e7f7      	b.n	800fd16 <__swsetup_r+0xba>
 800fd26:	bf00      	nop
 800fd28:	20000028 	.word	0x20000028
 800fd2c:	08012b28 	.word	0x08012b28
 800fd30:	08012b48 	.word	0x08012b48
 800fd34:	08012b08 	.word	0x08012b08

0800fd38 <_close_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4c06      	ldr	r4, [pc, #24]	; (800fd54 <_close_r+0x1c>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4605      	mov	r5, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	6023      	str	r3, [r4, #0]
 800fd44:	f7f0 fdf7 	bl	8000936 <_close>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_close_r+0x1a>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_close_r+0x1a>
 800fd50:	602b      	str	r3, [r5, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	20006d48 	.word	0x20006d48

0800fd58 <__sflush_r>:
 800fd58:	898a      	ldrh	r2, [r1, #12]
 800fd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5e:	4605      	mov	r5, r0
 800fd60:	0710      	lsls	r0, r2, #28
 800fd62:	460c      	mov	r4, r1
 800fd64:	d458      	bmi.n	800fe18 <__sflush_r+0xc0>
 800fd66:	684b      	ldr	r3, [r1, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	dc05      	bgt.n	800fd78 <__sflush_r+0x20>
 800fd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	dc02      	bgt.n	800fd78 <__sflush_r+0x20>
 800fd72:	2000      	movs	r0, #0
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd7a:	2e00      	cmp	r6, #0
 800fd7c:	d0f9      	beq.n	800fd72 <__sflush_r+0x1a>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd84:	682f      	ldr	r7, [r5, #0]
 800fd86:	6a21      	ldr	r1, [r4, #32]
 800fd88:	602b      	str	r3, [r5, #0]
 800fd8a:	d032      	beq.n	800fdf2 <__sflush_r+0x9a>
 800fd8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	075a      	lsls	r2, r3, #29
 800fd92:	d505      	bpl.n	800fda0 <__sflush_r+0x48>
 800fd94:	6863      	ldr	r3, [r4, #4]
 800fd96:	1ac0      	subs	r0, r0, r3
 800fd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd9a:	b10b      	cbz	r3, 800fda0 <__sflush_r+0x48>
 800fd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd9e:	1ac0      	subs	r0, r0, r3
 800fda0:	2300      	movs	r3, #0
 800fda2:	4602      	mov	r2, r0
 800fda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fda6:	6a21      	ldr	r1, [r4, #32]
 800fda8:	4628      	mov	r0, r5
 800fdaa:	47b0      	blx	r6
 800fdac:	1c43      	adds	r3, r0, #1
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	d106      	bne.n	800fdc0 <__sflush_r+0x68>
 800fdb2:	6829      	ldr	r1, [r5, #0]
 800fdb4:	291d      	cmp	r1, #29
 800fdb6:	d848      	bhi.n	800fe4a <__sflush_r+0xf2>
 800fdb8:	4a29      	ldr	r2, [pc, #164]	; (800fe60 <__sflush_r+0x108>)
 800fdba:	40ca      	lsrs	r2, r1
 800fdbc:	07d6      	lsls	r6, r2, #31
 800fdbe:	d544      	bpl.n	800fe4a <__sflush_r+0xf2>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	6062      	str	r2, [r4, #4]
 800fdc4:	04d9      	lsls	r1, r3, #19
 800fdc6:	6922      	ldr	r2, [r4, #16]
 800fdc8:	6022      	str	r2, [r4, #0]
 800fdca:	d504      	bpl.n	800fdd6 <__sflush_r+0x7e>
 800fdcc:	1c42      	adds	r2, r0, #1
 800fdce:	d101      	bne.n	800fdd4 <__sflush_r+0x7c>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	b903      	cbnz	r3, 800fdd6 <__sflush_r+0x7e>
 800fdd4:	6560      	str	r0, [r4, #84]	; 0x54
 800fdd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdd8:	602f      	str	r7, [r5, #0]
 800fdda:	2900      	cmp	r1, #0
 800fddc:	d0c9      	beq.n	800fd72 <__sflush_r+0x1a>
 800fdde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fde2:	4299      	cmp	r1, r3
 800fde4:	d002      	beq.n	800fdec <__sflush_r+0x94>
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7ff fb10 	bl	800f40c <_free_r>
 800fdec:	2000      	movs	r0, #0
 800fdee:	6360      	str	r0, [r4, #52]	; 0x34
 800fdf0:	e7c0      	b.n	800fd74 <__sflush_r+0x1c>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	47b0      	blx	r6
 800fdf8:	1c41      	adds	r1, r0, #1
 800fdfa:	d1c8      	bne.n	800fd8e <__sflush_r+0x36>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d0c5      	beq.n	800fd8e <__sflush_r+0x36>
 800fe02:	2b1d      	cmp	r3, #29
 800fe04:	d001      	beq.n	800fe0a <__sflush_r+0xb2>
 800fe06:	2b16      	cmp	r3, #22
 800fe08:	d101      	bne.n	800fe0e <__sflush_r+0xb6>
 800fe0a:	602f      	str	r7, [r5, #0]
 800fe0c:	e7b1      	b.n	800fd72 <__sflush_r+0x1a>
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe14:	81a3      	strh	r3, [r4, #12]
 800fe16:	e7ad      	b.n	800fd74 <__sflush_r+0x1c>
 800fe18:	690f      	ldr	r7, [r1, #16]
 800fe1a:	2f00      	cmp	r7, #0
 800fe1c:	d0a9      	beq.n	800fd72 <__sflush_r+0x1a>
 800fe1e:	0793      	lsls	r3, r2, #30
 800fe20:	680e      	ldr	r6, [r1, #0]
 800fe22:	bf08      	it	eq
 800fe24:	694b      	ldreq	r3, [r1, #20]
 800fe26:	600f      	str	r7, [r1, #0]
 800fe28:	bf18      	it	ne
 800fe2a:	2300      	movne	r3, #0
 800fe2c:	eba6 0807 	sub.w	r8, r6, r7
 800fe30:	608b      	str	r3, [r1, #8]
 800fe32:	f1b8 0f00 	cmp.w	r8, #0
 800fe36:	dd9c      	ble.n	800fd72 <__sflush_r+0x1a>
 800fe38:	4643      	mov	r3, r8
 800fe3a:	463a      	mov	r2, r7
 800fe3c:	6a21      	ldr	r1, [r4, #32]
 800fe3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b0      	blx	r6
 800fe44:	2800      	cmp	r0, #0
 800fe46:	dc06      	bgt.n	800fe56 <__sflush_r+0xfe>
 800fe48:	89a3      	ldrh	r3, [r4, #12]
 800fe4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4e:	81a3      	strh	r3, [r4, #12]
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295
 800fe54:	e78e      	b.n	800fd74 <__sflush_r+0x1c>
 800fe56:	4407      	add	r7, r0
 800fe58:	eba8 0800 	sub.w	r8, r8, r0
 800fe5c:	e7e9      	b.n	800fe32 <__sflush_r+0xda>
 800fe5e:	bf00      	nop
 800fe60:	20400001 	.word	0x20400001

0800fe64 <_fflush_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	690b      	ldr	r3, [r1, #16]
 800fe68:	4605      	mov	r5, r0
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	b1db      	cbz	r3, 800fea6 <_fflush_r+0x42>
 800fe6e:	b118      	cbz	r0, 800fe78 <_fflush_r+0x14>
 800fe70:	6983      	ldr	r3, [r0, #24]
 800fe72:	b90b      	cbnz	r3, 800fe78 <_fflush_r+0x14>
 800fe74:	f7ff fa38 	bl	800f2e8 <__sinit>
 800fe78:	4b0c      	ldr	r3, [pc, #48]	; (800feac <_fflush_r+0x48>)
 800fe7a:	429c      	cmp	r4, r3
 800fe7c:	d109      	bne.n	800fe92 <_fflush_r+0x2e>
 800fe7e:	686c      	ldr	r4, [r5, #4]
 800fe80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe84:	b17b      	cbz	r3, 800fea6 <_fflush_r+0x42>
 800fe86:	4621      	mov	r1, r4
 800fe88:	4628      	mov	r0, r5
 800fe8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe8e:	f7ff bf63 	b.w	800fd58 <__sflush_r>
 800fe92:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <_fflush_r+0x4c>)
 800fe94:	429c      	cmp	r4, r3
 800fe96:	d101      	bne.n	800fe9c <_fflush_r+0x38>
 800fe98:	68ac      	ldr	r4, [r5, #8]
 800fe9a:	e7f1      	b.n	800fe80 <_fflush_r+0x1c>
 800fe9c:	4b05      	ldr	r3, [pc, #20]	; (800feb4 <_fflush_r+0x50>)
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	bf08      	it	eq
 800fea2:	68ec      	ldreq	r4, [r5, #12]
 800fea4:	e7ec      	b.n	800fe80 <_fflush_r+0x1c>
 800fea6:	2000      	movs	r0, #0
 800fea8:	bd38      	pop	{r3, r4, r5, pc}
 800feaa:	bf00      	nop
 800feac:	08012b28 	.word	0x08012b28
 800feb0:	08012b48 	.word	0x08012b48
 800feb4:	08012b08 	.word	0x08012b08

0800feb8 <_lseek_r>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	4c07      	ldr	r4, [pc, #28]	; (800fed8 <_lseek_r+0x20>)
 800febc:	4605      	mov	r5, r0
 800febe:	4608      	mov	r0, r1
 800fec0:	4611      	mov	r1, r2
 800fec2:	2200      	movs	r2, #0
 800fec4:	6022      	str	r2, [r4, #0]
 800fec6:	461a      	mov	r2, r3
 800fec8:	f7f0 fd5c 	bl	8000984 <_lseek>
 800fecc:	1c43      	adds	r3, r0, #1
 800fece:	d102      	bne.n	800fed6 <_lseek_r+0x1e>
 800fed0:	6823      	ldr	r3, [r4, #0]
 800fed2:	b103      	cbz	r3, 800fed6 <_lseek_r+0x1e>
 800fed4:	602b      	str	r3, [r5, #0]
 800fed6:	bd38      	pop	{r3, r4, r5, pc}
 800fed8:	20006d48 	.word	0x20006d48

0800fedc <__swhatbuf_r>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	460e      	mov	r6, r1
 800fee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee4:	2900      	cmp	r1, #0
 800fee6:	b096      	sub	sp, #88	; 0x58
 800fee8:	4614      	mov	r4, r2
 800feea:	461d      	mov	r5, r3
 800feec:	da07      	bge.n	800fefe <__swhatbuf_r+0x22>
 800feee:	2300      	movs	r3, #0
 800fef0:	602b      	str	r3, [r5, #0]
 800fef2:	89b3      	ldrh	r3, [r6, #12]
 800fef4:	061a      	lsls	r2, r3, #24
 800fef6:	d410      	bmi.n	800ff1a <__swhatbuf_r+0x3e>
 800fef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fefc:	e00e      	b.n	800ff1c <__swhatbuf_r+0x40>
 800fefe:	466a      	mov	r2, sp
 800ff00:	f000 f864 	bl	800ffcc <_fstat_r>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	dbf2      	blt.n	800feee <__swhatbuf_r+0x12>
 800ff08:	9a01      	ldr	r2, [sp, #4]
 800ff0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff12:	425a      	negs	r2, r3
 800ff14:	415a      	adcs	r2, r3
 800ff16:	602a      	str	r2, [r5, #0]
 800ff18:	e7ee      	b.n	800fef8 <__swhatbuf_r+0x1c>
 800ff1a:	2340      	movs	r3, #64	; 0x40
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	6023      	str	r3, [r4, #0]
 800ff20:	b016      	add	sp, #88	; 0x58
 800ff22:	bd70      	pop	{r4, r5, r6, pc}

0800ff24 <__smakebuf_r>:
 800ff24:	898b      	ldrh	r3, [r1, #12]
 800ff26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff28:	079d      	lsls	r5, r3, #30
 800ff2a:	4606      	mov	r6, r0
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	d507      	bpl.n	800ff40 <__smakebuf_r+0x1c>
 800ff30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	6123      	str	r3, [r4, #16]
 800ff38:	2301      	movs	r3, #1
 800ff3a:	6163      	str	r3, [r4, #20]
 800ff3c:	b002      	add	sp, #8
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	ab01      	add	r3, sp, #4
 800ff42:	466a      	mov	r2, sp
 800ff44:	f7ff ffca 	bl	800fedc <__swhatbuf_r>
 800ff48:	9900      	ldr	r1, [sp, #0]
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f7ff faab 	bl	800f4a8 <_malloc_r>
 800ff52:	b948      	cbnz	r0, 800ff68 <__smakebuf_r+0x44>
 800ff54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff58:	059a      	lsls	r2, r3, #22
 800ff5a:	d4ef      	bmi.n	800ff3c <__smakebuf_r+0x18>
 800ff5c:	f023 0303 	bic.w	r3, r3, #3
 800ff60:	f043 0302 	orr.w	r3, r3, #2
 800ff64:	81a3      	strh	r3, [r4, #12]
 800ff66:	e7e3      	b.n	800ff30 <__smakebuf_r+0xc>
 800ff68:	4b0d      	ldr	r3, [pc, #52]	; (800ffa0 <__smakebuf_r+0x7c>)
 800ff6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	6020      	str	r0, [r4, #0]
 800ff70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff74:	81a3      	strh	r3, [r4, #12]
 800ff76:	9b00      	ldr	r3, [sp, #0]
 800ff78:	6163      	str	r3, [r4, #20]
 800ff7a:	9b01      	ldr	r3, [sp, #4]
 800ff7c:	6120      	str	r0, [r4, #16]
 800ff7e:	b15b      	cbz	r3, 800ff98 <__smakebuf_r+0x74>
 800ff80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff84:	4630      	mov	r0, r6
 800ff86:	f000 f833 	bl	800fff0 <_isatty_r>
 800ff8a:	b128      	cbz	r0, 800ff98 <__smakebuf_r+0x74>
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	f023 0303 	bic.w	r3, r3, #3
 800ff92:	f043 0301 	orr.w	r3, r3, #1
 800ff96:	81a3      	strh	r3, [r4, #12]
 800ff98:	89a3      	ldrh	r3, [r4, #12]
 800ff9a:	431d      	orrs	r5, r3
 800ff9c:	81a5      	strh	r5, [r4, #12]
 800ff9e:	e7cd      	b.n	800ff3c <__smakebuf_r+0x18>
 800ffa0:	0800f2b1 	.word	0x0800f2b1

0800ffa4 <__malloc_lock>:
 800ffa4:	4770      	bx	lr

0800ffa6 <__malloc_unlock>:
 800ffa6:	4770      	bx	lr

0800ffa8 <_read_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4c07      	ldr	r4, [pc, #28]	; (800ffc8 <_read_r+0x20>)
 800ffac:	4605      	mov	r5, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	6022      	str	r2, [r4, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f7f0 fc84 	bl	80008c4 <_read>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_read_r+0x1e>
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_read_r+0x1e>
 800ffc4:	602b      	str	r3, [r5, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	20006d48 	.word	0x20006d48

0800ffcc <_fstat_r>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	4c07      	ldr	r4, [pc, #28]	; (800ffec <_fstat_r+0x20>)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	f7f0 fcb8 	bl	800094e <_fstat>
 800ffde:	1c43      	adds	r3, r0, #1
 800ffe0:	d102      	bne.n	800ffe8 <_fstat_r+0x1c>
 800ffe2:	6823      	ldr	r3, [r4, #0]
 800ffe4:	b103      	cbz	r3, 800ffe8 <_fstat_r+0x1c>
 800ffe6:	602b      	str	r3, [r5, #0]
 800ffe8:	bd38      	pop	{r3, r4, r5, pc}
 800ffea:	bf00      	nop
 800ffec:	20006d48 	.word	0x20006d48

0800fff0 <_isatty_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4c06      	ldr	r4, [pc, #24]	; (801000c <_isatty_r+0x1c>)
 800fff4:	2300      	movs	r3, #0
 800fff6:	4605      	mov	r5, r0
 800fff8:	4608      	mov	r0, r1
 800fffa:	6023      	str	r3, [r4, #0]
 800fffc:	f7f0 fcb7 	bl	800096e <_isatty>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_isatty_r+0x1a>
 8010004:	6823      	ldr	r3, [r4, #0]
 8010006:	b103      	cbz	r3, 801000a <_isatty_r+0x1a>
 8010008:	602b      	str	r3, [r5, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	20006d48 	.word	0x20006d48

08010010 <_init>:
 8010010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010012:	bf00      	nop
 8010014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010016:	bc08      	pop	{r3}
 8010018:	469e      	mov	lr, r3
 801001a:	4770      	bx	lr

0801001c <_fini>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	bf00      	nop
 8010020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010022:	bc08      	pop	{r3}
 8010024:	469e      	mov	lr, r3
 8010026:	4770      	bx	lr
