
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e44  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8b4  0800e8b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8bc  0800e8bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8bc  0800e8bc  0001e8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8c0  0800e8c0  0001e8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e8c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006824  20000078  0800e93c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000689c  0800e93c  0002689c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249e7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a03  00000000  00000000  00044a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00049498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  0004a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d899  00000000  00000000  0004b080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000192c3  00000000  00000000  00078919  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e47f1  00000000  00000000  00091bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001763cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  00176448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ca58 	.word	0x0800ca58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800ca58 	.word	0x0800ca58

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b54      	ldr	r3, [pc, #336]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a53      	ldr	r2, [pc, #332]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b51      	ldr	r3, [pc, #324]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a45      	ldr	r2, [pc, #276]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b43      	ldr	r3, [pc, #268]	; (80006fc <MX_GPIO_Init+0x16c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a3e      	ldr	r2, [pc, #248]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <MX_GPIO_Init+0x16c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <MX_GPIO_Init+0x16c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a37      	ldr	r2, [pc, #220]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b35      	ldr	r3, [pc, #212]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <MX_GPIO_Init+0x16c>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <MX_GPIO_Init+0x16c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|LD2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0181 	movw	r1, #16513	; 0x4081
 8000654:	482a      	ldr	r0, [pc, #168]	; (8000700 <MX_GPIO_Init+0x170>)
 8000656:	f001 fcc7 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4829      	ldr	r0, [pc, #164]	; (8000704 <MX_GPIO_Init+0x174>)
 8000660:	f001 fcc2 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_GPIO_Init+0x178>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4824      	ldr	r0, [pc, #144]	; (800070c <MX_GPIO_Init+0x17c>)
 800067a:	f001 fb0b 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|LD2_Pin;
 800067e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <MX_GPIO_Init+0x170>)
 8000698:	f001 fafc 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800069c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ae:	2307      	movs	r3, #7
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_GPIO_Init+0x180>)
 80006ba:	f001 faeb 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_GPIO_Init+0x174>)
 80006d6:	f001 fadd 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_GPIO_Init+0x174>)
 80006ee:	f001 fad1 	bl	8001c94 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	; 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400
 8000704:	40021800 	.word	0x40021800
 8000708:	10110000 	.word	0x10110000
 800070c:	40020800 	.word	0x40020800
 8000710:	40020c00 	.word	0x40020c00

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 f9ae 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f808 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff ff36 	bl	8000590 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000724:	f002 f8f4 	bl	8002910 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000728:	f002 fa48 	bl	8002bbc <MX_LWIP_Process>
 800072c:	e7fc      	b.n	8000728 <main+0x14>
	...

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00b fa9e 	bl	800bc80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	; 0xa8
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fc4b 	bl	8002050 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f820 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2105      	movs	r1, #5
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fea4 	bl	8002530 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ee:	f000 f809 	bl	8000804 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <HAL_MspInit+0x4c>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f930 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
	}

return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
	}
	return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
	return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x50>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x16>
		heap_end = &end;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <_sbrk+0x50>)
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <_sbrk+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <_sbrk+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <_sbrk+0x50>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	466a      	mov	r2, sp
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d905      	bls.n	80009d2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <_sbrk+0x58>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
 80009d0:	e006      	b.n	80009e0 <_sbrk+0x44>
	}

	heap_end += incr;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <_sbrk+0x50>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <_sbrk+0x50>)
 80009dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000094 	.word	0x20000094
 80009f0:	200068a0 	.word	0x200068a0
 80009f4:	20006898 	.word	0x20006898

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemInit+0x28>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <SystemInit+0x28>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x28>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
  ldr  r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd3 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f00b f8d7 	bl	800bc04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fe5d 	bl	8000714 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a5c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a60:	0800e8c4 	.word	0x0800e8c4
  ldr  r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a68:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000a6c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000a70:	2000689c 	.word	0x2000689c

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92f 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feb2 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f939 	bl	8000d52 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90f 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000210 	.word	0x20000210

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000210 	.word	0x20000210

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_Delay+0x40>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5c 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb0 	bl	8000cc0 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000d7c:	4baa      	ldr	r3, [pc, #680]	; (8001028 <HAL_ETH_Init+0x2bc>)
 8000d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e185      	b.n	800109e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f001 ff14 	bl	8002bd4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b9e      	ldr	r3, [pc, #632]	; (800102c <HAL_ETH_Init+0x2c0>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	4a9d      	ldr	r2, [pc, #628]	; (800102c <HAL_ETH_Init+0x2c0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbc:	4b9b      	ldr	r3, [pc, #620]	; (800102c <HAL_ETH_Init+0x2c0>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000dc8:	4b99      	ldr	r3, [pc, #612]	; (8001030 <HAL_ETH_Init+0x2c4>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4a98      	ldr	r2, [pc, #608]	; (8001030 <HAL_ETH_Init+0x2c4>)
 8000dce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000dd2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000dd4:	4b96      	ldr	r3, [pc, #600]	; (8001030 <HAL_ETH_Init+0x2c4>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	4994      	ldr	r1, [pc, #592]	; (8001030 <HAL_ETH_Init+0x2c4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dfa:	f7ff fea3 	bl	8000b44 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e00:	e011      	b.n	8000e26 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e02:	f7ff fe9f 	bl	8000b44 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e10:	d909      	bls.n	8000e26 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e13b      	b.n	800109e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e4      	bne.n	8000e02 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f023 031c 	bic.w	r3, r3, #28
 8000e46:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e48:	f001 fd30 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8000e4c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4a78      	ldr	r2, [pc, #480]	; (8001034 <HAL_ETH_Init+0x2c8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d908      	bls.n	8000e68 <HAL_ETH_Init+0xfc>
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4a77      	ldr	r2, [pc, #476]	; (8001038 <HAL_ETH_Init+0x2cc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d804      	bhi.n	8000e68 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e027      	b.n	8000eb8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	4a73      	ldr	r2, [pc, #460]	; (8001038 <HAL_ETH_Init+0x2cc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d908      	bls.n	8000e82 <HAL_ETH_Init+0x116>
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4a72      	ldr	r2, [pc, #456]	; (800103c <HAL_ETH_Init+0x2d0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d804      	bhi.n	8000e82 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f043 030c 	orr.w	r3, r3, #12
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	e01a      	b.n	8000eb8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4a6d      	ldr	r2, [pc, #436]	; (800103c <HAL_ETH_Init+0x2d0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d903      	bls.n	8000e92 <HAL_ETH_Init+0x126>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4a6c      	ldr	r2, [pc, #432]	; (8001040 <HAL_ETH_Init+0x2d4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d911      	bls.n	8000eb6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4a6a      	ldr	r2, [pc, #424]	; (8001040 <HAL_ETH_Init+0x2d4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d908      	bls.n	8000eac <HAL_ETH_Init+0x140>
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4a69      	ldr	r2, [pc, #420]	; (8001044 <HAL_ETH_Init+0x2d8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d804      	bhi.n	8000eac <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e005      	b.n	8000eb8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	e000      	b.n	8000eb8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000eb6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	69fa      	ldr	r2, [r7, #28]
 8000ebe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fb9a 	bl	8001600 <HAL_ETH_WritePHYRegister>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000ed6:	6939      	ldr	r1, [r7, #16]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 fc27 	bl	800172c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e0d9      	b.n	800109e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	f7ff fe36 	bl	8000b5c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80a7 	beq.w	8001048 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000efa:	f7ff fe23 	bl	8000b44 <HAL_GetTick>
 8000efe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	461a      	mov	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fb11 	bl	8001530 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f0e:	f7ff fe19 	bl	8000b44 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d90f      	bls.n	8000f40 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fc00 	bl	800172c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0ae      	b.n	800109e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0da      	beq.n	8000f00 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fb55 	bl	8001600 <HAL_ETH_WritePHYRegister>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f60:	6939      	ldr	r1, [r7, #16]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fbe2 	bl	800172c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f70:	2301      	movs	r3, #1
 8000f72:	e094      	b.n	800109e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f74:	f7ff fde6 	bl	8000b44 <HAL_GetTick>
 8000f78:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2101      	movs	r1, #1
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fad4 	bl	8001530 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f88:	f7ff fddc 	bl	8000b44 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d90f      	bls.n	8000fba <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fbc3 	bl	800172c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e071      	b.n	800109e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0da      	beq.n	8000f7a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	461a      	mov	r2, r3
 8000fca:	211f      	movs	r1, #31
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 faaf 	bl	8001530 <HAL_ETH_ReadPHYRegister>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fdc:	6939      	ldr	r1, [r7, #16]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fba4 	bl	800172c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fec:	2301      	movs	r3, #1
 8000fee:	e056      	b.n	800109e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	e002      	b.n	800100a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	e037      	b.n	800108c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	e032      	b.n	800108c <HAL_ETH_Init+0x320>
 8001026:	bf00      	nop
 8001028:	03938700 	.word	0x03938700
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	01312cff 	.word	0x01312cff
 8001038:	02160ebf 	.word	0x02160ebf
 800103c:	039386ff 	.word	0x039386ff
 8001040:	05f5e0ff 	.word	0x05f5e0ff
 8001044:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001058:	4313      	orrs	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 facd 	bl	8001600 <HAL_ETH_WritePHYRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb5a 	bl	800172c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001084:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001088:	f7ff fd68 	bl	8000b5c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fb4c 	bl	800172c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop

080010a8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_ETH_DMATxDescListInit+0x20>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e052      	b.n	800116e <HAL_ETH_DMATxDescListInit+0xc6>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e030      	b.n	8001146 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	015b      	lsls	r3, r3, #5
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010f4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	d208      	bcs.n	800113a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	015b      	lsls	r3, r3, #5
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	461a      	mov	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	e002      	b.n	8001140 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d3ca      	bcc.n	80010e4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001158:	3310      	adds	r3, #16
 800115a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800117a:	b480      	push	{r7}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ETH_DMARxDescListInit+0x20>
 8001196:	2302      	movs	r3, #2
 8001198:	e056      	b.n	8001248 <HAL_ETH_DMARxDescListInit+0xce>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e034      	b.n	8001220 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011c6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80011ce:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d105      	bne.n	80011f8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d208      	bcs.n	8001214 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	4413      	add	r3, r2
 800120c:	461a      	mov	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	e002      	b.n	800121a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3c6      	bcc.n	80011b6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001232:	330c      	adds	r3, #12
 8001234:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ETH_TransmitFrame+0x24>
 8001274:	2302      	movs	r3, #2
 8001276:	e0cd      	b.n	8001414 <HAL_ETH_TransmitFrame+0x1c0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800129e:	2301      	movs	r3, #1
 80012a0:	e0b8      	b.n	8001414 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da09      	bge.n	80012c0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2212      	movs	r2, #18
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0a9      	b.n	8001414 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d915      	bls.n	80012f6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4a54      	ldr	r2, [pc, #336]	; (8001420 <HAL_ETH_TransmitFrame+0x1cc>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_ETH_TransmitFrame+0x1cc>)
 80012da:	fba3 1302 	umull	r1, r3, r3, r2
 80012de:	0a9b      	lsrs	r3, r3, #10
 80012e0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e001      	b.n	80012fa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d11c      	bne.n	800133a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800130e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800131a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800132a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
 8001338:	e04b      	b.n	80013d2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e044      	b.n	80013ca <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800134e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001364:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800136e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3b01      	subs	r3, #1
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	429a      	cmp	r2, r3
 8001378:	d116      	bne.n	80013a8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001388:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4a25      	ldr	r2, [pc, #148]	; (8001424 <HAL_ETH_TransmitFrame+0x1d0>)
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4413      	add	r3, r2
 8001396:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800139a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013a6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013b6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	461a      	mov	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3301      	adds	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3b6      	bcc.n	8001340 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013da:	3314      	adds	r3, #20
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00d      	beq.n	8001402 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ee:	3314      	adds	r3, #20
 80013f0:	2204      	movs	r2, #4
 80013f2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fc:	3304      	adds	r3, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	ac02b00b 	.word	0xac02b00b
 8001424:	fffffa0c 	.word	0xfffffa0c

08001428 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ETH_GetReceivedFrame+0x1a>
 800143e:	2302      	movs	r3, #2
 8001440:	e070      	b.n	8001524 <HAL_ETH_GetReceivedFrame+0xfc>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db5a      	blt.n	8001512 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d030      	beq.n	80014cc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001498:	3b04      	subs	r3, #4
 800149a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e02b      	b.n	8001524 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d010      	beq.n	80014fc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
 80014fa:	e00a      	b.n	8001512 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	460b      	mov	r3, r1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b82      	cmp	r3, #130	; 0x82
 8001550:	d101      	bne.n	8001556 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	e050      	b.n	80015f8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2282      	movs	r2, #130	; 0x82
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 031c 	and.w	r3, r3, #28
 800156c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8a1b      	ldrh	r3, [r3, #16]
 8001572:	02db      	lsls	r3, r3, #11
 8001574:	b29b      	uxth	r3, r3
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	019b      	lsls	r3, r3, #6
 8001580:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f023 0302 	bic.w	r3, r3, #2
 8001590:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015a2:	f7ff facf 	bl	8000b44 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015a8:	e015      	b.n	80015d6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80015aa:	f7ff facb 	bl	8000b44 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d309      	bcc.n	80015ce <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e014      	b.n	80015f8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e4      	bne.n	80015aa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	460b      	mov	r3, r1
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b42      	cmp	r3, #66	; 0x42
 8001620:	d101      	bne.n	8001626 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	e04e      	b.n	80016c4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 031c 	and.w	r3, r3, #28
 800163c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8a1b      	ldrh	r3, [r3, #16]
 8001642:	02db      	lsls	r3, r3, #11
 8001644:	b29b      	uxth	r3, r3
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800167c:	f7ff fa62 	bl	8000b44 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001682:	e015      	b.n	80016b0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001684:	f7ff fa5e 	bl	8000b44 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d309      	bcc.n	80016a8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e00d      	b.n	80016c4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1e4      	bne.n	8001684 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ETH_Start+0x16>
 80016de:	2302      	movs	r3, #2
 80016e0:	e01f      	b.n	8001722 <HAL_ETH_Start+0x56>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa1c 	bl	8001b30 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fa36 	bl	8001b6a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fa80 	bl	8001c04 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa4d 	bl	8001ba4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fa62 	bl	8001bd4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0b0      	sub	sp, #192	; 0xc0
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800175a:	2300      	movs	r3, #0
 800175c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	663b      	str	r3, [r7, #96]	; 0x60
 8001778:	e001      	b.n	800177e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800177e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001782:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001788:	2300      	movs	r3, #0
 800178a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001804:	4bac      	ldr	r3, [pc, #688]	; (8001ab8 <ETH_MACDMAConfig+0x38c>)
 8001806:	4013      	ands	r3, r2
 8001808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800180c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800180e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001810:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001814:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001818:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800181e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001822:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001826:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800182c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800182e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001830:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001834:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001838:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800183a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800183c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800183e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001840:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001842:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001846:	4313      	orrs	r3, r2
 8001848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001854:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff f97b 	bl	8000b5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800186e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001870:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001874:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001878:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800187a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800187e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001884:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800188a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800188c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001890:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001894:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800189c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800189e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff f956 	bl	8000b5c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018e0:	4013      	ands	r3, r2
 80018e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80018e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80018ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80018f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80018f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80018f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80018fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80018fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001902:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001908:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800190a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800190e:	4313      	orrs	r3, r2
 8001910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800191c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff f917 	bl	8000b5c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001936:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001938:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800193c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff f902 	bl	8000b5c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001960:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800196a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001974:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001986:	2304      	movs	r3, #4
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800198a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	3318      	adds	r3, #24
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <ETH_MACDMAConfig+0x390>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80019cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80019d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80019d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80019d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80019d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80019d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80019da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80019dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80019de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80019e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80019e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80019e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80019ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f0:	4313      	orrs	r3, r2
 80019f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fe:	3318      	adds	r3, #24
 8001a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0e:	3318      	adds	r3, #24
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff f8a0 	bl	8000b5c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	3318      	adds	r3, #24
 8001a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a2a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a30:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a34:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a38:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a3c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a40:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a42:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a46:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff f879 	bl	8000b5c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a76:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d10f      	bne.n	8001aa0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	331c      	adds	r3, #28
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	331c      	adds	r3, #28
 8001a9e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f809 	bl	8001ac0 <ETH_MACAddressConfig>
}
 8001aae:	bf00      	nop
 8001ab0:	37c0      	adds	r7, #192	; 0xc0
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	ff20810f 	.word	0xff20810f
 8001abc:	f8de3f23 	.word	0xf8de3f23

08001ac0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3305      	adds	r3, #5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	3204      	adds	r2, #4
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <ETH_MACAddressConfig+0x68>)
 8001ae2:	4413      	add	r3, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3303      	adds	r3, #3
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	061a      	lsls	r2, r3, #24
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3302      	adds	r3, #2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <ETH_MACAddressConfig+0x6c>)
 8001b12:	4413      	add	r3, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40028040 	.word	0x40028040
 8001b2c:	40028044 	.word	0x40028044

08001b30 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0208 	orr.w	r2, r2, #8
 8001b4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 f87f 	bl	8001c58 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0204 	orr.w	r2, r2, #4
 8001b84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 f862 	bl	8001c58 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	3318      	adds	r3, #24
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0202 	orr.w	r2, r2, #2
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c18:	3318      	adds	r3, #24
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	3318      	adds	r3, #24
 8001c2a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	3318      	adds	r3, #24
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f000 f80c 	bl	8001c58 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <ETH_Delay+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <ETH_Delay+0x38>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001c74:	bf00      	nop
  } 
  while (Delay --);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <ETH_Delay+0x1c>
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e177      	b.n	8001fa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8166 	bne.w	8001f9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00b      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b12      	cmp	r3, #18
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0xfc>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80c0 	beq.w	8001f9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a64      	ldr	r2, [pc, #400]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a60      	ldr	r2, [pc, #384]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_GPIO_Init+0x328>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d037      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a54      	ldr	r2, [pc, #336]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a53      	ldr	r2, [pc, #332]	; (8001fcc <HAL_GPIO_Init+0x338>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x226>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_GPIO_Init+0x344>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x222>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x348>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x21e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x21a>
 8001eaa:	2309      	movs	r3, #9
 8001eac:	e012      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e010      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	e00e      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x240>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4934      	ldr	r1, [pc, #208]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f16:	4a33      	ldr	r2, [pc, #204]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f ae84 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3724      	adds	r7, #36	; 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40021400 	.word	0x40021400
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	40021c00 	.word	0x40021c00
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40022400 	.word	0x40022400
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002004:	e003      	b.n	800200e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	401a      	ands	r2, r3
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	429a      	cmp	r2, r3
 8002032:	d104      	bne.n	800203e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	041a      	lsls	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800203c:	e002      	b.n	8002044 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e25b      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d075      	beq.n	800215a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206e:	4ba3      	ldr	r3, [pc, #652]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d00c      	beq.n	8002094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002082:	2b08      	cmp	r3, #8
 8002084:	d112      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002086:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b99      	ldr	r3, [pc, #612]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_OscConfig+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d157      	bne.n	8002158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e236      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x74>
 80020b6:	4b91      	ldr	r3, [pc, #580]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a90      	ldr	r2, [pc, #576]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a8a      	ldr	r2, [pc, #552]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a87      	ldr	r2, [pc, #540]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xb0>
 80020e8:	4b84      	ldr	r3, [pc, #528]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a83      	ldr	r2, [pc, #524]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b81      	ldr	r3, [pc, #516]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a80      	ldr	r2, [pc, #512]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fd1c 	bl	8000b44 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fd18 	bl	8000b44 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1fb      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xc0>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fd08 	bl	8000b44 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe fd04 	bl	8000b44 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1e7      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0xe8>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1bb      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b56      	ldr	r3, [pc, #344]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4952      	ldr	r1, [pc, #328]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_RCC_OscConfig+0x2b0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe fcbd 	bl	8000b44 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7fe fcb9 	bl	8000b44 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e19c      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b46      	ldr	r3, [pc, #280]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b43      	ldr	r3, [pc, #268]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4940      	ldr	r1, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_OscConfig+0x2b0>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fc9c 	bl	8000b44 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe fc98 	bl	8000b44 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e17b      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d030      	beq.n	800229c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x2b4>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7fe fc7c 	bl	8000b44 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe fc78 	bl	8000b44 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e15b      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x200>
 800226e:	e015      	b.n	800229c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_OscConfig+0x2b4>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe fc65 	bl	8000b44 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227e:	f7fe fc61 	bl	8000b44 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e144      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 8002292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a0 	beq.w	80023ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x2b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d121      	bne.n	800232a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCC_OscConfig+0x2b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_RCC_OscConfig+0x2b8>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fc27 	bl	8000b44 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x2ce>
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	42470000 	.word	0x42470000
 8002304:	42470e80 	.word	0x42470e80
 8002308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7fe fc1a 	bl	8000b44 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0fd      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b81      	ldr	r3, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x4d4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x2f0>
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
 800233e:	e01c      	b.n	800237a <HAL_RCC_OscConfig+0x32a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002348:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a76      	ldr	r2, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	4b74      	ldr	r3, [pc, #464]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a73      	ldr	r2, [pc, #460]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x32a>
 8002362:	4b71      	ldr	r3, [pc, #452]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a70      	ldr	r2, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a6d      	ldr	r2, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fbdf 	bl	8000b44 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fbdb 	bl	8000b44 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0bc      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RCC_OscConfig+0x33a>
 80023ac:	e014      	b.n	80023d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fbc9 	bl	8000b44 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7fe fbc5 	bl	8000b44 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0a6      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b52      	ldr	r3, [pc, #328]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a51      	ldr	r2, [pc, #324]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8092 	beq.w	8002518 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d05c      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d141      	bne.n	800248c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_RCC_OscConfig+0x4dc>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fb99 	bl	8000b44 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fb95 	bl	8000b44 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e078      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	019b      	lsls	r3, r3, #6
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	4933      	ldr	r1, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x4dc>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fb6e 	bl	8000b44 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fb6a 	bl	8000b44 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04d      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x41c>
 800248a:	e045      	b.n	8002518 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x4dc>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe fb57 	bl	8000b44 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fb53 	bl	8000b44 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e036      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x44a>
 80024b8:	e02e      	b.n	8002518 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e029      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x4d8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11c      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d115      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ee:	4013      	ands	r3, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10d      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40007000 	.word	0x40007000
 8002528:	40023800 	.word	0x40023800
 800252c:	42470060 	.word	0x42470060

08002530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0cc      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d90c      	bls.n	800256c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d044      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d119      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e067      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4934      	ldr	r1, [pc, #208]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7fe fa90 	bl	8000b44 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7fe fa8c 	bl	8000b44 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d20c      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4601      	mov	r1, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	fa21 f303 	lsr.w	r3, r1, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f9f0 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	0800e728 	.word	0x0800e728
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d007      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x32>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d008      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x38>
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80b4 	bne.w	8002890 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b5e      	ldr	r3, [pc, #376]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800272a:	60bb      	str	r3, [r7, #8]
       break;
 800272c:	e0b3      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272e:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002730:	60bb      	str	r3, [r7, #8]
      break;
 8002732:	e0b0      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d04a      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b55      	ldr	r3, [pc, #340]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	f04f 0400 	mov.w	r4, #0
 8002754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	ea03 0501 	and.w	r5, r3, r1
 8002760:	ea04 0602 	and.w	r6, r4, r2
 8002764:	4629      	mov	r1, r5
 8002766:	4632      	mov	r2, r6
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	f04f 0400 	mov.w	r4, #0
 8002770:	0154      	lsls	r4, r2, #5
 8002772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002776:	014b      	lsls	r3, r1, #5
 8002778:	4619      	mov	r1, r3
 800277a:	4622      	mov	r2, r4
 800277c:	1b49      	subs	r1, r1, r5
 800277e:	eb62 0206 	sbc.w	r2, r2, r6
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f04f 0400 	mov.w	r4, #0
 800278a:	0194      	lsls	r4, r2, #6
 800278c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002790:	018b      	lsls	r3, r1, #6
 8002792:	1a5b      	subs	r3, r3, r1
 8002794:	eb64 0402 	sbc.w	r4, r4, r2
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	00e2      	lsls	r2, r4, #3
 80027a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027a6:	00d9      	lsls	r1, r3, #3
 80027a8:	460b      	mov	r3, r1
 80027aa:	4614      	mov	r4, r2
 80027ac:	195b      	adds	r3, r3, r5
 80027ae:	eb44 0406 	adc.w	r4, r4, r6
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	0262      	lsls	r2, r4, #9
 80027bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027c0:	0259      	lsls	r1, r3, #9
 80027c2:	460b      	mov	r3, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	4621      	mov	r1, r4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 0400 	mov.w	r4, #0
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	f7fd fd5c 	bl	8000290 <__aeabi_uldivmod>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e049      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	f04f 0400 	mov.w	r4, #0
 80027ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	ea03 0501 	and.w	r5, r3, r1
 80027f6:	ea04 0602 	and.w	r6, r4, r2
 80027fa:	4629      	mov	r1, r5
 80027fc:	4632      	mov	r2, r6
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	f04f 0400 	mov.w	r4, #0
 8002806:	0154      	lsls	r4, r2, #5
 8002808:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800280c:	014b      	lsls	r3, r1, #5
 800280e:	4619      	mov	r1, r3
 8002810:	4622      	mov	r2, r4
 8002812:	1b49      	subs	r1, r1, r5
 8002814:	eb62 0206 	sbc.w	r2, r2, r6
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	f04f 0400 	mov.w	r4, #0
 8002820:	0194      	lsls	r4, r2, #6
 8002822:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	1a5b      	subs	r3, r3, r1
 800282a:	eb64 0402 	sbc.w	r4, r4, r2
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	00e2      	lsls	r2, r4, #3
 8002838:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800283c:	00d9      	lsls	r1, r3, #3
 800283e:	460b      	mov	r3, r1
 8002840:	4614      	mov	r4, r2
 8002842:	195b      	adds	r3, r3, r5
 8002844:	eb44 0406 	adc.w	r4, r4, r6
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	02a2      	lsls	r2, r4, #10
 8002852:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002856:	0299      	lsls	r1, r3, #10
 8002858:	460b      	mov	r3, r1
 800285a:	4614      	mov	r4, r2
 800285c:	4618      	mov	r0, r3
 800285e:	4621      	mov	r1, r4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f04f 0400 	mov.w	r4, #0
 8002866:	461a      	mov	r2, r3
 8002868:	4623      	mov	r3, r4
 800286a:	f7fd fd11 	bl	8000290 <__aeabi_uldivmod>
 800286e:	4603      	mov	r3, r0
 8002870:	460c      	mov	r4, r1
 8002872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	60bb      	str	r3, [r7, #8]
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002892:	60bb      	str	r3, [r7, #8]
      break;
 8002894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002896:	68bb      	ldr	r3, [r7, #8]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <tcp_connected_callback>:




err_t tcp_connected_callback(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	71fb      	strb	r3, [r7, #7]
	return ERR_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <tcp_rcv_callback>:



err_t tcp_rcv_callback(void *arg, struct tcp_pcb *tpcb,
                             struct pbuf *p, err_t err)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	4806      	ldr	r0, [pc, #24]	; (800290c <tcp_rcv_callback+0x2c>)
 80028f2:	f7ff fb92 	bl	800201a <HAL_GPIO_TogglePin>
	if(p!=NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <tcp_rcv_callback+0x22>
	{

		pbuf_free(p);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f001 fd9f 	bl	8004440 <pbuf_free>
	}
	return ERR_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40020400 	.word	0x40020400

08002910 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002916:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002918:	22c0      	movs	r2, #192	; 0xc0
 800291a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800291c:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <MX_LWIP_Init+0x270>)
 800291e:	22a8      	movs	r2, #168	; 0xa8
 8002920:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002922:	4b97      	ldr	r3, [pc, #604]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002924:	2201      	movs	r2, #1
 8002926:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 8002928:	4b95      	ldr	r3, [pc, #596]	; (8002b80 <MX_LWIP_Init+0x270>)
 800292a:	2205      	movs	r2, #5
 800292c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 800292e:	4b95      	ldr	r3, [pc, #596]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8002934:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002936:	2200      	movs	r2, #0
 8002938:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800293a:	4b92      	ldr	r3, [pc, #584]	; (8002b84 <MX_LWIP_Init+0x274>)
 800293c:	2200      	movs	r2, #0
 800293e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002940:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002942:	2200      	movs	r2, #0
 8002944:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8002946:	4b90      	ldr	r3, [pc, #576]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800294c:	4b8e      	ldr	r3, [pc, #568]	; (8002b88 <MX_LWIP_Init+0x278>)
 800294e:	2200      	movs	r2, #0
 8002950:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002952:	4b8d      	ldr	r3, [pc, #564]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8002958:	4b8b      	ldr	r3, [pc, #556]	; (8002b88 <MX_LWIP_Init+0x278>)
 800295a:	2200      	movs	r2, #0
 800295c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800295e:	f000 fc71 	bl	8003244 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002962:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	061a      	lsls	r2, r3, #24
 8002968:	4b85      	ldr	r3, [pc, #532]	; (8002b80 <MX_LWIP_Init+0x270>)
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	4b83      	ldr	r3, [pc, #524]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	4313      	orrs	r3, r2
 8002978:	4a81      	ldr	r2, [pc, #516]	; (8002b80 <MX_LWIP_Init+0x270>)
 800297a:	78d2      	ldrb	r2, [r2, #3]
 800297c:	4313      	orrs	r3, r2
 800297e:	061a      	lsls	r2, r3, #24
 8002980:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	0619      	lsls	r1, r3, #24
 8002986:	4b7e      	ldr	r3, [pc, #504]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	041b      	lsls	r3, r3, #16
 800298c:	4319      	orrs	r1, r3
 800298e:	4b7c      	ldr	r3, [pc, #496]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	430b      	orrs	r3, r1
 8002996:	497a      	ldr	r1, [pc, #488]	; (8002b80 <MX_LWIP_Init+0x270>)
 8002998:	78c9      	ldrb	r1, [r1, #3]
 800299a:	430b      	orrs	r3, r1
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029a2:	431a      	orrs	r2, r3
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0619      	lsls	r1, r3, #24
 80029aa:	4b75      	ldr	r3, [pc, #468]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	4319      	orrs	r1, r3
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	430b      	orrs	r3, r1
 80029ba:	4971      	ldr	r1, [pc, #452]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029bc:	78c9      	ldrb	r1, [r1, #3]
 80029be:	430b      	orrs	r3, r1
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029c6:	431a      	orrs	r2, r3
 80029c8:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	0619      	lsls	r1, r3, #24
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	4319      	orrs	r1, r3
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029d8:	789b      	ldrb	r3, [r3, #2]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	430b      	orrs	r3, r1
 80029de:	4968      	ldr	r1, [pc, #416]	; (8002b80 <MX_LWIP_Init+0x270>)
 80029e0:	78c9      	ldrb	r1, [r1, #3]
 80029e2:	430b      	orrs	r3, r1
 80029e4:	0e1b      	lsrs	r3, r3, #24
 80029e6:	4313      	orrs	r3, r2
 80029e8:	4a68      	ldr	r2, [pc, #416]	; (8002b8c <MX_LWIP_Init+0x27c>)
 80029ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80029ec:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <MX_LWIP_Init+0x274>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <MX_LWIP_Init+0x274>)
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <MX_LWIP_Init+0x274>)
 80029fc:	789b      	ldrb	r3, [r3, #2]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4a60      	ldr	r2, [pc, #384]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a04:	78d2      	ldrb	r2, [r2, #3]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	0619      	lsls	r1, r3, #24
 8002a10:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	4319      	orrs	r1, r3
 8002a18:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a1a:	789b      	ldrb	r3, [r3, #2]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	4958      	ldr	r1, [pc, #352]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a22:	78c9      	ldrb	r1, [r1, #3]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	0619      	lsls	r1, r3, #24
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	4319      	orrs	r1, r3
 8002a3c:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a3e:	789b      	ldrb	r3, [r3, #2]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	430b      	orrs	r3, r1
 8002a44:	494f      	ldr	r1, [pc, #316]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a46:	78c9      	ldrb	r1, [r1, #3]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a50:	431a      	orrs	r2, r3
 8002a52:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	0619      	lsls	r1, r3, #24
 8002a58:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	4319      	orrs	r1, r3
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a62:	789b      	ldrb	r3, [r3, #2]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	430b      	orrs	r3, r1
 8002a68:	4946      	ldr	r1, [pc, #280]	; (8002b84 <MX_LWIP_Init+0x274>)
 8002a6a:	78c9      	ldrb	r1, [r1, #3]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	0e1b      	lsrs	r3, r3, #24
 8002a70:	4313      	orrs	r3, r2
 8002a72:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <MX_LWIP_Init+0x280>)
 8002a74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	061a      	lsls	r2, r3, #24
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a86:	789b      	ldrb	r3, [r3, #2]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	4a3e      	ldr	r2, [pc, #248]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a8e:	78d2      	ldrb	r2, [r2, #3]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	061a      	lsls	r2, r3, #24
 8002a94:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	0619      	lsls	r1, r3, #24
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	4319      	orrs	r1, r3
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	4937      	ldr	r1, [pc, #220]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002aac:	78c9      	ldrb	r1, [r1, #3]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	0619      	lsls	r1, r3, #24
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	4319      	orrs	r1, r3
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002ac8:	789b      	ldrb	r3, [r3, #2]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	430b      	orrs	r3, r1
 8002ace:	492e      	ldr	r1, [pc, #184]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002ad0:	78c9      	ldrb	r1, [r1, #3]
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ada:	431a      	orrs	r2, r3
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	0619      	lsls	r1, r3, #24
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	4319      	orrs	r1, r3
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	430b      	orrs	r3, r1
 8002af2:	4925      	ldr	r1, [pc, #148]	; (8002b88 <MX_LWIP_Init+0x278>)
 8002af4:	78c9      	ldrb	r1, [r1, #3]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	0e1b      	lsrs	r3, r3, #24
 8002afa:	4313      	orrs	r3, r2
 8002afc:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <MX_LWIP_Init+0x284>)
 8002afe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MX_LWIP_Init+0x288>)
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <MX_LWIP_Init+0x28c>)
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <MX_LWIP_Init+0x284>)
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <MX_LWIP_Init+0x280>)
 8002b10:	491e      	ldr	r1, [pc, #120]	; (8002b8c <MX_LWIP_Init+0x27c>)
 8002b12:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <MX_LWIP_Init+0x290>)
 8002b14:	f000 ff9c 	bl	8003a50 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002b18:	4821      	ldr	r0, [pc, #132]	; (8002ba0 <MX_LWIP_Init+0x290>)
 8002b1a:	f001 f879 	bl	8003c10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <MX_LWIP_Init+0x290>)
 8002b20:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002b30:	481b      	ldr	r0, [pc, #108]	; (8002ba0 <MX_LWIP_Init+0x290>)
 8002b32:	f001 f87d 	bl	8003c30 <netif_set_up>
 8002b36:	e002      	b.n	8002b3e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <MX_LWIP_Init+0x290>)
 8002b3a:	f001 f8bd 	bl	8003cb8 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

  IP4_ADDR(&srvAddrs,192, 168, 1, 1);
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_LWIP_Init+0x294>)
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <MX_LWIP_Init+0x298>)
 8002b42:	601a      	str	r2, [r3, #0]
  srvPort=999;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <MX_LWIP_Init+0x29c>)
 8002b46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b4a:	801a      	strh	r2, [r3, #0]
  tcp_client=tcp_new();
 8002b4c:	f003 f890 	bl	8005c70 <tcp_new>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_LWIP_Init+0x2a0>)
 8002b54:	601a      	str	r2, [r3, #0]

  err_t result;

  result=tcp_connect(tcp_client, &srvAddrs, srvPort, tcp_connected_callback);
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <MX_LWIP_Init+0x2a0>)
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_LWIP_Init+0x29c>)
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <MX_LWIP_Init+0x2a4>)
 8002b60:	4910      	ldr	r1, [pc, #64]	; (8002ba4 <MX_LWIP_Init+0x294>)
 8002b62:	f002 fa5b 	bl	800501c <tcp_connect>
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]

  tcp_recv(tcp_client, tcp_rcv_callback);
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_LWIP_Init+0x2a0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <MX_LWIP_Init+0x2a8>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 f885 	bl	8005c80 <tcp_recv>



/* USER CODE END 3 */
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000254 	.word	0x20000254
 8002b84:	20000250 	.word	0x20000250
 8002b88:	20000218 	.word	0x20000218
 8002b8c:	2000024c 	.word	0x2000024c
 8002b90:	20000258 	.word	0x20000258
 8002b94:	20000260 	.word	0x20000260
 8002b98:	0800ba4d 	.word	0x0800ba4d
 8002b9c:	0800318d 	.word	0x0800318d
 8002ba0:	2000021c 	.word	0x2000021c
 8002ba4:	20000214 	.word	0x20000214
 8002ba8:	0101a8c0 	.word	0x0101a8c0
 8002bac:	2000000a 	.word	0x2000000a
 8002bb0:	2000025c 	.word	0x2000025c
 8002bb4:	080028c5 	.word	0x080028c5
 8002bb8:	080028e1 	.word	0x080028e1

08002bbc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <MX_LWIP_Process+0x14>)
 8002bc2:	f000 fac3 	bl	800314c <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8002bc6:	f006 fc69 	bl	800949c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000021c 	.word	0x2000021c

08002bd4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_ETH_MspInit+0x174>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	f040 80a4 	bne.w	8002d40 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c06:	6313      	str	r3, [r2, #48]	; 0x30
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b42      	ldr	r3, [pc, #264]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4a36      	ldr	r2, [pc, #216]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6313      	str	r3, [r2, #48]	; 0x30
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_ETH_MspInit+0x178>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002cbc:	2332      	movs	r3, #50	; 0x32
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ccc:	230b      	movs	r3, #11
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	481e      	ldr	r0, [pc, #120]	; (8002d50 <HAL_ETH_MspInit+0x17c>)
 8002cd8:	f7fe ffdc 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002cdc:	2386      	movs	r3, #134	; 0x86
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cec:	230b      	movs	r3, #11
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4817      	ldr	r0, [pc, #92]	; (8002d54 <HAL_ETH_MspInit+0x180>)
 8002cf8:	f7fe ffcc 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d0e:	230b      	movs	r3, #11
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d16:	4619      	mov	r1, r3
 8002d18:	480f      	ldr	r0, [pc, #60]	; (8002d58 <HAL_ETH_MspInit+0x184>)
 8002d1a:	f7fe ffbb 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d30:	230b      	movs	r3, #11
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4808      	ldr	r0, [pc, #32]	; (8002d5c <HAL_ETH_MspInit+0x188>)
 8002d3c:	f7fe ffaa 	bl	8001c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002d40:	bf00      	nop
 8002d42:	3738      	adds	r7, #56	; 0x38
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40028000 	.word	0x40028000
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40021800 	.word	0x40021800

08002d60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002d6c:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <low_level_init+0x134>)
 8002d6e:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <low_level_init+0x138>)
 8002d70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <low_level_init+0x134>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002d78:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <low_level_init+0x134>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002d86:	23e1      	movs	r3, #225	; 0xe1
 8002d88:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002d96:	4a3f      	ldr	r2, [pc, #252]	; (8002e94 <low_level_init+0x134>)
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <low_level_init+0x134>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <low_level_init+0x134>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002daa:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <low_level_init+0x134>)
 8002dac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002db0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002db2:	4838      	ldr	r0, [pc, #224]	; (8002e94 <low_level_init+0x134>)
 8002db4:	f7fd ffda 	bl	8000d6c <HAL_ETH_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	4a31      	ldr	r2, [pc, #196]	; (8002e9c <low_level_init+0x13c>)
 8002dd8:	4931      	ldr	r1, [pc, #196]	; (8002ea0 <low_level_init+0x140>)
 8002dda:	482e      	ldr	r0, [pc, #184]	; (8002e94 <low_level_init+0x134>)
 8002ddc:	f7fe f964 	bl	80010a8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002de0:	2304      	movs	r3, #4
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <low_level_init+0x144>)
 8002de4:	4930      	ldr	r1, [pc, #192]	; (8002ea8 <low_level_init+0x148>)
 8002de6:	482b      	ldr	r0, [pc, #172]	; (8002e94 <low_level_init+0x134>)
 8002de8:	f7fe f9c7 	bl	800117a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2206      	movs	r2, #6
 8002df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <low_level_init+0x134>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <low_level_init+0x134>)
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	785a      	ldrb	r2, [r3, #1]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <low_level_init+0x134>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	789a      	ldrb	r2, [r3, #2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <low_level_init+0x134>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	78da      	ldrb	r2, [r3, #3]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <low_level_init+0x134>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	791a      	ldrb	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <low_level_init+0x134>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	795a      	ldrb	r2, [r3, #5]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e42:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e4a:	f043 030a 	orr.w	r3, r3, #10
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002e56:	480f      	ldr	r0, [pc, #60]	; (8002e94 <low_level_init+0x134>)
 8002e58:	f7fe fc38 	bl	80016cc <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	461a      	mov	r2, r3
 8002e62:	211d      	movs	r1, #29
 8002e64:	480b      	ldr	r0, [pc, #44]	; (8002e94 <low_level_init+0x134>)
 8002e66:	f7fe fb63 	bl	8001530 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f043 030b 	orr.w	r3, r3, #11
 8002e70:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	461a      	mov	r2, r3
 8002e76:	211d      	movs	r1, #29
 8002e78:	4806      	ldr	r0, [pc, #24]	; (8002e94 <low_level_init+0x134>)
 8002e7a:	f7fe fbc1 	bl	8001600 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	461a      	mov	r2, r3
 8002e84:	211d      	movs	r1, #29
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <low_level_init+0x134>)
 8002e88:	f7fe fb52 	bl	8001530 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20001b34 	.word	0x20001b34
 8002e98:	40028000 	.word	0x40028000
 8002e9c:	20001b7c 	.word	0x20001b7c
 8002ea0:	20000264 	.word	0x20000264
 8002ea4:	200002e4 	.word	0x200002e4
 8002ea8:	20001ab4 	.word	0x20001ab4

08002eac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <low_level_output+0x138>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002ece:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <low_level_output+0x138>)
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	e05a      	b.n	8002f94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	da03      	bge.n	8002eee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002ee6:	23f8      	movs	r3, #248	; 0xf8
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002eec:	e05c      	b.n	8002fa8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	895b      	ldrh	r3, [r3, #10]
 8002ef2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002ef8:	e02f      	b.n	8002f5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	18d0      	adds	r0, r2, r3
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	18d1      	adds	r1, r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002f0e:	3304      	adds	r3, #4
 8002f10:	461a      	mov	r2, r3
 8002f12:	f008 feaa 	bl	800bc6a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da03      	bge.n	8002f2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002f24:	23f8      	movs	r3, #248	; 0xf8
 8002f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002f2a:	e03d      	b.n	8002fa8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002f3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002f48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002f54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d8c8      	bhi.n	8002efa <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	18d0      	adds	r0, r2, r3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4413      	add	r3, r2
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f008 fe76 	bl	800bc6a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1a1      	bne.n	8002ede <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	4811      	ldr	r0, [pc, #68]	; (8002fe4 <low_level_output+0x138>)
 8002f9e:	f7fe f959 	bl	8001254 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <low_level_output+0x138>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <low_level_output+0x138>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <low_level_output+0x138>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8002fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20001b34 	.word	0x20001b34

08002fe8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800300c:	484e      	ldr	r0, [pc, #312]	; (8003148 <low_level_input+0x160>)
 800300e:	f7fe fa0b 	bl	8001428 <HAL_ETH_GetReceivedFrame>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <low_level_input+0x34>
    return NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	e091      	b.n	8003140 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <low_level_input+0x160>)
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003022:	4b49      	ldr	r3, [pc, #292]	; (8003148 <low_level_input+0x160>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	2203      	movs	r2, #3
 8003032:	4619      	mov	r1, r3
 8003034:	2004      	movs	r0, #4
 8003036:	f000 fe91 	bl	8003d5c <pbuf_alloc>
 800303a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04b      	beq.n	80030da <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <low_level_input+0x160>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003050:	e040      	b.n	80030d4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	895b      	ldrh	r3, [r3, #10]
 8003056:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800305c:	e021      	b.n	80030a2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	18d0      	adds	r0, r2, r3
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	18d1      	adds	r1, r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003072:	3304      	adds	r3, #4
 8003074:	461a      	mov	r2, r3
 8003076:	f008 fdf8 	bl	800bc6a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	4413      	add	r3, r2
 800308c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003090:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800309c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d8d6      	bhi.n	800305e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	18d0      	adds	r0, r2, r3
 80030b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f008 fdd2 	bl	800bc6a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4413      	add	r3, r2
 80030cc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1bb      	bne.n	8003052 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <low_level_input+0x160>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e00b      	b.n	80030fe <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <low_level_input+0x160>)
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d3ee      	bcc.n	80030e6 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <low_level_input+0x160>)
 800310a:	2200      	movs	r2, #0
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <low_level_input+0x160>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003116:	3314      	adds	r3, #20
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <low_level_input+0x160>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	3314      	adds	r3, #20
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <low_level_input+0x160>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	3308      	adds	r3, #8
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
  }
  return p;
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20001b34 	.word	0x20001b34

0800314c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff47 	bl	8002fe8 <low_level_input>
 800315a:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	4798      	blx	r3
 800316c:	4603      	mov	r3, r0
 800316e:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8003170:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f001 f961 	bl	8004440 <pbuf_free>
    p = NULL;    
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e000      	b.n	8003186 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003184:	bf00      	nop
  }
}
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <ethernetif_init+0x1c>
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <ethernetif_init+0x48>)
 800319c:	f44f 7204 	mov.w	r2, #528	; 0x210
 80031a0:	490d      	ldr	r1, [pc, #52]	; (80031d8 <ethernetif_init+0x4c>)
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <ethernetif_init+0x50>)
 80031a4:	f008 fd74 	bl	800bc90 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2273      	movs	r2, #115	; 0x73
 80031ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2274      	movs	r2, #116	; 0x74
 80031b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <ethernetif_init+0x54>)
 80031bc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <ethernetif_init+0x58>)
 80031c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fdcb 	bl	8002d60 <low_level_init>

  return ERR_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	0800ca70 	.word	0x0800ca70
 80031d8:	0800ca8c 	.word	0x0800ca8c
 80031dc:	0800ca9c 	.word	0x0800ca9c
 80031e0:	0800a031 	.word	0x0800a031
 80031e4:	08002ead 	.word	0x08002ead

080031e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80031ec:	f7fd fcaa 	bl	8000b44 <HAL_GetTick>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	ba5b      	rev16	r3, r3
 8003204:	b29b      	uxth	r3, r3
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	061a      	lsls	r2, r3, #24
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	4313      	orrs	r3, r2
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800324e:	f000 f8a7 	bl	80033a0 <mem_init>
  memp_init();
 8003252:	f000 fb3b 	bl	80038cc <memp_init>
  pbuf_init();
  netif_init();
 8003256:	f000 fbf3 	bl	8003a40 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800325a:	f006 f971 	bl	8009540 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800325e:	f001 fb59 	bl	8004914 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003262:	f006 f84f 	bl	8009304 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <plug_holes+0x10c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d206      	bcs.n	8003290 <plug_holes+0x20>
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <plug_holes+0x110>)
 8003284:	f240 125d 	movw	r2, #349	; 0x15d
 8003288:	493e      	ldr	r1, [pc, #248]	; (8003384 <plug_holes+0x114>)
 800328a:	483f      	ldr	r0, [pc, #252]	; (8003388 <plug_holes+0x118>)
 800328c:	f008 fd00 	bl	800bc90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003290:	4b3e      	ldr	r3, [pc, #248]	; (800338c <plug_holes+0x11c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d306      	bcc.n	80032a8 <plug_holes+0x38>
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <plug_holes+0x110>)
 800329c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80032a0:	493b      	ldr	r1, [pc, #236]	; (8003390 <plug_holes+0x120>)
 80032a2:	4839      	ldr	r0, [pc, #228]	; (8003388 <plug_holes+0x118>)
 80032a4:	f008 fcf4 	bl	800bc90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	791b      	ldrb	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <plug_holes+0x4e>
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <plug_holes+0x110>)
 80032b2:	f240 125f 	movw	r2, #351	; 0x15f
 80032b6:	4937      	ldr	r1, [pc, #220]	; (8003394 <plug_holes+0x124>)
 80032b8:	4833      	ldr	r0, [pc, #204]	; (8003388 <plug_holes+0x118>)
 80032ba:	f008 fce9 	bl	800bc90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80032c6:	d906      	bls.n	80032d6 <plug_holes+0x66>
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <plug_holes+0x110>)
 80032ca:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80032ce:	4932      	ldr	r1, [pc, #200]	; (8003398 <plug_holes+0x128>)
 80032d0:	482d      	ldr	r0, [pc, #180]	; (8003388 <plug_holes+0x118>)
 80032d2:	f008 fcdd 	bl	800bc90 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <plug_holes+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	8812      	ldrh	r2, [r2, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d01f      	beq.n	800332a <plug_holes+0xba>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11b      	bne.n	800332a <plug_holes+0xba>
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <plug_holes+0x11c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d016      	beq.n	800332a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <plug_holes+0x12c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	d102      	bne.n	800330c <plug_holes+0x9c>
      lfree = mem;
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <plug_holes+0x12c>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a19      	ldr	r2, [pc, #100]	; (800337c <plug_holes+0x10c>)
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	1a99      	subs	r1, r3, r2
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <plug_holes+0x10c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	4413      	add	r3, r2
 8003326:	b28a      	uxth	r2, r1
 8003328:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <plug_holes+0x10c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	8852      	ldrh	r2, [r2, #2]
 8003332:	4413      	add	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d01a      	beq.n	8003374 <plug_holes+0x104>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	791b      	ldrb	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <plug_holes+0x12c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d102      	bne.n	8003356 <plug_holes+0xe6>
      lfree = pmem;
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <plug_holes+0x12c>)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <plug_holes+0x10c>)
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	1a99      	subs	r1, r3, r2
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <plug_holes+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	4413      	add	r3, r2
 8003370:	b28a      	uxth	r2, r1
 8003372:	805a      	strh	r2, [r3, #2]
  }
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000098 	.word	0x20000098
 8003380:	0800cac4 	.word	0x0800cac4
 8003384:	0800caf4 	.word	0x0800caf4
 8003388:	0800cb0c 	.word	0x0800cb0c
 800338c:	2000009c 	.word	0x2000009c
 8003390:	0800cb34 	.word	0x0800cb34
 8003394:	0800cb50 	.word	0x0800cb50
 8003398:	0800cb6c 	.word	0x0800cb6c
 800339c:	200000a0 	.word	0x200000a0

080033a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <mem_init+0x6c>)
 80033a8:	3303      	adds	r3, #3
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <mem_init+0x70>)
 80033b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <mem_init+0x70>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80033c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <mem_init+0x70>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80033d6:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <mem_init+0x74>)
 80033d8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <mem_init+0x74>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <mem_init+0x74>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80033ea:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <mem_init+0x74>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80033f4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <mem_init+0x70>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <mem_init+0x78>)
 80033fc:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20003364 	.word	0x20003364
 8003410:	20000098 	.word	0x20000098
 8003414:	2000009c 	.word	0x2000009c
 8003418:	200000a0 	.word	0x200000a0

0800341c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d043      	beq.n	80034b2 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <mem_free+0x26>
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <mem_free+0xa4>)
 8003436:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800343a:	4922      	ldr	r1, [pc, #136]	; (80034c4 <mem_free+0xa8>)
 800343c:	4822      	ldr	r0, [pc, #136]	; (80034c8 <mem_free+0xac>)
 800343e:	f008 fc27 	bl	800bc90 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <mem_free+0xb0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d304      	bcc.n	8003456 <mem_free+0x3a>
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <mem_free+0xb4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d306      	bcc.n	8003464 <mem_free+0x48>
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <mem_free+0xa4>)
 8003458:	f240 12af 	movw	r2, #431	; 0x1af
 800345c:	491d      	ldr	r1, [pc, #116]	; (80034d4 <mem_free+0xb8>)
 800345e:	481a      	ldr	r0, [pc, #104]	; (80034c8 <mem_free+0xac>)
 8003460:	f008 fc16 	bl	800bc90 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <mem_free+0xb0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d323      	bcc.n	80034b6 <mem_free+0x9a>
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <mem_free+0xb4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d21e      	bcs.n	80034b6 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b08      	subs	r3, #8
 800347c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	791b      	ldrb	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <mem_free+0x78>
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <mem_free+0xa4>)
 8003488:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800348c:	4912      	ldr	r1, [pc, #72]	; (80034d8 <mem_free+0xbc>)
 800348e:	480e      	ldr	r0, [pc, #56]	; (80034c8 <mem_free+0xac>)
 8003490:	f008 fbfe 	bl	800bc90 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <mem_free+0xc0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d202      	bcs.n	80034aa <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80034a4:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <mem_free+0xc0>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fee0 	bl	8003270 <plug_holes>
 80034b0:	e002      	b.n	80034b8 <mem_free+0x9c>
    return;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <mem_free+0x9c>
    return;
 80034b6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	0800cac4 	.word	0x0800cac4
 80034c4:	0800cb98 	.word	0x0800cb98
 80034c8:	0800cb0c 	.word	0x0800cb0c
 80034cc:	20000098 	.word	0x20000098
 80034d0:	2000009c 	.word	0x2000009c
 80034d4:	0800cbbc 	.word	0x0800cbbc
 80034d8:	0800cbd4 	.word	0x0800cbd4
 80034dc:	200000a0 	.word	0x200000a0

080034e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	3303      	adds	r3, #3
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	2b0b      	cmp	r3, #11
 80034fc:	d801      	bhi.n	8003502 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80034fe:	230c      	movs	r3, #12
 8003500:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003508:	d901      	bls.n	800350e <mem_trim+0x2e>
    return NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	e0b1      	b.n	8003672 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <mem_trim+0x19c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d304      	bcc.n	8003522 <mem_trim+0x42>
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <mem_trim+0x1a0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d306      	bcc.n	8003530 <mem_trim+0x50>
 8003522:	4b58      	ldr	r3, [pc, #352]	; (8003684 <mem_trim+0x1a4>)
 8003524:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003528:	4957      	ldr	r1, [pc, #348]	; (8003688 <mem_trim+0x1a8>)
 800352a:	4858      	ldr	r0, [pc, #352]	; (800368c <mem_trim+0x1ac>)
 800352c:	f008 fbb0 	bl	800bc90 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003530:	4b52      	ldr	r3, [pc, #328]	; (800367c <mem_trim+0x19c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d304      	bcc.n	8003544 <mem_trim+0x64>
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <mem_trim+0x1a0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d301      	bcc.n	8003548 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	e094      	b.n	8003672 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b08      	subs	r3, #8
 800354c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a4a      	ldr	r2, [pc, #296]	; (800367c <mem_trim+0x19c>)
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	8a7b      	ldrh	r3, [r7, #18]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b08      	subs	r3, #8
 8003564:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	8a3b      	ldrh	r3, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d906      	bls.n	800357c <mem_trim+0x9c>
 800356e:	4b45      	ldr	r3, [pc, #276]	; (8003684 <mem_trim+0x1a4>)
 8003570:	f240 2206 	movw	r2, #518	; 0x206
 8003574:	4946      	ldr	r1, [pc, #280]	; (8003690 <mem_trim+0x1b0>)
 8003576:	4845      	ldr	r0, [pc, #276]	; (800368c <mem_trim+0x1ac>)
 8003578:	f008 fb8a 	bl	800bc90 <iprintf>
  if (newsize > size) {
 800357c:	887a      	ldrh	r2, [r7, #2]
 800357e:	8a3b      	ldrh	r3, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d901      	bls.n	8003588 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	e074      	b.n	8003672 <mem_trim+0x192>
  }
  if (newsize == size) {
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	8a3b      	ldrh	r3, [r7, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d101      	bne.n	8003594 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	e06e      	b.n	8003672 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <mem_trim+0x19c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	4413      	add	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	791b      	ldrb	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d131      	bne.n	800360c <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80035ae:	8a7a      	ldrh	r2, [r7, #18]
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	4413      	add	r3, r2
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3308      	adds	r3, #8
 80035b8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <mem_trim+0x1b4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d105      	bne.n	80035d0 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <mem_trim+0x19c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	4413      	add	r3, r2
 80035cc:	4a31      	ldr	r2, [pc, #196]	; (8003694 <mem_trim+0x1b4>)
 80035ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <mem_trim+0x19c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	4413      	add	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	893a      	ldrh	r2, [r7, #8]
 80035e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8a7a      	ldrh	r2, [r7, #18]
 80035ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	897a      	ldrh	r2, [r7, #10]
 80035f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035fa:	d039      	beq.n	8003670 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <mem_trim+0x19c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	8812      	ldrh	r2, [r2, #0]
 8003604:	4413      	add	r3, r2
 8003606:	897a      	ldrh	r2, [r7, #10]
 8003608:	805a      	strh	r2, [r3, #2]
 800360a:	e031      	b.n	8003670 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	f103 0214 	add.w	r2, r3, #20
 8003612:	8a3b      	ldrh	r3, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d82b      	bhi.n	8003670 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003618:	8a7a      	ldrh	r2, [r7, #18]
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	4413      	add	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	3308      	adds	r3, #8
 8003622:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <mem_trim+0x19c>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <mem_trim+0x1b4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d202      	bcs.n	800363e <mem_trim+0x15e>
      lfree = mem2;
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <mem_trim+0x1b4>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	881a      	ldrh	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8a7a      	ldrh	r2, [r7, #18]
 8003650:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	897a      	ldrh	r2, [r7, #10]
 8003656:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003660:	d006      	beq.n	8003670 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <mem_trim+0x19c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	4413      	add	r3, r2
 800366c:	897a      	ldrh	r2, [r7, #10]
 800366e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000098 	.word	0x20000098
 8003680:	2000009c 	.word	0x2000009c
 8003684:	0800cac4 	.word	0x0800cac4
 8003688:	0800cbe8 	.word	0x0800cbe8
 800368c:	0800cb0c 	.word	0x0800cb0c
 8003690:	0800cc00 	.word	0x0800cc00
 8003694:	200000a0 	.word	0x200000a0

08003698 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <mem_malloc+0x14>
    return NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e0c8      	b.n	800383e <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	3303      	adds	r3, #3
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2b0b      	cmp	r3, #11
 80036bc:	d801      	bhi.n	80036c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80036be:	230c      	movs	r3, #12
 80036c0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80036c8:	d901      	bls.n	80036ce <mem_malloc+0x36>
    return NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e0b7      	b.n	800383e <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80036ce:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <mem_malloc+0x1b0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b5d      	ldr	r3, [pc, #372]	; (800384c <mem_malloc+0x1b4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	83fb      	strh	r3, [r7, #30]
 80036dc:	e0a7      	b.n	800382e <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <mem_malloc+0x1b4>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	8bfb      	ldrh	r3, [r7, #30]
 80036e4:	4413      	add	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	791b      	ldrb	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8098 	bne.w	8003822 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	8bfb      	ldrh	r3, [r7, #30]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f1a3 0208 	sub.w	r2, r3, #8
 8003700:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003702:	429a      	cmp	r2, r3
 8003704:	f0c0 808d 	bcc.w	8003822 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	8bfb      	ldrh	r3, [r7, #30]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f1a3 0208 	sub.w	r2, r3, #8
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	3314      	adds	r3, #20
 800371a:	429a      	cmp	r2, r3
 800371c:	d327      	bcc.n	800376e <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800371e:	8bfa      	ldrh	r2, [r7, #30]
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	4413      	add	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	3308      	adds	r3, #8
 8003728:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800372a:	4b48      	ldr	r3, [pc, #288]	; (800384c <mem_malloc+0x1b4>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	8a7b      	ldrh	r3, [r7, #18]
 8003730:	4413      	add	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8bfa      	ldrh	r2, [r7, #30]
 8003746:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	8a7a      	ldrh	r2, [r7, #18]
 800374c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2201      	movs	r2, #1
 8003752:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800375c:	d00a      	beq.n	8003774 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <mem_malloc+0x1b4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	4413      	add	r3, r2
 8003768:	8a7a      	ldrh	r2, [r7, #18]
 800376a:	805a      	strh	r2, [r3, #2]
 800376c:	e002      	b.n	8003774 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2201      	movs	r2, #1
 8003772:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <mem_malloc+0x1b0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d127      	bne.n	80037ce <mem_malloc+0x136>
          struct mem *cur = lfree;
 800377e:	4b32      	ldr	r3, [pc, #200]	; (8003848 <mem_malloc+0x1b0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003784:	e005      	b.n	8003792 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <mem_malloc+0x1b4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	8812      	ldrh	r2, [r2, #0]
 800378e:	4413      	add	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	791b      	ldrb	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <mem_malloc+0x10c>
 800379a:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <mem_malloc+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1f0      	bne.n	8003786 <mem_malloc+0xee>
          }
          lfree = cur;
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <mem_malloc+0x1b0>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <mem_malloc+0x1b0>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <mem_malloc+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d00b      	beq.n	80037ce <mem_malloc+0x136>
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <mem_malloc+0x1b0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <mem_malloc+0x136>
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <mem_malloc+0x1bc>)
 80037c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80037c6:	4924      	ldr	r1, [pc, #144]	; (8003858 <mem_malloc+0x1c0>)
 80037c8:	4824      	ldr	r0, [pc, #144]	; (800385c <mem_malloc+0x1c4>)
 80037ca:	f008 fa61 	bl	800bc90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4413      	add	r3, r2
 80037d4:	3308      	adds	r3, #8
 80037d6:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <mem_malloc+0x1b8>)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	4293      	cmp	r3, r2
 80037dc:	d906      	bls.n	80037ec <mem_malloc+0x154>
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <mem_malloc+0x1bc>)
 80037e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80037e4:	491e      	ldr	r1, [pc, #120]	; (8003860 <mem_malloc+0x1c8>)
 80037e6:	481d      	ldr	r0, [pc, #116]	; (800385c <mem_malloc+0x1c4>)
 80037e8:	f008 fa52 	bl	800bc90 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <mem_malloc+0x16c>
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <mem_malloc+0x1bc>)
 80037f8:	f240 22d6 	movw	r2, #726	; 0x2d6
 80037fc:	4919      	ldr	r1, [pc, #100]	; (8003864 <mem_malloc+0x1cc>)
 80037fe:	4817      	ldr	r0, [pc, #92]	; (800385c <mem_malloc+0x1c4>)
 8003800:	f008 fa46 	bl	800bc90 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <mem_malloc+0x184>
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <mem_malloc+0x1bc>)
 8003810:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8003814:	4914      	ldr	r1, [pc, #80]	; (8003868 <mem_malloc+0x1d0>)
 8003816:	4811      	ldr	r0, [pc, #68]	; (800385c <mem_malloc+0x1c4>)
 8003818:	f008 fa3a 	bl	800bc90 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3308      	adds	r3, #8
 8003820:	e00d      	b.n	800383e <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <mem_malloc+0x1b4>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	8bfb      	ldrh	r3, [r7, #30]
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800382e:	8bfa      	ldrh	r2, [r7, #30]
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003836:	429a      	cmp	r2, r3
 8003838:	f4ff af51 	bcc.w	80036de <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200000a0 	.word	0x200000a0
 800384c:	20000098 	.word	0x20000098
 8003850:	2000009c 	.word	0x2000009c
 8003854:	0800cac4 	.word	0x0800cac4
 8003858:	0800cc20 	.word	0x0800cc20
 800385c:	0800cb0c 	.word	0x0800cb0c
 8003860:	0800cc3c 	.word	0x0800cc3c
 8003864:	0800cc6c 	.word	0x0800cc6c
 8003868:	0800cc9c 	.word	0x0800cc9c

0800386c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	3303      	adds	r3, #3
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e011      	b.n	80038b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	885b      	ldrh	r3, [r3, #2]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	dbe7      	blt.n	800388e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80038d2:	2300      	movs	r3, #0
 80038d4:	80fb      	strh	r3, [r7, #6]
 80038d6:	e009      	b.n	80038ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <memp_init+0x30>)
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffc3 	bl	800386c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	3301      	adds	r3, #1
 80038ea:	80fb      	strh	r3, [r7, #6]
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d9f2      	bls.n	80038d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	0800e7a4 	.word	0x0800e7a4

08003900 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d012      	beq.n	800393c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <do_memp_malloc_pool+0x38>
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <do_memp_malloc_pool+0x48>)
 800392c:	f240 1249 	movw	r2, #329	; 0x149
 8003930:	4906      	ldr	r1, [pc, #24]	; (800394c <do_memp_malloc_pool+0x4c>)
 8003932:	4807      	ldr	r0, [pc, #28]	; (8003950 <do_memp_malloc_pool+0x50>)
 8003934:	f008 f9ac 	bl	800bc90 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	e000      	b.n	800393e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	0800ccc0 	.word	0x0800ccc0
 800394c:	0800ccf0 	.word	0x0800ccf0
 8003950:	0800cd14 	.word	0x0800cd14

08003954 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d908      	bls.n	8003976 <memp_malloc+0x22>
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <memp_malloc+0x3c>)
 8003966:	f240 1287 	movw	r2, #391	; 0x187
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <memp_malloc+0x40>)
 800396c:	480a      	ldr	r0, [pc, #40]	; (8003998 <memp_malloc+0x44>)
 800396e:	f008 f98f 	bl	800bc90 <iprintf>
 8003972:	2300      	movs	r3, #0
 8003974:	e008      	b.n	8003988 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4a08      	ldr	r2, [pc, #32]	; (800399c <memp_malloc+0x48>)
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ffbe 	bl	8003900 <do_memp_malloc_pool>
 8003984:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	0800ccc0 	.word	0x0800ccc0
 8003994:	0800cd50 	.word	0x0800cd50
 8003998:	0800cd14 	.word	0x0800cd14
 800399c:	0800e7a4 	.word	0x0800e7a4

080039a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <do_memp_free_pool+0x22>
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <do_memp_free_pool+0x40>)
 80039b6:	f240 129d 	movw	r2, #413	; 0x19d
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <do_memp_free_pool+0x44>)
 80039bc:	480a      	ldr	r0, [pc, #40]	; (80039e8 <do_memp_free_pool+0x48>)
 80039be:	f008 f967 	bl	800bc90 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	0800ccc0 	.word	0x0800ccc0
 80039e4:	0800cd70 	.word	0x0800cd70
 80039e8:	0800cd14 	.word	0x0800cd14

080039ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d907      	bls.n	8003a0e <memp_free+0x22>
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <memp_free+0x44>)
 8003a00:	f240 12db 	movw	r2, #475	; 0x1db
 8003a04:	490b      	ldr	r1, [pc, #44]	; (8003a34 <memp_free+0x48>)
 8003a06:	480c      	ldr	r0, [pc, #48]	; (8003a38 <memp_free+0x4c>)
 8003a08:	f008 f942 	bl	800bc90 <iprintf>
 8003a0c:	e00c      	b.n	8003a28 <memp_free+0x3c>

  if (mem == NULL) {
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <memp_free+0x50>)
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ffbe 	bl	80039a0 <do_memp_free_pool>
 8003a24:	e000      	b.n	8003a28 <memp_free+0x3c>
    return;
 8003a26:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	0800ccc0 	.word	0x0800ccc0
 8003a34:	0800cd90 	.word	0x0800cd90
 8003a38:	0800cd14 	.word	0x0800cd14
 8003a3c:	0800e7a4 	.word	0x0800e7a4

08003a40 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <netif_add+0x20>
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <netif_add+0x94>)
 8003a66:	22fb      	movs	r2, #251	; 0xfb
 8003a68:	491f      	ldr	r1, [pc, #124]	; (8003ae8 <netif_add+0x98>)
 8003a6a:	4820      	ldr	r0, [pc, #128]	; (8003aec <netif_add+0x9c>)
 8003a6c:	f008 f910 	bl	800bc90 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <netif_add+0xa0>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	b2d1      	uxtb	r1, r2
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <netif_add+0xa0>)
 8003aa2:	7011      	strb	r1, [r2, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f81e 	bl	8003af8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	4798      	blx	r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <netif_add+0x7c>
    return NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e007      	b.n	8003adc <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <netif_add+0xa4>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <netif_add+0xa4>)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	0800cdac 	.word	0x0800cdac
 8003ae8:	0800cde0 	.word	0x0800cde0
 8003aec:	0800cdf8 	.word	0x0800cdf8
 8003af0:	200000c8 	.word	0x200000c8
 8003af4:	2000686c 	.word	0x2000686c

08003af8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <netif_set_addr+0x1c>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f81a 	bl	8003b50 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f862 	bl	8003be8 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f84a 	bl	8003bc0 <netif_set_gw>
 8003b2c:	e00b      	b.n	8003b46 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f859 	bl	8003be8 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f841 	bl	8003bc0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f805 	bl	8003b50 <netif_set_ipaddr>
  }
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <netif_set_ipaddr+0x18>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e002      	b.n	8003b6e <netif_set_ipaddr+0x1e>
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <netif_set_ipaddr+0x6c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d01c      	beq.n	8003bb4 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	f107 020c 	add.w	r2, r7, #12
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 f9b9 	bl	8005efc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	f107 020c 	add.w	r2, r7, #12
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f005 fdfd 	bl	8009794 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <netif_set_ipaddr+0x56>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	e000      	b.n	8003ba8 <netif_set_ipaddr+0x58>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003bac:	2101      	movs	r1, #1
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f861 	bl	8003c76 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	0800e808 	.word	0x0800e808

08003bc0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <netif_set_gw+0x16>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	e000      	b.n	8003bd8 <netif_set_gw+0x18>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <netif_set_netmask+0x16>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	e000      	b.n	8003c00 <netif_set_netmask+0x18>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <netif_set_default+0x1c>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20006870 	.word	0x20006870

08003c30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003c66:	2103      	movs	r1, #3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f804 	bl	8003c76 <netif_issue_reports>
    }
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d011      	beq.n	8003cb0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f006 fca6 	bl	800a5fc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d012      	beq.n	8003cf4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f006 f84a 	bl	8009d88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <pbuf_free_ooseq+0x40>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <pbuf_free_ooseq+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	e00f      	b.n	8003d30 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fdff 	bl	8005920 <tcp_segs_free>
      pcb->ooseq = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8003d28:	e005      	b.n	8003d36 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ec      	bne.n	8003d10 <pbuf_free_ooseq+0x14>
    }
  }
}
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20006874 	.word	0x20006874
 8003d40:	2000687c 	.word	0x2000687c

08003d44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <pbuf_pool_is_empty+0x14>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20006874 	.word	0x20006874

08003d5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	460b      	mov	r3, r1
 8003d68:	80bb      	strh	r3, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d81c      	bhi.n	8003dae <pbuf_alloc+0x52>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <pbuf_alloc+0x20>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003d97 	.word	0x08003d97
 8003d84:	08003d9d 	.word	0x08003d9d
 8003d88:	08003da3 	.word	0x08003da3
 8003d8c:	08003da9 	.word	0x08003da9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003d90:	2336      	movs	r3, #54	; 0x36
 8003d92:	82fb      	strh	r3, [r7, #22]
    break;
 8003d94:	e014      	b.n	8003dc0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003d96:	2322      	movs	r3, #34	; 0x22
 8003d98:	82fb      	strh	r3, [r7, #22]
    break;
 8003d9a:	e011      	b.n	8003dc0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003d9c:	230e      	movs	r3, #14
 8003d9e:	82fb      	strh	r3, [r7, #22]
    break;
 8003da0:	e00e      	b.n	8003dc0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003da2:	2300      	movs	r3, #0
 8003da4:	82fb      	strh	r3, [r7, #22]
    break;
 8003da6:	e00b      	b.n	8003dc0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	82fb      	strh	r3, [r7, #22]
    break;
 8003dac:	e008      	b.n	8003dc0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003dae:	4ba5      	ldr	r3, [pc, #660]	; (8004044 <pbuf_alloc+0x2e8>)
 8003db0:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003db4:	49a4      	ldr	r1, [pc, #656]	; (8004048 <pbuf_alloc+0x2ec>)
 8003db6:	48a5      	ldr	r0, [pc, #660]	; (800404c <pbuf_alloc+0x2f0>)
 8003db8:	f007 ff6a 	bl	800bc90 <iprintf>
    return NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e15d      	b.n	800407c <pbuf_alloc+0x320>
  }

  switch (type) {
 8003dc0:	79bb      	ldrb	r3, [r7, #6]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	f200 8134 	bhi.w	8004030 <pbuf_alloc+0x2d4>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <pbuf_alloc+0x74>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003f71 	.word	0x08003f71
 8003dd4:	08003ffd 	.word	0x08003ffd
 8003dd8:	08003ffd 	.word	0x08003ffd
 8003ddc:	08003de1 	.word	0x08003de1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003de0:	2008      	movs	r0, #8
 8003de2:	f7ff fdb7 	bl	8003954 <memp_malloc>
 8003de6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8003dee:	f7ff ffa9 	bl	8003d44 <pbuf_pool_is_empty>
      return NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e142      	b.n	800407c <pbuf_alloc+0x320>
    }
    p->type = type;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	79ba      	ldrb	r2, [r7, #6]
 8003dfa:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003e02:	8afb      	ldrh	r3, [r7, #22]
 8003e04:	3310      	adds	r3, #16
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	f023 0303 	bic.w	r3, r3, #3
 8003e10:	461a      	mov	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <pbuf_alloc+0xd4>
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <pbuf_alloc+0x2e8>)
 8003e24:	f240 1229 	movw	r2, #297	; 0x129
 8003e28:	4989      	ldr	r1, [pc, #548]	; (8004050 <pbuf_alloc+0x2f4>)
 8003e2a:	4888      	ldr	r0, [pc, #544]	; (800404c <pbuf_alloc+0x2f0>)
 8003e2c:	f007 ff30 	bl	800bc90 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	88ba      	ldrh	r2, [r7, #4]
 8003e34:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003e36:	8afb      	ldrh	r3, [r7, #22]
 8003e38:	3303      	adds	r3, #3
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8003e42:	88bb      	ldrh	r3, [r7, #4]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bf28      	it	cs
 8003e48:	4613      	movcs	r3, r2
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	8952      	ldrh	r2, [r2, #10]
 8003e58:	441a      	add	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d906      	bls.n	8003e72 <pbuf_alloc+0x116>
 8003e64:	4b77      	ldr	r3, [pc, #476]	; (8004044 <pbuf_alloc+0x2e8>)
 8003e66:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003e6a:	497a      	ldr	r1, [pc, #488]	; (8004054 <pbuf_alloc+0x2f8>)
 8003e6c:	4877      	ldr	r0, [pc, #476]	; (800404c <pbuf_alloc+0x2f0>)
 8003e6e:	f007 ff0f 	bl	800bc90 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	3303      	adds	r3, #3
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003e7e:	d106      	bne.n	8003e8e <pbuf_alloc+0x132>
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <pbuf_alloc+0x2e8>)
 8003e82:	f44f 7299 	mov.w	r2, #306	; 0x132
 8003e86:	4974      	ldr	r1, [pc, #464]	; (8004058 <pbuf_alloc+0x2fc>)
 8003e88:	4870      	ldr	r0, [pc, #448]	; (800404c <pbuf_alloc+0x2f0>)
 8003e8a:	f007 ff01 	bl	800bc90 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2201      	movs	r2, #1
 8003e92:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8003e98:	88bb      	ldrh	r3, [r7, #4]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	8952      	ldrh	r2, [r2, #10]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8003ea2:	e061      	b.n	8003f68 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003ea4:	2008      	movs	r0, #8
 8003ea6:	f7ff fd55 	bl	8003954 <memp_malloc>
 8003eaa:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8003eb2:	f7ff ff47 	bl	8003d44 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8003eb6:	69f8      	ldr	r0, [r7, #28]
 8003eb8:	f000 fac2 	bl	8004440 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e0dd      	b.n	800407c <pbuf_alloc+0x320>
      }
      q->type = type;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	79ba      	ldrb	r2, [r7, #6]
 8003ec4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	dd06      	ble.n	8003ef0 <pbuf_alloc+0x194>
 8003ee2:	4b58      	ldr	r3, [pc, #352]	; (8004044 <pbuf_alloc+0x2e8>)
 8003ee4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003ee8:	495c      	ldr	r1, [pc, #368]	; (800405c <pbuf_alloc+0x300>)
 8003eea:	4858      	ldr	r0, [pc, #352]	; (800404c <pbuf_alloc+0x2f0>)
 8003eec:	f007 fed0 	bl	800bc90 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003f00:	bf28      	it	cs
 8003f02:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f103 0210 	add.w	r2, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <pbuf_alloc+0x1d4>
 8003f22:	4b48      	ldr	r3, [pc, #288]	; (8004044 <pbuf_alloc+0x2e8>)
 8003f24:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <pbuf_alloc+0x304>)
 8003f2a:	4848      	ldr	r0, [pc, #288]	; (800404c <pbuf_alloc+0x2f0>)
 8003f2c:	f007 feb0 	bl	800bc90 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	8952      	ldrh	r2, [r2, #10]
 8003f38:	441a      	add	r2, r3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d906      	bls.n	8003f52 <pbuf_alloc+0x1f6>
 8003f44:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <pbuf_alloc+0x2e8>)
 8003f46:	f240 1255 	movw	r2, #341	; 0x155
 8003f4a:	4942      	ldr	r1, [pc, #264]	; (8004054 <pbuf_alloc+0x2f8>)
 8003f4c:	483f      	ldr	r0, [pc, #252]	; (800404c <pbuf_alloc+0x2f0>)
 8003f4e:	f007 fe9f 	bl	800bc90 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	895b      	ldrh	r3, [r3, #10]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dc9a      	bgt.n	8003ea4 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8003f6e:	e07e      	b.n	800406e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8003f70:	8afb      	ldrh	r3, [r7, #22]
 8003f72:	3313      	adds	r3, #19
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	88bb      	ldrh	r3, [r7, #4]
 8003f7e:	3303      	adds	r3, #3
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8003f8c:	897a      	ldrh	r2, [r7, #10]
 8003f8e:	88bb      	ldrh	r3, [r7, #4]
 8003f90:	3303      	adds	r3, #3
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d201      	bcs.n	8003f9e <pbuf_alloc+0x242>
        return NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e06e      	b.n	800407c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fb79 	bl	8003698 <mem_malloc>
 8003fa6:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <pbuf_alloc+0x256>
      return NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e064      	b.n	800407c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	3310      	adds	r3, #16
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3303      	adds	r3, #3
 8003fbc:	f023 0303 	bic.w	r3, r3, #3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	88ba      	ldrh	r2, [r7, #4]
 8003fca:	811a      	strh	r2, [r3, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	891a      	ldrh	r2, [r3, #8]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    p->type = type;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	79ba      	ldrb	r2, [r7, #6]
 8003fde:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d03f      	beq.n	800406c <pbuf_alloc+0x310>
 8003fec:	4b15      	ldr	r3, [pc, #84]	; (8004044 <pbuf_alloc+0x2e8>)
 8003fee:	f240 1277 	movw	r2, #375	; 0x177
 8003ff2:	491c      	ldr	r1, [pc, #112]	; (8004064 <pbuf_alloc+0x308>)
 8003ff4:	4815      	ldr	r0, [pc, #84]	; (800404c <pbuf_alloc+0x2f0>)
 8003ff6:	f007 fe4b 	bl	800bc90 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8003ffa:	e037      	b.n	800406c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003ffc:	2007      	movs	r0, #7
 8003ffe:	f7ff fca9 	bl	8003954 <memp_malloc>
 8004002:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	e036      	b.n	800407c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2200      	movs	r2, #0
 8004012:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	88ba      	ldrh	r2, [r7, #4]
 8004018:	811a      	strh	r2, [r3, #8]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	891a      	ldrh	r2, [r3, #8]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	79ba      	ldrb	r2, [r7, #6]
 800402c:	731a      	strb	r2, [r3, #12]
    break;
 800402e:	e01e      	b.n	800406e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <pbuf_alloc+0x2e8>)
 8004032:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004036:	490c      	ldr	r1, [pc, #48]	; (8004068 <pbuf_alloc+0x30c>)
 8004038:	4804      	ldr	r0, [pc, #16]	; (800404c <pbuf_alloc+0x2f0>)
 800403a:	f007 fe29 	bl	800bc90 <iprintf>
    return NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	e01c      	b.n	800407c <pbuf_alloc+0x320>
 8004042:	bf00      	nop
 8004044:	0800ce20 	.word	0x0800ce20
 8004048:	0800ce50 	.word	0x0800ce50
 800404c:	0800ce6c 	.word	0x0800ce6c
 8004050:	0800ce94 	.word	0x0800ce94
 8004054:	0800cec4 	.word	0x0800cec4
 8004058:	0800cef8 	.word	0x0800cef8
 800405c:	0800cf2c 	.word	0x0800cf2c
 8004060:	0800cf40 	.word	0x0800cf40
 8004064:	0800cf70 	.word	0x0800cf70
 8004068:	0800cf9c 	.word	0x0800cf9c
    break;
 800406c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2201      	movs	r2, #1
 8004072:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2200      	movs	r2, #0
 8004078:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800407a:	69fb      	ldr	r3, [r7, #28]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]
 8004090:	460b      	mov	r3, r1
 8004092:	80bb      	strh	r3, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d81b      	bhi.n	80040d6 <pbuf_alloced_custom+0x52>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <pbuf_alloced_custom+0x20>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040b9 	.word	0x080040b9
 80040a8:	080040bf 	.word	0x080040bf
 80040ac:	080040c5 	.word	0x080040c5
 80040b0:	080040cb 	.word	0x080040cb
 80040b4:	080040d1 	.word	0x080040d1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80040b8:	2336      	movs	r3, #54	; 0x36
 80040ba:	81fb      	strh	r3, [r7, #14]
    break;
 80040bc:	e014      	b.n	80040e8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80040be:	2322      	movs	r3, #34	; 0x22
 80040c0:	81fb      	strh	r3, [r7, #14]
    break;
 80040c2:	e011      	b.n	80040e8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80040c4:	230e      	movs	r3, #14
 80040c6:	81fb      	strh	r3, [r7, #14]
    break;
 80040c8:	e00e      	b.n	80040e8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80040ca:	2300      	movs	r3, #0
 80040cc:	81fb      	strh	r3, [r7, #14]
    break;
 80040ce:	e00b      	b.n	80040e8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	81fb      	strh	r3, [r7, #14]
    break;
 80040d4:	e008      	b.n	80040e8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <pbuf_alloced_custom+0xc8>)
 80040d8:	f240 12c5 	movw	r2, #453	; 0x1c5
 80040dc:	491c      	ldr	r1, [pc, #112]	; (8004150 <pbuf_alloced_custom+0xcc>)
 80040de:	481d      	ldr	r0, [pc, #116]	; (8004154 <pbuf_alloced_custom+0xd0>)
 80040e0:	f007 fdd6 	bl	800bc90 <iprintf>
    return NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e02d      	b.n	8004144 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	3303      	adds	r3, #3
 80040ec:	f023 0203 	bic.w	r2, r3, #3
 80040f0:	88bb      	ldrh	r3, [r7, #4]
 80040f2:	441a      	add	r2, r3
 80040f4:	8bbb      	ldrh	r3, [r7, #28]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d901      	bls.n	80040fe <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e022      	b.n	8004144 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	3303      	adds	r3, #3
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	441a      	add	r2, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e002      	b.n	8004122 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	88ba      	ldrh	r2, [r7, #4]
 800412c:	811a      	strh	r2, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	891a      	ldrh	r2, [r3, #8]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	79ba      	ldrb	r2, [r7, #6]
 800413a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2201      	movs	r2, #1
 8004140:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004142:	683b      	ldr	r3, [r7, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	0800ce20 	.word	0x0800ce20
 8004150:	0800cfb8 	.word	0x0800cfb8
 8004154:	0800ce6c 	.word	0x0800ce6c

08004158 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <pbuf_realloc+0x20>
 800416a:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <pbuf_realloc+0x140>)
 800416c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004170:	494a      	ldr	r1, [pc, #296]	; (800429c <pbuf_realloc+0x144>)
 8004172:	484b      	ldr	r0, [pc, #300]	; (80042a0 <pbuf_realloc+0x148>)
 8004174:	f007 fd8c 	bl	800bc90 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7b1b      	ldrb	r3, [r3, #12]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d012      	beq.n	80041a6 <pbuf_realloc+0x4e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7b1b      	ldrb	r3, [r3, #12]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00e      	beq.n	80041a6 <pbuf_realloc+0x4e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	7b1b      	ldrb	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <pbuf_realloc+0x4e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7b1b      	ldrb	r3, [r3, #12]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d006      	beq.n	80041a6 <pbuf_realloc+0x4e>
 8004198:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <pbuf_realloc+0x140>)
 800419a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800419e:	4941      	ldr	r1, [pc, #260]	; (80042a4 <pbuf_realloc+0x14c>)
 80041a0:	483f      	ldr	r0, [pc, #252]	; (80042a0 <pbuf_realloc+0x148>)
 80041a2:	f007 fd75 	bl	800bc90 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	891b      	ldrh	r3, [r3, #8]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d26f      	bcs.n	8004290 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	8912      	ldrh	r2, [r2, #8]
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	827b      	strh	r3, [r7, #18]
  q = p;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80041c2:	e025      	b.n	8004210 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	895b      	ldrh	r3, [r3, #10]
 80041c8:	8a7a      	ldrh	r2, [r7, #18]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041d4:	4293      	cmp	r3, r2
 80041d6:	dd06      	ble.n	80041e6 <pbuf_realloc+0x8e>
 80041d8:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <pbuf_realloc+0x140>)
 80041da:	f240 220b 	movw	r2, #523	; 0x20b
 80041de:	4932      	ldr	r1, [pc, #200]	; (80042a8 <pbuf_realloc+0x150>)
 80041e0:	482f      	ldr	r0, [pc, #188]	; (80042a0 <pbuf_realloc+0x148>)
 80041e2:	f007 fd55 	bl	800bc90 <iprintf>
    q->tot_len += (u16_t)grow;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	891a      	ldrh	r2, [r3, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <pbuf_realloc+0xb8>
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <pbuf_realloc+0x140>)
 8004204:	f240 220f 	movw	r2, #527	; 0x20f
 8004208:	4928      	ldr	r1, [pc, #160]	; (80042ac <pbuf_realloc+0x154>)
 800420a:	4825      	ldr	r0, [pc, #148]	; (80042a0 <pbuf_realloc+0x148>)
 800420c:	f007 fd40 	bl	800bc90 <iprintf>
  while (rem_len > q->len) {
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	895b      	ldrh	r3, [r3, #10]
 8004214:	8a7a      	ldrh	r2, [r7, #18]
 8004216:	429a      	cmp	r2, r3
 8004218:	d8d4      	bhi.n	80041c4 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	7b1b      	ldrb	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d122      	bne.n	8004268 <pbuf_realloc+0x110>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	895b      	ldrh	r3, [r3, #10]
 8004226:	8a7a      	ldrh	r2, [r7, #18]
 8004228:	429a      	cmp	r2, r3
 800422a:	d01d      	beq.n	8004268 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	7b5b      	ldrb	r3, [r3, #13]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d117      	bne.n	8004268 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	461a      	mov	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	b29a      	uxth	r2, r3
 8004244:	8a7b      	ldrh	r3, [r7, #18]
 8004246:	4413      	add	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f7ff f947 	bl	80034e0 <mem_trim>
 8004252:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <pbuf_realloc+0x110>
 800425a:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <pbuf_realloc+0x140>)
 800425c:	f240 221d 	movw	r2, #541	; 0x21d
 8004260:	4913      	ldr	r1, [pc, #76]	; (80042b0 <pbuf_realloc+0x158>)
 8004262:	480f      	ldr	r0, [pc, #60]	; (80042a0 <pbuf_realloc+0x148>)
 8004264:	f007 fd14 	bl	800bc90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	8a7a      	ldrh	r2, [r7, #18]
 800426c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	895a      	ldrh	r2, [r3, #10]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f8dc 	bl	8004440 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e000      	b.n	8004292 <pbuf_realloc+0x13a>
    return;
 8004290:	bf00      	nop

}
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0800ce20 	.word	0x0800ce20
 800429c:	0800cfdc 	.word	0x0800cfdc
 80042a0:	0800ce6c 	.word	0x0800ce6c
 80042a4:	0800cff4 	.word	0x0800cff4
 80042a8:	0800d010 	.word	0x0800d010
 80042ac:	0800d024 	.word	0x0800d024
 80042b0:	0800d03c 	.word	0x0800d03c

080042b4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
 80042c0:	4613      	mov	r3, r2
 80042c2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <pbuf_header_impl+0x24>
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <pbuf_header_impl+0x130>)
 80042cc:	f240 223f 	movw	r2, #575	; 0x23f
 80042d0:	4945      	ldr	r1, [pc, #276]	; (80043e8 <pbuf_header_impl+0x134>)
 80042d2:	4846      	ldr	r0, [pc, #280]	; (80043ec <pbuf_header_impl+0x138>)
 80042d4:	f007 fcdc 	bl	800bc90 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80042d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <pbuf_header_impl+0x32>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <pbuf_header_impl+0x36>
    return 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e078      	b.n	80043dc <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80042ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da10      	bge.n	8004314 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	425b      	negs	r3, r3
 80042f6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	895b      	ldrh	r3, [r3, #10]
 80042fc:	89fa      	ldrh	r2, [r7, #14]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d90a      	bls.n	8004318 <pbuf_header_impl+0x64>
 8004302:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <pbuf_header_impl+0x130>)
 8004304:	f240 2247 	movw	r2, #583	; 0x247
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <pbuf_header_impl+0x13c>)
 800430a:	4838      	ldr	r0, [pc, #224]	; (80043ec <pbuf_header_impl+0x138>)
 800430c:	f007 fcc0 	bl	800bc90 <iprintf>
 8004310:	2301      	movs	r3, #1
 8004312:	e063      	b.n	80043dc <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7b1b      	ldrb	r3, [r3, #12]
 800431c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004324:	89bb      	ldrh	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <pbuf_header_impl+0x7c>
 800432a:	89bb      	ldrh	r3, [r7, #12]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d112      	bne.n	8004356 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004338:	425b      	negs	r3, r3
 800433a:	441a      	add	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3310      	adds	r3, #16
 8004348:	429a      	cmp	r2, r3
 800434a:	d238      	bcs.n	80043be <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004352:	2301      	movs	r3, #1
 8004354:	e042      	b.n	80043dc <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004356:	89bb      	ldrh	r3, [r7, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d002      	beq.n	8004362 <pbuf_header_impl+0xae>
 800435c:	89bb      	ldrh	r3, [r7, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d124      	bne.n	80043ac <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004362:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da0d      	bge.n	8004386 <pbuf_header_impl+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	895b      	ldrh	r3, [r3, #10]
 800436e:	89fa      	ldrh	r2, [r7, #14]
 8004370:	429a      	cmp	r2, r3
 8004372:	d808      	bhi.n	8004386 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800437c:	425b      	negs	r3, r3
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	e011      	b.n	80043aa <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004386:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800438a:	2b00      	cmp	r3, #0
 800438c:	dd0b      	ble.n	80043a6 <pbuf_header_impl+0xf2>
 800438e:	787b      	ldrb	r3, [r7, #1]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800439c:	425b      	negs	r3, r3
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	e001      	b.n	80043aa <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e018      	b.n	80043dc <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80043aa:	e008      	b.n	80043be <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <pbuf_header_impl+0x130>)
 80043ae:	f240 2277 	movw	r2, #631	; 0x277
 80043b2:	4910      	ldr	r1, [pc, #64]	; (80043f4 <pbuf_header_impl+0x140>)
 80043b4:	480d      	ldr	r0, [pc, #52]	; (80043ec <pbuf_header_impl+0x138>)
 80043b6:	f007 fc6b 	bl	800bc90 <iprintf>
    return 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00e      	b.n	80043dc <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	895a      	ldrh	r2, [r3, #10]
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	4413      	add	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	891a      	ldrh	r2, [r3, #8]
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	4413      	add	r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	0800ce20 	.word	0x0800ce20
 80043e8:	0800d058 	.word	0x0800d058
 80043ec:	0800ce6c 	.word	0x0800ce6c
 80043f0:	0800d064 	.word	0x0800d064
 80043f4:	0800d084 	.word	0x0800d084

080043f8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004404:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004408:	2200      	movs	r2, #0
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff51 	bl	80042b4 <pbuf_header_impl>
 8004412:	4603      	mov	r3, r0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800442c:	2201      	movs	r2, #1
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ff3f 	bl	80042b4 <pbuf_header_impl>
 8004436:	4603      	mov	r3, r0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <pbuf_free+0x22>
 8004454:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <pbuf_free+0x110>)
 8004456:	f240 22d2 	movw	r2, #722	; 0x2d2
 800445a:	493e      	ldr	r1, [pc, #248]	; (8004554 <pbuf_free+0x114>)
 800445c:	483e      	ldr	r0, [pc, #248]	; (8004558 <pbuf_free+0x118>)
 800445e:	f007 fc17 	bl	800bc90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004462:	2300      	movs	r3, #0
 8004464:	e070      	b.n	8004548 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7b1b      	ldrb	r3, [r3, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d012      	beq.n	8004494 <pbuf_free+0x54>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7b1b      	ldrb	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d00e      	beq.n	8004494 <pbuf_free+0x54>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7b1b      	ldrb	r3, [r3, #12]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d00a      	beq.n	8004494 <pbuf_free+0x54>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7b1b      	ldrb	r3, [r3, #12]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d006      	beq.n	8004494 <pbuf_free+0x54>
 8004486:	4b32      	ldr	r3, [pc, #200]	; (8004550 <pbuf_free+0x110>)
 8004488:	f240 22de 	movw	r2, #734	; 0x2de
 800448c:	4933      	ldr	r1, [pc, #204]	; (800455c <pbuf_free+0x11c>)
 800448e:	4832      	ldr	r0, [pc, #200]	; (8004558 <pbuf_free+0x118>)
 8004490:	f007 fbfe 	bl	800bc90 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004498:	e052      	b.n	8004540 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	89db      	ldrh	r3, [r3, #14]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <pbuf_free+0x70>
 80044a2:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <pbuf_free+0x110>)
 80044a4:	f240 22eb 	movw	r2, #747	; 0x2eb
 80044a8:	492d      	ldr	r1, [pc, #180]	; (8004560 <pbuf_free+0x120>)
 80044aa:	482b      	ldr	r0, [pc, #172]	; (8004558 <pbuf_free+0x118>)
 80044ac:	f007 fbf0 	bl	800bc90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	89db      	ldrh	r3, [r3, #14]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	81da      	strh	r2, [r3, #14]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	89db      	ldrh	r3, [r3, #14]
 80044c0:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80044c2:	8abb      	ldrh	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d139      	bne.n	800453c <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	7b1b      	ldrb	r3, [r3, #12]
 80044d2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7b5b      	ldrb	r3, [r3, #13]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d011      	beq.n	8004504 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <pbuf_free+0xba>
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <pbuf_free+0x110>)
 80044ee:	f240 22f9 	movw	r2, #761	; 0x2f9
 80044f2:	491c      	ldr	r1, [pc, #112]	; (8004564 <pbuf_free+0x124>)
 80044f4:	4818      	ldr	r0, [pc, #96]	; (8004558 <pbuf_free+0x118>)
 80044f6:	f007 fbcb 	bl	800bc90 <iprintf>
        pc->custom_free_function(p);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
 8004502:	e015      	b.n	8004530 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004504:	89fb      	ldrh	r3, [r7, #14]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d104      	bne.n	8004514 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	2008      	movs	r0, #8
 800450e:	f7ff fa6d 	bl	80039ec <memp_free>
 8004512:	e00d      	b.n	8004530 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d002      	beq.n	8004520 <pbuf_free+0xe0>
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d104      	bne.n	800452a <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	2007      	movs	r0, #7
 8004524:	f7ff fa62 	bl	80039ec <memp_free>
 8004528:	e002      	b.n	8004530 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fe ff76 	bl	800341c <mem_free>
        }
      }
      count++;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	3301      	adds	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	e001      	b.n	8004540 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1a9      	bne.n	800449a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	0800ce20 	.word	0x0800ce20
 8004554:	0800d058 	.word	0x0800d058
 8004558:	0800ce6c 	.word	0x0800ce6c
 800455c:	0800d094 	.word	0x0800d094
 8004560:	0800d0ac 	.word	0x0800d0ac
 8004564:	0800d0c4 	.word	0x0800d0c4

08004568 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004574:	e005      	b.n	8004582 <pbuf_clen+0x1a>
    ++len;
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	3301      	adds	r3, #1
 800457a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f6      	bne.n	8004576 <pbuf_clen+0xe>
  }
  return len;
 8004588:	89fb      	ldrh	r3, [r7, #14]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	89db      	ldrh	r3, [r3, #14]
 80045aa:	3301      	adds	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	89db      	ldrh	r3, [r3, #14]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <pbuf_ref+0x30>
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <pbuf_ref+0x38>)
 80045bc:	f240 3239 	movw	r2, #825	; 0x339
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <pbuf_ref+0x3c>)
 80045c2:	4805      	ldr	r0, [pc, #20]	; (80045d8 <pbuf_ref+0x40>)
 80045c4:	f007 fb64 	bl	800bc90 <iprintf>
  }
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	0800ce20 	.word	0x0800ce20
 80045d4:	0800d0e8 	.word	0x0800d0e8
 80045d8:	0800ce6c 	.word	0x0800ce6c

080045dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <pbuf_cat+0x16>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <pbuf_cat+0x26>
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <pbuf_cat+0x98>)
 80045f4:	f240 324d 	movw	r2, #845	; 0x34d
 80045f8:	491f      	ldr	r1, [pc, #124]	; (8004678 <pbuf_cat+0x9c>)
 80045fa:	4820      	ldr	r0, [pc, #128]	; (800467c <pbuf_cat+0xa0>)
 80045fc:	f007 fb48 	bl	800bc90 <iprintf>
 8004600:	e034      	b.n	800466c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e00a      	b.n	800461e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	891a      	ldrh	r2, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	891b      	ldrh	r3, [r3, #8]
 8004610:	4413      	add	r3, r2
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	891a      	ldrh	r2, [r3, #8]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	895b      	ldrh	r3, [r3, #10]
 800462e:	429a      	cmp	r2, r3
 8004630:	d006      	beq.n	8004640 <pbuf_cat+0x64>
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <pbuf_cat+0x98>)
 8004634:	f240 3255 	movw	r2, #853	; 0x355
 8004638:	4911      	ldr	r1, [pc, #68]	; (8004680 <pbuf_cat+0xa4>)
 800463a:	4810      	ldr	r0, [pc, #64]	; (800467c <pbuf_cat+0xa0>)
 800463c:	f007 fb28 	bl	800bc90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <pbuf_cat+0x7a>
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <pbuf_cat+0x98>)
 800464a:	f240 3256 	movw	r2, #854	; 0x356
 800464e:	490d      	ldr	r1, [pc, #52]	; (8004684 <pbuf_cat+0xa8>)
 8004650:	480a      	ldr	r0, [pc, #40]	; (800467c <pbuf_cat+0xa0>)
 8004652:	f007 fb1d 	bl	800bc90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	891a      	ldrh	r2, [r3, #8]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	891b      	ldrh	r3, [r3, #8]
 800465e:	4413      	add	r3, r2
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	0800ce20 	.word	0x0800ce20
 8004678:	0800d0fc 	.word	0x0800d0fc
 800467c:	0800ce6c 	.word	0x0800ce6c
 8004680:	0800d134 	.word	0x0800d134
 8004684:	0800d164 	.word	0x0800d164

08004688 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004692:	2300      	movs	r3, #0
 8004694:	81fb      	strh	r3, [r7, #14]
 8004696:	2300      	movs	r3, #0
 8004698:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <pbuf_copy+0x2a>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <pbuf_copy+0x2a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	891a      	ldrh	r2, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	891b      	ldrh	r3, [r3, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d209      	bcs.n	80046c6 <pbuf_copy+0x3e>
 80046b2:	4b54      	ldr	r3, [pc, #336]	; (8004804 <pbuf_copy+0x17c>)
 80046b4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80046b8:	4953      	ldr	r1, [pc, #332]	; (8004808 <pbuf_copy+0x180>)
 80046ba:	4854      	ldr	r0, [pc, #336]	; (800480c <pbuf_copy+0x184>)
 80046bc:	f007 fae8 	bl	800bc90 <iprintf>
 80046c0:	f06f 030f 	mvn.w	r3, #15
 80046c4:	e099      	b.n	80047fa <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	895b      	ldrh	r3, [r3, #10]
 80046ca:	461a      	mov	r2, r3
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	895b      	ldrh	r3, [r3, #10]
 80046d4:	4619      	mov	r1, r3
 80046d6:	89bb      	ldrh	r3, [r7, #12]
 80046d8:	1acb      	subs	r3, r1, r3
 80046da:	429a      	cmp	r2, r3
 80046dc:	db05      	blt.n	80046ea <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	895a      	ldrh	r2, [r3, #10]
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	817b      	strh	r3, [r7, #10]
 80046e8:	e004      	b.n	80046f4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	895a      	ldrh	r2, [r3, #10]
 80046ee:	89fb      	ldrh	r3, [r7, #14]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	18d0      	adds	r0, r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	89bb      	ldrh	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	897a      	ldrh	r2, [r7, #10]
 8004706:	4619      	mov	r1, r3
 8004708:	f007 faaf 	bl	800bc6a <memcpy>
    offset_to += len;
 800470c:	89fa      	ldrh	r2, [r7, #14]
 800470e:	897b      	ldrh	r3, [r7, #10]
 8004710:	4413      	add	r3, r2
 8004712:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004714:	89ba      	ldrh	r2, [r7, #12]
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	4413      	add	r3, r2
 800471a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	895b      	ldrh	r3, [r3, #10]
 8004720:	89fa      	ldrh	r2, [r7, #14]
 8004722:	429a      	cmp	r2, r3
 8004724:	d906      	bls.n	8004734 <pbuf_copy+0xac>
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <pbuf_copy+0x17c>)
 8004728:	f240 32cd 	movw	r2, #973	; 0x3cd
 800472c:	4938      	ldr	r1, [pc, #224]	; (8004810 <pbuf_copy+0x188>)
 800472e:	4837      	ldr	r0, [pc, #220]	; (800480c <pbuf_copy+0x184>)
 8004730:	f007 faae 	bl	800bc90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	895b      	ldrh	r3, [r3, #10]
 8004738:	89ba      	ldrh	r2, [r7, #12]
 800473a:	429a      	cmp	r2, r3
 800473c:	d906      	bls.n	800474c <pbuf_copy+0xc4>
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <pbuf_copy+0x17c>)
 8004740:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004744:	4933      	ldr	r1, [pc, #204]	; (8004814 <pbuf_copy+0x18c>)
 8004746:	4831      	ldr	r0, [pc, #196]	; (800480c <pbuf_copy+0x184>)
 8004748:	f007 faa2 	bl	800bc90 <iprintf>
    if (offset_from >= p_from->len) {
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	89ba      	ldrh	r2, [r7, #12]
 8004752:	429a      	cmp	r2, r3
 8004754:	d304      	bcc.n	8004760 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	895b      	ldrh	r3, [r3, #10]
 8004764:	89fa      	ldrh	r2, [r7, #14]
 8004766:	429a      	cmp	r2, r3
 8004768:	d114      	bne.n	8004794 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <pbuf_copy+0x10c>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <pbuf_copy+0x10c>
 8004780:	4b20      	ldr	r3, [pc, #128]	; (8004804 <pbuf_copy+0x17c>)
 8004782:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004786:	4924      	ldr	r1, [pc, #144]	; (8004818 <pbuf_copy+0x190>)
 8004788:	4820      	ldr	r0, [pc, #128]	; (800480c <pbuf_copy+0x184>)
 800478a:	f007 fa81 	bl	800bc90 <iprintf>
 800478e:	f06f 030f 	mvn.w	r3, #15
 8004792:	e032      	b.n	80047fa <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <pbuf_copy+0x13a>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	895a      	ldrh	r2, [r3, #10]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	891b      	ldrh	r3, [r3, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d10d      	bne.n	80047c2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <pbuf_copy+0x13a>
 80047ae:	4b15      	ldr	r3, [pc, #84]	; (8004804 <pbuf_copy+0x17c>)
 80047b0:	f240 32de 	movw	r2, #990	; 0x3de
 80047b4:	4919      	ldr	r1, [pc, #100]	; (800481c <pbuf_copy+0x194>)
 80047b6:	4815      	ldr	r0, [pc, #84]	; (800480c <pbuf_copy+0x184>)
 80047b8:	f007 fa6a 	bl	800bc90 <iprintf>
 80047bc:	f06f 0305 	mvn.w	r3, #5
 80047c0:	e01b      	b.n	80047fa <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <pbuf_copy+0x168>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	895a      	ldrh	r2, [r3, #10]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	891b      	ldrh	r3, [r3, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d10d      	bne.n	80047f0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <pbuf_copy+0x168>
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <pbuf_copy+0x17c>)
 80047de:	f240 32e3 	movw	r2, #995	; 0x3e3
 80047e2:	490e      	ldr	r1, [pc, #56]	; (800481c <pbuf_copy+0x194>)
 80047e4:	4809      	ldr	r0, [pc, #36]	; (800480c <pbuf_copy+0x184>)
 80047e6:	f007 fa53 	bl	800bc90 <iprintf>
 80047ea:	f06f 0305 	mvn.w	r3, #5
 80047ee:	e004      	b.n	80047fa <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f47f af67 	bne.w	80046c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	0800ce20 	.word	0x0800ce20
 8004808:	0800d1b0 	.word	0x0800d1b0
 800480c:	0800ce6c 	.word	0x0800ce6c
 8004810:	0800d1e0 	.word	0x0800d1e0
 8004814:	0800d1f8 	.word	0x0800d1f8
 8004818:	0800d214 	.word	0x0800d214
 800481c:	0800d224 	.word	0x0800d224

08004820 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	460b      	mov	r3, r1
 8004830:	80fb      	strh	r3, [r7, #6]
 8004832:	4613      	mov	r3, r2
 8004834:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <pbuf_copy_partial+0x32>
 8004840:	4b30      	ldr	r3, [pc, #192]	; (8004904 <pbuf_copy_partial+0xe4>)
 8004842:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004846:	4930      	ldr	r1, [pc, #192]	; (8004908 <pbuf_copy_partial+0xe8>)
 8004848:	4830      	ldr	r0, [pc, #192]	; (800490c <pbuf_copy_partial+0xec>)
 800484a:	f007 fa21 	bl	800bc90 <iprintf>
 800484e:	2300      	movs	r3, #0
 8004850:	e054      	b.n	80048fc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <pbuf_copy_partial+0x4a>
 8004858:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <pbuf_copy_partial+0xe4>)
 800485a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800485e:	492c      	ldr	r1, [pc, #176]	; (8004910 <pbuf_copy_partial+0xf0>)
 8004860:	482a      	ldr	r0, [pc, #168]	; (800490c <pbuf_copy_partial+0xec>)
 8004862:	f007 fa15 	bl	800bc90 <iprintf>
 8004866:	2300      	movs	r3, #0
 8004868:	e048      	b.n	80048fc <pbuf_copy_partial+0xdc>

  left = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <pbuf_copy_partial+0x5a>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <pbuf_copy_partial+0x5e>
    return 0;
 800487a:	2300      	movs	r3, #0
 800487c:	e03e      	b.n	80048fc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e034      	b.n	80048ee <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004884:	88bb      	ldrh	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <pbuf_copy_partial+0x80>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	895b      	ldrh	r3, [r3, #10]
 800488e:	88ba      	ldrh	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d305      	bcc.n	80048a0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	895b      	ldrh	r3, [r3, #10]
 8004898:	88ba      	ldrh	r2, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	80bb      	strh	r3, [r7, #4]
 800489e:	e023      	b.n	80048e8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	895a      	ldrh	r2, [r3, #10]
 80048a4:	88bb      	ldrh	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80048aa:	8b3a      	ldrh	r2, [r7, #24]
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d901      	bls.n	80048b6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80048b6:	8b7b      	ldrh	r3, [r7, #26]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	18d0      	adds	r0, r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	88bb      	ldrh	r3, [r7, #4]
 80048c2:	4413      	add	r3, r2
 80048c4:	8b3a      	ldrh	r2, [r7, #24]
 80048c6:	4619      	mov	r1, r3
 80048c8:	f007 f9cf 	bl	800bc6a <memcpy>
      copied_total += buf_copy_len;
 80048cc:	8afa      	ldrh	r2, [r7, #22]
 80048ce:	8b3b      	ldrh	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80048d4:	8b7a      	ldrh	r2, [r7, #26]
 80048d6:	8b3b      	ldrh	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	8b3b      	ldrh	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <pbuf_copy_partial+0xda>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1c4      	bne.n	8004884 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80048fa:	8afb      	ldrh	r3, [r7, #22]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	0800ce20 	.word	0x0800ce20
 8004908:	0800d250 	.word	0x0800d250
 800490c:	0800ce6c 	.word	0x0800ce6c
 8004910:	0800d270 	.word	0x0800d270

08004914 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004928:	f000 ff2c 	bl	8005784 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <tcp_tmr+0x28>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <tcp_tmr+0x28>)
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <tcp_tmr+0x28>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004944:	f000 fc5e 	bl	8005204 <tcp_slowtmr>
  }
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200000c9 	.word	0x200000c9

08004950 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e00a      	b.n	8004976 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d102      	bne.n	8004970 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f1      	bne.n	8004960 <tcp_remove_listener+0x10>
      }
   }
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <tcp_listen_closed+0x1a>
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <tcp_listen_closed+0x5c>)
 8004998:	22c0      	movs	r2, #192	; 0xc0
 800499a:	4913      	ldr	r1, [pc, #76]	; (80049e8 <tcp_listen_closed+0x60>)
 800499c:	4813      	ldr	r0, [pc, #76]	; (80049ec <tcp_listen_closed+0x64>)
 800499e:	f007 f977 	bl	800bc90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	7d1b      	ldrb	r3, [r3, #20]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d005      	beq.n	80049b6 <tcp_listen_closed+0x2e>
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <tcp_listen_closed+0x5c>)
 80049ac:	22c1      	movs	r2, #193	; 0xc1
 80049ae:	4910      	ldr	r1, [pc, #64]	; (80049f0 <tcp_listen_closed+0x68>)
 80049b0:	480e      	ldr	r0, [pc, #56]	; (80049ec <tcp_listen_closed+0x64>)
 80049b2:	f007 f96d 	bl	800bc90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80049b6:	2301      	movs	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e00b      	b.n	80049d4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <tcp_listen_closed+0x6c>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ffc1 	bl	8004950 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d9f0      	bls.n	80049bc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	0800d3a4 	.word	0x0800d3a4
 80049e8:	0800d3d4 	.word	0x0800d3d4
 80049ec:	0800d3e0 	.word	0x0800d3e0
 80049f0:	0800d408 	.word	0x0800d408
 80049f4:	0800e7e0 	.word	0x0800e7e0

080049f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80049f8:	b5b0      	push	{r4, r5, r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d076      	beq.n	8004af8 <tcp_close_shutdown+0x100>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	7d1b      	ldrb	r3, [r3, #20]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d003      	beq.n	8004a1a <tcp_close_shutdown+0x22>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7d1b      	ldrb	r3, [r3, #20]
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	d16e      	bne.n	8004af8 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <tcp_close_shutdown+0x36>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d064      	beq.n	8004af8 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7e9b      	ldrb	r3, [r3, #26]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <tcp_close_shutdown+0x50>
 8004a3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ba4 <tcp_close_shutdown+0x1ac>)
 8004a3c:	f240 120f 	movw	r2, #271	; 0x10f
 8004a40:	4959      	ldr	r1, [pc, #356]	; (8004ba8 <tcp_close_shutdown+0x1b0>)
 8004a42:	485a      	ldr	r0, [pc, #360]	; (8004bac <tcp_close_shutdown+0x1b4>)
 8004a44:	f007 f924 	bl	800bc90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a50:	687c      	ldr	r4, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1d1d      	adds	r5, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8adb      	ldrh	r3, [r3, #22]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	8b12      	ldrh	r2, [r2, #24]
 8004a5e:	9201      	str	r2, [sp, #4]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	462b      	mov	r3, r5
 8004a64:	4622      	mov	r2, r4
 8004a66:	f004 f9c7 	bl	8008df8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f001 f92a 	bl	8005cc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004a70:	4b4f      	ldr	r3, [pc, #316]	; (8004bb0 <tcp_close_shutdown+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d105      	bne.n	8004a86 <tcp_close_shutdown+0x8e>
 8004a7a:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <tcp_close_shutdown+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a4b      	ldr	r2, [pc, #300]	; (8004bb0 <tcp_close_shutdown+0x1b8>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e013      	b.n	8004aae <tcp_close_shutdown+0xb6>
 8004a86:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <tcp_close_shutdown+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e00c      	b.n	8004aa8 <tcp_close_shutdown+0xb0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <tcp_close_shutdown+0xaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	e005      	b.n	8004aae <tcp_close_shutdown+0xb6>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ef      	bne.n	8004a8e <tcp_close_shutdown+0x96>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60da      	str	r2, [r3, #12]
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <tcp_close_shutdown+0x1bc>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7d1b      	ldrb	r3, [r3, #20]
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d10c      	bne.n	8004adc <tcp_close_shutdown+0xe4>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	220a      	movs	r2, #10
 8004ac6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <tcp_close_shutdown+0x1c0>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <tcp_close_shutdown+0x1c0>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	f004 fbdf 	bl	8009298 <tcp_timer_needed>
 8004ada:	e00b      	b.n	8004af4 <tcp_close_shutdown+0xfc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8004adc:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <tcp_close_shutdown+0x1c4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d102      	bne.n	8004aec <tcp_close_shutdown+0xf4>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8004ae6:	f003 fc51 	bl	800838c <tcp_trigger_input_pcb_close>
 8004aea:	e003      	b.n	8004af4 <tcp_close_shutdown+0xfc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	2001      	movs	r0, #1
 8004af0:	f7fe ff7c 	bl	80039ec <memp_free>
        }
      }
      return ERR_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e050      	b.n	8004b9a <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7d1b      	ldrb	r3, [r3, #20]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d02e      	beq.n	8004b5e <tcp_close_shutdown+0x166>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d038      	beq.n	8004b76 <tcp_close_shutdown+0x17e>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d142      	bne.n	8004b8e <tcp_close_shutdown+0x196>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8adb      	ldrh	r3, [r3, #22]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <tcp_close_shutdown+0x15c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004b10:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <tcp_close_shutdown+0x1c8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d105      	bne.n	8004b26 <tcp_close_shutdown+0x12e>
 8004b1a:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <tcp_close_shutdown+0x1c8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <tcp_close_shutdown+0x1c8>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e013      	b.n	8004b4e <tcp_close_shutdown+0x156>
 8004b26:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <tcp_close_shutdown+0x1c8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	e00c      	b.n	8004b48 <tcp_close_shutdown+0x150>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d104      	bne.n	8004b42 <tcp_close_shutdown+0x14a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e005      	b.n	8004b4e <tcp_close_shutdown+0x156>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ef      	bne.n	8004b2e <tcp_close_shutdown+0x136>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	2001      	movs	r0, #1
 8004b58:	f7fe ff48 	bl	80039ec <memp_free>
    break;
 8004b5c:	e01c      	b.n	8004b98 <tcp_close_shutdown+0x1a0>
  case LISTEN:
    tcp_listen_closed(pcb);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff12 	bl	8004988 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4817      	ldr	r0, [pc, #92]	; (8004bc4 <tcp_close_shutdown+0x1cc>)
 8004b68:	f001 f8ee 	bl	8005d48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	2002      	movs	r0, #2
 8004b70:	f7fe ff3c 	bl	80039ec <memp_free>
    break;
 8004b74:	e010      	b.n	8004b98 <tcp_close_shutdown+0x1a0>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	480d      	ldr	r0, [pc, #52]	; (8004bb0 <tcp_close_shutdown+0x1b8>)
 8004b7a:	f001 f8e5 	bl	8005d48 <tcp_pcb_remove>
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <tcp_close_shutdown+0x1bc>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	2001      	movs	r0, #1
 8004b88:	f7fe ff30 	bl	80039ec <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004b8c:	e004      	b.n	8004b98 <tcp_close_shutdown+0x1a0>
  default:
    return tcp_close_shutdown_fin(pcb);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f81a 	bl	8004bc8 <tcp_close_shutdown_fin>
 8004b94:	4603      	mov	r3, r0
 8004b96:	e000      	b.n	8004b9a <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	0800d3a4 	.word	0x0800d3a4
 8004ba8:	0800d420 	.word	0x0800d420
 8004bac:	0800d3e0 	.word	0x0800d3e0
 8004bb0:	2000687c 	.word	0x2000687c
 8004bb4:	20006878 	.word	0x20006878
 8004bb8:	2000688c 	.word	0x2000688c
 8004bbc:	20006890 	.word	0x20006890
 8004bc0:	20006888 	.word	0x20006888
 8004bc4:	20006884 	.word	0x20006884

08004bc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <tcp_close_shutdown_fin+0x1c>
 8004bd6:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <tcp_close_shutdown_fin+0xc0>)
 8004bd8:	f240 124d 	movw	r2, #333	; 0x14d
 8004bdc:	492b      	ldr	r1, [pc, #172]	; (8004c8c <tcp_close_shutdown_fin+0xc4>)
 8004bde:	482c      	ldr	r0, [pc, #176]	; (8004c90 <tcp_close_shutdown_fin+0xc8>)
 8004be0:	f007 f856 	bl	800bc90 <iprintf>

  switch (pcb->state) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7d1b      	ldrb	r3, [r3, #20]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d010      	beq.n	8004c0e <tcp_close_shutdown_fin+0x46>
 8004bec:	2b07      	cmp	r3, #7
 8004bee:	d01b      	beq.n	8004c28 <tcp_close_shutdown_fin+0x60>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d126      	bne.n	8004c42 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f003 fc55 	bl	80084a4 <tcp_send_fin>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11f      	bne.n	8004c46 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2205      	movs	r2, #5
 8004c0a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004c0c:	e01b      	b.n	8004c46 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f003 fc48 	bl	80084a4 <tcp_send_fin>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d114      	bne.n	8004c4a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2205      	movs	r2, #5
 8004c24:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004c26:	e010      	b.n	8004c4a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f003 fc3b 	bl	80084a4 <tcp_send_fin>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004c40:	e005      	b.n	8004c4e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e01c      	b.n	8004c80 <tcp_close_shutdown_fin+0xb8>
    break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <tcp_close_shutdown_fin+0x88>
    break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <tcp_close_shutdown_fin+0x88>
    break;
 8004c4e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f003 fe43 	bl	80088e4 <tcp_output>
 8004c5e:	e00d      	b.n	8004c7c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8004c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d108      	bne.n	8004c7c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7e9b      	ldrb	r3, [r3, #26]
 8004c6e:	f043 0308 	orr.w	r3, r3, #8
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e001      	b.n	8004c80 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8004c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	0800d3a4 	.word	0x0800d3a4
 8004c8c:	0800d3d4 	.word	0x0800d3d4
 8004c90:	0800d3e0 	.word	0x0800d3e0

08004c94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	7d1b      	ldrb	r3, [r3, #20]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d006      	beq.n	8004cb2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7e9b      	ldrb	r3, [r3, #26]
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fe9f 	bl	80049f8 <tcp_close_shutdown>
 8004cba:	4603      	mov	r3, r0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08c      	sub	sp, #48	; 0x30
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7d1b      	ldrb	r3, [r3, #20]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d106      	bne.n	8004ce4 <tcp_abandon+0x20>
 8004cd6:	4b4d      	ldr	r3, [pc, #308]	; (8004e0c <tcp_abandon+0x148>)
 8004cd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004cdc:	494c      	ldr	r1, [pc, #304]	; (8004e10 <tcp_abandon+0x14c>)
 8004cde:	484d      	ldr	r0, [pc, #308]	; (8004e14 <tcp_abandon+0x150>)
 8004ce0:	f006 ffd6 	bl	800bc90 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7d1b      	ldrb	r3, [r3, #20]
 8004ce8:	2b0a      	cmp	r3, #10
 8004cea:	d108      	bne.n	8004cfe <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	484a      	ldr	r0, [pc, #296]	; (8004e18 <tcp_abandon+0x154>)
 8004cf0:	f001 f82a 	bl	8005d48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7fe fe78 	bl	80039ec <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8004cfc:	e081      	b.n	8004e02 <tcp_abandon+0x13e>
    int send_rst = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d18:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7d1b      	ldrb	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d126      	bne.n	8004d76 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8adb      	ldrh	r3, [r3, #22]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02e      	beq.n	8004d8e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <tcp_abandon+0x158>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d105      	bne.n	8004d46 <tcp_abandon+0x82>
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <tcp_abandon+0x158>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <tcp_abandon+0x158>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e013      	b.n	8004d6e <tcp_abandon+0xaa>
 8004d46:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <tcp_abandon+0x158>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e00c      	b.n	8004d68 <tcp_abandon+0xa4>
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <tcp_abandon+0x9e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e005      	b.n	8004d6e <tcp_abandon+0xaa>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ef      	bne.n	8004d4e <tcp_abandon+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	e00b      	b.n	8004d8e <tcp_abandon+0xca>
      send_rst = reset;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8adb      	ldrh	r3, [r3, #22]
 8004d7e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4827      	ldr	r0, [pc, #156]	; (8004e20 <tcp_abandon+0x15c>)
 8004d84:	f000 ffe0 	bl	8005d48 <tcp_pcb_remove>
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <tcp_abandon+0x160>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fdc0 	bl	8005920 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fdb7 	bl	8005920 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fdae 	bl	8005920 <tcp_segs_free>
    if (send_rst) {
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1d19      	adds	r1, r3, #4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8b1b      	ldrh	r3, [r3, #24]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	6979      	ldr	r1, [r7, #20]
 8004dde:	69b8      	ldr	r0, [r7, #24]
 8004de0:	f004 f80a 	bl	8008df8 <tcp_rst>
    last_state = pcb->state;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7d1b      	ldrb	r3, [r3, #20]
 8004de8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	2001      	movs	r0, #1
 8004dee:	f7fe fdfd 	bl	80039ec <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <tcp_abandon+0x13e>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f06f 010c 	mvn.w	r1, #12
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	4798      	blx	r3
}
 8004e02:	bf00      	nop
 8004e04:	3728      	adds	r7, #40	; 0x28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	0800d3a4 	.word	0x0800d3a4
 8004e10:	0800d43c 	.word	0x0800d43c
 8004e14:	0800d3e0 	.word	0x0800d3e0
 8004e18:	2000688c 	.word	0x2000688c
 8004e1c:	20006888 	.word	0x20006888
 8004e20:	2000687c 	.word	0x2000687c
 8004e24:	20006878 	.word	0x20006878

08004e28 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004e30:	2101      	movs	r1, #1
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff46 	bl	8004cc4 <tcp_abandon>
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004e50:	4413      	add	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004e5c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8004e60:	428a      	cmp	r2, r1
 8004e62:	bf28      	it	cs
 8004e64:	460a      	movcs	r2, r1
 8004e66:	b292      	uxth	r2, r2
 8004e68:	4413      	add	r3, r2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	db08      	blt.n	8004e84 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	e020      	b.n	8004ec6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	dd03      	ble.n	8004e9a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e98:	e014      	b.n	8004ec4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d306      	bcc.n	8004ebc <tcp_update_rcv_ann_wnd+0x7c>
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <tcp_update_rcv_ann_wnd+0x90>)
 8004eb0:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004eb4:	4907      	ldr	r1, [pc, #28]	; (8004ed4 <tcp_update_rcv_ann_wnd+0x94>)
 8004eb6:	4808      	ldr	r0, [pc, #32]	; (8004ed8 <tcp_update_rcv_ann_wnd+0x98>)
 8004eb8:	f006 feea 	bl	800bc90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004ec4:	2300      	movs	r3, #0
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	0800d3a4 	.word	0x0800d3a4
 8004ed4:	0800d4bc 	.word	0x0800d4bc
 8004ed8:	0800d3e0 	.word	0x0800d3e0

08004edc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	7d1b      	ldrb	r3, [r3, #20]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <tcp_recved+0x22>
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <tcp_recved+0xa8>)
 8004ef2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004ef6:	4924      	ldr	r1, [pc, #144]	; (8004f88 <tcp_recved+0xac>)
 8004ef8:	4824      	ldr	r0, [pc, #144]	; (8004f8c <tcp_recved+0xb0>)
 8004efa:	f006 fec9 	bl	800bc90 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004f02:	887b      	ldrh	r3, [r7, #2]
 8004f04:	4413      	add	r3, r2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d904      	bls.n	8004f22 <tcp_recved+0x46>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f20:	e017      	b.n	8004f52 <tcp_recved+0x76>
  } else if (pcb->rcv_wnd == 0) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d113      	bne.n	8004f52 <tcp_recved+0x76>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7d1b      	ldrb	r3, [r3, #20]
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	d003      	beq.n	8004f3a <tcp_recved+0x5e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7d1b      	ldrb	r3, [r3, #20]
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d104      	bne.n	8004f44 <tcp_recved+0x68>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f42:	e006      	b.n	8004f52 <tcp_recved+0x76>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <tcp_recved+0xa8>)
 8004f46:	f240 322d 	movw	r2, #813	; 0x32d
 8004f4a:	4911      	ldr	r1, [pc, #68]	; (8004f90 <tcp_recved+0xb4>)
 8004f4c:	480f      	ldr	r0, [pc, #60]	; (8004f8c <tcp_recved+0xb0>)
 8004f4e:	f006 fe9f 	bl	800bc90 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff74 	bl	8004e40 <tcp_update_rcv_ann_wnd>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004f62:	4293      	cmp	r3, r2
 8004f64:	dd09      	ble.n	8004f7a <tcp_recved+0x9e>
    tcp_ack_now(pcb);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	7e9b      	ldrb	r3, [r3, #26]
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f003 fcb5 	bl	80088e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	0800d3a4 	.word	0x0800d3a4
 8004f88:	0800d4d8 	.word	0x0800d4d8
 8004f8c:	0800d3e0 	.word	0x0800d3e0
 8004f90:	0800d500 	.word	0x0800d500

08004f94 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <tcp_new_port+0x80>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	b291      	uxth	r1, r2
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <tcp_new_port+0x80>)
 8004fa8:	8011      	strh	r1, [r2, #0]
 8004faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d103      	bne.n	8004fba <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8004fb2:	4b18      	ldr	r3, [pc, #96]	; (8005014 <tcp_new_port+0x80>)
 8004fb4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004fb8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8004fba:	2300      	movs	r3, #0
 8004fbc:	71fb      	strb	r3, [r7, #7]
 8004fbe:	e01e      	b.n	8004ffe <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <tcp_new_port+0x84>)
 8004fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	e011      	b.n	8004ff2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	8ada      	ldrh	r2, [r3, #22]
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <tcp_new_port+0x80>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d108      	bne.n	8004fec <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8004fda:	88bb      	ldrh	r3, [r7, #4]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	80bb      	strh	r3, [r7, #4]
 8004fe0:	88bb      	ldrh	r3, [r7, #4]
 8004fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe6:	d3da      	bcc.n	8004f9e <tcp_new_port+0xa>
          return 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e00d      	b.n	8005008 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ea      	bne.n	8004fce <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	71fb      	strb	r3, [r7, #7]
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d9dd      	bls.n	8004fc0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <tcp_new_port+0x80>)
 8005006:	881b      	ldrh	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	2000000c 	.word	0x2000000c
 8005018:	0800e7e0 	.word	0x0800e7e0

0800501c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <tcp_connect+0x1c>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <tcp_connect+0x22>
    return ERR_VAL;
 8005038:	f06f 0305 	mvn.w	r3, #5
 800503c:	e0d1      	b.n	80051e2 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	7d1b      	ldrb	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <tcp_connect+0x3e>
 8005046:	4b69      	ldr	r3, [pc, #420]	; (80051ec <tcp_connect+0x1d0>)
 8005048:	f44f 725e 	mov.w	r2, #888	; 0x378
 800504c:	4968      	ldr	r1, [pc, #416]	; (80051f0 <tcp_connect+0x1d4>)
 800504e:	4869      	ldr	r0, [pc, #420]	; (80051f4 <tcp_connect+0x1d8>)
 8005050:	f006 fe1e 	bl	800bc90 <iprintf>
 8005054:	f06f 0309 	mvn.w	r3, #9
 8005058:	e0c3      	b.n	80051e2 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <tcp_connect+0x4a>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	e000      	b.n	8005068 <tcp_connect+0x4c>
 8005066:	2300      	movs	r3, #0
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <tcp_connect+0x64>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11a      	bne.n	80050b6 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3304      	adds	r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	f005 fc59 	bl	800a93c <ip4_route>
 800508a:	6238      	str	r0, [r7, #32]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <tcp_connect+0x7c>
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	3304      	adds	r3, #4
 8005096:	e000      	b.n	800509a <tcp_connect+0x7e>
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <tcp_connect+0x8c>
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 80050a8:	f06f 0303 	mvn.w	r3, #3
 80050ac:	e099      	b.n	80051e2 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8adb      	ldrh	r3, [r3, #22]
 80050ba:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8adb      	ldrh	r3, [r3, #22]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10c      	bne.n	80050de <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 80050c4:	f7ff ff66 	bl	8004f94 <tcp_new_port>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8adb      	ldrh	r3, [r3, #22]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <tcp_connect+0xc2>
      return ERR_BUF;
 80050d8:	f06f 0301 	mvn.w	r3, #1
 80050dc:	e081      	b.n	80051e2 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 feae 	bl	8005e40 <tcp_next_iss>
 80050e4:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005132:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fe96 	bl	8005e70 <tcp_eff_send_mss_impl>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800515c:	2102      	movs	r1, #2
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f003 fa68 	bl	8008634 <tcp_enqueue_flags>
 8005164:	4603      	mov	r3, r0
 8005166:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8005168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d136      	bne.n	80051de <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2202      	movs	r2, #2
 8005174:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8005176:	8b7b      	ldrh	r3, [r7, #26]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d021      	beq.n	80051c0 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800517c:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <tcp_connect+0x1dc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	429a      	cmp	r2, r3
 8005184:	d105      	bne.n	8005192 <tcp_connect+0x176>
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <tcp_connect+0x1dc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <tcp_connect+0x1dc>)
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e013      	b.n	80051ba <tcp_connect+0x19e>
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <tcp_connect+0x1dc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	e00c      	b.n	80051b4 <tcp_connect+0x198>
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d104      	bne.n	80051ae <tcp_connect+0x192>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e005      	b.n	80051ba <tcp_connect+0x19e>
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1ef      	bne.n	800519a <tcp_connect+0x17e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <tcp_connect+0x1e0>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <tcp_connect+0x1e0>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	f004 f863 	bl	8009298 <tcp_timer_needed>
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <tcp_connect+0x1e4>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f003 fb83 	bl	80088e4 <tcp_output>
  }
  return ret;
 80051de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3728      	adds	r7, #40	; 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	0800d3a4 	.word	0x0800d3a4
 80051f0:	0800d524 	.word	0x0800d524
 80051f4:	0800d3e0 	.word	0x0800d3e0
 80051f8:	20006888 	.word	0x20006888
 80051fc:	2000687c 	.word	0x2000687c
 8005200:	20006878 	.word	0x20006878

08005204 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	b08c      	sub	sp, #48	; 0x30
 8005208:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800520e:	4b97      	ldr	r3, [pc, #604]	; (800546c <tcp_slowtmr+0x268>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a95      	ldr	r2, [pc, #596]	; (800546c <tcp_slowtmr+0x268>)
 8005216:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005218:	4b95      	ldr	r3, [pc, #596]	; (8005470 <tcp_slowtmr+0x26c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b93      	ldr	r3, [pc, #588]	; (8005470 <tcp_slowtmr+0x26c>)
 8005222:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005228:	4b92      	ldr	r3, [pc, #584]	; (8005474 <tcp_slowtmr+0x270>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800522e:	e227      	b.n	8005680 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	7d1b      	ldrb	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <tcp_slowtmr+0x42>
 8005238:	4b8f      	ldr	r3, [pc, #572]	; (8005478 <tcp_slowtmr+0x274>)
 800523a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800523e:	498f      	ldr	r1, [pc, #572]	; (800547c <tcp_slowtmr+0x278>)
 8005240:	488f      	ldr	r0, [pc, #572]	; (8005480 <tcp_slowtmr+0x27c>)
 8005242:	f006 fd25 	bl	800bc90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	7d1b      	ldrb	r3, [r3, #20]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d106      	bne.n	800525c <tcp_slowtmr+0x58>
 800524e:	4b8a      	ldr	r3, [pc, #552]	; (8005478 <tcp_slowtmr+0x274>)
 8005250:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005254:	498b      	ldr	r1, [pc, #556]	; (8005484 <tcp_slowtmr+0x280>)
 8005256:	488a      	ldr	r0, [pc, #552]	; (8005480 <tcp_slowtmr+0x27c>)
 8005258:	f006 fd1a 	bl	800bc90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	7d1b      	ldrb	r3, [r3, #20]
 8005260:	2b0a      	cmp	r3, #10
 8005262:	d106      	bne.n	8005272 <tcp_slowtmr+0x6e>
 8005264:	4b84      	ldr	r3, [pc, #528]	; (8005478 <tcp_slowtmr+0x274>)
 8005266:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800526a:	4987      	ldr	r1, [pc, #540]	; (8005488 <tcp_slowtmr+0x284>)
 800526c:	4884      	ldr	r0, [pc, #528]	; (8005480 <tcp_slowtmr+0x27c>)
 800526e:	f006 fd0f 	bl	800bc90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	7f5a      	ldrb	r2, [r3, #29]
 8005276:	4b7e      	ldr	r3, [pc, #504]	; (8005470 <tcp_slowtmr+0x26c>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d103      	bne.n	8005286 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005284:	e1fc      	b.n	8005680 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005286:	4b7a      	ldr	r3, [pc, #488]	; (8005470 <tcp_slowtmr+0x26c>)
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	7d1b      	ldrb	r3, [r3, #20]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d108      	bne.n	80052b0 <tcp_slowtmr+0xac>
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d903      	bls.n	80052b0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
 80052aa:	3301      	adds	r3, #1
 80052ac:	77fb      	strb	r3, [r7, #31]
 80052ae:	e0a2      	b.n	80053f6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b6:	2b0b      	cmp	r3, #11
 80052b8:	d903      	bls.n	80052c2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	3301      	adds	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e099      	b.n	80053f6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d032      	beq.n	8005332 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a6d      	ldr	r2, [pc, #436]	; (800548c <tcp_slowtmr+0x288>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80052e0:	7cfa      	ldrb	r2, [r7, #19]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d907      	bls.n	80052f6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80052ec:	3301      	adds	r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80052fc:	7cfa      	ldrb	r2, [r7, #19]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d879      	bhi.n	80053f6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005304:	f003 ff08 	bl	8009118 <tcp_zero_window_probe>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d173      	bne.n	80053f6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800531c:	2b06      	cmp	r3, #6
 800531e:	d86a      	bhi.n	80053f6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005326:	3301      	adds	r3, #1
 8005328:	b2da      	uxtb	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005330:	e061      	b.n	80053f6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005338:	2b00      	cmp	r3, #0
 800533a:	db08      	blt.n	800534e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005342:	b29b      	uxth	r3, r3
 8005344:	3301      	adds	r3, #1
 8005346:	b29b      	uxth	r3, r3
 8005348:	b21a      	sxth	r2, r3
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04f      	beq.n	80053f6 <tcp_slowtmr+0x1f2>
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005362:	429a      	cmp	r2, r3
 8005364:	db47      	blt.n	80053f6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	7d1b      	ldrb	r3, [r3, #20]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d018      	beq.n	80053a0 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005374:	2b0c      	cmp	r3, #12
 8005376:	bf28      	it	cs
 8005378:	230c      	movcs	r3, #12
 800537a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005382:	10db      	asrs	r3, r3, #3
 8005384:	b21b      	sxth	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800538e:	4413      	add	r3, r2
 8005390:	7dfa      	ldrb	r2, [r7, #23]
 8005392:	493f      	ldr	r1, [pc, #252]	; (8005490 <tcp_slowtmr+0x28c>)
 8005394:	5c8a      	ldrb	r2, [r1, r2]
 8005396:	4093      	lsls	r3, r2
 8005398:	b21a      	sxth	r2, r3
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2200      	movs	r2, #0
 80053a4:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80053b2:	4293      	cmp	r3, r2
 80053b4:	bf28      	it	cs
 80053b6:	4613      	movcs	r3, r2
 80053b8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80053ba:	8abb      	ldrh	r3, [r7, #20]
 80053bc:	085b      	lsrs	r3, r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d206      	bcs.n	80053e6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80053f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f2:	f003 fd77 	bl	8008ee4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	7d1b      	ldrb	r3, [r3, #20]
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d10f      	bne.n	800541e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	7e9b      	ldrb	r3, [r3, #26]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <tcp_slowtmr+0x268>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b28      	cmp	r3, #40	; 0x28
 8005416:	d902      	bls.n	800541e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	3301      	adds	r3, #1
 800541c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	7a1b      	ldrb	r3, [r3, #8]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d05d      	beq.n	80054e6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800542e:	2b04      	cmp	r3, #4
 8005430:	d003      	beq.n	800543a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005436:	2b07      	cmp	r3, #7
 8005438:	d155      	bne.n	80054e6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <tcp_slowtmr+0x268>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800544e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005452:	4910      	ldr	r1, [pc, #64]	; (8005494 <tcp_slowtmr+0x290>)
 8005454:	fba1 1303 	umull	r1, r3, r1, r3
 8005458:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800545a:	429a      	cmp	r2, r3
 800545c:	d91c      	bls.n	8005498 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800545e:	7ffb      	ldrb	r3, [r7, #31]
 8005460:	3301      	adds	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005464:	7fbb      	ldrb	r3, [r7, #30]
 8005466:	3301      	adds	r3, #1
 8005468:	77bb      	strb	r3, [r7, #30]
 800546a:	e03c      	b.n	80054e6 <tcp_slowtmr+0x2e2>
 800546c:	20006880 	.word	0x20006880
 8005470:	200000ca 	.word	0x200000ca
 8005474:	2000687c 	.word	0x2000687c
 8005478:	0800d3a4 	.word	0x0800d3a4
 800547c:	0800d554 	.word	0x0800d554
 8005480:	0800d3e0 	.word	0x0800d3e0
 8005484:	0800d580 	.word	0x0800d580
 8005488:	0800d5ac 	.word	0x0800d5ac
 800548c:	0800e7d8 	.word	0x0800e7d8
 8005490:	0800e7c8 	.word	0x0800e7c8
 8005494:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005498:	4b97      	ldr	r3, [pc, #604]	; (80056f8 <tcp_slowtmr+0x4f4>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80054ae:	4618      	mov	r0, r3
 80054b0:	4b92      	ldr	r3, [pc, #584]	; (80056fc <tcp_slowtmr+0x4f8>)
 80054b2:	fb03 f300 	mul.w	r3, r3, r0
 80054b6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80054b8:	4991      	ldr	r1, [pc, #580]	; (8005700 <tcp_slowtmr+0x4fc>)
 80054ba:	fba1 1303 	umull	r1, r3, r1, r3
 80054be:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d910      	bls.n	80054e6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80054c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054c6:	f003 fdea 	bl	800909e <tcp_keepalive>
 80054ca:	4603      	mov	r3, r0
 80054cc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80054ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80054dc:	3301      	adds	r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80054ee:	4b82      	ldr	r3, [pc, #520]	; (80056f8 <tcp_slowtmr+0x4f4>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80054fe:	4619      	mov	r1, r3
 8005500:	460b      	mov	r3, r1
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	440b      	add	r3, r1
 8005506:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005508:	429a      	cmp	r2, r3
 800550a:	d307      	bcc.n	800551c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fa05 	bl	8005920 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2200      	movs	r2, #0
 800551a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	7d1b      	ldrb	r3, [r3, #20]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d109      	bne.n	8005538 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005524:	4b74      	ldr	r3, [pc, #464]	; (80056f8 <tcp_slowtmr+0x4f4>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b28      	cmp	r3, #40	; 0x28
 8005530:	d902      	bls.n	8005538 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	3301      	adds	r3, #1
 8005536:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	7d1b      	ldrb	r3, [r3, #20]
 800553c:	2b09      	cmp	r3, #9
 800553e:	d109      	bne.n	8005554 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005540:	4b6d      	ldr	r3, [pc, #436]	; (80056f8 <tcp_slowtmr+0x4f4>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2bf0      	cmp	r3, #240	; 0xf0
 800554c:	d902      	bls.n	8005554 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800554e:	7ffb      	ldrb	r3, [r7, #31]
 8005550:	3301      	adds	r3, #1
 8005552:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005554:	7ffb      	ldrb	r3, [r7, #31]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d05d      	beq.n	8005616 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005560:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005564:	f000 fbae 	bl	8005cc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800556e:	4b65      	ldr	r3, [pc, #404]	; (8005704 <tcp_slowtmr+0x500>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	429a      	cmp	r2, r3
 8005576:	d106      	bne.n	8005586 <tcp_slowtmr+0x382>
 8005578:	4b63      	ldr	r3, [pc, #396]	; (8005708 <tcp_slowtmr+0x504>)
 800557a:	f240 4289 	movw	r2, #1161	; 0x489
 800557e:	4963      	ldr	r1, [pc, #396]	; (800570c <tcp_slowtmr+0x508>)
 8005580:	4863      	ldr	r0, [pc, #396]	; (8005710 <tcp_slowtmr+0x50c>)
 8005582:	f006 fb85 	bl	800bc90 <iprintf>
        prev->next = pcb->next;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	e00f      	b.n	80055b0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005590:	4b5c      	ldr	r3, [pc, #368]	; (8005704 <tcp_slowtmr+0x500>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005596:	429a      	cmp	r2, r3
 8005598:	d006      	beq.n	80055a8 <tcp_slowtmr+0x3a4>
 800559a:	4b5b      	ldr	r3, [pc, #364]	; (8005708 <tcp_slowtmr+0x504>)
 800559c:	f240 428d 	movw	r2, #1165	; 0x48d
 80055a0:	495c      	ldr	r1, [pc, #368]	; (8005714 <tcp_slowtmr+0x510>)
 80055a2:	485b      	ldr	r0, [pc, #364]	; (8005710 <tcp_slowtmr+0x50c>)
 80055a4:	f006 fb74 	bl	800bc90 <iprintf>
        tcp_active_pcbs = pcb->next;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a55      	ldr	r2, [pc, #340]	; (8005704 <tcp_slowtmr+0x500>)
 80055ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80055b0:	7fbb      	ldrb	r3, [r7, #30]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055be:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1d1d      	adds	r5, r3, #4
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	8adb      	ldrh	r3, [r3, #22]
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	8b12      	ldrh	r2, [r2, #24]
 80055cc:	9201      	str	r2, [sp, #4]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	462b      	mov	r3, r5
 80055d2:	4622      	mov	r2, r4
 80055d4:	f003 fc10 	bl	8008df8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	7d1b      	ldrb	r3, [r3, #20]
 80055e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fe f9fb 	bl	80039ec <memp_free>

      tcp_active_pcbs_changed = 0;
 80055f6:	4b48      	ldr	r3, [pc, #288]	; (8005718 <tcp_slowtmr+0x514>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <tcp_slowtmr+0x408>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f06f 010c 	mvn.w	r1, #12
 8005608:	68b8      	ldr	r0, [r7, #8]
 800560a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800560c:	4b42      	ldr	r3, [pc, #264]	; (8005718 <tcp_slowtmr+0x514>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d035      	beq.n	8005680 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005614:	e606      	b.n	8005224 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	7edb      	ldrb	r3, [r3, #27]
 8005624:	3301      	adds	r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	7eda      	ldrb	r2, [r3, #27]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	7f1b      	ldrb	r3, [r3, #28]
 8005634:	429a      	cmp	r2, r3
 8005636:	d323      	bcc.n	8005680 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	2200      	movs	r2, #0
 800563c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <tcp_slowtmr+0x514>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <tcp_slowtmr+0x460>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	6a3a      	ldr	r2, [r7, #32]
 8005656:	6912      	ldr	r2, [r2, #16]
 8005658:	6a39      	ldr	r1, [r7, #32]
 800565a:	4610      	mov	r0, r2
 800565c:	4798      	blx	r3
 800565e:	4603      	mov	r3, r0
 8005660:	777b      	strb	r3, [r7, #29]
 8005662:	e001      	b.n	8005668 <tcp_slowtmr+0x464>
 8005664:	2300      	movs	r3, #0
 8005666:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005668:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <tcp_slowtmr+0x514>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d000      	beq.n	8005672 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005670:	e5d8      	b.n	8005224 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005672:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800567a:	6a38      	ldr	r0, [r7, #32]
 800567c:	f003 f932 	bl	80088e4 <tcp_output>
  while (pcb != NULL) {
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f add4 	bne.w	8005230 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <tcp_slowtmr+0x518>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005692:	e068      	b.n	8005766 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	7d1b      	ldrb	r3, [r3, #20]
 8005698:	2b0a      	cmp	r3, #10
 800569a:	d006      	beq.n	80056aa <tcp_slowtmr+0x4a6>
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <tcp_slowtmr+0x504>)
 800569e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80056a2:	491f      	ldr	r1, [pc, #124]	; (8005720 <tcp_slowtmr+0x51c>)
 80056a4:	481a      	ldr	r0, [pc, #104]	; (8005710 <tcp_slowtmr+0x50c>)
 80056a6:	f006 faf3 	bl	800bc90 <iprintf>
    pcb_remove = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <tcp_slowtmr+0x4f4>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2bf0      	cmp	r3, #240	; 0xf0
 80056ba:	d902      	bls.n	80056c2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	3301      	adds	r3, #1
 80056c0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d049      	beq.n	800575c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80056c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ca:	f000 fafb 	bl	8005cc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d029      	beq.n	8005728 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <tcp_slowtmr+0x518>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	429a      	cmp	r2, r3
 80056dc:	d106      	bne.n	80056ec <tcp_slowtmr+0x4e8>
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <tcp_slowtmr+0x504>)
 80056e0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80056e4:	490f      	ldr	r1, [pc, #60]	; (8005724 <tcp_slowtmr+0x520>)
 80056e6:	480a      	ldr	r0, [pc, #40]	; (8005710 <tcp_slowtmr+0x50c>)
 80056e8:	f006 fad2 	bl	800bc90 <iprintf>
        prev->next = pcb->next;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	e028      	b.n	8005748 <tcp_slowtmr+0x544>
 80056f6:	bf00      	nop
 80056f8:	20006880 	.word	0x20006880
 80056fc:	000124f8 	.word	0x000124f8
 8005700:	10624dd3 	.word	0x10624dd3
 8005704:	2000687c 	.word	0x2000687c
 8005708:	0800d3a4 	.word	0x0800d3a4
 800570c:	0800d5dc 	.word	0x0800d5dc
 8005710:	0800d3e0 	.word	0x0800d3e0
 8005714:	0800d608 	.word	0x0800d608
 8005718:	20006878 	.word	0x20006878
 800571c:	2000688c 	.word	0x2000688c
 8005720:	0800d634 	.word	0x0800d634
 8005724:	0800d664 	.word	0x0800d664
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <tcp_slowtmr+0x570>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572e:	429a      	cmp	r2, r3
 8005730:	d006      	beq.n	8005740 <tcp_slowtmr+0x53c>
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <tcp_slowtmr+0x574>)
 8005734:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005738:	4910      	ldr	r1, [pc, #64]	; (800577c <tcp_slowtmr+0x578>)
 800573a:	4811      	ldr	r0, [pc, #68]	; (8005780 <tcp_slowtmr+0x57c>)
 800573c:	f006 faa8 	bl	800bc90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <tcp_slowtmr+0x570>)
 8005746:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	2001      	movs	r0, #1
 8005756:	f7fe f949 	bl	80039ec <memp_free>
 800575a:	e004      	b.n	8005766 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d193      	bne.n	8005694 <tcp_slowtmr+0x490>
    }
  }
}
 800576c:	bf00      	nop
 800576e:	3728      	adds	r7, #40	; 0x28
 8005770:	46bd      	mov	sp, r7
 8005772:	bdb0      	pop	{r4, r5, r7, pc}
 8005774:	2000688c 	.word	0x2000688c
 8005778:	0800d3a4 	.word	0x0800d3a4
 800577c:	0800d68c 	.word	0x0800d68c
 8005780:	0800d3e0 	.word	0x0800d3e0

08005784 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <tcp_fasttmr+0xbc>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <tcp_fasttmr+0xbc>)
 8005794:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <tcp_fasttmr+0xc0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800579c:	e048      	b.n	8005830 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7f5a      	ldrb	r2, [r3, #29]
 80057a2:	4b27      	ldr	r3, [pc, #156]	; (8005840 <tcp_fasttmr+0xbc>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d03f      	beq.n	800582a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <tcp_fasttmr+0xbc>)
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7e9b      	ldrb	r3, [r3, #26]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7e9b      	ldrb	r3, [r3, #26]
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f003 f889 	bl	80088e4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7e9b      	ldrb	r3, [r3, #26]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7e9b      	ldrb	r3, [r3, #26]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7e9b      	ldrb	r3, [r3, #26]
 80057f0:	f023 0308 	bic.w	r3, r3, #8
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f9e4 	bl	8004bc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <tcp_fasttmr+0xc4>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f819 	bl	800584c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <tcp_fasttmr+0xc4>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d000      	beq.n	8005824 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005822:	e7b8      	b.n	8005796 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	e002      	b.n	8005830 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1b3      	bne.n	800579e <tcp_fasttmr+0x1a>
    }
  }
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200000ca 	.word	0x200000ca
 8005844:	2000687c 	.word	0x2000687c
 8005848:	20006878 	.word	0x20006878

0800584c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005858:	7b5b      	ldrb	r3, [r3, #13]
 800585a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005860:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <tcp_process_refused_data+0x3e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6918      	ldr	r0, [r3, #16]
 800587c:	2300      	movs	r3, #0
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	47a0      	blx	r4
 8005884:	4603      	mov	r3, r0
 8005886:	73fb      	strb	r3, [r7, #15]
 8005888:	e007      	b.n	800589a <tcp_process_refused_data+0x4e>
 800588a:	2300      	movs	r3, #0
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	2000      	movs	r0, #0
 8005892:	f000 f88d 	bl	80059b0 <tcp_recv_null>
 8005896:	4603      	mov	r3, r0
 8005898:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800589a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12b      	bne.n	80058fa <tcp_process_refused_data+0xae>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80058a2:	7bbb      	ldrb	r3, [r7, #14]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d034      	beq.n	8005916 <tcp_process_refused_data+0xca>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d005      	beq.n	80058c4 <tcp_process_refused_data+0x78>
          pcb->rcv_wnd++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	3301      	adds	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <tcp_process_refused_data+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6918      	ldr	r0, [r3, #16]
 80058d8:	2300      	movs	r3, #0
 80058da:	2200      	movs	r2, #0
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	47a0      	blx	r4
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e001      	b.n	80058ea <tcp_process_refused_data+0x9e>
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ee:	f113 0f0d 	cmn.w	r3, #13
 80058f2:	d110      	bne.n	8005916 <tcp_process_refused_data+0xca>
          return ERR_ABRT;
 80058f4:	f06f 030c 	mvn.w	r3, #12
 80058f8:	e00e      	b.n	8005918 <tcp_process_refused_data+0xcc>
        }
      }
    } else if (err == ERR_ABRT) {
 80058fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058fe:	f113 0f0d 	cmn.w	r3, #13
 8005902:	d102      	bne.n	800590a <tcp_process_refused_data+0xbe>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005904:	f06f 030c 	mvn.w	r3, #12
 8005908:	e006      	b.n	8005918 <tcp_process_refused_data+0xcc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8005910:	f06f 0304 	mvn.w	r3, #4
 8005914:	e000      	b.n	8005918 <tcp_process_refused_data+0xcc>
    }
  }
  return ERR_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}

08005920 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005928:	e007      	b.n	800593a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f809 	bl	8005948 <tcp_seg_free>
    seg = next;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f4      	bne.n	800592a <tcp_segs_free+0xa>
  }
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fd6c 	bl	8004440 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	2003      	movs	r0, #3
 800596c:	f7fe f83e 	bl	80039ec <memp_free>
  }
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005980:	2003      	movs	r0, #3
 8005982:	f7fd ffe7 	bl	8003954 <memp_malloc>
 8005986:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <tcp_seg_copy+0x1a>
    return NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	e00a      	b.n	80059a8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005992:	2210      	movs	r2, #16
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f006 f967 	bl	800bc6a <memcpy>
  pbuf_ref(cseg->p);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fdf9 	bl	8004598 <pbuf_ref>
  return cseg;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	891b      	ldrh	r3, [r3, #8]
 80059c8:	4619      	mov	r1, r3
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	f7ff fa86 	bl	8004edc <tcp_recved>
    pbuf_free(p);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe fd35 	bl	8004440 <pbuf_free>
 80059d6:	e008      	b.n	80059ea <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80059d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80059e0:	68b8      	ldr	r0, [r7, #8]
 80059e2:	f7ff f957 	bl	8004c94 <tcp_close>
 80059e6:	4603      	mov	r3, r0
 80059e8:	e000      	b.n	80059ec <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	db01      	blt.n	8005a0a <tcp_kill_prio+0x16>
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	e000      	b.n	8005a0c <tcp_kill_prio+0x18>
 8005a0a:	237f      	movs	r3, #127	; 0x7f
 8005a0c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <tcp_kill_prio+0x7c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e01a      	b.n	8005a54 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	7d5b      	ldrb	r3, [r3, #21]
 8005a22:	7afa      	ldrb	r2, [r7, #11]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d312      	bcc.n	8005a4e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <tcp_kill_prio+0x80>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d80a      	bhi.n	8005a4e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8005a38:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <tcp_kill_prio+0x80>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	7d5b      	ldrb	r3, [r3, #21]
 8005a4c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e1      	bne.n	8005a1e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005a60:	6938      	ldr	r0, [r7, #16]
 8005a62:	f7ff f9e1 	bl	8004e28 <tcp_abort>
  }
}
 8005a66:	bf00      	nop
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000687c 	.word	0x2000687c
 8005a74:	20006880 	.word	0x20006880

08005a78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d009      	beq.n	8005a9c <tcp_kill_state+0x24>
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d006      	beq.n	8005a9c <tcp_kill_state+0x24>
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <tcp_kill_state+0x80>)
 8005a90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a94:	4919      	ldr	r1, [pc, #100]	; (8005afc <tcp_kill_state+0x84>)
 8005a96:	481a      	ldr	r0, [pc, #104]	; (8005b00 <tcp_kill_state+0x88>)
 8005a98:	f006 f8fa 	bl	800bc90 <iprintf>

  inactivity = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <tcp_kill_state+0x8c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e017      	b.n	8005adc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	7d1b      	ldrb	r3, [r3, #20]
 8005ab0:	79fa      	ldrb	r2, [r7, #7]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d10f      	bne.n	8005ad6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <tcp_kill_state+0x90>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d807      	bhi.n	8005ad6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <tcp_kill_state+0x90>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e4      	bne.n	8005aac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	6938      	ldr	r0, [r7, #16]
 8005aec:	f7ff f8ea 	bl	8004cc4 <tcp_abandon>
  }
}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	0800d3a4 	.word	0x0800d3a4
 8005afc:	0800d6b4 	.word	0x0800d6b4
 8005b00:	0800d3e0 	.word	0x0800d3e0
 8005b04:	2000687c 	.word	0x2000687c
 8005b08:	20006880 	.word	0x20006880

08005b0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <tcp_kill_timewait+0x58>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e012      	b.n	8005b48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005b22:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <tcp_kill_timewait+0x5c>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d807      	bhi.n	8005b42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <tcp_kill_timewait+0x5c>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e9      	bne.n	8005b22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f7ff f967 	bl	8004e28 <tcp_abort>
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	2000688c 	.word	0x2000688c
 8005b68:	20006880 	.word	0x20006880

08005b6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b76:	2001      	movs	r0, #1
 8005b78:	f7fd feec 	bl	8003954 <memp_malloc>
 8005b7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d124      	bne.n	8005bce <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005b84:	f7ff ffc2 	bl	8005b0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f7fd fee3 	bl	8003954 <memp_malloc>
 8005b8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11b      	bne.n	8005bce <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005b96:	2009      	movs	r0, #9
 8005b98:	f7ff ff6e 	bl	8005a78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fd fed9 	bl	8003954 <memp_malloc>
 8005ba2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d111      	bne.n	8005bce <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8005baa:	2008      	movs	r0, #8
 8005bac:	f7ff ff64 	bl	8005a78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7fd fecf 	bl	8003954 <memp_malloc>
 8005bb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff ff17 	bl	80059f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f7fd fec4 	bl	8003954 <memp_malloc>
 8005bcc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d03f      	beq.n	8005c54 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005bd4:	2298      	movs	r2, #152	; 0x98
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f006 f851 	bl	800bc80 <memset>
    pcb->prio = prio;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	79fa      	ldrb	r2, [r7, #7]
 8005be2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005c0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2206      	movs	r2, #6
 8005c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2206      	movs	r2, #6
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <tcp_alloc+0xf4>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <tcp_alloc+0xf8>)
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005c40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <tcp_alloc+0xfc>)
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a07      	ldr	r2, [pc, #28]	; (8005c6c <tcp_alloc+0x100>)
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20006880 	.word	0x20006880
 8005c64:	200000ca 	.word	0x200000ca
 8005c68:	080059b1 	.word	0x080059b1
 8005c6c:	006ddd00 	.word	0x006ddd00

08005c70 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8005c74:	2040      	movs	r0, #64	; 0x40
 8005c76:	f7ff ff79 	bl	8005b6c <tcp_alloc>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7d1b      	ldrb	r3, [r3, #20]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d106      	bne.n	8005ca6 <tcp_recv+0x26>
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <tcp_recv+0x38>)
 8005c9a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8005c9e:	4907      	ldr	r1, [pc, #28]	; (8005cbc <tcp_recv+0x3c>)
 8005ca0:	4807      	ldr	r0, [pc, #28]	; (8005cc0 <tcp_recv+0x40>)
 8005ca2:	f005 fff5 	bl	800bc90 <iprintf>
    pcb->recv = recv;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	0800d3a4 	.word	0x0800d3a4
 8005cbc:	0800d6c4 	.word	0x0800d6c4
 8005cc0:	0800d3e0 	.word	0x0800d3e0

08005cc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7d1b      	ldrb	r3, [r3, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d034      	beq.n	8005d3e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8005cd8:	2b0a      	cmp	r3, #10
 8005cda:	d030      	beq.n	8005d3e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d02c      	beq.n	8005d3e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fba5 	bl	8004440 <pbuf_free>
      pcb->refused_data = NULL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fe0d 	bl	8005920 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d12:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fe01 	bl	8005920 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fdfc 	bl	8005920 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	669a      	str	r2, [r3, #104]	; 0x68
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d105      	bne.n	8005d68 <tcp_pcb_remove+0x20>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e013      	b.n	8005d90 <tcp_pcb_remove+0x48>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e00c      	b.n	8005d8a <tcp_pcb_remove+0x42>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d104      	bne.n	8005d84 <tcp_pcb_remove+0x3c>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e005      	b.n	8005d90 <tcp_pcb_remove+0x48>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ef      	bne.n	8005d70 <tcp_pcb_remove+0x28>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005d96:	6838      	ldr	r0, [r7, #0]
 8005d98:	f7ff ff94 	bl	8005cc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	7d1b      	ldrb	r3, [r3, #20]
 8005da0:	2b0a      	cmp	r3, #10
 8005da2:	d013      	beq.n	8005dcc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d00f      	beq.n	8005dcc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	7e9b      	ldrb	r3, [r3, #26]
 8005db0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	7e9b      	ldrb	r3, [r3, #26]
 8005dbc:	f043 0302 	orr.w	r3, r3, #2
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f002 fd8c 	bl	80088e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d020      	beq.n	8005e16 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <tcp_pcb_remove+0xa2>
 8005ddc:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <tcp_pcb_remove+0xe4>)
 8005dde:	f240 7253 	movw	r2, #1875	; 0x753
 8005de2:	4913      	ldr	r1, [pc, #76]	; (8005e30 <tcp_pcb_remove+0xe8>)
 8005de4:	4813      	ldr	r0, [pc, #76]	; (8005e34 <tcp_pcb_remove+0xec>)
 8005de6:	f005 ff53 	bl	800bc90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <tcp_pcb_remove+0xb8>
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <tcp_pcb_remove+0xe4>)
 8005df4:	f240 7254 	movw	r2, #1876	; 0x754
 8005df8:	490f      	ldr	r1, [pc, #60]	; (8005e38 <tcp_pcb_remove+0xf0>)
 8005dfa:	480e      	ldr	r0, [pc, #56]	; (8005e34 <tcp_pcb_remove+0xec>)
 8005dfc:	f005 ff48 	bl	800bc90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <tcp_pcb_remove+0xce>
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <tcp_pcb_remove+0xe4>)
 8005e0a:	f240 7256 	movw	r2, #1878	; 0x756
 8005e0e:	490b      	ldr	r1, [pc, #44]	; (8005e3c <tcp_pcb_remove+0xf4>)
 8005e10:	4808      	ldr	r0, [pc, #32]	; (8005e34 <tcp_pcb_remove+0xec>)
 8005e12:	f005 ff3d 	bl	800bc90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	0800d3a4 	.word	0x0800d3a4
 8005e30:	0800d75c 	.word	0x0800d75c
 8005e34:	0800d3e0 	.word	0x0800d3e0
 8005e38:	0800d774 	.word	0x0800d774
 8005e3c:	0800d790 	.word	0x0800d790

08005e40 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <tcp_next_iss+0x28>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <tcp_next_iss+0x2c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	4a05      	ldr	r2, [pc, #20]	; (8005e68 <tcp_next_iss+0x28>)
 8005e54:	6013      	str	r3, [r2, #0]
  return iss;
 8005e56:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <tcp_next_iss+0x28>)
 8005e58:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000010 	.word	0x20000010
 8005e6c:	20006880 	.word	0x20006880

08005e70 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8005e7c:	6838      	ldr	r0, [r7, #0]
 8005e7e:	f004 fd5d 	bl	800a93c <ip4_route>
 8005e82:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	e010      	b.n	8005eb0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e92:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005e94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8005e9c:	897b      	ldrh	r3, [r7, #10]
 8005e9e:	3b28      	subs	r3, #40	; 0x28
 8005ea0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005ea2:	893a      	ldrh	r2, [r7, #8]
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bf28      	it	cs
 8005eaa:	4613      	movcs	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8005eae:	88fb      	ldrh	r3, [r7, #6]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005ec6:	e011      	b.n	8005eec <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d108      	bne.n	8005ee6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7fe ffa4 	bl	8004e28 <tcp_abort>
      pcb = next;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e002      	b.n	8005eec <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1ea      	bne.n	8005ec8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02c      	beq.n	8005f66 <tcp_netif_ip_addr_changed+0x6a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d028      	beq.n	8005f66 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <tcp_netif_ip_addr_changed+0x74>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffcc 	bl	8005eb8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <tcp_netif_ip_addr_changed+0x78>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffc6 	bl	8005eb8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d019      	beq.n	8005f66 <tcp_netif_ip_addr_changed+0x6a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <tcp_netif_ip_addr_changed+0x7c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e00e      	b.n	8005f60 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d103      	bne.n	8005f5c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ed      	bne.n	8005f42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000687c 	.word	0x2000687c
 8005f74:	20006888 	.word	0x20006888
 8005f78:	20006884 	.word	0x20006884

08005f7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b08b      	sub	sp, #44	; 0x2c
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4a82      	ldr	r2, [pc, #520]	; (8006194 <tcp_input+0x218>)
 8005f8c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	895b      	ldrh	r3, [r3, #10]
 8005f92:	2b13      	cmp	r3, #19
 8005f94:	f240 838b 	bls.w	80066ae <tcp_input+0x732>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005f98:	4b7f      	ldr	r3, [pc, #508]	; (8006198 <tcp_input+0x21c>)
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	4b7e      	ldr	r3, [pc, #504]	; (8006198 <tcp_input+0x21c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f004 ff44 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 8381 	bne.w	80066b2 <tcp_input+0x736>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005fb0:	4b79      	ldr	r3, [pc, #484]	; (8006198 <tcp_input+0x21c>)
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005fb8:	2be0      	cmp	r3, #224	; 0xe0
 8005fba:	f000 837a 	beq.w	80066b2 <tcp_input+0x736>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005fbe:	4b75      	ldr	r3, [pc, #468]	; (8006194 <tcp_input+0x218>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	899b      	ldrh	r3, [r3, #12]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd f915 	bl	80031f6 <lwip_htons>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	0b1b      	lsrs	r3, r3, #12
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005fd8:	7cbb      	ldrb	r3, [r7, #18]
 8005fda:	2b13      	cmp	r3, #19
 8005fdc:	f240 8369 	bls.w	80066b2 <tcp_input+0x736>
 8005fe0:	7cbb      	ldrb	r3, [r7, #18]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	891b      	ldrh	r3, [r3, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f200 8362 	bhi.w	80066b2 <tcp_input+0x736>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005fee:	7cbb      	ldrb	r3, [r7, #18]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b14      	subs	r3, #20
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	4b69      	ldr	r3, [pc, #420]	; (800619c <tcp_input+0x220>)
 8005ff8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005ffa:	4b69      	ldr	r3, [pc, #420]	; (80061a0 <tcp_input+0x224>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	895a      	ldrh	r2, [r3, #10]
 8006004:	7cbb      	ldrb	r3, [r7, #18]
 8006006:	b29b      	uxth	r3, r3
 8006008:	429a      	cmp	r2, r3
 800600a:	d30d      	bcc.n	8006028 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800600c:	4b63      	ldr	r3, [pc, #396]	; (800619c <tcp_input+0x220>)
 800600e:	881a      	ldrh	r2, [r3, #0]
 8006010:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <tcp_input+0x228>)
 8006012:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006014:	7cbb      	ldrb	r3, [r7, #18]
 8006016:	b29b      	uxth	r3, r3
 8006018:	425b      	negs	r3, r3
 800601a:	b29b      	uxth	r3, r3
 800601c:	b21b      	sxth	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fe f9e9 	bl	80043f8 <pbuf_header>
 8006026:	e055      	b.n	80060d4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d105      	bne.n	800603c <tcp_input+0xc0>
 8006030:	4b5d      	ldr	r3, [pc, #372]	; (80061a8 <tcp_input+0x22c>)
 8006032:	22b2      	movs	r2, #178	; 0xb2
 8006034:	495d      	ldr	r1, [pc, #372]	; (80061ac <tcp_input+0x230>)
 8006036:	485e      	ldr	r0, [pc, #376]	; (80061b0 <tcp_input+0x234>)
 8006038:	f005 fe2a 	bl	800bc90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800603c:	f06f 0113 	mvn.w	r1, #19
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fe f9d9 	bl	80043f8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	895a      	ldrh	r2, [r3, #10]
 800604a:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <tcp_input+0x228>)
 800604c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800604e:	4b53      	ldr	r3, [pc, #332]	; (800619c <tcp_input+0x220>)
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	4b54      	ldr	r3, [pc, #336]	; (80061a4 <tcp_input+0x228>)
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800605a:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <tcp_input+0x228>)
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	425b      	negs	r3, r3
 8006060:	b29b      	uxth	r3, r3
 8006062:	b21b      	sxth	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe f9c6 	bl	80043f8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	8a3a      	ldrh	r2, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	f200 831e 	bhi.w	80066b6 <tcp_input+0x73a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a47      	ldr	r2, [pc, #284]	; (80061a0 <tcp_input+0x224>)
 8006082:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	8a3b      	ldrh	r3, [r7, #16]
 800608a:	425b      	negs	r3, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	b21b      	sxth	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fe f9b0 	bl	80043f8 <pbuf_header>
    p->tot_len -= opt2len;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	891a      	ldrh	r2, [r3, #8]
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	895b      	ldrh	r3, [r3, #10]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <tcp_input+0x13e>
 80060ae:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <tcp_input+0x22c>)
 80060b0:	22cf      	movs	r2, #207	; 0xcf
 80060b2:	4940      	ldr	r1, [pc, #256]	; (80061b4 <tcp_input+0x238>)
 80060b4:	483e      	ldr	r0, [pc, #248]	; (80061b0 <tcp_input+0x234>)
 80060b6:	f005 fdeb 	bl	800bc90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	891a      	ldrh	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	891b      	ldrh	r3, [r3, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d005      	beq.n	80060d4 <tcp_input+0x158>
 80060c8:	4b37      	ldr	r3, [pc, #220]	; (80061a8 <tcp_input+0x22c>)
 80060ca:	22d0      	movs	r2, #208	; 0xd0
 80060cc:	493a      	ldr	r1, [pc, #232]	; (80061b8 <tcp_input+0x23c>)
 80060ce:	4838      	ldr	r0, [pc, #224]	; (80061b0 <tcp_input+0x234>)
 80060d0:	f005 fdde 	bl	800bc90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80060d4:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <tcp_input+0x218>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <tcp_input+0x218>)
 80060de:	681c      	ldr	r4, [r3, #0]
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7fd f888 	bl	80031f6 <lwip_htons>
 80060e6:	4603      	mov	r3, r0
 80060e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80060ea:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <tcp_input+0x218>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	885b      	ldrh	r3, [r3, #2]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	4b28      	ldr	r3, [pc, #160]	; (8006194 <tcp_input+0x218>)
 80060f4:	681c      	ldr	r4, [r3, #0]
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7fd f87d 	bl	80031f6 <lwip_htons>
 80060fc:	4603      	mov	r3, r0
 80060fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <tcp_input+0x218>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <tcp_input+0x218>)
 8006108:	681c      	ldr	r4, [r3, #0]
 800610a:	4610      	mov	r0, r2
 800610c:	f7fd f881 	bl	8003212 <lwip_htonl>
 8006110:	4603      	mov	r3, r0
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	4a29      	ldr	r2, [pc, #164]	; (80061bc <tcp_input+0x240>)
 8006118:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800611a:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <tcp_input+0x218>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <tcp_input+0x218>)
 8006122:	681c      	ldr	r4, [r3, #0]
 8006124:	4610      	mov	r0, r2
 8006126:	f7fd f874 	bl	8003212 <lwip_htonl>
 800612a:	4603      	mov	r3, r0
 800612c:	60a3      	str	r3, [r4, #8]
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	4a23      	ldr	r2, [pc, #140]	; (80061c0 <tcp_input+0x244>)
 8006132:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006134:	4b17      	ldr	r3, [pc, #92]	; (8006194 <tcp_input+0x218>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	89db      	ldrh	r3, [r3, #14]
 800613a:	b29a      	uxth	r2, r3
 800613c:	4b15      	ldr	r3, [pc, #84]	; (8006194 <tcp_input+0x218>)
 800613e:	681c      	ldr	r4, [r3, #0]
 8006140:	4610      	mov	r0, r2
 8006142:	f7fd f858 	bl	80031f6 <lwip_htons>
 8006146:	4603      	mov	r3, r0
 8006148:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <tcp_input+0x218>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	899b      	ldrh	r3, [r3, #12]
 8006150:	b29b      	uxth	r3, r3
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd f84f 	bl	80031f6 <lwip_htons>
 8006158:	4603      	mov	r3, r0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <tcp_input+0x248>)
 8006164:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	891a      	ldrh	r2, [r3, #8]
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <tcp_input+0x248>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	4413      	add	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <tcp_input+0x24c>)
 8006184:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800618a:	4b10      	ldr	r3, [pc, #64]	; (80061cc <tcp_input+0x250>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	e082      	b.n	8006298 <tcp_input+0x31c>
 8006192:	bf00      	nop
 8006194:	200000dc 	.word	0x200000dc
 8006198:	2000334c 	.word	0x2000334c
 800619c:	200000e0 	.word	0x200000e0
 80061a0:	200000e4 	.word	0x200000e4
 80061a4:	200000e2 	.word	0x200000e2
 80061a8:	0800d7a8 	.word	0x0800d7a8
 80061ac:	0800d7dc 	.word	0x0800d7dc
 80061b0:	0800d7ec 	.word	0x0800d7ec
 80061b4:	0800d814 	.word	0x0800d814
 80061b8:	0800d820 	.word	0x0800d820
 80061bc:	200000ec 	.word	0x200000ec
 80061c0:	200000f0 	.word	0x200000f0
 80061c4:	200000f8 	.word	0x200000f8
 80061c8:	200000f6 	.word	0x200000f6
 80061cc:	2000687c 	.word	0x2000687c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	7d1b      	ldrb	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <tcp_input+0x268>
 80061d8:	4b8f      	ldr	r3, [pc, #572]	; (8006418 <tcp_input+0x49c>)
 80061da:	22e2      	movs	r2, #226	; 0xe2
 80061dc:	498f      	ldr	r1, [pc, #572]	; (800641c <tcp_input+0x4a0>)
 80061de:	4890      	ldr	r0, [pc, #576]	; (8006420 <tcp_input+0x4a4>)
 80061e0:	f005 fd56 	bl	800bc90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	7d1b      	ldrb	r3, [r3, #20]
 80061e8:	2b0a      	cmp	r3, #10
 80061ea:	d105      	bne.n	80061f8 <tcp_input+0x27c>
 80061ec:	4b8a      	ldr	r3, [pc, #552]	; (8006418 <tcp_input+0x49c>)
 80061ee:	22e3      	movs	r2, #227	; 0xe3
 80061f0:	498c      	ldr	r1, [pc, #560]	; (8006424 <tcp_input+0x4a8>)
 80061f2:	488b      	ldr	r0, [pc, #556]	; (8006420 <tcp_input+0x4a4>)
 80061f4:	f005 fd4c 	bl	800bc90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	7d1b      	ldrb	r3, [r3, #20]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <tcp_input+0x290>
 8006200:	4b85      	ldr	r3, [pc, #532]	; (8006418 <tcp_input+0x49c>)
 8006202:	22e4      	movs	r2, #228	; 0xe4
 8006204:	4988      	ldr	r1, [pc, #544]	; (8006428 <tcp_input+0x4ac>)
 8006206:	4886      	ldr	r0, [pc, #536]	; (8006420 <tcp_input+0x4a4>)
 8006208:	f005 fd42 	bl	800bc90 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	8b1a      	ldrh	r2, [r3, #24]
 8006210:	4b86      	ldr	r3, [pc, #536]	; (800642c <tcp_input+0x4b0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	429a      	cmp	r2, r3
 800621a:	d138      	bne.n	800628e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	8ada      	ldrh	r2, [r3, #22]
 8006220:	4b82      	ldr	r3, [pc, #520]	; (800642c <tcp_input+0x4b0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	885b      	ldrh	r3, [r3, #2]
 8006226:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006228:	429a      	cmp	r2, r3
 800622a:	d130      	bne.n	800628e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	4b7f      	ldr	r3, [pc, #508]	; (8006430 <tcp_input+0x4b4>)
 8006232:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006234:	429a      	cmp	r2, r3
 8006236:	d12a      	bne.n	800628e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b7c      	ldr	r3, [pc, #496]	; (8006430 <tcp_input+0x4b4>)
 800623e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006240:	429a      	cmp	r2, r3
 8006242:	d124      	bne.n	800628e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	429a      	cmp	r2, r3
 800624c:	d105      	bne.n	800625a <tcp_input+0x2de>
 800624e:	4b72      	ldr	r3, [pc, #456]	; (8006418 <tcp_input+0x49c>)
 8006250:	22ec      	movs	r2, #236	; 0xec
 8006252:	4978      	ldr	r1, [pc, #480]	; (8006434 <tcp_input+0x4b8>)
 8006254:	4872      	ldr	r0, [pc, #456]	; (8006420 <tcp_input+0x4a4>)
 8006256:	f005 fd1b 	bl	800bc90 <iprintf>
      if (prev != NULL) {
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006268:	4b73      	ldr	r3, [pc, #460]	; (8006438 <tcp_input+0x4bc>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006270:	4a71      	ldr	r2, [pc, #452]	; (8006438 <tcp_input+0x4bc>)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	429a      	cmp	r2, r3
 800627e:	d10f      	bne.n	80062a0 <tcp_input+0x324>
 8006280:	4b65      	ldr	r3, [pc, #404]	; (8006418 <tcp_input+0x49c>)
 8006282:	22f4      	movs	r2, #244	; 0xf4
 8006284:	496d      	ldr	r1, [pc, #436]	; (800643c <tcp_input+0x4c0>)
 8006286:	4866      	ldr	r0, [pc, #408]	; (8006420 <tcp_input+0x4a4>)
 8006288:	f005 fd02 	bl	800bc90 <iprintf>
      break;
 800628c:	e008      	b.n	80062a0 <tcp_input+0x324>
    }
    prev = pcb;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d198      	bne.n	80061d0 <tcp_input+0x254>
 800629e:	e000      	b.n	80062a2 <tcp_input+0x326>
      break;
 80062a0:	bf00      	nop
  }

  if (pcb == NULL) {
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d173      	bne.n	8006390 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80062a8:	4b65      	ldr	r3, [pc, #404]	; (8006440 <tcp_input+0x4c4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	e02f      	b.n	8006310 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	7d1b      	ldrb	r3, [r3, #20]
 80062b4:	2b0a      	cmp	r3, #10
 80062b6:	d005      	beq.n	80062c4 <tcp_input+0x348>
 80062b8:	4b57      	ldr	r3, [pc, #348]	; (8006418 <tcp_input+0x49c>)
 80062ba:	22fe      	movs	r2, #254	; 0xfe
 80062bc:	4961      	ldr	r1, [pc, #388]	; (8006444 <tcp_input+0x4c8>)
 80062be:	4858      	ldr	r0, [pc, #352]	; (8006420 <tcp_input+0x4a4>)
 80062c0:	f005 fce6 	bl	800bc90 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	8b1a      	ldrh	r2, [r3, #24]
 80062c8:	4b58      	ldr	r3, [pc, #352]	; (800642c <tcp_input+0x4b0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d11a      	bne.n	800630a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	8ada      	ldrh	r2, [r3, #22]
 80062d8:	4b54      	ldr	r3, [pc, #336]	; (800642c <tcp_input+0x4b0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d112      	bne.n	800630a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4b51      	ldr	r3, [pc, #324]	; (8006430 <tcp_input+0x4b4>)
 80062ea:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d10c      	bne.n	800630a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b4e      	ldr	r3, [pc, #312]	; (8006430 <tcp_input+0x4b4>)
 80062f6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d106      	bne.n	800630a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80062fc:	69f8      	ldr	r0, [r7, #28]
 80062fe:	f000 fb15 	bl	800692c <tcp_timewait_input>
        pbuf_free(p);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe f89c 	bl	8004440 <pbuf_free>
        return;
 8006308:	e1db      	b.n	80066c2 <tcp_input+0x746>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1cc      	bne.n	80062b0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800631a:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <tcp_input+0x4cc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e019      	b.n	8006356 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	8ada      	ldrh	r2, [r3, #22]
 8006326:	4b41      	ldr	r3, [pc, #260]	; (800642c <tcp_input+0x4b0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	885b      	ldrh	r3, [r3, #2]
 800632c:	b29b      	uxth	r3, r3
 800632e:	429a      	cmp	r2, r3
 8006330:	d10c      	bne.n	800634c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <tcp_input+0x4b4>)
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	429a      	cmp	r2, r3
 800633c:	d00f      	beq.n	800635e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <tcp_input+0x3e4>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e2      	bne.n	8006322 <tcp_input+0x3a6>
 800635c:	e000      	b.n	8006360 <tcp_input+0x3e4>
            break;
 800635e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d014      	beq.n	8006390 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <tcp_input+0x4cc>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800637c:	4a32      	ldr	r2, [pc, #200]	; (8006448 <tcp_input+0x4cc>)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006382:	6978      	ldr	r0, [r7, #20]
 8006384:	f000 f9f0 	bl	8006768 <tcp_listen_input>
      pbuf_free(p);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fe f859 	bl	8004440 <pbuf_free>
      return;
 800638e:	e198      	b.n	80066c2 <tcp_input+0x746>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8165 	beq.w	8006662 <tcp_input+0x6e6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006398:	4b2c      	ldr	r3, [pc, #176]	; (800644c <tcp_input+0x4d0>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	891a      	ldrh	r2, [r3, #8]
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <tcp_input+0x4d0>)
 80063a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80063a6:	4a29      	ldr	r2, [pc, #164]	; (800644c <tcp_input+0x4d0>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80063ac:	4b1f      	ldr	r3, [pc, #124]	; (800642c <tcp_input+0x4b0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a26      	ldr	r2, [pc, #152]	; (800644c <tcp_input+0x4d0>)
 80063b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80063b4:	4b26      	ldr	r3, [pc, #152]	; (8006450 <tcp_input+0x4d4>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <tcp_input+0x4d8>)
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <tcp_input+0x4dc>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80063c6:	4b25      	ldr	r3, [pc, #148]	; (800645c <tcp_input+0x4e0>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7b5b      	ldrb	r3, [r3, #13]
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03d      	beq.n	8006464 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80063e8:	69f8      	ldr	r0, [r7, #28]
 80063ea:	f7ff fa2f 	bl	800584c <tcp_process_refused_data>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f113 0f0d 	cmn.w	r3, #13
 80063f4:	d007      	beq.n	8006406 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d032      	beq.n	8006464 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <tcp_input+0x4e4>)
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02e      	beq.n	8006464 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8109 	bne.w	8006622 <tcp_input+0x6a6>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006410:	69f8      	ldr	r0, [r7, #28]
 8006412:	f002 fa0b 	bl	800882c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006416:	e104      	b.n	8006622 <tcp_input+0x6a6>
 8006418:	0800d7a8 	.word	0x0800d7a8
 800641c:	0800d840 	.word	0x0800d840
 8006420:	0800d7ec 	.word	0x0800d7ec
 8006424:	0800d868 	.word	0x0800d868
 8006428:	0800d894 	.word	0x0800d894
 800642c:	200000dc 	.word	0x200000dc
 8006430:	2000334c 	.word	0x2000334c
 8006434:	0800d8bc 	.word	0x0800d8bc
 8006438:	2000687c 	.word	0x2000687c
 800643c:	0800d8e8 	.word	0x0800d8e8
 8006440:	2000688c 	.word	0x2000688c
 8006444:	0800d914 	.word	0x0800d914
 8006448:	20006884 	.word	0x20006884
 800644c:	200000cc 	.word	0x200000cc
 8006450:	200000fc 	.word	0x200000fc
 8006454:	200000f9 	.word	0x200000f9
 8006458:	200000f4 	.word	0x200000f4
 800645c:	200000f8 	.word	0x200000f8
 8006460:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8006464:	4a98      	ldr	r2, [pc, #608]	; (80066c8 <tcp_input+0x74c>)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800646a:	69f8      	ldr	r0, [r7, #28]
 800646c:	f000 fac6 	bl	80069fc <tcp_process>
 8006470:	4603      	mov	r3, r0
 8006472:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006474:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006478:	f113 0f0d 	cmn.w	r3, #13
 800647c:	f000 80d3 	beq.w	8006626 <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 8006480:	4b92      	ldr	r3, [pc, #584]	; (80066cc <tcp_input+0x750>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d008      	beq.n	80064a8 <tcp_input+0x52c>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	6912      	ldr	r2, [r2, #16]
 80064a0:	f06f 010d 	mvn.w	r1, #13
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	4889      	ldr	r0, [pc, #548]	; (80066d0 <tcp_input+0x754>)
 80064ac:	f7ff fc4c 	bl	8005d48 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	2001      	movs	r0, #1
 80064b4:	f7fd fa9a 	bl	80039ec <memp_free>
 80064b8:	e0c0      	b.n	800663c <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80064be:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <tcp_input+0x758>)
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01b      	beq.n	80064fe <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80064c6:	4b83      	ldr	r3, [pc, #524]	; (80066d4 <tcp_input+0x758>)
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <tcp_input+0x56c>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	6910      	ldr	r0, [r2, #16]
 80064dc:	89fa      	ldrh	r2, [r7, #14]
 80064de:	69f9      	ldr	r1, [r7, #28]
 80064e0:	4798      	blx	r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	74fb      	strb	r3, [r7, #19]
 80064e6:	e001      	b.n	80064ec <tcp_input+0x570>
 80064e8:	2300      	movs	r3, #0
 80064ea:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80064ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80064f0:	f113 0f0d 	cmn.w	r3, #13
 80064f4:	f000 8099 	beq.w	800662a <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 80064f8:	4b76      	ldr	r3, [pc, #472]	; (80066d4 <tcp_input+0x758>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80064fe:	69f8      	ldr	r0, [r7, #28]
 8006500:	f000 f900 	bl	8006704 <tcp_input_delayed_close>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8091 	bne.w	800662e <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800650c:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <tcp_input+0x75c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d041      	beq.n	8006598 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <tcp_input+0x5ae>
 800651c:	4b6f      	ldr	r3, [pc, #444]	; (80066dc <tcp_input+0x760>)
 800651e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006522:	496f      	ldr	r1, [pc, #444]	; (80066e0 <tcp_input+0x764>)
 8006524:	486f      	ldr	r0, [pc, #444]	; (80066e4 <tcp_input+0x768>)
 8006526:	f005 fbb3 	bl	800bc90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	7e9b      	ldrb	r3, [r3, #26]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006536:	4b68      	ldr	r3, [pc, #416]	; (80066d8 <tcp_input+0x75c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd ff80 	bl	8004440 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006540:	69f8      	ldr	r0, [r7, #28]
 8006542:	f7fe fc71 	bl	8004e28 <tcp_abort>
            goto aborted;
 8006546:	e079      	b.n	800663c <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <tcp_input+0x5f0>
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	6918      	ldr	r0, [r3, #16]
 800655c:	4b5e      	ldr	r3, [pc, #376]	; (80066d8 <tcp_input+0x75c>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	69f9      	ldr	r1, [r7, #28]
 8006564:	47a0      	blx	r4
 8006566:	4603      	mov	r3, r0
 8006568:	74fb      	strb	r3, [r7, #19]
 800656a:	e008      	b.n	800657e <tcp_input+0x602>
 800656c:	4b5a      	ldr	r3, [pc, #360]	; (80066d8 <tcp_input+0x75c>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	69f9      	ldr	r1, [r7, #28]
 8006574:	2000      	movs	r0, #0
 8006576:	f7ff fa1b 	bl	80059b0 <tcp_recv_null>
 800657a:	4603      	mov	r3, r0
 800657c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800657e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006582:	f113 0f0d 	cmn.w	r3, #13
 8006586:	d054      	beq.n	8006632 <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006590:	4b51      	ldr	r3, [pc, #324]	; (80066d8 <tcp_input+0x75c>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006598:	4b4c      	ldr	r3, [pc, #304]	; (80066cc <tcp_input+0x750>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d031      	beq.n	8006608 <tcp_input+0x68c>
          if (pcb->refused_data != NULL) {
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b0:	7b5a      	ldrb	r2, [r3, #13]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b6:	f042 0220 	orr.w	r2, r2, #32
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	735a      	strb	r2, [r3, #13]
 80065be:	e023      	b.n	8006608 <tcp_input+0x68c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d005      	beq.n	80065d8 <tcp_input+0x65c>
              pcb->rcv_wnd++;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	3301      	adds	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <tcp_input+0x67e>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	6918      	ldr	r0, [r3, #16]
 80065ec:	2300      	movs	r3, #0
 80065ee:	2200      	movs	r2, #0
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	47a0      	blx	r4
 80065f4:	4603      	mov	r3, r0
 80065f6:	74fb      	strb	r3, [r7, #19]
 80065f8:	e001      	b.n	80065fe <tcp_input+0x682>
 80065fa:	2300      	movs	r3, #0
 80065fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80065fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006602:	f113 0f0d 	cmn.w	r3, #13
 8006606:	d016      	beq.n	8006636 <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006608:	4b2f      	ldr	r3, [pc, #188]	; (80066c8 <tcp_input+0x74c>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800660e:	69f8      	ldr	r0, [r7, #28]
 8006610:	f000 f878 	bl	8006704 <tcp_input_delayed_close>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800661a:	69f8      	ldr	r0, [r7, #28]
 800661c:	f002 f962 	bl	80088e4 <tcp_output>
 8006620:	e00c      	b.n	800663c <tcp_input+0x6c0>
        goto aborted;
 8006622:	bf00      	nop
 8006624:	e00a      	b.n	800663c <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006626:	bf00      	nop
 8006628:	e008      	b.n	800663c <tcp_input+0x6c0>
              goto aborted;
 800662a:	bf00      	nop
 800662c:	e006      	b.n	800663c <tcp_input+0x6c0>
          goto aborted;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <tcp_input+0x6c0>
            goto aborted;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <tcp_input+0x6c0>
              goto aborted;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <tcp_input+0x6c0>
          goto aborted;
 800663a:	bf00      	nop
    tcp_input_pcb = NULL;
 800663c:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <tcp_input+0x74c>)
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006642:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <tcp_input+0x75c>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006648:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <tcp_input+0x76c>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d037      	beq.n	80066c0 <tcp_input+0x744>
    {
      pbuf_free(inseg.p);
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <tcp_input+0x76c>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f7fd fef3 	bl	8004440 <pbuf_free>
      inseg.p = NULL;
 800665a:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <tcp_input+0x76c>)
 800665c:	2200      	movs	r2, #0
 800665e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006660:	e02e      	b.n	80066c0 <tcp_input+0x744>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <tcp_input+0x770>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	899b      	ldrh	r3, [r3, #12]
 8006668:	b29b      	uxth	r3, r3
 800666a:	4618      	mov	r0, r3
 800666c:	f7fc fdc3 	bl	80031f6 <lwip_htons>
 8006670:	4603      	mov	r3, r0
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d115      	bne.n	80066a6 <tcp_input+0x72a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <tcp_input+0x774>)
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <tcp_input+0x778>)
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <tcp_input+0x77c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800668a:	4b18      	ldr	r3, [pc, #96]	; (80066ec <tcp_input+0x770>)
 800668c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006692:	4a16      	ldr	r2, [pc, #88]	; (80066ec <tcp_input+0x770>)
 8006694:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006696:	8812      	ldrh	r2, [r2, #0]
 8006698:	b292      	uxth	r2, r2
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <tcp_input+0x780>)
 80066a0:	4a17      	ldr	r2, [pc, #92]	; (8006700 <tcp_input+0x784>)
 80066a2:	f002 fba9 	bl	8008df8 <tcp_rst>
    pbuf_free(p);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fd feca 	bl	8004440 <pbuf_free>
  return;
 80066ac:	e008      	b.n	80066c0 <tcp_input+0x744>
    goto dropped;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <tcp_input+0x73c>
dropped:
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <tcp_input+0x73c>
      goto dropped;
 80066b6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fd fec1 	bl	8004440 <pbuf_free>
 80066be:	e000      	b.n	80066c2 <tcp_input+0x746>
  return;
 80066c0:	bf00      	nop
}
 80066c2:	3724      	adds	r7, #36	; 0x24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}
 80066c8:	20006890 	.word	0x20006890
 80066cc:	200000f9 	.word	0x200000f9
 80066d0:	2000687c 	.word	0x2000687c
 80066d4:	200000f4 	.word	0x200000f4
 80066d8:	200000fc 	.word	0x200000fc
 80066dc:	0800d7a8 	.word	0x0800d7a8
 80066e0:	0800d944 	.word	0x0800d944
 80066e4:	0800d7ec 	.word	0x0800d7ec
 80066e8:	200000cc 	.word	0x200000cc
 80066ec:	200000dc 	.word	0x200000dc
 80066f0:	200000f0 	.word	0x200000f0
 80066f4:	200000f6 	.word	0x200000f6
 80066f8:	200000ec 	.word	0x200000ec
 80066fc:	2000335c 	.word	0x2000335c
 8006700:	20003360 	.word	0x20003360

08006704 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <tcp_input_delayed_close+0x5c>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01d      	beq.n	8006754 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7e9b      	ldrb	r3, [r3, #26]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10d      	bne.n	8006740 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <tcp_input_delayed_close+0x3c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6912      	ldr	r2, [r2, #16]
 8006738:	f06f 010e 	mvn.w	r1, #14
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4808      	ldr	r0, [pc, #32]	; (8006764 <tcp_input_delayed_close+0x60>)
 8006744:	f7ff fb00 	bl	8005d48 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	2001      	movs	r0, #1
 800674c:	f7fd f94e 	bl	80039ec <memp_free>
    return 1;
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200000f9 	.word	0x200000f9
 8006764:	2000687c 	.word	0x2000687c

08006768 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006770:	4b64      	ldr	r3, [pc, #400]	; (8006904 <tcp_listen_input+0x19c>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	f040 80bc 	bne.w	80068f6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800677e:	4b61      	ldr	r3, [pc, #388]	; (8006904 <tcp_listen_input+0x19c>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800678a:	4b5f      	ldr	r3, [pc, #380]	; (8006908 <tcp_listen_input+0x1a0>)
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	4b5f      	ldr	r3, [pc, #380]	; (800690c <tcp_listen_input+0x1a4>)
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	4b5e      	ldr	r3, [pc, #376]	; (8006910 <tcp_listen_input+0x1a8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800679a:	4b5e      	ldr	r3, [pc, #376]	; (8006914 <tcp_listen_input+0x1ac>)
 800679c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800679e:	885b      	ldrh	r3, [r3, #2]
 80067a0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80067a2:	4a5c      	ldr	r2, [pc, #368]	; (8006914 <tcp_listen_input+0x1ac>)
 80067a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80067a6:	8812      	ldrh	r2, [r2, #0]
 80067a8:	b292      	uxth	r2, r2
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4b5a      	ldr	r3, [pc, #360]	; (8006918 <tcp_listen_input+0x1b0>)
 80067b0:	4a5a      	ldr	r2, [pc, #360]	; (800691c <tcp_listen_input+0x1b4>)
 80067b2:	f002 fb21 	bl	8008df8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80067b6:	e0a0      	b.n	80068fa <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80067b8:	4b52      	ldr	r3, [pc, #328]	; (8006904 <tcp_listen_input+0x19c>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 809a 	beq.w	80068fa <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7d5b      	ldrb	r3, [r3, #21]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff f9ce 	bl	8005b6c <tcp_alloc>
 80067d0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <tcp_listen_input+0x8e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6910      	ldr	r0, [r2, #16]
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ec:	2100      	movs	r1, #0
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	73bb      	strb	r3, [r7, #14]
      return;
 80067f4:	e082      	b.n	80068fc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80067f6:	23f0      	movs	r3, #240	; 0xf0
 80067f8:	73bb      	strb	r3, [r7, #14]
      return;
 80067fa:	e07f      	b.n	80068fc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80067fc:	4b48      	ldr	r3, [pc, #288]	; (8006920 <tcp_listen_input+0x1b8>)
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006804:	4b46      	ldr	r3, [pc, #280]	; (8006920 <tcp_listen_input+0x1b8>)
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8ada      	ldrh	r2, [r3, #22]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006814:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <tcp_listen_input+0x1ac>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29a      	uxth	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2203      	movs	r2, #3
 8006824:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006826:	4b3a      	ldr	r3, [pc, #232]	; (8006910 <tcp_listen_input+0x1a8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006838:	6978      	ldr	r0, [r7, #20]
 800683a:	f7ff fb01 	bl	8005e40 <tcp_next_iss>
 800683e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006858:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <tcp_listen_input+0x1a8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7a1b      	ldrb	r3, [r3, #8]
 8006874:	f003 030c 	and.w	r3, r3, #12
 8006878:	b2da      	uxtb	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800687e:	4b29      	ldr	r3, [pc, #164]	; (8006924 <tcp_listen_input+0x1bc>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	4a27      	ldr	r2, [pc, #156]	; (8006924 <tcp_listen_input+0x1bc>)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	f002 fd04 	bl	8009298 <tcp_timer_needed>
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <tcp_listen_input+0x1c0>)
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006896:	6978      	ldr	r0, [r7, #20]
 8006898:	f001 fd14 	bl	80082c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800689c:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <tcp_listen_input+0x1ac>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	89db      	ldrh	r3, [r3, #14]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7ff fad5 	bl	8005e70 <tcp_eff_send_mss_impl>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80068ce:	2112      	movs	r1, #18
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f001 feaf 	bl	8008634 <tcp_enqueue_flags>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 80068e2:	2100      	movs	r1, #0
 80068e4:	6978      	ldr	r0, [r7, #20]
 80068e6:	f7fe f9ed 	bl	8004cc4 <tcp_abandon>
      return;
 80068ea:	e007      	b.n	80068fc <tcp_listen_input+0x194>
    tcp_output(npcb);
 80068ec:	6978      	ldr	r0, [r7, #20]
 80068ee:	f001 fff9 	bl	80088e4 <tcp_output>
  return;
 80068f2:	bf00      	nop
 80068f4:	e001      	b.n	80068fa <tcp_listen_input+0x192>
    return;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <tcp_listen_input+0x194>
  return;
 80068fa:	bf00      	nop
}
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200000f8 	.word	0x200000f8
 8006908:	200000f0 	.word	0x200000f0
 800690c:	200000f6 	.word	0x200000f6
 8006910:	200000ec 	.word	0x200000ec
 8006914:	200000dc 	.word	0x200000dc
 8006918:	2000335c 	.word	0x2000335c
 800691c:	20003360 	.word	0x20003360
 8006920:	2000334c 	.word	0x2000334c
 8006924:	2000687c 	.word	0x2000687c
 8006928:	20006878 	.word	0x20006878

0800692c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006934:	4b29      	ldr	r3, [pc, #164]	; (80069dc <tcp_timewait_input+0xb0>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d147      	bne.n	80069d0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006940:	4b26      	ldr	r3, [pc, #152]	; (80069dc <tcp_timewait_input+0xb0>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d027      	beq.n	800699c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800694c:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <tcp_timewait_input+0xb4>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	db2a      	blt.n	80069b0 <tcp_timewait_input+0x84>
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <tcp_timewait_input+0xb4>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006966:	440b      	add	r3, r1
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	dc20      	bgt.n	80069b0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <tcp_timewait_input+0xb8>)
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <tcp_timewait_input+0xbc>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <tcp_timewait_input+0xb4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <tcp_timewait_input+0xc0>)
 8006980:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006982:	885b      	ldrh	r3, [r3, #2]
 8006984:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <tcp_timewait_input+0xc0>)
 8006988:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800698a:	8812      	ldrh	r2, [r2, #0]
 800698c:	b292      	uxth	r2, r2
 800698e:	9201      	str	r2, [sp, #4]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <tcp_timewait_input+0xc4>)
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <tcp_timewait_input+0xc8>)
 8006996:	f002 fa2f 	bl	8008df8 <tcp_rst>
      return;
 800699a:	e01c      	b.n	80069d6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <tcp_timewait_input+0xb0>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <tcp_timewait_input+0xcc>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <tcp_timewait_input+0xbc>)
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00d      	beq.n	80069d4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7e9b      	ldrb	r3, [r3, #26]
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 ff8c 	bl	80088e4 <tcp_output>
  }
  return;
 80069cc:	bf00      	nop
 80069ce:	e001      	b.n	80069d4 <tcp_timewait_input+0xa8>
    return;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <tcp_timewait_input+0xaa>
  return;
 80069d4:	bf00      	nop
}
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	200000f8 	.word	0x200000f8
 80069e0:	200000ec 	.word	0x200000ec
 80069e4:	200000f0 	.word	0x200000f0
 80069e8:	200000f6 	.word	0x200000f6
 80069ec:	200000dc 	.word	0x200000dc
 80069f0:	2000335c 	.word	0x2000335c
 80069f4:	20003360 	.word	0x20003360
 80069f8:	20006880 	.word	0x20006880

080069fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8006a0c:	4ba4      	ldr	r3, [pc, #656]	; (8006ca0 <tcp_process+0x2a4>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d04e      	beq.n	8006ab6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7d1b      	ldrb	r3, [r3, #20]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d108      	bne.n	8006a32 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a24:	4b9f      	ldr	r3, [pc, #636]	; (8006ca4 <tcp_process+0x2a8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d123      	bne.n	8006a74 <tcp_process+0x78>
        acceptable = 1;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	76fb      	strb	r3, [r7, #27]
 8006a30:	e020      	b.n	8006a74 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a36:	4b9c      	ldr	r3, [pc, #624]	; (8006ca8 <tcp_process+0x2ac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d102      	bne.n	8006a44 <tcp_process+0x48>
        acceptable = 1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	76fb      	strb	r3, [r7, #27]
 8006a42:	e017      	b.n	8006a74 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006a44:	4b98      	ldr	r3, [pc, #608]	; (8006ca8 <tcp_process+0x2ac>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db10      	blt.n	8006a74 <tcp_process+0x78>
 8006a52:	4b95      	ldr	r3, [pc, #596]	; (8006ca8 <tcp_process+0x2ac>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006a5e:	440b      	add	r3, r1
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc06      	bgt.n	8006a74 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7e9b      	ldrb	r3, [r3, #26]
 8006a6a:	f043 0302 	orr.w	r3, r3, #2
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006a74:	7efb      	ldrb	r3, [r7, #27]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01b      	beq.n	8006ab2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7d1b      	ldrb	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <tcp_process+0x94>
 8006a82:	4b8a      	ldr	r3, [pc, #552]	; (8006cac <tcp_process+0x2b0>)
 8006a84:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006a88:	4989      	ldr	r1, [pc, #548]	; (8006cb0 <tcp_process+0x2b4>)
 8006a8a:	488a      	ldr	r0, [pc, #552]	; (8006cb4 <tcp_process+0x2b8>)
 8006a8c:	f005 f900 	bl	800bc90 <iprintf>
      recv_flags |= TF_RESET;
 8006a90:	4b89      	ldr	r3, [pc, #548]	; (8006cb8 <tcp_process+0x2bc>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f043 0308 	orr.w	r3, r3, #8
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	4b87      	ldr	r3, [pc, #540]	; (8006cb8 <tcp_process+0x2bc>)
 8006a9c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7e9b      	ldrb	r3, [r3, #26]
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8006aac:	f06f 030d 	mvn.w	r3, #13
 8006ab0:	e34d      	b.n	800714e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e34b      	b.n	800714e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006ab6:	4b7a      	ldr	r3, [pc, #488]	; (8006ca0 <tcp_process+0x2a4>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d010      	beq.n	8006ae4 <tcp_process+0xe8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7d1b      	ldrb	r3, [r3, #20]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d00c      	beq.n	8006ae4 <tcp_process+0xe8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7d1b      	ldrb	r3, [r3, #20]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d008      	beq.n	8006ae4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7e9b      	ldrb	r3, [r3, #26]
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e334      	b.n	800714e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7e9b      	ldrb	r3, [r3, #26]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d103      	bne.n	8006af8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006af0:	4b72      	ldr	r3, [pc, #456]	; (8006cbc <tcp_process+0x2c0>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fbdf 	bl	80082c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7d1b      	ldrb	r3, [r3, #20]
 8006b0a:	3b02      	subs	r3, #2
 8006b0c:	2b07      	cmp	r3, #7
 8006b0e:	f200 830e 	bhi.w	800712e <tcp_process+0x732>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <tcp_process+0x11c>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006d31 	.word	0x08006d31
 8006b20:	08006e89 	.word	0x08006e89
 8006b24:	08006eb3 	.word	0x08006eb3
 8006b28:	08006fdd 	.word	0x08006fdd
 8006b2c:	08006e89 	.word	0x08006e89
 8006b30:	08007069 	.word	0x08007069
 8006b34:	080070f9 	.word	0x080070f9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006b38:	4b59      	ldr	r3, [pc, #356]	; (8006ca0 <tcp_process+0x2a4>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80cb 	beq.w	8006cdc <tcp_process+0x2e0>
 8006b46:	4b56      	ldr	r3, [pc, #344]	; (8006ca0 <tcp_process+0x2a4>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80c4 	beq.w	8006cdc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	4b52      	ldr	r3, [pc, #328]	; (8006ca4 <tcp_process+0x2a8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f040 80bc 	bne.w	8006cdc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8006b64:	4b50      	ldr	r3, [pc, #320]	; (8006ca8 <tcp_process+0x2ac>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8006b76:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <tcp_process+0x2a8>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8006b7e:	4b50      	ldr	r3, [pc, #320]	; (8006cc0 <tcp_process+0x2c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	89db      	ldrh	r3, [r3, #14]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006b98:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <tcp_process+0x2ac>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	1e5a      	subs	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7ff f95c 	bl	8005e70 <tcp_eff_send_mss_impl>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	f241 121c 	movw	r2, #4380	; 0x111c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	bf38      	it	cc
 8006bce:	461a      	movcc	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bf28      	it	cs
 8006bda:	4613      	movcs	r3, r2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <tcp_process+0x200>
 8006bee:	4b2f      	ldr	r3, [pc, #188]	; (8006cac <tcp_process+0x2b0>)
 8006bf0:	f240 321a 	movw	r2, #794	; 0x31a
 8006bf4:	4933      	ldr	r1, [pc, #204]	; (8006cc4 <tcp_process+0x2c8>)
 8006bf6:	482f      	ldr	r0, [pc, #188]	; (8006cb4 <tcp_process+0x2b8>)
 8006bf8:	f005 f84a 	bl	800bc90 <iprintf>
      --pcb->snd_queuelen;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c10:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d111      	bne.n	8006c3c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <tcp_process+0x236>
 8006c24:	4b21      	ldr	r3, [pc, #132]	; (8006cac <tcp_process+0x2b0>)
 8006c26:	f240 3222 	movw	r2, #802	; 0x322
 8006c2a:	4927      	ldr	r1, [pc, #156]	; (8006cc8 <tcp_process+0x2cc>)
 8006c2c:	4821      	ldr	r0, [pc, #132]	; (8006cb4 <tcp_process+0x2b8>)
 8006c2e:	f005 f82f 	bl	800bc90 <iprintf>
        pcb->unsent = rseg->next;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	669a      	str	r2, [r3, #104]	; 0x68
 8006c3a:	e003      	b.n	8006c44 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8006c44:	69f8      	ldr	r0, [r7, #28]
 8006c46:	f7fe fe7f 	bl	8005948 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <tcp_process+0x260>
        pcb->rtime = -1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c58:	861a      	strh	r2, [r3, #48]	; 0x30
 8006c5a:	e006      	b.n	8006c6a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <tcp_process+0x28e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6910      	ldr	r0, [r2, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4798      	blx	r3
 8006c84:	4603      	mov	r3, r0
 8006c86:	76bb      	strb	r3, [r7, #26]
 8006c88:	e001      	b.n	8006c8e <tcp_process+0x292>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8006c8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006c92:	f113 0f0d 	cmn.w	r3, #13
 8006c96:	d119      	bne.n	8006ccc <tcp_process+0x2d0>
        return ERR_ABRT;
 8006c98:	f06f 030c 	mvn.w	r3, #12
 8006c9c:	e257      	b.n	800714e <tcp_process+0x752>
 8006c9e:	bf00      	nop
 8006ca0:	200000f8 	.word	0x200000f8
 8006ca4:	200000f0 	.word	0x200000f0
 8006ca8:	200000ec 	.word	0x200000ec
 8006cac:	0800d7a8 	.word	0x0800d7a8
 8006cb0:	0800d960 	.word	0x0800d960
 8006cb4:	0800d7ec 	.word	0x0800d7ec
 8006cb8:	200000f9 	.word	0x200000f9
 8006cbc:	20006880 	.word	0x20006880
 8006cc0:	200000dc 	.word	0x200000dc
 8006cc4:	0800d980 	.word	0x0800d980
 8006cc8:	0800d998 	.word	0x0800d998
      }
      tcp_ack_now(pcb);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7e9b      	ldrb	r3, [r3, #26]
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8006cda:	e22a      	b.n	8007132 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8006cdc:	4b9f      	ldr	r3, [pc, #636]	; (8006f5c <tcp_process+0x560>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8224 	beq.w	8007132 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cea:	4b9d      	ldr	r3, [pc, #628]	; (8006f60 <tcp_process+0x564>)
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	4b9d      	ldr	r3, [pc, #628]	; (8006f64 <tcp_process+0x568>)
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b9c      	ldr	r3, [pc, #624]	; (8006f68 <tcp_process+0x56c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cfa:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <tcp_process+0x570>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d02:	4a9a      	ldr	r2, [pc, #616]	; (8006f6c <tcp_process+0x570>)
 8006d04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	9201      	str	r2, [sp, #4]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	4b98      	ldr	r3, [pc, #608]	; (8006f70 <tcp_process+0x574>)
 8006d10:	4a98      	ldr	r2, [pc, #608]	; (8006f74 <tcp_process+0x578>)
 8006d12:	f002 f871 	bl	8008df8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	f200 8208 	bhi.w	8007132 <tcp_process+0x736>
        pcb->rtime = 0;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f002 f8db 	bl	8008ee4 <tcp_rexmit_rto>
    break;
 8006d2e:	e200      	b.n	8007132 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8006d30:	4b8a      	ldr	r3, [pc, #552]	; (8006f5c <tcp_process+0x560>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8091 	beq.w	8006e60 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006d3e:	4b88      	ldr	r3, [pc, #544]	; (8006f60 <tcp_process+0x564>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	db71      	blt.n	8006e32 <tcp_process+0x436>
 8006d4e:	4b84      	ldr	r3, [pc, #528]	; (8006f60 <tcp_process+0x564>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc6a      	bgt.n	8006e32 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <tcp_process+0x386>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <tcp_process+0x386>
 8006d74:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <tcp_process+0x57c>)
 8006d76:	f240 3251 	movw	r2, #849	; 0x351
 8006d7a:	4980      	ldr	r1, [pc, #512]	; (8006f7c <tcp_process+0x580>)
 8006d7c:	4880      	ldr	r0, [pc, #512]	; (8006f80 <tcp_process+0x584>)
 8006d7e:	f004 ff87 	bl	800bc90 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8006d8a:	23fa      	movs	r3, #250	; 0xfa
 8006d8c:	76bb      	strb	r3, [r7, #26]
 8006d8e:	e011      	b.n	8006db4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <tcp_process+0x3b4>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6910      	ldr	r0, [r2, #16]
 8006da4:	2200      	movs	r2, #0
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	76bb      	strb	r3, [r7, #26]
 8006dae:	e001      	b.n	8006db4 <tcp_process+0x3b8>
 8006db0:	23f0      	movs	r3, #240	; 0xf0
 8006db2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8006db4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8006dbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006dc0:	f113 0f0d 	cmn.w	r3, #13
 8006dc4:	d002      	beq.n	8006dcc <tcp_process+0x3d0>
            tcp_abort(pcb);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe f82e 	bl	8004e28 <tcp_abort>
          }
          return ERR_ABRT;
 8006dcc:	f06f 030c 	mvn.w	r3, #12
 8006dd0:	e1bd      	b.n	800714e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa42 	bl	800725c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	; (8006f84 <tcp_process+0x588>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <tcp_process+0x3f0>
          recv_acked--;
 8006de0:	4b68      	ldr	r3, [pc, #416]	; (8006f84 <tcp_process+0x588>)
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <tcp_process+0x588>)
 8006dea:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	f241 121c 	movw	r2, #4380	; 0x111c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf38      	it	cc
 8006dfa:	461a      	movcc	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bf28      	it	cs
 8006e06:	4613      	movcs	r3, r2
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8006e10:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <tcp_process+0x58c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d034      	beq.n	8006e86 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7e9b      	ldrb	r3, [r3, #26]
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8006e30:	e029      	b.n	8006e86 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e32:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <tcp_process+0x564>)
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	4b4b      	ldr	r3, [pc, #300]	; (8006f64 <tcp_process+0x568>)
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <tcp_process+0x56c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e42:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <tcp_process+0x570>)
 8006e44:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e46:	885b      	ldrh	r3, [r3, #2]
 8006e48:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e4a:	4a48      	ldr	r2, [pc, #288]	; (8006f6c <tcp_process+0x570>)
 8006e4c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e4e:	8812      	ldrh	r2, [r2, #0]
 8006e50:	b292      	uxth	r2, r2
 8006e52:	9201      	str	r2, [sp, #4]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <tcp_process+0x574>)
 8006e58:	4a46      	ldr	r2, [pc, #280]	; (8006f74 <tcp_process+0x578>)
 8006e5a:	f001 ffcd 	bl	8008df8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8006e5e:	e16a      	b.n	8007136 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006e60:	4b3e      	ldr	r3, [pc, #248]	; (8006f5c <tcp_process+0x560>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8164 	beq.w	8007136 <tcp_process+0x73a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <tcp_process+0x56c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	f040 815c 	bne.w	8007136 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 f866 	bl	8008f50 <tcp_rexmit>
    break;
 8006e84:	e157      	b.n	8007136 <tcp_process+0x73a>
 8006e86:	e156      	b.n	8007136 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f9e7 	bl	800725c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006e8e:	4b3e      	ldr	r3, [pc, #248]	; (8006f88 <tcp_process+0x58c>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 814f 	beq.w	800713a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7e9b      	ldrb	r3, [r3, #26]
 8006ea0:	f043 0302 	orr.w	r3, r3, #2
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2207      	movs	r2, #7
 8006eae:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006eb0:	e143      	b.n	800713a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9d2 	bl	800725c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006eb8:	4b33      	ldr	r3, [pc, #204]	; (8006f88 <tcp_process+0x58c>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d074      	beq.n	8006fae <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ec4:	4b25      	ldr	r3, [pc, #148]	; (8006f5c <tcp_process+0x560>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d063      	beq.n	8006f98 <tcp_process+0x59c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <tcp_process+0x564>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d15d      	bne.n	8006f98 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d159      	bne.n	8006f98 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7e9b      	ldrb	r3, [r3, #26]
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe fee6 	bl	8005cc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006ef8:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <tcp_process+0x590>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d105      	bne.n	8006f0e <tcp_process+0x512>
 8006f02:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <tcp_process+0x590>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <tcp_process+0x590>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	e013      	b.n	8006f36 <tcp_process+0x53a>
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <tcp_process+0x590>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e00c      	b.n	8006f30 <tcp_process+0x534>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d104      	bne.n	8006f2a <tcp_process+0x52e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e005      	b.n	8006f36 <tcp_process+0x53a>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ef      	bne.n	8006f16 <tcp_process+0x51a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60da      	str	r2, [r3, #12]
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <tcp_process+0x594>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	220a      	movs	r2, #10
 8006f46:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006f48:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <tcp_process+0x598>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <tcp_process+0x598>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	f002 f99f 	bl	8009298 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8006f5a:	e0f0      	b.n	800713e <tcp_process+0x742>
 8006f5c:	200000f8 	.word	0x200000f8
 8006f60:	200000f0 	.word	0x200000f0
 8006f64:	200000f6 	.word	0x200000f6
 8006f68:	200000ec 	.word	0x200000ec
 8006f6c:	200000dc 	.word	0x200000dc
 8006f70:	2000335c 	.word	0x2000335c
 8006f74:	20003360 	.word	0x20003360
 8006f78:	0800d7a8 	.word	0x0800d7a8
 8006f7c:	0800d9ac 	.word	0x0800d9ac
 8006f80:	0800d7ec 	.word	0x0800d7ec
 8006f84:	200000f4 	.word	0x200000f4
 8006f88:	200000f9 	.word	0x200000f9
 8006f8c:	2000687c 	.word	0x2000687c
 8006f90:	20006878 	.word	0x20006878
 8006f94:	2000688c 	.word	0x2000688c
        tcp_ack_now(pcb);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7e9b      	ldrb	r3, [r3, #26]
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2208      	movs	r2, #8
 8006faa:	751a      	strb	r2, [r3, #20]
    break;
 8006fac:	e0c7      	b.n	800713e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006fae:	4b6a      	ldr	r3, [pc, #424]	; (8007158 <tcp_process+0x75c>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80c1 	beq.w	800713e <tcp_process+0x742>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fc0:	4b66      	ldr	r3, [pc, #408]	; (800715c <tcp_process+0x760>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	f040 80ba 	bne.w	800713e <tcp_process+0x742>
               pcb->unsent == NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 80b5 	bne.w	800713e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	751a      	strb	r2, [r3, #20]
    break;
 8006fda:	e0b0      	b.n	800713e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f93d 	bl	800725c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006fe2:	4b5f      	ldr	r3, [pc, #380]	; (8007160 <tcp_process+0x764>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80a9 	beq.w	8007142 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7e9b      	ldrb	r3, [r3, #26]
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fe fe60 	bl	8005cc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007004:	4b57      	ldr	r3, [pc, #348]	; (8007164 <tcp_process+0x768>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d105      	bne.n	800701a <tcp_process+0x61e>
 800700e:	4b55      	ldr	r3, [pc, #340]	; (8007164 <tcp_process+0x768>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	4a53      	ldr	r2, [pc, #332]	; (8007164 <tcp_process+0x768>)
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e013      	b.n	8007042 <tcp_process+0x646>
 800701a:	4b52      	ldr	r3, [pc, #328]	; (8007164 <tcp_process+0x768>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e00c      	b.n	800703c <tcp_process+0x640>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d104      	bne.n	8007036 <tcp_process+0x63a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e005      	b.n	8007042 <tcp_process+0x646>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ef      	bne.n	8007022 <tcp_process+0x626>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	60da      	str	r2, [r3, #12]
 8007048:	4b47      	ldr	r3, [pc, #284]	; (8007168 <tcp_process+0x76c>)
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	220a      	movs	r2, #10
 8007052:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007054:	4b45      	ldr	r3, [pc, #276]	; (800716c <tcp_process+0x770>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	4a43      	ldr	r2, [pc, #268]	; (800716c <tcp_process+0x770>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	f002 f919 	bl	8009298 <tcp_timer_needed>
    }
    break;
 8007066:	e06c      	b.n	8007142 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8f7 	bl	800725c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800706e:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <tcp_process+0x75c>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b00      	cmp	r3, #0
 8007078:	d065      	beq.n	8007146 <tcp_process+0x74a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800707e:	4b37      	ldr	r3, [pc, #220]	; (800715c <tcp_process+0x760>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d15f      	bne.n	8007146 <tcp_process+0x74a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800708a:	2b00      	cmp	r3, #0
 800708c:	d15b      	bne.n	8007146 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fe fe18 	bl	8005cc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007094:	4b33      	ldr	r3, [pc, #204]	; (8007164 <tcp_process+0x768>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d105      	bne.n	80070aa <tcp_process+0x6ae>
 800709e:	4b31      	ldr	r3, [pc, #196]	; (8007164 <tcp_process+0x768>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4a2f      	ldr	r2, [pc, #188]	; (8007164 <tcp_process+0x768>)
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	e013      	b.n	80070d2 <tcp_process+0x6d6>
 80070aa:	4b2e      	ldr	r3, [pc, #184]	; (8007164 <tcp_process+0x768>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e00c      	b.n	80070cc <tcp_process+0x6d0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d104      	bne.n	80070c6 <tcp_process+0x6ca>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	60da      	str	r2, [r3, #12]
 80070c4:	e005      	b.n	80070d2 <tcp_process+0x6d6>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1ef      	bne.n	80070b2 <tcp_process+0x6b6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	4b23      	ldr	r3, [pc, #140]	; (8007168 <tcp_process+0x76c>)
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	220a      	movs	r2, #10
 80070e2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80070e4:	4b21      	ldr	r3, [pc, #132]	; (800716c <tcp_process+0x770>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60da      	str	r2, [r3, #12]
 80070ec:	4a1f      	ldr	r2, [pc, #124]	; (800716c <tcp_process+0x770>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	f002 f8d1 	bl	8009298 <tcp_timer_needed>
    }
    break;
 80070f6:	e026      	b.n	8007146 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8af 	bl	800725c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <tcp_process+0x75c>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01f      	beq.n	800714a <tcp_process+0x74e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <tcp_process+0x760>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d119      	bne.n	800714a <tcp_process+0x74e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711a:	2b00      	cmp	r3, #0
 800711c:	d115      	bne.n	800714a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <tcp_process+0x764>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f043 0310 	orr.w	r3, r3, #16
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <tcp_process+0x764>)
 800712a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800712c:	e00d      	b.n	800714a <tcp_process+0x74e>
  default:
    break;
 800712e:	bf00      	nop
 8007130:	e00c      	b.n	800714c <tcp_process+0x750>
    break;
 8007132:	bf00      	nop
 8007134:	e00a      	b.n	800714c <tcp_process+0x750>
    break;
 8007136:	bf00      	nop
 8007138:	e008      	b.n	800714c <tcp_process+0x750>
    break;
 800713a:	bf00      	nop
 800713c:	e006      	b.n	800714c <tcp_process+0x750>
    break;
 800713e:	bf00      	nop
 8007140:	e004      	b.n	800714c <tcp_process+0x750>
    break;
 8007142:	bf00      	nop
 8007144:	e002      	b.n	800714c <tcp_process+0x750>
    break;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <tcp_process+0x750>
    break;
 800714a:	bf00      	nop
  }
  return ERR_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200000f8 	.word	0x200000f8
 800715c:	200000f0 	.word	0x200000f0
 8007160:	200000f9 	.word	0x200000f9
 8007164:	2000687c 	.word	0x2000687c
 8007168:	20006878 	.word	0x20006878
 800716c:	2000688c 	.word	0x2000688c

08007170 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	899b      	ldrh	r3, [r3, #12]
 8007180:	b29b      	uxth	r3, r3
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc f837 	bl	80031f6 <lwip_htons>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d027      	beq.n	80071e2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007192:	6838      	ldr	r0, [r7, #0]
 8007194:	f7fe fbc4 	bl	8005920 <tcp_segs_free>
    next = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	e055      	b.n	800724a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	899b      	ldrh	r3, [r3, #12]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fc f825 	bl	80031f6 <lwip_htons>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00d      	beq.n	80071d2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	899b      	ldrh	r3, [r3, #12]
 80071bc:	b29c      	uxth	r4, r3
 80071be:	2001      	movs	r0, #1
 80071c0:	f7fc f819 	bl	80031f6 <lwip_htons>
 80071c4:	4603      	mov	r3, r0
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4322      	orrs	r2, r4
 80071ce:	b292      	uxth	r2, r2
 80071d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7fe fbb3 	bl	8005948 <tcp_seg_free>
    while (next &&
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00e      	beq.n	8007206 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	891b      	ldrh	r3, [r3, #8]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <tcp_oos_insert_segment+0xe8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	441a      	add	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	8909      	ldrh	r1, [r1, #8]
 80071fe:	440b      	add	r3, r1
 8007200:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007202:	2b00      	cmp	r3, #0
 8007204:	dacb      	bge.n	800719e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	891b      	ldrh	r3, [r3, #8]
 8007210:	461a      	mov	r2, r3
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <tcp_oos_insert_segment+0xe8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	441a      	add	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007220:	2b00      	cmp	r3, #0
 8007222:	dd12      	ble.n	800724a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b29a      	uxth	r2, r3
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <tcp_oos_insert_segment+0xe8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	891b      	ldrh	r3, [r3, #8]
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fc ff87 	bl	8004158 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	601a      	str	r2, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}
 8007258:	200000ec 	.word	0x200000ec

0800725c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800725c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725e:	b08d      	sub	sp, #52	; 0x34
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7d1b      	ldrb	r3, [r3, #20]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d806      	bhi.n	800727e <tcp_receive+0x22>
 8007270:	4ba6      	ldr	r3, [pc, #664]	; (800750c <tcp_receive+0x2b0>)
 8007272:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007276:	49a6      	ldr	r1, [pc, #664]	; (8007510 <tcp_receive+0x2b4>)
 8007278:	48a6      	ldr	r0, [pc, #664]	; (8007514 <tcp_receive+0x2b8>)
 800727a:	f004 fd09 	bl	800bc90 <iprintf>

  if (flags & TCP_ACK) {
 800727e:	4ba6      	ldr	r3, [pc, #664]	; (8007518 <tcp_receive+0x2bc>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 82bf 	beq.w	800780a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	4413      	add	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072a0:	4b9e      	ldr	r3, [pc, #632]	; (800751c <tcp_receive+0x2c0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	db1b      	blt.n	80072e2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072ae:	4b9b      	ldr	r3, [pc, #620]	; (800751c <tcp_receive+0x2c0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d106      	bne.n	80072c4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ba:	4b99      	ldr	r3, [pc, #612]	; (8007520 <tcp_receive+0x2c4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db0e      	blt.n	80072e2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072c8:	4b95      	ldr	r3, [pc, #596]	; (8007520 <tcp_receive+0x2c4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d141      	bne.n	8007354 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80072d0:	4b94      	ldr	r3, [pc, #592]	; (8007524 <tcp_receive+0x2c8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	89db      	ldrh	r3, [r3, #14]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072de:	429a      	cmp	r2, r3
 80072e0:	d938      	bls.n	8007354 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80072e2:	4b90      	ldr	r3, [pc, #576]	; (8007524 <tcp_receive+0x2c8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	89db      	ldrh	r3, [r3, #14]
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d205      	bcs.n	800730c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800730c:	4b83      	ldr	r3, [pc, #524]	; (800751c <tcp_receive+0x2c0>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007314:	4b82      	ldr	r3, [pc, #520]	; (8007520 <tcp_receive+0x2c4>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800732c:	2b00      	cmp	r3, #0
 800732e:	d111      	bne.n	8007354 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007340:	e008      	b.n	8007354 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <tcp_receive+0x2c4>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	dc53      	bgt.n	800740a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007362:	4b71      	ldr	r3, [pc, #452]	; (8007528 <tcp_receive+0x2cc>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d146      	bne.n	80073f8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007374:	4413      	add	r3, r2
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	429a      	cmp	r2, r3
 800737a:	d13d      	bne.n	80073f8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007382:	2b00      	cmp	r3, #0
 8007384:	db38      	blt.n	80073f8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800738a:	4b65      	ldr	r3, [pc, #404]	; (8007520 <tcp_receive+0x2c4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d132      	bne.n	80073f8 <tcp_receive+0x19c>
              found_dupack = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800739c:	2bff      	cmp	r3, #255	; 0xff
 800739e:	d007      	beq.n	80073b0 <tcp_receive+0x154>
                ++pcb->dupacks;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073a6:	3301      	adds	r3, #1
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d916      	bls.n	80073e8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073c4:	4413      	add	r3, r2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d912      	bls.n	80073f8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073dc:	4413      	add	r3, r2
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80073e6:	e007      	b.n	80073f8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d102      	bne.n	80073f8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fdfc 	bl	8008ff0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 8169 	bne.w	80076d2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007408:	e163      	b.n	80076d2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800740a:	4b45      	ldr	r3, [pc, #276]	; (8007520 <tcp_receive+0x2c4>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	f2c0 8107 	blt.w	800762a <tcp_receive+0x3ce>
 800741c:	4b40      	ldr	r3, [pc, #256]	; (8007520 <tcp_receive+0x2c4>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	f300 80ff 	bgt.w	800762a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7e9b      	ldrb	r3, [r3, #26]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7e9b      	ldrb	r3, [r3, #26]
 800743c:	f023 0304 	bic.w	r3, r3, #4
 8007440:	b2da      	uxtb	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007460:	10db      	asrs	r3, r3, #3
 8007462:	b21b      	sxth	r3, r3
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800746c:	b29b      	uxth	r3, r3
 800746e:	4413      	add	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	b21a      	sxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007482:	4b27      	ldr	r3, [pc, #156]	; (8007520 <tcp_receive+0x2c4>)
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7d1b      	ldrb	r3, [r3, #20]
 800748e:	2b03      	cmp	r3, #3
 8007490:	f240 8094 	bls.w	80075bc <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d216      	bcs.n	80074d2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074ae:	4413      	add	r3, r2
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d97f      	bls.n	80075bc <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074c6:	4413      	add	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80074d0:	e074      	b.n	80075bc <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074dc:	4619      	mov	r1, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e2:	fb03 f301 	mul.w	r3, r3, r1
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80074ec:	fb93 f3f1 	sdiv	r3, r3, r1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80074fc:	8a7a      	ldrh	r2, [r7, #18]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d95c      	bls.n	80075bc <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8a7a      	ldrh	r2, [r7, #18]
 8007506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800750a:	e057      	b.n	80075bc <tcp_receive+0x360>
 800750c:	0800d7a8 	.word	0x0800d7a8
 8007510:	0800d9cc 	.word	0x0800d9cc
 8007514:	0800d7ec 	.word	0x0800d7ec
 8007518:	200000f8 	.word	0x200000f8
 800751c:	200000ec 	.word	0x200000ec
 8007520:	200000f0 	.word	0x200000f0
 8007524:	200000dc 	.word	0x200000dc
 8007528:	200000f6 	.word	0x200000f6
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd f80e 	bl	8004568 <pbuf_clen>
 800754c:	4603      	mov	r3, r0
 800754e:	429c      	cmp	r4, r3
 8007550:	d206      	bcs.n	8007560 <tcp_receive+0x304>
 8007552:	4b70      	ldr	r3, [pc, #448]	; (8007714 <tcp_receive+0x4b8>)
 8007554:	f240 429e 	movw	r2, #1182	; 0x49e
 8007558:	496f      	ldr	r1, [pc, #444]	; (8007718 <tcp_receive+0x4bc>)
 800755a:	4870      	ldr	r0, [pc, #448]	; (800771c <tcp_receive+0x4c0>)
 800755c:	f004 fb98 	bl	800bc90 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	f7fc ffff 	bl	8004568 <pbuf_clen>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	b29a      	uxth	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	891a      	ldrh	r2, [r3, #8]
 8007582:	4b67      	ldr	r3, [pc, #412]	; (8007720 <tcp_receive+0x4c4>)
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	4413      	add	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	4b65      	ldr	r3, [pc, #404]	; (8007720 <tcp_receive+0x4c4>)
 800758c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800758e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007590:	f7fe f9da 	bl	8005948 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <tcp_receive+0x360>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <tcp_receive+0x360>
 80075ae:	4b59      	ldr	r3, [pc, #356]	; (8007714 <tcp_receive+0x4b8>)
 80075b0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80075b4:	495b      	ldr	r1, [pc, #364]	; (8007724 <tcp_receive+0x4c8>)
 80075b6:	4859      	ldr	r0, [pc, #356]	; (800771c <tcp_receive+0x4c0>)
 80075b8:	f004 fb6a 	bl	800bc90 <iprintf>
      while (pcb->unacked != NULL &&
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d022      	beq.n	800760a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fb fe20 	bl	8003212 <lwip_htonl>
 80075d2:	4604      	mov	r4, r0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d8:	891b      	ldrh	r3, [r3, #8]
 80075da:	461d      	mov	r5, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	899b      	ldrh	r3, [r3, #12]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fb fe05 	bl	80031f6 <lwip_htons>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <tcp_receive+0x39e>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <tcp_receive+0x3a0>
 80075fa:	2300      	movs	r3, #0
 80075fc:	442b      	add	r3, r5
 80075fe:	18e2      	adds	r2, r4, r3
 8007600:	4b49      	ldr	r3, [pc, #292]	; (8007728 <tcp_receive+0x4cc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007606:	2b00      	cmp	r3, #0
 8007608:	dd90      	ble.n	800752c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007618:	861a      	strh	r2, [r3, #48]	; 0x30
 800761a:	e002      	b.n	8007622 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	76da      	strb	r2, [r3, #27]
 8007628:	e002      	b.n	8007630 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 f8fe 	bl	800882c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007630:	e04f      	b.n	80076d2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	f7fc ff83 	bl	8004568 <pbuf_clen>
 8007662:	4603      	mov	r3, r0
 8007664:	429c      	cmp	r4, r3
 8007666:	d206      	bcs.n	8007676 <tcp_receive+0x41a>
 8007668:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <tcp_receive+0x4b8>)
 800766a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800766e:	492a      	ldr	r1, [pc, #168]	; (8007718 <tcp_receive+0x4bc>)
 8007670:	482a      	ldr	r0, [pc, #168]	; (800771c <tcp_receive+0x4c0>)
 8007672:	f004 fb0d 	bl	800bc90 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4618      	mov	r0, r3
 800767c:	f7fc ff74 	bl	8004568 <pbuf_clen>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	891a      	ldrh	r2, [r3, #8]
 8007698:	4b21      	ldr	r3, [pc, #132]	; (8007720 <tcp_receive+0x4c4>)
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	4413      	add	r3, r2
 800769e:	b29a      	uxth	r2, r3
 80076a0:	4b1f      	ldr	r3, [pc, #124]	; (8007720 <tcp_receive+0x4c4>)
 80076a2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80076a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a6:	f7fe f94f 	bl	8005948 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <tcp_receive+0x476>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <tcp_receive+0x476>
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <tcp_receive+0x4b8>)
 80076c6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80076ca:	4916      	ldr	r1, [pc, #88]	; (8007724 <tcp_receive+0x4c8>)
 80076cc:	4813      	ldr	r0, [pc, #76]	; (800771c <tcp_receive+0x4c0>)
 80076ce:	f004 fadf 	bl	800bc90 <iprintf>
    while (pcb->unsent != NULL &&
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d036      	beq.n	8007748 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <tcp_receive+0x4cc>)
 80076dc:	681c      	ldr	r4, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fb fd93 	bl	8003212 <lwip_htonl>
 80076ec:	4605      	mov	r5, r0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f2:	891b      	ldrh	r3, [r3, #8]
 80076f4:	461e      	mov	r6, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4618      	mov	r0, r3
 8007702:	f7fb fd78 	bl	80031f6 <lwip_htons>
 8007706:	4603      	mov	r3, r0
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00d      	beq.n	800772c <tcp_receive+0x4d0>
 8007710:	2301      	movs	r3, #1
 8007712:	e00c      	b.n	800772e <tcp_receive+0x4d2>
 8007714:	0800d7a8 	.word	0x0800d7a8
 8007718:	0800d9e8 	.word	0x0800d9e8
 800771c:	0800d7ec 	.word	0x0800d7ec
 8007720:	200000f4 	.word	0x200000f4
 8007724:	0800da10 	.word	0x0800da10
 8007728:	200000f0 	.word	0x200000f0
 800772c:	2300      	movs	r3, #0
 800772e:	4433      	add	r3, r6
 8007730:	442b      	add	r3, r5
 8007732:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007734:	2b00      	cmp	r3, #0
 8007736:	db07      	blt.n	8007748 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007738:	4b8d      	ldr	r3, [pc, #564]	; (8007970 <tcp_receive+0x714>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	f77f af75 	ble.w	8007632 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800774e:	4b89      	ldr	r3, [pc, #548]	; (8007974 <tcp_receive+0x718>)
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	4413      	add	r3, r2
 8007754:	b29a      	uxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007760:	2b00      	cmp	r3, #0
 8007762:	d052      	beq.n	800780a <tcp_receive+0x5ae>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007768:	4b81      	ldr	r3, [pc, #516]	; (8007970 <tcp_receive+0x714>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	da4b      	bge.n	800780a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007772:	4b81      	ldr	r3, [pc, #516]	; (8007978 <tcp_receive+0x71c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777c:	b29b      	uxth	r3, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	b29b      	uxth	r3, r3
 8007782:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007784:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800778c:	10db      	asrs	r3, r3, #3
 800778e:	b21b      	sxth	r3, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	b29b      	uxth	r3, r3
 8007796:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800779e:	b29a      	uxth	r2, r3
 80077a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077a2:	4413      	add	r3, r2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	b21a      	sxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80077ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da03      	bge.n	80077bc <tcp_receive+0x560>
        m = -m;
 80077b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077b6:	425b      	negs	r3, r3
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80077bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80077c4:	109b      	asrs	r3, r3, #2
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077da:	4413      	add	r3, r2
 80077dc:	b29b      	uxth	r3, r3
 80077de:	b21a      	sxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80077ea:	10db      	asrs	r3, r3, #3
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	b21a      	sxth	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800780a:	4b5c      	ldr	r3, [pc, #368]	; (800797c <tcp_receive+0x720>)
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 84f1 	beq.w	80081f6 <tcp_receive+0xf9a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7d1b      	ldrb	r3, [r3, #20]
 8007818:	2b06      	cmp	r3, #6
 800781a:	f200 84ec 	bhi.w	80081f6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007822:	4b57      	ldr	r3, [pc, #348]	; (8007980 <tcp_receive+0x724>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	f2c0 80b8 	blt.w	80079a0 <tcp_receive+0x744>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007834:	4b51      	ldr	r3, [pc, #324]	; (800797c <tcp_receive+0x720>)
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	4b51      	ldr	r3, [pc, #324]	; (8007980 <tcp_receive+0x724>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	440b      	add	r3, r1
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	3301      	adds	r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	f300 80ab 	bgt.w	80079a0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800784a:	4b4e      	ldr	r3, [pc, #312]	; (8007984 <tcp_receive+0x728>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007854:	4b4a      	ldr	r3, [pc, #296]	; (8007980 <tcp_receive+0x724>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800785c:	4b49      	ldr	r3, [pc, #292]	; (8007984 <tcp_receive+0x728>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <tcp_receive+0x616>
 8007864:	4b48      	ldr	r3, [pc, #288]	; (8007988 <tcp_receive+0x72c>)
 8007866:	f240 523c 	movw	r2, #1340	; 0x53c
 800786a:	4948      	ldr	r1, [pc, #288]	; (800798c <tcp_receive+0x730>)
 800786c:	4848      	ldr	r0, [pc, #288]	; (8007990 <tcp_receive+0x734>)
 800786e:	f004 fa0f 	bl	800bc90 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007878:	4293      	cmp	r3, r2
 800787a:	dd06      	ble.n	800788a <tcp_receive+0x62e>
 800787c:	4b42      	ldr	r3, [pc, #264]	; (8007988 <tcp_receive+0x72c>)
 800787e:	f240 523d 	movw	r2, #1341	; 0x53d
 8007882:	4944      	ldr	r1, [pc, #272]	; (8007994 <tcp_receive+0x738>)
 8007884:	4842      	ldr	r0, [pc, #264]	; (8007990 <tcp_receive+0x734>)
 8007886:	f004 fa03 	bl	800bc90 <iprintf>
      if (inseg.p->len < off) {
 800788a:	4b3e      	ldr	r3, [pc, #248]	; (8007984 <tcp_receive+0x728>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	895b      	ldrh	r3, [r3, #10]
 8007890:	461a      	mov	r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	4293      	cmp	r3, r2
 8007896:	dd3e      	ble.n	8007916 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007898:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <tcp_receive+0x728>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	891b      	ldrh	r3, [r3, #8]
 800789e:	461a      	mov	r2, r3
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	4293      	cmp	r3, r2
 80078a4:	dd06      	ble.n	80078b4 <tcp_receive+0x658>
 80078a6:	4b38      	ldr	r3, [pc, #224]	; (8007988 <tcp_receive+0x72c>)
 80078a8:	f240 523f 	movw	r2, #1343	; 0x53f
 80078ac:	493a      	ldr	r1, [pc, #232]	; (8007998 <tcp_receive+0x73c>)
 80078ae:	4838      	ldr	r0, [pc, #224]	; (8007990 <tcp_receive+0x734>)
 80078b0:	f004 f9ee 	bl	800bc90 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80078b4:	4b33      	ldr	r3, [pc, #204]	; (8007984 <tcp_receive+0x728>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	891a      	ldrh	r2, [r3, #8]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	b29b      	uxth	r3, r3
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80078c2:	e00e      	b.n	80078e2 <tcp_receive+0x686>
          off -= p->len;
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	895b      	ldrh	r3, [r3, #10]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	8a3a      	ldrh	r2, [r7, #16]
 80078d4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2200      	movs	r2, #0
 80078da:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	4293      	cmp	r3, r2
 80078ec:	dcea      	bgt.n	80078c4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	425b      	negs	r3, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	69b8      	ldr	r0, [r7, #24]
 80078fc:	f7fc fd7c 	bl	80043f8 <pbuf_header>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01c      	beq.n	8007940 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <tcp_receive+0x72c>)
 8007908:	f240 524c 	movw	r2, #1356	; 0x54c
 800790c:	4923      	ldr	r1, [pc, #140]	; (800799c <tcp_receive+0x740>)
 800790e:	4820      	ldr	r0, [pc, #128]	; (8007990 <tcp_receive+0x734>)
 8007910:	f004 f9be 	bl	800bc90 <iprintf>
 8007914:	e014      	b.n	8007940 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007916:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <tcp_receive+0x728>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	b292      	uxth	r2, r2
 800791e:	4252      	negs	r2, r2
 8007920:	b292      	uxth	r2, r2
 8007922:	b212      	sxth	r2, r2
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f7fc fd66 	bl	80043f8 <pbuf_header>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007932:	4b15      	ldr	r3, [pc, #84]	; (8007988 <tcp_receive+0x72c>)
 8007934:	f240 5251 	movw	r2, #1361	; 0x551
 8007938:	4918      	ldr	r1, [pc, #96]	; (800799c <tcp_receive+0x740>)
 800793a:	4815      	ldr	r0, [pc, #84]	; (8007990 <tcp_receive+0x734>)
 800793c:	f004 f9a8 	bl	800bc90 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007940:	4b10      	ldr	r3, [pc, #64]	; (8007984 <tcp_receive+0x728>)
 8007942:	891a      	ldrh	r2, [r3, #8]
 8007944:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <tcp_receive+0x724>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	b299      	uxth	r1, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	b29b      	uxth	r3, r3
 8007950:	1acb      	subs	r3, r1, r3
 8007952:	b29b      	uxth	r3, r3
 8007954:	4413      	add	r3, r2
 8007956:	b29a      	uxth	r2, r3
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <tcp_receive+0x728>)
 800795a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	4a07      	ldr	r2, [pc, #28]	; (8007980 <tcp_receive+0x724>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <tcp_receive+0x728>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4a05      	ldr	r2, [pc, #20]	; (8007980 <tcp_receive+0x724>)
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800796e:	e025      	b.n	80079bc <tcp_receive+0x760>
 8007970:	200000f0 	.word	0x200000f0
 8007974:	200000f4 	.word	0x200000f4
 8007978:	20006880 	.word	0x20006880
 800797c:	200000f6 	.word	0x200000f6
 8007980:	200000ec 	.word	0x200000ec
 8007984:	200000cc 	.word	0x200000cc
 8007988:	0800d7a8 	.word	0x0800d7a8
 800798c:	0800da30 	.word	0x0800da30
 8007990:	0800d7ec 	.word	0x0800d7ec
 8007994:	0800da40 	.word	0x0800da40
 8007998:	0800da50 	.word	0x0800da50
 800799c:	0800da60 	.word	0x0800da60
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80079a0:	4b87      	ldr	r3, [pc, #540]	; (8007bc0 <tcp_receive+0x964>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da06      	bge.n	80079bc <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7e9b      	ldrb	r3, [r3, #26]
 80079b2:	f043 0302 	orr.w	r3, r3, #2
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80079bc:	4b80      	ldr	r3, [pc, #512]	; (8007bc0 <tcp_receive+0x964>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f2c0 8410 	blt.w	80081ec <tcp_receive+0xf90>
 80079cc:	4b7c      	ldr	r3, [pc, #496]	; (8007bc0 <tcp_receive+0x964>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80079d8:	440b      	add	r3, r1
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f300 8404 	bgt.w	80081ec <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079e8:	4b75      	ldr	r3, [pc, #468]	; (8007bc0 <tcp_receive+0x964>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	f040 8287 	bne.w	8007f00 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80079f2:	4b74      	ldr	r3, [pc, #464]	; (8007bc4 <tcp_receive+0x968>)
 80079f4:	891c      	ldrh	r4, [r3, #8]
 80079f6:	4b73      	ldr	r3, [pc, #460]	; (8007bc4 <tcp_receive+0x968>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	899b      	ldrh	r3, [r3, #12]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fb fbf9 	bl	80031f6 <lwip_htons>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <tcp_receive+0x7b6>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <tcp_receive+0x7b8>
 8007a12:	2300      	movs	r3, #0
 8007a14:	4423      	add	r3, r4
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	4b6b      	ldr	r3, [pc, #428]	; (8007bc8 <tcp_receive+0x96c>)
 8007a1a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a20:	4b69      	ldr	r3, [pc, #420]	; (8007bc8 <tcp_receive+0x96c>)
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d26e      	bcs.n	8007b06 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007a28:	4b66      	ldr	r3, [pc, #408]	; (8007bc4 <tcp_receive+0x968>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	899b      	ldrh	r3, [r3, #12]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fb fbe0 	bl	80031f6 <lwip_htons>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007a40:	4b60      	ldr	r3, [pc, #384]	; (8007bc4 <tcp_receive+0x968>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	899b      	ldrh	r3, [r3, #12]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a4c:	b29c      	uxth	r4, r3
 8007a4e:	4b5d      	ldr	r3, [pc, #372]	; (8007bc4 <tcp_receive+0x968>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	899b      	ldrh	r3, [r3, #12]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fb fbcd 	bl	80031f6 <lwip_htons>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fb fbc6 	bl	80031f6 <lwip_htons>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b55      	ldr	r3, [pc, #340]	; (8007bc4 <tcp_receive+0x968>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4322      	orrs	r2, r4
 8007a74:	b292      	uxth	r2, r2
 8007a76:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a7c:	4b51      	ldr	r3, [pc, #324]	; (8007bc4 <tcp_receive+0x968>)
 8007a7e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007a80:	4b50      	ldr	r3, [pc, #320]	; (8007bc4 <tcp_receive+0x968>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	899b      	ldrh	r3, [r3, #12]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fb fbb4 	bl	80031f6 <lwip_htons>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <tcp_receive+0x848>
            inseg.len -= 1;
 8007a98:	4b4a      	ldr	r3, [pc, #296]	; (8007bc4 <tcp_receive+0x968>)
 8007a9a:	891b      	ldrh	r3, [r3, #8]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b48      	ldr	r3, [pc, #288]	; (8007bc4 <tcp_receive+0x968>)
 8007aa2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007aa4:	4b47      	ldr	r3, [pc, #284]	; (8007bc4 <tcp_receive+0x968>)
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b46      	ldr	r3, [pc, #280]	; (8007bc4 <tcp_receive+0x968>)
 8007aaa:	891b      	ldrh	r3, [r3, #8]
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fc fb52 	bl	8004158 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007ab4:	4b43      	ldr	r3, [pc, #268]	; (8007bc4 <tcp_receive+0x968>)
 8007ab6:	891c      	ldrh	r4, [r3, #8]
 8007ab8:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <tcp_receive+0x968>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	899b      	ldrh	r3, [r3, #12]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fb fb98 	bl	80031f6 <lwip_htons>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <tcp_receive+0x878>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <tcp_receive+0x87a>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4423      	add	r3, r4
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <tcp_receive+0x96c>)
 8007adc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007ade:	4b3a      	ldr	r3, [pc, #232]	; (8007bc8 <tcp_receive+0x96c>)
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <tcp_receive+0x964>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007af2:	440b      	add	r3, r1
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d006      	beq.n	8007b06 <tcp_receive+0x8aa>
 8007af8:	4b34      	ldr	r3, [pc, #208]	; (8007bcc <tcp_receive+0x970>)
 8007afa:	f240 527f 	movw	r2, #1407	; 0x57f
 8007afe:	4934      	ldr	r1, [pc, #208]	; (8007bd0 <tcp_receive+0x974>)
 8007b00:	4834      	ldr	r0, [pc, #208]	; (8007bd4 <tcp_receive+0x978>)
 8007b02:	f004 f8c5 	bl	800bc90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 80e1 	beq.w	8007cd2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <tcp_receive+0x968>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	899b      	ldrh	r3, [r3, #12]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fb fb6c 	bl	80031f6 <lwip_htons>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d010      	beq.n	8007b4a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007b28:	e00a      	b.n	8007b40 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8007b3a:	68b8      	ldr	r0, [r7, #8]
 8007b3c:	f7fd ff04 	bl	8005948 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <tcp_receive+0x8ce>
 8007b48:	e0c3      	b.n	8007cd2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007b50:	e04f      	b.n	8007bf2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	899b      	ldrh	r3, [r3, #12]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fb fb4b 	bl	80031f6 <lwip_htons>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03b      	beq.n	8007be2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007b6a:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <tcp_receive+0x968>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	899b      	ldrh	r3, [r3, #12]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fb fb3f 	bl	80031f6 <lwip_htons>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d12f      	bne.n	8007be2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <tcp_receive+0x968>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	899b      	ldrh	r3, [r3, #12]
 8007b88:	b29c      	uxth	r4, r3
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	f7fb fb33 	bl	80031f6 <lwip_htons>
 8007b90:	4603      	mov	r3, r0
 8007b92:	461a      	mov	r2, r3
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <tcp_receive+0x968>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4322      	orrs	r2, r4
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <tcp_receive+0x968>)
 8007ba0:	891c      	ldrh	r4, [r3, #8]
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <tcp_receive+0x968>)
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	899b      	ldrh	r3, [r3, #12]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fb fb23 	bl	80031f6 <lwip_htons>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00e      	beq.n	8007bd8 <tcp_receive+0x97c>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e00d      	b.n	8007bda <tcp_receive+0x97e>
 8007bbe:	bf00      	nop
 8007bc0:	200000ec 	.word	0x200000ec
 8007bc4:	200000cc 	.word	0x200000cc
 8007bc8:	200000f6 	.word	0x200000f6
 8007bcc:	0800d7a8 	.word	0x0800d7a8
 8007bd0:	0800da74 	.word	0x0800da74
 8007bd4:	0800d7ec 	.word	0x0800d7ec
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4423      	add	r3, r4
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	4b95      	ldr	r3, [pc, #596]	; (8007e34 <tcp_receive+0xbd8>)
 8007be0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f7fd feab 	bl	8005948 <tcp_seg_free>
            while (next &&
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007bf8:	4b8e      	ldr	r3, [pc, #568]	; (8007e34 <tcp_receive+0xbd8>)
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b8e      	ldr	r3, [pc, #568]	; (8007e38 <tcp_receive+0xbdc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	441a      	add	r2, r3
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c0c:	8909      	ldrh	r1, [r1, #8]
 8007c0e:	440b      	add	r3, r1
 8007c10:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	da9d      	bge.n	8007b52 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d057      	beq.n	8007ccc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8007c1c:	4b85      	ldr	r3, [pc, #532]	; (8007e34 <tcp_receive+0xbd8>)
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	4b85      	ldr	r3, [pc, #532]	; (8007e38 <tcp_receive+0xbdc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	441a      	add	r2, r3
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dd4b      	ble.n	8007ccc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	4b7e      	ldr	r3, [pc, #504]	; (8007e38 <tcp_receive+0xbdc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	4b7d      	ldr	r3, [pc, #500]	; (8007e3c <tcp_receive+0xbe0>)
 8007c48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007c4a:	4b7c      	ldr	r3, [pc, #496]	; (8007e3c <tcp_receive+0xbe0>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	899b      	ldrh	r3, [r3, #12]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fb facf 	bl	80031f6 <lwip_htons>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <tcp_receive+0xa12>
                inseg.len -= 1;
 8007c62:	4b76      	ldr	r3, [pc, #472]	; (8007e3c <tcp_receive+0xbe0>)
 8007c64:	891b      	ldrh	r3, [r3, #8]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	4b74      	ldr	r3, [pc, #464]	; (8007e3c <tcp_receive+0xbe0>)
 8007c6c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007c6e:	4b73      	ldr	r3, [pc, #460]	; (8007e3c <tcp_receive+0xbe0>)
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	4b72      	ldr	r3, [pc, #456]	; (8007e3c <tcp_receive+0xbe0>)
 8007c74:	891b      	ldrh	r3, [r3, #8]
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7fc fa6d 	bl	8004158 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007c7e:	4b6f      	ldr	r3, [pc, #444]	; (8007e3c <tcp_receive+0xbe0>)
 8007c80:	891c      	ldrh	r4, [r3, #8]
 8007c82:	4b6e      	ldr	r3, [pc, #440]	; (8007e3c <tcp_receive+0xbe0>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	899b      	ldrh	r3, [r3, #12]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fb fab3 	bl	80031f6 <lwip_htons>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <tcp_receive+0xa42>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <tcp_receive+0xa44>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4423      	add	r3, r4
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	4b63      	ldr	r3, [pc, #396]	; (8007e34 <tcp_receive+0xbd8>)
 8007ca6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007ca8:	4b62      	ldr	r3, [pc, #392]	; (8007e34 <tcp_receive+0xbd8>)
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b62      	ldr	r3, [pc, #392]	; (8007e38 <tcp_receive+0xbdc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	441a      	add	r2, r3
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d006      	beq.n	8007ccc <tcp_receive+0xa70>
 8007cbe:	4b60      	ldr	r3, [pc, #384]	; (8007e40 <tcp_receive+0xbe4>)
 8007cc0:	f240 52af 	movw	r2, #1455	; 0x5af
 8007cc4:	495f      	ldr	r1, [pc, #380]	; (8007e44 <tcp_receive+0xbe8>)
 8007cc6:	4860      	ldr	r0, [pc, #384]	; (8007e48 <tcp_receive+0xbec>)
 8007cc8:	f003 ffe2 	bl	800bc90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007cd2:	4b58      	ldr	r3, [pc, #352]	; (8007e34 <tcp_receive+0xbd8>)
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4b57      	ldr	r3, [pc, #348]	; (8007e38 <tcp_receive+0xbdc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	441a      	add	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007ce6:	4b53      	ldr	r3, [pc, #332]	; (8007e34 <tcp_receive+0xbd8>)
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d206      	bcs.n	8007cfc <tcp_receive+0xaa0>
 8007cee:	4b54      	ldr	r3, [pc, #336]	; (8007e40 <tcp_receive+0xbe4>)
 8007cf0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007cf4:	4955      	ldr	r1, [pc, #340]	; (8007e4c <tcp_receive+0xbf0>)
 8007cf6:	4854      	ldr	r0, [pc, #336]	; (8007e48 <tcp_receive+0xbec>)
 8007cf8:	f003 ffca 	bl	800bc90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007d00:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <tcp_receive+0xbd8>)
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fd f897 	bl	8004e40 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007d12:	4b4a      	ldr	r3, [pc, #296]	; (8007e3c <tcp_receive+0xbe0>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	891b      	ldrh	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d006      	beq.n	8007d2a <tcp_receive+0xace>
          recv_data = inseg.p;
 8007d1c:	4b47      	ldr	r3, [pc, #284]	; (8007e3c <tcp_receive+0xbe0>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a4b      	ldr	r2, [pc, #300]	; (8007e50 <tcp_receive+0xbf4>)
 8007d22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007d24:	4b45      	ldr	r3, [pc, #276]	; (8007e3c <tcp_receive+0xbe0>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007d2a:	4b44      	ldr	r3, [pc, #272]	; (8007e3c <tcp_receive+0xbe0>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	899b      	ldrh	r3, [r3, #12]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fb fa5f 	bl	80031f6 <lwip_htons>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80b4 	beq.w	8007eac <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007d44:	4b43      	ldr	r3, [pc, #268]	; (8007e54 <tcp_receive+0xbf8>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f043 0320 	orr.w	r3, r3, #32
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <tcp_receive+0xbf8>)
 8007d50:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007d52:	e0ab      	b.n	8007eac <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d58:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4a35      	ldr	r2, [pc, #212]	; (8007e38 <tcp_receive+0xbdc>)
 8007d64:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	891b      	ldrh	r3, [r3, #8]
 8007d6a:	461c      	mov	r4, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	899b      	ldrh	r3, [r3, #12]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fb fa3e 	bl	80031f6 <lwip_htons>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <tcp_receive+0xb2c>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <tcp_receive+0xb2e>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	191a      	adds	r2, r3, r4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	441a      	add	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9a:	461c      	mov	r4, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	891b      	ldrh	r3, [r3, #8]
 8007da0:	461d      	mov	r5, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	899b      	ldrh	r3, [r3, #12]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fb fa23 	bl	80031f6 <lwip_htons>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <tcp_receive+0xb62>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <tcp_receive+0xb64>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	442b      	add	r3, r5
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d206      	bcs.n	8007dd4 <tcp_receive+0xb78>
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <tcp_receive+0xbe4>)
 8007dc8:	f240 52de 	movw	r2, #1502	; 0x5de
 8007dcc:	4922      	ldr	r1, [pc, #136]	; (8007e58 <tcp_receive+0xbfc>)
 8007dce:	481e      	ldr	r0, [pc, #120]	; (8007e48 <tcp_receive+0xbec>)
 8007dd0:	f003 ff5e 	bl	800bc90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	891b      	ldrh	r3, [r3, #8]
 8007dd8:	461c      	mov	r4, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	899b      	ldrh	r3, [r3, #12]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fb fa07 	bl	80031f6 <lwip_htons>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <tcp_receive+0xb9a>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <tcp_receive+0xb9c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	1919      	adds	r1, r3, r4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007dfe:	b28b      	uxth	r3, r1
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7fd f819 	bl	8004e40 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	891b      	ldrh	r3, [r3, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d028      	beq.n	8007e6a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <tcp_receive+0xbf4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01d      	beq.n	8007e5c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <tcp_receive+0xbf4>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f7fc fbd6 	bl	80045dc <pbuf_cat>
 8007e30:	e018      	b.n	8007e64 <tcp_receive+0xc08>
 8007e32:	bf00      	nop
 8007e34:	200000f6 	.word	0x200000f6
 8007e38:	200000ec 	.word	0x200000ec
 8007e3c:	200000cc 	.word	0x200000cc
 8007e40:	0800d7a8 	.word	0x0800d7a8
 8007e44:	0800daac 	.word	0x0800daac
 8007e48:	0800d7ec 	.word	0x0800d7ec
 8007e4c:	0800dae8 	.word	0x0800dae8
 8007e50:	200000fc 	.word	0x200000fc
 8007e54:	200000f9 	.word	0x200000f9
 8007e58:	0800db08 	.word	0x0800db08
            } else {
              recv_data = cseg->p;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a71      	ldr	r2, [pc, #452]	; (8008028 <tcp_receive+0xdcc>)
 8007e62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	899b      	ldrh	r3, [r3, #12]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fb f9bf 	bl	80031f6 <lwip_htons>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007e82:	4b6a      	ldr	r3, [pc, #424]	; (800802c <tcp_receive+0xdd0>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f043 0320 	orr.w	r3, r3, #32
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b67      	ldr	r3, [pc, #412]	; (800802c <tcp_receive+0xdd0>)
 8007e8e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7d1b      	ldrb	r3, [r3, #20]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d102      	bne.n	8007e9e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2207      	movs	r2, #7
 8007e9c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7fd fd4e 	bl	8005948 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f43f af47 	beq.w	8007d54 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7e9b      	ldrb	r3, [r3, #26]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <tcp_receive+0xc94>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7e9b      	ldrb	r3, [r3, #26]
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	769a      	strb	r2, [r3, #26]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7e9b      	ldrb	r3, [r3, #26]
 8007ee4:	f043 0302 	orr.w	r3, r3, #2
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007eee:	e181      	b.n	80081f4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7e9b      	ldrb	r3, [r3, #26]
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007efe:	e179      	b.n	80081f4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc93 	bl	800882c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007f0e:	4848      	ldr	r0, [pc, #288]	; (8008030 <tcp_receive+0xdd4>)
 8007f10:	f7fd fd32 	bl	8005978 <tcp_seg_copy>
 8007f14:	4602      	mov	r2, r0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8007f1a:	e16b      	b.n	80081f4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f26:	e150      	b.n	80081ca <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	4b41      	ldr	r3, [pc, #260]	; (8008034 <tcp_receive+0xdd8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d11d      	bne.n	8007f72 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007f36:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <tcp_receive+0xdd4>)
 8007f38:	891a      	ldrh	r2, [r3, #8]
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	891b      	ldrh	r3, [r3, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	f240 8148 	bls.w	80081d4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007f44:	483a      	ldr	r0, [pc, #232]	; (8008030 <tcp_receive+0xdd4>)
 8007f46:	f7fd fd17 	bl	8005978 <tcp_seg_copy>
 8007f4a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8142 	beq.w	80081d8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <tcp_receive+0xd06>
                    prev->next = cseg;
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e002      	b.n	8007f68 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007f68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff f900 	bl	8007170 <tcp_oos_insert_segment>
                }
                break;
 8007f70:	e132      	b.n	80081d8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d117      	bne.n	8007fa8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <tcp_receive+0xdd8>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da57      	bge.n	8008038 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8007f88:	4829      	ldr	r0, [pc, #164]	; (8008030 <tcp_receive+0xdd4>)
 8007f8a:	f7fd fcf5 	bl	8005978 <tcp_seg_copy>
 8007f8e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8122 	beq.w	80081dc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8007f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff f8e5 	bl	8007170 <tcp_oos_insert_segment>
                  }
                  break;
 8007fa6:	e119      	b.n	80081dc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007fa8:	4b22      	ldr	r3, [pc, #136]	; (8008034 <tcp_receive+0xdd8>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	db3e      	blt.n	8008038 <tcp_receive+0xddc>
 8007fba:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <tcp_receive+0xdd8>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc35      	bgt.n	8008038 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8007fcc:	4818      	ldr	r0, [pc, #96]	; (8008030 <tcp_receive+0xdd4>)
 8007fce:	f7fd fcd3 	bl	8005978 <tcp_seg_copy>
 8007fd2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8102 	beq.w	80081e0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe4:	8912      	ldrh	r2, [r2, #8]
 8007fe6:	441a      	add	r2, r3
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <tcp_receive+0xdd8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd12      	ble.n	8008018 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007ff2:	4b10      	ldr	r3, [pc, #64]	; (8008034 <tcp_receive+0xdd8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	b29a      	uxth	r2, r3
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	891b      	ldrh	r3, [r3, #8]
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fc f8a0 	bl	8004158 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800801e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff f8a5 	bl	8007170 <tcp_oos_insert_segment>
                  }
                  break;
 8008026:	e0db      	b.n	80081e0 <tcp_receive+0xf84>
 8008028:	200000fc 	.word	0x200000fc
 800802c:	200000f9 	.word	0x200000f9
 8008030:	200000cc 	.word	0x200000cc
 8008034:	200000ec 	.word	0x200000ec
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 80bf 	bne.w	80081c0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008042:	4b7c      	ldr	r3, [pc, #496]	; (8008234 <tcp_receive+0xfd8>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800804e:	2b00      	cmp	r3, #0
 8008050:	f340 80b6 	ble.w	80081c0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	899b      	ldrh	r3, [r3, #12]
 800805a:	b29b      	uxth	r3, r3
 800805c:	4618      	mov	r0, r3
 800805e:	f7fb f8ca 	bl	80031f6 <lwip_htons>
 8008062:	4603      	mov	r3, r0
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	f040 80bb 	bne.w	80081e4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800806e:	4872      	ldr	r0, [pc, #456]	; (8008238 <tcp_receive+0xfdc>)
 8008070:	f7fd fc82 	bl	8005978 <tcp_seg_copy>
 8008074:	4602      	mov	r2, r0
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80b2 	beq.w	80081e8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808c:	8912      	ldrh	r2, [r2, #8]
 800808e:	441a      	add	r2, r3
 8008090:	4b68      	ldr	r3, [pc, #416]	; (8008234 <tcp_receive+0xfd8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd12      	ble.n	80080c0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800809a:	4b66      	ldr	r3, [pc, #408]	; (8008234 <tcp_receive+0xfd8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	891b      	ldrh	r3, [r3, #8]
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f7fc f84c 	bl	8004158 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80080c0:	4b5e      	ldr	r3, [pc, #376]	; (800823c <tcp_receive+0xfe0>)
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4b5b      	ldr	r3, [pc, #364]	; (8008234 <tcp_receive+0xfd8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	441a      	add	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80080d4:	440b      	add	r3, r1
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f340 8085 	ble.w	80081e8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	899b      	ldrh	r3, [r3, #12]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fb f884 	bl	80031f6 <lwip_htons>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01e      	beq.n	8008136 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	899b      	ldrh	r3, [r3, #12]
 8008100:	b29b      	uxth	r3, r3
 8008102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008106:	b29c      	uxth	r4, r3
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	899b      	ldrh	r3, [r3, #12]
 8008110:	b29b      	uxth	r3, r3
 8008112:	4618      	mov	r0, r3
 8008114:	f7fb f86f 	bl	80031f6 <lwip_htons>
 8008118:	4603      	mov	r3, r0
 800811a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	4618      	mov	r0, r3
 8008122:	f7fb f868 	bl	80031f6 <lwip_htons>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	4322      	orrs	r2, r4
 8008132:	b292      	uxth	r2, r2
 8008134:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008140:	4413      	add	r3, r2
 8008142:	b299      	uxth	r1, r3
 8008144:	4b3b      	ldr	r3, [pc, #236]	; (8008234 <tcp_receive+0xfd8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	b29a      	uxth	r2, r3
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	1a8a      	subs	r2, r1, r2
 8008150:	b292      	uxth	r2, r2
 8008152:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	891b      	ldrh	r3, [r3, #8]
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fb fff8 	bl	8004158 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	891c      	ldrh	r4, [r3, #8]
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	899b      	ldrh	r3, [r3, #12]
 8008176:	b29b      	uxth	r3, r3
 8008178:	4618      	mov	r0, r3
 800817a:	f7fb f83c 	bl	80031f6 <lwip_htons>
 800817e:	4603      	mov	r3, r0
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <tcp_receive+0xf30>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <tcp_receive+0xf32>
 800818c:	2300      	movs	r3, #0
 800818e:	4423      	add	r3, r4
 8008190:	b29a      	uxth	r2, r3
 8008192:	4b2a      	ldr	r3, [pc, #168]	; (800823c <tcp_receive+0xfe0>)
 8008194:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008196:	4b29      	ldr	r3, [pc, #164]	; (800823c <tcp_receive+0xfe0>)
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	4b25      	ldr	r3, [pc, #148]	; (8008234 <tcp_receive+0xfd8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	441a      	add	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081aa:	440b      	add	r3, r1
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d01b      	beq.n	80081e8 <tcp_receive+0xf8c>
 80081b0:	4b23      	ldr	r3, [pc, #140]	; (8008240 <tcp_receive+0xfe4>)
 80081b2:	f240 627b 	movw	r2, #1659	; 0x67b
 80081b6:	4923      	ldr	r1, [pc, #140]	; (8008244 <tcp_receive+0xfe8>)
 80081b8:	4823      	ldr	r0, [pc, #140]	; (8008248 <tcp_receive+0xfec>)
 80081ba:	f003 fd69 	bl	800bc90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80081be:	e013      	b.n	80081e8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f aeab 	bne.w	8007f28 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80081d2:	e00f      	b.n	80081f4 <tcp_receive+0xf98>
                break;
 80081d4:	bf00      	nop
 80081d6:	e00d      	b.n	80081f4 <tcp_receive+0xf98>
                break;
 80081d8:	bf00      	nop
 80081da:	e00b      	b.n	80081f4 <tcp_receive+0xf98>
                  break;
 80081dc:	bf00      	nop
 80081de:	e009      	b.n	80081f4 <tcp_receive+0xf98>
                  break;
 80081e0:	bf00      	nop
 80081e2:	e007      	b.n	80081f4 <tcp_receive+0xf98>
                  break;
 80081e4:	bf00      	nop
 80081e6:	e005      	b.n	80081f4 <tcp_receive+0xf98>
                break;
 80081e8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80081ea:	e003      	b.n	80081f4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb1d 	bl	800882c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80081f2:	e01a      	b.n	800822a <tcp_receive+0xfce>
 80081f4:	e019      	b.n	800822a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <tcp_receive+0xfd8>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	db0a      	blt.n	800821a <tcp_receive+0xfbe>
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <tcp_receive+0xfd8>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008210:	440b      	add	r3, r1
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	3301      	adds	r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd07      	ble.n	800822a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7e9b      	ldrb	r3, [r3, #26]
 800821e:	f043 0302 	orr.w	r3, r3, #2
 8008222:	b2da      	uxtb	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008228:	e7ff      	b.n	800822a <tcp_receive+0xfce>
 800822a:	bf00      	nop
 800822c:	3734      	adds	r7, #52	; 0x34
 800822e:	46bd      	mov	sp, r7
 8008230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008232:	bf00      	nop
 8008234:	200000ec 	.word	0x200000ec
 8008238:	200000cc 	.word	0x200000cc
 800823c:	200000f6 	.word	0x200000f6
 8008240:	0800d7a8 	.word	0x0800d7a8
 8008244:	0800da74 	.word	0x0800da74
 8008248:	0800d7ec 	.word	0x0800d7ec

0800824c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <tcp_getoptbyte+0x68>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <tcp_getoptbyte+0x1a>
 800825a:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <tcp_getoptbyte+0x6c>)
 800825c:	881a      	ldrh	r2, [r3, #0]
 800825e:	4b17      	ldr	r3, [pc, #92]	; (80082bc <tcp_getoptbyte+0x70>)
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d20e      	bcs.n	8008284 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008266:	4b16      	ldr	r3, [pc, #88]	; (80082c0 <tcp_getoptbyte+0x74>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3314      	adds	r3, #20
 800826c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <tcp_getoptbyte+0x6c>)
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	b291      	uxth	r1, r2
 8008276:	4a10      	ldr	r2, [pc, #64]	; (80082b8 <tcp_getoptbyte+0x6c>)
 8008278:	8011      	strh	r1, [r2, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	e010      	b.n	80082a6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <tcp_getoptbyte+0x6c>)
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	b291      	uxth	r1, r2
 800828c:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <tcp_getoptbyte+0x6c>)
 800828e:	8011      	strh	r1, [r2, #0]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <tcp_getoptbyte+0x70>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <tcp_getoptbyte+0x68>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	4413      	add	r3, r2
 80082a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200000e4 	.word	0x200000e4
 80082b8:	200000e8 	.word	0x200000e8
 80082bc:	200000e2 	.word	0x200000e2
 80082c0:	200000dc 	.word	0x200000dc

080082c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80082cc:	4b2d      	ldr	r3, [pc, #180]	; (8008384 <tcp_parseopt+0xc0>)
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d053      	beq.n	800837c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <tcp_parseopt+0xc4>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	e043      	b.n	8008364 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80082dc:	f7ff ffb6 	bl	800824c <tcp_getoptbyte>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d03c      	beq.n	8008364 <tcp_parseopt+0xa0>
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d002      	beq.n	80082f4 <tcp_parseopt+0x30>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d03f      	beq.n	8008372 <tcp_parseopt+0xae>
 80082f2:	e026      	b.n	8008342 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80082f4:	f7ff ffaa 	bl	800824c <tcp_getoptbyte>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d13b      	bne.n	8008376 <tcp_parseopt+0xb2>
 80082fe:	4b22      	ldr	r3, [pc, #136]	; (8008388 <tcp_parseopt+0xc4>)
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	3302      	adds	r3, #2
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <tcp_parseopt+0xc0>)
 8008306:	8812      	ldrh	r2, [r2, #0]
 8008308:	4293      	cmp	r3, r2
 800830a:	dc34      	bgt.n	8008376 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800830c:	f7ff ff9e 	bl	800824c <tcp_getoptbyte>
 8008310:	4603      	mov	r3, r0
 8008312:	b29b      	uxth	r3, r3
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008318:	f7ff ff98 	bl	800824c <tcp_getoptbyte>
 800831c:	4603      	mov	r3, r0
 800831e:	b29a      	uxth	r2, r3
 8008320:	89bb      	ldrh	r3, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008326:	89bb      	ldrh	r3, [r7, #12]
 8008328:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800832c:	d804      	bhi.n	8008338 <tcp_parseopt+0x74>
 800832e:	89bb      	ldrh	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <tcp_parseopt+0x74>
 8008334:	89ba      	ldrh	r2, [r7, #12]
 8008336:	e001      	b.n	800833c <tcp_parseopt+0x78>
 8008338:	f44f 7206 	mov.w	r2, #536	; 0x218
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008340:	e010      	b.n	8008364 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008342:	f7ff ff83 	bl	800824c <tcp_getoptbyte>
 8008346:	4603      	mov	r3, r0
 8008348:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d914      	bls.n	800837a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	b29a      	uxth	r2, r3
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <tcp_parseopt+0xc4>)
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	4413      	add	r3, r2
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b02      	subs	r3, #2
 800835e:	b29a      	uxth	r2, r3
 8008360:	4b09      	ldr	r3, [pc, #36]	; (8008388 <tcp_parseopt+0xc4>)
 8008362:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008364:	4b08      	ldr	r3, [pc, #32]	; (8008388 <tcp_parseopt+0xc4>)
 8008366:	881a      	ldrh	r2, [r3, #0]
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <tcp_parseopt+0xc0>)
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d3b5      	bcc.n	80082dc <tcp_parseopt+0x18>
 8008370:	e004      	b.n	800837c <tcp_parseopt+0xb8>
        return;
 8008372:	bf00      	nop
 8008374:	e002      	b.n	800837c <tcp_parseopt+0xb8>
          return;
 8008376:	bf00      	nop
 8008378:	e000      	b.n	800837c <tcp_parseopt+0xb8>
          return;
 800837a:	bf00      	nop
      }
    }
  }
}
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	200000e0 	.word	0x200000e0
 8008388:	200000e8 	.word	0x200000e8

0800838c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <tcp_trigger_input_pcb_close+0x1c>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f043 0310 	orr.w	r3, r3, #16
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <tcp_trigger_input_pcb_close+0x1c>)
 800839c:	701a      	strb	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	200000f9 	.word	0x200000f9

080083ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	817b      	strh	r3, [r7, #10]
 80083ba:	4613      	mov	r3, r2
 80083bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80083be:	897a      	ldrh	r2, [r7, #10]
 80083c0:	893b      	ldrh	r3, [r7, #8]
 80083c2:	4413      	add	r3, r2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3314      	adds	r3, #20
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2200      	movs	r2, #0
 80083cc:	4619      	mov	r1, r3
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7fb fcc4 	bl	8003d5c <pbuf_alloc>
 80083d4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d057      	beq.n	800848c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	895b      	ldrh	r3, [r3, #10]
 80083e0:	461a      	mov	r2, r3
 80083e2:	897b      	ldrh	r3, [r7, #10]
 80083e4:	3314      	adds	r3, #20
 80083e6:	429a      	cmp	r2, r3
 80083e8:	da05      	bge.n	80083f6 <tcp_output_alloc_header+0x4a>
 80083ea:	4b2b      	ldr	r3, [pc, #172]	; (8008498 <tcp_output_alloc_header+0xec>)
 80083ec:	2273      	movs	r2, #115	; 0x73
 80083ee:	492b      	ldr	r1, [pc, #172]	; (800849c <tcp_output_alloc_header+0xf0>)
 80083f0:	482b      	ldr	r0, [pc, #172]	; (80084a0 <tcp_output_alloc_header+0xf4>)
 80083f2:	f003 fc4d 	bl	800bc90 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8adb      	ldrh	r3, [r3, #22]
 8008400:	4618      	mov	r0, r3
 8008402:	f7fa fef8 	bl	80031f6 <lwip_htons>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8b1b      	ldrh	r3, [r3, #24]
 8008412:	4618      	mov	r0, r3
 8008414:	f7fa feef 	bl	80031f6 <lwip_htons>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	4618      	mov	r0, r3
 800842c:	f7fa fef1 	bl	8003212 <lwip_htonl>
 8008430:	4602      	mov	r2, r0
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008436:	897b      	ldrh	r3, [r7, #10]
 8008438:	089b      	lsrs	r3, r3, #2
 800843a:	b29b      	uxth	r3, r3
 800843c:	3305      	adds	r3, #5
 800843e:	b29b      	uxth	r3, r3
 8008440:	031b      	lsls	r3, r3, #12
 8008442:	b29b      	uxth	r3, r3
 8008444:	f043 0310 	orr.w	r3, r3, #16
 8008448:	b29b      	uxth	r3, r3
 800844a:	4618      	mov	r0, r3
 800844c:	f7fa fed3 	bl	80031f6 <lwip_htons>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845c:	4618      	mov	r0, r3
 800845e:	f7fa feca 	bl	80031f6 <lwip_htons>
 8008462:	4603      	mov	r3, r0
 8008464:	461a      	mov	r2, r3
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2200      	movs	r2, #0
 800846e:	741a      	strb	r2, [r3, #16]
 8008470:	2200      	movs	r2, #0
 8008472:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2200      	movs	r2, #0
 8008478:	749a      	strb	r2, [r3, #18]
 800847a:	2200      	movs	r2, #0
 800847c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800848c:	697b      	ldr	r3, [r7, #20]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	0800db30 	.word	0x0800db30
 800849c:	0800db64 	.word	0x0800db64
 80084a0:	0800db94 	.word	0x0800db94

080084a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d02d      	beq.n	8008510 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	e002      	b.n	80084c2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f8      	bne.n	80084bc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	899b      	ldrh	r3, [r3, #12]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fa fe8f 	bl	80031f6 <lwip_htons>
 80084d8:	4603      	mov	r3, r0
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d116      	bne.n	8008510 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	899b      	ldrh	r3, [r3, #12]
 80084e8:	b29c      	uxth	r4, r3
 80084ea:	2001      	movs	r0, #1
 80084ec:	f7fa fe83 	bl	80031f6 <lwip_htons>
 80084f0:	4603      	mov	r3, r0
 80084f2:	461a      	mov	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4322      	orrs	r2, r4
 80084fa:	b292      	uxth	r2, r2
 80084fc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7e9b      	ldrb	r3, [r3, #26]
 8008502:	f043 0320 	orr.w	r3, r3, #32
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	e004      	b.n	800851a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008510:	2101      	movs	r1, #1
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f88e 	bl	8008634 <tcp_enqueue_flags>
 8008518:	4603      	mov	r3, r0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	bd90      	pop	{r4, r7, pc}
	...

08008524 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008542:	2003      	movs	r0, #3
 8008544:	f7fb fa06 	bl	8003954 <memp_malloc>
 8008548:	6138      	str	r0, [r7, #16]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f7fb ff75 	bl	8004440 <pbuf_free>
    return NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	e061      	b.n	800861e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008560:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	891a      	ldrh	r2, [r3, #8]
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	b29b      	uxth	r3, r3
 8008576:	429a      	cmp	r2, r3
 8008578:	d205      	bcs.n	8008586 <tcp_create_segment+0x62>
 800857a:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <tcp_create_segment+0x104>)
 800857c:	22ba      	movs	r2, #186	; 0xba
 800857e:	492b      	ldr	r1, [pc, #172]	; (800862c <tcp_create_segment+0x108>)
 8008580:	482b      	ldr	r0, [pc, #172]	; (8008630 <tcp_create_segment+0x10c>)
 8008582:	f003 fb85 	bl	800bc90 <iprintf>
  seg->len = p->tot_len - optlen;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	891a      	ldrh	r2, [r3, #8]
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	b29b      	uxth	r3, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	b29a      	uxth	r2, r3
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008596:	2114      	movs	r1, #20
 8008598:	68b8      	ldr	r0, [r7, #8]
 800859a:	f7fb ff2d 	bl	80043f8 <pbuf_header>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80085a4:	6938      	ldr	r0, [r7, #16]
 80085a6:	f7fd f9cf 	bl	8005948 <tcp_seg_free>
    return NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e037      	b.n	800861e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8ada      	ldrh	r2, [r3, #22]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	68dc      	ldr	r4, [r3, #12]
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fa fe18 	bl	80031f6 <lwip_htons>
 80085c6:	4603      	mov	r3, r0
 80085c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8b1a      	ldrh	r2, [r3, #24]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68dc      	ldr	r4, [r3, #12]
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fa fe0f 	bl	80031f6 <lwip_htons>
 80085d8:	4603      	mov	r3, r0
 80085da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	68dc      	ldr	r4, [r3, #12]
 80085e0:	6838      	ldr	r0, [r7, #0]
 80085e2:	f7fa fe16 	bl	8003212 <lwip_htonl>
 80085e6:	4603      	mov	r3, r0
 80085e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	089b      	lsrs	r3, r3, #2
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3305      	adds	r3, #5
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	031b      	lsls	r3, r3, #12
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4313      	orrs	r3, r2
 8008600:	b29a      	uxth	r2, r3
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	68dc      	ldr	r4, [r3, #12]
 8008606:	4610      	mov	r0, r2
 8008608:	f7fa fdf5 	bl	80031f6 <lwip_htons>
 800860c:	4603      	mov	r3, r0
 800860e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	749a      	strb	r2, [r3, #18]
 8008618:	2200      	movs	r2, #0
 800861a:	74da      	strb	r2, [r3, #19]
  return seg;
 800861c:	693b      	ldr	r3, [r7, #16]
}
 800861e:	4618      	mov	r0, r3
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd90      	pop	{r4, r7, pc}
 8008626:	bf00      	nop
 8008628:	0800db30 	.word	0x0800db30
 800862c:	0800dbbc 	.word	0x0800dbbc
 8008630:	0800db94 	.word	0x0800db94

08008634 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	; 0x28
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <tcp_enqueue_flags+0x2c>
 8008652:	4b6f      	ldr	r3, [pc, #444]	; (8008810 <tcp_enqueue_flags+0x1dc>)
 8008654:	f240 321b 	movw	r2, #795	; 0x31b
 8008658:	496e      	ldr	r1, [pc, #440]	; (8008814 <tcp_enqueue_flags+0x1e0>)
 800865a:	486f      	ldr	r0, [pc, #444]	; (8008818 <tcp_enqueue_flags+0x1e4>)
 800865c:	f003 fb18 	bl	800bc90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008666:	2b08      	cmp	r3, #8
 8008668:	d806      	bhi.n	8008678 <tcp_enqueue_flags+0x44>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008670:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008674:	4293      	cmp	r3, r2
 8008676:	d90e      	bls.n	8008696 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7e9b      	ldrb	r3, [r3, #26]
 8008686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800868a:	b2da      	uxtb	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008690:	f04f 33ff 	mov.w	r3, #4294967295
 8008694:	e0b7      	b.n	8008806 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80086a0:	2301      	movs	r3, #1
 80086a2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80086a4:	7ffb      	ldrb	r3, [r7, #31]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2200      	movs	r2, #0
 80086b6:	4619      	mov	r1, r3
 80086b8:	2000      	movs	r0, #0
 80086ba:	f7fb fb4f 	bl	8003d5c <pbuf_alloc>
 80086be:	6138      	str	r0, [r7, #16]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7e9b      	ldrb	r3, [r3, #26]
 80086ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	e095      	b.n	8008806 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	895a      	ldrh	r2, [r3, #10]
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d206      	bcs.n	80086f4 <tcp_enqueue_flags+0xc0>
 80086e6:	4b4a      	ldr	r3, [pc, #296]	; (8008810 <tcp_enqueue_flags+0x1dc>)
 80086e8:	f240 3241 	movw	r2, #833	; 0x341
 80086ec:	494b      	ldr	r1, [pc, #300]	; (800881c <tcp_enqueue_flags+0x1e8>)
 80086ee:	484a      	ldr	r0, [pc, #296]	; (8008818 <tcp_enqueue_flags+0x1e4>)
 80086f0:	f003 face 	bl	800bc90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	7ffb      	ldrb	r3, [r7, #31]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	460b      	mov	r3, r1
 8008700:	6939      	ldr	r1, [r7, #16]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff ff0e 	bl	8008524 <tcp_create_segment>
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d109      	bne.n	8008724 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	7e9b      	ldrb	r3, [r3, #26]
 8008714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008718:	b2da      	uxtb	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800871e:	f04f 33ff 	mov.w	r3, #4294967295
 8008722:	e070      	b.n	8008806 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f003 0303 	and.w	r3, r3, #3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <tcp_enqueue_flags+0x10a>
 8008730:	4b37      	ldr	r3, [pc, #220]	; (8008810 <tcp_enqueue_flags+0x1dc>)
 8008732:	f240 3249 	movw	r2, #841	; 0x349
 8008736:	493a      	ldr	r1, [pc, #232]	; (8008820 <tcp_enqueue_flags+0x1ec>)
 8008738:	4837      	ldr	r0, [pc, #220]	; (8008818 <tcp_enqueue_flags+0x1e4>)
 800873a:	f003 faa9 	bl	800bc90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	891b      	ldrh	r3, [r3, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d006      	beq.n	8008754 <tcp_enqueue_flags+0x120>
 8008746:	4b32      	ldr	r3, [pc, #200]	; (8008810 <tcp_enqueue_flags+0x1dc>)
 8008748:	f240 324a 	movw	r2, #842	; 0x34a
 800874c:	4935      	ldr	r1, [pc, #212]	; (8008824 <tcp_enqueue_flags+0x1f0>)
 800874e:	4832      	ldr	r0, [pc, #200]	; (8008818 <tcp_enqueue_flags+0x1e4>)
 8008750:	f003 fa9e 	bl	800bc90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	669a      	str	r2, [r3, #104]	; 0x68
 8008762:	e00d      	b.n	8008780 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	e002      	b.n	8008772 <tcp_enqueue_flags+0x13e>
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f8      	bne.n	800876c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <tcp_enqueue_flags+0x168>
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d006      	beq.n	80087be <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e9b      	ldrb	r3, [r3, #26]
 80087b4:	f043 0320 	orr.w	r3, r3, #32
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fb fed0 	bl	8004568 <pbuf_clen>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087d2:	4413      	add	r3, r2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00e      	beq.n	8008804 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <tcp_enqueue_flags+0x1d0>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <tcp_enqueue_flags+0x1d0>
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <tcp_enqueue_flags+0x1dc>)
 80087f8:	f240 326d 	movw	r2, #877	; 0x36d
 80087fc:	490a      	ldr	r1, [pc, #40]	; (8008828 <tcp_enqueue_flags+0x1f4>)
 80087fe:	4806      	ldr	r0, [pc, #24]	; (8008818 <tcp_enqueue_flags+0x1e4>)
 8008800:	f003 fa46 	bl	800bc90 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	0800db30 	.word	0x0800db30
 8008814:	0800de34 	.word	0x0800de34
 8008818:	0800db94 	.word	0x0800db94
 800881c:	0800de8c 	.word	0x0800de8c
 8008820:	0800dec8 	.word	0x0800dec8
 8008824:	0800dee0 	.word	0x0800dee0
 8008828:	0800df0c 	.word	0x0800df0c

0800882c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b08b      	sub	sp, #44	; 0x2c
 8008830:	af04      	add	r7, sp, #16
 8008832:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008838:	7dbb      	ldrb	r3, [r7, #22]
 800883a:	b29c      	uxth	r4, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008840:	4618      	mov	r0, r3
 8008842:	f7fa fce6 	bl	8003212 <lwip_htonl>
 8008846:	4603      	mov	r3, r0
 8008848:	2200      	movs	r2, #0
 800884a:	4621      	mov	r1, r4
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fdad 	bl	80083ac <tcp_output_alloc_header>
 8008852:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7e9b      	ldrb	r3, [r3, #26]
 800885e:	f043 0303 	orr.w	r3, r3, #3
 8008862:	b2da      	uxtb	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008868:	f06f 0301 	mvn.w	r3, #1
 800886c:	e036      	b.n	80088dc <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3304      	adds	r3, #4
 8008872:	4618      	mov	r0, r3
 8008874:	f002 f862 	bl	800a93c <ip4_route>
 8008878:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8008880:	23fc      	movs	r3, #252	; 0xfc
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	e012      	b.n	80088ac <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	1d18      	adds	r0, r3, #4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	7a9c      	ldrb	r4, [r3, #10]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7a5b      	ldrb	r3, [r3, #9]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	9202      	str	r2, [sp, #8]
 8008898:	2206      	movs	r2, #6
 800889a:	9201      	str	r2, [sp, #4]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	4623      	mov	r3, r4
 80088a0:	4602      	mov	r2, r0
 80088a2:	6938      	ldr	r0, [r7, #16]
 80088a4:	f002 f9f2 	bl	800ac8c <ip4_output_if>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80088ac:	6938      	ldr	r0, [r7, #16]
 80088ae:	f7fb fdc7 	bl	8004440 <pbuf_free>

  if (err != ERR_OK) {
 80088b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	7e9b      	ldrb	r3, [r3, #26]
 80088be:	f043 0303 	orr.w	r3, r3, #3
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	769a      	strb	r2, [r3, #26]
 80088c8:	e006      	b.n	80088d8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7e9b      	ldrb	r3, [r3, #26]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80088d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80088e4:	b5b0      	push	{r4, r5, r7, lr}
 80088e6:	b08a      	sub	sp, #40	; 0x28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7d1b      	ldrb	r3, [r3, #20]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d106      	bne.n	8008902 <tcp_output+0x1e>
 80088f4:	4b9b      	ldr	r3, [pc, #620]	; (8008b64 <tcp_output+0x280>)
 80088f6:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80088fa:	499b      	ldr	r1, [pc, #620]	; (8008b68 <tcp_output+0x284>)
 80088fc:	489b      	ldr	r0, [pc, #620]	; (8008b6c <tcp_output+0x288>)
 80088fe:	f003 f9c7 	bl	800bc90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008902:	4b9b      	ldr	r3, [pc, #620]	; (8008b70 <tcp_output+0x28c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d101      	bne.n	8008910 <tcp_output+0x2c>
    return ERR_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	e1cf      	b.n	8008cb0 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800891c:	429a      	cmp	r2, r3
 800891e:	d203      	bcs.n	8008928 <tcp_output+0x44>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008926:	e002      	b.n	800892e <tcp_output+0x4a>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800892e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	7e9b      	ldrb	r3, [r3, #26]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d017      	beq.n	8008972 <tcp_output+0x8e>
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00f      	beq.n	8008968 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4618      	mov	r0, r3
 8008950:	f7fa fc5f 	bl	8003212 <lwip_htonl>
 8008954:	4602      	mov	r2, r0
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	8912      	ldrh	r2, [r2, #8]
 8008960:	4413      	add	r3, r2
     (seg == NULL ||
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	d204      	bcs.n	8008972 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff5f 	bl	800882c <tcp_send_empty_ack>
 800896e:	4603      	mov	r3, r0
 8008970:	e19e      	b.n	8008cb0 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008976:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d007      	beq.n	800898e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800897e:	e002      	b.n	8008986 <tcp_output+0xa2>
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	623b      	str	r3, [r7, #32]
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f8      	bne.n	8008980 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3304      	adds	r3, #4
 8008992:	4618      	mov	r0, r3
 8008994:	f001 ffd2 	bl	800a93c <ip4_route>
 8008998:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <tcp_output+0xc2>
    return ERR_RTE;
 80089a0:	f06f 0303 	mvn.w	r3, #3
 80089a4:	e184      	b.n	8008cb0 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <tcp_output+0xd0>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <tcp_output+0xdc>
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	3304      	adds	r3, #4
 80089be:	e000      	b.n	80089c2 <tcp_output+0xde>
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <tcp_output+0xec>
      return ERR_RTE;
 80089ca:	f06f 0303 	mvn.w	r3, #3
 80089ce:	e16f      	b.n	8008cb0 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 813e 	beq.w	8008c5c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fa fc13 	bl	8003212 <lwip_htonl>
 80089ec:	4602      	mov	r2, r0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f6:	8912      	ldrh	r2, [r2, #8]
 80089f8:	4413      	add	r3, r2
  if (seg != NULL &&
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	f080 812d 	bcs.w	8008c5c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8129 	beq.w	8008c5c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a10:	461a      	mov	r2, r3
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	f040 8121 	bne.w	8008c5c <tcp_output+0x378>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 811c 	bne.w	8008c5c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f040 812b 	bne.w	8008c86 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8008a40:	e121      	b.n	8008c86 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	899b      	ldrh	r3, [r3, #12]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fa fbd3 	bl	80031f6 <lwip_htons>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <tcp_output+0x184>
 8008a5a:	4b42      	ldr	r3, [pc, #264]	; (8008b64 <tcp_output+0x280>)
 8008a5c:	f240 4246 	movw	r2, #1094	; 0x446
 8008a60:	4944      	ldr	r1, [pc, #272]	; (8008b74 <tcp_output+0x290>)
 8008a62:	4842      	ldr	r0, [pc, #264]	; (8008b6c <tcp_output+0x288>)
 8008a64:	f003 f914 	bl	800bc90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01f      	beq.n	8008ab0 <tcp_output+0x1cc>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7e9b      	ldrb	r3, [r3, #26]
 8008a74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d119      	bne.n	8008ab0 <tcp_output+0x1cc>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <tcp_output+0x1b8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d110      	bne.n	8008ab0 <tcp_output+0x1cc>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a92:	891a      	ldrh	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d209      	bcs.n	8008ab0 <tcp_output+0x1cc>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <tcp_output+0x1cc>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d901      	bls.n	8008ab4 <tcp_output+0x1d0>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e000      	b.n	8008ab6 <tcp_output+0x1d2>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7e9b      	ldrb	r3, [r3, #26]
 8008abe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80e1 	beq.w	8008c8a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7d1b      	ldrb	r3, [r3, #20]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d00d      	beq.n	8008aec <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	899b      	ldrh	r3, [r3, #12]
 8008ad6:	b29c      	uxth	r4, r3
 8008ad8:	2010      	movs	r0, #16
 8008ada:	f7fa fb8c 	bl	80031f6 <lwip_htons>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	4322      	orrs	r2, r4
 8008ae8:	b292      	uxth	r2, r2
 8008aea:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af2:	f000 f8e1 	bl	8008cb8 <tcp_output_segment>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7e9b      	ldrb	r3, [r3, #26]
 8008b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	769a      	strb	r2, [r3, #26]
      return err;
 8008b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b14:	e0cc      	b.n	8008cb0 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7d1b      	ldrb	r3, [r3, #20]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d006      	beq.n	8008b34 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	7e9b      	ldrb	r3, [r3, #26]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fa fb69 	bl	8003212 <lwip_htonl>
 8008b40:	4604      	mov	r4, r0
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	891b      	ldrh	r3, [r3, #8]
 8008b46:	461d      	mov	r5, r3
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	899b      	ldrh	r3, [r3, #12]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fa fb50 	bl	80031f6 <lwip_htons>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f003 0303 	and.w	r3, r3, #3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <tcp_output+0x294>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e00a      	b.n	8008b7a <tcp_output+0x296>
 8008b64:	0800db30 	.word	0x0800db30
 8008b68:	0800df34 	.word	0x0800df34
 8008b6c:	0800db94 	.word	0x0800db94
 8008b70:	20006890 	.word	0x20006890
 8008b74:	0800df5c 	.word	0x0800df5c
 8008b78:	2300      	movs	r3, #0
 8008b7a:	442b      	add	r3, r5
 8008b7c:	4423      	add	r3, r4
 8008b7e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	da02      	bge.n	8008b92 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	891b      	ldrh	r3, [r3, #8]
 8008b96:	461c      	mov	r4, r3
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	899b      	ldrh	r3, [r3, #12]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fa fb28 	bl	80031f6 <lwip_htons>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	f003 0303 	and.w	r3, r3, #3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <tcp_output+0x2d0>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <tcp_output+0x2d2>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4423      	add	r3, r4
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d049      	beq.n	8008c50 <tcp_output+0x36c>
      seg->next = NULL;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bce:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	623b      	str	r3, [r7, #32]
 8008bd4:	e03f      	b.n	8008c56 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fa fb18 	bl	8003212 <lwip_htonl>
 8008be2:	4604      	mov	r4, r0
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fa fb11 	bl	8003212 <lwip_htonl>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	1ae3      	subs	r3, r4, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	da24      	bge.n	8008c42 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	336c      	adds	r3, #108	; 0x6c
 8008bfc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008bfe:	e002      	b.n	8008c06 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d011      	beq.n	8008c32 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fa fafb 	bl	8003212 <lwip_htonl>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fa faf4 	bl	8003212 <lwip_htonl>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dbe6      	blt.n	8008c00 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	e009      	b.n	8008c56 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c46:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	623b      	str	r3, [r7, #32]
 8008c4e:	e002      	b.n	8008c56 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c52:	f7fc fe79 	bl	8005948 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d015      	beq.n	8008c8e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fa fad2 	bl	8003212 <lwip_htonl>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c78:	8912      	ldrh	r2, [r2, #8]
 8008c7a:	4413      	add	r3, r2
  while (seg != NULL &&
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	f4bf aedf 	bcs.w	8008a42 <tcp_output+0x15e>
  }
output_done:
 8008c84:	e003      	b.n	8008c8e <tcp_output+0x3aa>
    goto output_done;
 8008c86:	bf00      	nop
 8008c88:	e002      	b.n	8008c90 <tcp_output+0x3ac>
      break;
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <tcp_output+0x3ac>
output_done:
 8008c8e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d103      	bne.n	8008ca0 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7e9b      	ldrb	r3, [r3, #26]
 8008ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3728      	adds	r7, #40	; 0x28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bdb0      	pop	{r4, r5, r7, pc}

08008cb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008cb8:	b5b0      	push	{r4, r5, r7, lr}
 8008cba:	b08c      	sub	sp, #48	; 0x30
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	89db      	ldrh	r3, [r3, #14]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d001      	beq.n	8008cd2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e08b      	b.n	8008dea <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68dc      	ldr	r4, [r3, #12]
 8008cda:	4610      	mov	r0, r2
 8008cdc:	f7fa fa99 	bl	8003212 <lwip_htonl>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68dc      	ldr	r4, [r3, #12]
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fa fa82 	bl	80031f6 <lwip_htons>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008cfe:	441a      	add	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	7a9b      	ldrb	r3, [r3, #10]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d014      	beq.n	8008d42 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008d22:	f7fd f8a5 	bl	8005e70 <tcp_eff_send_mss_impl>
 8008d26:	4603      	mov	r3, r0
 8008d28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008d2a:	8b7b      	ldrh	r3, [r7, #26]
 8008d2c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fa fa6e 	bl	8003212 <lwip_htonl>
 8008d36:	4602      	mov	r2, r0
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da02      	bge.n	8008d52 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10c      	bne.n	8008d74 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8008d5a:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <tcp_output_segment+0x13c>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fa fa52 	bl	8003212 <lwip_htonl>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	8959      	ldrh	r1, [r3, #10]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	8b3a      	ldrh	r2, [r7, #24]
 8008d90:	1a8a      	subs	r2, r1, r2
 8008d92:	b292      	uxth	r2, r2
 8008d94:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	8919      	ldrh	r1, [r3, #8]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	8b3a      	ldrh	r2, [r7, #24]
 8008da2:	1a8a      	subs	r2, r1, r2
 8008da4:	b292      	uxth	r2, r2
 8008da6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	68d2      	ldr	r2, [r2, #12]
 8008db0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	741a      	strb	r2, [r3, #16]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6858      	ldr	r0, [r3, #4]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	1d1c      	adds	r4, r3, #4
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	7a9d      	ldrb	r5, [r3, #10]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	7a5b      	ldrb	r3, [r3, #9]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	9202      	str	r2, [sp, #8]
 8008dd4:	2206      	movs	r2, #6
 8008dd6:	9201      	str	r2, [sp, #4]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	462b      	mov	r3, r5
 8008ddc:	4622      	mov	r2, r4
 8008dde:	f001 ff55 	bl	800ac8c <ip4_output_if>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8008de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bdb0      	pop	{r4, r5, r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20006880 	.word	0x20006880

08008df8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08c      	sub	sp, #48	; 0x30
 8008dfc:	af04      	add	r7, sp, #16
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008e06:	2200      	movs	r2, #0
 8008e08:	2114      	movs	r1, #20
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	f7fa ffa6 	bl	8003d5c <pbuf_alloc>
 8008e10:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d05b      	beq.n	8008ed0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	895b      	ldrh	r3, [r3, #10]
 8008e1c:	2b13      	cmp	r3, #19
 8008e1e:	d806      	bhi.n	8008e2e <tcp_rst+0x36>
 8008e20:	4b2d      	ldr	r3, [pc, #180]	; (8008ed8 <tcp_rst+0xe0>)
 8008e22:	f240 524d 	movw	r2, #1357	; 0x54d
 8008e26:	492d      	ldr	r1, [pc, #180]	; (8008edc <tcp_rst+0xe4>)
 8008e28:	482d      	ldr	r0, [pc, #180]	; (8008ee0 <tcp_rst+0xe8>)
 8008e2a:	f002 ff31 	bl	800bc90 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8008e34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fa f9dd 	bl	80031f6 <lwip_htons>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	461a      	mov	r2, r3
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fa f9d5 	bl	80031f6 <lwip_htons>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7fa f9dc 	bl	8003212 <lwip_htonl>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008e60:	68b8      	ldr	r0, [r7, #8]
 8008e62:	f7fa f9d6 	bl	8003212 <lwip_htonl>
 8008e66:	4602      	mov	r2, r0
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008e6c:	f245 0014 	movw	r0, #20500	; 0x5014
 8008e70:	f7fa f9c1 	bl	80031f6 <lwip_htons>
 8008e74:	4603      	mov	r3, r0
 8008e76:	461a      	mov	r2, r3
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f042 020b 	orr.w	r2, r2, #11
 8008e84:	739a      	strb	r2, [r3, #14]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f062 0247 	orn	r2, r2, #71	; 0x47
 8008e8c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2200      	movs	r2, #0
 8008e92:	741a      	strb	r2, [r3, #16]
 8008e94:	2200      	movs	r2, #0
 8008e96:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	749a      	strb	r2, [r3, #18]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008ea2:	6838      	ldr	r0, [r7, #0]
 8008ea4:	f001 fd4a 	bl	800a93c <ip4_route>
 8008ea8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	2306      	movs	r3, #6
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	23ff      	movs	r3, #255	; 0xff
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	69f8      	ldr	r0, [r7, #28]
 8008ec4:	f001 fee2 	bl	800ac8c <ip4_output_if>
  }
  pbuf_free(p);
 8008ec8:	69f8      	ldr	r0, [r7, #28]
 8008eca:	f7fb fab9 	bl	8004440 <pbuf_free>
 8008ece:	e000      	b.n	8008ed2 <tcp_rst+0xda>
    return;
 8008ed0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	0800db30 	.word	0x0800db30
 8008edc:	0800db64 	.word	0x0800db64
 8008ee0:	0800db94 	.word	0x0800db94

08008ee4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d029      	beq.n	8008f48 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	e002      	b.n	8008f02 <tcp_rexmit_rto+0x1e>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f8      	bne.n	8008efc <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f26:	2bff      	cmp	r3, #255	; 0xff
 8008f28:	d007      	beq.n	8008f3a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f30:	3301      	adds	r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fccf 	bl	80088e4 <tcp_output>
 8008f46:	e000      	b.n	8008f4a <tcp_rexmit_rto+0x66>
    return;
 8008f48:	bf00      	nop
}
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d043      	beq.n	8008fe8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f64:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3368      	adds	r3, #104	; 0x68
 8008f72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008f74:	e002      	b.n	8008f7c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d011      	beq.n	8008fa8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fa f940 	bl	8003212 <lwip_htonl>
 8008f92:	4604      	mov	r4, r0
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fa f939 	bl	8003212 <lwip_htonl>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dbe6      	blt.n	8008f76 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d103      	bne.n	8008fc6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fcc:	2bff      	cmp	r3, #255	; 0xff
 8008fce:	d007      	beq.n	8008fe0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8008fe6:	e000      	b.n	8008fea <tcp_rexmit+0x9a>
    return;
 8008fe8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd90      	pop	{r4, r7, pc}

08008ff0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d04a      	beq.n	8009096 <tcp_rexmit_fast+0xa6>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7e9b      	ldrb	r3, [r3, #26]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d144      	bne.n	8009096 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff9f 	bl	8008f50 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800901e:	429a      	cmp	r2, r3
 8009020:	d207      	bcs.n	8009032 <tcp_rexmit_fast+0x42>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009028:	0fda      	lsrs	r2, r3, #31
 800902a:	4413      	add	r3, r2
 800902c:	105b      	asrs	r3, r3, #1
 800902e:	b29b      	uxth	r3, r3
 8009030:	e006      	b.n	8009040 <tcp_rexmit_fast+0x50>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009038:	0fda      	lsrs	r2, r3, #31
 800903a:	4413      	add	r3, r2
 800903c:	105b      	asrs	r3, r3, #1
 800903e:	b29b      	uxth	r3, r3
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	429a      	cmp	r2, r3
 8009056:	d206      	bcs.n	8009066 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009070:	4619      	mov	r1, r3
 8009072:	0049      	lsls	r1, r1, #1
 8009074:	440b      	add	r3, r1
 8009076:	b29b      	uxth	r3, r3
 8009078:	4413      	add	r3, r2
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	7e9b      	ldrb	r3, [r3, #26]
 8009086:	f043 0304 	orr.w	r3, r3, #4
 800908a:	b2da      	uxtb	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b08a      	sub	sp, #40	; 0x28
 80090a2:	af04      	add	r7, sp, #16
 80090a4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	3b01      	subs	r3, #1
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fa f8b0 	bl	8003212 <lwip_htonl>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff f977 	bl	80083ac <tcp_output_alloc_header>
 80090be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80090c6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ca:	e021      	b.n	8009110 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 fc33 	bl	800a93c <ip4_route>
 80090d6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80090de:	23fc      	movs	r3, #252	; 0xfc
 80090e0:	75fb      	strb	r3, [r7, #23]
 80090e2:	e010      	b.n	8009106 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7a98      	ldrb	r0, [r3, #10]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	2306      	movs	r3, #6
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	4603      	mov	r3, r0
 80090fc:	6938      	ldr	r0, [r7, #16]
 80090fe:	f001 fdc5 	bl	800ac8c <ip4_output_if>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009106:	6938      	ldr	r0, [r7, #16]
 8009108:	f7fb f99a 	bl	8004440 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800910c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b08f      	sub	sp, #60	; 0x3c
 800911c:	af04      	add	r7, sp, #16
 800911e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009124:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009130:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e085      	b.n	8009248 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	899b      	ldrh	r3, [r3, #12]
 8009142:	b29b      	uxth	r3, r3
 8009144:	4618      	mov	r0, r3
 8009146:	f7fa f856 	bl	80031f6 <lwip_htons>
 800914a:	4603      	mov	r3, r0
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <tcp_zero_window_probe+0x48>
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	891b      	ldrh	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <tcp_zero_window_probe+0x48>
 800915c:	2301      	movs	r3, #1
 800915e:	e000      	b.n	8009162 <tcp_zero_window_probe+0x4a>
 8009160:	2300      	movs	r3, #0
 8009162:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009164:	7ffb      	ldrb	r3, [r7, #31]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf0c      	ite	eq
 800916a:	2301      	moveq	r3, #1
 800916c:	2300      	movne	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	8bba      	ldrh	r2, [r7, #28]
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f915 	bl	80083ac <tcp_output_alloc_header>
 8009182:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d102      	bne.n	8009190 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800918a:	f04f 33ff 	mov.w	r3, #4294967295
 800918e:	e05b      	b.n	8009248 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009196:	7ffb      	ldrb	r3, [r7, #31]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00e      	beq.n	80091ba <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091a6:	b29c      	uxth	r4, r3
 80091a8:	2011      	movs	r0, #17
 80091aa:	f7fa f824 	bl	80031f6 <lwip_htons>
 80091ae:	4603      	mov	r3, r0
 80091b0:	4323      	orrs	r3, r4
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	819a      	strh	r2, [r3, #12]
 80091b8:	e010      	b.n	80091dc <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	3314      	adds	r3, #20
 80091c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	6858      	ldr	r0, [r3, #4]
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	891a      	ldrh	r2, [r3, #8]
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	891b      	ldrh	r3, [r3, #8]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2201      	movs	r2, #1
 80091d6:	6939      	ldr	r1, [r7, #16]
 80091d8:	f7fb fb22 	bl	8004820 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fa f815 	bl	8003212 <lwip_htonl>
 80091e8:	4603      	mov	r3, r0
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	da02      	bge.n	8009200 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fb99 	bl	800a93c <ip4_route>
 800920a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d103      	bne.n	800921a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009212:	23fc      	movs	r3, #252	; 0xfc
 8009214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009218:	e011      	b.n	800923e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7a98      	ldrb	r0, [r3, #10]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	2306      	movs	r3, #6
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	2300      	movs	r3, #0
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4603      	mov	r3, r0
 8009232:	69b8      	ldr	r0, [r7, #24]
 8009234:	f001 fd2a 	bl	800ac8c <ip4_output_if>
 8009238:	4603      	mov	r3, r0
 800923a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800923e:	69b8      	ldr	r0, [r7, #24]
 8009240:	f7fb f8fe 	bl	8004440 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009248:	4618      	mov	r0, r3
 800924a:	372c      	adds	r7, #44	; 0x2c
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009258:	f7fb fb64 	bl	8004924 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <tcpip_tcp_timer+0x38>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <tcpip_tcp_timer+0x1c>
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <tcpip_tcp_timer+0x3c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800926c:	2200      	movs	r2, #0
 800926e:	4908      	ldr	r1, [pc, #32]	; (8009290 <tcpip_tcp_timer+0x40>)
 8009270:	20fa      	movs	r0, #250	; 0xfa
 8009272:	f000 f86f 	bl	8009354 <sys_timeout>
 8009276:	e002      	b.n	800927e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <tcpip_tcp_timer+0x44>)
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
  }
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	2000687c 	.word	0x2000687c
 800928c:	2000688c 	.word	0x2000688c
 8009290:	08009251 	.word	0x08009251
 8009294:	20000108 	.word	0x20000108

08009298 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <tcp_timer_needed+0x30>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10f      	bne.n	80092c4 <tcp_timer_needed+0x2c>
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <tcp_timer_needed+0x34>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d103      	bne.n	80092b4 <tcp_timer_needed+0x1c>
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <tcp_timer_needed+0x38>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80092b4:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <tcp_timer_needed+0x30>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80092ba:	2200      	movs	r2, #0
 80092bc:	4905      	ldr	r1, [pc, #20]	; (80092d4 <tcp_timer_needed+0x3c>)
 80092be:	20fa      	movs	r0, #250	; 0xfa
 80092c0:	f000 f848 	bl	8009354 <sys_timeout>
  }
}
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000108 	.word	0x20000108
 80092cc:	2000687c 	.word	0x2000687c
 80092d0:	2000688c 	.word	0x2000688c
 80092d4:	08009251 	.word	0x08009251

080092d8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	4903      	ldr	r1, [pc, #12]	; (8009300 <cyclic_timer+0x28>)
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f82e 	bl	8009354 <sys_timeout>
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	080092d9 	.word	0x080092d9

08009304 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800930a:	2301      	movs	r3, #1
 800930c:	607b      	str	r3, [r7, #4]
 800930e:	e00e      	b.n	800932e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009310:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <sys_timeouts_init+0x44>)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <sys_timeouts_init+0x44>)
 800931e:	4413      	add	r3, r2
 8009320:	461a      	mov	r2, r3
 8009322:	490a      	ldr	r1, [pc, #40]	; (800934c <sys_timeouts_init+0x48>)
 8009324:	f000 f816 	bl	8009354 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3301      	adds	r3, #1
 800932c:	607b      	str	r3, [r7, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d9ed      	bls.n	8009310 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8009334:	f7f9 ff58 	bl	80031e8 <sys_now>
 8009338:	4602      	mov	r2, r0
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <sys_timeouts_init+0x4c>)
 800933c:	601a      	str	r2, [r3, #0]
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	0800e7f0 	.word	0x0800e7f0
 800934c:	080092d9 	.word	0x080092d9
 8009350:	20000104 	.word	0x20000104

08009354 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009360:	2006      	movs	r0, #6
 8009362:	f7fa faf7 	bl	8003954 <memp_malloc>
 8009366:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f040 8084 	bne.w	800947e <sys_timeout+0x12a>
 8009376:	4b44      	ldr	r3, [pc, #272]	; (8009488 <sys_timeout+0x134>)
 8009378:	22d4      	movs	r2, #212	; 0xd4
 800937a:	4944      	ldr	r1, [pc, #272]	; (800948c <sys_timeout+0x138>)
 800937c:	4844      	ldr	r0, [pc, #272]	; (8009490 <sys_timeout+0x13c>)
 800937e:	f002 fc87 	bl	800bc90 <iprintf>
    return;
 8009382:	e07c      	b.n	800947e <sys_timeout+0x12a>
  }

  now = sys_now();
 8009384:	f7f9 ff30 	bl	80031e8 <sys_now>
 8009388:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800938a:	4b42      	ldr	r3, [pc, #264]	; (8009494 <sys_timeout+0x140>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <sys_timeout+0x4a>
    diff = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8009396:	4a40      	ldr	r2, [pc, #256]	; (8009498 <sys_timeout+0x144>)
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e004      	b.n	80093a8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800939e:	4b3e      	ldr	r3, [pc, #248]	; (8009498 <sys_timeout+0x144>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	441a      	add	r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80093c4:	4b33      	ldr	r3, [pc, #204]	; (8009494 <sys_timeout+0x140>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d103      	bne.n	80093d4 <sys_timeout+0x80>
    next_timeout = timeout;
 80093cc:	4a31      	ldr	r2, [pc, #196]	; (8009494 <sys_timeout+0x140>)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6013      	str	r3, [r2, #0]
    return;
 80093d2:	e055      	b.n	8009480 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80093d4:	4b2f      	ldr	r3, [pc, #188]	; (8009494 <sys_timeout+0x140>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d20f      	bcs.n	8009400 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80093e0:	4b2c      	ldr	r3, [pc, #176]	; (8009494 <sys_timeout+0x140>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6859      	ldr	r1, [r3, #4]
 80093e6:	4b2b      	ldr	r3, [pc, #172]	; (8009494 <sys_timeout+0x140>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	1a8a      	subs	r2, r1, r2
 80093ee:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80093f0:	4b28      	ldr	r3, [pc, #160]	; (8009494 <sys_timeout+0x140>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80093f8:	4a26      	ldr	r2, [pc, #152]	; (8009494 <sys_timeout+0x140>)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	e03f      	b.n	8009480 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009400:	4b24      	ldr	r3, [pc, #144]	; (8009494 <sys_timeout+0x140>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	61fb      	str	r3, [r7, #28]
 8009406:	e036      	b.n	8009476 <sys_timeout+0x122>
      timeout->time -= t->time;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	1ad2      	subs	r2, r2, r3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <sys_timeout+0xd8>
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	429a      	cmp	r2, r3
 800942a:	d921      	bls.n	8009470 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6859      	ldr	r1, [r3, #4]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	1a8a      	subs	r2, r1, r2
 8009444:	605a      	str	r2, [r3, #4]
 8009446:	e00b      	b.n	8009460 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	429a      	cmp	r2, r3
 8009450:	d206      	bcs.n	8009460 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009452:	4b10      	ldr	r3, [pc, #64]	; (8009494 <sys_timeout+0x140>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	441a      	add	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	601a      	str	r2, [r3, #0]
        break;
 800946e:	e007      	b.n	8009480 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	61fb      	str	r3, [r7, #28]
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1c5      	bne.n	8009408 <sys_timeout+0xb4>
 800947c:	e000      	b.n	8009480 <sys_timeout+0x12c>
    return;
 800947e:	bf00      	nop
      }
    }
  }
}
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	0800df74 	.word	0x0800df74
 800948c:	0800dfa8 	.word	0x0800dfa8
 8009490:	0800dfe8 	.word	0x0800dfe8
 8009494:	20000100 	.word	0x20000100
 8009498:	20000104 	.word	0x20000104

0800949c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80094a2:	4b24      	ldr	r3, [pc, #144]	; (8009534 <sys_check_timeouts+0x98>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d040      	beq.n	800952c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80094aa:	f7f9 fe9d 	bl	80031e8 <sys_now>
 80094ae:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80094b0:	4b21      	ldr	r3, [pc, #132]	; (8009538 <sys_check_timeouts+0x9c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <sys_check_timeouts+0xa0>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <sys_check_timeouts+0x2c>
 80094c4:	f7fa fc1a 	bl	8003cfc <pbuf_free_ooseq>
      had_one = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80094cc:	4b19      	ldr	r3, [pc, #100]	; (8009534 <sys_check_timeouts+0x98>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d026      	beq.n	8009526 <sys_check_timeouts+0x8a>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d321      	bcc.n	8009526 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 80094e2:	2301      	movs	r3, #1
 80094e4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <sys_check_timeouts+0x9c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	4a11      	ldr	r2, [pc, #68]	; (8009538 <sys_check_timeouts+0x9c>)
 80094f2:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <sys_check_timeouts+0x98>)
 8009504:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	2006      	movs	r0, #6
 8009516:	f7fa fa69 	bl	80039ec <memp_free>
        if (handler != NULL) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6838      	ldr	r0, [r7, #0]
 8009524:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8009526:	7cfb      	ldrb	r3, [r7, #19]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1c6      	bne.n	80094ba <sys_check_timeouts+0x1e>
  }
}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000100 	.word	0x20000100
 8009538:	20000104 	.word	0x20000104
 800953c:	20006874 	.word	0x20006874

08009540 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009544:	bf00      	nop
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
	...

08009550 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d018      	beq.n	8009596 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d013      	beq.n	8009592 <udp_input_local_match+0x42>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00f      	beq.n	8009592 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <udp_input_local_match+0x74>)
 8009574:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d00a      	beq.n	8009592 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <udp_input_local_match+0x74>)
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	405a      	eors	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	3308      	adds	r3, #8
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800958e:	2b00      	cmp	r3, #0
 8009590:	d110      	bne.n	80095b4 <udp_input_local_match+0x64>
          return 1;
 8009592:	2301      	movs	r3, #1
 8009594:	e00f      	b.n	80095b6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <udp_input_local_match+0x60>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <udp_input_local_match+0x60>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <udp_input_local_match+0x74>)
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d101      	bne.n	80095b4 <udp_input_local_match+0x64>
      return 1;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e000      	b.n	80095b6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	2000334c 	.word	0x2000334c

080095c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b08d      	sub	sp, #52	; 0x34
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	895b      	ldrh	r3, [r3, #10]
 80095da:	2b07      	cmp	r3, #7
 80095dc:	d803      	bhi.n	80095e6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fa ff2e 	bl	8004440 <pbuf_free>
    goto end;
 80095e4:	e0c6      	b.n	8009774 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80095ec:	4b63      	ldr	r3, [pc, #396]	; (800977c <udp_input+0x1b4>)
 80095ee:	695a      	ldr	r2, [r3, #20]
 80095f0:	4b62      	ldr	r3, [pc, #392]	; (800977c <udp_input+0x1b4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f001 fc1a 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 80095fc:	4603      	mov	r3, r0
 80095fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	4618      	mov	r0, r3
 8009608:	f7f9 fdf5 	bl	80031f6 <lwip_htons>
 800960c:	4603      	mov	r3, r0
 800960e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	885b      	ldrh	r3, [r3, #2]
 8009614:	b29b      	uxth	r3, r3
 8009616:	4618      	mov	r0, r3
 8009618:	f7f9 fded 	bl	80031f6 <lwip_htons>
 800961c:	4603      	mov	r3, r0
 800961e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009620:	2300      	movs	r3, #0
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800962c:	4b54      	ldr	r3, [pc, #336]	; (8009780 <udp_input+0x1b8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
 8009632:	e03b      	b.n	80096ac <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	8a5b      	ldrh	r3, [r3, #18]
 8009638:	89fa      	ldrh	r2, [r7, #14]
 800963a:	429a      	cmp	r2, r3
 800963c:	d131      	bne.n	80096a2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800963e:	7cfb      	ldrb	r3, [r7, #19]
 8009640:	461a      	mov	r2, r3
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009646:	f7ff ff83 	bl	8009550 <udp_input_local_match>
 800964a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800964c:	2b00      	cmp	r3, #0
 800964e:	d028      	beq.n	80096a2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <udp_input+0x9e>
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	8a9b      	ldrh	r3, [r3, #20]
 800966a:	8a3a      	ldrh	r2, [r7, #16]
 800966c:	429a      	cmp	r2, r3
 800966e:	d118      	bne.n	80096a2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b3f      	ldr	r3, [pc, #252]	; (800977c <udp_input+0x1b4>)
 800967e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009680:	429a      	cmp	r2, r3
 8009682:	d10e      	bne.n	80096a2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d014      	beq.n	80096b4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8009692:	4b3b      	ldr	r3, [pc, #236]	; (8009780 <udp_input+0x1b8>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800969a:	4a39      	ldr	r2, [pc, #228]	; (8009780 <udp_input+0x1b8>)
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80096a0:	e008      	b.n	80096b4 <udp_input+0xec>
      }
    }

    prev = pcb;
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1c0      	bne.n	8009634 <udp_input+0x6c>
 80096b2:	e000      	b.n	80096b6 <udp_input+0xee>
        break;
 80096b4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <udp_input+0xf8>
    pcb = uncon_pcb;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <udp_input+0x104>
    for_us = 1;
 80096c6:	2301      	movs	r3, #1
 80096c8:	76fb      	strb	r3, [r7, #27]
 80096ca:	e00a      	b.n	80096e2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	3304      	adds	r3, #4
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b2a      	ldr	r3, [pc, #168]	; (800977c <udp_input+0x1b4>)
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80096e2:	7efb      	ldrb	r3, [r7, #27]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d042      	beq.n	800976e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80096e8:	f06f 0107 	mvn.w	r1, #7
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7fa fe83 	bl	80043f8 <pbuf_header>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00a      	beq.n	800970e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80096f8:	4b22      	ldr	r3, [pc, #136]	; (8009784 <udp_input+0x1bc>)
 80096fa:	f240 1255 	movw	r2, #341	; 0x155
 80096fe:	4922      	ldr	r1, [pc, #136]	; (8009788 <udp_input+0x1c0>)
 8009700:	4822      	ldr	r0, [pc, #136]	; (800978c <udp_input+0x1c4>)
 8009702:	f002 fac5 	bl	800bc90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fa fe9a 	bl	8004440 <pbuf_free>
      goto end;
 800970c:	e032      	b.n	8009774 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d012      	beq.n	800973a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	699c      	ldr	r4, [r3, #24]
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	69d8      	ldr	r0, [r3, #28]
 8009724:	8a3b      	ldrh	r3, [r7, #16]
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <udp_input+0x1c8>)
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800972e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009730:	e021      	b.n	8009776 <udp_input+0x1ae>
        pbuf_free(p);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7fa fe84 	bl	8004440 <pbuf_free>
        goto end;
 8009738:	e01c      	b.n	8009774 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800973a:	7cfb      	ldrb	r3, [r7, #19]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d112      	bne.n	8009766 <udp_input+0x19e>
 8009740:	4b0e      	ldr	r3, [pc, #56]	; (800977c <udp_input+0x1b4>)
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009748:	2be0      	cmp	r3, #224	; 0xe0
 800974a:	d00c      	beq.n	8009766 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <udp_input+0x1b4>)
 800974e:	899b      	ldrh	r3, [r3, #12]
 8009750:	3308      	adds	r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	b21b      	sxth	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7fa fe5f 	bl	800441c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800975e:	2103      	movs	r1, #3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 f863 	bl	800a82c <icmp_dest_unreach>
      pbuf_free(p);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fa fe6a 	bl	8004440 <pbuf_free>
  return;
 800976c:	e003      	b.n	8009776 <udp_input+0x1ae>
    pbuf_free(p);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fa fe66 	bl	8004440 <pbuf_free>
  return;
 8009774:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009776:	372c      	adds	r7, #44	; 0x2c
 8009778:	46bd      	mov	sp, r7
 800977a:	bd90      	pop	{r4, r7, pc}
 800977c:	2000334c 	.word	0x2000334c
 8009780:	20006894 	.word	0x20006894
 8009784:	0800e010 	.word	0x0800e010
 8009788:	0800e040 	.word	0x0800e040
 800978c:	0800e054 	.word	0x0800e054
 8009790:	2000335c 	.word	0x2000335c

08009794 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01e      	beq.n	80097e2 <udp_netif_ip_addr_changed+0x4e>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01a      	beq.n	80097e2 <udp_netif_ip_addr_changed+0x4e>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d017      	beq.n	80097e2 <udp_netif_ip_addr_changed+0x4e>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d013      	beq.n	80097e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80097ba:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <udp_netif_ip_addr_changed+0x5c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e00c      	b.n	80097dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d103      	bne.n	80097d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1ef      	bne.n	80097c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20006894 	.word	0x20006894

080097f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80097fc:	4915      	ldr	r1, [pc, #84]	; (8009854 <etharp_free_entry+0x60>)
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	4613      	mov	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	440b      	add	r3, r1
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009810:	4910      	ldr	r1, [pc, #64]	; (8009854 <etharp_free_entry+0x60>)
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4613      	mov	r3, r2
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	4413      	add	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	440b      	add	r3, r1
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f7fa fe0d 	bl	8004440 <pbuf_free>
    arp_table[i].q = NULL;
 8009826:	490b      	ldr	r1, [pc, #44]	; (8009854 <etharp_free_entry+0x60>)
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	4413      	add	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	440b      	add	r3, r1
 8009834:	2200      	movs	r2, #0
 8009836:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009838:	4906      	ldr	r1, [pc, #24]	; (8009854 <etharp_free_entry+0x60>)
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	4413      	add	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	440b      	add	r3, r1
 8009846:	3314      	adds	r3, #20
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	2000010c 	.word	0x2000010c

08009858 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800985e:	2300      	movs	r3, #0
 8009860:	71fb      	strb	r3, [r7, #7]
 8009862:	e096      	b.n	8009992 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009864:	79fa      	ldrb	r2, [r7, #7]
 8009866:	494f      	ldr	r1, [pc, #316]	; (80099a4 <etharp_tmr+0x14c>)
 8009868:	4613      	mov	r3, r2
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	4413      	add	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	440b      	add	r3, r1
 8009872:	3314      	adds	r3, #20
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8009878:	79bb      	ldrb	r3, [r7, #6]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8086 	beq.w	800998c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8009880:	79fa      	ldrb	r2, [r7, #7]
 8009882:	4948      	ldr	r1, [pc, #288]	; (80099a4 <etharp_tmr+0x14c>)
 8009884:	4613      	mov	r3, r2
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	4413      	add	r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	440b      	add	r3, r1
 800988e:	3312      	adds	r3, #18
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	b298      	uxth	r0, r3
 8009896:	4943      	ldr	r1, [pc, #268]	; (80099a4 <etharp_tmr+0x14c>)
 8009898:	4613      	mov	r3, r2
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	4413      	add	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	440b      	add	r3, r1
 80098a2:	3312      	adds	r3, #18
 80098a4:	4602      	mov	r2, r0
 80098a6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80098a8:	79fa      	ldrb	r2, [r7, #7]
 80098aa:	493e      	ldr	r1, [pc, #248]	; (80099a4 <etharp_tmr+0x14c>)
 80098ac:	4613      	mov	r3, r2
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	4413      	add	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	440b      	add	r3, r1
 80098b6:	3312      	adds	r3, #18
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80098be:	d215      	bcs.n	80098ec <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80098c0:	79fa      	ldrb	r2, [r7, #7]
 80098c2:	4938      	ldr	r1, [pc, #224]	; (80099a4 <etharp_tmr+0x14c>)
 80098c4:	4613      	mov	r3, r2
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	4413      	add	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	440b      	add	r3, r1
 80098ce:	3314      	adds	r3, #20
 80098d0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10f      	bne.n	80098f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80098d6:	79fa      	ldrb	r2, [r7, #7]
 80098d8:	4932      	ldr	r1, [pc, #200]	; (80099a4 <etharp_tmr+0x14c>)
 80098da:	4613      	mov	r3, r2
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	4413      	add	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	440b      	add	r3, r1
 80098e4:	3312      	adds	r3, #18
 80098e6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d904      	bls.n	80098f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff ff80 	bl	80097f4 <etharp_free_entry>
 80098f4:	e04a      	b.n	800998c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80098f6:	79fa      	ldrb	r2, [r7, #7]
 80098f8:	492a      	ldr	r1, [pc, #168]	; (80099a4 <etharp_tmr+0x14c>)
 80098fa:	4613      	mov	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	440b      	add	r3, r1
 8009904:	3314      	adds	r3, #20
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b03      	cmp	r3, #3
 800990a:	d10a      	bne.n	8009922 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800990c:	79fa      	ldrb	r2, [r7, #7]
 800990e:	4925      	ldr	r1, [pc, #148]	; (80099a4 <etharp_tmr+0x14c>)
 8009910:	4613      	mov	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	440b      	add	r3, r1
 800991a:	3314      	adds	r3, #20
 800991c:	2204      	movs	r2, #4
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e034      	b.n	800998c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009922:	79fa      	ldrb	r2, [r7, #7]
 8009924:	491f      	ldr	r1, [pc, #124]	; (80099a4 <etharp_tmr+0x14c>)
 8009926:	4613      	mov	r3, r2
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4413      	add	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	440b      	add	r3, r1
 8009930:	3314      	adds	r3, #20
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b04      	cmp	r3, #4
 8009936:	d10a      	bne.n	800994e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	491a      	ldr	r1, [pc, #104]	; (80099a4 <etharp_tmr+0x14c>)
 800993c:	4613      	mov	r3, r2
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	4413      	add	r3, r2
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	440b      	add	r3, r1
 8009946:	3314      	adds	r3, #20
 8009948:	2202      	movs	r2, #2
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e01e      	b.n	800998c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800994e:	79fa      	ldrb	r2, [r7, #7]
 8009950:	4914      	ldr	r1, [pc, #80]	; (80099a4 <etharp_tmr+0x14c>)
 8009952:	4613      	mov	r3, r2
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	4413      	add	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	440b      	add	r3, r1
 800995c:	3314      	adds	r3, #20
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d113      	bne.n	800998c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009964:	79fa      	ldrb	r2, [r7, #7]
 8009966:	490f      	ldr	r1, [pc, #60]	; (80099a4 <etharp_tmr+0x14c>)
 8009968:	4613      	mov	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	440b      	add	r3, r1
 8009972:	3308      	adds	r3, #8
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	79fa      	ldrb	r2, [r7, #7]
 8009978:	4613      	mov	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	4413      	add	r3, r2
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <etharp_tmr+0x14c>)
 8009982:	4413      	add	r3, r2
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	f000 fe38 	bl	800a5fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	3301      	adds	r3, #1
 8009990:	71fb      	strb	r3, [r7, #7]
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	2b09      	cmp	r3, #9
 8009996:	f67f af65 	bls.w	8009864 <etharp_tmr+0xc>
      }
    }
  }
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	2000010c 	.word	0x2000010c

080099a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	460b      	mov	r3, r1
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80099b6:	230a      	movs	r3, #10
 80099b8:	77fb      	strb	r3, [r7, #31]
 80099ba:	230a      	movs	r3, #10
 80099bc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80099be:	230a      	movs	r3, #10
 80099c0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80099c6:	230a      	movs	r3, #10
 80099c8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	833b      	strh	r3, [r7, #24]
 80099ce:	2300      	movs	r3, #0
 80099d0:	82fb      	strh	r3, [r7, #22]
 80099d2:	2300      	movs	r3, #0
 80099d4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80099d6:	2300      	movs	r3, #0
 80099d8:	773b      	strb	r3, [r7, #28]
 80099da:	e093      	b.n	8009b04 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80099dc:	7f3a      	ldrb	r2, [r7, #28]
 80099de:	4990      	ldr	r1, [pc, #576]	; (8009c20 <etharp_find_entry+0x278>)
 80099e0:	4613      	mov	r3, r2
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	4413      	add	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	440b      	add	r3, r1
 80099ea:	3314      	adds	r3, #20
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80099f0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80099f4:	2b0a      	cmp	r3, #10
 80099f6:	d105      	bne.n	8009a04 <etharp_find_entry+0x5c>
 80099f8:	7cfb      	ldrb	r3, [r7, #19]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80099fe:	7f3b      	ldrb	r3, [r7, #28]
 8009a00:	777b      	strb	r3, [r7, #29]
 8009a02:	e07c      	b.n	8009afe <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009a04:	7cfb      	ldrb	r3, [r7, #19]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d079      	beq.n	8009afe <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009a0a:	7cfb      	ldrb	r3, [r7, #19]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d009      	beq.n	8009a24 <etharp_find_entry+0x7c>
 8009a10:	7cfb      	ldrb	r3, [r7, #19]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d806      	bhi.n	8009a24 <etharp_find_entry+0x7c>
 8009a16:	4b83      	ldr	r3, [pc, #524]	; (8009c24 <etharp_find_entry+0x27c>)
 8009a18:	f44f 7293 	mov.w	r2, #294	; 0x126
 8009a1c:	4982      	ldr	r1, [pc, #520]	; (8009c28 <etharp_find_entry+0x280>)
 8009a1e:	4883      	ldr	r0, [pc, #524]	; (8009c2c <etharp_find_entry+0x284>)
 8009a20:	f002 f936 	bl	800bc90 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00f      	beq.n	8009a4a <etharp_find_entry+0xa2>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6819      	ldr	r1, [r3, #0]
 8009a2e:	7f3a      	ldrb	r2, [r7, #28]
 8009a30:	487b      	ldr	r0, [pc, #492]	; (8009c20 <etharp_find_entry+0x278>)
 8009a32:	4613      	mov	r3, r2
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	4413      	add	r3, r2
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	4403      	add	r3, r0
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d102      	bne.n	8009a4a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8009a44:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009a48:	e0e5      	b.n	8009c16 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009a4a:	7cfb      	ldrb	r3, [r7, #19]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d13b      	bne.n	8009ac8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009a50:	7f3a      	ldrb	r2, [r7, #28]
 8009a52:	4973      	ldr	r1, [pc, #460]	; (8009c20 <etharp_find_entry+0x278>)
 8009a54:	4613      	mov	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	440b      	add	r3, r1
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d018      	beq.n	8009a96 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8009a64:	7f3a      	ldrb	r2, [r7, #28]
 8009a66:	496e      	ldr	r1, [pc, #440]	; (8009c20 <etharp_find_entry+0x278>)
 8009a68:	4613      	mov	r3, r2
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	4413      	add	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	440b      	add	r3, r1
 8009a72:	3312      	adds	r3, #18
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	8b3a      	ldrh	r2, [r7, #24]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d840      	bhi.n	8009afe <etharp_find_entry+0x156>
            old_queue = i;
 8009a7c:	7f3b      	ldrb	r3, [r7, #28]
 8009a7e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8009a80:	7f3a      	ldrb	r2, [r7, #28]
 8009a82:	4967      	ldr	r1, [pc, #412]	; (8009c20 <etharp_find_entry+0x278>)
 8009a84:	4613      	mov	r3, r2
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	4413      	add	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	440b      	add	r3, r1
 8009a8e:	3312      	adds	r3, #18
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	833b      	strh	r3, [r7, #24]
 8009a94:	e033      	b.n	8009afe <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009a96:	7f3a      	ldrb	r2, [r7, #28]
 8009a98:	4961      	ldr	r1, [pc, #388]	; (8009c20 <etharp_find_entry+0x278>)
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4413      	add	r3, r2
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3312      	adds	r3, #18
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	8afa      	ldrh	r2, [r7, #22]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d827      	bhi.n	8009afe <etharp_find_entry+0x156>
            old_pending = i;
 8009aae:	7f3b      	ldrb	r3, [r7, #28]
 8009ab0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009ab2:	7f3a      	ldrb	r2, [r7, #28]
 8009ab4:	495a      	ldr	r1, [pc, #360]	; (8009c20 <etharp_find_entry+0x278>)
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	440b      	add	r3, r1
 8009ac0:	3312      	adds	r3, #18
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	82fb      	strh	r3, [r7, #22]
 8009ac6:	e01a      	b.n	8009afe <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009ac8:	7cfb      	ldrb	r3, [r7, #19]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d917      	bls.n	8009afe <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009ace:	7f3a      	ldrb	r2, [r7, #28]
 8009ad0:	4953      	ldr	r1, [pc, #332]	; (8009c20 <etharp_find_entry+0x278>)
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	440b      	add	r3, r1
 8009adc:	3312      	adds	r3, #18
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	8aba      	ldrh	r2, [r7, #20]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d80b      	bhi.n	8009afe <etharp_find_entry+0x156>
            old_stable = i;
 8009ae6:	7f3b      	ldrb	r3, [r7, #28]
 8009ae8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8009aea:	7f3a      	ldrb	r2, [r7, #28]
 8009aec:	494c      	ldr	r1, [pc, #304]	; (8009c20 <etharp_find_entry+0x278>)
 8009aee:	4613      	mov	r3, r2
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4413      	add	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	440b      	add	r3, r1
 8009af8:	3312      	adds	r3, #18
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009afe:	7f3b      	ldrb	r3, [r7, #28]
 8009b00:	3301      	adds	r3, #1
 8009b02:	773b      	strb	r3, [r7, #28]
 8009b04:	7f3b      	ldrb	r3, [r7, #28]
 8009b06:	2b09      	cmp	r3, #9
 8009b08:	f67f af68 	bls.w	80099dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d108      	bne.n	8009b28 <etharp_find_entry+0x180>
 8009b16:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009b1a:	2b0a      	cmp	r3, #10
 8009b1c:	d107      	bne.n	8009b2e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2c:	e073      	b.n	8009c16 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009b2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	dc02      	bgt.n	8009b3c <etharp_find_entry+0x194>
    i = empty;
 8009b36:	7f7b      	ldrb	r3, [r7, #29]
 8009b38:	773b      	strb	r3, [r7, #28]
 8009b3a:	e036      	b.n	8009baa <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009b3c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009b40:	2b09      	cmp	r3, #9
 8009b42:	dc13      	bgt.n	8009b6c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8009b44:	7fbb      	ldrb	r3, [r7, #30]
 8009b46:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009b48:	7f3a      	ldrb	r2, [r7, #28]
 8009b4a:	4935      	ldr	r1, [pc, #212]	; (8009c20 <etharp_find_entry+0x278>)
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	440b      	add	r3, r1
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d018      	beq.n	8009b8e <etharp_find_entry+0x1e6>
 8009b5c:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <etharp_find_entry+0x27c>)
 8009b5e:	f240 126f 	movw	r2, #367	; 0x16f
 8009b62:	4933      	ldr	r1, [pc, #204]	; (8009c30 <etharp_find_entry+0x288>)
 8009b64:	4831      	ldr	r0, [pc, #196]	; (8009c2c <etharp_find_entry+0x284>)
 8009b66:	f002 f893 	bl	800bc90 <iprintf>
 8009b6a:	e010      	b.n	8009b8e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	dc02      	bgt.n	8009b7a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8009b74:	7ffb      	ldrb	r3, [r7, #31]
 8009b76:	773b      	strb	r3, [r7, #28]
 8009b78:	e009      	b.n	8009b8e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009b7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	dc02      	bgt.n	8009b88 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009b82:	7efb      	ldrb	r3, [r7, #27]
 8009b84:	773b      	strb	r3, [r7, #28]
 8009b86:	e002      	b.n	8009b8e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8009b88:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8c:	e043      	b.n	8009c16 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009b8e:	7f3b      	ldrb	r3, [r7, #28]
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	d906      	bls.n	8009ba2 <etharp_find_entry+0x1fa>
 8009b94:	4b23      	ldr	r3, [pc, #140]	; (8009c24 <etharp_find_entry+0x27c>)
 8009b96:	f240 1281 	movw	r2, #385	; 0x181
 8009b9a:	4926      	ldr	r1, [pc, #152]	; (8009c34 <etharp_find_entry+0x28c>)
 8009b9c:	4823      	ldr	r0, [pc, #140]	; (8009c2c <etharp_find_entry+0x284>)
 8009b9e:	f002 f877 	bl	800bc90 <iprintf>
    etharp_free_entry(i);
 8009ba2:	7f3b      	ldrb	r3, [r7, #28]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff fe25 	bl	80097f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009baa:	7f3b      	ldrb	r3, [r7, #28]
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d906      	bls.n	8009bbe <etharp_find_entry+0x216>
 8009bb0:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <etharp_find_entry+0x27c>)
 8009bb2:	f240 1285 	movw	r2, #389	; 0x185
 8009bb6:	491f      	ldr	r1, [pc, #124]	; (8009c34 <etharp_find_entry+0x28c>)
 8009bb8:	481c      	ldr	r0, [pc, #112]	; (8009c2c <etharp_find_entry+0x284>)
 8009bba:	f002 f869 	bl	800bc90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009bbe:	7f3a      	ldrb	r2, [r7, #28]
 8009bc0:	4917      	ldr	r1, [pc, #92]	; (8009c20 <etharp_find_entry+0x278>)
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	440b      	add	r3, r1
 8009bcc:	3314      	adds	r3, #20
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <etharp_find_entry+0x23a>
 8009bd4:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <etharp_find_entry+0x27c>)
 8009bd6:	f240 1287 	movw	r2, #391	; 0x187
 8009bda:	4917      	ldr	r1, [pc, #92]	; (8009c38 <etharp_find_entry+0x290>)
 8009bdc:	4813      	ldr	r0, [pc, #76]	; (8009c2c <etharp_find_entry+0x284>)
 8009bde:	f002 f857 	bl	800bc90 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009be8:	7f3a      	ldrb	r2, [r7, #28]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	480c      	ldr	r0, [pc, #48]	; (8009c20 <etharp_find_entry+0x278>)
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	4413      	add	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	4403      	add	r3, r0
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009bfe:	7f3a      	ldrb	r2, [r7, #28]
 8009c00:	4907      	ldr	r1, [pc, #28]	; (8009c20 <etharp_find_entry+0x278>)
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	00db      	lsls	r3, r3, #3
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3312      	adds	r3, #18
 8009c0e:	2200      	movs	r2, #0
 8009c10:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009c12:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	2000010c 	.word	0x2000010c
 8009c24:	0800e0ac 	.word	0x0800e0ac
 8009c28:	0800e0e4 	.word	0x0800e0e4
 8009c2c:	0800e124 	.word	0x0800e124
 8009c30:	0800e14c 	.word	0x0800e14c
 8009c34:	0800e164 	.word	0x0800e164
 8009c38:	0800e178 	.word	0x0800e178

08009c3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c50:	2b06      	cmp	r3, #6
 8009c52:	d006      	beq.n	8009c62 <etharp_update_arp_entry+0x26>
 8009c54:	4b48      	ldr	r3, [pc, #288]	; (8009d78 <etharp_update_arp_entry+0x13c>)
 8009c56:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009c5a:	4948      	ldr	r1, [pc, #288]	; (8009d7c <etharp_update_arp_entry+0x140>)
 8009c5c:	4848      	ldr	r0, [pc, #288]	; (8009d80 <etharp_update_arp_entry+0x144>)
 8009c5e:	f002 f817 	bl	800bc90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d012      	beq.n	8009c8e <etharp_update_arp_entry+0x52>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00e      	beq.n	8009c8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 f8da 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 8009c7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009c8a:	2be0      	cmp	r3, #224	; 0xe0
 8009c8c:	d102      	bne.n	8009c94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009c8e:	f06f 030f 	mvn.w	r3, #15
 8009c92:	e06c      	b.n	8009d6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	68b8      	ldr	r0, [r7, #8]
 8009c9c:	f7ff fe84 	bl	80099a8 <etharp_find_entry>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	da02      	bge.n	8009cb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cb0:	e05d      	b.n	8009d6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009cb2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009cb6:	4933      	ldr	r1, [pc, #204]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009cb8:	4613      	mov	r3, r2
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	4413      	add	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	3314      	adds	r3, #20
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009cc8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009ccc:	492d      	ldr	r1, [pc, #180]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3308      	adds	r3, #8
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8009cde:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	3308      	adds	r3, #8
 8009cec:	4a25      	ldr	r2, [pc, #148]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009cee:	4413      	add	r3, r2
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	2206      	movs	r2, #6
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 ffb7 	bl	800bc6a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009cfc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009d00:	4920      	ldr	r1, [pc, #128]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	440b      	add	r3, r1
 8009d0c:	3312      	adds	r3, #18
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009d12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009d16:	491b      	ldr	r1, [pc, #108]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009d18:	4613      	mov	r3, r2
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	4413      	add	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	440b      	add	r3, r1
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d021      	beq.n	8009d6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009d28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009d2c:	4915      	ldr	r1, [pc, #84]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009d2e:	4613      	mov	r3, r2
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	440b      	add	r3, r1
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009d3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009d40:	4910      	ldr	r1, [pc, #64]	; (8009d84 <etharp_update_arp_entry+0x148>)
 8009d42:	4613      	mov	r3, r2
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4413      	add	r3, r2
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	440b      	add	r3, r1
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8009d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6939      	ldr	r1, [r7, #16]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f001 ff07 	bl	800bb74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8009d66:	6938      	ldr	r0, [r7, #16]
 8009d68:	f7fa fb6a 	bl	8004440 <pbuf_free>
  }
  return ERR_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	0800e0ac 	.word	0x0800e0ac
 8009d7c:	0800e1a4 	.word	0x0800e1a4
 8009d80:	0800e124 	.word	0x0800e124
 8009d84:	2000010c 	.word	0x2000010c

08009d88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	e01f      	b.n	8009dd6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8009d96:	7bfa      	ldrb	r2, [r7, #15]
 8009d98:	4912      	ldr	r1, [pc, #72]	; (8009de4 <etharp_cleanup_netif+0x5c>)
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	3314      	adds	r3, #20
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00f      	beq.n	8009dd0 <etharp_cleanup_netif+0x48>
 8009db0:	7bfa      	ldrb	r2, [r7, #15]
 8009db2:	490c      	ldr	r1, [pc, #48]	; (8009de4 <etharp_cleanup_netif+0x5c>)
 8009db4:	4613      	mov	r3, r2
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	4413      	add	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	440b      	add	r3, r1
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d103      	bne.n	8009dd0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff fd12 	bl	80097f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	2b09      	cmp	r3, #9
 8009dda:	d9dc      	bls.n	8009d96 <etharp_cleanup_netif+0xe>
    }
  }
}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	2000010c 	.word	0x2000010c

08009de8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009de8:	b5b0      	push	{r4, r5, r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af04      	add	r7, sp, #16
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d107      	bne.n	8009e08 <etharp_input+0x20>
 8009df8:	4b3d      	ldr	r3, [pc, #244]	; (8009ef0 <etharp_input+0x108>)
 8009dfa:	f44f 7222 	mov.w	r2, #648	; 0x288
 8009dfe:	493d      	ldr	r1, [pc, #244]	; (8009ef4 <etharp_input+0x10c>)
 8009e00:	483d      	ldr	r0, [pc, #244]	; (8009ef8 <etharp_input+0x110>)
 8009e02:	f001 ff45 	bl	800bc90 <iprintf>
 8009e06:	e06f      	b.n	8009ee8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e18:	d10c      	bne.n	8009e34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009e1e:	2b06      	cmp	r3, #6
 8009e20:	d108      	bne.n	8009e34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d104      	bne.n	8009e34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d003      	beq.n	8009e3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7fa fb03 	bl	8004440 <pbuf_free>
    return;
 8009e3a:	e055      	b.n	8009ee8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	330e      	adds	r3, #14
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	3318      	adds	r3, #24
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <etharp_input+0x74>
    for_us = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	75fb      	strb	r3, [r7, #23]
 8009e5a:	e009      	b.n	8009e70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	3304      	adds	r3, #4
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f103 0208 	add.w	r2, r3, #8
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <etharp_input+0x98>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e000      	b.n	8009e82 <etharp_input+0x9a>
 8009e80:	2302      	movs	r3, #2
 8009e82:	f107 010c 	add.w	r1, r7, #12
 8009e86:	6838      	ldr	r0, [r7, #0]
 8009e88:	f7ff fed8 	bl	8009c3c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	88db      	ldrh	r3, [r3, #6]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e96:	d003      	beq.n	8009ea0 <etharp_input+0xb8>
 8009e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9c:	d01e      	beq.n	8009edc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8009e9e:	e020      	b.n	8009ee2 <etharp_input+0xfa>
    if (for_us) {
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01c      	beq.n	8009ee0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	3208      	adds	r2, #8
      etharp_raw(netif,
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	9103      	str	r1, [sp, #12]
 8009ec4:	f107 010c 	add.w	r1, r7, #12
 8009ec8:	9102      	str	r1, [sp, #8]
 8009eca:	9201      	str	r2, [sp, #4]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	462b      	mov	r3, r5
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	6838      	ldr	r0, [r7, #0]
 8009ed6:	f000 fae3 	bl	800a4a0 <etharp_raw>
    break;
 8009eda:	e001      	b.n	8009ee0 <etharp_input+0xf8>
    break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <etharp_input+0xfa>
    break;
 8009ee0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fa faac 	bl	8004440 <pbuf_free>
}
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bdb0      	pop	{r4, r5, r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800e0ac 	.word	0x0800e0ac
 8009ef4:	0800e1fc 	.word	0x0800e1fc
 8009ef8:	0800e124 	.word	0x0800e124

08009efc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009f0a:	79fa      	ldrb	r2, [r7, #7]
 8009f0c:	4944      	ldr	r1, [pc, #272]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f0e:	4613      	mov	r3, r2
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	4413      	add	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	440b      	add	r3, r1
 8009f18:	3314      	adds	r3, #20
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d806      	bhi.n	8009f2e <etharp_output_to_arp_index+0x32>
 8009f20:	4b40      	ldr	r3, [pc, #256]	; (800a024 <etharp_output_to_arp_index+0x128>)
 8009f22:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009f26:	4940      	ldr	r1, [pc, #256]	; (800a028 <etharp_output_to_arp_index+0x12c>)
 8009f28:	4840      	ldr	r0, [pc, #256]	; (800a02c <etharp_output_to_arp_index+0x130>)
 8009f2a:	f001 feb1 	bl	800bc90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009f2e:	79fa      	ldrb	r2, [r7, #7]
 8009f30:	493b      	ldr	r1, [pc, #236]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f32:	4613      	mov	r3, r2
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	4413      	add	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d153      	bne.n	8009fec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009f44:	79fa      	ldrb	r2, [r7, #7]
 8009f46:	4936      	ldr	r1, [pc, #216]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	3312      	adds	r3, #18
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8009f5a:	d919      	bls.n	8009f90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009f5c:	79fa      	ldrb	r2, [r7, #7]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4a2e      	ldr	r2, [pc, #184]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fb44 	bl	800a5fc <etharp_request>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d138      	bne.n	8009fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009f7a:	79fa      	ldrb	r2, [r7, #7]
 8009f7c:	4928      	ldr	r1, [pc, #160]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f7e:	4613      	mov	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	440b      	add	r3, r1
 8009f88:	3314      	adds	r3, #20
 8009f8a:	2203      	movs	r2, #3
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e02d      	b.n	8009fec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009f90:	79fa      	ldrb	r2, [r7, #7]
 8009f92:	4923      	ldr	r1, [pc, #140]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009f94:	4613      	mov	r3, r2
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3312      	adds	r3, #18
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009fa6:	d321      	bcc.n	8009fec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009fa8:	79fa      	ldrb	r2, [r7, #7]
 8009faa:	4613      	mov	r3, r2
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	1d19      	adds	r1, r3, #4
 8009fb8:	79fa      	ldrb	r2, [r7, #7]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	4a16      	ldr	r2, [pc, #88]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009fc6:	4413      	add	r3, r2
 8009fc8:	3304      	adds	r3, #4
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 faf3 	bl	800a5b8 <etharp_request_dst>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d109      	bne.n	8009fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009fd8:	79fa      	ldrb	r2, [r7, #7]
 8009fda:	4911      	ldr	r1, [pc, #68]	; (800a020 <etharp_output_to_arp_index+0x124>)
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	440b      	add	r3, r1
 8009fe6:	3314      	adds	r3, #20
 8009fe8:	2203      	movs	r2, #3
 8009fea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8009ff2:	79fa      	ldrb	r2, [r7, #7]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	4a08      	ldr	r2, [pc, #32]	; (800a020 <etharp_output_to_arp_index+0x124>)
 800a000:	4413      	add	r3, r2
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4613      	mov	r3, r2
 800a00c:	460a      	mov	r2, r1
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f001 fdaf 	bl	800bb74 <ethernet_output>
 800a016:	4603      	mov	r3, r0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	2000010c 	.word	0x2000010c
 800a024:	0800e0ac 	.word	0x0800e0ac
 800a028:	0800e21c 	.word	0x0800e21c
 800a02c:	0800e124 	.word	0x0800e124

0800a030 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af02      	add	r7, sp, #8
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <etharp_output+0x24>
 800a046:	4b69      	ldr	r3, [pc, #420]	; (800a1ec <etharp_output+0x1bc>)
 800a048:	f240 321b 	movw	r2, #795	; 0x31b
 800a04c:	4968      	ldr	r1, [pc, #416]	; (800a1f0 <etharp_output+0x1c0>)
 800a04e:	4869      	ldr	r0, [pc, #420]	; (800a1f4 <etharp_output+0x1c4>)
 800a050:	f001 fe1e 	bl	800bc90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <etharp_output+0x38>
 800a05a:	4b64      	ldr	r3, [pc, #400]	; (800a1ec <etharp_output+0x1bc>)
 800a05c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a060:	4965      	ldr	r1, [pc, #404]	; (800a1f8 <etharp_output+0x1c8>)
 800a062:	4864      	ldr	r0, [pc, #400]	; (800a1f4 <etharp_output+0x1c4>)
 800a064:	f001 fe14 	bl	800bc90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <etharp_output+0x4c>
 800a06e:	4b5f      	ldr	r3, [pc, #380]	; (800a1ec <etharp_output+0x1bc>)
 800a070:	f240 321d 	movw	r2, #797	; 0x31d
 800a074:	4961      	ldr	r1, [pc, #388]	; (800a1fc <etharp_output+0x1cc>)
 800a076:	485f      	ldr	r0, [pc, #380]	; (800a1f4 <etharp_output+0x1c4>)
 800a078:	f001 fe0a 	bl	800bc90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68f9      	ldr	r1, [r7, #12]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fed4 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a08e:	4b5c      	ldr	r3, [pc, #368]	; (800a200 <etharp_output+0x1d0>)
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	e09b      	b.n	800a1cc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a09c:	2be0      	cmp	r3, #224	; 0xe0
 800a09e:	d118      	bne.n	800a0d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a0a8:	235e      	movs	r3, #94	; 0x5e
 800a0aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3302      	adds	r3, #2
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3303      	adds	r3, #3
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a0ca:	f107 0310 	add.w	r3, r7, #16
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	e07c      	b.n	800a1cc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	405a      	eors	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d012      	beq.n	800a110 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a0f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00b      	beq.n	800a110 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	330c      	adds	r3, #12
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	330c      	adds	r3, #12
 800a106:	61bb      	str	r3, [r7, #24]
 800a108:	e002      	b.n	800a110 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a10a:	f06f 0303 	mvn.w	r3, #3
 800a10e:	e069      	b.n	800a1e4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a110:	4b3c      	ldr	r3, [pc, #240]	; (800a204 <etharp_output+0x1d4>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	4619      	mov	r1, r3
 800a116:	4a3c      	ldr	r2, [pc, #240]	; (800a208 <etharp_output+0x1d8>)
 800a118:	460b      	mov	r3, r1
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	440b      	add	r3, r1
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	4413      	add	r3, r2
 800a122:	3314      	adds	r3, #20
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d917      	bls.n	800a15a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b35      	ldr	r3, [pc, #212]	; (800a204 <etharp_output+0x1d4>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	4618      	mov	r0, r3
 800a134:	4934      	ldr	r1, [pc, #208]	; (800a208 <etharp_output+0x1d8>)
 800a136:	4603      	mov	r3, r0
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	4403      	add	r3, r0
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	440b      	add	r3, r1
 800a140:	3304      	adds	r3, #4
 800a142:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a144:	429a      	cmp	r2, r3
 800a146:	d108      	bne.n	800a15a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a148:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <etharp_output+0x1d4>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fed3 	bl	8009efc <etharp_output_to_arp_index>
 800a156:	4603      	mov	r3, r0
 800a158:	e044      	b.n	800a1e4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a15a:	2300      	movs	r3, #0
 800a15c:	75fb      	strb	r3, [r7, #23]
 800a15e:	e02a      	b.n	800a1b6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a160:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a164:	4928      	ldr	r1, [pc, #160]	; (800a208 <etharp_output+0x1d8>)
 800a166:	4613      	mov	r3, r2
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	3314      	adds	r3, #20
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d918      	bls.n	800a1aa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	6819      	ldr	r1, [r3, #0]
 800a17c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a180:	4821      	ldr	r0, [pc, #132]	; (800a208 <etharp_output+0x1d8>)
 800a182:	4613      	mov	r3, r2
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4413      	add	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4403      	add	r3, r0
 800a18c:	3304      	adds	r3, #4
 800a18e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a190:	4299      	cmp	r1, r3
 800a192:	d10a      	bne.n	800a1aa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800a194:	7dfa      	ldrb	r2, [r7, #23]
 800a196:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <etharp_output+0x1d4>)
 800a198:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff feab 	bl	8009efc <etharp_output_to_arp_index>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	e01c      	b.n	800a1e4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a1aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	75fb      	strb	r3, [r7, #23]
 800a1b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	ddd0      	ble.n	800a160 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	69b9      	ldr	r1, [r7, #24]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f822 	bl	800a20c <etharp_query>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	e00b      	b.n	800a1e4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800a1d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	68b9      	ldr	r1, [r7, #8]
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f001 fcc9 	bl	800bb74 <ethernet_output>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	0800e0ac 	.word	0x0800e0ac
 800a1f0:	0800e1fc 	.word	0x0800e1fc
 800a1f4:	0800e124 	.word	0x0800e124
 800a1f8:	0800e24c 	.word	0x0800e24c
 800a1fc:	0800e1ec 	.word	0x0800e1ec
 800a200:	0800e80c 	.word	0x0800e80c
 800a204:	200001fc 	.word	0x200001fc
 800a208:	2000010c 	.word	0x2000010c

0800a20c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08c      	sub	sp, #48	; 0x30
 800a210:	af02      	add	r7, sp, #8
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3325      	adds	r3, #37	; 0x25
 800a21c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a21e:	23ff      	movs	r3, #255	; 0xff
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68f9      	ldr	r1, [r7, #12]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fdfe 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10c      	bne.n	800a254 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a242:	2be0      	cmp	r3, #224	; 0xe0
 800a244:	d006      	beq.n	800a254 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a254:	f06f 030f 	mvn.w	r3, #15
 800a258:	e10f      	b.n	800a47a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	2101      	movs	r1, #1
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	f7ff fba2 	bl	80099a8 <etharp_find_entry>
 800a264:	4603      	mov	r3, r0
 800a266:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800a268:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da02      	bge.n	800a276 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800a270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a274:	e101      	b.n	800a47a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a276:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a27a:	4982      	ldr	r1, [pc, #520]	; (800a484 <etharp_query+0x278>)
 800a27c:	4613      	mov	r3, r2
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	4413      	add	r3, r2
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	440b      	add	r3, r1
 800a286:	3314      	adds	r3, #20
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d117      	bne.n	800a2be <etharp_query+0xb2>
    is_new_entry = 1;
 800a28e:	2301      	movs	r3, #1
 800a290:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a292:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a296:	497b      	ldr	r1, [pc, #492]	; (800a484 <etharp_query+0x278>)
 800a298:	4613      	mov	r3, r2
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	4413      	add	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	440b      	add	r3, r1
 800a2a2:	3314      	adds	r3, #20
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a2a8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2ac:	4975      	ldr	r1, [pc, #468]	; (800a484 <etharp_query+0x278>)
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	4413      	add	r3, r2
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a2be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2c2:	4970      	ldr	r1, [pc, #448]	; (800a484 <etharp_query+0x278>)
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d012      	beq.n	800a2fc <etharp_query+0xf0>
 800a2d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2da:	496a      	ldr	r1, [pc, #424]	; (800a484 <etharp_query+0x278>)
 800a2dc:	4613      	mov	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	4413      	add	r3, r2
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	440b      	add	r3, r1
 800a2e6:	3314      	adds	r3, #20
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d806      	bhi.n	800a2fc <etharp_query+0xf0>
 800a2ee:	4b66      	ldr	r3, [pc, #408]	; (800a488 <etharp_query+0x27c>)
 800a2f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a2f4:	4965      	ldr	r1, [pc, #404]	; (800a48c <etharp_query+0x280>)
 800a2f6:	4866      	ldr	r0, [pc, #408]	; (800a490 <etharp_query+0x284>)
 800a2f8:	f001 fcca 	bl	800bc90 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <etharp_query+0xfc>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f976 	bl	800a5fc <etharp_request>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <etharp_query+0x116>
      return result;
 800a31c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a320:	e0ab      	b.n	800a47a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <etharp_query+0x12a>
 800a328:	4b57      	ldr	r3, [pc, #348]	; (800a488 <etharp_query+0x27c>)
 800a32a:	f240 32db 	movw	r2, #987	; 0x3db
 800a32e:	4959      	ldr	r1, [pc, #356]	; (800a494 <etharp_query+0x288>)
 800a330:	4857      	ldr	r0, [pc, #348]	; (800a490 <etharp_query+0x284>)
 800a332:	f001 fcad 	bl	800bc90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a336:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a33a:	4952      	ldr	r1, [pc, #328]	; (800a484 <etharp_query+0x278>)
 800a33c:	4613      	mov	r3, r2
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	4413      	add	r3, r2
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	440b      	add	r3, r1
 800a346:	3314      	adds	r3, #20
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d919      	bls.n	800a382 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800a34e:	7cfa      	ldrb	r2, [r7, #19]
 800a350:	4b51      	ldr	r3, [pc, #324]	; (800a498 <etharp_query+0x28c>)
 800a352:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a354:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a358:	4613      	mov	r3, r2
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	4413      	add	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	3308      	adds	r3, #8
 800a362:	4a48      	ldr	r2, [pc, #288]	; (800a484 <etharp_query+0x278>)
 800a364:	4413      	add	r3, r2
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	4613      	mov	r3, r2
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f001 fbfd 	bl	800bb74 <ethernet_output>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a380:	e079      	b.n	800a476 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a382:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a386:	493f      	ldr	r1, [pc, #252]	; (800a484 <etharp_query+0x278>)
 800a388:	4613      	mov	r3, r2
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	4413      	add	r3, r2
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	440b      	add	r3, r1
 800a392:	3314      	adds	r3, #20
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d16d      	bne.n	800a476 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a3a2:	e01a      	b.n	800a3da <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	895a      	ldrh	r2, [r3, #10]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	891b      	ldrh	r3, [r3, #8]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d10a      	bne.n	800a3c6 <etharp_query+0x1ba>
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <etharp_query+0x1ba>
 800a3b8:	4b33      	ldr	r3, [pc, #204]	; (800a488 <etharp_query+0x27c>)
 800a3ba:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a3be:	4937      	ldr	r1, [pc, #220]	; (800a49c <etharp_query+0x290>)
 800a3c0:	4833      	ldr	r0, [pc, #204]	; (800a490 <etharp_query+0x284>)
 800a3c2:	f001 fc65 	bl	800bc90 <iprintf>
      if (p->type != PBUF_ROM) {
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	7b1b      	ldrb	r3, [r3, #12]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d002      	beq.n	800a3d4 <etharp_query+0x1c8>
        copy_needed = 1;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	61bb      	str	r3, [r7, #24]
        break;
 800a3d2:	e005      	b.n	800a3e0 <etharp_query+0x1d4>
      }
      p = p->next;
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e1      	bne.n	800a3a4 <etharp_query+0x198>
    }
    if (copy_needed) {
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d017      	beq.n	800a416 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	2002      	movs	r0, #2
 800a3f0:	f7f9 fcb4 	bl	8003d5c <pbuf_alloc>
 800a3f4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d011      	beq.n	800a420 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	69f8      	ldr	r0, [r7, #28]
 800a400:	f7fa f942 	bl	8004688 <pbuf_copy>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <etharp_query+0x214>
          pbuf_free(p);
 800a40a:	69f8      	ldr	r0, [r7, #28]
 800a40c:	f7fa f818 	bl	8004440 <pbuf_free>
          p = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e004      	b.n	800a420 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a41a:	69f8      	ldr	r0, [r7, #28]
 800a41c:	f7fa f8bc 	bl	8004598 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d024      	beq.n	800a470 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a426:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a42a:	4916      	ldr	r1, [pc, #88]	; (800a484 <etharp_query+0x278>)
 800a42c:	4613      	mov	r3, r2
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	4413      	add	r3, r2
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	440b      	add	r3, r1
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800a43c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a440:	4910      	ldr	r1, [pc, #64]	; (800a484 <etharp_query+0x278>)
 800a442:	4613      	mov	r3, r2
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	4413      	add	r3, r2
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	440b      	add	r3, r1
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f9 fff6 	bl	8004440 <pbuf_free>
      }
      arp_table[i].q = p;
 800a454:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a458:	490a      	ldr	r1, [pc, #40]	; (800a484 <etharp_query+0x278>)
 800a45a:	4613      	mov	r3, r2
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	4413      	add	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	440b      	add	r3, r1
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a46e:	e002      	b.n	800a476 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a470:	23ff      	movs	r3, #255	; 0xff
 800a472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800a476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3728      	adds	r7, #40	; 0x28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	2000010c 	.word	0x2000010c
 800a488:	0800e0ac 	.word	0x0800e0ac
 800a48c:	0800e258 	.word	0x0800e258
 800a490:	0800e124 	.word	0x0800e124
 800a494:	0800e24c 	.word	0x0800e24c
 800a498:	200001fc 	.word	0x200001fc
 800a49c:	0800e280 	.word	0x0800e280

0800a4a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08a      	sub	sp, #40	; 0x28
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d106      	bne.n	800a4c6 <etharp_raw+0x26>
 800a4b8:	4b3a      	ldr	r3, [pc, #232]	; (800a5a4 <etharp_raw+0x104>)
 800a4ba:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a4be:	493a      	ldr	r1, [pc, #232]	; (800a5a8 <etharp_raw+0x108>)
 800a4c0:	483a      	ldr	r0, [pc, #232]	; (800a5ac <etharp_raw+0x10c>)
 800a4c2:	f001 fbe5 	bl	800bc90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	211c      	movs	r1, #28
 800a4ca:	2002      	movs	r0, #2
 800a4cc:	f7f9 fc46 	bl	8003d5c <pbuf_alloc>
 800a4d0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	e05d      	b.n	800a59a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	895b      	ldrh	r3, [r3, #10]
 800a4e2:	2b1b      	cmp	r3, #27
 800a4e4:	d806      	bhi.n	800a4f4 <etharp_raw+0x54>
 800a4e6:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <etharp_raw+0x104>)
 800a4e8:	f240 4264 	movw	r2, #1124	; 0x464
 800a4ec:	4930      	ldr	r1, [pc, #192]	; (800a5b0 <etharp_raw+0x110>)
 800a4ee:	482f      	ldr	r0, [pc, #188]	; (800a5ac <etharp_raw+0x10c>)
 800a4f0:	f001 fbce 	bl	800bc90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a4fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7f8 fe7a 	bl	80031f6 <lwip_htons>
 800a502:	4603      	mov	r3, r0
 800a504:	461a      	mov	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a510:	2b06      	cmp	r3, #6
 800a512:	d006      	beq.n	800a522 <etharp_raw+0x82>
 800a514:	4b23      	ldr	r3, [pc, #140]	; (800a5a4 <etharp_raw+0x104>)
 800a516:	f240 426b 	movw	r2, #1131	; 0x46b
 800a51a:	4926      	ldr	r1, [pc, #152]	; (800a5b4 <etharp_raw+0x114>)
 800a51c:	4823      	ldr	r0, [pc, #140]	; (800a5ac <etharp_raw+0x10c>)
 800a51e:	f001 fbb7 	bl	800bc90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	3308      	adds	r3, #8
 800a526:	2206      	movs	r2, #6
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 fb9d 	bl	800bc6a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	3312      	adds	r3, #18
 800a534:	2206      	movs	r2, #6
 800a536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a538:	4618      	mov	r0, r3
 800a53a:	f001 fb96 	bl	800bc6a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	330e      	adds	r3, #14
 800a542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	3318      	adds	r3, #24
 800a54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
 800a558:	2200      	movs	r2, #0
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2200      	movs	r2, #0
 800a564:	f042 0208 	orr.w	r2, r2, #8
 800a568:	709a      	strb	r2, [r3, #2]
 800a56a:	2200      	movs	r2, #0
 800a56c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2206      	movs	r2, #6
 800a572:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2204      	movs	r2, #4
 800a578:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a57a:	f640 0306 	movw	r3, #2054	; 0x806
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	69b9      	ldr	r1, [r7, #24]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f001 faf4 	bl	800bb74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a58c:	69b8      	ldr	r0, [r7, #24]
 800a58e:	f7f9 ff57 	bl	8004440 <pbuf_free>
  p = NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a596:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	0800e0ac 	.word	0x0800e0ac
 800a5a8:	0800e1fc 	.word	0x0800e1fc
 800a5ac:	0800e124 	.word	0x0800e124
 800a5b0:	0800e29c 	.word	0x0800e29c
 800a5b4:	0800e2d0 	.word	0x0800e2d0

0800a5b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af04      	add	r7, sp, #16
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	9203      	str	r2, [sp, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	9202      	str	r2, [sp, #8]
 800a5dc:	4a06      	ldr	r2, [pc, #24]	; (800a5f8 <etharp_request_dst+0x40>)
 800a5de:	9201      	str	r2, [sp, #4]
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7ff ff5a 	bl	800a4a0 <etharp_raw>
 800a5ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800e814 	.word	0x0800e814

0800a5fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a606:	4a05      	ldr	r2, [pc, #20]	; (800a61c <etharp_request+0x20>)
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff ffd4 	bl	800a5b8 <etharp_request_dst>
 800a610:	4603      	mov	r3, r0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0800e80c 	.word	0x0800e80c

0800a620 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08e      	sub	sp, #56	; 0x38
 800a624:	af04      	add	r7, sp, #16
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a62a:	4b7a      	ldr	r3, [pc, #488]	; (800a814 <icmp_input+0x1f4>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800a640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a642:	2b13      	cmp	r3, #19
 800a644:	f240 80d1 	bls.w	800a7ea <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	895b      	ldrh	r3, [r3, #10]
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	f240 80ce 	bls.w	800a7ee <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a65c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80bb 	beq.w	800a7dc <icmp_input+0x1bc>
 800a666:	2b08      	cmp	r3, #8
 800a668:	f040 80bb 	bne.w	800a7e2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800a66c:	4b6a      	ldr	r3, [pc, #424]	; (800a818 <icmp_input+0x1f8>)
 800a66e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a670:	4b68      	ldr	r3, [pc, #416]	; (800a814 <icmp_input+0x1f4>)
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a678:	2be0      	cmp	r3, #224	; 0xe0
 800a67a:	f000 80bf 	beq.w	800a7fc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a67e:	4b65      	ldr	r3, [pc, #404]	; (800a814 <icmp_input+0x1f4>)
 800a680:	695a      	ldr	r2, [r3, #20]
 800a682:	4b64      	ldr	r3, [pc, #400]	; (800a814 <icmp_input+0x1f4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f000 fbd1 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 80b5 	bne.w	800a800 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	891b      	ldrh	r3, [r3, #8]
 800a69a:	2b07      	cmp	r3, #7
 800a69c:	f240 80a9 	bls.w	800a7f2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a6a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6a2:	330e      	adds	r3, #14
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	b21b      	sxth	r3, r3
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7f9 fea4 	bl	80043f8 <pbuf_header>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d046      	beq.n	800a744 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	891a      	ldrh	r2, [r3, #8]
 800a6ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6bc:	4413      	add	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	2002      	movs	r0, #2
 800a6c6:	f7f9 fb49 	bl	8003d5c <pbuf_alloc>
 800a6ca:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 8098 	beq.w	800a804 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	895b      	ldrh	r3, [r3, #10]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6dc:	3308      	adds	r3, #8
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d203      	bcs.n	800a6ea <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800a6e2:	69b8      	ldr	r0, [r7, #24]
 800a6e4:	f7f9 feac 	bl	8004440 <pbuf_free>
        goto icmperr;
 800a6e8:	e08d      	b.n	800a806 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 fab9 	bl	800bc6a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a6f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6fa:	425b      	negs	r3, r3
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	69b8      	ldr	r0, [r7, #24]
 800a704:	f7f9 fe78 	bl	80043f8 <pbuf_header>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a70e:	4b43      	ldr	r3, [pc, #268]	; (800a81c <icmp_input+0x1fc>)
 800a710:	22af      	movs	r2, #175	; 0xaf
 800a712:	4943      	ldr	r1, [pc, #268]	; (800a820 <icmp_input+0x200>)
 800a714:	4843      	ldr	r0, [pc, #268]	; (800a824 <icmp_input+0x204>)
 800a716:	f001 fabb 	bl	800bc90 <iprintf>
        pbuf_free(r);
 800a71a:	69b8      	ldr	r0, [r7, #24]
 800a71c:	f7f9 fe90 	bl	8004440 <pbuf_free>
        goto icmperr;
 800a720:	e071      	b.n	800a806 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	69b8      	ldr	r0, [r7, #24]
 800a726:	f7f9 ffaf 	bl	8004688 <pbuf_copy>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d003      	beq.n	800a738 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800a730:	69b8      	ldr	r0, [r7, #24]
 800a732:	f7f9 fe85 	bl	8004440 <pbuf_free>
        goto icmperr;
 800a736:	e066      	b.n	800a806 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7f9 fe81 	bl	8004440 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	607b      	str	r3, [r7, #4]
 800a742:	e015      	b.n	800a770 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a746:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800a74a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a74e:	33f2      	adds	r3, #242	; 0xf2
 800a750:	b29b      	uxth	r3, r3
 800a752:	b21b      	sxth	r3, r3
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7f9 fe4e 	bl	80043f8 <pbuf_header>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a762:	4b2e      	ldr	r3, [pc, #184]	; (800a81c <icmp_input+0x1fc>)
 800a764:	22c0      	movs	r2, #192	; 0xc0
 800a766:	4930      	ldr	r1, [pc, #192]	; (800a828 <icmp_input+0x208>)
 800a768:	482e      	ldr	r0, [pc, #184]	; (800a824 <icmp_input+0x204>)
 800a76a:	f001 fa91 	bl	800bc90 <iprintf>
        goto icmperr;
 800a76e:	e04a      	b.n	800a806 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a776:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7f9 fe3b 	bl	80043f8 <pbuf_header>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d12b      	bne.n	800a7e0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a796:	4b1f      	ldr	r3, [pc, #124]	; (800a814 <icmp_input+0x1f4>)
 800a798:	691a      	ldr	r2, [r3, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	709a      	strb	r2, [r3, #2]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	22ff      	movs	r2, #255	; 0xff
 800a7b2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	729a      	strb	r2, [r3, #10]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	9302      	str	r3, [sp, #8]
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	23ff      	movs	r3, #255	; 0xff
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	69f9      	ldr	r1, [r7, #28]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa5b 	bl	800ac8c <ip4_output_if>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a7da:	e001      	b.n	800a7e0 <icmp_input+0x1c0>
    break;
 800a7dc:	bf00      	nop
 800a7de:	e000      	b.n	800a7e2 <icmp_input+0x1c2>
    break;
 800a7e0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7f9 fe2c 	bl	8004440 <pbuf_free>
  return;
 800a7e8:	e011      	b.n	800a80e <icmp_input+0x1ee>
    goto lenerr;
 800a7ea:	bf00      	nop
 800a7ec:	e002      	b.n	800a7f4 <icmp_input+0x1d4>
    goto lenerr;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <icmp_input+0x1d4>
      goto lenerr;
 800a7f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7f9 fe23 	bl	8004440 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a7fa:	e008      	b.n	800a80e <icmp_input+0x1ee>
      goto icmperr;
 800a7fc:	bf00      	nop
 800a7fe:	e002      	b.n	800a806 <icmp_input+0x1e6>
      goto icmperr;
 800a800:	bf00      	nop
 800a802:	e000      	b.n	800a806 <icmp_input+0x1e6>
        goto icmperr;
 800a804:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7f9 fe1a 	bl	8004440 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a80c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a80e:	3728      	adds	r7, #40	; 0x28
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	2000334c 	.word	0x2000334c
 800a818:	20003360 	.word	0x20003360
 800a81c:	0800e314 	.word	0x0800e314
 800a820:	0800e34c 	.word	0x0800e34c
 800a824:	0800e384 	.word	0x0800e384
 800a828:	0800e3ac 	.word	0x0800e3ac

0800a82c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	461a      	mov	r2, r3
 800a83c:	2103      	movs	r1, #3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f814 	bl	800a86c <icmp_send_response>
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	461a      	mov	r2, r3
 800a85c:	210b      	movs	r1, #11
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f804 	bl	800a86c <icmp_send_response>
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af04      	add	r7, sp, #16
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
 800a878:	4613      	mov	r3, r2
 800a87a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a87c:	2200      	movs	r2, #0
 800a87e:	2124      	movs	r1, #36	; 0x24
 800a880:	2001      	movs	r0, #1
 800a882:	f7f9 fa6b 	bl	8003d5c <pbuf_alloc>
 800a886:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d04c      	beq.n	800a928 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	895b      	ldrh	r3, [r3, #10]
 800a892:	2b23      	cmp	r3, #35	; 0x23
 800a894:	d806      	bhi.n	800a8a4 <icmp_send_response+0x38>
 800a896:	4b26      	ldr	r3, [pc, #152]	; (800a930 <icmp_send_response+0xc4>)
 800a898:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a89c:	4925      	ldr	r1, [pc, #148]	; (800a934 <icmp_send_response+0xc8>)
 800a89e:	4826      	ldr	r0, [pc, #152]	; (800a938 <icmp_send_response+0xcc>)
 800a8a0:	f001 f9f6 	bl	800bc90 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	78fa      	ldrb	r2, [r7, #3]
 800a8b4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	78ba      	ldrb	r2, [r7, #2]
 800a8ba:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	711a      	strb	r2, [r3, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	719a      	strb	r2, [r3, #6]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f103 0008 	add.w	r0, r3, #8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	221c      	movs	r2, #28
 800a8de:	4619      	mov	r1, r3
 800a8e0:	f001 f9c3 	bl	800bc6a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a8ea:	f107 030c 	add.w	r3, r7, #12
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f824 	bl	800a93c <ip4_route>
 800a8f4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d011      	beq.n	800a920 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2200      	movs	r2, #0
 800a900:	709a      	strb	r2, [r3, #2]
 800a902:	2200      	movs	r2, #0
 800a904:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a906:	f107 020c 	add.w	r2, r7, #12
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	9302      	str	r3, [sp, #8]
 800a90e:	2301      	movs	r3, #1
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	2300      	movs	r3, #0
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	23ff      	movs	r3, #255	; 0xff
 800a918:	2100      	movs	r1, #0
 800a91a:	69f8      	ldr	r0, [r7, #28]
 800a91c:	f000 f9b6 	bl	800ac8c <ip4_output_if>
  }
  pbuf_free(q);
 800a920:	69f8      	ldr	r0, [r7, #28]
 800a922:	f7f9 fd8d 	bl	8004440 <pbuf_free>
 800a926:	e000      	b.n	800a92a <icmp_send_response+0xbe>
    return;
 800a928:	bf00      	nop
}
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	0800e314 	.word	0x0800e314
 800a934:	0800e3e0 	.word	0x0800e3e0
 800a938:	0800e384 	.word	0x0800e384

0800a93c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a944:	4b30      	ldr	r3, [pc, #192]	; (800aa08 <ip4_route+0xcc>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e036      	b.n	800a9ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d02b      	beq.n	800a9b4 <ip4_route+0x78>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d022      	beq.n	800a9b4 <ip4_route+0x78>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3304      	adds	r3, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01d      	beq.n	800a9b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3304      	adds	r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	405a      	eors	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3308      	adds	r3, #8
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4013      	ands	r3, r2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	e033      	b.n	800a9fc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d108      	bne.n	800a9b4 <ip4_route+0x78>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d101      	bne.n	800a9b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	e023      	b.n	800a9fc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1c5      	bne.n	800a94c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a9c0:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <ip4_route+0xd0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d015      	beq.n	800a9f4 <ip4_route+0xb8>
 800a9c8:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <ip4_route+0xd0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <ip4_route+0xb8>
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <ip4_route+0xd0>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a9e8:	4b08      	ldr	r3, [pc, #32]	; (800aa0c <ip4_route+0xd0>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e001      	b.n	800a9fc <ip4_route+0xc0>
  }

  return netif_default;
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <ip4_route+0xd0>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	2000686c 	.word	0x2000686c
 800aa0c:	20006870 	.word	0x20006870

0800aa10 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	091b      	lsrs	r3, r3, #4
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d004      	beq.n	800aa36 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f9 fd07 	bl	8004440 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	e122      	b.n	800ac7c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800aa42:	897b      	ldrh	r3, [r7, #10]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f8 fbd1 	bl	80031f6 <lwip_htons>
 800aa54:	4603      	mov	r3, r0
 800aa56:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	891b      	ldrh	r3, [r3, #8]
 800aa5c:	893a      	ldrh	r2, [r7, #8]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d204      	bcs.n	800aa6c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800aa62:	893b      	ldrh	r3, [r7, #8]
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f9 fb76 	bl	8004158 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	895b      	ldrh	r3, [r3, #10]
 800aa70:	897a      	ldrh	r2, [r7, #10]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d807      	bhi.n	800aa86 <ip4_input+0x76>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	891b      	ldrh	r3, [r3, #8]
 800aa7a:	893a      	ldrh	r2, [r7, #8]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d802      	bhi.n	800aa86 <ip4_input+0x76>
 800aa80:	897b      	ldrh	r3, [r7, #10]
 800aa82:	2b13      	cmp	r3, #19
 800aa84:	d804      	bhi.n	800aa90 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7f9 fcda 	bl	8004440 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e0f5      	b.n	800ac7c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	4a7b      	ldr	r2, [pc, #492]	; (800ac84 <ip4_input+0x274>)
 800aa96:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	4a79      	ldr	r2, [pc, #484]	; (800ac84 <ip4_input+0x274>)
 800aa9e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aaa0:	4b78      	ldr	r3, [pc, #480]	; (800ac84 <ip4_input+0x274>)
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaa8:	2be0      	cmp	r3, #224	; 0xe0
 800aaaa:	d112      	bne.n	800aad2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <ip4_input+0xbc>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <ip4_input+0xbc>
      netif = inp;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	e041      	b.n	800ab50 <ip4_input+0x140>
    } else {
      netif = NULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	e03e      	b.n	800ab50 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800aad2:	2301      	movs	r3, #1
 800aad4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d014      	beq.n	800ab14 <ip4_input+0x104>
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3304      	adds	r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00f      	beq.n	800ab14 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800aaf4:	4b63      	ldr	r3, [pc, #396]	; (800ac84 <ip4_input+0x274>)
 800aaf6:	695a      	ldr	r2, [r3, #20]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	3304      	adds	r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d026      	beq.n	800ab50 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ab02:	4b60      	ldr	r3, [pc, #384]	; (800ac84 <ip4_input+0x274>)
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	6939      	ldr	r1, [r7, #16]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 f991 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800ab0e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11d      	bne.n	800ab50 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ab1a:	4b5a      	ldr	r3, [pc, #360]	; (800ac84 <ip4_input+0x274>)
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b7f      	cmp	r3, #127	; 0x7f
 800ab22:	d102      	bne.n	800ab2a <ip4_input+0x11a>
          netif = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	613b      	str	r3, [r7, #16]
          break;
 800ab28:	e012      	b.n	800ab50 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800ab2e:	4b56      	ldr	r3, [pc, #344]	; (800ac88 <ip4_input+0x278>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	e002      	b.n	800ab3c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d102      	bne.n	800ab4a <ip4_input+0x13a>
        netif = netif->next;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1c4      	bne.n	800aada <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ab50:	4b4c      	ldr	r3, [pc, #304]	; (800ac84 <ip4_input+0x274>)
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 f96a 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ab62:	4b48      	ldr	r3, [pc, #288]	; (800ac84 <ip4_input+0x274>)
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ab6a:	2be0      	cmp	r3, #224	; 0xe0
 800ab6c:	d104      	bne.n	800ab78 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f9 fc66 	bl	8004440 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	e081      	b.n	800ac7c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d104      	bne.n	800ab88 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7f9 fc5e 	bl	8004440 <pbuf_free>
    return ERR_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e079      	b.n	800ac7c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	88db      	ldrh	r3, [r3, #6]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ab94:	4013      	ands	r3, r2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fc8e 	bl	800b4bc <ip4_reass>
 800aba0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <ip4_input+0x19c>
      return ERR_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	e067      	b.n	800ac7c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800abb2:	4a34      	ldr	r2, [pc, #208]	; (800ac84 <ip4_input+0x274>)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800abb8:	4a32      	ldr	r2, [pc, #200]	; (800ac84 <ip4_input+0x274>)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800abbe:	4a31      	ldr	r2, [pc, #196]	; (800ac84 <ip4_input+0x274>)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	b29b      	uxth	r3, r3
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <ip4_input+0x274>)
 800abd6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800abd8:	897b      	ldrh	r3, [r7, #10]
 800abda:	425b      	negs	r3, r3
 800abdc:	b29b      	uxth	r3, r3
 800abde:	b21b      	sxth	r3, r3
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7f9 fc08 	bl	80043f8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	7a5b      	ldrb	r3, [r3, #9]
 800abec:	2b06      	cmp	r3, #6
 800abee:	d009      	beq.n	800ac04 <ip4_input+0x1f4>
 800abf0:	2b11      	cmp	r3, #17
 800abf2:	d002      	beq.n	800abfa <ip4_input+0x1ea>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d00a      	beq.n	800ac0e <ip4_input+0x1fe>
 800abf8:	e00e      	b.n	800ac18 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7fe fce3 	bl	80095c8 <udp_input>
      break;
 800ac02:	e028      	b.n	800ac56 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fb f9b8 	bl	8005f7c <tcp_input>
      break;
 800ac0c:	e023      	b.n	800ac56 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff fd05 	bl	800a620 <icmp_input>
      break;
 800ac16:	e01e      	b.n	800ac56 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ac18:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <ip4_input+0x274>)
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	6939      	ldr	r1, [r7, #16]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 f906 	bl	800ae30 <ip4_addr_isbroadcast_u32>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d112      	bne.n	800ac50 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ac2a:	4b16      	ldr	r3, [pc, #88]	; (800ac84 <ip4_input+0x274>)
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ac32:	2be0      	cmp	r3, #224	; 0xe0
 800ac34:	d00c      	beq.n	800ac50 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ac36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7f9 fbed 	bl	800441c <pbuf_header_force>
        p->payload = iphdr;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ac48:	2102      	movs	r1, #2
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fdee 	bl	800a82c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7f9 fbf5 	bl	8004440 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ac56:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <ip4_input+0x274>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <ip4_input+0x274>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ac62:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <ip4_input+0x274>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <ip4_input+0x274>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <ip4_input+0x274>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ac74:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <ip4_input+0x274>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	2000334c 	.word	0x2000334c
 800ac88:	2000686c 	.word	0x2000686c

0800ac8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	; 0x28
 800ac90:	af04      	add	r7, sp, #16
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d009      	beq.n	800acb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <ip4_output_if+0x26>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	3304      	adds	r3, #4
 800acb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800acb8:	78fa      	ldrb	r2, [r7, #3]
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	4613      	mov	r3, r2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6979      	ldr	r1, [r7, #20]
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f805 	bl	800ace0 <ip4_output_if_src>
 800acd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3718      	adds	r7, #24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	89db      	ldrh	r3, [r3, #14]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d006      	beq.n	800ad04 <ip4_output_if_src+0x24>
 800acf6:	4b48      	ldr	r3, [pc, #288]	; (800ae18 <ip4_output_if_src+0x138>)
 800acf8:	f240 3233 	movw	r2, #819	; 0x333
 800acfc:	4947      	ldr	r1, [pc, #284]	; (800ae1c <ip4_output_if_src+0x13c>)
 800acfe:	4848      	ldr	r0, [pc, #288]	; (800ae20 <ip4_output_if_src+0x140>)
 800ad00:	f000 ffc6 	bl	800bc90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d060      	beq.n	800adcc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ad0a:	2314      	movs	r3, #20
 800ad0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800ad0e:	2114      	movs	r1, #20
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7f9 fb71 	bl	80043f8 <pbuf_header>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ad1c:	f06f 0301 	mvn.w	r3, #1
 800ad20:	e075      	b.n	800ae0e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	895b      	ldrh	r3, [r3, #10]
 800ad2c:	2b13      	cmp	r3, #19
 800ad2e:	d806      	bhi.n	800ad3e <ip4_output_if_src+0x5e>
 800ad30:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <ip4_output_if_src+0x138>)
 800ad32:	f240 3261 	movw	r2, #865	; 0x361
 800ad36:	493b      	ldr	r1, [pc, #236]	; (800ae24 <ip4_output_if_src+0x144>)
 800ad38:	4839      	ldr	r0, [pc, #228]	; (800ae20 <ip4_output_if_src+0x140>)
 800ad3a:	f000 ffa9 	bl	800bc90 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ad4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ad54:	8b7b      	ldrh	r3, [r7, #26]
 800ad56:	089b      	lsrs	r3, r3, #2
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ad6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	891b      	ldrh	r3, [r3, #8]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f8 fa3f 	bl	80031f6 <lwip_htons>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2200      	movs	r2, #0
 800ad84:	719a      	strb	r2, [r3, #6]
 800ad86:	2200      	movs	r2, #0
 800ad88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ad8a:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <ip4_output_if_src+0x148>)
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f8 fa31 	bl	80031f6 <lwip_htons>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ad9c:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <ip4_output_if_src+0x148>)
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	4b20      	ldr	r3, [pc, #128]	; (800ae28 <ip4_output_if_src+0x148>)
 800ada6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d104      	bne.n	800adb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800adae:	4b1f      	ldr	r3, [pc, #124]	; (800ae2c <ip4_output_if_src+0x14c>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	60da      	str	r2, [r3, #12]
 800adb6:	e003      	b.n	800adc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	2200      	movs	r2, #0
 800adc4:	729a      	strb	r2, [r3, #10]
 800adc6:	2200      	movs	r2, #0
 800adc8:	72da      	strb	r2, [r3, #11]
 800adca:	e008      	b.n	800adde <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800add8:	f107 0314 	add.w	r3, r7, #20
 800addc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00c      	beq.n	800ae00 <ip4_output_if_src+0x120>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	891a      	ldrh	r2, [r3, #8]
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800adee:	429a      	cmp	r2, r3
 800adf0:	d906      	bls.n	800ae00 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fd0a 	bl	800b810 <ip4_frag>
 800adfc:	4603      	mov	r3, r0
 800adfe:	e006      	b.n	800ae0e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae0a:	4798      	blx	r3
 800ae0c:	4603      	mov	r3, r0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	0800e40c 	.word	0x0800e40c
 800ae1c:	0800e440 	.word	0x0800e440
 800ae20:	0800e44c 	.word	0x0800e44c
 800ae24:	0800e474 	.word	0x0800e474
 800ae28:	200001fe 	.word	0x200001fe
 800ae2c:	0800e808 	.word	0x0800e808

0800ae30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d002      	beq.n	800ae4c <ip4_addr_isbroadcast_u32+0x1c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e02a      	b.n	800aea6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e021      	b.n	800aea6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	3304      	adds	r3, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d101      	bne.n	800ae72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e019      	b.n	800aea6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	3304      	adds	r3, #4
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	405a      	eors	r2, r3
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4013      	ands	r3, r2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10d      	bne.n	800aea4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	3308      	adds	r3, #8
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	43da      	mvns	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d101      	bne.n	800aea4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e000      	b.n	800aea6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800aea4:	2300      	movs	r3, #0
  }
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <ip_reass_tmr+0x54>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800aec4:	e018      	b.n	800aef8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	7fdb      	ldrb	r3, [r3, #31]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00b      	beq.n	800aee6 <ip_reass_tmr+0x32>
      r->timer--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	7fdb      	ldrb	r3, [r3, #31]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e008      	b.n	800aef8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800aef0:	68b9      	ldr	r1, [r7, #8]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f80a 	bl	800af0c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e3      	bne.n	800aec6 <ip_reass_tmr+0x12>
     }
   }
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000200 	.word	0x20000200

0800af0c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d105      	bne.n	800af2e <ip_reass_free_complete_datagram+0x22>
 800af22:	4b45      	ldr	r3, [pc, #276]	; (800b038 <ip_reass_free_complete_datagram+0x12c>)
 800af24:	22ab      	movs	r2, #171	; 0xab
 800af26:	4945      	ldr	r1, [pc, #276]	; (800b03c <ip_reass_free_complete_datagram+0x130>)
 800af28:	4845      	ldr	r0, [pc, #276]	; (800b040 <ip_reass_free_complete_datagram+0x134>)
 800af2a:	f000 feb1 	bl	800bc90 <iprintf>
  if (prev != NULL) {
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00a      	beq.n	800af4a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d005      	beq.n	800af4a <ip_reass_free_complete_datagram+0x3e>
 800af3e:	4b3e      	ldr	r3, [pc, #248]	; (800b038 <ip_reass_free_complete_datagram+0x12c>)
 800af40:	22ad      	movs	r2, #173	; 0xad
 800af42:	4940      	ldr	r1, [pc, #256]	; (800b044 <ip_reass_free_complete_datagram+0x138>)
 800af44:	483e      	ldr	r0, [pc, #248]	; (800b040 <ip_reass_free_complete_datagram+0x134>)
 800af46:	f000 fea3 	bl	800bc90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	889b      	ldrh	r3, [r3, #4]
 800af56:	b29b      	uxth	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d12a      	bne.n	800afb2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	6858      	ldr	r0, [r3, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3308      	adds	r3, #8
 800af72:	2214      	movs	r2, #20
 800af74:	4619      	mov	r1, r3
 800af76:	f000 fe78 	bl	800bc6a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800af7a:	2101      	movs	r1, #1
 800af7c:	69b8      	ldr	r0, [r7, #24]
 800af7e:	f7ff fc65 	bl	800a84c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800af82:	69b8      	ldr	r0, [r7, #24]
 800af84:	f7f9 faf0 	bl	8004568 <pbuf_clen>
 800af88:	4603      	mov	r3, r0
 800af8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800af8c:	8bfa      	ldrh	r2, [r7, #30]
 800af8e:	8a7b      	ldrh	r3, [r7, #18]
 800af90:	4413      	add	r3, r2
 800af92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af96:	db05      	blt.n	800afa4 <ip_reass_free_complete_datagram+0x98>
 800af98:	4b27      	ldr	r3, [pc, #156]	; (800b038 <ip_reass_free_complete_datagram+0x12c>)
 800af9a:	22bc      	movs	r2, #188	; 0xbc
 800af9c:	492a      	ldr	r1, [pc, #168]	; (800b048 <ip_reass_free_complete_datagram+0x13c>)
 800af9e:	4828      	ldr	r0, [pc, #160]	; (800b040 <ip_reass_free_complete_datagram+0x134>)
 800afa0:	f000 fe76 	bl	800bc90 <iprintf>
    pbufs_freed += clen;
 800afa4:	8bfa      	ldrh	r2, [r7, #30]
 800afa6:	8a7b      	ldrh	r3, [r7, #18]
 800afa8:	4413      	add	r3, r2
 800afaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800afac:	69b8      	ldr	r0, [r7, #24]
 800afae:	f7f9 fa47 	bl	8004440 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800afb8:	e01f      	b.n	800affa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7f9 facc 	bl	8004568 <pbuf_clen>
 800afd0:	4603      	mov	r3, r0
 800afd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800afd4:	8bfa      	ldrh	r2, [r7, #30]
 800afd6:	8a7b      	ldrh	r3, [r7, #18]
 800afd8:	4413      	add	r3, r2
 800afda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afde:	db05      	blt.n	800afec <ip_reass_free_complete_datagram+0xe0>
 800afe0:	4b15      	ldr	r3, [pc, #84]	; (800b038 <ip_reass_free_complete_datagram+0x12c>)
 800afe2:	22cc      	movs	r2, #204	; 0xcc
 800afe4:	4918      	ldr	r1, [pc, #96]	; (800b048 <ip_reass_free_complete_datagram+0x13c>)
 800afe6:	4816      	ldr	r0, [pc, #88]	; (800b040 <ip_reass_free_complete_datagram+0x134>)
 800afe8:	f000 fe52 	bl	800bc90 <iprintf>
    pbufs_freed += clen;
 800afec:	8bfa      	ldrh	r2, [r7, #30]
 800afee:	8a7b      	ldrh	r3, [r7, #18]
 800aff0:	4413      	add	r3, r2
 800aff2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7f9 fa23 	bl	8004440 <pbuf_free>
  while (p != NULL) {
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1dc      	bne.n	800afba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f8c2 	bl	800b18c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b008:	4b10      	ldr	r3, [pc, #64]	; (800b04c <ip_reass_free_complete_datagram+0x140>)
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	8bfa      	ldrh	r2, [r7, #30]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d905      	bls.n	800b01e <ip_reass_free_complete_datagram+0x112>
 800b012:	4b09      	ldr	r3, [pc, #36]	; (800b038 <ip_reass_free_complete_datagram+0x12c>)
 800b014:	22d2      	movs	r2, #210	; 0xd2
 800b016:	490e      	ldr	r1, [pc, #56]	; (800b050 <ip_reass_free_complete_datagram+0x144>)
 800b018:	4809      	ldr	r0, [pc, #36]	; (800b040 <ip_reass_free_complete_datagram+0x134>)
 800b01a:	f000 fe39 	bl	800bc90 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800b01e:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <ip_reass_free_complete_datagram+0x140>)
 800b020:	881a      	ldrh	r2, [r3, #0]
 800b022:	8bfb      	ldrh	r3, [r7, #30]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b29a      	uxth	r2, r3
 800b028:	4b08      	ldr	r3, [pc, #32]	; (800b04c <ip_reass_free_complete_datagram+0x140>)
 800b02a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b02c:	8bfb      	ldrh	r3, [r7, #30]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	0800e4a4 	.word	0x0800e4a4
 800b03c:	0800e4e0 	.word	0x0800e4e0
 800b040:	0800e4ec 	.word	0x0800e4ec
 800b044:	0800e514 	.word	0x0800e514
 800b048:	0800e528 	.word	0x0800e528
 800b04c:	20000204 	.word	0x20000204
 800b050:	0800e548 	.word	0x0800e548

0800b054 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08a      	sub	sp, #40	; 0x28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b072:	4b28      	ldr	r3, [pc, #160]	; (800b114 <ip_reass_remove_oldest_datagram+0xc0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b078:	e030      	b.n	800b0dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	695a      	ldr	r2, [r3, #20]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	429a      	cmp	r2, r3
 800b084:	d10c      	bne.n	800b0a0 <ip_reass_remove_oldest_datagram+0x4c>
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d106      	bne.n	800b0a0 <ip_reass_remove_oldest_datagram+0x4c>
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	899a      	ldrh	r2, [r3, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	889b      	ldrh	r3, [r3, #4]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d014      	beq.n	800b0ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d104      	bne.n	800b0b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e009      	b.n	800b0ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	7fda      	ldrb	r2, [r3, #31]
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	7fdb      	ldrb	r3, [r3, #31]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d803      	bhi.n	800b0ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1cb      	bne.n	800b07a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d008      	beq.n	800b0fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	6a38      	ldr	r0, [r7, #32]
 800b0ec:	f7ff ff0e 	bl	800af0c <ip_reass_free_complete_datagram>
 800b0f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	da02      	bge.n	800b108 <ip_reass_remove_oldest_datagram+0xb4>
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b01      	cmp	r3, #1
 800b106:	dcac      	bgt.n	800b062 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b108:	697b      	ldr	r3, [r7, #20]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3728      	adds	r7, #40	; 0x28
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20000200 	.word	0x20000200

0800b118 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b122:	2004      	movs	r0, #4
 800b124:	f7f8 fc16 	bl	8003954 <memp_malloc>
 800b128:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d110      	bne.n	800b152 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff ff8e 	bl	800b054 <ip_reass_remove_oldest_datagram>
 800b138:	4602      	mov	r2, r0
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	4293      	cmp	r3, r2
 800b13e:	dc03      	bgt.n	800b148 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b140:	2004      	movs	r0, #4
 800b142:	f7f8 fc07 	bl	8003954 <memp_malloc>
 800b146:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	e016      	b.n	800b180 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b152:	2220      	movs	r2, #32
 800b154:	2100      	movs	r1, #0
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f000 fd92 	bl	800bc80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2203      	movs	r2, #3
 800b160:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <ip_reass_enqueue_new_datagram+0x70>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b16a:	4a07      	ldr	r2, [pc, #28]	; (800b188 <ip_reass_enqueue_new_datagram+0x70>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3308      	adds	r3, #8
 800b174:	2214      	movs	r2, #20
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fd76 	bl	800bc6a <memcpy>
  return ipr;
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20000200 	.word	0x20000200

0800b18c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <ip_reass_dequeue_datagram+0x4c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d104      	bne.n	800b1aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a0c      	ldr	r2, [pc, #48]	; (800b1d8 <ip_reass_dequeue_datagram+0x4c>)
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	e00d      	b.n	800b1c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <ip_reass_dequeue_datagram+0x32>
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <ip_reass_dequeue_datagram+0x50>)
 800b1b2:	f240 1245 	movw	r2, #325	; 0x145
 800b1b6:	490a      	ldr	r1, [pc, #40]	; (800b1e0 <ip_reass_dequeue_datagram+0x54>)
 800b1b8:	480a      	ldr	r0, [pc, #40]	; (800b1e4 <ip_reass_dequeue_datagram+0x58>)
 800b1ba:	f000 fd69 	bl	800bc90 <iprintf>
    prev->next = ipr->next;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b1c6:	6879      	ldr	r1, [r7, #4]
 800b1c8:	2004      	movs	r0, #4
 800b1ca:	f7f8 fc0f 	bl	80039ec <memp_free>
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20000200 	.word	0x20000200
 800b1dc:	0800e4a4 	.word	0x0800e4a4
 800b1e0:	0800e564 	.word	0x0800e564
 800b1e4:	0800e4ec 	.word	0x0800e4ec

0800b1e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	; 0x30
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	b29b      	uxth	r3, r3
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f7 fff4 	bl	80031f6 <lwip_htons>
 800b20e:	4603      	mov	r3, r0
 800b210:	461a      	mov	r2, r3
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b29b      	uxth	r3, r3
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	b29b      	uxth	r3, r3
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	88db      	ldrh	r3, [r3, #6]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7f7 ffe2 	bl	80031f6 <lwip_htons>
 800b232:	4603      	mov	r3, r0
 800b234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b238:	b29b      	uxth	r3, r3
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	2200      	movs	r2, #0
 800b24c:	705a      	strb	r2, [r3, #1]
 800b24e:	2200      	movs	r2, #0
 800b250:	709a      	strb	r2, [r3, #2]
 800b252:	2200      	movs	r2, #0
 800b254:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	8b3a      	ldrh	r2, [r7, #24]
 800b25a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800b25c:	8b3a      	ldrh	r2, [r7, #24]
 800b25e:	8b7b      	ldrh	r3, [r7, #26]
 800b260:	4413      	add	r3, r2
 800b262:	b29a      	uxth	r2, r3
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
 800b26e:	e061      	b.n	800b334 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	889b      	ldrh	r3, [r3, #4]
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	889b      	ldrh	r3, [r3, #4]
 800b280:	b29b      	uxth	r3, r3
 800b282:	429a      	cmp	r2, r3
 800b284:	d232      	bcs.n	800b2ec <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01f      	beq.n	800b2d2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	889b      	ldrh	r3, [r3, #4]
 800b296:	b29a      	uxth	r2, r3
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	88db      	ldrh	r3, [r3, #6]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	f0c0 80e3 	bcc.w	800b46a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800b2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a6:	88db      	ldrh	r3, [r3, #6]
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	889b      	ldrh	r3, [r3, #4]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	f200 80da 	bhi.w	800b46a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	88db      	ldrh	r3, [r3, #6]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	889b      	ldrh	r3, [r3, #4]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d037      	beq.n	800b33c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b2d0:	e034      	b.n	800b33c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d4:	88db      	ldrh	r3, [r3, #6]
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	889b      	ldrh	r3, [r3, #4]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	f200 80c5 	bhi.w	800b46e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	605a      	str	r2, [r3, #4]
      break;
 800b2ea:	e027      	b.n	800b33c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	889b      	ldrh	r3, [r3, #4]
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	889b      	ldrh	r3, [r3, #4]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	f000 80ba 	beq.w	800b472 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	889b      	ldrh	r3, [r3, #4]
 800b302:	b29a      	uxth	r2, r3
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	88db      	ldrh	r3, [r3, #6]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	429a      	cmp	r2, r3
 800b30c:	f0c0 80b3 	bcc.w	800b476 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	88db      	ldrh	r3, [r3, #6]
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	889b      	ldrh	r3, [r3, #4]
 800b320:	b29b      	uxth	r3, r3
 800b322:	429a      	cmp	r2, r3
 800b324:	d001      	beq.n	800b32a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d19a      	bne.n	800b270 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800b33a:	e000      	b.n	800b33e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800b33c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	2b00      	cmp	r3, #0
 800b342:	d12d      	bne.n	800b3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01c      	beq.n	800b384 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	b29a      	uxth	r2, r3
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	889b      	ldrh	r3, [r3, #4]
 800b354:	b29b      	uxth	r3, r3
 800b356:	429a      	cmp	r2, r3
 800b358:	d906      	bls.n	800b368 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800b35a:	4b51      	ldr	r3, [pc, #324]	; (800b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b35c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b360:	4950      	ldr	r1, [pc, #320]	; (800b4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b362:	4851      	ldr	r0, [pc, #324]	; (800b4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b364:	f000 fc94 	bl	800bc90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	b29a      	uxth	r2, r3
 800b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b376:	889b      	ldrh	r3, [r3, #4]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d010      	beq.n	800b3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	623b      	str	r3, [r7, #32]
 800b382:	e00d      	b.n	800b3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d006      	beq.n	800b39a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800b38c:	4b44      	ldr	r3, [pc, #272]	; (800b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b38e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800b392:	4946      	ldr	r1, [pc, #280]	; (800b4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b394:	4844      	ldr	r0, [pc, #272]	; (800b4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b396:	f000 fc7b 	bl	800bc90 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	7f9b      	ldrb	r3, [r3, #30]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d059      	beq.n	800b466 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d04f      	beq.n	800b458 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d006      	beq.n	800b3ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	889b      	ldrh	r3, [r3, #4]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	e041      	b.n	800b458 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b3de:	e012      	b.n	800b406 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	88db      	ldrh	r3, [r3, #6]
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	889b      	ldrh	r3, [r3, #4]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d002      	beq.n	800b3fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	623b      	str	r3, [r7, #32]
            break;
 800b3fa:	e007      	b.n	800b40c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e9      	bne.n	800b3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d022      	beq.n	800b458 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b41c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800b420:	4923      	ldr	r1, [pc, #140]	; (800b4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b422:	4821      	ldr	r0, [pc, #132]	; (800b4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b424:	f000 fc34 	bl	800bc90 <iprintf>
          LWIP_ASSERT("sanity check",
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b430:	429a      	cmp	r2, r3
 800b432:	d106      	bne.n	800b442 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800b434:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b436:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b43a:	491d      	ldr	r1, [pc, #116]	; (800b4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b43c:	481a      	ldr	r0, [pc, #104]	; (800b4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b43e:	f000 fc27 	bl	800bc90 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d006      	beq.n	800b458 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800b44a:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b44c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b450:	4918      	ldr	r1, [pc, #96]	; (800b4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b452:	4815      	ldr	r0, [pc, #84]	; (800b4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b454:	f000 fc1c 	bl	800bc90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bf14      	ite	ne
 800b45e:	2301      	movne	r3, #1
 800b460:	2300      	moveq	r3, #0
 800b462:	b2db      	uxtb	r3, r3
 800b464:	e018      	b.n	800b498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b466:	2300      	movs	r3, #0
 800b468:	e016      	b.n	800b498 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800b46a:	bf00      	nop
 800b46c:	e004      	b.n	800b478 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800b46e:	bf00      	nop
 800b470:	e002      	b.n	800b478 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800b476:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7f9 f875 	bl	8004568 <pbuf_clen>
 800b47e:	4603      	mov	r3, r0
 800b480:	461a      	mov	r2, r3
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	b29a      	uxth	r2, r3
 800b48a:	4b0b      	ldr	r3, [pc, #44]	; (800b4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800b48c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800b48e:	68b8      	ldr	r0, [r7, #8]
 800b490:	f7f8 ffd6 	bl	8004440 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b494:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3730      	adds	r7, #48	; 0x30
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	0800e4a4 	.word	0x0800e4a4
 800b4a4:	0800e580 	.word	0x0800e580
 800b4a8:	0800e4ec 	.word	0x0800e4ec
 800b4ac:	0800e5a0 	.word	0x0800e5a0
 800b4b0:	0800e5d8 	.word	0x0800e5d8
 800b4b4:	0800e5e8 	.word	0x0800e5e8
 800b4b8:	20000204 	.word	0x20000204

0800b4bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08e      	sub	sp, #56	; 0x38
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	f003 030f 	and.w	r3, r3, #15
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	2b14      	cmp	r3, #20
 800b4d6:	f040 8131 	bne.w	800b73c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f7 fe88 	bl	80031f6 <lwip_htons>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	885b      	ldrh	r3, [r3, #2]
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f7 fe7c 	bl	80031f6 <lwip_htons>
 800b4fe:	4603      	mov	r3, r0
 800b500:	461a      	mov	r2, r3
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	f003 030f 	and.w	r3, r3, #15
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	b29b      	uxth	r3, r3
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7f9 f826 	bl	8004568 <pbuf_clen>
 800b51c:	4603      	mov	r3, r0
 800b51e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b520:	4b8d      	ldr	r3, [pc, #564]	; (800b758 <ip4_reass+0x29c>)
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b528:	4413      	add	r3, r2
 800b52a:	2b0a      	cmp	r3, #10
 800b52c:	dd10      	ble.n	800b550 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b52e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b530:	4619      	mov	r1, r3
 800b532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b534:	f7ff fd8e 	bl	800b054 <ip_reass_remove_oldest_datagram>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 8100 	beq.w	800b740 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b540:	4b85      	ldr	r3, [pc, #532]	; (800b758 <ip4_reass+0x29c>)
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b548:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b54a:	2b0a      	cmp	r3, #10
 800b54c:	f300 80f8 	bgt.w	800b740 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b550:	4b82      	ldr	r3, [pc, #520]	; (800b75c <ip4_reass+0x2a0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	633b      	str	r3, [r7, #48]	; 0x30
 800b556:	e015      	b.n	800b584 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	695a      	ldr	r2, [r3, #20]
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	429a      	cmp	r2, r3
 800b562:	d10c      	bne.n	800b57e <ip4_reass+0xc2>
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	699a      	ldr	r2, [r3, #24]
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d106      	bne.n	800b57e <ip4_reass+0xc2>
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	899a      	ldrh	r2, [r3, #12]
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	889b      	ldrh	r3, [r3, #4]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d006      	beq.n	800b58c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	633b      	str	r3, [r7, #48]	; 0x30
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e6      	bne.n	800b558 <ip4_reass+0x9c>
 800b58a:	e000      	b.n	800b58e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b58c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	2b00      	cmp	r3, #0
 800b592:	d109      	bne.n	800b5a8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b596:	4619      	mov	r1, r3
 800b598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b59a:	f7ff fdbd 	bl	800b118 <ip_reass_enqueue_new_datagram>
 800b59e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d11c      	bne.n	800b5e0 <ip4_reass+0x124>
      goto nullreturn;
 800b5a6:	e0ce      	b.n	800b746 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	88db      	ldrh	r3, [r3, #6]
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f7 fe21 	bl	80031f6 <lwip_htons>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d110      	bne.n	800b5e0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	89db      	ldrh	r3, [r3, #14]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f7 fe17 	bl	80031f6 <lwip_htons>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d006      	beq.n	800b5e0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	2214      	movs	r2, #20
 800b5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fb45 	bl	800bc6a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	88db      	ldrh	r3, [r3, #6]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	f003 0320 	and.w	r3, r3, #32
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	bf0c      	ite	eq
 800b5ee:	2301      	moveq	r3, #1
 800b5f0:	2300      	movne	r3, #0
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00e      	beq.n	800b61a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800b5fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b5fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b600:	4413      	add	r3, r2
 800b602:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b604:	8b7a      	ldrh	r2, [r7, #26]
 800b606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b608:	429a      	cmp	r2, r3
 800b60a:	f0c0 8099 	bcc.w	800b740 <ip4_reass+0x284>
 800b60e:	8b7b      	ldrh	r3, [r7, #26]
 800b610:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b614:	4293      	cmp	r3, r2
 800b616:	f200 8093 	bhi.w	800b740 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b61a:	69fa      	ldr	r2, [r7, #28]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b620:	f7ff fde2 	bl	800b1e8 <ip_reass_chain_frag_into_datagram_and_validate>
 800b624:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	f000 808a 	beq.w	800b744 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b630:	4b49      	ldr	r3, [pc, #292]	; (800b758 <ip4_reass+0x29c>)
 800b632:	881a      	ldrh	r2, [r3, #0]
 800b634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b636:	4413      	add	r3, r2
 800b638:	b29a      	uxth	r2, r3
 800b63a:	4b47      	ldr	r3, [pc, #284]	; (800b758 <ip4_reass+0x29c>)
 800b63c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00d      	beq.n	800b660 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800b644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b648:	4413      	add	r3, r2
 800b64a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	8a7a      	ldrh	r2, [r7, #18]
 800b650:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	7f9b      	ldrb	r3, [r3, #30]
 800b656:	f043 0301 	orr.w	r3, r3, #1
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d168      	bne.n	800b738 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	8b9b      	ldrh	r3, [r3, #28]
 800b66a:	3314      	adds	r3, #20
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	3308      	adds	r3, #8
 800b688:	2214      	movs	r2, #20
 800b68a:	4619      	mov	r1, r3
 800b68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b68e:	f000 faec 	bl	800bc6a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	8b9b      	ldrh	r3, [r3, #28]
 800b696:	4618      	mov	r0, r3
 800b698:	f7f7 fdad 	bl	80031f6 <lwip_htons>
 800b69c:	4603      	mov	r3, r0
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	719a      	strb	r2, [r3, #6]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	729a      	strb	r2, [r3, #10]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b6be:	e00e      	b.n	800b6de <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800b6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800b6c6:	f06f 0113 	mvn.w	r1, #19
 800b6ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6cc:	f7f8 fe94 	bl	80043f8 <pbuf_header>
      pbuf_cat(p, r);
 800b6d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7f8 ff82 	bl	80045dc <pbuf_cat>
      r = iprh->next_pbuf;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1ed      	bne.n	800b6c0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b6e4:	4b1d      	ldr	r3, [pc, #116]	; (800b75c <ip4_reass+0x2a0>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d102      	bne.n	800b6f4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6f2:	e010      	b.n	800b716 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b6f4:	4b19      	ldr	r3, [pc, #100]	; (800b75c <ip4_reass+0x2a0>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6fa:	e007      	b.n	800b70c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b702:	429a      	cmp	r2, r3
 800b704:	d006      	beq.n	800b714 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f4      	bne.n	800b6fc <ip4_reass+0x240>
 800b712:	e000      	b.n	800b716 <ip4_reass+0x25a>
          break;
 800b714:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b71a:	f7ff fd37 	bl	800b18c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7f8 ff22 	bl	8004568 <pbuf_clen>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <ip4_reass+0x29c>)
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <ip4_reass+0x29c>)
 800b732:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	e00a      	b.n	800b74e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b738:	2300      	movs	r3, #0
 800b73a:	e008      	b.n	800b74e <ip4_reass+0x292>
    goto nullreturn;
 800b73c:	bf00      	nop
 800b73e:	e002      	b.n	800b746 <ip4_reass+0x28a>

nullreturn:
 800b740:	bf00      	nop
 800b742:	e000      	b.n	800b746 <ip4_reass+0x28a>
    goto nullreturn;
 800b744:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7f8 fe7a 	bl	8004440 <pbuf_free>
  return NULL;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3738      	adds	r7, #56	; 0x38
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000204 	.word	0x20000204
 800b75c:	20000200 	.word	0x20000200

0800b760 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b764:	2005      	movs	r0, #5
 800b766:	f7f8 f8f5 	bl	8003954 <memp_malloc>
 800b76a:	4603      	mov	r3, r0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <ip_frag_free_pbuf_custom_ref+0x1c>
 800b77e:	4b07      	ldr	r3, [pc, #28]	; (800b79c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b780:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b784:	4906      	ldr	r1, [pc, #24]	; (800b7a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b786:	4807      	ldr	r0, [pc, #28]	; (800b7a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800b788:	f000 fa82 	bl	800bc90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	2005      	movs	r0, #5
 800b790:	f7f8 f92c 	bl	80039ec <memp_free>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	0800e4a4 	.word	0x0800e4a4
 800b7a0:	0800e60c 	.word	0x0800e60c
 800b7a4:	0800e4ec 	.word	0x0800e4ec

0800b7a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <ipfrag_free_pbuf_custom+0x20>
 800b7ba:	4b11      	ldr	r3, [pc, #68]	; (800b800 <ipfrag_free_pbuf_custom+0x58>)
 800b7bc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b7c0:	4910      	ldr	r1, [pc, #64]	; (800b804 <ipfrag_free_pbuf_custom+0x5c>)
 800b7c2:	4811      	ldr	r0, [pc, #68]	; (800b808 <ipfrag_free_pbuf_custom+0x60>)
 800b7c4:	f000 fa64 	bl	800bc90 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d006      	beq.n	800b7de <ipfrag_free_pbuf_custom+0x36>
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <ipfrag_free_pbuf_custom+0x58>)
 800b7d2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800b7d6:	490d      	ldr	r1, [pc, #52]	; (800b80c <ipfrag_free_pbuf_custom+0x64>)
 800b7d8:	480b      	ldr	r0, [pc, #44]	; (800b808 <ipfrag_free_pbuf_custom+0x60>)
 800b7da:	f000 fa59 	bl	800bc90 <iprintf>
  if (pcr->original != NULL) {
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f8 fe28 	bl	8004440 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f7ff ffbd 	bl	800b770 <ip_frag_free_pbuf_custom_ref>
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	0800e4a4 	.word	0x0800e4a4
 800b804:	0800e618 	.word	0x0800e618
 800b808:	0800e4ec 	.word	0x0800e4ec
 800b80c:	0800e624 	.word	0x0800e624

0800b810 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b092      	sub	sp, #72	; 0x48
 800b814:	af02      	add	r7, sp, #8
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b824:	3b14      	subs	r3, #20
 800b826:	2b00      	cmp	r3, #0
 800b828:	da00      	bge.n	800b82c <ip4_frag+0x1c>
 800b82a:	3307      	adds	r3, #7
 800b82c:	10db      	asrs	r3, r3, #3
 800b82e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b830:	2314      	movs	r3, #20
 800b832:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	2b14      	cmp	r3, #20
 800b84a:	d009      	beq.n	800b860 <ip4_frag+0x50>
 800b84c:	4b79      	ldr	r3, [pc, #484]	; (800ba34 <ip4_frag+0x224>)
 800b84e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b852:	4979      	ldr	r1, [pc, #484]	; (800ba38 <ip4_frag+0x228>)
 800b854:	4879      	ldr	r0, [pc, #484]	; (800ba3c <ip4_frag+0x22c>)
 800b856:	f000 fa1b 	bl	800bc90 <iprintf>
 800b85a:	f06f 0305 	mvn.w	r3, #5
 800b85e:	e0e5      	b.n	800ba2c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	88db      	ldrh	r3, [r3, #6]
 800b864:	b29b      	uxth	r3, r3
 800b866:	4618      	mov	r0, r3
 800b868:	f7f7 fcc5 	bl	80031f6 <lwip_htons>
 800b86c:	4603      	mov	r3, r0
 800b86e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800b870:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b876:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b878:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b87a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <ip4_frag+0x86>
 800b882:	4b6c      	ldr	r3, [pc, #432]	; (800ba34 <ip4_frag+0x224>)
 800b884:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b888:	496d      	ldr	r1, [pc, #436]	; (800ba40 <ip4_frag+0x230>)
 800b88a:	486c      	ldr	r0, [pc, #432]	; (800ba3c <ip4_frag+0x22c>)
 800b88c:	f000 fa00 	bl	800bc90 <iprintf>
 800b890:	f06f 0305 	mvn.w	r3, #5
 800b894:	e0ca      	b.n	800ba2c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	3b14      	subs	r3, #20
 800b89c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800b89e:	e0bc      	b.n	800ba1a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800b8a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b8a2:	00da      	lsls	r2, r3, #3
 800b8a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bfa8      	it	ge
 800b8aa:	4613      	movge	r3, r2
 800b8ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2114      	movs	r1, #20
 800b8b2:	2002      	movs	r0, #2
 800b8b4:	f7f8 fa52 	bl	8003d5c <pbuf_alloc>
 800b8b8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 80b2 	beq.w	800ba26 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	895b      	ldrh	r3, [r3, #10]
 800b8c6:	2b13      	cmp	r3, #19
 800b8c8:	d806      	bhi.n	800b8d8 <ip4_frag+0xc8>
 800b8ca:	4b5a      	ldr	r3, [pc, #360]	; (800ba34 <ip4_frag+0x224>)
 800b8cc:	f240 3209 	movw	r2, #777	; 0x309
 800b8d0:	495c      	ldr	r1, [pc, #368]	; (800ba44 <ip4_frag+0x234>)
 800b8d2:	485a      	ldr	r0, [pc, #360]	; (800ba3c <ip4_frag+0x22c>)
 800b8d4:	f000 f9dc 	bl	800bc90 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2214      	movs	r2, #20
 800b8de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f9c2 	bl	800bc6a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800b8ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800b8f0:	e04f      	b.n	800b992 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	895a      	ldrh	r2, [r3, #10]
 800b8f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b8fc:	8b7a      	ldrh	r2, [r7, #26]
 800b8fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b900:	4293      	cmp	r3, r2
 800b902:	bf28      	it	cs
 800b904:	4613      	movcs	r3, r2
 800b906:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d105      	bne.n	800b91a <ip4_frag+0x10a>
        poff = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
        continue;
 800b918:	e03b      	b.n	800b992 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b91a:	f7ff ff21 	bl	800b760 <ip_frag_alloc_pbuf_custom_ref>
 800b91e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d103      	bne.n	800b92e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800b926:	6a38      	ldr	r0, [r7, #32]
 800b928:	f7f8 fd8a 	bl	8004440 <pbuf_free>
        goto memerr;
 800b92c:	e07c      	b.n	800ba28 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b92e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b936:	4413      	add	r3, r2
 800b938:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800b93a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b93c:	9201      	str	r2, [sp, #4]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	4603      	mov	r3, r0
 800b942:	2202      	movs	r2, #2
 800b944:	2004      	movs	r0, #4
 800b946:	f7f8 fb9d 	bl	8004084 <pbuf_alloced_custom>
 800b94a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b952:	6978      	ldr	r0, [r7, #20]
 800b954:	f7ff ff0c 	bl	800b770 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b958:	6a38      	ldr	r0, [r7, #32]
 800b95a:	f7f8 fd71 	bl	8004440 <pbuf_free>
        goto memerr;
 800b95e:	e063      	b.n	800ba28 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7f8 fe19 	bl	8004598 <pbuf_ref>
      pcr->original = p;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	4a36      	ldr	r2, [pc, #216]	; (800ba48 <ip4_frag+0x238>)
 800b970:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b972:	6939      	ldr	r1, [r7, #16]
 800b974:	6a38      	ldr	r0, [r7, #32]
 800b976:	f7f8 fe31 	bl	80045dc <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b97a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b97c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800b982:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <ip4_frag+0x182>
        poff = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1ac      	bne.n	800b8f2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800b998:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b99a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b99c:	4413      	add	r3, r2
 800b99e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b9a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b9a6:	3b14      	subs	r3, #20
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	bfd4      	ite	le
 800b9ac:	2301      	movle	r3, #1
 800b9ae:	2300      	movgt	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b9b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b9b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9ba:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800b9c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b9c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b9c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b9ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f7 fc12 	bl	80031f6 <lwip_htons>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b9da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9dc:	3314      	adds	r3, #20
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7f7 fc08 	bl	80031f6 <lwip_htons>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	729a      	strb	r2, [r3, #10]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	6a39      	ldr	r1, [r7, #32]
 800ba00:	68b8      	ldr	r0, [r7, #8]
 800ba02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ba04:	6a38      	ldr	r0, [r7, #32]
 800ba06:	f7f8 fd1b 	bl	8004440 <pbuf_free>
    left -= fragsize;
 800ba0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ba0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800ba12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ba14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ba16:	4413      	add	r3, r2
 800ba18:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800ba1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f47f af3f 	bne.w	800b8a0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e002      	b.n	800ba2c <ip4_frag+0x21c>
      goto memerr;
 800ba26:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3740      	adds	r7, #64	; 0x40
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	0800e4a4 	.word	0x0800e4a4
 800ba38:	0800e630 	.word	0x0800e630
 800ba3c:	0800e4ec 	.word	0x0800e4ec
 800ba40:	0800e658 	.word	0x0800e658
 800ba44:	0800e674 	.word	0x0800e674
 800ba48:	0800b7a9 	.word	0x0800b7a9

0800ba4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800ba56:	230e      	movs	r3, #14
 800ba58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	895b      	ldrh	r3, [r3, #10]
 800ba5e:	2b0e      	cmp	r3, #14
 800ba60:	d977      	bls.n	800bb52 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	7b1a      	ldrb	r2, [r3, #12]
 800ba6c:	7b5b      	ldrb	r3, [r3, #13]
 800ba6e:	021b      	lsls	r3, r3, #8
 800ba70:	4313      	orrs	r3, r2
 800ba72:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d023      	beq.n	800bac8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d10f      	bne.n	800baa8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	785b      	ldrb	r3, [r3, #1]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11b      	bne.n	800bac8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ba94:	2b5e      	cmp	r3, #94	; 0x5e
 800ba96:	d117      	bne.n	800bac8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	7b5b      	ldrb	r3, [r3, #13]
 800ba9c:	f043 0310 	orr.w	r3, r3, #16
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	735a      	strb	r2, [r3, #13]
 800baa6:	e00f      	b.n	800bac8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	2206      	movs	r2, #6
 800baac:	4930      	ldr	r1, [pc, #192]	; (800bb70 <ethernet_input+0x124>)
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f8cc 	bl	800bc4c <memcmp>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7b5b      	ldrb	r3, [r3, #13]
 800babe:	f043 0308 	orr.w	r3, r3, #8
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800bac8:	89fb      	ldrh	r3, [r7, #14]
 800baca:	2b08      	cmp	r3, #8
 800bacc:	d003      	beq.n	800bad6 <ethernet_input+0x8a>
 800bace:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800bad2:	d01e      	beq.n	800bb12 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800bad4:	e044      	b.n	800bb60 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d038      	beq.n	800bb56 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	461a      	mov	r2, r3
 800baea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800baee:	429a      	cmp	r2, r3
 800baf0:	db33      	blt.n	800bb5a <ethernet_input+0x10e>
 800baf2:	8afb      	ldrh	r3, [r7, #22]
 800baf4:	425b      	negs	r3, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	b21b      	sxth	r3, r3
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7f8 fc7b 	bl	80043f8 <pbuf_header>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d128      	bne.n	800bb5a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7fe ff80 	bl	800aa10 <ip4_input>
      break;
 800bb10:	e01d      	b.n	800bb4e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bb18:	f003 0308 	and.w	r3, r3, #8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01e      	beq.n	800bb5e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	895b      	ldrh	r3, [r3, #10]
 800bb24:	461a      	mov	r2, r3
 800bb26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	db15      	blt.n	800bb5a <ethernet_input+0x10e>
 800bb2e:	8afb      	ldrh	r3, [r7, #22]
 800bb30:	425b      	negs	r3, r3
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	b21b      	sxth	r3, r3
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7f8 fc5d 	bl	80043f8 <pbuf_header>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7fe f94e 	bl	8009de8 <etharp_input>
      break;
 800bb4c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e00a      	b.n	800bb68 <ethernet_input+0x11c>
    goto free_and_return;
 800bb52:	bf00      	nop
 800bb54:	e004      	b.n	800bb60 <ethernet_input+0x114>
        goto free_and_return;
 800bb56:	bf00      	nop
 800bb58:	e002      	b.n	800bb60 <ethernet_input+0x114>

free_and_return:
 800bb5a:	bf00      	nop
 800bb5c:	e000      	b.n	800bb60 <ethernet_input+0x114>
        goto free_and_return;
 800bb5e:	bf00      	nop
  pbuf_free(p);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7f8 fc6d 	bl	8004440 <pbuf_free>
  return ERR_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0800e80c 	.word	0x0800e80c

0800bb74 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800bb82:	8c3b      	ldrh	r3, [r7, #32]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7f7 fb36 	bl	80031f6 <lwip_htons>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800bb8e:	210e      	movs	r1, #14
 800bb90:	68b8      	ldr	r0, [r7, #8]
 800bb92:	f7f8 fc31 	bl	80043f8 <pbuf_header>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d125      	bne.n	800bbe8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	8afa      	ldrh	r2, [r7, #22]
 800bba6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2206      	movs	r2, #6
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f85b 	bl	800bc6a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3306      	adds	r3, #6
 800bbb8:	2206      	movs	r2, #6
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 f854 	bl	800bc6a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbc8:	2b06      	cmp	r3, #6
 800bbca:	d006      	beq.n	800bbda <ethernet_output+0x66>
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <ethernet_output+0x84>)
 800bbce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bbd2:	490a      	ldr	r1, [pc, #40]	; (800bbfc <ethernet_output+0x88>)
 800bbd4:	480a      	ldr	r0, [pc, #40]	; (800bc00 <ethernet_output+0x8c>)
 800bbd6:	f000 f85b 	bl	800bc90 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	4798      	blx	r3
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	e002      	b.n	800bbee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800bbe8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800bbea:	f06f 0301 	mvn.w	r3, #1
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800e694 	.word	0x0800e694
 800bbfc:	0800e6cc 	.word	0x0800e6cc
 800bc00:	0800e700 	.word	0x0800e700

0800bc04 <__libc_init_array>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	4e0d      	ldr	r6, [pc, #52]	; (800bc3c <__libc_init_array+0x38>)
 800bc08:	4c0d      	ldr	r4, [pc, #52]	; (800bc40 <__libc_init_array+0x3c>)
 800bc0a:	1ba4      	subs	r4, r4, r6
 800bc0c:	10a4      	asrs	r4, r4, #2
 800bc0e:	2500      	movs	r5, #0
 800bc10:	42a5      	cmp	r5, r4
 800bc12:	d109      	bne.n	800bc28 <__libc_init_array+0x24>
 800bc14:	4e0b      	ldr	r6, [pc, #44]	; (800bc44 <__libc_init_array+0x40>)
 800bc16:	4c0c      	ldr	r4, [pc, #48]	; (800bc48 <__libc_init_array+0x44>)
 800bc18:	f000 ff1e 	bl	800ca58 <_init>
 800bc1c:	1ba4      	subs	r4, r4, r6
 800bc1e:	10a4      	asrs	r4, r4, #2
 800bc20:	2500      	movs	r5, #0
 800bc22:	42a5      	cmp	r5, r4
 800bc24:	d105      	bne.n	800bc32 <__libc_init_array+0x2e>
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc2c:	4798      	blx	r3
 800bc2e:	3501      	adds	r5, #1
 800bc30:	e7ee      	b.n	800bc10 <__libc_init_array+0xc>
 800bc32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc36:	4798      	blx	r3
 800bc38:	3501      	adds	r5, #1
 800bc3a:	e7f2      	b.n	800bc22 <__libc_init_array+0x1e>
 800bc3c:	0800e8bc 	.word	0x0800e8bc
 800bc40:	0800e8bc 	.word	0x0800e8bc
 800bc44:	0800e8bc 	.word	0x0800e8bc
 800bc48:	0800e8c0 	.word	0x0800e8c0

0800bc4c <memcmp>:
 800bc4c:	b530      	push	{r4, r5, lr}
 800bc4e:	2400      	movs	r4, #0
 800bc50:	42a2      	cmp	r2, r4
 800bc52:	d101      	bne.n	800bc58 <memcmp+0xc>
 800bc54:	2000      	movs	r0, #0
 800bc56:	e007      	b.n	800bc68 <memcmp+0x1c>
 800bc58:	5d03      	ldrb	r3, [r0, r4]
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	190d      	adds	r5, r1, r4
 800bc5e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bc62:	42ab      	cmp	r3, r5
 800bc64:	d0f4      	beq.n	800bc50 <memcmp+0x4>
 800bc66:	1b58      	subs	r0, r3, r5
 800bc68:	bd30      	pop	{r4, r5, pc}

0800bc6a <memcpy>:
 800bc6a:	b510      	push	{r4, lr}
 800bc6c:	1e43      	subs	r3, r0, #1
 800bc6e:	440a      	add	r2, r1
 800bc70:	4291      	cmp	r1, r2
 800bc72:	d100      	bne.n	800bc76 <memcpy+0xc>
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc7e:	e7f7      	b.n	800bc70 <memcpy+0x6>

0800bc80 <memset>:
 800bc80:	4402      	add	r2, r0
 800bc82:	4603      	mov	r3, r0
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d100      	bne.n	800bc8a <memset+0xa>
 800bc88:	4770      	bx	lr
 800bc8a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc8e:	e7f9      	b.n	800bc84 <memset+0x4>

0800bc90 <iprintf>:
 800bc90:	b40f      	push	{r0, r1, r2, r3}
 800bc92:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <iprintf+0x2c>)
 800bc94:	b513      	push	{r0, r1, r4, lr}
 800bc96:	681c      	ldr	r4, [r3, #0]
 800bc98:	b124      	cbz	r4, 800bca4 <iprintf+0x14>
 800bc9a:	69a3      	ldr	r3, [r4, #24]
 800bc9c:	b913      	cbnz	r3, 800bca4 <iprintf+0x14>
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 f84e 	bl	800bd40 <__sinit>
 800bca4:	ab05      	add	r3, sp, #20
 800bca6:	9a04      	ldr	r2, [sp, #16]
 800bca8:	68a1      	ldr	r1, [r4, #8]
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	4620      	mov	r0, r4
 800bcae:	f000 f9a3 	bl	800bff8 <_vfiprintf_r>
 800bcb2:	b002      	add	sp, #8
 800bcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcb8:	b004      	add	sp, #16
 800bcba:	4770      	bx	lr
 800bcbc:	20000014 	.word	0x20000014

0800bcc0 <std>:
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcca:	6083      	str	r3, [r0, #8]
 800bccc:	8181      	strh	r1, [r0, #12]
 800bcce:	6643      	str	r3, [r0, #100]	; 0x64
 800bcd0:	81c2      	strh	r2, [r0, #14]
 800bcd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcd6:	6183      	str	r3, [r0, #24]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	2208      	movs	r2, #8
 800bcdc:	305c      	adds	r0, #92	; 0x5c
 800bcde:	f7ff ffcf 	bl	800bc80 <memset>
 800bce2:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <std+0x38>)
 800bce4:	6263      	str	r3, [r4, #36]	; 0x24
 800bce6:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <std+0x3c>)
 800bce8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcea:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <std+0x40>)
 800bcec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcee:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <std+0x44>)
 800bcf0:	6224      	str	r4, [r4, #32]
 800bcf2:	6323      	str	r3, [r4, #48]	; 0x30
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0800c555 	.word	0x0800c555
 800bcfc:	0800c577 	.word	0x0800c577
 800bd00:	0800c5af 	.word	0x0800c5af
 800bd04:	0800c5d3 	.word	0x0800c5d3

0800bd08 <_cleanup_r>:
 800bd08:	4901      	ldr	r1, [pc, #4]	; (800bd10 <_cleanup_r+0x8>)
 800bd0a:	f000 b885 	b.w	800be18 <_fwalk_reent>
 800bd0e:	bf00      	nop
 800bd10:	0800c8ad 	.word	0x0800c8ad

0800bd14 <__sfmoreglue>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	1e4a      	subs	r2, r1, #1
 800bd18:	2568      	movs	r5, #104	; 0x68
 800bd1a:	4355      	muls	r5, r2
 800bd1c:	460e      	mov	r6, r1
 800bd1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd22:	f000 f8e5 	bl	800bef0 <_malloc_r>
 800bd26:	4604      	mov	r4, r0
 800bd28:	b140      	cbz	r0, 800bd3c <__sfmoreglue+0x28>
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd30:	300c      	adds	r0, #12
 800bd32:	60a0      	str	r0, [r4, #8]
 800bd34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd38:	f7ff ffa2 	bl	800bc80 <memset>
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	bd70      	pop	{r4, r5, r6, pc}

0800bd40 <__sinit>:
 800bd40:	6983      	ldr	r3, [r0, #24]
 800bd42:	b510      	push	{r4, lr}
 800bd44:	4604      	mov	r4, r0
 800bd46:	bb33      	cbnz	r3, 800bd96 <__sinit+0x56>
 800bd48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bd4c:	6503      	str	r3, [r0, #80]	; 0x50
 800bd4e:	4b12      	ldr	r3, [pc, #72]	; (800bd98 <__sinit+0x58>)
 800bd50:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <__sinit+0x5c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6282      	str	r2, [r0, #40]	; 0x28
 800bd56:	4298      	cmp	r0, r3
 800bd58:	bf04      	itt	eq
 800bd5a:	2301      	moveq	r3, #1
 800bd5c:	6183      	streq	r3, [r0, #24]
 800bd5e:	f000 f81f 	bl	800bda0 <__sfp>
 800bd62:	6060      	str	r0, [r4, #4]
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 f81b 	bl	800bda0 <__sfp>
 800bd6a:	60a0      	str	r0, [r4, #8]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f817 	bl	800bda0 <__sfp>
 800bd72:	2200      	movs	r2, #0
 800bd74:	60e0      	str	r0, [r4, #12]
 800bd76:	2104      	movs	r1, #4
 800bd78:	6860      	ldr	r0, [r4, #4]
 800bd7a:	f7ff ffa1 	bl	800bcc0 <std>
 800bd7e:	2201      	movs	r2, #1
 800bd80:	2109      	movs	r1, #9
 800bd82:	68a0      	ldr	r0, [r4, #8]
 800bd84:	f7ff ff9c 	bl	800bcc0 <std>
 800bd88:	2202      	movs	r2, #2
 800bd8a:	2112      	movs	r1, #18
 800bd8c:	68e0      	ldr	r0, [r4, #12]
 800bd8e:	f7ff ff97 	bl	800bcc0 <std>
 800bd92:	2301      	movs	r3, #1
 800bd94:	61a3      	str	r3, [r4, #24]
 800bd96:	bd10      	pop	{r4, pc}
 800bd98:	0800e81c 	.word	0x0800e81c
 800bd9c:	0800bd09 	.word	0x0800bd09

0800bda0 <__sfp>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	4b1b      	ldr	r3, [pc, #108]	; (800be10 <__sfp+0x70>)
 800bda4:	681e      	ldr	r6, [r3, #0]
 800bda6:	69b3      	ldr	r3, [r6, #24]
 800bda8:	4607      	mov	r7, r0
 800bdaa:	b913      	cbnz	r3, 800bdb2 <__sfp+0x12>
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff ffc7 	bl	800bd40 <__sinit>
 800bdb2:	3648      	adds	r6, #72	; 0x48
 800bdb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	d503      	bpl.n	800bdc4 <__sfp+0x24>
 800bdbc:	6833      	ldr	r3, [r6, #0]
 800bdbe:	b133      	cbz	r3, 800bdce <__sfp+0x2e>
 800bdc0:	6836      	ldr	r6, [r6, #0]
 800bdc2:	e7f7      	b.n	800bdb4 <__sfp+0x14>
 800bdc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bdc8:	b16d      	cbz	r5, 800bde6 <__sfp+0x46>
 800bdca:	3468      	adds	r4, #104	; 0x68
 800bdcc:	e7f4      	b.n	800bdb8 <__sfp+0x18>
 800bdce:	2104      	movs	r1, #4
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff ff9f 	bl	800bd14 <__sfmoreglue>
 800bdd6:	6030      	str	r0, [r6, #0]
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d1f1      	bne.n	800bdc0 <__sfp+0x20>
 800bddc:	230c      	movs	r3, #12
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	4604      	mov	r4, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <__sfp+0x74>)
 800bde8:	6665      	str	r5, [r4, #100]	; 0x64
 800bdea:	e9c4 5500 	strd	r5, r5, [r4]
 800bdee:	60a5      	str	r5, [r4, #8]
 800bdf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bdf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be00:	f7ff ff3e 	bl	800bc80 <memset>
 800be04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be0c:	e7e9      	b.n	800bde2 <__sfp+0x42>
 800be0e:	bf00      	nop
 800be10:	0800e81c 	.word	0x0800e81c
 800be14:	ffff0001 	.word	0xffff0001

0800be18 <_fwalk_reent>:
 800be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be24:	2600      	movs	r6, #0
 800be26:	b914      	cbnz	r4, 800be2e <_fwalk_reent+0x16>
 800be28:	4630      	mov	r0, r6
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800be32:	3f01      	subs	r7, #1
 800be34:	d501      	bpl.n	800be3a <_fwalk_reent+0x22>
 800be36:	6824      	ldr	r4, [r4, #0]
 800be38:	e7f5      	b.n	800be26 <_fwalk_reent+0xe>
 800be3a:	89ab      	ldrh	r3, [r5, #12]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d907      	bls.n	800be50 <_fwalk_reent+0x38>
 800be40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be44:	3301      	adds	r3, #1
 800be46:	d003      	beq.n	800be50 <_fwalk_reent+0x38>
 800be48:	4629      	mov	r1, r5
 800be4a:	4640      	mov	r0, r8
 800be4c:	47c8      	blx	r9
 800be4e:	4306      	orrs	r6, r0
 800be50:	3568      	adds	r5, #104	; 0x68
 800be52:	e7ee      	b.n	800be32 <_fwalk_reent+0x1a>

0800be54 <_free_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4605      	mov	r5, r0
 800be58:	2900      	cmp	r1, #0
 800be5a:	d045      	beq.n	800bee8 <_free_r+0x94>
 800be5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be60:	1f0c      	subs	r4, r1, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	bfb8      	it	lt
 800be66:	18e4      	addlt	r4, r4, r3
 800be68:	f000 fdc0 	bl	800c9ec <__malloc_lock>
 800be6c:	4a1f      	ldr	r2, [pc, #124]	; (800beec <_free_r+0x98>)
 800be6e:	6813      	ldr	r3, [r2, #0]
 800be70:	4610      	mov	r0, r2
 800be72:	b933      	cbnz	r3, 800be82 <_free_r+0x2e>
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	6014      	str	r4, [r2, #0]
 800be78:	4628      	mov	r0, r5
 800be7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be7e:	f000 bdb6 	b.w	800c9ee <__malloc_unlock>
 800be82:	42a3      	cmp	r3, r4
 800be84:	d90c      	bls.n	800bea0 <_free_r+0x4c>
 800be86:	6821      	ldr	r1, [r4, #0]
 800be88:	1862      	adds	r2, r4, r1
 800be8a:	4293      	cmp	r3, r2
 800be8c:	bf04      	itt	eq
 800be8e:	681a      	ldreq	r2, [r3, #0]
 800be90:	685b      	ldreq	r3, [r3, #4]
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	bf04      	itt	eq
 800be96:	1852      	addeq	r2, r2, r1
 800be98:	6022      	streq	r2, [r4, #0]
 800be9a:	6004      	str	r4, [r0, #0]
 800be9c:	e7ec      	b.n	800be78 <_free_r+0x24>
 800be9e:	4613      	mov	r3, r2
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	b10a      	cbz	r2, 800bea8 <_free_r+0x54>
 800bea4:	42a2      	cmp	r2, r4
 800bea6:	d9fa      	bls.n	800be9e <_free_r+0x4a>
 800bea8:	6819      	ldr	r1, [r3, #0]
 800beaa:	1858      	adds	r0, r3, r1
 800beac:	42a0      	cmp	r0, r4
 800beae:	d10b      	bne.n	800bec8 <_free_r+0x74>
 800beb0:	6820      	ldr	r0, [r4, #0]
 800beb2:	4401      	add	r1, r0
 800beb4:	1858      	adds	r0, r3, r1
 800beb6:	4282      	cmp	r2, r0
 800beb8:	6019      	str	r1, [r3, #0]
 800beba:	d1dd      	bne.n	800be78 <_free_r+0x24>
 800bebc:	6810      	ldr	r0, [r2, #0]
 800bebe:	6852      	ldr	r2, [r2, #4]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	4401      	add	r1, r0
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	e7d7      	b.n	800be78 <_free_r+0x24>
 800bec8:	d902      	bls.n	800bed0 <_free_r+0x7c>
 800beca:	230c      	movs	r3, #12
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	e7d3      	b.n	800be78 <_free_r+0x24>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	1821      	adds	r1, r4, r0
 800bed4:	428a      	cmp	r2, r1
 800bed6:	bf04      	itt	eq
 800bed8:	6811      	ldreq	r1, [r2, #0]
 800beda:	6852      	ldreq	r2, [r2, #4]
 800bedc:	6062      	str	r2, [r4, #4]
 800bede:	bf04      	itt	eq
 800bee0:	1809      	addeq	r1, r1, r0
 800bee2:	6021      	streq	r1, [r4, #0]
 800bee4:	605c      	str	r4, [r3, #4]
 800bee6:	e7c7      	b.n	800be78 <_free_r+0x24>
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	20000208 	.word	0x20000208

0800bef0 <_malloc_r>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	1ccd      	adds	r5, r1, #3
 800bef4:	f025 0503 	bic.w	r5, r5, #3
 800bef8:	3508      	adds	r5, #8
 800befa:	2d0c      	cmp	r5, #12
 800befc:	bf38      	it	cc
 800befe:	250c      	movcc	r5, #12
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	4606      	mov	r6, r0
 800bf04:	db01      	blt.n	800bf0a <_malloc_r+0x1a>
 800bf06:	42a9      	cmp	r1, r5
 800bf08:	d903      	bls.n	800bf12 <_malloc_r+0x22>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	2000      	movs	r0, #0
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	f000 fd6b 	bl	800c9ec <__malloc_lock>
 800bf16:	4a21      	ldr	r2, [pc, #132]	; (800bf9c <_malloc_r+0xac>)
 800bf18:	6814      	ldr	r4, [r2, #0]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	b991      	cbnz	r1, 800bf44 <_malloc_r+0x54>
 800bf1e:	4c20      	ldr	r4, [pc, #128]	; (800bfa0 <_malloc_r+0xb0>)
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	b91b      	cbnz	r3, 800bf2c <_malloc_r+0x3c>
 800bf24:	4630      	mov	r0, r6
 800bf26:	f000 fb05 	bl	800c534 <_sbrk_r>
 800bf2a:	6020      	str	r0, [r4, #0]
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 fb00 	bl	800c534 <_sbrk_r>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d124      	bne.n	800bf82 <_malloc_r+0x92>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	6033      	str	r3, [r6, #0]
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f000 fd56 	bl	800c9ee <__malloc_unlock>
 800bf42:	e7e4      	b.n	800bf0e <_malloc_r+0x1e>
 800bf44:	680b      	ldr	r3, [r1, #0]
 800bf46:	1b5b      	subs	r3, r3, r5
 800bf48:	d418      	bmi.n	800bf7c <_malloc_r+0x8c>
 800bf4a:	2b0b      	cmp	r3, #11
 800bf4c:	d90f      	bls.n	800bf6e <_malloc_r+0x7e>
 800bf4e:	600b      	str	r3, [r1, #0]
 800bf50:	50cd      	str	r5, [r1, r3]
 800bf52:	18cc      	adds	r4, r1, r3
 800bf54:	4630      	mov	r0, r6
 800bf56:	f000 fd4a 	bl	800c9ee <__malloc_unlock>
 800bf5a:	f104 000b 	add.w	r0, r4, #11
 800bf5e:	1d23      	adds	r3, r4, #4
 800bf60:	f020 0007 	bic.w	r0, r0, #7
 800bf64:	1ac3      	subs	r3, r0, r3
 800bf66:	d0d3      	beq.n	800bf10 <_malloc_r+0x20>
 800bf68:	425a      	negs	r2, r3
 800bf6a:	50e2      	str	r2, [r4, r3]
 800bf6c:	e7d0      	b.n	800bf10 <_malloc_r+0x20>
 800bf6e:	428c      	cmp	r4, r1
 800bf70:	684b      	ldr	r3, [r1, #4]
 800bf72:	bf16      	itet	ne
 800bf74:	6063      	strne	r3, [r4, #4]
 800bf76:	6013      	streq	r3, [r2, #0]
 800bf78:	460c      	movne	r4, r1
 800bf7a:	e7eb      	b.n	800bf54 <_malloc_r+0x64>
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	6849      	ldr	r1, [r1, #4]
 800bf80:	e7cc      	b.n	800bf1c <_malloc_r+0x2c>
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d005      	beq.n	800bf98 <_malloc_r+0xa8>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f000 fad0 	bl	800c534 <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d0cf      	beq.n	800bf38 <_malloc_r+0x48>
 800bf98:	6025      	str	r5, [r4, #0]
 800bf9a:	e7db      	b.n	800bf54 <_malloc_r+0x64>
 800bf9c:	20000208 	.word	0x20000208
 800bfa0:	2000020c 	.word	0x2000020c

0800bfa4 <__sfputc_r>:
 800bfa4:	6893      	ldr	r3, [r2, #8]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	b410      	push	{r4}
 800bfac:	6093      	str	r3, [r2, #8]
 800bfae:	da08      	bge.n	800bfc2 <__sfputc_r+0x1e>
 800bfb0:	6994      	ldr	r4, [r2, #24]
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	db01      	blt.n	800bfba <__sfputc_r+0x16>
 800bfb6:	290a      	cmp	r1, #10
 800bfb8:	d103      	bne.n	800bfc2 <__sfputc_r+0x1e>
 800bfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfbe:	f000 bb0d 	b.w	800c5dc <__swbuf_r>
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	1c58      	adds	r0, r3, #1
 800bfc6:	6010      	str	r0, [r2, #0]
 800bfc8:	7019      	strb	r1, [r3, #0]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <__sfputs_r>:
 800bfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	4614      	mov	r4, r2
 800bfda:	18d5      	adds	r5, r2, r3
 800bfdc:	42ac      	cmp	r4, r5
 800bfde:	d101      	bne.n	800bfe4 <__sfputs_r+0x12>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	e007      	b.n	800bff4 <__sfputs_r+0x22>
 800bfe4:	463a      	mov	r2, r7
 800bfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ffda 	bl	800bfa4 <__sfputc_r>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d1f3      	bne.n	800bfdc <__sfputs_r+0xa>
 800bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bff8 <_vfiprintf_r>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	460c      	mov	r4, r1
 800bffe:	b09d      	sub	sp, #116	; 0x74
 800c000:	4617      	mov	r7, r2
 800c002:	461d      	mov	r5, r3
 800c004:	4606      	mov	r6, r0
 800c006:	b118      	cbz	r0, 800c010 <_vfiprintf_r+0x18>
 800c008:	6983      	ldr	r3, [r0, #24]
 800c00a:	b90b      	cbnz	r3, 800c010 <_vfiprintf_r+0x18>
 800c00c:	f7ff fe98 	bl	800bd40 <__sinit>
 800c010:	4b7c      	ldr	r3, [pc, #496]	; (800c204 <_vfiprintf_r+0x20c>)
 800c012:	429c      	cmp	r4, r3
 800c014:	d158      	bne.n	800c0c8 <_vfiprintf_r+0xd0>
 800c016:	6874      	ldr	r4, [r6, #4]
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	0718      	lsls	r0, r3, #28
 800c01c:	d55e      	bpl.n	800c0dc <_vfiprintf_r+0xe4>
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d05b      	beq.n	800c0dc <_vfiprintf_r+0xe4>
 800c024:	2300      	movs	r3, #0
 800c026:	9309      	str	r3, [sp, #36]	; 0x24
 800c028:	2320      	movs	r3, #32
 800c02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c02e:	2330      	movs	r3, #48	; 0x30
 800c030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c034:	9503      	str	r5, [sp, #12]
 800c036:	f04f 0b01 	mov.w	fp, #1
 800c03a:	46b8      	mov	r8, r7
 800c03c:	4645      	mov	r5, r8
 800c03e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c042:	b10b      	cbz	r3, 800c048 <_vfiprintf_r+0x50>
 800c044:	2b25      	cmp	r3, #37	; 0x25
 800c046:	d154      	bne.n	800c0f2 <_vfiprintf_r+0xfa>
 800c048:	ebb8 0a07 	subs.w	sl, r8, r7
 800c04c:	d00b      	beq.n	800c066 <_vfiprintf_r+0x6e>
 800c04e:	4653      	mov	r3, sl
 800c050:	463a      	mov	r2, r7
 800c052:	4621      	mov	r1, r4
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff ffbc 	bl	800bfd2 <__sfputs_r>
 800c05a:	3001      	adds	r0, #1
 800c05c:	f000 80c2 	beq.w	800c1e4 <_vfiprintf_r+0x1ec>
 800c060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c062:	4453      	add	r3, sl
 800c064:	9309      	str	r3, [sp, #36]	; 0x24
 800c066:	f898 3000 	ldrb.w	r3, [r8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 80ba 	beq.w	800c1e4 <_vfiprintf_r+0x1ec>
 800c070:	2300      	movs	r3, #0
 800c072:	f04f 32ff 	mov.w	r2, #4294967295
 800c076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c07a:	9304      	str	r3, [sp, #16]
 800c07c:	9307      	str	r3, [sp, #28]
 800c07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c082:	931a      	str	r3, [sp, #104]	; 0x68
 800c084:	46a8      	mov	r8, r5
 800c086:	2205      	movs	r2, #5
 800c088:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c08c:	485e      	ldr	r0, [pc, #376]	; (800c208 <_vfiprintf_r+0x210>)
 800c08e:	f7f4 f8af 	bl	80001f0 <memchr>
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	bb78      	cbnz	r0, 800c0f6 <_vfiprintf_r+0xfe>
 800c096:	06d9      	lsls	r1, r3, #27
 800c098:	bf44      	itt	mi
 800c09a:	2220      	movmi	r2, #32
 800c09c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0a0:	071a      	lsls	r2, r3, #28
 800c0a2:	bf44      	itt	mi
 800c0a4:	222b      	movmi	r2, #43	; 0x2b
 800c0a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0aa:	782a      	ldrb	r2, [r5, #0]
 800c0ac:	2a2a      	cmp	r2, #42	; 0x2a
 800c0ae:	d02a      	beq.n	800c106 <_vfiprintf_r+0x10e>
 800c0b0:	9a07      	ldr	r2, [sp, #28]
 800c0b2:	46a8      	mov	r8, r5
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	250a      	movs	r5, #10
 800c0b8:	4641      	mov	r1, r8
 800c0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0be:	3b30      	subs	r3, #48	; 0x30
 800c0c0:	2b09      	cmp	r3, #9
 800c0c2:	d969      	bls.n	800c198 <_vfiprintf_r+0x1a0>
 800c0c4:	b360      	cbz	r0, 800c120 <_vfiprintf_r+0x128>
 800c0c6:	e024      	b.n	800c112 <_vfiprintf_r+0x11a>
 800c0c8:	4b50      	ldr	r3, [pc, #320]	; (800c20c <_vfiprintf_r+0x214>)
 800c0ca:	429c      	cmp	r4, r3
 800c0cc:	d101      	bne.n	800c0d2 <_vfiprintf_r+0xda>
 800c0ce:	68b4      	ldr	r4, [r6, #8]
 800c0d0:	e7a2      	b.n	800c018 <_vfiprintf_r+0x20>
 800c0d2:	4b4f      	ldr	r3, [pc, #316]	; (800c210 <_vfiprintf_r+0x218>)
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	bf08      	it	eq
 800c0d8:	68f4      	ldreq	r4, [r6, #12]
 800c0da:	e79d      	b.n	800c018 <_vfiprintf_r+0x20>
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f000 fae0 	bl	800c6a4 <__swsetup_r>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d09d      	beq.n	800c024 <_vfiprintf_r+0x2c>
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	b01d      	add	sp, #116	; 0x74
 800c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f2:	46a8      	mov	r8, r5
 800c0f4:	e7a2      	b.n	800c03c <_vfiprintf_r+0x44>
 800c0f6:	4a44      	ldr	r2, [pc, #272]	; (800c208 <_vfiprintf_r+0x210>)
 800c0f8:	1a80      	subs	r0, r0, r2
 800c0fa:	fa0b f000 	lsl.w	r0, fp, r0
 800c0fe:	4318      	orrs	r0, r3
 800c100:	9004      	str	r0, [sp, #16]
 800c102:	4645      	mov	r5, r8
 800c104:	e7be      	b.n	800c084 <_vfiprintf_r+0x8c>
 800c106:	9a03      	ldr	r2, [sp, #12]
 800c108:	1d11      	adds	r1, r2, #4
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	9103      	str	r1, [sp, #12]
 800c10e:	2a00      	cmp	r2, #0
 800c110:	db01      	blt.n	800c116 <_vfiprintf_r+0x11e>
 800c112:	9207      	str	r2, [sp, #28]
 800c114:	e004      	b.n	800c120 <_vfiprintf_r+0x128>
 800c116:	4252      	negs	r2, r2
 800c118:	f043 0302 	orr.w	r3, r3, #2
 800c11c:	9207      	str	r2, [sp, #28]
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	f898 3000 	ldrb.w	r3, [r8]
 800c124:	2b2e      	cmp	r3, #46	; 0x2e
 800c126:	d10e      	bne.n	800c146 <_vfiprintf_r+0x14e>
 800c128:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c12c:	2b2a      	cmp	r3, #42	; 0x2a
 800c12e:	d138      	bne.n	800c1a2 <_vfiprintf_r+0x1aa>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	1d1a      	adds	r2, r3, #4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	9203      	str	r2, [sp, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bfb8      	it	lt
 800c13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c140:	f108 0802 	add.w	r8, r8, #2
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	4d33      	ldr	r5, [pc, #204]	; (800c214 <_vfiprintf_r+0x21c>)
 800c148:	f898 1000 	ldrb.w	r1, [r8]
 800c14c:	2203      	movs	r2, #3
 800c14e:	4628      	mov	r0, r5
 800c150:	f7f4 f84e 	bl	80001f0 <memchr>
 800c154:	b140      	cbz	r0, 800c168 <_vfiprintf_r+0x170>
 800c156:	2340      	movs	r3, #64	; 0x40
 800c158:	1b40      	subs	r0, r0, r5
 800c15a:	fa03 f000 	lsl.w	r0, r3, r0
 800c15e:	9b04      	ldr	r3, [sp, #16]
 800c160:	4303      	orrs	r3, r0
 800c162:	f108 0801 	add.w	r8, r8, #1
 800c166:	9304      	str	r3, [sp, #16]
 800c168:	f898 1000 	ldrb.w	r1, [r8]
 800c16c:	482a      	ldr	r0, [pc, #168]	; (800c218 <_vfiprintf_r+0x220>)
 800c16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c172:	2206      	movs	r2, #6
 800c174:	f108 0701 	add.w	r7, r8, #1
 800c178:	f7f4 f83a 	bl	80001f0 <memchr>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d037      	beq.n	800c1f0 <_vfiprintf_r+0x1f8>
 800c180:	4b26      	ldr	r3, [pc, #152]	; (800c21c <_vfiprintf_r+0x224>)
 800c182:	bb1b      	cbnz	r3, 800c1cc <_vfiprintf_r+0x1d4>
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	3307      	adds	r3, #7
 800c188:	f023 0307 	bic.w	r3, r3, #7
 800c18c:	3308      	adds	r3, #8
 800c18e:	9303      	str	r3, [sp, #12]
 800c190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c192:	444b      	add	r3, r9
 800c194:	9309      	str	r3, [sp, #36]	; 0x24
 800c196:	e750      	b.n	800c03a <_vfiprintf_r+0x42>
 800c198:	fb05 3202 	mla	r2, r5, r2, r3
 800c19c:	2001      	movs	r0, #1
 800c19e:	4688      	mov	r8, r1
 800c1a0:	e78a      	b.n	800c0b8 <_vfiprintf_r+0xc0>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f108 0801 	add.w	r8, r8, #1
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	250a      	movs	r5, #10
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1b4:	3a30      	subs	r2, #48	; 0x30
 800c1b6:	2a09      	cmp	r2, #9
 800c1b8:	d903      	bls.n	800c1c2 <_vfiprintf_r+0x1ca>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0c3      	beq.n	800c146 <_vfiprintf_r+0x14e>
 800c1be:	9105      	str	r1, [sp, #20]
 800c1c0:	e7c1      	b.n	800c146 <_vfiprintf_r+0x14e>
 800c1c2:	fb05 2101 	mla	r1, r5, r1, r2
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	e7f0      	b.n	800c1ae <_vfiprintf_r+0x1b6>
 800c1cc:	ab03      	add	r3, sp, #12
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4b13      	ldr	r3, [pc, #76]	; (800c220 <_vfiprintf_r+0x228>)
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f3af 8000 	nop.w
 800c1dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c1e0:	4681      	mov	r9, r0
 800c1e2:	d1d5      	bne.n	800c190 <_vfiprintf_r+0x198>
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	065b      	lsls	r3, r3, #25
 800c1e8:	f53f af7e 	bmi.w	800c0e8 <_vfiprintf_r+0xf0>
 800c1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ee:	e77d      	b.n	800c0ec <_vfiprintf_r+0xf4>
 800c1f0:	ab03      	add	r3, sp, #12
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <_vfiprintf_r+0x228>)
 800c1f8:	a904      	add	r1, sp, #16
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f000 f888 	bl	800c310 <_printf_i>
 800c200:	e7ec      	b.n	800c1dc <_vfiprintf_r+0x1e4>
 800c202:	bf00      	nop
 800c204:	0800e840 	.word	0x0800e840
 800c208:	0800e880 	.word	0x0800e880
 800c20c:	0800e860 	.word	0x0800e860
 800c210:	0800e820 	.word	0x0800e820
 800c214:	0800e886 	.word	0x0800e886
 800c218:	0800e88a 	.word	0x0800e88a
 800c21c:	00000000 	.word	0x00000000
 800c220:	0800bfd3 	.word	0x0800bfd3

0800c224 <_printf_common>:
 800c224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c228:	4691      	mov	r9, r2
 800c22a:	461f      	mov	r7, r3
 800c22c:	688a      	ldr	r2, [r1, #8]
 800c22e:	690b      	ldr	r3, [r1, #16]
 800c230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c234:	4293      	cmp	r3, r2
 800c236:	bfb8      	it	lt
 800c238:	4613      	movlt	r3, r2
 800c23a:	f8c9 3000 	str.w	r3, [r9]
 800c23e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c242:	4606      	mov	r6, r0
 800c244:	460c      	mov	r4, r1
 800c246:	b112      	cbz	r2, 800c24e <_printf_common+0x2a>
 800c248:	3301      	adds	r3, #1
 800c24a:	f8c9 3000 	str.w	r3, [r9]
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	0699      	lsls	r1, r3, #26
 800c252:	bf42      	ittt	mi
 800c254:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c258:	3302      	addmi	r3, #2
 800c25a:	f8c9 3000 	strmi.w	r3, [r9]
 800c25e:	6825      	ldr	r5, [r4, #0]
 800c260:	f015 0506 	ands.w	r5, r5, #6
 800c264:	d107      	bne.n	800c276 <_printf_common+0x52>
 800c266:	f104 0a19 	add.w	sl, r4, #25
 800c26a:	68e3      	ldr	r3, [r4, #12]
 800c26c:	f8d9 2000 	ldr.w	r2, [r9]
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	42ab      	cmp	r3, r5
 800c274:	dc28      	bgt.n	800c2c8 <_printf_common+0xa4>
 800c276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c27a:	6822      	ldr	r2, [r4, #0]
 800c27c:	3300      	adds	r3, #0
 800c27e:	bf18      	it	ne
 800c280:	2301      	movne	r3, #1
 800c282:	0692      	lsls	r2, r2, #26
 800c284:	d42d      	bmi.n	800c2e2 <_printf_common+0xbe>
 800c286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c28a:	4639      	mov	r1, r7
 800c28c:	4630      	mov	r0, r6
 800c28e:	47c0      	blx	r8
 800c290:	3001      	adds	r0, #1
 800c292:	d020      	beq.n	800c2d6 <_printf_common+0xb2>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	68e5      	ldr	r5, [r4, #12]
 800c298:	f8d9 2000 	ldr.w	r2, [r9]
 800c29c:	f003 0306 	and.w	r3, r3, #6
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	bf08      	it	eq
 800c2a4:	1aad      	subeq	r5, r5, r2
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	6922      	ldr	r2, [r4, #16]
 800c2aa:	bf0c      	ite	eq
 800c2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2b0:	2500      	movne	r5, #0
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	bfc4      	itt	gt
 800c2b6:	1a9b      	subgt	r3, r3, r2
 800c2b8:	18ed      	addgt	r5, r5, r3
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	341a      	adds	r4, #26
 800c2c0:	454d      	cmp	r5, r9
 800c2c2:	d11a      	bne.n	800c2fa <_printf_common+0xd6>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e008      	b.n	800c2da <_printf_common+0xb6>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	47c0      	blx	r8
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	d103      	bne.n	800c2de <_printf_common+0xba>
 800c2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2de:	3501      	adds	r5, #1
 800c2e0:	e7c3      	b.n	800c26a <_printf_common+0x46>
 800c2e2:	18e1      	adds	r1, r4, r3
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	2030      	movs	r0, #48	; 0x30
 800c2e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2ec:	4422      	add	r2, r4
 800c2ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	e7c5      	b.n	800c286 <_printf_common+0x62>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	4639      	mov	r1, r7
 800c300:	4630      	mov	r0, r6
 800c302:	47c0      	blx	r8
 800c304:	3001      	adds	r0, #1
 800c306:	d0e6      	beq.n	800c2d6 <_printf_common+0xb2>
 800c308:	f109 0901 	add.w	r9, r9, #1
 800c30c:	e7d8      	b.n	800c2c0 <_printf_common+0x9c>
	...

0800c310 <_printf_i>:
 800c310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c314:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c318:	460c      	mov	r4, r1
 800c31a:	7e09      	ldrb	r1, [r1, #24]
 800c31c:	b085      	sub	sp, #20
 800c31e:	296e      	cmp	r1, #110	; 0x6e
 800c320:	4617      	mov	r7, r2
 800c322:	4606      	mov	r6, r0
 800c324:	4698      	mov	r8, r3
 800c326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c328:	f000 80b3 	beq.w	800c492 <_printf_i+0x182>
 800c32c:	d822      	bhi.n	800c374 <_printf_i+0x64>
 800c32e:	2963      	cmp	r1, #99	; 0x63
 800c330:	d036      	beq.n	800c3a0 <_printf_i+0x90>
 800c332:	d80a      	bhi.n	800c34a <_printf_i+0x3a>
 800c334:	2900      	cmp	r1, #0
 800c336:	f000 80b9 	beq.w	800c4ac <_printf_i+0x19c>
 800c33a:	2958      	cmp	r1, #88	; 0x58
 800c33c:	f000 8083 	beq.w	800c446 <_printf_i+0x136>
 800c340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c344:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c348:	e032      	b.n	800c3b0 <_printf_i+0xa0>
 800c34a:	2964      	cmp	r1, #100	; 0x64
 800c34c:	d001      	beq.n	800c352 <_printf_i+0x42>
 800c34e:	2969      	cmp	r1, #105	; 0x69
 800c350:	d1f6      	bne.n	800c340 <_printf_i+0x30>
 800c352:	6820      	ldr	r0, [r4, #0]
 800c354:	6813      	ldr	r3, [r2, #0]
 800c356:	0605      	lsls	r5, r0, #24
 800c358:	f103 0104 	add.w	r1, r3, #4
 800c35c:	d52a      	bpl.n	800c3b4 <_printf_i+0xa4>
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6011      	str	r1, [r2, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	da03      	bge.n	800c36e <_printf_i+0x5e>
 800c366:	222d      	movs	r2, #45	; 0x2d
 800c368:	425b      	negs	r3, r3
 800c36a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c36e:	486f      	ldr	r0, [pc, #444]	; (800c52c <_printf_i+0x21c>)
 800c370:	220a      	movs	r2, #10
 800c372:	e039      	b.n	800c3e8 <_printf_i+0xd8>
 800c374:	2973      	cmp	r1, #115	; 0x73
 800c376:	f000 809d 	beq.w	800c4b4 <_printf_i+0x1a4>
 800c37a:	d808      	bhi.n	800c38e <_printf_i+0x7e>
 800c37c:	296f      	cmp	r1, #111	; 0x6f
 800c37e:	d020      	beq.n	800c3c2 <_printf_i+0xb2>
 800c380:	2970      	cmp	r1, #112	; 0x70
 800c382:	d1dd      	bne.n	800c340 <_printf_i+0x30>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	f043 0320 	orr.w	r3, r3, #32
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	e003      	b.n	800c396 <_printf_i+0x86>
 800c38e:	2975      	cmp	r1, #117	; 0x75
 800c390:	d017      	beq.n	800c3c2 <_printf_i+0xb2>
 800c392:	2978      	cmp	r1, #120	; 0x78
 800c394:	d1d4      	bne.n	800c340 <_printf_i+0x30>
 800c396:	2378      	movs	r3, #120	; 0x78
 800c398:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c39c:	4864      	ldr	r0, [pc, #400]	; (800c530 <_printf_i+0x220>)
 800c39e:	e055      	b.n	800c44c <_printf_i+0x13c>
 800c3a0:	6813      	ldr	r3, [r2, #0]
 800c3a2:	1d19      	adds	r1, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	6011      	str	r1, [r2, #0]
 800c3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e08c      	b.n	800c4ce <_printf_i+0x1be>
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6011      	str	r1, [r2, #0]
 800c3b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3bc:	bf18      	it	ne
 800c3be:	b21b      	sxthne	r3, r3
 800c3c0:	e7cf      	b.n	800c362 <_printf_i+0x52>
 800c3c2:	6813      	ldr	r3, [r2, #0]
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1d18      	adds	r0, r3, #4
 800c3c8:	6010      	str	r0, [r2, #0]
 800c3ca:	0628      	lsls	r0, r5, #24
 800c3cc:	d501      	bpl.n	800c3d2 <_printf_i+0xc2>
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	e002      	b.n	800c3d8 <_printf_i+0xc8>
 800c3d2:	0668      	lsls	r0, r5, #25
 800c3d4:	d5fb      	bpl.n	800c3ce <_printf_i+0xbe>
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	4854      	ldr	r0, [pc, #336]	; (800c52c <_printf_i+0x21c>)
 800c3da:	296f      	cmp	r1, #111	; 0x6f
 800c3dc:	bf14      	ite	ne
 800c3de:	220a      	movne	r2, #10
 800c3e0:	2208      	moveq	r2, #8
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3e8:	6865      	ldr	r5, [r4, #4]
 800c3ea:	60a5      	str	r5, [r4, #8]
 800c3ec:	2d00      	cmp	r5, #0
 800c3ee:	f2c0 8095 	blt.w	800c51c <_printf_i+0x20c>
 800c3f2:	6821      	ldr	r1, [r4, #0]
 800c3f4:	f021 0104 	bic.w	r1, r1, #4
 800c3f8:	6021      	str	r1, [r4, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d13d      	bne.n	800c47a <_printf_i+0x16a>
 800c3fe:	2d00      	cmp	r5, #0
 800c400:	f040 808e 	bne.w	800c520 <_printf_i+0x210>
 800c404:	4665      	mov	r5, ip
 800c406:	2a08      	cmp	r2, #8
 800c408:	d10b      	bne.n	800c422 <_printf_i+0x112>
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	07db      	lsls	r3, r3, #31
 800c40e:	d508      	bpl.n	800c422 <_printf_i+0x112>
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	6862      	ldr	r2, [r4, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	bfde      	ittt	le
 800c418:	2330      	movle	r3, #48	; 0x30
 800c41a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c41e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c422:	ebac 0305 	sub.w	r3, ip, r5
 800c426:	6123      	str	r3, [r4, #16]
 800c428:	f8cd 8000 	str.w	r8, [sp]
 800c42c:	463b      	mov	r3, r7
 800c42e:	aa03      	add	r2, sp, #12
 800c430:	4621      	mov	r1, r4
 800c432:	4630      	mov	r0, r6
 800c434:	f7ff fef6 	bl	800c224 <_printf_common>
 800c438:	3001      	adds	r0, #1
 800c43a:	d14d      	bne.n	800c4d8 <_printf_i+0x1c8>
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295
 800c440:	b005      	add	sp, #20
 800c442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c446:	4839      	ldr	r0, [pc, #228]	; (800c52c <_printf_i+0x21c>)
 800c448:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c44c:	6813      	ldr	r3, [r2, #0]
 800c44e:	6821      	ldr	r1, [r4, #0]
 800c450:	1d1d      	adds	r5, r3, #4
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6015      	str	r5, [r2, #0]
 800c456:	060a      	lsls	r2, r1, #24
 800c458:	d50b      	bpl.n	800c472 <_printf_i+0x162>
 800c45a:	07ca      	lsls	r2, r1, #31
 800c45c:	bf44      	itt	mi
 800c45e:	f041 0120 	orrmi.w	r1, r1, #32
 800c462:	6021      	strmi	r1, [r4, #0]
 800c464:	b91b      	cbnz	r3, 800c46e <_printf_i+0x15e>
 800c466:	6822      	ldr	r2, [r4, #0]
 800c468:	f022 0220 	bic.w	r2, r2, #32
 800c46c:	6022      	str	r2, [r4, #0]
 800c46e:	2210      	movs	r2, #16
 800c470:	e7b7      	b.n	800c3e2 <_printf_i+0xd2>
 800c472:	064d      	lsls	r5, r1, #25
 800c474:	bf48      	it	mi
 800c476:	b29b      	uxthmi	r3, r3
 800c478:	e7ef      	b.n	800c45a <_printf_i+0x14a>
 800c47a:	4665      	mov	r5, ip
 800c47c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c480:	fb02 3311 	mls	r3, r2, r1, r3
 800c484:	5cc3      	ldrb	r3, [r0, r3]
 800c486:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c48a:	460b      	mov	r3, r1
 800c48c:	2900      	cmp	r1, #0
 800c48e:	d1f5      	bne.n	800c47c <_printf_i+0x16c>
 800c490:	e7b9      	b.n	800c406 <_printf_i+0xf6>
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	6825      	ldr	r5, [r4, #0]
 800c496:	6961      	ldr	r1, [r4, #20]
 800c498:	1d18      	adds	r0, r3, #4
 800c49a:	6010      	str	r0, [r2, #0]
 800c49c:	0628      	lsls	r0, r5, #24
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	d501      	bpl.n	800c4a6 <_printf_i+0x196>
 800c4a2:	6019      	str	r1, [r3, #0]
 800c4a4:	e002      	b.n	800c4ac <_printf_i+0x19c>
 800c4a6:	066a      	lsls	r2, r5, #25
 800c4a8:	d5fb      	bpl.n	800c4a2 <_printf_i+0x192>
 800c4aa:	8019      	strh	r1, [r3, #0]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	4665      	mov	r5, ip
 800c4b2:	e7b9      	b.n	800c428 <_printf_i+0x118>
 800c4b4:	6813      	ldr	r3, [r2, #0]
 800c4b6:	1d19      	adds	r1, r3, #4
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	681d      	ldr	r5, [r3, #0]
 800c4bc:	6862      	ldr	r2, [r4, #4]
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f7f3 fe95 	bl	80001f0 <memchr>
 800c4c6:	b108      	cbz	r0, 800c4cc <_printf_i+0x1bc>
 800c4c8:	1b40      	subs	r0, r0, r5
 800c4ca:	6060      	str	r0, [r4, #4]
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	6123      	str	r3, [r4, #16]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4d6:	e7a7      	b.n	800c428 <_printf_i+0x118>
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4639      	mov	r1, r7
 800c4de:	4630      	mov	r0, r6
 800c4e0:	47c0      	blx	r8
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d0aa      	beq.n	800c43c <_printf_i+0x12c>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	079b      	lsls	r3, r3, #30
 800c4ea:	d413      	bmi.n	800c514 <_printf_i+0x204>
 800c4ec:	68e0      	ldr	r0, [r4, #12]
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	4298      	cmp	r0, r3
 800c4f2:	bfb8      	it	lt
 800c4f4:	4618      	movlt	r0, r3
 800c4f6:	e7a3      	b.n	800c440 <_printf_i+0x130>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	464a      	mov	r2, r9
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4630      	mov	r0, r6
 800c500:	47c0      	blx	r8
 800c502:	3001      	adds	r0, #1
 800c504:	d09a      	beq.n	800c43c <_printf_i+0x12c>
 800c506:	3501      	adds	r5, #1
 800c508:	68e3      	ldr	r3, [r4, #12]
 800c50a:	9a03      	ldr	r2, [sp, #12]
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	42ab      	cmp	r3, r5
 800c510:	dcf2      	bgt.n	800c4f8 <_printf_i+0x1e8>
 800c512:	e7eb      	b.n	800c4ec <_printf_i+0x1dc>
 800c514:	2500      	movs	r5, #0
 800c516:	f104 0919 	add.w	r9, r4, #25
 800c51a:	e7f5      	b.n	800c508 <_printf_i+0x1f8>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1ac      	bne.n	800c47a <_printf_i+0x16a>
 800c520:	7803      	ldrb	r3, [r0, #0]
 800c522:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c526:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c52a:	e76c      	b.n	800c406 <_printf_i+0xf6>
 800c52c:	0800e891 	.word	0x0800e891
 800c530:	0800e8a2 	.word	0x0800e8a2

0800c534 <_sbrk_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4c06      	ldr	r4, [pc, #24]	; (800c550 <_sbrk_r+0x1c>)
 800c538:	2300      	movs	r3, #0
 800c53a:	4605      	mov	r5, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	f7f4 fa2c 	bl	800099c <_sbrk>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	d102      	bne.n	800c54e <_sbrk_r+0x1a>
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	b103      	cbz	r3, 800c54e <_sbrk_r+0x1a>
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	20006898 	.word	0x20006898

0800c554 <__sread>:
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	f000 fa48 	bl	800c9f0 <_read_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	bfab      	itete	ge
 800c564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c566:	89a3      	ldrhlt	r3, [r4, #12]
 800c568:	181b      	addge	r3, r3, r0
 800c56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c56e:	bfac      	ite	ge
 800c570:	6563      	strge	r3, [r4, #84]	; 0x54
 800c572:	81a3      	strhlt	r3, [r4, #12]
 800c574:	bd10      	pop	{r4, pc}

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	2302      	movs	r3, #2
 800c58a:	2200      	movs	r2, #0
 800c58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c590:	f000 f9b6 	bl	800c900 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b869 	b.w	800c680 <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f9a3 	bl	800c900 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b8d3 	b.w	800c780 <_close_r>
	...

0800c5dc <__swbuf_r>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	460e      	mov	r6, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b118      	cbz	r0, 800c5ee <__swbuf_r+0x12>
 800c5e6:	6983      	ldr	r3, [r0, #24]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <__swbuf_r+0x12>
 800c5ea:	f7ff fba9 	bl	800bd40 <__sinit>
 800c5ee:	4b21      	ldr	r3, [pc, #132]	; (800c674 <__swbuf_r+0x98>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	d12a      	bne.n	800c64a <__swbuf_r+0x6e>
 800c5f4:	686c      	ldr	r4, [r5, #4]
 800c5f6:	69a3      	ldr	r3, [r4, #24]
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	071a      	lsls	r2, r3, #28
 800c5fe:	d52e      	bpl.n	800c65e <__swbuf_r+0x82>
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	b363      	cbz	r3, 800c65e <__swbuf_r+0x82>
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	6820      	ldr	r0, [r4, #0]
 800c608:	1ac0      	subs	r0, r0, r3
 800c60a:	6963      	ldr	r3, [r4, #20]
 800c60c:	b2f6      	uxtb	r6, r6
 800c60e:	4283      	cmp	r3, r0
 800c610:	4637      	mov	r7, r6
 800c612:	dc04      	bgt.n	800c61e <__swbuf_r+0x42>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f948 	bl	800c8ac <_fflush_r>
 800c61c:	bb28      	cbnz	r0, 800c66a <__swbuf_r+0x8e>
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	6022      	str	r2, [r4, #0]
 800c62a:	701e      	strb	r6, [r3, #0]
 800c62c:	6963      	ldr	r3, [r4, #20]
 800c62e:	3001      	adds	r0, #1
 800c630:	4283      	cmp	r3, r0
 800c632:	d004      	beq.n	800c63e <__swbuf_r+0x62>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	07db      	lsls	r3, r3, #31
 800c638:	d519      	bpl.n	800c66e <__swbuf_r+0x92>
 800c63a:	2e0a      	cmp	r6, #10
 800c63c:	d117      	bne.n	800c66e <__swbuf_r+0x92>
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f933 	bl	800c8ac <_fflush_r>
 800c646:	b190      	cbz	r0, 800c66e <__swbuf_r+0x92>
 800c648:	e00f      	b.n	800c66a <__swbuf_r+0x8e>
 800c64a:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <__swbuf_r+0x9c>)
 800c64c:	429c      	cmp	r4, r3
 800c64e:	d101      	bne.n	800c654 <__swbuf_r+0x78>
 800c650:	68ac      	ldr	r4, [r5, #8]
 800c652:	e7d0      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <__swbuf_r+0xa0>)
 800c656:	429c      	cmp	r4, r3
 800c658:	bf08      	it	eq
 800c65a:	68ec      	ldreq	r4, [r5, #12]
 800c65c:	e7cb      	b.n	800c5f6 <__swbuf_r+0x1a>
 800c65e:	4621      	mov	r1, r4
 800c660:	4628      	mov	r0, r5
 800c662:	f000 f81f 	bl	800c6a4 <__swsetup_r>
 800c666:	2800      	cmp	r0, #0
 800c668:	d0cc      	beq.n	800c604 <__swbuf_r+0x28>
 800c66a:	f04f 37ff 	mov.w	r7, #4294967295
 800c66e:	4638      	mov	r0, r7
 800c670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c672:	bf00      	nop
 800c674:	0800e840 	.word	0x0800e840
 800c678:	0800e860 	.word	0x0800e860
 800c67c:	0800e820 	.word	0x0800e820

0800c680 <_write_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4c07      	ldr	r4, [pc, #28]	; (800c6a0 <_write_r+0x20>)
 800c684:	4605      	mov	r5, r0
 800c686:	4608      	mov	r0, r1
 800c688:	4611      	mov	r1, r2
 800c68a:	2200      	movs	r2, #0
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f7f4 f933 	bl	80008fa <_write>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_write_r+0x1e>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_write_r+0x1e>
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20006898 	.word	0x20006898

0800c6a4 <__swsetup_r>:
 800c6a4:	4b32      	ldr	r3, [pc, #200]	; (800c770 <__swsetup_r+0xcc>)
 800c6a6:	b570      	push	{r4, r5, r6, lr}
 800c6a8:	681d      	ldr	r5, [r3, #0]
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	b125      	cbz	r5, 800c6ba <__swsetup_r+0x16>
 800c6b0:	69ab      	ldr	r3, [r5, #24]
 800c6b2:	b913      	cbnz	r3, 800c6ba <__swsetup_r+0x16>
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7ff fb43 	bl	800bd40 <__sinit>
 800c6ba:	4b2e      	ldr	r3, [pc, #184]	; (800c774 <__swsetup_r+0xd0>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	d10f      	bne.n	800c6e0 <__swsetup_r+0x3c>
 800c6c0:	686c      	ldr	r4, [r5, #4]
 800c6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	0715      	lsls	r5, r2, #28
 800c6ca:	d42c      	bmi.n	800c726 <__swsetup_r+0x82>
 800c6cc:	06d0      	lsls	r0, r2, #27
 800c6ce:	d411      	bmi.n	800c6f4 <__swsetup_r+0x50>
 800c6d0:	2209      	movs	r2, #9
 800c6d2:	6032      	str	r2, [r6, #0]
 800c6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	f04f 30ff 	mov.w	r0, #4294967295
 800c6de:	e03e      	b.n	800c75e <__swsetup_r+0xba>
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <__swsetup_r+0xd4>)
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d101      	bne.n	800c6ea <__swsetup_r+0x46>
 800c6e6:	68ac      	ldr	r4, [r5, #8]
 800c6e8:	e7eb      	b.n	800c6c2 <__swsetup_r+0x1e>
 800c6ea:	4b24      	ldr	r3, [pc, #144]	; (800c77c <__swsetup_r+0xd8>)
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	68ec      	ldreq	r4, [r5, #12]
 800c6f2:	e7e6      	b.n	800c6c2 <__swsetup_r+0x1e>
 800c6f4:	0751      	lsls	r1, r2, #29
 800c6f6:	d512      	bpl.n	800c71e <__swsetup_r+0x7a>
 800c6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6fa:	b141      	cbz	r1, 800c70e <__swsetup_r+0x6a>
 800c6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c700:	4299      	cmp	r1, r3
 800c702:	d002      	beq.n	800c70a <__swsetup_r+0x66>
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff fba5 	bl	800be54 <_free_r>
 800c70a:	2300      	movs	r3, #0
 800c70c:	6363      	str	r3, [r4, #52]	; 0x34
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c714:	81a3      	strh	r3, [r4, #12]
 800c716:	2300      	movs	r3, #0
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	f043 0308 	orr.w	r3, r3, #8
 800c724:	81a3      	strh	r3, [r4, #12]
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	b94b      	cbnz	r3, 800c73e <__swsetup_r+0x9a>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c734:	d003      	beq.n	800c73e <__swsetup_r+0x9a>
 800c736:	4621      	mov	r1, r4
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 f917 	bl	800c96c <__smakebuf_r>
 800c73e:	89a2      	ldrh	r2, [r4, #12]
 800c740:	f012 0301 	ands.w	r3, r2, #1
 800c744:	d00c      	beq.n	800c760 <__swsetup_r+0xbc>
 800c746:	2300      	movs	r3, #0
 800c748:	60a3      	str	r3, [r4, #8]
 800c74a:	6963      	ldr	r3, [r4, #20]
 800c74c:	425b      	negs	r3, r3
 800c74e:	61a3      	str	r3, [r4, #24]
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	b953      	cbnz	r3, 800c76a <__swsetup_r+0xc6>
 800c754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c758:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c75c:	d1ba      	bne.n	800c6d4 <__swsetup_r+0x30>
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	0792      	lsls	r2, r2, #30
 800c762:	bf58      	it	pl
 800c764:	6963      	ldrpl	r3, [r4, #20]
 800c766:	60a3      	str	r3, [r4, #8]
 800c768:	e7f2      	b.n	800c750 <__swsetup_r+0xac>
 800c76a:	2000      	movs	r0, #0
 800c76c:	e7f7      	b.n	800c75e <__swsetup_r+0xba>
 800c76e:	bf00      	nop
 800c770:	20000014 	.word	0x20000014
 800c774:	0800e840 	.word	0x0800e840
 800c778:	0800e860 	.word	0x0800e860
 800c77c:	0800e820 	.word	0x0800e820

0800c780 <_close_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4c06      	ldr	r4, [pc, #24]	; (800c79c <_close_r+0x1c>)
 800c784:	2300      	movs	r3, #0
 800c786:	4605      	mov	r5, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	f7f4 f8d1 	bl	8000932 <_close>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_close_r+0x1a>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	b103      	cbz	r3, 800c79a <_close_r+0x1a>
 800c798:	602b      	str	r3, [r5, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	20006898 	.word	0x20006898

0800c7a0 <__sflush_r>:
 800c7a0:	898a      	ldrh	r2, [r1, #12]
 800c7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	0710      	lsls	r0, r2, #28
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	d458      	bmi.n	800c860 <__sflush_r+0xc0>
 800c7ae:	684b      	ldr	r3, [r1, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dc05      	bgt.n	800c7c0 <__sflush_r+0x20>
 800c7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dc02      	bgt.n	800c7c0 <__sflush_r+0x20>
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c2:	2e00      	cmp	r6, #0
 800c7c4:	d0f9      	beq.n	800c7ba <__sflush_r+0x1a>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7cc:	682f      	ldr	r7, [r5, #0]
 800c7ce:	6a21      	ldr	r1, [r4, #32]
 800c7d0:	602b      	str	r3, [r5, #0]
 800c7d2:	d032      	beq.n	800c83a <__sflush_r+0x9a>
 800c7d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	075a      	lsls	r2, r3, #29
 800c7da:	d505      	bpl.n	800c7e8 <__sflush_r+0x48>
 800c7dc:	6863      	ldr	r3, [r4, #4]
 800c7de:	1ac0      	subs	r0, r0, r3
 800c7e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7e2:	b10b      	cbz	r3, 800c7e8 <__sflush_r+0x48>
 800c7e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7e6:	1ac0      	subs	r0, r0, r3
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ee:	6a21      	ldr	r1, [r4, #32]
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	47b0      	blx	r6
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	d106      	bne.n	800c808 <__sflush_r+0x68>
 800c7fa:	6829      	ldr	r1, [r5, #0]
 800c7fc:	291d      	cmp	r1, #29
 800c7fe:	d848      	bhi.n	800c892 <__sflush_r+0xf2>
 800c800:	4a29      	ldr	r2, [pc, #164]	; (800c8a8 <__sflush_r+0x108>)
 800c802:	40ca      	lsrs	r2, r1
 800c804:	07d6      	lsls	r6, r2, #31
 800c806:	d544      	bpl.n	800c892 <__sflush_r+0xf2>
 800c808:	2200      	movs	r2, #0
 800c80a:	6062      	str	r2, [r4, #4]
 800c80c:	04d9      	lsls	r1, r3, #19
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	6022      	str	r2, [r4, #0]
 800c812:	d504      	bpl.n	800c81e <__sflush_r+0x7e>
 800c814:	1c42      	adds	r2, r0, #1
 800c816:	d101      	bne.n	800c81c <__sflush_r+0x7c>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b903      	cbnz	r3, 800c81e <__sflush_r+0x7e>
 800c81c:	6560      	str	r0, [r4, #84]	; 0x54
 800c81e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c820:	602f      	str	r7, [r5, #0]
 800c822:	2900      	cmp	r1, #0
 800c824:	d0c9      	beq.n	800c7ba <__sflush_r+0x1a>
 800c826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c82a:	4299      	cmp	r1, r3
 800c82c:	d002      	beq.n	800c834 <__sflush_r+0x94>
 800c82e:	4628      	mov	r0, r5
 800c830:	f7ff fb10 	bl	800be54 <_free_r>
 800c834:	2000      	movs	r0, #0
 800c836:	6360      	str	r0, [r4, #52]	; 0x34
 800c838:	e7c0      	b.n	800c7bc <__sflush_r+0x1c>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b0      	blx	r6
 800c840:	1c41      	adds	r1, r0, #1
 800c842:	d1c8      	bne.n	800c7d6 <__sflush_r+0x36>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0c5      	beq.n	800c7d6 <__sflush_r+0x36>
 800c84a:	2b1d      	cmp	r3, #29
 800c84c:	d001      	beq.n	800c852 <__sflush_r+0xb2>
 800c84e:	2b16      	cmp	r3, #22
 800c850:	d101      	bne.n	800c856 <__sflush_r+0xb6>
 800c852:	602f      	str	r7, [r5, #0]
 800c854:	e7b1      	b.n	800c7ba <__sflush_r+0x1a>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	e7ad      	b.n	800c7bc <__sflush_r+0x1c>
 800c860:	690f      	ldr	r7, [r1, #16]
 800c862:	2f00      	cmp	r7, #0
 800c864:	d0a9      	beq.n	800c7ba <__sflush_r+0x1a>
 800c866:	0793      	lsls	r3, r2, #30
 800c868:	680e      	ldr	r6, [r1, #0]
 800c86a:	bf08      	it	eq
 800c86c:	694b      	ldreq	r3, [r1, #20]
 800c86e:	600f      	str	r7, [r1, #0]
 800c870:	bf18      	it	ne
 800c872:	2300      	movne	r3, #0
 800c874:	eba6 0807 	sub.w	r8, r6, r7
 800c878:	608b      	str	r3, [r1, #8]
 800c87a:	f1b8 0f00 	cmp.w	r8, #0
 800c87e:	dd9c      	ble.n	800c7ba <__sflush_r+0x1a>
 800c880:	4643      	mov	r3, r8
 800c882:	463a      	mov	r2, r7
 800c884:	6a21      	ldr	r1, [r4, #32]
 800c886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c888:	4628      	mov	r0, r5
 800c88a:	47b0      	blx	r6
 800c88c:	2800      	cmp	r0, #0
 800c88e:	dc06      	bgt.n	800c89e <__sflush_r+0xfe>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	f04f 30ff 	mov.w	r0, #4294967295
 800c89c:	e78e      	b.n	800c7bc <__sflush_r+0x1c>
 800c89e:	4407      	add	r7, r0
 800c8a0:	eba8 0800 	sub.w	r8, r8, r0
 800c8a4:	e7e9      	b.n	800c87a <__sflush_r+0xda>
 800c8a6:	bf00      	nop
 800c8a8:	20400001 	.word	0x20400001

0800c8ac <_fflush_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	690b      	ldr	r3, [r1, #16]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b1db      	cbz	r3, 800c8ee <_fflush_r+0x42>
 800c8b6:	b118      	cbz	r0, 800c8c0 <_fflush_r+0x14>
 800c8b8:	6983      	ldr	r3, [r0, #24]
 800c8ba:	b90b      	cbnz	r3, 800c8c0 <_fflush_r+0x14>
 800c8bc:	f7ff fa40 	bl	800bd40 <__sinit>
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	; (800c8f4 <_fflush_r+0x48>)
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	d109      	bne.n	800c8da <_fflush_r+0x2e>
 800c8c6:	686c      	ldr	r4, [r5, #4]
 800c8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8cc:	b17b      	cbz	r3, 800c8ee <_fflush_r+0x42>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d6:	f7ff bf63 	b.w	800c7a0 <__sflush_r>
 800c8da:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <_fflush_r+0x4c>)
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	d101      	bne.n	800c8e4 <_fflush_r+0x38>
 800c8e0:	68ac      	ldr	r4, [r5, #8]
 800c8e2:	e7f1      	b.n	800c8c8 <_fflush_r+0x1c>
 800c8e4:	4b05      	ldr	r3, [pc, #20]	; (800c8fc <_fflush_r+0x50>)
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	bf08      	it	eq
 800c8ea:	68ec      	ldreq	r4, [r5, #12]
 800c8ec:	e7ec      	b.n	800c8c8 <_fflush_r+0x1c>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	bf00      	nop
 800c8f4:	0800e840 	.word	0x0800e840
 800c8f8:	0800e860 	.word	0x0800e860
 800c8fc:	0800e820 	.word	0x0800e820

0800c900 <_lseek_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4c07      	ldr	r4, [pc, #28]	; (800c920 <_lseek_r+0x20>)
 800c904:	4605      	mov	r5, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	6022      	str	r2, [r4, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f4 f836 	bl	8000980 <_lseek>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_lseek_r+0x1e>
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_lseek_r+0x1e>
 800c91c:	602b      	str	r3, [r5, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20006898 	.word	0x20006898

0800c924 <__swhatbuf_r>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	460e      	mov	r6, r1
 800c928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92c:	2900      	cmp	r1, #0
 800c92e:	b096      	sub	sp, #88	; 0x58
 800c930:	4614      	mov	r4, r2
 800c932:	461d      	mov	r5, r3
 800c934:	da07      	bge.n	800c946 <__swhatbuf_r+0x22>
 800c936:	2300      	movs	r3, #0
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	89b3      	ldrh	r3, [r6, #12]
 800c93c:	061a      	lsls	r2, r3, #24
 800c93e:	d410      	bmi.n	800c962 <__swhatbuf_r+0x3e>
 800c940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c944:	e00e      	b.n	800c964 <__swhatbuf_r+0x40>
 800c946:	466a      	mov	r2, sp
 800c948:	f000 f864 	bl	800ca14 <_fstat_r>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	dbf2      	blt.n	800c936 <__swhatbuf_r+0x12>
 800c950:	9a01      	ldr	r2, [sp, #4]
 800c952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c95a:	425a      	negs	r2, r3
 800c95c:	415a      	adcs	r2, r3
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	e7ee      	b.n	800c940 <__swhatbuf_r+0x1c>
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	2000      	movs	r0, #0
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	b016      	add	sp, #88	; 0x58
 800c96a:	bd70      	pop	{r4, r5, r6, pc}

0800c96c <__smakebuf_r>:
 800c96c:	898b      	ldrh	r3, [r1, #12]
 800c96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c970:	079d      	lsls	r5, r3, #30
 800c972:	4606      	mov	r6, r0
 800c974:	460c      	mov	r4, r1
 800c976:	d507      	bpl.n	800c988 <__smakebuf_r+0x1c>
 800c978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	2301      	movs	r3, #1
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	b002      	add	sp, #8
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	ab01      	add	r3, sp, #4
 800c98a:	466a      	mov	r2, sp
 800c98c:	f7ff ffca 	bl	800c924 <__swhatbuf_r>
 800c990:	9900      	ldr	r1, [sp, #0]
 800c992:	4605      	mov	r5, r0
 800c994:	4630      	mov	r0, r6
 800c996:	f7ff faab 	bl	800bef0 <_malloc_r>
 800c99a:	b948      	cbnz	r0, 800c9b0 <__smakebuf_r+0x44>
 800c99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a0:	059a      	lsls	r2, r3, #22
 800c9a2:	d4ef      	bmi.n	800c984 <__smakebuf_r+0x18>
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	f043 0302 	orr.w	r3, r3, #2
 800c9ac:	81a3      	strh	r3, [r4, #12]
 800c9ae:	e7e3      	b.n	800c978 <__smakebuf_r+0xc>
 800c9b0:	4b0d      	ldr	r3, [pc, #52]	; (800c9e8 <__smakebuf_r+0x7c>)
 800c9b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	9b00      	ldr	r3, [sp, #0]
 800c9c0:	6163      	str	r3, [r4, #20]
 800c9c2:	9b01      	ldr	r3, [sp, #4]
 800c9c4:	6120      	str	r0, [r4, #16]
 800c9c6:	b15b      	cbz	r3, 800c9e0 <__smakebuf_r+0x74>
 800c9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f000 f833 	bl	800ca38 <_isatty_r>
 800c9d2:	b128      	cbz	r0, 800c9e0 <__smakebuf_r+0x74>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	431d      	orrs	r5, r3
 800c9e4:	81a5      	strh	r5, [r4, #12]
 800c9e6:	e7cd      	b.n	800c984 <__smakebuf_r+0x18>
 800c9e8:	0800bd09 	.word	0x0800bd09

0800c9ec <__malloc_lock>:
 800c9ec:	4770      	bx	lr

0800c9ee <__malloc_unlock>:
 800c9ee:	4770      	bx	lr

0800c9f0 <_read_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	4c07      	ldr	r4, [pc, #28]	; (800ca10 <_read_r+0x20>)
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f7f3 ff5e 	bl	80008c0 <_read>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d102      	bne.n	800ca0e <_read_r+0x1e>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	b103      	cbz	r3, 800ca0e <_read_r+0x1e>
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	bd38      	pop	{r3, r4, r5, pc}
 800ca10:	20006898 	.word	0x20006898

0800ca14 <_fstat_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4c07      	ldr	r4, [pc, #28]	; (800ca34 <_fstat_r+0x20>)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	4611      	mov	r1, r2
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	f7f3 ff92 	bl	800094a <_fstat>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d102      	bne.n	800ca30 <_fstat_r+0x1c>
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	b103      	cbz	r3, 800ca30 <_fstat_r+0x1c>
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
 800ca32:	bf00      	nop
 800ca34:	20006898 	.word	0x20006898

0800ca38 <_isatty_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4c06      	ldr	r4, [pc, #24]	; (800ca54 <_isatty_r+0x1c>)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4605      	mov	r5, r0
 800ca40:	4608      	mov	r0, r1
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	f7f3 ff91 	bl	800096a <_isatty>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d102      	bne.n	800ca52 <_isatty_r+0x1a>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	b103      	cbz	r3, 800ca52 <_isatty_r+0x1a>
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	20006898 	.word	0x20006898

0800ca58 <_init>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	bf00      	nop
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr

0800ca64 <_fini>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr
