
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e4c  0800dd20  0800dd20  0001dd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb6c  0800fb6c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb6c  0800fb6c  0001fb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb74  0800fb74  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb74  0800fb74  0001fb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb78  0800fb78  0001fb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800fb7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c6c  20000088  0800fc04  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006cf4  0800fc04  00026cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fb5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005448  00000000  00000000  0004a06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0004f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  00050840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002edce  00000000  00000000  00051a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d7ae  00000000  00000000  0008080e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e954a  00000000  00000000  0009dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00187506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  00187584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dd08 	.word	0x0800dd08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800dd08 	.word	0x0800dd08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a4a      	ldr	r2, [pc, #296]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a43      	ldr	r2, [pc, #268]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x148>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a35      	ldr	r2, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_GPIO_Init+0x148>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0x148>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a2e      	ldr	r2, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <MX_GPIO_Init+0x148>)
 800063c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f244 0181 	movw	r1, #16513	; 0x4081
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000656:	f001 fdb7 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <MX_GPIO_Init+0x150>)
 8000660:	f001 fdb2 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0x154>)
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x158>)
 800067a:	f001 fbfb 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800067e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000698:	f001 fbec 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x150>)
 80006b4:	f001 fbde 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0x150>)
 80006cc:	f001 fbd2 	bl	8001e74 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3730      	adds	r7, #48	; 0x30
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	10110000 	.word	0x10110000
 80006e8:	40020800 	.word	0x40020800

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fab2 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f812 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff4a 	bl	8000590 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 f988 	bl	8000a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000700:	f000 f9f8 	bl	8000af4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000704:	f003 f9c4 	bl	8003a90 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <main+0x2c>)
 800070e:	f001 fd5b 	bl	80021c8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000712:	f003 fb07 	bl	8003d24 <MX_LWIP_Process>
 8000716:	e7fc      	b.n	8000712 <main+0x26>
 8000718:	40020400 	.word	0x40020400

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00c fc00 	bl	800cf30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000790:	23a8      	movs	r3, #168	; 0xa8
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fe47 	bl	8002434 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f820 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2105      	movs	r1, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f8a0 	bl	8002914 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f809 	bl	80007f0 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 fa2a 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00a      	b.n	80008d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008be:	f3af 8000 	nop.w
 80008c2:	4601      	mov	r1, r0
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf0      	blt.n	80008be <_read+0x12>
	}

return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e009      	b.n	800090c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <_write+0x12>
	}
	return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x50>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x16>
		heap_end = &end;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <_sbrk+0x50>)
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <_sbrk+0x54>)
 800099c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <_sbrk+0x50>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <_sbrk+0x50>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	466a      	mov	r2, sp
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d905      	bls.n	80009be <_sbrk+0x36>
	{
		errno = ENOMEM;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <_sbrk+0x58>)
 80009b4:	220c      	movs	r2, #12
 80009b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	e006      	b.n	80009cc <_sbrk+0x44>
	}

	heap_end += incr;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_sbrk+0x50>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <_sbrk+0x50>)
 80009c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	20006cf8 	.word	0x20006cf8
 80009e0:	20006cf0 	.word	0x20006cf0

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SystemInit+0x28>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SystemInit+0x28>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x28>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART3_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a48:	f002 f956 	bl	8002cf8 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f7ff fecd 	bl	80007f0 <Error_Handler>
  }

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000220 	.word	0x20000220
 8000a60:	40004800 	.word	0x40004800

08000a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12c      	bne.n	8000ae0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0x8c>)
 8000adc:	f001 f9ca 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004800 	.word	0x40004800
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b38:	f001 fb5f 	bl	80021fa <HAL_PCD_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b42:	f7ff fe55 	bl	80007f0 <Error_Handler>
  }

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000260 	.word	0x20000260

08000b50 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b70:	d13f      	bne.n	8000bf2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <HAL_PCD_MspInit+0xb0>)
 8000bac:	f001 f962 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <HAL_PCD_MspInit+0xb0>)
 8000bc6:	f001 f955 	bl	8001e74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_PCD_MspInit+0xac>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0a:	e003      	b.n	8000c14 <LoopCopyDataInit>

08000c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c12:	3104      	adds	r1, #4

08000c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c1c:	d3f6      	bcc.n	8000c0c <CopyDataInit>
  ldr  r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c20:	e002      	b.n	8000c28 <LoopFillZerobss>

08000c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c24:	f842 3b04 	str.w	r3, [r2], #4

08000c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c2c:	d3f9      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff fed9 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f00c f93f 	bl	800ceb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fd59 	bl	80006ec <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000c40:	0800fb7c 	.word	0x0800fb7c
  ldr  r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c48:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8000c4c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8000c50:	20006cf4 	.word	0x20006cf4

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f92f 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fdb8 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f939 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f90f 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000668 	.word	0x20000668

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000668 	.word	0x20000668

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_Delay+0x40>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f5c:	4baa      	ldr	r3, [pc, #680]	; (8001208 <HAL_ETH_Init+0x2bc>)
 8000f5e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e185      	b.n	800127e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f002 fee6 	bl	8003d58 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b9e      	ldr	r3, [pc, #632]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	4a9d      	ldr	r2, [pc, #628]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9c:	4b9b      	ldr	r3, [pc, #620]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fa8:	4b99      	ldr	r3, [pc, #612]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4a98      	ldr	r2, [pc, #608]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fb2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fb4:	4b96      	ldr	r3, [pc, #600]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4994      	ldr	r1, [pc, #592]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fda:	f7ff fea3 	bl	8000d24 <HAL_GetTick>
 8000fde:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fe0:	e011      	b.n	8001006 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fe2:	f7ff fe9f 	bl	8000d24 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff0:	d909      	bls.n	8001006 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e13b      	b.n	800127e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e4      	bne.n	8000fe2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f023 031c 	bic.w	r3, r3, #28
 8001026:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001028:	f001 fe32 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 800102c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4a78      	ldr	r2, [pc, #480]	; (8001214 <HAL_ETH_Init+0x2c8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d908      	bls.n	8001048 <HAL_ETH_Init+0xfc>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4a77      	ldr	r2, [pc, #476]	; (8001218 <HAL_ETH_Init+0x2cc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d804      	bhi.n	8001048 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e027      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4a73      	ldr	r2, [pc, #460]	; (8001218 <HAL_ETH_Init+0x2cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d908      	bls.n	8001062 <HAL_ETH_Init+0x116>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4a72      	ldr	r2, [pc, #456]	; (800121c <HAL_ETH_Init+0x2d0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d804      	bhi.n	8001062 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f043 030c 	orr.w	r3, r3, #12
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e01a      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4a6d      	ldr	r2, [pc, #436]	; (800121c <HAL_ETH_Init+0x2d0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d903      	bls.n	8001072 <HAL_ETH_Init+0x126>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <HAL_ETH_Init+0x2d4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d911      	bls.n	8001096 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <HAL_ETH_Init+0x2d4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d908      	bls.n	800108c <HAL_ETH_Init+0x140>
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4a69      	ldr	r2, [pc, #420]	; (8001224 <HAL_ETH_Init+0x2d8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d804      	bhi.n	800108c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e005      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e000      	b.n	8001098 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001096:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb9a 	bl	80017e0 <HAL_ETH_WritePHYRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010b6:	6939      	ldr	r1, [r7, #16]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fc27 	bl	800190c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0d9      	b.n	800127e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010ca:	20ff      	movs	r0, #255	; 0xff
 80010cc:	f7ff fe36 	bl	8000d3c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a7 	beq.w	8001228 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010da:	f7ff fe23 	bl	8000d24 <HAL_GetTick>
 80010de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	461a      	mov	r2, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fb11 	bl	8001710 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010ee:	f7ff fe19 	bl	8000d24 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d90f      	bls.n	8001120 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fc00 	bl	800190c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0ae      	b.n	800127e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0da      	beq.n	80010e0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800112a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb55 	bl	80017e0 <HAL_ETH_WritePHYRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fbe2 	bl	800190c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001150:	2301      	movs	r3, #1
 8001152:	e094      	b.n	800127e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fde6 	bl	8000d24 <HAL_GetTick>
 8001158:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	461a      	mov	r2, r3
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fad4 	bl	8001710 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001168:	f7ff fddc 	bl	8000d24 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d90f      	bls.n	800119a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fbc3 	bl	800190c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e071      	b.n	800127e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0da      	beq.n	800115a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	461a      	mov	r2, r3
 80011aa:	211f      	movs	r1, #31
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 faaf 	bl	8001710 <HAL_ETH_ReadPHYRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fba4 	bl	800190c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011cc:	2301      	movs	r3, #1
 80011ce:	e056      	b.n	800127e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	e002      	b.n	80011ea <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e037      	b.n	800126c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	e032      	b.n	800126c <HAL_ETH_Init+0x320>
 8001206:	bf00      	nop
 8001208:	03938700 	.word	0x03938700
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	01312cff 	.word	0x01312cff
 8001218:	02160ebf 	.word	0x02160ebf
 800121c:	039386ff 	.word	0x039386ff
 8001220:	05f5e0ff 	.word	0x05f5e0ff
 8001224:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001238:	4313      	orrs	r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 facd 	bl	80017e0 <HAL_ETH_WritePHYRegister>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fb5a 	bl	800190c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e00c      	b.n	800127e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001264:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001268:	f7ff fd68 	bl	8000d3c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fb4c 	bl	800190c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop

08001288 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ETH_DMATxDescListInit+0x20>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e052      	b.n	800134e <HAL_ETH_DMATxDescListInit+0xc6>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e030      	b.n	8001326 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012d4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	d208      	bcs.n	800131a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	461a      	mov	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	e002      	b.n	8001320 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3ca      	bcc.n	80012c4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001338:	3310      	adds	r3, #16
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800135a:	b480      	push	{r7}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ETH_DMARxDescListInit+0x20>
 8001376:	2302      	movs	r3, #2
 8001378:	e056      	b.n	8001428 <HAL_ETH_DMARxDescListInit+0xce>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2202      	movs	r2, #2
 8001386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e034      	b.n	8001400 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80013ae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d208      	bcs.n	80013f4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	015b      	lsls	r3, r3, #5
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	e002      	b.n	80013fa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3c6      	bcc.n	8001396 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001412:	330c      	adds	r3, #12
 8001414:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ETH_TransmitFrame+0x24>
 8001454:	2302      	movs	r3, #2
 8001456:	e0cd      	b.n	80015f4 <HAL_ETH_TransmitFrame+0x1c0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800147e:	2301      	movs	r3, #1
 8001480:	e0b8      	b.n	80015f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da09      	bge.n	80014a0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2212      	movs	r2, #18
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0a9      	b.n	80015f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d915      	bls.n	80014d6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_ETH_TransmitFrame+0x1cc>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0a9b      	lsrs	r3, r3, #10
 80014b4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_ETH_TransmitFrame+0x1cc>)
 80014ba:	fba3 1302 	umull	r1, r3, r3, r2
 80014be:	0a9b      	lsrs	r3, r3, #10
 80014c0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e001      	b.n	80014da <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d11c      	bne.n	800151a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014ee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014fa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
 8001518:	e04b      	b.n	80015b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e044      	b.n	80015aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001544:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3b01      	subs	r3, #1
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	429a      	cmp	r2, r3
 8001558:	d116      	bne.n	8001588 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001568:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_ETH_TransmitFrame+0x1d0>)
 800156e:	fb02 f203 	mul.w	r2, r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800157a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001586:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001596:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	3301      	adds	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3b6      	bcc.n	8001520 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ba:	3314      	adds	r3, #20
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00d      	beq.n	80015e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	3314      	adds	r3, #20
 80015d0:	2204      	movs	r2, #4
 80015d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	3304      	adds	r3, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	ac02b00b 	.word	0xac02b00b
 8001604:	fffffa0c 	.word	0xfffffa0c

08001608 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ETH_GetReceivedFrame+0x1a>
 800161e:	2302      	movs	r3, #2
 8001620:	e070      	b.n	8001704 <HAL_ETH_GetReceivedFrame+0xfc>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db5a      	blt.n	80016f2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d030      	beq.n	80016ac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	2b01      	cmp	r3, #1
 800165a:	d103      	bne.n	8001664 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001678:	3b04      	subs	r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e02b      	b.n	8001704 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d010      	beq.n	80016dc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
 80016da:	e00a      	b.n	80016f2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	460b      	mov	r3, r1
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b82      	cmp	r3, #130	; 0x82
 8001730:	d101      	bne.n	8001736 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	e050      	b.n	80017d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2282      	movs	r2, #130	; 0x82
 800173a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 031c 	and.w	r3, r3, #28
 800174c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8a1b      	ldrh	r3, [r3, #16]
 8001752:	02db      	lsls	r3, r3, #11
 8001754:	b29b      	uxth	r3, r3
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800175c:	897b      	ldrh	r3, [r7, #10]
 800175e:	019b      	lsls	r3, r3, #6
 8001760:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001782:	f7ff facf 	bl	8000d24 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001788:	e015      	b.n	80017b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800178a:	f7ff facb 	bl	8000d24 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d309      	bcc.n	80017ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e014      	b.n	80017d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e4      	bne.n	800178a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	460b      	mov	r3, r1
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b42      	cmp	r3, #66	; 0x42
 8001800:	d101      	bne.n	8001806 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	e04e      	b.n	80018a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2242      	movs	r2, #66	; 0x42
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8a1b      	ldrh	r3, [r3, #16]
 8001822:	02db      	lsls	r3, r3, #11
 8001824:	b29b      	uxth	r3, r3
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800182c:	897b      	ldrh	r3, [r7, #10]
 800182e:	019b      	lsls	r3, r3, #6
 8001830:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	4313      	orrs	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800185c:	f7ff fa62 	bl	8000d24 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001862:	e015      	b.n	8001890 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001864:	f7ff fa5e 	bl	8000d24 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d309      	bcc.n	8001888 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e00d      	b.n	80018a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e4      	bne.n	8001864 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ETH_Start+0x16>
 80018be:	2302      	movs	r3, #2
 80018c0:	e01f      	b.n	8001902 <HAL_ETH_Start+0x56>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa1c 	bl	8001d10 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fa36 	bl	8001d4a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa80 	bl	8001de4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fa4d 	bl	8001d84 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fa62 	bl	8001db4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0b0      	sub	sp, #192	; 0xc0
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001928:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001930:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800193a:	2300      	movs	r3, #0
 800193c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	663b      	str	r3, [r7, #96]	; 0x60
 8001958:	e001      	b.n	800195e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800195e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001962:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001968:	2300      	movs	r3, #0
 800196a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e4:	4bac      	ldr	r3, [pc, #688]	; (8001c98 <ETH_MACDMAConfig+0x38c>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019f0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80019f4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80019f8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019fe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a02:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a06:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a0c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a10:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a14:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a18:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a1c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a20:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff f97b 	bl	8000d3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a4e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a54:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a58:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a5e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a64:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a6a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a70:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a7c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a7e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff f956 	bl	8000d3c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a98:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aa2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001aac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001abc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ad0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ad6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001adc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ae2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ae8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001afc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff f917 	bl	8000d3c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b16:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b18:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff f902 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b40:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b54:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b66:	2304      	movs	r3, #4
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	3318      	adds	r3, #24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <ETH_MACDMAConfig+0x390>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001baa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001bac:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001bb0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001bb2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001bb4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001bb6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001bb8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001bba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001bbc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001bbe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001bc2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001bc6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001bca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	3318      	adds	r3, #24
 8001be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bee:	3318      	adds	r3, #24
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff f8a0 	bl	8000d3c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c04:	3318      	adds	r3, #24
 8001c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c0a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c10:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c14:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c18:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c1c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c22:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c26:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff f879 	bl	8000d3c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c56:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10f      	bne.n	8001c80 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	331c      	adds	r3, #28
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	331c      	adds	r3, #28
 8001c7e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	461a      	mov	r2, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f809 	bl	8001ca0 <ETH_MACAddressConfig>
}
 8001c8e:	bf00      	nop
 8001c90:	37c0      	adds	r7, #192	; 0xc0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	ff20810f 	.word	0xff20810f
 8001c9c:	f8de3f23 	.word	0xf8de3f23

08001ca0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3305      	adds	r3, #5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	3204      	adds	r2, #4
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <ETH_MACAddressConfig+0x68>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	061a      	lsls	r2, r3, #24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <ETH_MACAddressConfig+0x6c>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40028040 	.word	0x40028040
 8001d0c:	40028044 	.word	0x40028044

08001d10 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f000 f87f 	bl	8001e38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0204 	orr.w	r2, r2, #4
 8001d64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 f862 	bl	8001e38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d94:	3318      	adds	r3, #24
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da4:	3318      	adds	r3, #24
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0202 	orr.w	r2, r2, #2
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	3318      	adds	r3, #24
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	3318      	adds	r3, #24
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	3318      	adds	r3, #24
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 f80c 	bl	8001e38 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <ETH_Delay+0x34>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <ETH_Delay+0x38>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0a5b      	lsrs	r3, r3, #9
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001e54:	bf00      	nop
  } 
  while (Delay --);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	60fa      	str	r2, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f9      	bne.n	8001e54 <ETH_Delay+0x1c>
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e177      	b.n	8002180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8166 	bne.w	800217a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00b      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0xfc>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80c0 	beq.w	800217a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_GPIO_Init+0x320>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a64      	ldr	r2, [pc, #400]	; (8002194 <HAL_GPIO_Init+0x320>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_GPIO_Init+0x320>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a60      	ldr	r2, [pc, #384]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a57      	ldr	r2, [pc, #348]	; (800219c <HAL_GPIO_Init+0x328>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d037      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a56      	ldr	r2, [pc, #344]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d031      	beq.n	80020ae <HAL_GPIO_Init+0x23a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_GPIO_Init+0x330>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <HAL_GPIO_Init+0x236>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a54      	ldr	r2, [pc, #336]	; (80021a8 <HAL_GPIO_Init+0x334>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a53      	ldr	r2, [pc, #332]	; (80021ac <HAL_GPIO_Init+0x338>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_GPIO_Init+0x33c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x22a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_GPIO_Init+0x340>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_GPIO_Init+0x344>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <HAL_GPIO_Init+0x348>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x21a>
 800208a:	2309      	movs	r3, #9
 800208c:	e012      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800208e:	230a      	movs	r3, #10
 8002090:	e010      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002092:	2308      	movs	r3, #8
 8002094:	e00e      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 8002096:	2307      	movs	r3, #7
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x240>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_GPIO_Init+0x324>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_GPIO_Init+0x350>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f6:	4a33      	ldr	r2, [pc, #204]	; (80021c4 <HAL_GPIO_Init+0x350>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x350>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_GPIO_Init+0x350>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_GPIO_Init+0x350>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f ae84 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40021400 	.word	0x40021400
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40021c00 	.word	0x40021c00
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40022400 	.word	0x40022400
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fc:	b08f      	sub	sp, #60	; 0x3c
 80021fe:	af0a      	add	r7, sp, #40	; 0x28
 8002200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e10f      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fc92 	bl	8000b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f001 f97f 	bl	800354e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	687e      	ldr	r6, [r7, #4]
 8002258:	466d      	mov	r5, sp
 800225a:	f106 0410 	add.w	r4, r6, #16
 800225e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226a:	e885 0003 	stmia.w	r5, {r0, r1}
 800226e:	1d33      	adds	r3, r6, #4
 8002270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f001 f90a 	bl	800348c <USB_CoreInit>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0d0      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f001 f96d 	bl	8003570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e04a      	b.n	8002332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	333d      	adds	r3, #61	; 0x3d
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	333c      	adds	r3, #60	; 0x3c
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	b298      	uxth	r0, r3
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3342      	adds	r3, #66	; 0x42
 80022d8:	4602      	mov	r2, r0
 80022da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	333f      	adds	r3, #63	; 0x3f
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3344      	adds	r3, #68	; 0x44
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3350      	adds	r3, #80	; 0x50
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d3af      	bcc.n	800229c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e044      	b.n	80023cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3b5      	bcc.n	8002342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	687e      	ldr	r6, [r7, #4]
 80023de:	466d      	mov	r5, sp
 80023e0:	f106 0410 	add.w	r4, r6, #16
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f4:	1d33      	adds	r3, r6, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f001 f8e3 	bl	80035c4 <USB_DevInit>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e00d      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f001 faa0 	bl	800396a <USB_DevDisconnect>

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e25b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	4ba3      	ldr	r3, [pc, #652]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4ba0      	ldr	r3, [pc, #640]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b9d      	ldr	r3, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e236      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a83      	ldr	r2, [pc, #524]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fc1a 	bl	8000d24 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fc16 	bl	8000d24 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1fb      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fc06 	bl	8000d24 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fc02 	bl	8000d24 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1e7      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1bb      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4952      	ldr	r1, [pc, #328]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fbbb 	bl	8000d24 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fbb7 	bl	8000d24 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e19c      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b46      	ldr	r3, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x2b0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fb9a 	bl	8000d24 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fb96 	bl	8000d24 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e17b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fb7a 	bl	8000d24 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fb76 	bl	8000d24 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e15b      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e015      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x2b4>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fb63 	bl	8000d24 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fb5f 	bl	8000d24 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e144      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a0 	beq.w	80027ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d121      	bne.n	800270e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fe fb25 	bl	8000d24 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e011      	b.n	8002702 <HAL_RCC_OscConfig+0x2ce>
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
 80026ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fb18 	bl	8000d24 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0fd      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002702:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x4d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x2f0>
 8002716:	4b7d      	ldr	r3, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a7c      	ldr	r2, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x312>
 800272c:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b74      	ldr	r3, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x32a>
 8002746:	4b71      	ldr	r3, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a70      	ldr	r2, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
 8002752:	4b6e      	ldr	r3, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe fadd 	bl	8000d24 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fad9 	bl	8000d24 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0bc      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x33a>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe fac7 	bl	8000d24 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fac3 	bl	8000d24 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0a6      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b56      	ldr	r3, [pc, #344]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a51      	ldr	r2, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8092 	beq.w	80028fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d8:	4b4c      	ldr	r3, [pc, #304]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d05c      	beq.n	800289e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d141      	bne.n	8002870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fa97 	bl	8000d24 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fa93 	bl	8000d24 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e078      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	019b      	lsls	r3, r3, #6
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4933      	ldr	r1, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fa6c 	bl	8000d24 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fa68 	bl	8000d24 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04d      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x41c>
 800286e:	e045      	b.n	80028fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4dc>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fa55 	bl	8000d24 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fa51 	bl	8000d24 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e036      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x44a>
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e029      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_RCC_OscConfig+0x4d8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d115      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000
 800290c:	40023800 	.word	0x40023800
 8002910:	42470060 	.word	0x42470060

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cc      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d90c      	bls.n	8002950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d044      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe f98e 	bl	8000d24 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe f98a 	bl	8000d24 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20c      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f8ee 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	0800f9d8 	.word	0x0800f9d8
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d007      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d008      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x38>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80b4 	bne.w	8002c74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b5e      	ldr	r3, [pc, #376]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b0e:	60bb      	str	r3, [r7, #8]
       break;
 8002b10:	e0b3      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b14:	60bb      	str	r3, [r7, #8]
      break;
 8002b16:	e0b0      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	ea03 0501 	and.w	r5, r3, r1
 8002b44:	ea04 0602 	and.w	r6, r4, r2
 8002b48:	4629      	mov	r1, r5
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	0154      	lsls	r4, r2, #5
 8002b56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b5a:	014b      	lsls	r3, r1, #5
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4622      	mov	r2, r4
 8002b60:	1b49      	subs	r1, r1, r5
 8002b62:	eb62 0206 	sbc.w	r2, r2, r6
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	0194      	lsls	r4, r2, #6
 8002b70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b74:	018b      	lsls	r3, r1, #6
 8002b76:	1a5b      	subs	r3, r3, r1
 8002b78:	eb64 0402 	sbc.w	r4, r4, r2
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	00e2      	lsls	r2, r4, #3
 8002b86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b8a:	00d9      	lsls	r1, r3, #3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4614      	mov	r4, r2
 8002b90:	195b      	adds	r3, r3, r5
 8002b92:	eb44 0406 	adc.w	r4, r4, r6
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	0262      	lsls	r2, r4, #9
 8002ba0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ba4:	0259      	lsls	r1, r3, #9
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f7fd fb6a 	bl	8000290 <__aeabi_uldivmod>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e049      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	ea03 0501 	and.w	r5, r3, r1
 8002bda:	ea04 0602 	and.w	r6, r4, r2
 8002bde:	4629      	mov	r1, r5
 8002be0:	4632      	mov	r2, r6
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	0154      	lsls	r4, r2, #5
 8002bec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf0:	014b      	lsls	r3, r1, #5
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	1b49      	subs	r1, r1, r5
 8002bf8:	eb62 0206 	sbc.w	r2, r2, r6
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0194      	lsls	r4, r2, #6
 8002c06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c0a:	018b      	lsls	r3, r1, #6
 8002c0c:	1a5b      	subs	r3, r3, r1
 8002c0e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c20:	00d9      	lsls	r1, r3, #3
 8002c22:	460b      	mov	r3, r1
 8002c24:	4614      	mov	r4, r2
 8002c26:	195b      	adds	r3, r3, r5
 8002c28:	eb44 0406 	adc.w	r4, r4, r6
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	02a2      	lsls	r2, r4, #10
 8002c36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c3a:	0299      	lsls	r1, r3, #10
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4614      	mov	r4, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	4621      	mov	r1, r4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	f7fd fb1f 	bl	8000290 <__aeabi_uldivmod>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4601      	mov	r1, r0
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4a03      	ldr	r2, [pc, #12]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	0800f9e8 	.word	0x0800f9e8

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	0800f9e8 	.word	0x0800f9e8

08002cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e03f      	b.n	8002d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fd fea0 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f829 	bl	8002d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dd6:	f023 030c 	bic.w	r3, r3, #12
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	f040 818b 	bne.w	800311c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4ac1      	ldr	r2, [pc, #772]	; (8003110 <UART_SetConfig+0x37c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d005      	beq.n	8002e1c <UART_SetConfig+0x88>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4abf      	ldr	r2, [pc, #764]	; (8003114 <UART_SetConfig+0x380>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	f040 80bd 	bne.w	8002f96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e1c:	f7ff ff58 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8002e20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	461d      	mov	r5, r3
 8002e26:	f04f 0600 	mov.w	r6, #0
 8002e2a:	46a8      	mov	r8, r5
 8002e2c:	46b1      	mov	r9, r6
 8002e2e:	eb18 0308 	adds.w	r3, r8, r8
 8002e32:	eb49 0409 	adc.w	r4, r9, r9
 8002e36:	4698      	mov	r8, r3
 8002e38:	46a1      	mov	r9, r4
 8002e3a:	eb18 0805 	adds.w	r8, r8, r5
 8002e3e:	eb49 0906 	adc.w	r9, r9, r6
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e56:	4688      	mov	r8, r1
 8002e58:	4691      	mov	r9, r2
 8002e5a:	eb18 0005 	adds.w	r0, r8, r5
 8002e5e:	eb49 0106 	adc.w	r1, r9, r6
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	461d      	mov	r5, r3
 8002e68:	f04f 0600 	mov.w	r6, #0
 8002e6c:	196b      	adds	r3, r5, r5
 8002e6e:	eb46 0406 	adc.w	r4, r6, r6
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	f7fd fa0b 	bl	8000290 <__aeabi_uldivmod>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4ba5      	ldr	r3, [pc, #660]	; (8003118 <UART_SetConfig+0x384>)
 8002e82:	fba3 2302 	umull	r2, r3, r3, r2
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	461d      	mov	r5, r3
 8002e90:	f04f 0600 	mov.w	r6, #0
 8002e94:	46a9      	mov	r9, r5
 8002e96:	46b2      	mov	sl, r6
 8002e98:	eb19 0309 	adds.w	r3, r9, r9
 8002e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	46a2      	mov	sl, r4
 8002ea4:	eb19 0905 	adds.w	r9, r9, r5
 8002ea8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ec0:	4689      	mov	r9, r1
 8002ec2:	4692      	mov	sl, r2
 8002ec4:	eb19 0005 	adds.w	r0, r9, r5
 8002ec8:	eb4a 0106 	adc.w	r1, sl, r6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	196b      	adds	r3, r5, r5
 8002ed8:	eb46 0406 	adc.w	r4, r6, r6
 8002edc:	461a      	mov	r2, r3
 8002ede:	4623      	mov	r3, r4
 8002ee0:	f7fd f9d6 	bl	8000290 <__aeabi_uldivmod>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <UART_SetConfig+0x384>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	; 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	; 0x32
 8002efe:	4a86      	ldr	r2, [pc, #536]	; (8003118 <UART_SetConfig+0x384>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f0c:	4498      	add	r8, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	461d      	mov	r5, r3
 8002f12:	f04f 0600 	mov.w	r6, #0
 8002f16:	46a9      	mov	r9, r5
 8002f18:	46b2      	mov	sl, r6
 8002f1a:	eb19 0309 	adds.w	r3, r9, r9
 8002f1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f22:	4699      	mov	r9, r3
 8002f24:	46a2      	mov	sl, r4
 8002f26:	eb19 0905 	adds.w	r9, r9, r5
 8002f2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f42:	4689      	mov	r9, r1
 8002f44:	4692      	mov	sl, r2
 8002f46:	eb19 0005 	adds.w	r0, r9, r5
 8002f4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	461d      	mov	r5, r3
 8002f54:	f04f 0600 	mov.w	r6, #0
 8002f58:	196b      	adds	r3, r5, r5
 8002f5a:	eb46 0406 	adc.w	r4, r6, r6
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4623      	mov	r3, r4
 8002f62:	f7fd f995 	bl	8000290 <__aeabi_uldivmod>
 8002f66:	4603      	mov	r3, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <UART_SetConfig+0x384>)
 8002f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2164      	movs	r1, #100	; 0x64
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	3332      	adds	r3, #50	; 0x32
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <UART_SetConfig+0x384>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	f003 0207 	and.w	r2, r3, #7
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4442      	add	r2, r8
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	e26f      	b.n	8003476 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7ff fe87 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	f04f 0600 	mov.w	r6, #0
 8002fa4:	46a8      	mov	r8, r5
 8002fa6:	46b1      	mov	r9, r6
 8002fa8:	eb18 0308 	adds.w	r3, r8, r8
 8002fac:	eb49 0409 	adc.w	r4, r9, r9
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	46a1      	mov	r9, r4
 8002fb4:	eb18 0805 	adds.w	r8, r8, r5
 8002fb8:	eb49 0906 	adc.w	r9, r9, r6
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fcc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fd0:	4688      	mov	r8, r1
 8002fd2:	4691      	mov	r9, r2
 8002fd4:	eb18 0005 	adds.w	r0, r8, r5
 8002fd8:	eb49 0106 	adc.w	r1, r9, r6
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	461d      	mov	r5, r3
 8002fe2:	f04f 0600 	mov.w	r6, #0
 8002fe6:	196b      	adds	r3, r5, r5
 8002fe8:	eb46 0406 	adc.w	r4, r6, r6
 8002fec:	461a      	mov	r2, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f7fd f94e 	bl	8000290 <__aeabi_uldivmod>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <UART_SetConfig+0x384>)
 8002ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	461d      	mov	r5, r3
 800300a:	f04f 0600 	mov.w	r6, #0
 800300e:	46a9      	mov	r9, r5
 8003010:	46b2      	mov	sl, r6
 8003012:	eb19 0309 	adds.w	r3, r9, r9
 8003016:	eb4a 040a 	adc.w	r4, sl, sl
 800301a:	4699      	mov	r9, r3
 800301c:	46a2      	mov	sl, r4
 800301e:	eb19 0905 	adds.w	r9, r9, r5
 8003022:	eb4a 0a06 	adc.w	sl, sl, r6
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003032:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003036:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800303a:	4689      	mov	r9, r1
 800303c:	4692      	mov	sl, r2
 800303e:	eb19 0005 	adds.w	r0, r9, r5
 8003042:	eb4a 0106 	adc.w	r1, sl, r6
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	461d      	mov	r5, r3
 800304c:	f04f 0600 	mov.w	r6, #0
 8003050:	196b      	adds	r3, r5, r5
 8003052:	eb46 0406 	adc.w	r4, r6, r6
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f7fd f919 	bl	8000290 <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	461a      	mov	r2, r3
 8003064:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <UART_SetConfig+0x384>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <UART_SetConfig+0x384>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003086:	4498      	add	r8, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	461d      	mov	r5, r3
 800308c:	f04f 0600 	mov.w	r6, #0
 8003090:	46a9      	mov	r9, r5
 8003092:	46b2      	mov	sl, r6
 8003094:	eb19 0309 	adds.w	r3, r9, r9
 8003098:	eb4a 040a 	adc.w	r4, sl, sl
 800309c:	4699      	mov	r9, r3
 800309e:	46a2      	mov	sl, r4
 80030a0:	eb19 0905 	adds.w	r9, r9, r5
 80030a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030bc:	4689      	mov	r9, r1
 80030be:	4692      	mov	sl, r2
 80030c0:	eb19 0005 	adds.w	r0, r9, r5
 80030c4:	eb4a 0106 	adc.w	r1, sl, r6
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	461d      	mov	r5, r3
 80030ce:	f04f 0600 	mov.w	r6, #0
 80030d2:	196b      	adds	r3, r5, r5
 80030d4:	eb46 0406 	adc.w	r4, r6, r6
 80030d8:	461a      	mov	r2, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	f7fd f8d8 	bl	8000290 <__aeabi_uldivmod>
 80030e0:	4603      	mov	r3, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <UART_SetConfig+0x384>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	; 0x32
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <UART_SetConfig+0x384>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4442      	add	r2, r8
 800310c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800310e:	e1b2      	b.n	8003476 <UART_SetConfig+0x6e2>
 8003110:	40011000 	.word	0x40011000
 8003114:	40011400 	.word	0x40011400
 8003118:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4ad7      	ldr	r2, [pc, #860]	; (8003480 <UART_SetConfig+0x6ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d005      	beq.n	8003132 <UART_SetConfig+0x39e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4ad6      	ldr	r2, [pc, #856]	; (8003484 <UART_SetConfig+0x6f0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	f040 80d1 	bne.w	80032d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003132:	f7ff fdcd 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8003136:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	469a      	mov	sl, r3
 800313c:	f04f 0b00 	mov.w	fp, #0
 8003140:	46d0      	mov	r8, sl
 8003142:	46d9      	mov	r9, fp
 8003144:	eb18 0308 	adds.w	r3, r8, r8
 8003148:	eb49 0409 	adc.w	r4, r9, r9
 800314c:	4698      	mov	r8, r3
 800314e:	46a1      	mov	r9, r4
 8003150:	eb18 080a 	adds.w	r8, r8, sl
 8003154:	eb49 090b 	adc.w	r9, r9, fp
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003164:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003168:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800316c:	4688      	mov	r8, r1
 800316e:	4691      	mov	r9, r2
 8003170:	eb1a 0508 	adds.w	r5, sl, r8
 8003174:	eb4b 0609 	adc.w	r6, fp, r9
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	f04f 0400 	mov.w	r4, #0
 800318a:	0094      	lsls	r4, r2, #2
 800318c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	461a      	mov	r2, r3
 8003194:	4623      	mov	r3, r4
 8003196:	4628      	mov	r0, r5
 8003198:	4631      	mov	r1, r6
 800319a:	f7fd f879 	bl	8000290 <__aeabi_uldivmod>
 800319e:	4603      	mov	r3, r0
 80031a0:	460c      	mov	r4, r1
 80031a2:	461a      	mov	r2, r3
 80031a4:	4bb8      	ldr	r3, [pc, #736]	; (8003488 <UART_SetConfig+0x6f4>)
 80031a6:	fba3 2302 	umull	r2, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	469b      	mov	fp, r3
 80031b4:	f04f 0c00 	mov.w	ip, #0
 80031b8:	46d9      	mov	r9, fp
 80031ba:	46e2      	mov	sl, ip
 80031bc:	eb19 0309 	adds.w	r3, r9, r9
 80031c0:	eb4a 040a 	adc.w	r4, sl, sl
 80031c4:	4699      	mov	r9, r3
 80031c6:	46a2      	mov	sl, r4
 80031c8:	eb19 090b 	adds.w	r9, r9, fp
 80031cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031e4:	4689      	mov	r9, r1
 80031e6:	4692      	mov	sl, r2
 80031e8:	eb1b 0509 	adds.w	r5, fp, r9
 80031ec:	eb4c 060a 	adc.w	r6, ip, sl
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0094      	lsls	r4, r2, #2
 8003204:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	4628      	mov	r0, r5
 8003210:	4631      	mov	r1, r6
 8003212:	f7fd f83d 	bl	8000290 <__aeabi_uldivmod>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	461a      	mov	r2, r3
 800321c:	4b9a      	ldr	r3, [pc, #616]	; (8003488 <UART_SetConfig+0x6f4>)
 800321e:	fba3 1302 	umull	r1, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2164      	movs	r1, #100	; 0x64
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	3332      	adds	r3, #50	; 0x32
 8003230:	4a95      	ldr	r2, [pc, #596]	; (8003488 <UART_SetConfig+0x6f4>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323c:	4498      	add	r8, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	469b      	mov	fp, r3
 8003242:	f04f 0c00 	mov.w	ip, #0
 8003246:	46d9      	mov	r9, fp
 8003248:	46e2      	mov	sl, ip
 800324a:	eb19 0309 	adds.w	r3, r9, r9
 800324e:	eb4a 040a 	adc.w	r4, sl, sl
 8003252:	4699      	mov	r9, r3
 8003254:	46a2      	mov	sl, r4
 8003256:	eb19 090b 	adds.w	r9, r9, fp
 800325a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800326e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003272:	4689      	mov	r9, r1
 8003274:	4692      	mov	sl, r2
 8003276:	eb1b 0509 	adds.w	r5, fp, r9
 800327a:	eb4c 060a 	adc.w	r6, ip, sl
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	0094      	lsls	r4, r2, #2
 8003292:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	461a      	mov	r2, r3
 800329a:	4623      	mov	r3, r4
 800329c:	4628      	mov	r0, r5
 800329e:	4631      	mov	r1, r6
 80032a0:	f7fc fff6 	bl	8000290 <__aeabi_uldivmod>
 80032a4:	4603      	mov	r3, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b77      	ldr	r3, [pc, #476]	; (8003488 <UART_SetConfig+0x6f4>)
 80032ac:	fba3 1302 	umull	r1, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2164      	movs	r1, #100	; 0x64
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	4a72      	ldr	r2, [pc, #456]	; (8003488 <UART_SetConfig+0x6f4>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4442      	add	r2, r8
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	e0d0      	b.n	8003476 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff fce8 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 80032d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	469a      	mov	sl, r3
 80032de:	f04f 0b00 	mov.w	fp, #0
 80032e2:	46d0      	mov	r8, sl
 80032e4:	46d9      	mov	r9, fp
 80032e6:	eb18 0308 	adds.w	r3, r8, r8
 80032ea:	eb49 0409 	adc.w	r4, r9, r9
 80032ee:	4698      	mov	r8, r3
 80032f0:	46a1      	mov	r9, r4
 80032f2:	eb18 080a 	adds.w	r8, r8, sl
 80032f6:	eb49 090b 	adc.w	r9, r9, fp
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003306:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800330a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800330e:	4688      	mov	r8, r1
 8003310:	4691      	mov	r9, r2
 8003312:	eb1a 0508 	adds.w	r5, sl, r8
 8003316:	eb4b 0609 	adc.w	r6, fp, r9
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4619      	mov	r1, r3
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f04f 0400 	mov.w	r4, #0
 800332c:	0094      	lsls	r4, r2, #2
 800332e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003332:	008b      	lsls	r3, r1, #2
 8003334:	461a      	mov	r2, r3
 8003336:	4623      	mov	r3, r4
 8003338:	4628      	mov	r0, r5
 800333a:	4631      	mov	r1, r6
 800333c:	f7fc ffa8 	bl	8000290 <__aeabi_uldivmod>
 8003340:	4603      	mov	r3, r0
 8003342:	460c      	mov	r4, r1
 8003344:	461a      	mov	r2, r3
 8003346:	4b50      	ldr	r3, [pc, #320]	; (8003488 <UART_SetConfig+0x6f4>)
 8003348:	fba3 2302 	umull	r2, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	469b      	mov	fp, r3
 8003356:	f04f 0c00 	mov.w	ip, #0
 800335a:	46d9      	mov	r9, fp
 800335c:	46e2      	mov	sl, ip
 800335e:	eb19 0309 	adds.w	r3, r9, r9
 8003362:	eb4a 040a 	adc.w	r4, sl, sl
 8003366:	4699      	mov	r9, r3
 8003368:	46a2      	mov	sl, r4
 800336a:	eb19 090b 	adds.w	r9, r9, fp
 800336e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003382:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003386:	4689      	mov	r9, r1
 8003388:	4692      	mov	sl, r2
 800338a:	eb1b 0509 	adds.w	r5, fp, r9
 800338e:	eb4c 060a 	adc.w	r6, ip, sl
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	0094      	lsls	r4, r2, #2
 80033a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033aa:	008b      	lsls	r3, r1, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	4631      	mov	r1, r6
 80033b4:	f7fc ff6c 	bl	8000290 <__aeabi_uldivmod>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	461a      	mov	r2, r3
 80033be:	4b32      	ldr	r3, [pc, #200]	; (8003488 <UART_SetConfig+0x6f4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	3332      	adds	r3, #50	; 0x32
 80033d2:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <UART_SetConfig+0x6f4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033de:	4498      	add	r8, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	469b      	mov	fp, r3
 80033e4:	f04f 0c00 	mov.w	ip, #0
 80033e8:	46d9      	mov	r9, fp
 80033ea:	46e2      	mov	sl, ip
 80033ec:	eb19 0309 	adds.w	r3, r9, r9
 80033f0:	eb4a 040a 	adc.w	r4, sl, sl
 80033f4:	4699      	mov	r9, r3
 80033f6:	46a2      	mov	sl, r4
 80033f8:	eb19 090b 	adds.w	r9, r9, fp
 80033fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003414:	4689      	mov	r9, r1
 8003416:	4692      	mov	sl, r2
 8003418:	eb1b 0509 	adds.w	r5, fp, r9
 800341c:	eb4c 060a 	adc.w	r6, ip, sl
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	0094      	lsls	r4, r2, #2
 8003434:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003438:	008b      	lsls	r3, r1, #2
 800343a:	461a      	mov	r2, r3
 800343c:	4623      	mov	r3, r4
 800343e:	4628      	mov	r0, r5
 8003440:	4631      	mov	r1, r6
 8003442:	f7fc ff25 	bl	8000290 <__aeabi_uldivmod>
 8003446:	4603      	mov	r3, r0
 8003448:	460c      	mov	r4, r1
 800344a:	461a      	mov	r2, r3
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <UART_SetConfig+0x6f4>)
 800344e:	fba3 1302 	umull	r1, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2164      	movs	r1, #100	; 0x64
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	3332      	adds	r3, #50	; 0x32
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <UART_SetConfig+0x6f4>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4442      	add	r2, r8
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	e7ff      	b.n	8003476 <UART_SetConfig+0x6e2>
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	51eb851f 	.word	0x51eb851f

0800348c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800348c:	b084      	sub	sp, #16
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	f107 001c 	add.w	r0, r7, #28
 800349a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d122      	bne.n	80034ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa5c 	bl	800399c <USB_CoreReset>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e01a      	b.n	8003520 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa50 	bl	800399c <USB_CoreReset>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
 8003512:	e005      	b.n	8003520 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10b      	bne.n	800353e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f043 0206 	orr.w	r2, r3, #6
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800354a:	b004      	add	sp, #16
 800354c:	4770      	bx	lr

0800354e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d106      	bne.n	800359c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	e00b      	b.n	80035b4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e001      	b.n	80035b4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e003      	b.n	80035bc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035b4:	2032      	movs	r0, #50	; 0x32
 80035b6:	f7fd fbc1 	bl	8000d3c <HAL_Delay>

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e009      	b.n	80035f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3340      	adds	r3, #64	; 0x40
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	2200      	movs	r2, #0
 80035f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b0e      	cmp	r3, #14
 80035fc:	d9f2      	bls.n	80035e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d112      	bne.n	800362a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
 8003628:	e00b      	b.n	8003642 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	4619      	mov	r1, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365c:	461a      	mov	r2, r3
 800365e:	680b      	ldr	r3, [r1, #0]
 8003660:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10c      	bne.n	8003682 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f961 	bl	8003938 <USB_SetDevSpeed>
 8003676:	e008      	b.n	800368a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003678:	2101      	movs	r1, #1
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f95c 	bl	8003938 <USB_SetDevSpeed>
 8003680:	e003      	b.n	800368a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003682:	2103      	movs	r1, #3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f957 	bl	8003938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800368a:	2110      	movs	r1, #16
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f90b 	bl	80038a8 <USB_FlushTxFifo>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f929 	bl	80038f4 <USB_FlushRxFifo>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	461a      	mov	r2, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	e043      	b.n	800375e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ec:	d118      	bne.n	8003720 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003700:	461a      	mov	r2, r3
 8003702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e013      	b.n	8003732 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e008      	b.n	8003732 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	461a      	mov	r2, r3
 800372e:	2300      	movs	r3, #0
 8003730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003750:	461a      	mov	r2, r3
 8003752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3301      	adds	r3, #1
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3b7      	bcc.n	80036d6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e043      	b.n	80037f4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003782:	d118      	bne.n	80037b6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003796:	461a      	mov	r2, r3
 8003798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e013      	b.n	80037c8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e008      	b.n	80037c8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	461a      	mov	r2, r3
 80037e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3301      	adds	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3b7      	bcc.n	800376c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2b01      	cmp	r3, #1
 8003814:	d111      	bne.n	800383a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	461a      	mov	r2, r3
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <USB_DevInit+0x2dc>)
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	f043 0303 	orr.w	r3, r3, #3
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003846:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <USB_DevInit+0x2e0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f043 0208 	orr.w	r2, r3, #8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800388e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800389a:	b004      	add	sp, #16
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	00800100 	.word	0x00800100
 80038a4:	803c3800 	.word	0x803c3800

080038a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <USB_FlushTxFifo+0x48>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e006      	b.n	80038e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d0f0      	beq.n	80038c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	00030d40 	.word	0x00030d40

080038f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2210      	movs	r2, #16
 8003904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3301      	adds	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <USB_FlushRxFifo+0x40>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e006      	b.n	8003926 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d0f0      	beq.n	8003906 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	00030d40 	.word	0x00030d40

08003938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800398a:	2003      	movs	r0, #3
 800398c:	f7fd f9d6 	bl	8000d3c <HAL_Delay>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <USB_CoreReset+0x64>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e01b      	b.n	80039f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	daf2      	bge.n	80039a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <USB_CoreReset+0x64>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e006      	b.n	80039f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d0f0      	beq.n	80039d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	00030d40 	.word	0x00030d40

08003a04 <handle_udp_recv>:
 * Checks that a pbuf structure is valid, and assigns the remote IP and port to the debug UDP port.
 * This is not strictly necessary as it could be added each pack, but we are assuming a single connection.
 * Reply with the same message to the client and enable the debug.
 */
void handle_udp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p,  ip_addr_t *addr, u16_t port)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <handle_udp_recv+0x3a>
        /* send received packet back to sender */
        debug_if->remote_ip=(*addr);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <handle_udp_recv+0x44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	605a      	str	r2, [r3, #4]
        debug_if->remote_port=port;
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <handle_udp_recv+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	8b3a      	ldrh	r2, [r7, #24]
 8003a28:	829a      	strh	r2, [r3, #20]
        udp_send(pcb,p);
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	68b8      	ldr	r0, [r7, #8]
 8003a2e:	f006 fe55 	bl	800a6dc <udp_send>
        /* free the pbuf */
        pbuf_free(p);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 fdc6 	bl	80055c4 <pbuf_free>
        debugEnabled=0xFF;
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <handle_udp_recv+0x48>)
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	701a      	strb	r2, [r3, #0]
    }
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200006b8 	.word	0x200006b8
 8003a4c:	200006b0 	.word	0x200006b0

08003a50 <transmit>:
 * Set the payload to the first byte in the message array.
 * send the message on the debug_if interface.
 * free the pbuf structure.
 */
void transmit()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
	struct pbuf *debug_snd=pbuf_alloc(PBUF_TRANSPORT,10,PBUF_RAM);
 8003a56:	2200      	movs	r2, #0
 8003a58:	210a      	movs	r1, #10
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f001 fa40 	bl	8004ee0 <pbuf_alloc>
 8003a60:	6078      	str	r0, [r7, #4]
	debug_snd->next=NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
	debug_snd->payload=(void*) &message[0];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <transmit+0x38>)
 8003a6c:	605a      	str	r2, [r3, #4]
	udp_send(debug_if,debug_snd);
 8003a6e:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <transmit+0x3c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f006 fe31 	bl	800a6dc <udp_send>
	pbuf_free(debug_snd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f001 fda2 	bl	80055c4 <pbuf_free>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000000c 	.word	0x2000000c
 8003a8c:	200006b8 	.word	0x200006b8

08003a90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003a96:	4b97      	ldr	r3, [pc, #604]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003a98:	22c0      	movs	r2, #192	; 0xc0
 8003a9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003a9c:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003a9e:	22a8      	movs	r2, #168	; 0xa8
 8003aa0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003aa2:	4b94      	ldr	r3, [pc, #592]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 8003aa8:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003aaa:	2205      	movs	r2, #5
 8003aac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003aae:	4b92      	ldr	r3, [pc, #584]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003ab0:	22ff      	movs	r2, #255	; 0xff
 8003ab2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ab4:	4b90      	ldr	r3, [pc, #576]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003ab6:	22ff      	movs	r2, #255	; 0xff
 8003ab8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003aba:	4b8f      	ldr	r3, [pc, #572]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003abc:	22ff      	movs	r2, #255	; 0xff
 8003abe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003ac0:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003ac6:	4b8d      	ldr	r3, [pc, #564]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003acc:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003ad2:	4b8a      	ldr	r3, [pc, #552]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003ad8:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003ade:	f000 fc73 	bl	80043c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003ae2:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	061a      	lsls	r2, r3, #24
 8003ae8:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	4b80      	ldr	r3, [pc, #512]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003af2:	789b      	ldrb	r3, [r3, #2]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4313      	orrs	r3, r2
 8003af8:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003afa:	78d2      	ldrb	r2, [r2, #3]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	061a      	lsls	r2, r3, #24
 8003b00:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	0619      	lsls	r1, r3, #24
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	4319      	orrs	r1, r3
 8003b0e:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b10:	789b      	ldrb	r3, [r3, #2]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	430b      	orrs	r3, r1
 8003b16:	4977      	ldr	r1, [pc, #476]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b18:	78c9      	ldrb	r1, [r1, #3]
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b22:	431a      	orrs	r2, r3
 8003b24:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	0619      	lsls	r1, r3, #24
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	4319      	orrs	r1, r3
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	496e      	ldr	r1, [pc, #440]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b3c:	78c9      	ldrb	r1, [r1, #3]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b46:	431a      	orrs	r2, r3
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	0619      	lsls	r1, r3, #24
 8003b4e:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	4319      	orrs	r1, r3
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	4965      	ldr	r1, [pc, #404]	; (8003cf4 <MX_LWIP_Init+0x264>)
 8003b60:	78c9      	ldrb	r1, [r1, #3]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	4313      	orrs	r3, r2
 8003b68:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <MX_LWIP_Init+0x270>)
 8003b6a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b6c:	4b62      	ldr	r3, [pc, #392]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b84:	78d2      	ldrb	r2, [r2, #3]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	061a      	lsls	r2, r3, #24
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	0619      	lsls	r1, r3, #24
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	4319      	orrs	r1, r3
 8003b98:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	4955      	ldr	r1, [pc, #340]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003ba2:	78c9      	ldrb	r1, [r1, #3]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bac:	431a      	orrs	r2, r3
 8003bae:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	0619      	lsls	r1, r3, #24
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	4319      	orrs	r1, r3
 8003bbc:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	494c      	ldr	r1, [pc, #304]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bc6:	78c9      	ldrb	r1, [r1, #3]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	0619      	lsls	r1, r3, #24
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	4319      	orrs	r1, r3
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	430b      	orrs	r3, r1
 8003be8:	4943      	ldr	r1, [pc, #268]	; (8003cf8 <MX_LWIP_Init+0x268>)
 8003bea:	78c9      	ldrb	r1, [r1, #3]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	0e1b      	lsrs	r3, r3, #24
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <MX_LWIP_Init+0x274>)
 8003bf4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	061a      	lsls	r2, r3, #24
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c0e:	78d2      	ldrb	r2, [r2, #3]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	061a      	lsls	r2, r3, #24
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	0619      	lsls	r1, r3, #24
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	4319      	orrs	r1, r3
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c24:	789b      	ldrb	r3, [r3, #2]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	4934      	ldr	r1, [pc, #208]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c2c:	78c9      	ldrb	r1, [r1, #3]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c36:	431a      	orrs	r2, r3
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	0619      	lsls	r1, r3, #24
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	4319      	orrs	r1, r3
 8003c46:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c48:	789b      	ldrb	r3, [r3, #2]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	492b      	ldr	r1, [pc, #172]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c50:	78c9      	ldrb	r1, [r1, #3]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	0619      	lsls	r1, r3, #24
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c6c:	789b      	ldrb	r3, [r3, #2]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	430b      	orrs	r3, r1
 8003c72:	4922      	ldr	r1, [pc, #136]	; (8003cfc <MX_LWIP_Init+0x26c>)
 8003c74:	78c9      	ldrb	r1, [r1, #3]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <MX_LWIP_Init+0x278>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <MX_LWIP_Init+0x27c>)
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <MX_LWIP_Init+0x280>)
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <MX_LWIP_Init+0x278>)
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <MX_LWIP_Init+0x274>)
 8003c90:	491b      	ldr	r1, [pc, #108]	; (8003d00 <MX_LWIP_Init+0x270>)
 8003c92:	4820      	ldr	r0, [pc, #128]	; (8003d14 <MX_LWIP_Init+0x284>)
 8003c94:	f000 ff9e 	bl	8004bd4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c98:	481e      	ldr	r0, [pc, #120]	; (8003d14 <MX_LWIP_Init+0x284>)
 8003c9a:	f001 f87b 	bl	8004d94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <MX_LWIP_Init+0x284>)
 8003ca0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003cb0:	4818      	ldr	r0, [pc, #96]	; (8003d14 <MX_LWIP_Init+0x284>)
 8003cb2:	f001 f87f 	bl	8004db4 <netif_set_up>
 8003cb6:	e002      	b.n	8003cbe <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003cb8:	4816      	ldr	r0, [pc, #88]	; (8003d14 <MX_LWIP_Init+0x284>)
 8003cba:	f001 f8bf 	bl	8004e3c <netif_set_down>
/* USER CODE BEGIN 3 */
/* -Set debug enabled to false and instantiate a new udp protocol block.
 * -Bind this to the static ip Address set from cubeMX at port 1000.
 * -set the callback function to the handle_udp_recv function
 */
  debugEnabled=0x00;
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <MX_LWIP_Init+0x288>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
  debug_if = udp_new();
 8003cc4:	f006 fea6 	bl	800aa14 <udp_new>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <MX_LWIP_Init+0x28c>)
 8003ccc:	601a      	str	r2, [r3, #0]

  udp_bind(debug_if,&ipaddr,1000);
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <MX_LWIP_Init+0x28c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd6:	490a      	ldr	r1, [pc, #40]	; (8003d00 <MX_LWIP_Init+0x270>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f006 fe19 	bl	800a910 <udp_bind>

  udp_recv(debug_if,&handle_udp_recv,NULL);
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_LWIP_Init+0x28c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <MX_LWIP_Init+0x290>)
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f006 fe82 	bl	800a9f0 <udp_recv>

/* USER CODE END 3 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200006a8 	.word	0x200006a8
 8003cf8:	200006a4 	.word	0x200006a4
 8003cfc:	2000066c 	.word	0x2000066c
 8003d00:	200006a0 	.word	0x200006a0
 8003d04:	200006ac 	.word	0x200006ac
 8003d08:	200006b4 	.word	0x200006b4
 8003d0c:	0800ccfd 	.word	0x0800ccfd
 8003d10:	08004311 	.word	0x08004311
 8003d14:	20000670 	.word	0x20000670
 8003d18:	200006b0 	.word	0x200006b0
 8003d1c:	200006b8 	.word	0x200006b8
 8003d20:	08003a05 	.word	0x08003a05

08003d24 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <MX_LWIP_Process+0x28>)
 8003d2a:	f000 fad1 	bl	80042d0 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */


  if(debugEnabled)
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <MX_LWIP_Process+0x2c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <MX_LWIP_Process+0x20>
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,SET);
 8003d36:	2201      	movs	r2, #1
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	4806      	ldr	r0, [pc, #24]	; (8003d54 <MX_LWIP_Process+0x30>)
 8003d3c:	f7fe fa44 	bl	80021c8 <HAL_GPIO_WritePin>
	  transmit();
 8003d40:	f7ff fe86 	bl	8003a50 <transmit>
  }

/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8003d44:	f006 fb16 	bl	800a374 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000670 	.word	0x20000670
 8003d50:	200006b0 	.word	0x200006b0
 8003d54:	40020400 	.word	0x40020400

08003d58 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <HAL_ETH_MspInit+0x174>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f040 80a4 	bne.w	8003ec4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a4b      	ldr	r2, [pc, #300]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc4:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6313      	str	r3, [r2, #48]	; 0x30
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4a36      	ldr	r2, [pc, #216]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	6313      	str	r3, [r2, #48]	; 0x30
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e32:	6313      	str	r3, [r2, #48]	; 0x30
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_ETH_MspInit+0x178>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e40:	2332      	movs	r3, #50	; 0x32
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e50:	230b      	movs	r3, #11
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e58:	4619      	mov	r1, r3
 8003e5a:	481e      	ldr	r0, [pc, #120]	; (8003ed4 <HAL_ETH_MspInit+0x17c>)
 8003e5c:	f7fe f80a 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e60:	2386      	movs	r3, #134	; 0x86
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e70:	230b      	movs	r3, #11
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4817      	ldr	r0, [pc, #92]	; (8003ed8 <HAL_ETH_MspInit+0x180>)
 8003e7c:	f7fd fffa 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e92:	230b      	movs	r3, #11
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480f      	ldr	r0, [pc, #60]	; (8003edc <HAL_ETH_MspInit+0x184>)
 8003e9e:	f7fd ffe9 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ea2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003eb4:	230b      	movs	r3, #11
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <HAL_ETH_MspInit+0x188>)
 8003ec0:	f7fd ffd8 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3738      	adds	r7, #56	; 0x38
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40028000 	.word	0x40028000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020800 	.word	0x40020800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40021800 	.word	0x40021800

08003ee4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ef0:	4b49      	ldr	r3, [pc, #292]	; (8004018 <low_level_init+0x134>)
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <low_level_init+0x138>)
 8003ef4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ef6:	4b48      	ldr	r3, [pc, #288]	; (8004018 <low_level_init+0x134>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <low_level_init+0x134>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003f02:	2300      	movs	r3, #0
 8003f04:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003f0a:	23e1      	movs	r3, #225	; 0xe1
 8003f0c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003f12:	2300      	movs	r3, #0
 8003f14:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003f16:	2300      	movs	r3, #0
 8003f18:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <low_level_init+0x134>)
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <low_level_init+0x134>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003f28:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <low_level_init+0x134>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003f2e:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <low_level_init+0x134>)
 8003f30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003f36:	4838      	ldr	r0, [pc, #224]	; (8004018 <low_level_init+0x134>)
 8003f38:	f7fd f808 	bl	8000f4c <HAL_ETH_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003f58:	2304      	movs	r3, #4
 8003f5a:	4a31      	ldr	r2, [pc, #196]	; (8004020 <low_level_init+0x13c>)
 8003f5c:	4931      	ldr	r1, [pc, #196]	; (8004024 <low_level_init+0x140>)
 8003f5e:	482e      	ldr	r0, [pc, #184]	; (8004018 <low_level_init+0x134>)
 8003f60:	f7fd f992 	bl	8001288 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003f64:	2304      	movs	r3, #4
 8003f66:	4a30      	ldr	r2, [pc, #192]	; (8004028 <low_level_init+0x144>)
 8003f68:	4930      	ldr	r1, [pc, #192]	; (800402c <low_level_init+0x148>)
 8003f6a:	482b      	ldr	r0, [pc, #172]	; (8004018 <low_level_init+0x134>)
 8003f6c:	f7fd f9f5 	bl	800135a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2206      	movs	r2, #6
 8003f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <low_level_init+0x134>)
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <low_level_init+0x134>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	785a      	ldrb	r2, [r3, #1]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <low_level_init+0x134>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	789a      	ldrb	r2, [r3, #2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <low_level_init+0x134>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	78da      	ldrb	r2, [r3, #3]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <low_level_init+0x134>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	791a      	ldrb	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <low_level_init+0x134>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	795a      	ldrb	r2, [r3, #5]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fc6:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003fce:	f043 030a 	orr.w	r3, r3, #10
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003fda:	480f      	ldr	r0, [pc, #60]	; (8004018 <low_level_init+0x134>)
 8003fdc:	f7fd fc66 	bl	80018ac <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003fe0:	f107 0310 	add.w	r3, r7, #16
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	211d      	movs	r1, #29
 8003fe8:	480b      	ldr	r0, [pc, #44]	; (8004018 <low_level_init+0x134>)
 8003fea:	f7fd fb91 	bl	8001710 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f043 030b 	orr.w	r3, r3, #11
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	211d      	movs	r1, #29
 8003ffc:	4806      	ldr	r0, [pc, #24]	; (8004018 <low_level_init+0x134>)
 8003ffe:	f7fd fbef 	bl	80017e0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004002:	f107 0310 	add.w	r3, r7, #16
 8004006:	461a      	mov	r2, r3
 8004008:	211d      	movs	r1, #29
 800400a:	4803      	ldr	r0, [pc, #12]	; (8004018 <low_level_init+0x134>)
 800400c:	f7fd fb80 	bl	8001710 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20001f8c 	.word	0x20001f8c
 800401c:	40028000 	.word	0x40028000
 8004020:	20001fd4 	.word	0x20001fd4
 8004024:	200006bc 	.word	0x200006bc
 8004028:	2000073c 	.word	0x2000073c
 800402c:	20001f0c 	.word	0x20001f0c

08004030 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800403a:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <low_level_output+0x138>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004052:	4b45      	ldr	r3, [pc, #276]	; (8004168 <low_level_output+0x138>)
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	e05a      	b.n	8004118 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	da03      	bge.n	8004072 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800406a:	23f8      	movs	r3, #248	; 0xf8
 800406c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004070:	e05c      	b.n	800412c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	895b      	ldrh	r3, [r3, #10]
 8004076:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800407c:	e02f      	b.n	80040de <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	18d0      	adds	r0, r2, r3
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	18d1      	adds	r1, r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004092:	3304      	adds	r3, #4
 8004094:	461a      	mov	r2, r3
 8004096:	f008 ff40 	bl	800cf1a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	da03      	bge.n	80040b0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80040a8:	23f8      	movs	r3, #248	; 0xf8
 80040aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80040ae:	e03d      	b.n	800412c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80040c0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80040cc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80040d8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d8c8      	bhi.n	800407e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	18d0      	adds	r0, r2, r3
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f008 ff0c 	bl	800cf1a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1a1      	bne.n	8004062 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	4811      	ldr	r0, [pc, #68]	; (8004168 <low_level_output+0x138>)
 8004122:	f7fd f987 	bl	8001434 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <low_level_output+0x138>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	3314      	adds	r3, #20
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <low_level_output+0x138>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004148:	3314      	adds	r3, #20
 800414a:	2220      	movs	r2, #32
 800414c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <low_level_output+0x138>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	3304      	adds	r3, #4
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800415c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004160:	4618      	mov	r0, r3
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20001f8c 	.word	0x20001f8c

0800416c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	; 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004190:	484e      	ldr	r0, [pc, #312]	; (80042cc <low_level_input+0x160>)
 8004192:	f7fd fa39 	bl	8001608 <HAL_ETH_GetReceivedFrame>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <low_level_input+0x34>
    return NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	e091      	b.n	80042c4 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80041a0:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <low_level_input+0x160>)
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <low_level_input+0x160>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80041b2:	89fb      	ldrh	r3, [r7, #14]
 80041b4:	2203      	movs	r2, #3
 80041b6:	4619      	mov	r1, r3
 80041b8:	2004      	movs	r0, #4
 80041ba:	f000 fe91 	bl	8004ee0 <pbuf_alloc>
 80041be:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04b      	beq.n	800425e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80041c6:	4b41      	ldr	r3, [pc, #260]	; (80042cc <low_level_input+0x160>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d4:	e040      	b.n	8004258 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	895b      	ldrh	r3, [r3, #10]
 80041da:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80041e0:	e021      	b.n	8004226 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	18d0      	adds	r0, r2, r3
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	18d1      	adds	r1, r2, r3
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041f6:	3304      	adds	r3, #4
 80041f8:	461a      	mov	r2, r3
 80041fa:	f008 fe8e 	bl	800cf1a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	4413      	add	r3, r2
 8004210:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004214:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004220:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004230:	4293      	cmp	r3, r2
 8004232:	d8d6      	bhi.n	80041e2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	18d0      	adds	r0, r2, r3
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4619      	mov	r1, r3
 8004246:	f008 fe68 	bl	800cf1a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4413      	add	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1bb      	bne.n	80041d6 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800425e:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <low_level_input+0x160>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e00b      	b.n	8004282 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3301      	adds	r3, #1
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <low_level_input+0x160>)
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d3ee      	bcc.n	800426a <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <low_level_input+0x160>)
 800428e:	2200      	movs	r2, #0
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <low_level_input+0x160>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429a:	3314      	adds	r3, #20
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <low_level_input+0x160>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	3314      	adds	r3, #20
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <low_level_input+0x160>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042bc:	3308      	adds	r3, #8
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  }
  return p;
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	; 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20001f8c 	.word	0x20001f8c

080042d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff47 	bl	800416c <low_level_input>
 80042de:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	4798      	blx	r3
 80042f0:	4603      	mov	r3, r0
 80042f2:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80042f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f001 f961 	bl	80055c4 <pbuf_free>
    p = NULL;    
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e000      	b.n	800430a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004308:	bf00      	nop
  }
}
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <ethernetif_init+0x1c>
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <ethernetif_init+0x48>)
 8004320:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004324:	490d      	ldr	r1, [pc, #52]	; (800435c <ethernetif_init+0x4c>)
 8004326:	480e      	ldr	r0, [pc, #56]	; (8004360 <ethernetif_init+0x50>)
 8004328:	f008 fe0a 	bl	800cf40 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2273      	movs	r2, #115	; 0x73
 8004330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2274      	movs	r2, #116	; 0x74
 8004338:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <ethernetif_init+0x54>)
 8004340:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <ethernetif_init+0x58>)
 8004346:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fdcb 	bl	8003ee4 <low_level_init>

  return ERR_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	0800dd20 	.word	0x0800dd20
 800435c:	0800dd3c 	.word	0x0800dd3c
 8004360:	0800dd4c 	.word	0x0800dd4c
 8004364:	0800b2e1 	.word	0x0800b2e1
 8004368:	08004031 	.word	0x08004031

0800436c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004370:	f7fc fcd8 	bl	8000d24 <HAL_GetTick>
 8004374:	4603      	mov	r3, r0
}
 8004376:	4618      	mov	r0, r3
 8004378:	bd80      	pop	{r7, pc}

0800437a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	ba5b      	rev16	r3, r3
 8004388:	b29b      	uxth	r3, r3
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	061a      	lsls	r2, r3, #24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	4313      	orrs	r3, r2
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80043d2:	f000 f8a7 	bl	8004524 <mem_init>
  memp_init();
 80043d6:	f000 fb3b 	bl	8004a50 <memp_init>
  pbuf_init();
  netif_init();
 80043da:	f000 fbf3 	bl	8004bc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80043de:	f006 f81b 	bl	800a418 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80043e2:	f001 fb69 	bl	8005ab8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80043e6:	f005 fef9 	bl	800a1dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <plug_holes+0x10c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d206      	bcs.n	8004414 <plug_holes+0x20>
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <plug_holes+0x110>)
 8004408:	f240 125d 	movw	r2, #349	; 0x15d
 800440c:	493e      	ldr	r1, [pc, #248]	; (8004508 <plug_holes+0x114>)
 800440e:	483f      	ldr	r0, [pc, #252]	; (800450c <plug_holes+0x118>)
 8004410:	f008 fd96 	bl	800cf40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <plug_holes+0x11c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d306      	bcc.n	800442c <plug_holes+0x38>
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <plug_holes+0x110>)
 8004420:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004424:	493b      	ldr	r1, [pc, #236]	; (8004514 <plug_holes+0x120>)
 8004426:	4839      	ldr	r0, [pc, #228]	; (800450c <plug_holes+0x118>)
 8004428:	f008 fd8a 	bl	800cf40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	791b      	ldrb	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d006      	beq.n	8004442 <plug_holes+0x4e>
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <plug_holes+0x110>)
 8004436:	f240 125f 	movw	r2, #351	; 0x15f
 800443a:	4937      	ldr	r1, [pc, #220]	; (8004518 <plug_holes+0x124>)
 800443c:	4833      	ldr	r0, [pc, #204]	; (800450c <plug_holes+0x118>)
 800443e:	f008 fd7f 	bl	800cf40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800444a:	d906      	bls.n	800445a <plug_holes+0x66>
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <plug_holes+0x110>)
 800444e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004452:	4932      	ldr	r1, [pc, #200]	; (800451c <plug_holes+0x128>)
 8004454:	482d      	ldr	r0, [pc, #180]	; (800450c <plug_holes+0x118>)
 8004456:	f008 fd73 	bl	800cf40 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <plug_holes+0x10c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	429a      	cmp	r2, r3
 800446c:	d01f      	beq.n	80044ae <plug_holes+0xba>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	791b      	ldrb	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11b      	bne.n	80044ae <plug_holes+0xba>
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <plug_holes+0x11c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d016      	beq.n	80044ae <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <plug_holes+0x12c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d102      	bne.n	8004490 <plug_holes+0x9c>
      lfree = mem;
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <plug_holes+0x12c>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a19      	ldr	r2, [pc, #100]	; (8004500 <plug_holes+0x10c>)
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	1a99      	subs	r1, r3, r2
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <plug_holes+0x10c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	b28a      	uxth	r2, r1
 80044ac:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <plug_holes+0x10c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	8852      	ldrh	r2, [r2, #2]
 80044b6:	4413      	add	r3, r2
 80044b8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d01a      	beq.n	80044f8 <plug_holes+0x104>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d116      	bne.n	80044f8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <plug_holes+0x12c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d102      	bne.n	80044da <plug_holes+0xe6>
      lfree = pmem;
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <plug_holes+0x12c>)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a06      	ldr	r2, [pc, #24]	; (8004500 <plug_holes+0x10c>)
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	1a99      	subs	r1, r3, r2
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <plug_holes+0x10c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	8812      	ldrh	r2, [r2, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	b28a      	uxth	r2, r1
 80044f6:	805a      	strh	r2, [r3, #2]
  }
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200000a8 	.word	0x200000a8
 8004504:	0800dd74 	.word	0x0800dd74
 8004508:	0800dda4 	.word	0x0800dda4
 800450c:	0800ddbc 	.word	0x0800ddbc
 8004510:	200000ac 	.word	0x200000ac
 8004514:	0800dde4 	.word	0x0800dde4
 8004518:	0800de00 	.word	0x0800de00
 800451c:	0800de1c 	.word	0x0800de1c
 8004520:	200000b0 	.word	0x200000b0

08004524 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <mem_init+0x6c>)
 800452c:	3303      	adds	r3, #3
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	461a      	mov	r2, r3
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <mem_init+0x70>)
 8004536:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004538:	4b16      	ldr	r3, [pc, #88]	; (8004594 <mem_init+0x70>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004544:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <mem_init+0x70>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800455a:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <mem_init+0x74>)
 800455c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <mem_init+0x74>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <mem_init+0x74>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800456e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <mem_init+0x74>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004578:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <mem_init+0x70>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a07      	ldr	r2, [pc, #28]	; (800459c <mem_init+0x78>)
 8004580:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	200037bc 	.word	0x200037bc
 8004594:	200000a8 	.word	0x200000a8
 8004598:	200000ac 	.word	0x200000ac
 800459c:	200000b0 	.word	0x200000b0

080045a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d043      	beq.n	8004636 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <mem_free+0x26>
 80045b8:	4b22      	ldr	r3, [pc, #136]	; (8004644 <mem_free+0xa4>)
 80045ba:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80045be:	4922      	ldr	r1, [pc, #136]	; (8004648 <mem_free+0xa8>)
 80045c0:	4822      	ldr	r0, [pc, #136]	; (800464c <mem_free+0xac>)
 80045c2:	f008 fcbd 	bl	800cf40 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <mem_free+0xb0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d304      	bcc.n	80045da <mem_free+0x3a>
 80045d0:	4b20      	ldr	r3, [pc, #128]	; (8004654 <mem_free+0xb4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d306      	bcc.n	80045e8 <mem_free+0x48>
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <mem_free+0xa4>)
 80045dc:	f240 12af 	movw	r2, #431	; 0x1af
 80045e0:	491d      	ldr	r1, [pc, #116]	; (8004658 <mem_free+0xb8>)
 80045e2:	481a      	ldr	r0, [pc, #104]	; (800464c <mem_free+0xac>)
 80045e4:	f008 fcac 	bl	800cf40 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <mem_free+0xb0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d323      	bcc.n	800463a <mem_free+0x9a>
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <mem_free+0xb4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d21e      	bcs.n	800463a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b08      	subs	r3, #8
 8004600:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	791b      	ldrb	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <mem_free+0x78>
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <mem_free+0xa4>)
 800460c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8004610:	4912      	ldr	r1, [pc, #72]	; (800465c <mem_free+0xbc>)
 8004612:	480e      	ldr	r0, [pc, #56]	; (800464c <mem_free+0xac>)
 8004614:	f008 fc94 	bl	800cf40 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <mem_free+0xc0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	429a      	cmp	r2, r3
 8004626:	d202      	bcs.n	800462e <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <mem_free+0xc0>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fee0 	bl	80043f4 <plug_holes>
 8004634:	e002      	b.n	800463c <mem_free+0x9c>
    return;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <mem_free+0x9c>
    return;
 800463a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	0800dd74 	.word	0x0800dd74
 8004648:	0800de48 	.word	0x0800de48
 800464c:	0800ddbc 	.word	0x0800ddbc
 8004650:	200000a8 	.word	0x200000a8
 8004654:	200000ac 	.word	0x200000ac
 8004658:	0800de6c 	.word	0x0800de6c
 800465c:	0800de84 	.word	0x0800de84
 8004660:	200000b0 	.word	0x200000b0

08004664 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	3303      	adds	r3, #3
 8004674:	b29b      	uxth	r3, r3
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	2b0b      	cmp	r3, #11
 8004680:	d801      	bhi.n	8004686 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004682:	230c      	movs	r3, #12
 8004684:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004686:	887b      	ldrh	r3, [r7, #2]
 8004688:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800468c:	d901      	bls.n	8004692 <mem_trim+0x2e>
    return NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	e0b1      	b.n	80047f6 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004692:	4b5b      	ldr	r3, [pc, #364]	; (8004800 <mem_trim+0x19c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d304      	bcc.n	80046a6 <mem_trim+0x42>
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <mem_trim+0x1a0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d306      	bcc.n	80046b4 <mem_trim+0x50>
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <mem_trim+0x1a4>)
 80046a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046ac:	4957      	ldr	r1, [pc, #348]	; (800480c <mem_trim+0x1a8>)
 80046ae:	4858      	ldr	r0, [pc, #352]	; (8004810 <mem_trim+0x1ac>)
 80046b0:	f008 fc46 	bl	800cf40 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80046b4:	4b52      	ldr	r3, [pc, #328]	; (8004800 <mem_trim+0x19c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d304      	bcc.n	80046c8 <mem_trim+0x64>
 80046be:	4b51      	ldr	r3, [pc, #324]	; (8004804 <mem_trim+0x1a0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d301      	bcc.n	80046cc <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	e094      	b.n	80047f6 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3b08      	subs	r3, #8
 80046d0:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4a4a      	ldr	r2, [pc, #296]	; (8004800 <mem_trim+0x19c>)
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	8a7b      	ldrh	r3, [r7, #18]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b08      	subs	r3, #8
 80046e8:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	8a3b      	ldrh	r3, [r7, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d906      	bls.n	8004700 <mem_trim+0x9c>
 80046f2:	4b45      	ldr	r3, [pc, #276]	; (8004808 <mem_trim+0x1a4>)
 80046f4:	f240 2206 	movw	r2, #518	; 0x206
 80046f8:	4946      	ldr	r1, [pc, #280]	; (8004814 <mem_trim+0x1b0>)
 80046fa:	4845      	ldr	r0, [pc, #276]	; (8004810 <mem_trim+0x1ac>)
 80046fc:	f008 fc20 	bl	800cf40 <iprintf>
  if (newsize > size) {
 8004700:	887a      	ldrh	r2, [r7, #2]
 8004702:	8a3b      	ldrh	r3, [r7, #16]
 8004704:	429a      	cmp	r2, r3
 8004706:	d901      	bls.n	800470c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	e074      	b.n	80047f6 <mem_trim+0x192>
  }
  if (newsize == size) {
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	8a3b      	ldrh	r3, [r7, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d101      	bne.n	8004718 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	e06e      	b.n	80047f6 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004718:	4b39      	ldr	r3, [pc, #228]	; (8004800 <mem_trim+0x19c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	8812      	ldrh	r2, [r2, #0]
 8004720:	4413      	add	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d131      	bne.n	8004790 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004732:	8a7a      	ldrh	r2, [r7, #18]
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	4413      	add	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	3308      	adds	r3, #8
 800473c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <mem_trim+0x1b4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d105      	bne.n	8004754 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <mem_trim+0x19c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	4413      	add	r3, r2
 8004750:	4a31      	ldr	r2, [pc, #196]	; (8004818 <mem_trim+0x1b4>)
 8004752:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <mem_trim+0x19c>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	893a      	ldrh	r2, [r7, #8]
 8004768:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8a7a      	ldrh	r2, [r7, #18]
 800476e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	897a      	ldrh	r2, [r7, #10]
 8004774:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800477e:	d039      	beq.n	80047f4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004780:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <mem_trim+0x19c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	8812      	ldrh	r2, [r2, #0]
 8004788:	4413      	add	r3, r2
 800478a:	897a      	ldrh	r2, [r7, #10]
 800478c:	805a      	strh	r2, [r3, #2]
 800478e:	e031      	b.n	80047f4 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	f103 0214 	add.w	r2, r3, #20
 8004796:	8a3b      	ldrh	r3, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d82b      	bhi.n	80047f4 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800479c:	8a7a      	ldrh	r2, [r7, #18]
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	4413      	add	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3308      	adds	r3, #8
 80047a6:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <mem_trim+0x19c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	897b      	ldrh	r3, [r7, #10]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <mem_trim+0x1b4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d202      	bcs.n	80047c2 <mem_trim+0x15e>
      lfree = mem2;
 80047bc:	4a16      	ldr	r2, [pc, #88]	; (8004818 <mem_trim+0x1b4>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	881a      	ldrh	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8a7a      	ldrh	r2, [r7, #18]
 80047d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	897a      	ldrh	r2, [r7, #10]
 80047da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047e4:	d006      	beq.n	80047f4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <mem_trim+0x19c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	8812      	ldrh	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	897a      	ldrh	r2, [r7, #10]
 80047f2:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200000a8 	.word	0x200000a8
 8004804:	200000ac 	.word	0x200000ac
 8004808:	0800dd74 	.word	0x0800dd74
 800480c:	0800de98 	.word	0x0800de98
 8004810:	0800ddbc 	.word	0x0800ddbc
 8004814:	0800deb0 	.word	0x0800deb0
 8004818:	200000b0 	.word	0x200000b0

0800481c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <mem_malloc+0x14>
    return NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	e0c8      	b.n	80049c2 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	3303      	adds	r3, #3
 8004834:	b29b      	uxth	r3, r3
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2b0b      	cmp	r3, #11
 8004840:	d801      	bhi.n	8004846 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004842:	230c      	movs	r3, #12
 8004844:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800484c:	d901      	bls.n	8004852 <mem_malloc+0x36>
    return NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	e0b7      	b.n	80049c2 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004852:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <mem_malloc+0x1b0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <mem_malloc+0x1b4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	83fb      	strh	r3, [r7, #30]
 8004860:	e0a7      	b.n	80049b2 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004862:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <mem_malloc+0x1b4>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	8bfb      	ldrh	r3, [r7, #30]
 8004868:	4413      	add	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	791b      	ldrb	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 8098 	bne.w	80049a6 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	8bfb      	ldrh	r3, [r7, #30]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f1a3 0208 	sub.w	r2, r3, #8
 8004884:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004886:	429a      	cmp	r2, r3
 8004888:	f0c0 808d 	bcc.w	80049a6 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	8bfb      	ldrh	r3, [r7, #30]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f1a3 0208 	sub.w	r2, r3, #8
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	3314      	adds	r3, #20
 800489e:	429a      	cmp	r2, r3
 80048a0:	d327      	bcc.n	80048f2 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80048a2:	8bfa      	ldrh	r2, [r7, #30]
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	4413      	add	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3308      	adds	r3, #8
 80048ac:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80048ae:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <mem_malloc+0x1b4>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	8a7b      	ldrh	r3, [r7, #18]
 80048b4:	4413      	add	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8bfa      	ldrh	r2, [r7, #30]
 80048ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	8a7a      	ldrh	r2, [r7, #18]
 80048d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2201      	movs	r2, #1
 80048d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048e0:	d00a      	beq.n	80048f8 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <mem_malloc+0x1b4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	8812      	ldrh	r2, [r2, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	8a7a      	ldrh	r2, [r7, #18]
 80048ee:	805a      	strh	r2, [r3, #2]
 80048f0:	e002      	b.n	80048f8 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2201      	movs	r2, #1
 80048f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <mem_malloc+0x1b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d127      	bne.n	8004952 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <mem_malloc+0x1b0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004908:	e005      	b.n	8004916 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <mem_malloc+0x1b4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	4413      	add	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	791b      	ldrb	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <mem_malloc+0x10c>
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <mem_malloc+0x1b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	d1f0      	bne.n	800490a <mem_malloc+0xee>
          }
          lfree = cur;
 8004928:	4a28      	ldr	r2, [pc, #160]	; (80049cc <mem_malloc+0x1b0>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800492e:	4b27      	ldr	r3, [pc, #156]	; (80049cc <mem_malloc+0x1b0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <mem_malloc+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d00b      	beq.n	8004952 <mem_malloc+0x136>
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <mem_malloc+0x1b0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <mem_malloc+0x136>
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <mem_malloc+0x1bc>)
 8004946:	f240 22cf 	movw	r2, #719	; 0x2cf
 800494a:	4924      	ldr	r1, [pc, #144]	; (80049dc <mem_malloc+0x1c0>)
 800494c:	4824      	ldr	r0, [pc, #144]	; (80049e0 <mem_malloc+0x1c4>)
 800494e:	f008 faf7 	bl	800cf40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4413      	add	r3, r2
 8004958:	3308      	adds	r3, #8
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <mem_malloc+0x1b8>)
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <mem_malloc+0x154>
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <mem_malloc+0x1bc>)
 8004964:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004968:	491e      	ldr	r1, [pc, #120]	; (80049e4 <mem_malloc+0x1c8>)
 800496a:	481d      	ldr	r0, [pc, #116]	; (80049e0 <mem_malloc+0x1c4>)
 800496c:	f008 fae8 	bl	800cf40 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <mem_malloc+0x16c>
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <mem_malloc+0x1bc>)
 800497c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004980:	4919      	ldr	r1, [pc, #100]	; (80049e8 <mem_malloc+0x1cc>)
 8004982:	4817      	ldr	r0, [pc, #92]	; (80049e0 <mem_malloc+0x1c4>)
 8004984:	f008 fadc 	bl	800cf40 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <mem_malloc+0x184>
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <mem_malloc+0x1bc>)
 8004994:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004998:	4914      	ldr	r1, [pc, #80]	; (80049ec <mem_malloc+0x1d0>)
 800499a:	4811      	ldr	r0, [pc, #68]	; (80049e0 <mem_malloc+0x1c4>)
 800499c:	f008 fad0 	bl	800cf40 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3308      	adds	r3, #8
 80049a4:	e00d      	b.n	80049c2 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <mem_malloc+0x1b4>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	8bfb      	ldrh	r3, [r7, #30]
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80049b2:	8bfa      	ldrh	r2, [r7, #30]
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f4ff af51 	bcc.w	8004862 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200000b0 	.word	0x200000b0
 80049d0:	200000a8 	.word	0x200000a8
 80049d4:	200000ac 	.word	0x200000ac
 80049d8:	0800dd74 	.word	0x0800dd74
 80049dc:	0800ded0 	.word	0x0800ded0
 80049e0:	0800ddbc 	.word	0x0800ddbc
 80049e4:	0800deec 	.word	0x0800deec
 80049e8:	0800df1c 	.word	0x0800df1c
 80049ec:	0800df4c 	.word	0x0800df4c

080049f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	3303      	adds	r3, #3
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e011      	b.n	8004a36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	885b      	ldrh	r3, [r3, #2]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	dbe7      	blt.n	8004a12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a56:	2300      	movs	r3, #0
 8004a58:	80fb      	strh	r3, [r7, #6]
 8004a5a:	e009      	b.n	8004a70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <memp_init+0x30>)
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ffc3 	bl	80049f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d9f2      	bls.n	8004a5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	0800fa5c 	.word	0x0800fa5c

08004a84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d012      	beq.n	8004ac0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <do_memp_malloc_pool+0x38>
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <do_memp_malloc_pool+0x48>)
 8004ab0:	f240 1249 	movw	r2, #329	; 0x149
 8004ab4:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <do_memp_malloc_pool+0x4c>)
 8004ab6:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <do_memp_malloc_pool+0x50>)
 8004ab8:	f008 fa42 	bl	800cf40 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e000      	b.n	8004ac2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	0800df70 	.word	0x0800df70
 8004ad0:	0800dfa0 	.word	0x0800dfa0
 8004ad4:	0800dfc4 	.word	0x0800dfc4

08004ad8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d908      	bls.n	8004afa <memp_malloc+0x22>
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <memp_malloc+0x3c>)
 8004aea:	f240 1287 	movw	r2, #391	; 0x187
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <memp_malloc+0x40>)
 8004af0:	480a      	ldr	r0, [pc, #40]	; (8004b1c <memp_malloc+0x44>)
 8004af2:	f008 fa25 	bl	800cf40 <iprintf>
 8004af6:	2300      	movs	r3, #0
 8004af8:	e008      	b.n	8004b0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <memp_malloc+0x48>)
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ffbe 	bl	8004a84 <do_memp_malloc_pool>
 8004b08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	0800df70 	.word	0x0800df70
 8004b18:	0800e000 	.word	0x0800e000
 8004b1c:	0800dfc4 	.word	0x0800dfc4
 8004b20:	0800fa5c 	.word	0x0800fa5c

08004b24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <do_memp_free_pool+0x22>
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <do_memp_free_pool+0x40>)
 8004b3a:	f240 129d 	movw	r2, #413	; 0x19d
 8004b3e:	490a      	ldr	r1, [pc, #40]	; (8004b68 <do_memp_free_pool+0x44>)
 8004b40:	480a      	ldr	r0, [pc, #40]	; (8004b6c <do_memp_free_pool+0x48>)
 8004b42:	f008 f9fd 	bl	800cf40 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	0800df70 	.word	0x0800df70
 8004b68:	0800e020 	.word	0x0800e020
 8004b6c:	0800dfc4 	.word	0x0800dfc4

08004b70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d907      	bls.n	8004b92 <memp_free+0x22>
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <memp_free+0x44>)
 8004b84:	f240 12db 	movw	r2, #475	; 0x1db
 8004b88:	490b      	ldr	r1, [pc, #44]	; (8004bb8 <memp_free+0x48>)
 8004b8a:	480c      	ldr	r0, [pc, #48]	; (8004bbc <memp_free+0x4c>)
 8004b8c:	f008 f9d8 	bl	800cf40 <iprintf>
 8004b90:	e00c      	b.n	8004bac <memp_free+0x3c>

  if (mem == NULL) {
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <memp_free+0x50>)
 8004b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ffbe 	bl	8004b24 <do_memp_free_pool>
 8004ba8:	e000      	b.n	8004bac <memp_free+0x3c>
    return;
 8004baa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	0800df70 	.word	0x0800df70
 8004bb8:	0800e040 	.word	0x0800e040
 8004bbc:	0800dfc4 	.word	0x0800dfc4
 8004bc0:	0800fa5c 	.word	0x0800fa5c

08004bc4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <netif_add+0x20>
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <netif_add+0x94>)
 8004bea:	22fb      	movs	r2, #251	; 0xfb
 8004bec:	491f      	ldr	r1, [pc, #124]	; (8004c6c <netif_add+0x98>)
 8004bee:	4820      	ldr	r0, [pc, #128]	; (8004c70 <netif_add+0x9c>)
 8004bf0:	f008 f9a6 	bl	800cf40 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2203      	movs	r2, #3
 8004c12:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8004c1c:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <netif_add+0xa0>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	b2d1      	uxtb	r1, r2
 8004c24:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <netif_add+0xa0>)
 8004c26:	7011      	strb	r1, [r2, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f81e 	bl	8004c7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	4798      	blx	r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <netif_add+0x7c>
    return NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e007      	b.n	8004c60 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <netif_add+0xa4>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004c58:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <netif_add+0xa4>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800e05c 	.word	0x0800e05c
 8004c6c:	0800e090 	.word	0x0800e090
 8004c70:	0800e0a8 	.word	0x0800e0a8
 8004c74:	200000d8 	.word	0x200000d8
 8004c78:	20006cc4 	.word	0x20006cc4

08004c7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <netif_set_addr+0x1c>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f81a 	bl	8004cd4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f862 	bl	8004d6c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f84a 	bl	8004d44 <netif_set_gw>
 8004cb0:	e00b      	b.n	8004cca <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f859 	bl	8004d6c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f841 	bl	8004d44 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f805 	bl	8004cd4 <netif_set_ipaddr>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <netif_set_ipaddr+0x18>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e002      	b.n	8004cf2 <netif_set_ipaddr+0x1e>
 8004cec:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <netif_set_ipaddr+0x6c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d01c      	beq.n	8004d38 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	f107 020c 	add.w	r2, r7, #12
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f002 f863 	bl	8006dd4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	f107 020c 	add.w	r2, r7, #12
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f005 fe93 	bl	800aa44 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <netif_set_ipaddr+0x56>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	e000      	b.n	8004d2c <netif_set_ipaddr+0x58>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004d30:	2101      	movs	r1, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f861 	bl	8004dfa <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	0800fac0 	.word	0x0800fac0

08004d44 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <netif_set_gw+0x16>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	e000      	b.n	8004d5c <netif_set_gw+0x18>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <netif_set_netmask+0x16>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	e000      	b.n	8004d84 <netif_set_netmask+0x18>
 8004d82:	2300      	movs	r3, #0
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <netif_set_default+0x1c>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20006cc8 	.word	0x20006cc8

08004db4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d113      	bne.n	8004df2 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004dea:	2103      	movs	r1, #3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f804 	bl	8004dfa <netif_issue_reports>
    }
  }
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f006 fd3c 	bl	800b8ac <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f006 f8e0 	bl	800b038 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <pbuf_free_ooseq+0x40>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <pbuf_free_ooseq+0x44>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	e00f      	b.n	8004eb4 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fcd2 	bl	800684a <tcp_segs_free>
      pcb->ooseq = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8004eac:	e005      	b.n	8004eba <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ec      	bne.n	8004e94 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20006ccc 	.word	0x20006ccc
 8004ec4:	20006cd4 	.word	0x20006cd4

08004ec8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <pbuf_pool_is_empty+0x14>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20006ccc 	.word	0x20006ccc

08004ee0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
 8004eea:	460b      	mov	r3, r1
 8004eec:	80bb      	strh	r3, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d81c      	bhi.n	8004f32 <pbuf_alloc+0x52>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <pbuf_alloc+0x20>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f15 	.word	0x08004f15
 8004f04:	08004f1b 	.word	0x08004f1b
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f27 	.word	0x08004f27
 8004f10:	08004f2d 	.word	0x08004f2d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004f14:	2336      	movs	r3, #54	; 0x36
 8004f16:	82fb      	strh	r3, [r7, #22]
    break;
 8004f18:	e014      	b.n	8004f44 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004f1a:	2322      	movs	r3, #34	; 0x22
 8004f1c:	82fb      	strh	r3, [r7, #22]
    break;
 8004f1e:	e011      	b.n	8004f44 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004f20:	230e      	movs	r3, #14
 8004f22:	82fb      	strh	r3, [r7, #22]
    break;
 8004f24:	e00e      	b.n	8004f44 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004f26:	2300      	movs	r3, #0
 8004f28:	82fb      	strh	r3, [r7, #22]
    break;
 8004f2a:	e00b      	b.n	8004f44 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	82fb      	strh	r3, [r7, #22]
    break;
 8004f30:	e008      	b.n	8004f44 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004f32:	4ba5      	ldr	r3, [pc, #660]	; (80051c8 <pbuf_alloc+0x2e8>)
 8004f34:	f44f 728b 	mov.w	r2, #278	; 0x116
 8004f38:	49a4      	ldr	r1, [pc, #656]	; (80051cc <pbuf_alloc+0x2ec>)
 8004f3a:	48a5      	ldr	r0, [pc, #660]	; (80051d0 <pbuf_alloc+0x2f0>)
 8004f3c:	f008 f800 	bl	800cf40 <iprintf>
    return NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e15d      	b.n	8005200 <pbuf_alloc+0x320>
  }

  switch (type) {
 8004f44:	79bb      	ldrb	r3, [r7, #6]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	f200 8134 	bhi.w	80051b4 <pbuf_alloc+0x2d4>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <pbuf_alloc+0x74>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	080050f5 	.word	0x080050f5
 8004f58:	08005181 	.word	0x08005181
 8004f5c:	08005181 	.word	0x08005181
 8004f60:	08004f65 	.word	0x08004f65
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004f64:	2008      	movs	r0, #8
 8004f66:	f7ff fdb7 	bl	8004ad8 <memp_malloc>
 8004f6a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8004f72:	f7ff ffa9 	bl	8004ec8 <pbuf_pool_is_empty>
      return NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e142      	b.n	8005200 <pbuf_alloc+0x320>
    }
    p->type = type;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	79ba      	ldrb	r2, [r7, #6]
 8004f7e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004f86:	8afb      	ldrh	r3, [r7, #22]
 8004f88:	3310      	adds	r3, #16
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3303      	adds	r3, #3
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	461a      	mov	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <pbuf_alloc+0xd4>
 8004fa6:	4b88      	ldr	r3, [pc, #544]	; (80051c8 <pbuf_alloc+0x2e8>)
 8004fa8:	f240 1229 	movw	r2, #297	; 0x129
 8004fac:	4989      	ldr	r1, [pc, #548]	; (80051d4 <pbuf_alloc+0x2f4>)
 8004fae:	4888      	ldr	r0, [pc, #544]	; (80051d0 <pbuf_alloc+0x2f0>)
 8004fb0:	f007 ffc6 	bl	800cf40 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	88ba      	ldrh	r2, [r7, #4]
 8004fb8:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004fba:	8afb      	ldrh	r3, [r7, #22]
 8004fbc:	3303      	adds	r3, #3
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8004fc6:	88bb      	ldrh	r3, [r7, #4]
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	bf28      	it	cs
 8004fcc:	4613      	movcs	r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	8952      	ldrh	r2, [r2, #10]
 8004fdc:	441a      	add	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d906      	bls.n	8004ff6 <pbuf_alloc+0x116>
 8004fe8:	4b77      	ldr	r3, [pc, #476]	; (80051c8 <pbuf_alloc+0x2e8>)
 8004fea:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004fee:	497a      	ldr	r1, [pc, #488]	; (80051d8 <pbuf_alloc+0x2f8>)
 8004ff0:	4877      	ldr	r0, [pc, #476]	; (80051d0 <pbuf_alloc+0x2f0>)
 8004ff2:	f007 ffa5 	bl	800cf40 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005002:	d106      	bne.n	8005012 <pbuf_alloc+0x132>
 8005004:	4b70      	ldr	r3, [pc, #448]	; (80051c8 <pbuf_alloc+0x2e8>)
 8005006:	f44f 7299 	mov.w	r2, #306	; 0x132
 800500a:	4974      	ldr	r1, [pc, #464]	; (80051dc <pbuf_alloc+0x2fc>)
 800500c:	4870      	ldr	r0, [pc, #448]	; (80051d0 <pbuf_alloc+0x2f0>)
 800500e:	f007 ff97 	bl	800cf40 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2201      	movs	r2, #1
 8005016:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800501c:	88bb      	ldrh	r3, [r7, #4]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	8952      	ldrh	r2, [r2, #10]
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8005026:	e061      	b.n	80050ec <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005028:	2008      	movs	r0, #8
 800502a:	f7ff fd55 	bl	8004ad8 <memp_malloc>
 800502e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8005036:	f7ff ff47 	bl	8004ec8 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800503a:	69f8      	ldr	r0, [r7, #28]
 800503c:	f000 fac2 	bl	80055c4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	e0dd      	b.n	8005200 <pbuf_alloc+0x320>
      }
      q->type = type;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	79ba      	ldrb	r2, [r7, #6]
 8005048:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005062:	4293      	cmp	r3, r2
 8005064:	dd06      	ble.n	8005074 <pbuf_alloc+0x194>
 8005066:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <pbuf_alloc+0x2e8>)
 8005068:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800506c:	495c      	ldr	r1, [pc, #368]	; (80051e0 <pbuf_alloc+0x300>)
 800506e:	4858      	ldr	r0, [pc, #352]	; (80051d0 <pbuf_alloc+0x2f0>)
 8005070:	f007 ff66 	bl	800cf40 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005084:	bf28      	it	cs
 8005086:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f103 0210 	add.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <pbuf_alloc+0x1d4>
 80050a6:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <pbuf_alloc+0x2e8>)
 80050a8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80050ac:	494d      	ldr	r1, [pc, #308]	; (80051e4 <pbuf_alloc+0x304>)
 80050ae:	4848      	ldr	r0, [pc, #288]	; (80051d0 <pbuf_alloc+0x2f0>)
 80050b0:	f007 ff46 	bl	800cf40 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	8952      	ldrh	r2, [r2, #10]
 80050bc:	441a      	add	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d906      	bls.n	80050d6 <pbuf_alloc+0x1f6>
 80050c8:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <pbuf_alloc+0x2e8>)
 80050ca:	f240 1255 	movw	r2, #341	; 0x155
 80050ce:	4942      	ldr	r1, [pc, #264]	; (80051d8 <pbuf_alloc+0x2f8>)
 80050d0:	483f      	ldr	r0, [pc, #252]	; (80051d0 <pbuf_alloc+0x2f0>)
 80050d2:	f007 ff35 	bl	800cf40 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	895b      	ldrh	r3, [r3, #10]
 80050e0:	461a      	mov	r2, r3
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dc9a      	bgt.n	8005028 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80050f2:	e07e      	b.n	80051f2 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80050f4:	8afb      	ldrh	r3, [r7, #22]
 80050f6:	3313      	adds	r3, #19
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	b29a      	uxth	r2, r3
 8005100:	88bb      	ldrh	r3, [r7, #4]
 8005102:	3303      	adds	r3, #3
 8005104:	b29b      	uxth	r3, r3
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	b29b      	uxth	r3, r3
 800510c:	4413      	add	r3, r2
 800510e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005110:	897a      	ldrh	r2, [r7, #10]
 8005112:	88bb      	ldrh	r3, [r7, #4]
 8005114:	3303      	adds	r3, #3
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	429a      	cmp	r2, r3
 800511c:	d201      	bcs.n	8005122 <pbuf_alloc+0x242>
        return NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	e06e      	b.n	8005200 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005122:	897b      	ldrh	r3, [r7, #10]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fb79 	bl	800481c <mem_malloc>
 800512a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <pbuf_alloc+0x256>
      return NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	e064      	b.n	8005200 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005136:	8afb      	ldrh	r3, [r7, #22]
 8005138:	3310      	adds	r3, #16
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	3303      	adds	r3, #3
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	461a      	mov	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	88ba      	ldrh	r2, [r7, #4]
 800514e:	811a      	strh	r2, [r3, #8]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	891a      	ldrh	r2, [r3, #8]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	79ba      	ldrb	r2, [r7, #6]
 8005162:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d03f      	beq.n	80051f0 <pbuf_alloc+0x310>
 8005170:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <pbuf_alloc+0x2e8>)
 8005172:	f240 1277 	movw	r2, #375	; 0x177
 8005176:	491c      	ldr	r1, [pc, #112]	; (80051e8 <pbuf_alloc+0x308>)
 8005178:	4815      	ldr	r0, [pc, #84]	; (80051d0 <pbuf_alloc+0x2f0>)
 800517a:	f007 fee1 	bl	800cf40 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800517e:	e037      	b.n	80051f0 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005180:	2007      	movs	r0, #7
 8005182:	f7ff fca9 	bl	8004ad8 <memp_malloc>
 8005186:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	e036      	b.n	8005200 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	88ba      	ldrh	r2, [r7, #4]
 800519c:	811a      	strh	r2, [r3, #8]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	891a      	ldrh	r2, [r3, #8]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
    p->type = type;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	79ba      	ldrb	r2, [r7, #6]
 80051b0:	731a      	strb	r2, [r3, #12]
    break;
 80051b2:	e01e      	b.n	80051f2 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <pbuf_alloc+0x2e8>)
 80051b6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80051ba:	490c      	ldr	r1, [pc, #48]	; (80051ec <pbuf_alloc+0x30c>)
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <pbuf_alloc+0x2f0>)
 80051be:	f007 febf 	bl	800cf40 <iprintf>
    return NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e01c      	b.n	8005200 <pbuf_alloc+0x320>
 80051c6:	bf00      	nop
 80051c8:	0800e0d0 	.word	0x0800e0d0
 80051cc:	0800e100 	.word	0x0800e100
 80051d0:	0800e11c 	.word	0x0800e11c
 80051d4:	0800e144 	.word	0x0800e144
 80051d8:	0800e174 	.word	0x0800e174
 80051dc:	0800e1a8 	.word	0x0800e1a8
 80051e0:	0800e1dc 	.word	0x0800e1dc
 80051e4:	0800e1f0 	.word	0x0800e1f0
 80051e8:	0800e220 	.word	0x0800e220
 80051ec:	0800e24c 	.word	0x0800e24c
    break;
 80051f0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2201      	movs	r2, #1
 80051f6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2200      	movs	r2, #0
 80051fc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80051fe:	69fb      	ldr	r3, [r7, #28]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4603      	mov	r3, r0
 8005212:	71fb      	strb	r3, [r7, #7]
 8005214:	460b      	mov	r3, r1
 8005216:	80bb      	strh	r3, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d81b      	bhi.n	800525a <pbuf_alloced_custom+0x52>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <pbuf_alloced_custom+0x20>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800523d 	.word	0x0800523d
 800522c:	08005243 	.word	0x08005243
 8005230:	08005249 	.word	0x08005249
 8005234:	0800524f 	.word	0x0800524f
 8005238:	08005255 	.word	0x08005255
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800523c:	2336      	movs	r3, #54	; 0x36
 800523e:	81fb      	strh	r3, [r7, #14]
    break;
 8005240:	e014      	b.n	800526c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005242:	2322      	movs	r3, #34	; 0x22
 8005244:	81fb      	strh	r3, [r7, #14]
    break;
 8005246:	e011      	b.n	800526c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005248:	230e      	movs	r3, #14
 800524a:	81fb      	strh	r3, [r7, #14]
    break;
 800524c:	e00e      	b.n	800526c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800524e:	2300      	movs	r3, #0
 8005250:	81fb      	strh	r3, [r7, #14]
    break;
 8005252:	e00b      	b.n	800526c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	81fb      	strh	r3, [r7, #14]
    break;
 8005258:	e008      	b.n	800526c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <pbuf_alloced_custom+0xc8>)
 800525c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005260:	491c      	ldr	r1, [pc, #112]	; (80052d4 <pbuf_alloced_custom+0xcc>)
 8005262:	481d      	ldr	r0, [pc, #116]	; (80052d8 <pbuf_alloced_custom+0xd0>)
 8005264:	f007 fe6c 	bl	800cf40 <iprintf>
    return NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	e02d      	b.n	80052c8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800526c:	89fb      	ldrh	r3, [r7, #14]
 800526e:	3303      	adds	r3, #3
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	88bb      	ldrh	r3, [r7, #4]
 8005276:	441a      	add	r2, r3
 8005278:	8bbb      	ldrh	r3, [r7, #28]
 800527a:	429a      	cmp	r2, r3
 800527c:	d901      	bls.n	8005282 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e022      	b.n	80052c8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800528e:	89fb      	ldrh	r3, [r7, #14]
 8005290:	3303      	adds	r3, #3
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	441a      	add	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e002      	b.n	80052a6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2202      	movs	r2, #2
 80052aa:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	88ba      	ldrh	r2, [r7, #4]
 80052b0:	811a      	strh	r2, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	891a      	ldrh	r2, [r3, #8]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	79ba      	ldrb	r2, [r7, #6]
 80052be:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80052c6:	683b      	ldr	r3, [r7, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0800e0d0 	.word	0x0800e0d0
 80052d4:	0800e268 	.word	0x0800e268
 80052d8:	0800e11c 	.word	0x0800e11c

080052dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <pbuf_realloc+0x20>
 80052ee:	4b4b      	ldr	r3, [pc, #300]	; (800541c <pbuf_realloc+0x140>)
 80052f0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80052f4:	494a      	ldr	r1, [pc, #296]	; (8005420 <pbuf_realloc+0x144>)
 80052f6:	484b      	ldr	r0, [pc, #300]	; (8005424 <pbuf_realloc+0x148>)
 80052f8:	f007 fe22 	bl	800cf40 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7b1b      	ldrb	r3, [r3, #12]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d012      	beq.n	800532a <pbuf_realloc+0x4e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d00e      	beq.n	800532a <pbuf_realloc+0x4e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7b1b      	ldrb	r3, [r3, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <pbuf_realloc+0x4e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7b1b      	ldrb	r3, [r3, #12]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d006      	beq.n	800532a <pbuf_realloc+0x4e>
 800531c:	4b3f      	ldr	r3, [pc, #252]	; (800541c <pbuf_realloc+0x140>)
 800531e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005322:	4941      	ldr	r1, [pc, #260]	; (8005428 <pbuf_realloc+0x14c>)
 8005324:	483f      	ldr	r0, [pc, #252]	; (8005424 <pbuf_realloc+0x148>)
 8005326:	f007 fe0b 	bl	800cf40 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	891b      	ldrh	r3, [r3, #8]
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	429a      	cmp	r2, r3
 8005332:	d26f      	bcs.n	8005414 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8005334:	887b      	ldrh	r3, [r7, #2]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	8912      	ldrh	r2, [r2, #8]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	827b      	strh	r3, [r7, #18]
  q = p;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005346:	e025      	b.n	8005394 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	895b      	ldrh	r3, [r3, #10]
 800534c:	8a7a      	ldrh	r2, [r7, #18]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005358:	4293      	cmp	r3, r2
 800535a:	dd06      	ble.n	800536a <pbuf_realloc+0x8e>
 800535c:	4b2f      	ldr	r3, [pc, #188]	; (800541c <pbuf_realloc+0x140>)
 800535e:	f240 220b 	movw	r2, #523	; 0x20b
 8005362:	4932      	ldr	r1, [pc, #200]	; (800542c <pbuf_realloc+0x150>)
 8005364:	482f      	ldr	r0, [pc, #188]	; (8005424 <pbuf_realloc+0x148>)
 8005366:	f007 fdeb 	bl	800cf40 <iprintf>
    q->tot_len += (u16_t)grow;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	891a      	ldrh	r2, [r3, #8]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	b29b      	uxth	r3, r3
 8005372:	4413      	add	r3, r2
 8005374:	b29a      	uxth	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <pbuf_realloc+0xb8>
 8005386:	4b25      	ldr	r3, [pc, #148]	; (800541c <pbuf_realloc+0x140>)
 8005388:	f240 220f 	movw	r2, #527	; 0x20f
 800538c:	4928      	ldr	r1, [pc, #160]	; (8005430 <pbuf_realloc+0x154>)
 800538e:	4825      	ldr	r0, [pc, #148]	; (8005424 <pbuf_realloc+0x148>)
 8005390:	f007 fdd6 	bl	800cf40 <iprintf>
  while (rem_len > q->len) {
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	895b      	ldrh	r3, [r3, #10]
 8005398:	8a7a      	ldrh	r2, [r7, #18]
 800539a:	429a      	cmp	r2, r3
 800539c:	d8d4      	bhi.n	8005348 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	7b1b      	ldrb	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d122      	bne.n	80053ec <pbuf_realloc+0x110>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	895b      	ldrh	r3, [r3, #10]
 80053aa:	8a7a      	ldrh	r2, [r7, #18]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d01d      	beq.n	80053ec <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	7b5b      	ldrb	r3, [r3, #13]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d117      	bne.n	80053ec <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	461a      	mov	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	8a7b      	ldrh	r3, [r7, #18]
 80053ca:	4413      	add	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	6978      	ldr	r0, [r7, #20]
 80053d2:	f7ff f947 	bl	8004664 <mem_trim>
 80053d6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <pbuf_realloc+0x110>
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <pbuf_realloc+0x140>)
 80053e0:	f240 221d 	movw	r2, #541	; 0x21d
 80053e4:	4913      	ldr	r1, [pc, #76]	; (8005434 <pbuf_realloc+0x158>)
 80053e6:	480f      	ldr	r0, [pc, #60]	; (8005424 <pbuf_realloc+0x148>)
 80053e8:	f007 fdaa 	bl	800cf40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	8a7a      	ldrh	r2, [r7, #18]
 80053f0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	895a      	ldrh	r2, [r3, #10]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f8dc 	bl	80055c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e000      	b.n	8005416 <pbuf_realloc+0x13a>
    return;
 8005414:	bf00      	nop

}
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	0800e0d0 	.word	0x0800e0d0
 8005420:	0800e28c 	.word	0x0800e28c
 8005424:	0800e11c 	.word	0x0800e11c
 8005428:	0800e2a4 	.word	0x0800e2a4
 800542c:	0800e2c0 	.word	0x0800e2c0
 8005430:	0800e2d4 	.word	0x0800e2d4
 8005434:	0800e2ec 	.word	0x0800e2ec

08005438 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
 8005444:	4613      	mov	r3, r2
 8005446:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <pbuf_header_impl+0x24>
 800544e:	4b46      	ldr	r3, [pc, #280]	; (8005568 <pbuf_header_impl+0x130>)
 8005450:	f240 223f 	movw	r2, #575	; 0x23f
 8005454:	4945      	ldr	r1, [pc, #276]	; (800556c <pbuf_header_impl+0x134>)
 8005456:	4846      	ldr	r0, [pc, #280]	; (8005570 <pbuf_header_impl+0x138>)
 8005458:	f007 fd72 	bl	800cf40 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800545c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <pbuf_header_impl+0x32>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <pbuf_header_impl+0x36>
    return 0;
 800546a:	2300      	movs	r3, #0
 800546c:	e078      	b.n	8005560 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800546e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005472:	2b00      	cmp	r3, #0
 8005474:	da10      	bge.n	8005498 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	425b      	negs	r3, r3
 800547a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	895b      	ldrh	r3, [r3, #10]
 8005480:	89fa      	ldrh	r2, [r7, #14]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90a      	bls.n	800549c <pbuf_header_impl+0x64>
 8005486:	4b38      	ldr	r3, [pc, #224]	; (8005568 <pbuf_header_impl+0x130>)
 8005488:	f240 2247 	movw	r2, #583	; 0x247
 800548c:	4939      	ldr	r1, [pc, #228]	; (8005574 <pbuf_header_impl+0x13c>)
 800548e:	4838      	ldr	r0, [pc, #224]	; (8005570 <pbuf_header_impl+0x138>)
 8005490:	f007 fd56 	bl	800cf40 <iprintf>
 8005494:	2301      	movs	r3, #1
 8005496:	e063      	b.n	8005560 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	7b1b      	ldrb	r3, [r3, #12]
 80054a0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80054a8:	89bb      	ldrh	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <pbuf_header_impl+0x7c>
 80054ae:	89bb      	ldrh	r3, [r7, #12]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d112      	bne.n	80054da <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054bc:	425b      	negs	r3, r3
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3310      	adds	r3, #16
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d238      	bcs.n	8005542 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e042      	b.n	8005560 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80054da:	89bb      	ldrh	r3, [r7, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d002      	beq.n	80054e6 <pbuf_header_impl+0xae>
 80054e0:	89bb      	ldrh	r3, [r7, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d124      	bne.n	8005530 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80054e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da0d      	bge.n	800550a <pbuf_header_impl+0xd2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	895b      	ldrh	r3, [r3, #10]
 80054f2:	89fa      	ldrh	r2, [r7, #14]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d808      	bhi.n	800550a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005500:	425b      	negs	r3, r3
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	e011      	b.n	800552e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800550a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd0b      	ble.n	800552a <pbuf_header_impl+0xf2>
 8005512:	787b      	ldrb	r3, [r7, #1]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005520:	425b      	negs	r3, r3
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	e001      	b.n	800552e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800552a:	2301      	movs	r3, #1
 800552c:	e018      	b.n	8005560 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800552e:	e008      	b.n	8005542 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <pbuf_header_impl+0x130>)
 8005532:	f240 2277 	movw	r2, #631	; 0x277
 8005536:	4910      	ldr	r1, [pc, #64]	; (8005578 <pbuf_header_impl+0x140>)
 8005538:	480d      	ldr	r0, [pc, #52]	; (8005570 <pbuf_header_impl+0x138>)
 800553a:	f007 fd01 	bl	800cf40 <iprintf>
    return 1;
 800553e:	2301      	movs	r3, #1
 8005540:	e00e      	b.n	8005560 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	895a      	ldrh	r2, [r3, #10]
 8005546:	887b      	ldrh	r3, [r7, #2]
 8005548:	4413      	add	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	891a      	ldrh	r2, [r3, #8]
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	4413      	add	r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	0800e0d0 	.word	0x0800e0d0
 800556c:	0800e308 	.word	0x0800e308
 8005570:	0800e11c 	.word	0x0800e11c
 8005574:	0800e314 	.word	0x0800e314
 8005578:	0800e334 	.word	0x0800e334

0800557c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005588:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800558c:	2200      	movs	r2, #0
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff51 	bl	8005438 <pbuf_header_impl>
 8005596:	4603      	mov	r3, r0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80055ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff3f 	bl	8005438 <pbuf_header_impl>
 80055ba:	4603      	mov	r3, r0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10b      	bne.n	80055ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <pbuf_free+0x22>
 80055d8:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <pbuf_free+0x110>)
 80055da:	f240 22d2 	movw	r2, #722	; 0x2d2
 80055de:	493e      	ldr	r1, [pc, #248]	; (80056d8 <pbuf_free+0x114>)
 80055e0:	483e      	ldr	r0, [pc, #248]	; (80056dc <pbuf_free+0x118>)
 80055e2:	f007 fcad 	bl	800cf40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e070      	b.n	80056cc <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7b1b      	ldrb	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d012      	beq.n	8005618 <pbuf_free+0x54>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7b1b      	ldrb	r3, [r3, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00e      	beq.n	8005618 <pbuf_free+0x54>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7b1b      	ldrb	r3, [r3, #12]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d00a      	beq.n	8005618 <pbuf_free+0x54>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7b1b      	ldrb	r3, [r3, #12]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d006      	beq.n	8005618 <pbuf_free+0x54>
 800560a:	4b32      	ldr	r3, [pc, #200]	; (80056d4 <pbuf_free+0x110>)
 800560c:	f240 22de 	movw	r2, #734	; 0x2de
 8005610:	4933      	ldr	r1, [pc, #204]	; (80056e0 <pbuf_free+0x11c>)
 8005612:	4832      	ldr	r0, [pc, #200]	; (80056dc <pbuf_free+0x118>)
 8005614:	f007 fc94 	bl	800cf40 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800561c:	e052      	b.n	80056c4 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	89db      	ldrh	r3, [r3, #14]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <pbuf_free+0x70>
 8005626:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <pbuf_free+0x110>)
 8005628:	f240 22eb 	movw	r2, #747	; 0x2eb
 800562c:	492d      	ldr	r1, [pc, #180]	; (80056e4 <pbuf_free+0x120>)
 800562e:	482b      	ldr	r0, [pc, #172]	; (80056dc <pbuf_free+0x118>)
 8005630:	f007 fc86 	bl	800cf40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	89db      	ldrh	r3, [r3, #14]
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	81da      	strh	r2, [r3, #14]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	89db      	ldrh	r3, [r3, #14]
 8005644:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005646:	8abb      	ldrh	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d139      	bne.n	80056c0 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	7b1b      	ldrb	r3, [r3, #12]
 8005656:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7b5b      	ldrb	r3, [r3, #13]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d011      	beq.n	8005688 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <pbuf_free+0xba>
 8005670:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <pbuf_free+0x110>)
 8005672:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005676:	491c      	ldr	r1, [pc, #112]	; (80056e8 <pbuf_free+0x124>)
 8005678:	4818      	ldr	r0, [pc, #96]	; (80056dc <pbuf_free+0x118>)
 800567a:	f007 fc61 	bl	800cf40 <iprintf>
        pc->custom_free_function(p);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
 8005686:	e015      	b.n	80056b4 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d104      	bne.n	8005698 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	2008      	movs	r0, #8
 8005692:	f7ff fa6d 	bl	8004b70 <memp_free>
 8005696:	e00d      	b.n	80056b4 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d002      	beq.n	80056a4 <pbuf_free+0xe0>
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d104      	bne.n	80056ae <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	2007      	movs	r0, #7
 80056a8:	f7ff fa62 	bl	8004b70 <memp_free>
 80056ac:	e002      	b.n	80056b4 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe ff76 	bl	80045a0 <mem_free>
        }
      }
      count++;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	3301      	adds	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	e001      	b.n	80056c4 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1a9      	bne.n	800561e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	0800e0d0 	.word	0x0800e0d0
 80056d8:	0800e308 	.word	0x0800e308
 80056dc:	0800e11c 	.word	0x0800e11c
 80056e0:	0800e344 	.word	0x0800e344
 80056e4:	0800e35c 	.word	0x0800e35c
 80056e8:	0800e374 	.word	0x0800e374

080056ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056f8:	e005      	b.n	8005706 <pbuf_clen+0x1a>
    ++len;
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	3301      	adds	r3, #1
 80056fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f6      	bne.n	80056fa <pbuf_clen+0xe>
  }
  return len;
 800570c:	89fb      	ldrh	r3, [r7, #14]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d010      	beq.n	800574c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	89db      	ldrh	r3, [r3, #14]
 800572e:	3301      	adds	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	89db      	ldrh	r3, [r3, #14]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <pbuf_ref+0x30>
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <pbuf_ref+0x38>)
 8005740:	f240 3239 	movw	r2, #825	; 0x339
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <pbuf_ref+0x3c>)
 8005746:	4805      	ldr	r0, [pc, #20]	; (800575c <pbuf_ref+0x40>)
 8005748:	f007 fbfa 	bl	800cf40 <iprintf>
  }
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	0800e0d0 	.word	0x0800e0d0
 8005758:	0800e398 	.word	0x0800e398
 800575c:	0800e11c 	.word	0x0800e11c

08005760 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <pbuf_cat+0x16>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <pbuf_cat+0x26>
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <pbuf_cat+0x98>)
 8005778:	f240 324d 	movw	r2, #845	; 0x34d
 800577c:	491f      	ldr	r1, [pc, #124]	; (80057fc <pbuf_cat+0x9c>)
 800577e:	4820      	ldr	r0, [pc, #128]	; (8005800 <pbuf_cat+0xa0>)
 8005780:	f007 fbde 	bl	800cf40 <iprintf>
 8005784:	e034      	b.n	80057f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e00a      	b.n	80057a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	891a      	ldrh	r2, [r3, #8]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	891b      	ldrh	r3, [r3, #8]
 8005794:	4413      	add	r3, r2
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	891a      	ldrh	r2, [r3, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	895b      	ldrh	r3, [r3, #10]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d006      	beq.n	80057c4 <pbuf_cat+0x64>
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <pbuf_cat+0x98>)
 80057b8:	f240 3255 	movw	r2, #853	; 0x355
 80057bc:	4911      	ldr	r1, [pc, #68]	; (8005804 <pbuf_cat+0xa4>)
 80057be:	4810      	ldr	r0, [pc, #64]	; (8005800 <pbuf_cat+0xa0>)
 80057c0:	f007 fbbe 	bl	800cf40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <pbuf_cat+0x7a>
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <pbuf_cat+0x98>)
 80057ce:	f240 3256 	movw	r2, #854	; 0x356
 80057d2:	490d      	ldr	r1, [pc, #52]	; (8005808 <pbuf_cat+0xa8>)
 80057d4:	480a      	ldr	r0, [pc, #40]	; (8005800 <pbuf_cat+0xa0>)
 80057d6:	f007 fbb3 	bl	800cf40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	891a      	ldrh	r2, [r3, #8]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	891b      	ldrh	r3, [r3, #8]
 80057e2:	4413      	add	r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	0800e0d0 	.word	0x0800e0d0
 80057fc:	0800e3ac 	.word	0x0800e3ac
 8005800:	0800e11c 	.word	0x0800e11c
 8005804:	0800e3e4 	.word	0x0800e3e4
 8005808:	0800e414 	.word	0x0800e414

0800580c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ffa1 	bl	8005760 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f7ff ff7c 	bl	800571c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005836:	2300      	movs	r3, #0
 8005838:	81fb      	strh	r3, [r7, #14]
 800583a:	2300      	movs	r3, #0
 800583c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <pbuf_copy+0x2a>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <pbuf_copy+0x2a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	891a      	ldrh	r2, [r3, #8]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	891b      	ldrh	r3, [r3, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	d209      	bcs.n	800586a <pbuf_copy+0x3e>
 8005856:	4b54      	ldr	r3, [pc, #336]	; (80059a8 <pbuf_copy+0x17c>)
 8005858:	f240 32bd 	movw	r2, #957	; 0x3bd
 800585c:	4953      	ldr	r1, [pc, #332]	; (80059ac <pbuf_copy+0x180>)
 800585e:	4854      	ldr	r0, [pc, #336]	; (80059b0 <pbuf_copy+0x184>)
 8005860:	f007 fb6e 	bl	800cf40 <iprintf>
 8005864:	f06f 030f 	mvn.w	r3, #15
 8005868:	e099      	b.n	800599e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	895b      	ldrh	r3, [r3, #10]
 800586e:	461a      	mov	r2, r3
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	895b      	ldrh	r3, [r3, #10]
 8005878:	4619      	mov	r1, r3
 800587a:	89bb      	ldrh	r3, [r7, #12]
 800587c:	1acb      	subs	r3, r1, r3
 800587e:	429a      	cmp	r2, r3
 8005880:	db05      	blt.n	800588e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	895a      	ldrh	r2, [r3, #10]
 8005886:	89bb      	ldrh	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	817b      	strh	r3, [r7, #10]
 800588c:	e004      	b.n	8005898 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	895a      	ldrh	r2, [r3, #10]
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	89fb      	ldrh	r3, [r7, #14]
 800589e:	18d0      	adds	r0, r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	89bb      	ldrh	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	897a      	ldrh	r2, [r7, #10]
 80058aa:	4619      	mov	r1, r3
 80058ac:	f007 fb35 	bl	800cf1a <memcpy>
    offset_to += len;
 80058b0:	89fa      	ldrh	r2, [r7, #14]
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	4413      	add	r3, r2
 80058b6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80058b8:	89ba      	ldrh	r2, [r7, #12]
 80058ba:	897b      	ldrh	r3, [r7, #10]
 80058bc:	4413      	add	r3, r2
 80058be:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	895b      	ldrh	r3, [r3, #10]
 80058c4:	89fa      	ldrh	r2, [r7, #14]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d906      	bls.n	80058d8 <pbuf_copy+0xac>
 80058ca:	4b37      	ldr	r3, [pc, #220]	; (80059a8 <pbuf_copy+0x17c>)
 80058cc:	f240 32cd 	movw	r2, #973	; 0x3cd
 80058d0:	4938      	ldr	r1, [pc, #224]	; (80059b4 <pbuf_copy+0x188>)
 80058d2:	4837      	ldr	r0, [pc, #220]	; (80059b0 <pbuf_copy+0x184>)
 80058d4:	f007 fb34 	bl	800cf40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	895b      	ldrh	r3, [r3, #10]
 80058dc:	89ba      	ldrh	r2, [r7, #12]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d906      	bls.n	80058f0 <pbuf_copy+0xc4>
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <pbuf_copy+0x17c>)
 80058e4:	f240 32ce 	movw	r2, #974	; 0x3ce
 80058e8:	4933      	ldr	r1, [pc, #204]	; (80059b8 <pbuf_copy+0x18c>)
 80058ea:	4831      	ldr	r0, [pc, #196]	; (80059b0 <pbuf_copy+0x184>)
 80058ec:	f007 fb28 	bl	800cf40 <iprintf>
    if (offset_from >= p_from->len) {
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	89ba      	ldrh	r2, [r7, #12]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d304      	bcc.n	8005904 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	895b      	ldrh	r3, [r3, #10]
 8005908:	89fa      	ldrh	r2, [r7, #14]
 800590a:	429a      	cmp	r2, r3
 800590c:	d114      	bne.n	8005938 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <pbuf_copy+0x10c>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <pbuf_copy+0x10c>
 8005924:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <pbuf_copy+0x17c>)
 8005926:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800592a:	4924      	ldr	r1, [pc, #144]	; (80059bc <pbuf_copy+0x190>)
 800592c:	4820      	ldr	r0, [pc, #128]	; (80059b0 <pbuf_copy+0x184>)
 800592e:	f007 fb07 	bl	800cf40 <iprintf>
 8005932:	f06f 030f 	mvn.w	r3, #15
 8005936:	e032      	b.n	800599e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d013      	beq.n	8005966 <pbuf_copy+0x13a>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	895a      	ldrh	r2, [r3, #10]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	891b      	ldrh	r3, [r3, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d10d      	bne.n	8005966 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d009      	beq.n	8005966 <pbuf_copy+0x13a>
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <pbuf_copy+0x17c>)
 8005954:	f240 32de 	movw	r2, #990	; 0x3de
 8005958:	4919      	ldr	r1, [pc, #100]	; (80059c0 <pbuf_copy+0x194>)
 800595a:	4815      	ldr	r0, [pc, #84]	; (80059b0 <pbuf_copy+0x184>)
 800595c:	f007 faf0 	bl	800cf40 <iprintf>
 8005960:	f06f 0305 	mvn.w	r3, #5
 8005964:	e01b      	b.n	800599e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d013      	beq.n	8005994 <pbuf_copy+0x168>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	895a      	ldrh	r2, [r3, #10]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	891b      	ldrh	r3, [r3, #8]
 8005974:	429a      	cmp	r2, r3
 8005976:	d10d      	bne.n	8005994 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <pbuf_copy+0x168>
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <pbuf_copy+0x17c>)
 8005982:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005986:	490e      	ldr	r1, [pc, #56]	; (80059c0 <pbuf_copy+0x194>)
 8005988:	4809      	ldr	r0, [pc, #36]	; (80059b0 <pbuf_copy+0x184>)
 800598a:	f007 fad9 	bl	800cf40 <iprintf>
 800598e:	f06f 0305 	mvn.w	r3, #5
 8005992:	e004      	b.n	800599e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f47f af67 	bne.w	800586a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	0800e0d0 	.word	0x0800e0d0
 80059ac:	0800e460 	.word	0x0800e460
 80059b0:	0800e11c 	.word	0x0800e11c
 80059b4:	0800e490 	.word	0x0800e490
 80059b8:	0800e4a8 	.word	0x0800e4a8
 80059bc:	0800e4c4 	.word	0x0800e4c4
 80059c0:	0800e4d4 	.word	0x0800e4d4

080059c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	460b      	mov	r3, r1
 80059d4:	80fb      	strh	r3, [r7, #6]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <pbuf_copy_partial+0x32>
 80059e4:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <pbuf_copy_partial+0xe4>)
 80059e6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80059ea:	4930      	ldr	r1, [pc, #192]	; (8005aac <pbuf_copy_partial+0xe8>)
 80059ec:	4830      	ldr	r0, [pc, #192]	; (8005ab0 <pbuf_copy_partial+0xec>)
 80059ee:	f007 faa7 	bl	800cf40 <iprintf>
 80059f2:	2300      	movs	r3, #0
 80059f4:	e054      	b.n	8005aa0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <pbuf_copy_partial+0x4a>
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <pbuf_copy_partial+0xe4>)
 80059fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005a02:	492c      	ldr	r1, [pc, #176]	; (8005ab4 <pbuf_copy_partial+0xf0>)
 8005a04:	482a      	ldr	r0, [pc, #168]	; (8005ab0 <pbuf_copy_partial+0xec>)
 8005a06:	f007 fa9b 	bl	800cf40 <iprintf>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e048      	b.n	8005aa0 <pbuf_copy_partial+0xdc>

  left = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <pbuf_copy_partial+0x5a>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <pbuf_copy_partial+0x5e>
    return 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e03e      	b.n	8005aa0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e034      	b.n	8005a92 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005a28:	88bb      	ldrh	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <pbuf_copy_partial+0x80>
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	895b      	ldrh	r3, [r3, #10]
 8005a32:	88ba      	ldrh	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d305      	bcc.n	8005a44 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	895b      	ldrh	r3, [r3, #10]
 8005a3c:	88ba      	ldrh	r2, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	80bb      	strh	r3, [r7, #4]
 8005a42:	e023      	b.n	8005a8c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	895a      	ldrh	r2, [r3, #10]
 8005a48:	88bb      	ldrh	r3, [r7, #4]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005a4e:	8b3a      	ldrh	r2, [r7, #24]
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d901      	bls.n	8005a5a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005a5a:	8b7b      	ldrh	r3, [r7, #26]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	18d0      	adds	r0, r2, r3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	88bb      	ldrh	r3, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	8b3a      	ldrh	r2, [r7, #24]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f007 fa55 	bl	800cf1a <memcpy>
      copied_total += buf_copy_len;
 8005a70:	8afa      	ldrh	r2, [r7, #22]
 8005a72:	8b3b      	ldrh	r3, [r7, #24]
 8005a74:	4413      	add	r3, r2
 8005a76:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005a78:	8b7a      	ldrh	r2, [r7, #26]
 8005a7a:	8b3b      	ldrh	r3, [r7, #24]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	8b3b      	ldrh	r3, [r7, #24]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <pbuf_copy_partial+0xda>
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1c4      	bne.n	8005a28 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005a9e:	8afb      	ldrh	r3, [r7, #22]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	0800e0d0 	.word	0x0800e0d0
 8005aac:	0800e500 	.word	0x0800e500
 8005ab0:	0800e11c 	.word	0x0800e11c
 8005ab4:	0800e520 	.word	0x0800e520

08005ab8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005acc:	f000 fdf0 	bl	80066b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <tcp_tmr+0x28>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <tcp_tmr+0x28>)
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <tcp_tmr+0x28>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ae8:	f000 fb22 	bl	8006130 <tcp_slowtmr>
  }
}
 8005aec:	bf00      	nop
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200000d9 	.word	0x200000d9

08005af4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e00a      	b.n	8005b1a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d102      	bne.n	8005b14 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f1      	bne.n	8005b04 <tcp_remove_listener+0x10>
      }
   }
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <tcp_listen_closed+0x1a>
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <tcp_listen_closed+0x5c>)
 8005b3c:	22c0      	movs	r2, #192	; 0xc0
 8005b3e:	4913      	ldr	r1, [pc, #76]	; (8005b8c <tcp_listen_closed+0x60>)
 8005b40:	4813      	ldr	r0, [pc, #76]	; (8005b90 <tcp_listen_closed+0x64>)
 8005b42:	f007 f9fd 	bl	800cf40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7d1b      	ldrb	r3, [r3, #20]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d005      	beq.n	8005b5a <tcp_listen_closed+0x2e>
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	; (8005b88 <tcp_listen_closed+0x5c>)
 8005b50:	22c1      	movs	r2, #193	; 0xc1
 8005b52:	4910      	ldr	r1, [pc, #64]	; (8005b94 <tcp_listen_closed+0x68>)
 8005b54:	480e      	ldr	r0, [pc, #56]	; (8005b90 <tcp_listen_closed+0x64>)
 8005b56:	f007 f9f3 	bl	800cf40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e00b      	b.n	8005b78 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005b60:	4a0d      	ldr	r2, [pc, #52]	; (8005b98 <tcp_listen_closed+0x6c>)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ffc1 	bl	8005af4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d9f0      	bls.n	8005b60 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	0800e654 	.word	0x0800e654
 8005b8c:	0800e684 	.word	0x0800e684
 8005b90:	0800e690 	.word	0x0800e690
 8005b94:	0800e6b8 	.word	0x0800e6b8
 8005b98:	0800fa98 	.word	0x0800fa98

08005b9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005b9c:	b5b0      	push	{r4, r5, r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d075      	beq.n	8005c9a <tcp_close_shutdown+0xfe>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7d1b      	ldrb	r3, [r3, #20]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d003      	beq.n	8005bbe <tcp_close_shutdown+0x22>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7d1b      	ldrb	r3, [r3, #20]
 8005bba:	2b07      	cmp	r3, #7
 8005bbc:	d16d      	bne.n	8005c9a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <tcp_close_shutdown+0x34>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005bce:	d064      	beq.n	8005c9a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	7e9b      	ldrb	r3, [r3, #26]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <tcp_close_shutdown+0x4e>
 8005bdc:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <tcp_close_shutdown+0x1a8>)
 8005bde:	f240 120f 	movw	r2, #271	; 0x10f
 8005be2:	4959      	ldr	r1, [pc, #356]	; (8005d48 <tcp_close_shutdown+0x1ac>)
 8005be4:	4859      	ldr	r0, [pc, #356]	; (8005d4c <tcp_close_shutdown+0x1b0>)
 8005be6:	f007 f9ab 	bl	800cf40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bf2:	687c      	ldr	r4, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	1d1d      	adds	r5, r3, #4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8adb      	ldrh	r3, [r3, #22]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	8b12      	ldrh	r2, [r2, #24]
 8005c00:	9201      	str	r2, [sp, #4]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	462b      	mov	r3, r5
 8005c06:	4622      	mov	r2, r4
 8005c08:	f004 f862 	bl	8009cd0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 ffc5 	bl	8006b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005c12:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <tcp_close_shutdown+0x1b4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d105      	bne.n	8005c28 <tcp_close_shutdown+0x8c>
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <tcp_close_shutdown+0x1b4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4a4b      	ldr	r2, [pc, #300]	; (8005d50 <tcp_close_shutdown+0x1b4>)
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e013      	b.n	8005c50 <tcp_close_shutdown+0xb4>
 8005c28:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <tcp_close_shutdown+0x1b4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e00c      	b.n	8005c4a <tcp_close_shutdown+0xae>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d104      	bne.n	8005c44 <tcp_close_shutdown+0xa8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e005      	b.n	8005c50 <tcp_close_shutdown+0xb4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1ef      	bne.n	8005c30 <tcp_close_shutdown+0x94>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	4b3f      	ldr	r3, [pc, #252]	; (8005d54 <tcp_close_shutdown+0x1b8>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	7d1b      	ldrb	r3, [r3, #20]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d10c      	bne.n	8005c7e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	220a      	movs	r2, #10
 8005c68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005c6a:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <tcp_close_shutdown+0x1bc>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]
 8005c72:	4a39      	ldr	r2, [pc, #228]	; (8005d58 <tcp_close_shutdown+0x1bc>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	f004 fa7a 	bl	800a170 <tcp_timer_needed>
 8005c7c:	e00b      	b.n	8005c96 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005c7e:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <tcp_close_shutdown+0x1c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d102      	bne.n	8005c8e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005c88:	f003 faec 	bl	8009264 <tcp_trigger_input_pcb_close>
 8005c8c:	e003      	b.n	8005c96 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	2001      	movs	r0, #1
 8005c92:	f7fe ff6d 	bl	8004b70 <memp_free>
        }
      }
      return ERR_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e050      	b.n	8005d3c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	7d1b      	ldrb	r3, [r3, #20]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d02e      	beq.n	8005d00 <tcp_close_shutdown+0x164>
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d038      	beq.n	8005d18 <tcp_close_shutdown+0x17c>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d142      	bne.n	8005d30 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8adb      	ldrh	r3, [r3, #22]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d021      	beq.n	8005cf6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005cb2:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <tcp_close_shutdown+0x1c4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d105      	bne.n	8005cc8 <tcp_close_shutdown+0x12c>
 8005cbc:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <tcp_close_shutdown+0x1c4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <tcp_close_shutdown+0x1c4>)
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e013      	b.n	8005cf0 <tcp_close_shutdown+0x154>
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <tcp_close_shutdown+0x1c4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	e00c      	b.n	8005cea <tcp_close_shutdown+0x14e>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d104      	bne.n	8005ce4 <tcp_close_shutdown+0x148>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	e005      	b.n	8005cf0 <tcp_close_shutdown+0x154>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ef      	bne.n	8005cd0 <tcp_close_shutdown+0x134>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f7fe ff39 	bl	8004b70 <memp_free>
    break;
 8005cfe:	e01c      	b.n	8005d3a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff13 	bl	8005b2c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4816      	ldr	r0, [pc, #88]	; (8005d64 <tcp_close_shutdown+0x1c8>)
 8005d0a:	f000 ff89 	bl	8006c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7fe ff2d 	bl	8004b70 <memp_free>
    break;
 8005d16:	e010      	b.n	8005d3a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	480d      	ldr	r0, [pc, #52]	; (8005d50 <tcp_close_shutdown+0x1b4>)
 8005d1c:	f000 ff80 	bl	8006c20 <tcp_pcb_remove>
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <tcp_close_shutdown+0x1b8>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fe ff21 	bl	8004b70 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005d2e:	e004      	b.n	8005d3a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f819 	bl	8005d68 <tcp_close_shutdown_fin>
 8005d36:	4603      	mov	r3, r0
 8005d38:	e000      	b.n	8005d3c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdb0      	pop	{r4, r5, r7, pc}
 8005d44:	0800e654 	.word	0x0800e654
 8005d48:	0800e6d0 	.word	0x0800e6d0
 8005d4c:	0800e690 	.word	0x0800e690
 8005d50:	20006cd4 	.word	0x20006cd4
 8005d54:	20006cd0 	.word	0x20006cd0
 8005d58:	20006ce4 	.word	0x20006ce4
 8005d5c:	20006ce8 	.word	0x20006ce8
 8005d60:	20006ce0 	.word	0x20006ce0
 8005d64:	20006cdc 	.word	0x20006cdc

08005d68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <tcp_close_shutdown_fin+0x1c>
 8005d76:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <tcp_close_shutdown_fin+0xc0>)
 8005d78:	f240 124d 	movw	r2, #333	; 0x14d
 8005d7c:	492b      	ldr	r1, [pc, #172]	; (8005e2c <tcp_close_shutdown_fin+0xc4>)
 8005d7e:	482c      	ldr	r0, [pc, #176]	; (8005e30 <tcp_close_shutdown_fin+0xc8>)
 8005d80:	f007 f8de 	bl	800cf40 <iprintf>

  switch (pcb->state) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7d1b      	ldrb	r3, [r3, #20]
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d010      	beq.n	8005dae <tcp_close_shutdown_fin+0x46>
 8005d8c:	2b07      	cmp	r3, #7
 8005d8e:	d01b      	beq.n	8005dc8 <tcp_close_shutdown_fin+0x60>
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d126      	bne.n	8005de2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f003 faf1 	bl	800937c <tcp_send_fin>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11f      	bne.n	8005de6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2205      	movs	r2, #5
 8005daa:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005dac:	e01b      	b.n	8005de6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f003 fae4 	bl	800937c <tcp_send_fin>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d114      	bne.n	8005dea <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2205      	movs	r2, #5
 8005dc4:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005dc6:	e010      	b.n	8005dea <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f003 fad7 	bl	800937c <tcp_send_fin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2209      	movs	r2, #9
 8005dde:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005de0:	e005      	b.n	8005dee <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e01c      	b.n	8005e20 <tcp_close_shutdown_fin+0xb8>
    break;
 8005de6:	bf00      	nop
 8005de8:	e002      	b.n	8005df0 <tcp_close_shutdown_fin+0x88>
    break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <tcp_close_shutdown_fin+0x88>
    break;
 8005dee:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f003 fcdf 	bl	80097bc <tcp_output>
 8005dfe:	e00d      	b.n	8005e1c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d108      	bne.n	8005e1c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7e9b      	ldrb	r3, [r3, #26]
 8005e0e:	f043 0308 	orr.w	r3, r3, #8
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e001      	b.n	8005e20 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	0800e654 	.word	0x0800e654
 8005e2c:	0800e684 	.word	0x0800e684
 8005e30:	0800e690 	.word	0x0800e690

08005e34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7d1b      	ldrb	r3, [r3, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d006      	beq.n	8005e52 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7e9b      	ldrb	r3, [r3, #26]
 8005e48:	f043 0310 	orr.w	r3, r3, #16
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005e52:	2101      	movs	r1, #1
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff fea1 	bl	8005b9c <tcp_close_shutdown>
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7d1b      	ldrb	r3, [r3, #20]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d106      	bne.n	8005e84 <tcp_abandon+0x20>
 8005e76:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <tcp_abandon+0x148>)
 8005e78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005e7c:	494c      	ldr	r1, [pc, #304]	; (8005fb0 <tcp_abandon+0x14c>)
 8005e7e:	484d      	ldr	r0, [pc, #308]	; (8005fb4 <tcp_abandon+0x150>)
 8005e80:	f007 f85e 	bl	800cf40 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	7d1b      	ldrb	r3, [r3, #20]
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d108      	bne.n	8005e9e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	484a      	ldr	r0, [pc, #296]	; (8005fb8 <tcp_abandon+0x154>)
 8005e90:	f000 fec6 	bl	8006c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	2001      	movs	r0, #1
 8005e98:	f7fe fe6a 	bl	8004b70 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005e9c:	e081      	b.n	8005fa2 <tcp_abandon+0x13e>
    int send_rst = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eaa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7d1b      	ldrb	r3, [r3, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d126      	bne.n	8005f16 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8adb      	ldrh	r3, [r3, #22]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02e      	beq.n	8005f2e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ed0:	4b3a      	ldr	r3, [pc, #232]	; (8005fbc <tcp_abandon+0x158>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d105      	bne.n	8005ee6 <tcp_abandon+0x82>
 8005eda:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <tcp_abandon+0x158>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a36      	ldr	r2, [pc, #216]	; (8005fbc <tcp_abandon+0x158>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e013      	b.n	8005f0e <tcp_abandon+0xaa>
 8005ee6:	4b35      	ldr	r3, [pc, #212]	; (8005fbc <tcp_abandon+0x158>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e00c      	b.n	8005f08 <tcp_abandon+0xa4>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d104      	bne.n	8005f02 <tcp_abandon+0x9e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e005      	b.n	8005f0e <tcp_abandon+0xaa>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ef      	bne.n	8005eee <tcp_abandon+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	e00b      	b.n	8005f2e <tcp_abandon+0xca>
      send_rst = reset;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8adb      	ldrh	r3, [r3, #22]
 8005f1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4827      	ldr	r0, [pc, #156]	; (8005fc0 <tcp_abandon+0x15c>)
 8005f24:	f000 fe7c 	bl	8006c20 <tcp_pcb_remove>
 8005f28:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <tcp_abandon+0x160>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fc85 	bl	800684a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fc7c 	bl	800684a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fc73 	bl	800684a <tcp_segs_free>
    if (send_rst) {
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	1d19      	adds	r1, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8b1b      	ldrh	r3, [r3, #24]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	69b8      	ldr	r0, [r7, #24]
 8005f80:	f003 fea6 	bl	8009cd0 <tcp_rst>
    last_state = pcb->state;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	7d1b      	ldrb	r3, [r3, #20]
 8005f88:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f7fe fdef 	bl	8004b70 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <tcp_abandon+0x13e>
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f06f 010c 	mvn.w	r1, #12
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	4798      	blx	r3
}
 8005fa2:	bf00      	nop
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0800e654 	.word	0x0800e654
 8005fb0:	0800e6ec 	.word	0x0800e6ec
 8005fb4:	0800e690 	.word	0x0800e690
 8005fb8:	20006ce4 	.word	0x20006ce4
 8005fbc:	20006ce0 	.word	0x20006ce0
 8005fc0:	20006cd4 	.word	0x20006cd4
 8005fc4:	20006cd0 	.word	0x20006cd0

08005fc8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ff46 	bl	8005e64 <tcp_abandon>
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005ffc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006000:	bf28      	it	cs
 8006002:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006006:	b292      	uxth	r2, r2
 8006008:	4413      	add	r3, r2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	db08      	blt.n	8006024 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	e020      	b.n	8006066 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd03      	ble.n	800603a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006038:	e014      	b.n	8006064 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d306      	bcc.n	800605c <tcp_update_rcv_ann_wnd+0x7c>
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <tcp_update_rcv_ann_wnd+0x90>)
 8006050:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006054:	4907      	ldr	r1, [pc, #28]	; (8006074 <tcp_update_rcv_ann_wnd+0x94>)
 8006056:	4808      	ldr	r0, [pc, #32]	; (8006078 <tcp_update_rcv_ann_wnd+0x98>)
 8006058:	f006 ff72 	bl	800cf40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006064:	2300      	movs	r3, #0
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	0800e654 	.word	0x0800e654
 8006074:	0800e76c 	.word	0x0800e76c
 8006078:	0800e690 	.word	0x0800e690

0800607c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	7d1b      	ldrb	r3, [r3, #20]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d106      	bne.n	800609e <tcp_recved+0x22>
 8006090:	4b23      	ldr	r3, [pc, #140]	; (8006120 <tcp_recved+0xa4>)
 8006092:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006096:	4923      	ldr	r1, [pc, #140]	; (8006124 <tcp_recved+0xa8>)
 8006098:	4823      	ldr	r0, [pc, #140]	; (8006128 <tcp_recved+0xac>)
 800609a:	f006 ff51 	bl	800cf40 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	4413      	add	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060b4:	d904      	bls.n	80060c0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80060be:	e017      	b.n	80060f0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d113      	bne.n	80060f0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	7d1b      	ldrb	r3, [r3, #20]
 80060cc:	2b07      	cmp	r3, #7
 80060ce:	d003      	beq.n	80060d8 <tcp_recved+0x5c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7d1b      	ldrb	r3, [r3, #20]
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d104      	bne.n	80060e2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
 80060e0:	e006      	b.n	80060f0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80060e2:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <tcp_recved+0xa4>)
 80060e4:	f240 322d 	movw	r2, #813	; 0x32d
 80060e8:	4910      	ldr	r1, [pc, #64]	; (800612c <tcp_recved+0xb0>)
 80060ea:	480f      	ldr	r0, [pc, #60]	; (8006128 <tcp_recved+0xac>)
 80060ec:	f006 ff28 	bl	800cf40 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff75 	bl	8005fe0 <tcp_update_rcv_ann_wnd>
 80060f6:	4603      	mov	r3, r0
 80060f8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006100:	db09      	blt.n	8006116 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7e9b      	ldrb	r3, [r3, #26]
 8006106:	f043 0302 	orr.w	r3, r3, #2
 800610a:	b2da      	uxtb	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f003 fb53 	bl	80097bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	0800e654 	.word	0x0800e654
 8006124:	0800e788 	.word	0x0800e788
 8006128:	0800e690 	.word	0x0800e690
 800612c:	0800e7b0 	.word	0x0800e7b0

08006130 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006130:	b5b0      	push	{r4, r5, r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800613a:	4b97      	ldr	r3, [pc, #604]	; (8006398 <tcp_slowtmr+0x268>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a95      	ldr	r2, [pc, #596]	; (8006398 <tcp_slowtmr+0x268>)
 8006142:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006144:	4b95      	ldr	r3, [pc, #596]	; (800639c <tcp_slowtmr+0x26c>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	b2da      	uxtb	r2, r3
 800614c:	4b93      	ldr	r3, [pc, #588]	; (800639c <tcp_slowtmr+0x26c>)
 800614e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006150:	2300      	movs	r3, #0
 8006152:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006154:	4b92      	ldr	r3, [pc, #584]	; (80063a0 <tcp_slowtmr+0x270>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800615a:	e227      	b.n	80065ac <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	7d1b      	ldrb	r3, [r3, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <tcp_slowtmr+0x42>
 8006164:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <tcp_slowtmr+0x274>)
 8006166:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800616a:	498f      	ldr	r1, [pc, #572]	; (80063a8 <tcp_slowtmr+0x278>)
 800616c:	488f      	ldr	r0, [pc, #572]	; (80063ac <tcp_slowtmr+0x27c>)
 800616e:	f006 fee7 	bl	800cf40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	7d1b      	ldrb	r3, [r3, #20]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d106      	bne.n	8006188 <tcp_slowtmr+0x58>
 800617a:	4b8a      	ldr	r3, [pc, #552]	; (80063a4 <tcp_slowtmr+0x274>)
 800617c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006180:	498b      	ldr	r1, [pc, #556]	; (80063b0 <tcp_slowtmr+0x280>)
 8006182:	488a      	ldr	r0, [pc, #552]	; (80063ac <tcp_slowtmr+0x27c>)
 8006184:	f006 fedc 	bl	800cf40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	7d1b      	ldrb	r3, [r3, #20]
 800618c:	2b0a      	cmp	r3, #10
 800618e:	d106      	bne.n	800619e <tcp_slowtmr+0x6e>
 8006190:	4b84      	ldr	r3, [pc, #528]	; (80063a4 <tcp_slowtmr+0x274>)
 8006192:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006196:	4987      	ldr	r1, [pc, #540]	; (80063b4 <tcp_slowtmr+0x284>)
 8006198:	4884      	ldr	r0, [pc, #528]	; (80063ac <tcp_slowtmr+0x27c>)
 800619a:	f006 fed1 	bl	800cf40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	7f5a      	ldrb	r2, [r3, #29]
 80061a2:	4b7e      	ldr	r3, [pc, #504]	; (800639c <tcp_slowtmr+0x26c>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d103      	bne.n	80061b2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80061b0:	e1fc      	b.n	80065ac <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80061b2:	4b7a      	ldr	r3, [pc, #488]	; (800639c <tcp_slowtmr+0x26c>)
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	7d1b      	ldrb	r3, [r3, #20]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d108      	bne.n	80061dc <tcp_slowtmr+0xac>
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d903      	bls.n	80061dc <tcp_slowtmr+0xac>
      ++pcb_remove;
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
 80061d6:	3301      	adds	r3, #1
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e0a2      	b.n	8006322 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061e2:	2b0b      	cmp	r3, #11
 80061e4:	d903      	bls.n	80061ee <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80061e6:	7ffb      	ldrb	r3, [r7, #31]
 80061e8:	3301      	adds	r3, #1
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e099      	b.n	8006322 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d032      	beq.n	800625e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80061fe:	3b01      	subs	r3, #1
 8006200:	4a6d      	ldr	r2, [pc, #436]	; (80063b8 <tcp_slowtmr+0x288>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800620c:	7cfa      	ldrb	r2, [r7, #19]
 800620e:	429a      	cmp	r2, r3
 8006210:	d907      	bls.n	8006222 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006218:	3301      	adds	r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006228:	7cfa      	ldrb	r2, [r7, #19]
 800622a:	429a      	cmp	r2, r3
 800622c:	d879      	bhi.n	8006322 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800622e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006230:	f003 fede 	bl	8009ff0 <tcp_zero_window_probe>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d173      	bne.n	8006322 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006248:	2b06      	cmp	r3, #6
 800624a:	d86a      	bhi.n	8006322 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006252:	3301      	adds	r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800625c:	e061      	b.n	8006322 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	db08      	blt.n	800627a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800626e:	b29b      	uxth	r3, r3
 8006270:	3301      	adds	r3, #1
 8006272:	b29b      	uxth	r3, r3
 8006274:	b21a      	sxth	r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04f      	beq.n	8006322 <tcp_slowtmr+0x1f2>
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800628e:	429a      	cmp	r2, r3
 8006290:	db47      	blt.n	8006322 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	7d1b      	ldrb	r3, [r3, #20]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d018      	beq.n	80062cc <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	bf28      	it	cs
 80062a4:	230c      	movcs	r3, #12
 80062a6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80062ae:	10db      	asrs	r3, r3, #3
 80062b0:	b21b      	sxth	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80062ba:	4413      	add	r3, r2
 80062bc:	7dfa      	ldrb	r2, [r7, #23]
 80062be:	493f      	ldr	r1, [pc, #252]	; (80063bc <tcp_slowtmr+0x28c>)
 80062c0:	5c8a      	ldrb	r2, [r1, r2]
 80062c2:	4093      	lsls	r3, r2
 80062c4:	b21a      	sxth	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	2200      	movs	r2, #0
 80062d0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf28      	it	cs
 80062e2:	4613      	movcs	r3, r2
 80062e4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80062e6:	8abb      	ldrh	r3, [r7, #20]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	429a      	cmp	r2, r3
 8006302:	d206      	bcs.n	8006312 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800631c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800631e:	f003 fd4d 	bl	8009dbc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	7d1b      	ldrb	r3, [r3, #20]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d10f      	bne.n	800634a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	7e9b      	ldrb	r3, [r3, #26]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006336:	4b18      	ldr	r3, [pc, #96]	; (8006398 <tcp_slowtmr+0x268>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b28      	cmp	r3, #40	; 0x28
 8006342:	d902      	bls.n	800634a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006344:	7ffb      	ldrb	r3, [r7, #31]
 8006346:	3301      	adds	r3, #1
 8006348:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	7a1b      	ldrb	r3, [r3, #8]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d05d      	beq.n	8006412 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800635a:	2b04      	cmp	r3, #4
 800635c:	d003      	beq.n	8006366 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006362:	2b07      	cmp	r3, #7
 8006364:	d155      	bne.n	8006412 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <tcp_slowtmr+0x268>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800637a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800637e:	4910      	ldr	r1, [pc, #64]	; (80063c0 <tcp_slowtmr+0x290>)
 8006380:	fba1 1303 	umull	r1, r3, r1, r3
 8006384:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006386:	429a      	cmp	r2, r3
 8006388:	d91c      	bls.n	80063c4 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	3301      	adds	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006390:	7fbb      	ldrb	r3, [r7, #30]
 8006392:	3301      	adds	r3, #1
 8006394:	77bb      	strb	r3, [r7, #30]
 8006396:	e03c      	b.n	8006412 <tcp_slowtmr+0x2e2>
 8006398:	20006cd8 	.word	0x20006cd8
 800639c:	200000da 	.word	0x200000da
 80063a0:	20006cd4 	.word	0x20006cd4
 80063a4:	0800e654 	.word	0x0800e654
 80063a8:	0800e804 	.word	0x0800e804
 80063ac:	0800e690 	.word	0x0800e690
 80063b0:	0800e830 	.word	0x0800e830
 80063b4:	0800e85c 	.word	0x0800e85c
 80063b8:	0800fa90 	.word	0x0800fa90
 80063bc:	0800fa80 	.word	0x0800fa80
 80063c0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063c4:	4b97      	ldr	r3, [pc, #604]	; (8006624 <tcp_slowtmr+0x4f4>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80063da:	4618      	mov	r0, r3
 80063dc:	4b92      	ldr	r3, [pc, #584]	; (8006628 <tcp_slowtmr+0x4f8>)
 80063de:	fb03 f300 	mul.w	r3, r3, r0
 80063e2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80063e4:	4991      	ldr	r1, [pc, #580]	; (800662c <tcp_slowtmr+0x4fc>)
 80063e6:	fba1 1303 	umull	r1, r3, r1, r3
 80063ea:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d910      	bls.n	8006412 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80063f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063f2:	f003 fdc0 	bl	8009f76 <tcp_keepalive>
 80063f6:	4603      	mov	r3, r0
 80063f8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80063fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006408:	3301      	adds	r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800641a:	4b82      	ldr	r3, [pc, #520]	; (8006624 <tcp_slowtmr+0x4f4>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800642a:	4619      	mov	r1, r3
 800642c:	460b      	mov	r3, r1
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	440b      	add	r3, r1
 8006432:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006434:	429a      	cmp	r2, r3
 8006436:	d307      	bcc.n	8006448 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fa04 	bl	800684a <tcp_segs_free>
      pcb->ooseq = NULL;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2200      	movs	r2, #0
 8006446:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	7d1b      	ldrb	r3, [r3, #20]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d109      	bne.n	8006464 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006450:	4b74      	ldr	r3, [pc, #464]	; (8006624 <tcp_slowtmr+0x4f4>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b28      	cmp	r3, #40	; 0x28
 800645c:	d902      	bls.n	8006464 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	3301      	adds	r3, #1
 8006462:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	7d1b      	ldrb	r3, [r3, #20]
 8006468:	2b09      	cmp	r3, #9
 800646a:	d109      	bne.n	8006480 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800646c:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <tcp_slowtmr+0x4f4>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2bf0      	cmp	r3, #240	; 0xf0
 8006478:	d902      	bls.n	8006480 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800647a:	7ffb      	ldrb	r3, [r7, #31]
 800647c:	3301      	adds	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006480:	7ffb      	ldrb	r3, [r7, #31]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d05d      	beq.n	8006542 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800648e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006490:	f000 fb84 	bl	8006b9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800649a:	4b65      	ldr	r3, [pc, #404]	; (8006630 <tcp_slowtmr+0x500>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d106      	bne.n	80064b2 <tcp_slowtmr+0x382>
 80064a4:	4b63      	ldr	r3, [pc, #396]	; (8006634 <tcp_slowtmr+0x504>)
 80064a6:	f240 4289 	movw	r2, #1161	; 0x489
 80064aa:	4963      	ldr	r1, [pc, #396]	; (8006638 <tcp_slowtmr+0x508>)
 80064ac:	4863      	ldr	r0, [pc, #396]	; (800663c <tcp_slowtmr+0x50c>)
 80064ae:	f006 fd47 	bl	800cf40 <iprintf>
        prev->next = pcb->next;
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	e00f      	b.n	80064dc <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80064bc:	4b5c      	ldr	r3, [pc, #368]	; (8006630 <tcp_slowtmr+0x500>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d006      	beq.n	80064d4 <tcp_slowtmr+0x3a4>
 80064c6:	4b5b      	ldr	r3, [pc, #364]	; (8006634 <tcp_slowtmr+0x504>)
 80064c8:	f240 428d 	movw	r2, #1165	; 0x48d
 80064cc:	495c      	ldr	r1, [pc, #368]	; (8006640 <tcp_slowtmr+0x510>)
 80064ce:	485b      	ldr	r0, [pc, #364]	; (800663c <tcp_slowtmr+0x50c>)
 80064d0:	f006 fd36 	bl	800cf40 <iprintf>
        tcp_active_pcbs = pcb->next;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4a55      	ldr	r2, [pc, #340]	; (8006630 <tcp_slowtmr+0x500>)
 80064da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80064dc:	7fbb      	ldrb	r3, [r7, #30]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1d1d      	adds	r5, r3, #4
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	8adb      	ldrh	r3, [r3, #22]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	8b12      	ldrh	r2, [r2, #24]
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	462b      	mov	r3, r5
 80064fe:	4622      	mov	r2, r4
 8006500:	f003 fbe6 	bl	8009cd0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	7d1b      	ldrb	r3, [r3, #20]
 800650e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	2001      	movs	r0, #1
 800651e:	f7fe fb27 	bl	8004b70 <memp_free>

      tcp_active_pcbs_changed = 0;
 8006522:	4b48      	ldr	r3, [pc, #288]	; (8006644 <tcp_slowtmr+0x514>)
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <tcp_slowtmr+0x408>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f06f 010c 	mvn.w	r1, #12
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006538:	4b42      	ldr	r3, [pc, #264]	; (8006644 <tcp_slowtmr+0x514>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d035      	beq.n	80065ac <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006540:	e606      	b.n	8006150 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	7edb      	ldrb	r3, [r3, #27]
 8006550:	3301      	adds	r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	7eda      	ldrb	r2, [r3, #27]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	7f1b      	ldrb	r3, [r3, #28]
 8006560:	429a      	cmp	r2, r3
 8006562:	d323      	bcc.n	80065ac <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2200      	movs	r2, #0
 8006568:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800656a:	4b36      	ldr	r3, [pc, #216]	; (8006644 <tcp_slowtmr+0x514>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <tcp_slowtmr+0x460>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	6912      	ldr	r2, [r2, #16]
 8006584:	6a39      	ldr	r1, [r7, #32]
 8006586:	4610      	mov	r0, r2
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	777b      	strb	r3, [r7, #29]
 800658e:	e001      	b.n	8006594 <tcp_slowtmr+0x464>
 8006590:	2300      	movs	r3, #0
 8006592:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006594:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <tcp_slowtmr+0x514>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d000      	beq.n	800659e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800659c:	e5d8      	b.n	8006150 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800659e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80065a6:	6a38      	ldr	r0, [r7, #32]
 80065a8:	f003 f908 	bl	80097bc <tcp_output>
  while (pcb != NULL) {
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f47f add4 	bne.w	800615c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <tcp_slowtmr+0x518>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80065be:	e068      	b.n	8006692 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	7d1b      	ldrb	r3, [r3, #20]
 80065c4:	2b0a      	cmp	r3, #10
 80065c6:	d006      	beq.n	80065d6 <tcp_slowtmr+0x4a6>
 80065c8:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <tcp_slowtmr+0x504>)
 80065ca:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80065ce:	491f      	ldr	r1, [pc, #124]	; (800664c <tcp_slowtmr+0x51c>)
 80065d0:	481a      	ldr	r0, [pc, #104]	; (800663c <tcp_slowtmr+0x50c>)
 80065d2:	f006 fcb5 	bl	800cf40 <iprintf>
    pcb_remove = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <tcp_slowtmr+0x4f4>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2bf0      	cmp	r3, #240	; 0xf0
 80065e6:	d902      	bls.n	80065ee <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80065e8:	7ffb      	ldrb	r3, [r7, #31]
 80065ea:	3301      	adds	r3, #1
 80065ec:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d049      	beq.n	8006688 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80065f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f6:	f000 fad1 	bl	8006b9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d029      	beq.n	8006654 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <tcp_slowtmr+0x518>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	429a      	cmp	r2, r3
 8006608:	d106      	bne.n	8006618 <tcp_slowtmr+0x4e8>
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <tcp_slowtmr+0x504>)
 800660c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006610:	490f      	ldr	r1, [pc, #60]	; (8006650 <tcp_slowtmr+0x520>)
 8006612:	480a      	ldr	r0, [pc, #40]	; (800663c <tcp_slowtmr+0x50c>)
 8006614:	f006 fc94 	bl	800cf40 <iprintf>
        prev->next = pcb->next;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e028      	b.n	8006674 <tcp_slowtmr+0x544>
 8006622:	bf00      	nop
 8006624:	20006cd8 	.word	0x20006cd8
 8006628:	000124f8 	.word	0x000124f8
 800662c:	10624dd3 	.word	0x10624dd3
 8006630:	20006cd4 	.word	0x20006cd4
 8006634:	0800e654 	.word	0x0800e654
 8006638:	0800e88c 	.word	0x0800e88c
 800663c:	0800e690 	.word	0x0800e690
 8006640:	0800e8b8 	.word	0x0800e8b8
 8006644:	20006cd0 	.word	0x20006cd0
 8006648:	20006ce4 	.word	0x20006ce4
 800664c:	0800e8e4 	.word	0x0800e8e4
 8006650:	0800e914 	.word	0x0800e914
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006654:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <tcp_slowtmr+0x570>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	429a      	cmp	r2, r3
 800665c:	d006      	beq.n	800666c <tcp_slowtmr+0x53c>
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <tcp_slowtmr+0x574>)
 8006660:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006664:	4910      	ldr	r1, [pc, #64]	; (80066a8 <tcp_slowtmr+0x578>)
 8006666:	4811      	ldr	r0, [pc, #68]	; (80066ac <tcp_slowtmr+0x57c>)
 8006668:	f006 fc6a 	bl	800cf40 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <tcp_slowtmr+0x570>)
 8006672:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800667e:	69b9      	ldr	r1, [r7, #24]
 8006680:	2001      	movs	r0, #1
 8006682:	f7fe fa75 	bl	8004b70 <memp_free>
 8006686:	e004      	b.n	8006692 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d193      	bne.n	80065c0 <tcp_slowtmr+0x490>
    }
  }
}
 8006698:	bf00      	nop
 800669a:	3728      	adds	r7, #40	; 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bdb0      	pop	{r4, r5, r7, pc}
 80066a0:	20006ce4 	.word	0x20006ce4
 80066a4:	0800e654 	.word	0x0800e654
 80066a8:	0800e93c 	.word	0x0800e93c
 80066ac:	0800e690 	.word	0x0800e690

080066b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80066b6:	4b2d      	ldr	r3, [pc, #180]	; (800676c <tcp_fasttmr+0xbc>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b2b      	ldr	r3, [pc, #172]	; (800676c <tcp_fasttmr+0xbc>)
 80066c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80066c2:	4b2b      	ldr	r3, [pc, #172]	; (8006770 <tcp_fasttmr+0xc0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80066c8:	e048      	b.n	800675c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7f5a      	ldrb	r2, [r3, #29]
 80066ce:	4b27      	ldr	r3, [pc, #156]	; (800676c <tcp_fasttmr+0xbc>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d03f      	beq.n	8006756 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80066d6:	4b25      	ldr	r3, [pc, #148]	; (800676c <tcp_fasttmr+0xbc>)
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7e9b      	ldrb	r3, [r3, #26]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d010      	beq.n	800670c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7e9b      	ldrb	r3, [r3, #26]
 80066ee:	f043 0302 	orr.w	r3, r3, #2
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f003 f85f 	bl	80097bc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7e9b      	ldrb	r3, [r3, #26]
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	b2da      	uxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7e9b      	ldrb	r3, [r3, #26]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7e9b      	ldrb	r3, [r3, #26]
 800671c:	f023 0308 	bic.w	r3, r3, #8
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fb1e 	bl	8005d68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800673a:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <tcp_fasttmr+0xc4>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f819 	bl	8006778 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <tcp_fasttmr+0xc4>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d000      	beq.n	8006750 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800674e:	e7b8      	b.n	80066c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e002      	b.n	800675c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1b3      	bne.n	80066ca <tcp_fasttmr+0x1a>
    }
  }
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200000da 	.word	0x200000da
 8006770:	20006cd4 	.word	0x20006cd4
 8006774:	20006cd0 	.word	0x20006cd0

08006778 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <tcp_process_refused_data+0x3e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6918      	ldr	r0, [r3, #16]
 80067a8:	2300      	movs	r3, #0
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	47a0      	blx	r4
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	e007      	b.n	80067c6 <tcp_process_refused_data+0x4e>
 80067b6:	2300      	movs	r3, #0
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	2000      	movs	r0, #0
 80067be:	f000 f88c 	bl	80068da <tcp_recv_null>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80067c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d12a      	bne.n	8006824 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d033      	beq.n	8006840 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80067e0:	d005      	beq.n	80067ee <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e6:	3301      	adds	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <tcp_process_refused_data+0x98>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6918      	ldr	r0, [r3, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	2200      	movs	r2, #0
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	47a0      	blx	r4
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
 800680e:	e001      	b.n	8006814 <tcp_process_refused_data+0x9c>
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006818:	f113 0f0d 	cmn.w	r3, #13
 800681c:	d110      	bne.n	8006840 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800681e:	f06f 030c 	mvn.w	r3, #12
 8006822:	e00e      	b.n	8006842 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006828:	f113 0f0d 	cmn.w	r3, #13
 800682c:	d102      	bne.n	8006834 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800682e:	f06f 030c 	mvn.w	r3, #12
 8006832:	e006      	b.n	8006842 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800683a:	f06f 0304 	mvn.w	r3, #4
 800683e:	e000      	b.n	8006842 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}

0800684a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006852:	e007      	b.n	8006864 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f809 	bl	8006872 <tcp_seg_free>
    seg = next;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f4      	bne.n	8006854 <tcp_segs_free+0xa>
  }
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe fe99 	bl	80055c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	2003      	movs	r0, #3
 8006896:	f7fe f96b 	bl	8004b70 <memp_free>
  }
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80068aa:	2003      	movs	r0, #3
 80068ac:	f7fe f914 	bl	8004ad8 <memp_malloc>
 80068b0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <tcp_seg_copy+0x1a>
    return NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e00a      	b.n	80068d2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80068bc:	2210      	movs	r2, #16
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f006 fb2a 	bl	800cf1a <memcpy>
  pbuf_ref(cseg->p);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff26 	bl	800571c <pbuf_ref>
  return cseg;
 80068d0:	68fb      	ldr	r3, [r7, #12]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	891b      	ldrh	r3, [r3, #8]
 80068f2:	4619      	mov	r1, r3
 80068f4:	68b8      	ldr	r0, [r7, #8]
 80068f6:	f7ff fbc1 	bl	800607c <tcp_recved>
    pbuf_free(p);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe fe62 	bl	80055c4 <pbuf_free>
 8006900:	e008      	b.n	8006914 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f7ff fa92 	bl	8005e34 <tcp_close>
 8006910:	4603      	mov	r3, r0
 8006912:	e000      	b.n	8006916 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800692a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692e:	2b00      	cmp	r3, #0
 8006930:	db01      	blt.n	8006936 <tcp_kill_prio+0x16>
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	e000      	b.n	8006938 <tcp_kill_prio+0x18>
 8006936:	237f      	movs	r3, #127	; 0x7f
 8006938:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006942:	4b16      	ldr	r3, [pc, #88]	; (800699c <tcp_kill_prio+0x7c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e01a      	b.n	8006980 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	7d5b      	ldrb	r3, [r3, #21]
 800694e:	7afa      	ldrb	r2, [r7, #11]
 8006950:	429a      	cmp	r2, r3
 8006952:	d312      	bcc.n	800697a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <tcp_kill_prio+0x80>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d80a      	bhi.n	800697a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <tcp_kill_prio+0x80>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	7d5b      	ldrb	r3, [r3, #21]
 8006978:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e1      	bne.n	800694a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800698c:	6938      	ldr	r0, [r7, #16]
 800698e:	f7ff fb1b 	bl	8005fc8 <tcp_abort>
  }
}
 8006992:	bf00      	nop
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20006cd4 	.word	0x20006cd4
 80069a0:	20006cd8 	.word	0x20006cd8

080069a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d009      	beq.n	80069c8 <tcp_kill_state+0x24>
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b09      	cmp	r3, #9
 80069b8:	d006      	beq.n	80069c8 <tcp_kill_state+0x24>
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <tcp_kill_state+0x80>)
 80069bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069c0:	4919      	ldr	r1, [pc, #100]	; (8006a28 <tcp_kill_state+0x84>)
 80069c2:	481a      	ldr	r0, [pc, #104]	; (8006a2c <tcp_kill_state+0x88>)
 80069c4:	f006 fabc 	bl	800cf40 <iprintf>

  inactivity = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <tcp_kill_state+0x8c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	e017      	b.n	8006a08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	7d1b      	ldrb	r3, [r3, #20]
 80069dc:	79fa      	ldrb	r2, [r7, #7]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10f      	bne.n	8006a02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <tcp_kill_state+0x90>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d807      	bhi.n	8006a02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <tcp_kill_state+0x90>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e4      	bne.n	80069d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006a14:	2100      	movs	r1, #0
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f7ff fa24 	bl	8005e64 <tcp_abandon>
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	0800e654 	.word	0x0800e654
 8006a28:	0800e964 	.word	0x0800e964
 8006a2c:	0800e690 	.word	0x0800e690
 8006a30:	20006cd4 	.word	0x20006cd4
 8006a34:	20006cd8 	.word	0x20006cd8

08006a38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <tcp_kill_timewait+0x58>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e012      	b.n	8006a74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <tcp_kill_timewait+0x5c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d807      	bhi.n	8006a6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <tcp_kill_timewait+0x5c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e9      	bne.n	8006a4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f7ff faa1 	bl	8005fc8 <tcp_abort>
  }
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20006ce4 	.word	0x20006ce4
 8006a94:	20006cd8 	.word	0x20006cd8

08006a98 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	f7fe f818 	bl	8004ad8 <memp_malloc>
 8006aa8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d124      	bne.n	8006afa <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006ab0:	f7ff ffc2 	bl	8006a38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f7fe f80f 	bl	8004ad8 <memp_malloc>
 8006aba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d11b      	bne.n	8006afa <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006ac2:	2009      	movs	r0, #9
 8006ac4:	f7ff ff6e 	bl	80069a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fe f805 	bl	8004ad8 <memp_malloc>
 8006ace:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d111      	bne.n	8006afa <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006ad6:	2008      	movs	r0, #8
 8006ad8:	f7ff ff64 	bl	80069a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006adc:	2001      	movs	r0, #1
 8006ade:	f7fd fffb 	bl	8004ad8 <memp_malloc>
 8006ae2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d107      	bne.n	8006afa <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff ff17 	bl	8006920 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006af2:	2001      	movs	r0, #1
 8006af4:	f7fd fff0 	bl	8004ad8 <memp_malloc>
 8006af8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d03f      	beq.n	8006b80 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006b00:	2298      	movs	r2, #152	; 0x98
 8006b02:	2100      	movs	r1, #0
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f006 fa13 	bl	800cf30 <memset>
    pcb->prio = prio;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	79fa      	ldrb	r2, [r7, #7]
 8006b0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	22ff      	movs	r2, #255	; 0xff
 8006b2e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006b36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2206      	movs	r2, #6
 8006b44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <tcp_alloc+0xf4>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <tcp_alloc+0xf8>)
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006b6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <tcp_alloc+0xfc>)
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <tcp_alloc+0x100>)
 8006b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20006cd8 	.word	0x20006cd8
 8006b90:	200000da 	.word	0x200000da
 8006b94:	080068db 	.word	0x080068db
 8006b98:	006ddd00 	.word	0x006ddd00

08006b9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	7d1b      	ldrb	r3, [r3, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d034      	beq.n	8006c16 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006bb0:	2b0a      	cmp	r3, #10
 8006bb2:	d030      	beq.n	8006c16 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d02c      	beq.n	8006c16 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fcfb 	bl	80055c4 <pbuf_free>
      pcb->refused_data = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fe36 	bl	800684a <tcp_segs_free>
    pcb->ooseq = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fe2a 	bl	800684a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fe25 	bl	800684a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	669a      	str	r2, [r3, #104]	; 0x68
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d105      	bne.n	8006c40 <tcp_pcb_remove+0x20>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e013      	b.n	8006c68 <tcp_pcb_remove+0x48>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e00c      	b.n	8006c62 <tcp_pcb_remove+0x42>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d104      	bne.n	8006c5c <tcp_pcb_remove+0x3c>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	e005      	b.n	8006c68 <tcp_pcb_remove+0x48>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ef      	bne.n	8006c48 <tcp_pcb_remove+0x28>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006c6e:	6838      	ldr	r0, [r7, #0]
 8006c70:	f7ff ff94 	bl	8006b9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	7d1b      	ldrb	r3, [r3, #20]
 8006c78:	2b0a      	cmp	r3, #10
 8006c7a:	d013      	beq.n	8006ca4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00f      	beq.n	8006ca4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	7e9b      	ldrb	r3, [r3, #26]
 8006c88:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7e9b      	ldrb	r3, [r3, #26]
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006c9e:	6838      	ldr	r0, [r7, #0]
 8006ca0:	f002 fd8c 	bl	80097bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	7d1b      	ldrb	r3, [r3, #20]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d020      	beq.n	8006cee <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <tcp_pcb_remove+0xa2>
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <tcp_pcb_remove+0xe4>)
 8006cb6:	f240 7253 	movw	r2, #1875	; 0x753
 8006cba:	4913      	ldr	r1, [pc, #76]	; (8006d08 <tcp_pcb_remove+0xe8>)
 8006cbc:	4813      	ldr	r0, [pc, #76]	; (8006d0c <tcp_pcb_remove+0xec>)
 8006cbe:	f006 f93f 	bl	800cf40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <tcp_pcb_remove+0xb8>
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <tcp_pcb_remove+0xe4>)
 8006ccc:	f240 7254 	movw	r2, #1876	; 0x754
 8006cd0:	490f      	ldr	r1, [pc, #60]	; (8006d10 <tcp_pcb_remove+0xf0>)
 8006cd2:	480e      	ldr	r0, [pc, #56]	; (8006d0c <tcp_pcb_remove+0xec>)
 8006cd4:	f006 f934 	bl	800cf40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <tcp_pcb_remove+0xce>
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <tcp_pcb_remove+0xe4>)
 8006ce2:	f240 7256 	movw	r2, #1878	; 0x756
 8006ce6:	490b      	ldr	r1, [pc, #44]	; (8006d14 <tcp_pcb_remove+0xf4>)
 8006ce8:	4808      	ldr	r0, [pc, #32]	; (8006d0c <tcp_pcb_remove+0xec>)
 8006cea:	f006 f929 	bl	800cf40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	0800e654 	.word	0x0800e654
 8006d08:	0800ea0c 	.word	0x0800ea0c
 8006d0c:	0800e690 	.word	0x0800e690
 8006d10:	0800ea24 	.word	0x0800ea24
 8006d14:	0800ea40 	.word	0x0800ea40

08006d18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <tcp_next_iss+0x28>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <tcp_next_iss+0x2c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4413      	add	r3, r2
 8006d2a:	4a05      	ldr	r2, [pc, #20]	; (8006d40 <tcp_next_iss+0x28>)
 8006d2c:	6013      	str	r3, [r2, #0]
  return iss;
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <tcp_next_iss+0x28>)
 8006d30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	2000001c 	.word	0x2000001c
 8006d44:	20006cd8 	.word	0x20006cd8

08006d48 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	f004 ff49 	bl	800bbec <ip4_route>
 8006d5a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	e010      	b.n	8006d88 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006d6a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006d74:	897b      	ldrh	r3, [r7, #10]
 8006d76:	3b28      	subs	r3, #40	; 0x28
 8006d78:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006d7a:	893a      	ldrh	r2, [r7, #8]
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bf28      	it	cs
 8006d82:	4613      	movcs	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8006d86:	88fb      	ldrh	r3, [r7, #6]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006d9e:	e011      	b.n	8006dc4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d108      	bne.n	8006dbe <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff f908 	bl	8005fc8 <tcp_abort>
      pcb = next;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1ea      	bne.n	8006da0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02c      	beq.n	8006e3e <tcp_netif_ip_addr_changed+0x6a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d028      	beq.n	8006e3e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006dec:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <tcp_netif_ip_addr_changed+0x74>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff ffcc 	bl	8006d90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <tcp_netif_ip_addr_changed+0x78>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff ffc6 	bl	8006d90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d019      	beq.n	8006e3e <tcp_netif_ip_addr_changed+0x6a>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d015      	beq.n	8006e3e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006e12:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <tcp_netif_ip_addr_changed+0x7c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e00e      	b.n	8006e38 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d103      	bne.n	8006e34 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1ed      	bne.n	8006e1a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20006cd4 	.word	0x20006cd4
 8006e4c:	20006ce0 	.word	0x20006ce0
 8006e50:	20006cdc 	.word	0x20006cdc

08006e54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b08b      	sub	sp, #44	; 0x2c
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4a82      	ldr	r2, [pc, #520]	; (800706c <tcp_input+0x218>)
 8006e64:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	895b      	ldrh	r3, [r3, #10]
 8006e6a:	2b13      	cmp	r3, #19
 8006e6c:	f240 838a 	bls.w	8007584 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006e70:	4b7f      	ldr	r3, [pc, #508]	; (8007070 <tcp_input+0x21c>)
 8006e72:	695a      	ldr	r2, [r3, #20]
 8006e74:	4b7e      	ldr	r3, [pc, #504]	; (8007070 <tcp_input+0x21c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f005 f930 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 8380 	bne.w	8007588 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006e88:	4b79      	ldr	r3, [pc, #484]	; (8007070 <tcp_input+0x21c>)
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006e90:	2be0      	cmp	r3, #224	; 0xe0
 8006e92:	f000 8379 	beq.w	8007588 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006e96:	4b75      	ldr	r3, [pc, #468]	; (800706c <tcp_input+0x218>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	899b      	ldrh	r3, [r3, #12]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd fa6b 	bl	800437a <lwip_htons>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	0b1b      	lsrs	r3, r3, #12
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006eb0:	7cbb      	ldrb	r3, [r7, #18]
 8006eb2:	2b13      	cmp	r3, #19
 8006eb4:	f240 8368 	bls.w	8007588 <tcp_input+0x734>
 8006eb8:	7cbb      	ldrb	r3, [r7, #18]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	891b      	ldrh	r3, [r3, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	f200 8361 	bhi.w	8007588 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006ec6:	7cbb      	ldrb	r3, [r7, #18]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b14      	subs	r3, #20
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	4b69      	ldr	r3, [pc, #420]	; (8007074 <tcp_input+0x220>)
 8006ed0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006ed2:	4b69      	ldr	r3, [pc, #420]	; (8007078 <tcp_input+0x224>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	895a      	ldrh	r2, [r3, #10]
 8006edc:	7cbb      	ldrb	r3, [r7, #18]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d30d      	bcc.n	8006f00 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006ee4:	4b63      	ldr	r3, [pc, #396]	; (8007074 <tcp_input+0x220>)
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	4b64      	ldr	r3, [pc, #400]	; (800707c <tcp_input+0x228>)
 8006eea:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006eec:	7cbb      	ldrb	r3, [r7, #18]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	425b      	negs	r3, r3
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	b21b      	sxth	r3, r3
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7fe fb3f 	bl	800557c <pbuf_header>
 8006efe:	e055      	b.n	8006fac <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <tcp_input+0xc0>
 8006f08:	4b5d      	ldr	r3, [pc, #372]	; (8007080 <tcp_input+0x22c>)
 8006f0a:	22b2      	movs	r2, #178	; 0xb2
 8006f0c:	495d      	ldr	r1, [pc, #372]	; (8007084 <tcp_input+0x230>)
 8006f0e:	485e      	ldr	r0, [pc, #376]	; (8007088 <tcp_input+0x234>)
 8006f10:	f006 f816 	bl	800cf40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8006f14:	f06f 0113 	mvn.w	r1, #19
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe fb2f 	bl	800557c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	895a      	ldrh	r2, [r3, #10]
 8006f22:	4b56      	ldr	r3, [pc, #344]	; (800707c <tcp_input+0x228>)
 8006f24:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006f26:	4b53      	ldr	r3, [pc, #332]	; (8007074 <tcp_input+0x220>)
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	4b54      	ldr	r3, [pc, #336]	; (800707c <tcp_input+0x228>)
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006f32:	4b52      	ldr	r3, [pc, #328]	; (800707c <tcp_input+0x228>)
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	425b      	negs	r3, r3
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	b21b      	sxth	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fe fb1c 	bl	800557c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	8a3a      	ldrh	r2, [r7, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f200 831d 	bhi.w	800758c <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a47      	ldr	r2, [pc, #284]	; (8007078 <tcp_input+0x224>)
 8006f5a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	8a3b      	ldrh	r3, [r7, #16]
 8006f62:	425b      	negs	r3, r3
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	b21b      	sxth	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe fb06 	bl	800557c <pbuf_header>
    p->tot_len -= opt2len;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	891a      	ldrh	r2, [r3, #8]
 8006f74:	8a3b      	ldrh	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	895b      	ldrh	r3, [r3, #10]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <tcp_input+0x13e>
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <tcp_input+0x22c>)
 8006f88:	22cf      	movs	r2, #207	; 0xcf
 8006f8a:	4940      	ldr	r1, [pc, #256]	; (800708c <tcp_input+0x238>)
 8006f8c:	483e      	ldr	r0, [pc, #248]	; (8007088 <tcp_input+0x234>)
 8006f8e:	f005 ffd7 	bl	800cf40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	891a      	ldrh	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	891b      	ldrh	r3, [r3, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d005      	beq.n	8006fac <tcp_input+0x158>
 8006fa0:	4b37      	ldr	r3, [pc, #220]	; (8007080 <tcp_input+0x22c>)
 8006fa2:	22d0      	movs	r2, #208	; 0xd0
 8006fa4:	493a      	ldr	r1, [pc, #232]	; (8007090 <tcp_input+0x23c>)
 8006fa6:	4838      	ldr	r0, [pc, #224]	; (8007088 <tcp_input+0x234>)
 8006fa8:	f005 ffca 	bl	800cf40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006fac:	4b2f      	ldr	r3, [pc, #188]	; (800706c <tcp_input+0x218>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	4b2d      	ldr	r3, [pc, #180]	; (800706c <tcp_input+0x218>)
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fd f9de 	bl	800437a <lwip_htons>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006fc2:	4b2a      	ldr	r3, [pc, #168]	; (800706c <tcp_input+0x218>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	885b      	ldrh	r3, [r3, #2]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	4b28      	ldr	r3, [pc, #160]	; (800706c <tcp_input+0x218>)
 8006fcc:	681c      	ldr	r4, [r3, #0]
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fd f9d3 	bl	800437a <lwip_htons>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006fd8:	4b24      	ldr	r3, [pc, #144]	; (800706c <tcp_input+0x218>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	4b23      	ldr	r3, [pc, #140]	; (800706c <tcp_input+0x218>)
 8006fe0:	681c      	ldr	r4, [r3, #0]
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fd f9d7 	bl	8004396 <lwip_htonl>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	6063      	str	r3, [r4, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	4a29      	ldr	r2, [pc, #164]	; (8007094 <tcp_input+0x240>)
 8006ff0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006ff2:	4b1e      	ldr	r3, [pc, #120]	; (800706c <tcp_input+0x218>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	4b1c      	ldr	r3, [pc, #112]	; (800706c <tcp_input+0x218>)
 8006ffa:	681c      	ldr	r4, [r3, #0]
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7fd f9ca 	bl	8004396 <lwip_htonl>
 8007002:	4603      	mov	r3, r0
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <tcp_input+0x244>)
 800700a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800700c:	4b17      	ldr	r3, [pc, #92]	; (800706c <tcp_input+0x218>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	89db      	ldrh	r3, [r3, #14]
 8007012:	b29a      	uxth	r2, r3
 8007014:	4b15      	ldr	r3, [pc, #84]	; (800706c <tcp_input+0x218>)
 8007016:	681c      	ldr	r4, [r3, #0]
 8007018:	4610      	mov	r0, r2
 800701a:	f7fd f9ae 	bl	800437a <lwip_htons>
 800701e:	4603      	mov	r3, r0
 8007020:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007022:	4b12      	ldr	r3, [pc, #72]	; (800706c <tcp_input+0x218>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	899b      	ldrh	r3, [r3, #12]
 8007028:	b29b      	uxth	r3, r3
 800702a:	4618      	mov	r0, r3
 800702c:	f7fd f9a5 	bl	800437a <lwip_htons>
 8007030:	4603      	mov	r3, r0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b18      	ldr	r3, [pc, #96]	; (800709c <tcp_input+0x248>)
 800703c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	891a      	ldrh	r2, [r3, #8]
 8007042:	4b16      	ldr	r3, [pc, #88]	; (800709c <tcp_input+0x248>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	b29b      	uxth	r3, r3
 8007056:	4413      	add	r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <tcp_input+0x24c>)
 800705c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <tcp_input+0x250>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	e082      	b.n	8007170 <tcp_input+0x31c>
 800706a:	bf00      	nop
 800706c:	200000ec 	.word	0x200000ec
 8007070:	200037a4 	.word	0x200037a4
 8007074:	200000f0 	.word	0x200000f0
 8007078:	200000f4 	.word	0x200000f4
 800707c:	200000f2 	.word	0x200000f2
 8007080:	0800ea58 	.word	0x0800ea58
 8007084:	0800ea8c 	.word	0x0800ea8c
 8007088:	0800ea9c 	.word	0x0800ea9c
 800708c:	0800eac4 	.word	0x0800eac4
 8007090:	0800ead0 	.word	0x0800ead0
 8007094:	200000fc 	.word	0x200000fc
 8007098:	20000100 	.word	0x20000100
 800709c:	20000108 	.word	0x20000108
 80070a0:	20000106 	.word	0x20000106
 80070a4:	20006cd4 	.word	0x20006cd4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	7d1b      	ldrb	r3, [r3, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d105      	bne.n	80070bc <tcp_input+0x268>
 80070b0:	4b8f      	ldr	r3, [pc, #572]	; (80072f0 <tcp_input+0x49c>)
 80070b2:	22e2      	movs	r2, #226	; 0xe2
 80070b4:	498f      	ldr	r1, [pc, #572]	; (80072f4 <tcp_input+0x4a0>)
 80070b6:	4890      	ldr	r0, [pc, #576]	; (80072f8 <tcp_input+0x4a4>)
 80070b8:	f005 ff42 	bl	800cf40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	7d1b      	ldrb	r3, [r3, #20]
 80070c0:	2b0a      	cmp	r3, #10
 80070c2:	d105      	bne.n	80070d0 <tcp_input+0x27c>
 80070c4:	4b8a      	ldr	r3, [pc, #552]	; (80072f0 <tcp_input+0x49c>)
 80070c6:	22e3      	movs	r2, #227	; 0xe3
 80070c8:	498c      	ldr	r1, [pc, #560]	; (80072fc <tcp_input+0x4a8>)
 80070ca:	488b      	ldr	r0, [pc, #556]	; (80072f8 <tcp_input+0x4a4>)
 80070cc:	f005 ff38 	bl	800cf40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	7d1b      	ldrb	r3, [r3, #20]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d105      	bne.n	80070e4 <tcp_input+0x290>
 80070d8:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <tcp_input+0x49c>)
 80070da:	22e4      	movs	r2, #228	; 0xe4
 80070dc:	4988      	ldr	r1, [pc, #544]	; (8007300 <tcp_input+0x4ac>)
 80070de:	4886      	ldr	r0, [pc, #536]	; (80072f8 <tcp_input+0x4a4>)
 80070e0:	f005 ff2e 	bl	800cf40 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	8b1a      	ldrh	r2, [r3, #24]
 80070e8:	4b86      	ldr	r3, [pc, #536]	; (8007304 <tcp_input+0x4b0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d138      	bne.n	8007166 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	8ada      	ldrh	r2, [r3, #22]
 80070f8:	4b82      	ldr	r3, [pc, #520]	; (8007304 <tcp_input+0x4b0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	885b      	ldrh	r3, [r3, #2]
 80070fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007100:	429a      	cmp	r2, r3
 8007102:	d130      	bne.n	8007166 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	4b7f      	ldr	r3, [pc, #508]	; (8007308 <tcp_input+0x4b4>)
 800710a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800710c:	429a      	cmp	r2, r3
 800710e:	d12a      	bne.n	8007166 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b7c      	ldr	r3, [pc, #496]	; (8007308 <tcp_input+0x4b4>)
 8007116:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007118:	429a      	cmp	r2, r3
 800711a:	d124      	bne.n	8007166 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	429a      	cmp	r2, r3
 8007124:	d105      	bne.n	8007132 <tcp_input+0x2de>
 8007126:	4b72      	ldr	r3, [pc, #456]	; (80072f0 <tcp_input+0x49c>)
 8007128:	22ec      	movs	r2, #236	; 0xec
 800712a:	4978      	ldr	r1, [pc, #480]	; (800730c <tcp_input+0x4b8>)
 800712c:	4872      	ldr	r0, [pc, #456]	; (80072f8 <tcp_input+0x4a4>)
 800712e:	f005 ff07 	bl	800cf40 <iprintf>
      if (prev != NULL) {
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <tcp_input+0x2fa>
        prev->next = pcb->next;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007140:	4b73      	ldr	r3, [pc, #460]	; (8007310 <tcp_input+0x4bc>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007148:	4a71      	ldr	r2, [pc, #452]	; (8007310 <tcp_input+0x4bc>)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	429a      	cmp	r2, r3
 8007156:	d10f      	bne.n	8007178 <tcp_input+0x324>
 8007158:	4b65      	ldr	r3, [pc, #404]	; (80072f0 <tcp_input+0x49c>)
 800715a:	22f4      	movs	r2, #244	; 0xf4
 800715c:	496d      	ldr	r1, [pc, #436]	; (8007314 <tcp_input+0x4c0>)
 800715e:	4866      	ldr	r0, [pc, #408]	; (80072f8 <tcp_input+0x4a4>)
 8007160:	f005 feee 	bl	800cf40 <iprintf>
      break;
 8007164:	e008      	b.n	8007178 <tcp_input+0x324>
    }
    prev = pcb;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d198      	bne.n	80070a8 <tcp_input+0x254>
 8007176:	e000      	b.n	800717a <tcp_input+0x326>
      break;
 8007178:	bf00      	nop
  }

  if (pcb == NULL) {
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d173      	bne.n	8007268 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007180:	4b65      	ldr	r3, [pc, #404]	; (8007318 <tcp_input+0x4c4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	e02f      	b.n	80071e8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	7d1b      	ldrb	r3, [r3, #20]
 800718c:	2b0a      	cmp	r3, #10
 800718e:	d005      	beq.n	800719c <tcp_input+0x348>
 8007190:	4b57      	ldr	r3, [pc, #348]	; (80072f0 <tcp_input+0x49c>)
 8007192:	22fe      	movs	r2, #254	; 0xfe
 8007194:	4961      	ldr	r1, [pc, #388]	; (800731c <tcp_input+0x4c8>)
 8007196:	4858      	ldr	r0, [pc, #352]	; (80072f8 <tcp_input+0x4a4>)
 8007198:	f005 fed2 	bl	800cf40 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	8b1a      	ldrh	r2, [r3, #24]
 80071a0:	4b58      	ldr	r3, [pc, #352]	; (8007304 <tcp_input+0x4b0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d11a      	bne.n	80071e2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	8ada      	ldrh	r2, [r3, #22]
 80071b0:	4b54      	ldr	r3, [pc, #336]	; (8007304 <tcp_input+0x4b0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	885b      	ldrh	r3, [r3, #2]
 80071b6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d112      	bne.n	80071e2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4b51      	ldr	r3, [pc, #324]	; (8007308 <tcp_input+0x4b4>)
 80071c2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d10c      	bne.n	80071e2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b4e      	ldr	r3, [pc, #312]	; (8007308 <tcp_input+0x4b4>)
 80071ce:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d106      	bne.n	80071e2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80071d4:	69f8      	ldr	r0, [r7, #28]
 80071d6:	f000 fb15 	bl	8007804 <tcp_timewait_input>
        pbuf_free(p);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fe f9f2 	bl	80055c4 <pbuf_free>
        return;
 80071e0:	e1da      	b.n	8007598 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cc      	bne.n	8007188 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80071f2:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <tcp_input+0x4cc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	e019      	b.n	800722e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	8ada      	ldrh	r2, [r3, #22]
 80071fe:	4b41      	ldr	r3, [pc, #260]	; (8007304 <tcp_input+0x4b0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	885b      	ldrh	r3, [r3, #2]
 8007204:	b29b      	uxth	r3, r3
 8007206:	429a      	cmp	r2, r3
 8007208:	d10c      	bne.n	8007224 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b3e      	ldr	r3, [pc, #248]	; (8007308 <tcp_input+0x4b4>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	429a      	cmp	r2, r3
 8007214:	d00f      	beq.n	8007236 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <tcp_input+0x3e4>
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e2      	bne.n	80071fa <tcp_input+0x3a6>
 8007234:	e000      	b.n	8007238 <tcp_input+0x3e4>
            break;
 8007236:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d014      	beq.n	8007268 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800724c:	4b34      	ldr	r3, [pc, #208]	; (8007320 <tcp_input+0x4cc>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007254:	4a32      	ldr	r2, [pc, #200]	; (8007320 <tcp_input+0x4cc>)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800725a:	6978      	ldr	r0, [r7, #20]
 800725c:	f000 f9f0 	bl	8007640 <tcp_listen_input>
      pbuf_free(p);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe f9af 	bl	80055c4 <pbuf_free>
      return;
 8007266:	e197      	b.n	8007598 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8164 	beq.w	8007538 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007270:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <tcp_input+0x4d0>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	891a      	ldrh	r2, [r3, #8]
 800727a:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <tcp_input+0x4d0>)
 800727c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <tcp_input+0x4d0>)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <tcp_input+0x4b0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a26      	ldr	r2, [pc, #152]	; (8007324 <tcp_input+0x4d0>)
 800728a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800728c:	4b26      	ldr	r3, [pc, #152]	; (8007328 <tcp_input+0x4d4>)
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007292:	4b26      	ldr	r3, [pc, #152]	; (800732c <tcp_input+0x4d8>)
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <tcp_input+0x4dc>)
 800729a:	2200      	movs	r2, #0
 800729c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800729e:	4b25      	ldr	r3, [pc, #148]	; (8007334 <tcp_input+0x4e0>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d006      	beq.n	80072b8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	7b5b      	ldrb	r3, [r3, #13]
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d03d      	beq.n	800733c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072c0:	69f8      	ldr	r0, [r7, #28]
 80072c2:	f7ff fa59 	bl	8006778 <tcp_process_refused_data>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f113 0f0d 	cmn.w	r3, #13
 80072cc:	d007      	beq.n	80072de <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d032      	beq.n	800733c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80072d6:	4b18      	ldr	r3, [pc, #96]	; (8007338 <tcp_input+0x4e4>)
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d02e      	beq.n	800733c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f040 8108 	bne.w	80074f8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80072e8:	69f8      	ldr	r0, [r7, #28]
 80072ea:	f002 fa0b 	bl	8009704 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80072ee:	e103      	b.n	80074f8 <tcp_input+0x6a4>
 80072f0:	0800ea58 	.word	0x0800ea58
 80072f4:	0800eaf0 	.word	0x0800eaf0
 80072f8:	0800ea9c 	.word	0x0800ea9c
 80072fc:	0800eb18 	.word	0x0800eb18
 8007300:	0800eb44 	.word	0x0800eb44
 8007304:	200000ec 	.word	0x200000ec
 8007308:	200037a4 	.word	0x200037a4
 800730c:	0800eb6c 	.word	0x0800eb6c
 8007310:	20006cd4 	.word	0x20006cd4
 8007314:	0800eb98 	.word	0x0800eb98
 8007318:	20006ce4 	.word	0x20006ce4
 800731c:	0800ebc4 	.word	0x0800ebc4
 8007320:	20006cdc 	.word	0x20006cdc
 8007324:	200000dc 	.word	0x200000dc
 8007328:	2000010c 	.word	0x2000010c
 800732c:	20000109 	.word	0x20000109
 8007330:	20000104 	.word	0x20000104
 8007334:	20000108 	.word	0x20000108
 8007338:	20000106 	.word	0x20000106
      }
    }
    tcp_input_pcb = pcb;
 800733c:	4a98      	ldr	r2, [pc, #608]	; (80075a0 <tcp_input+0x74c>)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007342:	69f8      	ldr	r0, [r7, #28]
 8007344:	f000 fac6 	bl	80078d4 <tcp_process>
 8007348:	4603      	mov	r3, r0
 800734a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800734c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007350:	f113 0f0d 	cmn.w	r3, #13
 8007354:	f000 80d2 	beq.w	80074fc <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8007358:	4b92      	ldr	r3, [pc, #584]	; (80075a4 <tcp_input+0x750>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <tcp_input+0x52c>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	6912      	ldr	r2, [r2, #16]
 8007378:	f06f 010d 	mvn.w	r1, #13
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007380:	69f9      	ldr	r1, [r7, #28]
 8007382:	4889      	ldr	r0, [pc, #548]	; (80075a8 <tcp_input+0x754>)
 8007384:	f7ff fc4c 	bl	8006c20 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	2001      	movs	r0, #1
 800738c:	f7fd fbf0 	bl	8004b70 <memp_free>
 8007390:	e0bf      	b.n	8007512 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007396:	4b85      	ldr	r3, [pc, #532]	; (80075ac <tcp_input+0x758>)
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01b      	beq.n	80073d6 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800739e:	4b83      	ldr	r3, [pc, #524]	; (80075ac <tcp_input+0x758>)
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <tcp_input+0x56c>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	6910      	ldr	r0, [r2, #16]
 80073b4:	89fa      	ldrh	r2, [r7, #14]
 80073b6:	69f9      	ldr	r1, [r7, #28]
 80073b8:	4798      	blx	r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	74fb      	strb	r3, [r7, #19]
 80073be:	e001      	b.n	80073c4 <tcp_input+0x570>
 80073c0:	2300      	movs	r3, #0
 80073c2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80073c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073c8:	f113 0f0d 	cmn.w	r3, #13
 80073cc:	f000 8098 	beq.w	8007500 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80073d0:	4b76      	ldr	r3, [pc, #472]	; (80075ac <tcp_input+0x758>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80073d6:	69f8      	ldr	r0, [r7, #28]
 80073d8:	f000 f900 	bl	80075dc <tcp_input_delayed_close>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 8090 	bne.w	8007504 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80073e4:	4b72      	ldr	r3, [pc, #456]	; (80075b0 <tcp_input+0x75c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d041      	beq.n	8007470 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <tcp_input+0x5ae>
 80073f4:	4b6f      	ldr	r3, [pc, #444]	; (80075b4 <tcp_input+0x760>)
 80073f6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80073fa:	496f      	ldr	r1, [pc, #444]	; (80075b8 <tcp_input+0x764>)
 80073fc:	486f      	ldr	r0, [pc, #444]	; (80075bc <tcp_input+0x768>)
 80073fe:	f005 fd9f 	bl	800cf40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	7e9b      	ldrb	r3, [r3, #26]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800740e:	4b68      	ldr	r3, [pc, #416]	; (80075b0 <tcp_input+0x75c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe f8d6 	bl	80055c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007418:	69f8      	ldr	r0, [r7, #28]
 800741a:	f7fe fdd5 	bl	8005fc8 <tcp_abort>
            goto aborted;
 800741e:	e078      	b.n	8007512 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00c      	beq.n	8007444 <tcp_input+0x5f0>
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	6918      	ldr	r0, [r3, #16]
 8007434:	4b5e      	ldr	r3, [pc, #376]	; (80075b0 <tcp_input+0x75c>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	2300      	movs	r3, #0
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	47a0      	blx	r4
 800743e:	4603      	mov	r3, r0
 8007440:	74fb      	strb	r3, [r7, #19]
 8007442:	e008      	b.n	8007456 <tcp_input+0x602>
 8007444:	4b5a      	ldr	r3, [pc, #360]	; (80075b0 <tcp_input+0x75c>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	2000      	movs	r0, #0
 800744e:	f7ff fa44 	bl	80068da <tcp_recv_null>
 8007452:	4603      	mov	r3, r0
 8007454:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007456:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800745a:	f113 0f0d 	cmn.w	r3, #13
 800745e:	d053      	beq.n	8007508 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007460:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007468:	4b51      	ldr	r3, [pc, #324]	; (80075b0 <tcp_input+0x75c>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007470:	4b4c      	ldr	r3, [pc, #304]	; (80075a4 <tcp_input+0x750>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d030      	beq.n	80074de <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007488:	7b5a      	ldrb	r2, [r3, #13]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748e:	f042 0220 	orr.w	r2, r2, #32
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	735a      	strb	r2, [r3, #13]
 8007496:	e022      	b.n	80074de <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074a0:	d005      	beq.n	80074ae <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	3301      	adds	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <tcp_input+0x67c>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	6918      	ldr	r0, [r3, #16]
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	69f9      	ldr	r1, [r7, #28]
 80074c8:	47a0      	blx	r4
 80074ca:	4603      	mov	r3, r0
 80074cc:	74fb      	strb	r3, [r7, #19]
 80074ce:	e001      	b.n	80074d4 <tcp_input+0x680>
 80074d0:	2300      	movs	r3, #0
 80074d2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80074d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074d8:	f113 0f0d 	cmn.w	r3, #13
 80074dc:	d016      	beq.n	800750c <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80074de:	4b30      	ldr	r3, [pc, #192]	; (80075a0 <tcp_input+0x74c>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80074e4:	69f8      	ldr	r0, [r7, #28]
 80074e6:	f000 f879 	bl	80075dc <tcp_input_delayed_close>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80074f0:	69f8      	ldr	r0, [r7, #28]
 80074f2:	f002 f963 	bl	80097bc <tcp_output>
 80074f6:	e00c      	b.n	8007512 <tcp_input+0x6be>
        goto aborted;
 80074f8:	bf00      	nop
 80074fa:	e00a      	b.n	8007512 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80074fc:	bf00      	nop
 80074fe:	e008      	b.n	8007512 <tcp_input+0x6be>
              goto aborted;
 8007500:	bf00      	nop
 8007502:	e006      	b.n	8007512 <tcp_input+0x6be>
          goto aborted;
 8007504:	bf00      	nop
 8007506:	e004      	b.n	8007512 <tcp_input+0x6be>
            goto aborted;
 8007508:	bf00      	nop
 800750a:	e002      	b.n	8007512 <tcp_input+0x6be>
              goto aborted;
 800750c:	bf00      	nop
 800750e:	e000      	b.n	8007512 <tcp_input+0x6be>
          goto aborted;
 8007510:	bf00      	nop
    tcp_input_pcb = NULL;
 8007512:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <tcp_input+0x74c>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <tcp_input+0x75c>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800751e:	4b28      	ldr	r3, [pc, #160]	; (80075c0 <tcp_input+0x76c>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d037      	beq.n	8007596 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <tcp_input+0x76c>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe f84a 	bl	80055c4 <pbuf_free>
      inseg.p = NULL;
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <tcp_input+0x76c>)
 8007532:	2200      	movs	r2, #0
 8007534:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007536:	e02e      	b.n	8007596 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007538:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <tcp_input+0x770>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	899b      	ldrh	r3, [r3, #12]
 800753e:	b29b      	uxth	r3, r3
 8007540:	4618      	mov	r0, r3
 8007542:	f7fc ff1a 	bl	800437a <lwip_htons>
 8007546:	4603      	mov	r3, r0
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d115      	bne.n	800757c <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007550:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <tcp_input+0x774>)
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <tcp_input+0x778>)
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <tcp_input+0x77c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007560:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <tcp_input+0x770>)
 8007562:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007568:	4a16      	ldr	r2, [pc, #88]	; (80075c4 <tcp_input+0x770>)
 800756a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800756c:	8812      	ldrh	r2, [r2, #0]
 800756e:	b292      	uxth	r2, r2
 8007570:	9201      	str	r2, [sp, #4]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <tcp_input+0x780>)
 8007576:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <tcp_input+0x784>)
 8007578:	f002 fbaa 	bl	8009cd0 <tcp_rst>
    pbuf_free(p);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fe f821 	bl	80055c4 <pbuf_free>
  return;
 8007582:	e008      	b.n	8007596 <tcp_input+0x742>
    goto dropped;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <tcp_input+0x73a>
dropped:
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <tcp_input+0x73a>
      goto dropped;
 800758c:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fe f818 	bl	80055c4 <pbuf_free>
 8007594:	e000      	b.n	8007598 <tcp_input+0x744>
  return;
 8007596:	bf00      	nop
}
 8007598:	3724      	adds	r7, #36	; 0x24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd90      	pop	{r4, r7, pc}
 800759e:	bf00      	nop
 80075a0:	20006ce8 	.word	0x20006ce8
 80075a4:	20000109 	.word	0x20000109
 80075a8:	20006cd4 	.word	0x20006cd4
 80075ac:	20000104 	.word	0x20000104
 80075b0:	2000010c 	.word	0x2000010c
 80075b4:	0800ea58 	.word	0x0800ea58
 80075b8:	0800ebf4 	.word	0x0800ebf4
 80075bc:	0800ea9c 	.word	0x0800ea9c
 80075c0:	200000dc 	.word	0x200000dc
 80075c4:	200000ec 	.word	0x200000ec
 80075c8:	20000100 	.word	0x20000100
 80075cc:	20000106 	.word	0x20000106
 80075d0:	200000fc 	.word	0x200000fc
 80075d4:	200037b4 	.word	0x200037b4
 80075d8:	200037b8 	.word	0x200037b8

080075dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80075e4:	4b14      	ldr	r3, [pc, #80]	; (8007638 <tcp_input_delayed_close+0x5c>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01d      	beq.n	800762c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7e9b      	ldrb	r3, [r3, #26]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <tcp_input_delayed_close+0x3c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6912      	ldr	r2, [r2, #16]
 8007610:	f06f 010e 	mvn.w	r1, #14
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4808      	ldr	r0, [pc, #32]	; (800763c <tcp_input_delayed_close+0x60>)
 800761c:	f7ff fb00 	bl	8006c20 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	2001      	movs	r0, #1
 8007624:	f7fd faa4 	bl	8004b70 <memp_free>
    return 1;
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000109 	.word	0x20000109
 800763c:	20006cd4 	.word	0x20006cd4

08007640 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007648:	4b64      	ldr	r3, [pc, #400]	; (80077dc <tcp_listen_input+0x19c>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	f040 80bc 	bne.w	80077ce <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007656:	4b61      	ldr	r3, [pc, #388]	; (80077dc <tcp_listen_input+0x19c>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b00      	cmp	r3, #0
 8007660:	d016      	beq.n	8007690 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <tcp_listen_input+0x1a0>)
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	4b5f      	ldr	r3, [pc, #380]	; (80077e4 <tcp_listen_input+0x1a4>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	4b5e      	ldr	r3, [pc, #376]	; (80077e8 <tcp_listen_input+0x1a8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007672:	4b5e      	ldr	r3, [pc, #376]	; (80077ec <tcp_listen_input+0x1ac>)
 8007674:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007676:	885b      	ldrh	r3, [r3, #2]
 8007678:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800767a:	4a5c      	ldr	r2, [pc, #368]	; (80077ec <tcp_listen_input+0x1ac>)
 800767c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	b292      	uxth	r2, r2
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4b5a      	ldr	r3, [pc, #360]	; (80077f0 <tcp_listen_input+0x1b0>)
 8007688:	4a5a      	ldr	r2, [pc, #360]	; (80077f4 <tcp_listen_input+0x1b4>)
 800768a:	f002 fb21 	bl	8009cd0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800768e:	e0a0      	b.n	80077d2 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8007690:	4b52      	ldr	r3, [pc, #328]	; (80077dc <tcp_listen_input+0x19c>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 809a 	beq.w	80077d2 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7d5b      	ldrb	r3, [r3, #21]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff f9f8 	bl	8006a98 <tcp_alloc>
 80076a8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d111      	bne.n	80076d4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <tcp_listen_input+0x8e>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6910      	ldr	r0, [r2, #16]
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	2100      	movs	r1, #0
 80076c6:	4798      	blx	r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]
      return;
 80076cc:	e082      	b.n	80077d4 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80076ce:	23f0      	movs	r3, #240	; 0xf0
 80076d0:	73bb      	strb	r3, [r7, #14]
      return;
 80076d2:	e07f      	b.n	80077d4 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80076d4:	4b48      	ldr	r3, [pc, #288]	; (80077f8 <tcp_listen_input+0x1b8>)
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80076dc:	4b46      	ldr	r3, [pc, #280]	; (80077f8 <tcp_listen_input+0x1b8>)
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8ada      	ldrh	r2, [r3, #22]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80076ec:	4b3f      	ldr	r3, [pc, #252]	; (80077ec <tcp_listen_input+0x1ac>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2203      	movs	r2, #3
 80076fc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80076fe:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <tcp_listen_input+0x1a8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007710:	6978      	ldr	r0, [r7, #20]
 8007712:	f7ff fb01 	bl	8006d18 <tcp_next_iss>
 8007716:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007730:	4b2d      	ldr	r3, [pc, #180]	; (80077e8 <tcp_listen_input+0x1a8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	1e5a      	subs	r2, r3, #1
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7a1b      	ldrb	r3, [r3, #8]
 800774c:	f003 030c 	and.w	r3, r3, #12
 8007750:	b2da      	uxtb	r2, r3
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007756:	4b29      	ldr	r3, [pc, #164]	; (80077fc <tcp_listen_input+0x1bc>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	60da      	str	r2, [r3, #12]
 800775e:	4a27      	ldr	r2, [pc, #156]	; (80077fc <tcp_listen_input+0x1bc>)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	f002 fd04 	bl	800a170 <tcp_timer_needed>
 8007768:	4b25      	ldr	r3, [pc, #148]	; (8007800 <tcp_listen_input+0x1c0>)
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800776e:	6978      	ldr	r0, [r7, #20]
 8007770:	f001 fd14 	bl	800919c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <tcp_listen_input+0x1ac>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	89db      	ldrh	r3, [r3, #14]
 800777a:	b29a      	uxth	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	3304      	adds	r3, #4
 8007796:	4619      	mov	r1, r3
 8007798:	4610      	mov	r0, r2
 800779a:	f7ff fad5 	bl	8006d48 <tcp_eff_send_mss_impl>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80077a6:	2112      	movs	r1, #18
 80077a8:	6978      	ldr	r0, [r7, #20]
 80077aa:	f001 feaf 	bl	800950c <tcp_enqueue_flags>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80077b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 80077ba:	2100      	movs	r1, #0
 80077bc:	6978      	ldr	r0, [r7, #20]
 80077be:	f7fe fb51 	bl	8005e64 <tcp_abandon>
      return;
 80077c2:	e007      	b.n	80077d4 <tcp_listen_input+0x194>
    tcp_output(npcb);
 80077c4:	6978      	ldr	r0, [r7, #20]
 80077c6:	f001 fff9 	bl	80097bc <tcp_output>
  return;
 80077ca:	bf00      	nop
 80077cc:	e001      	b.n	80077d2 <tcp_listen_input+0x192>
    return;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <tcp_listen_input+0x194>
  return;
 80077d2:	bf00      	nop
}
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000108 	.word	0x20000108
 80077e0:	20000100 	.word	0x20000100
 80077e4:	20000106 	.word	0x20000106
 80077e8:	200000fc 	.word	0x200000fc
 80077ec:	200000ec 	.word	0x200000ec
 80077f0:	200037b4 	.word	0x200037b4
 80077f4:	200037b8 	.word	0x200037b8
 80077f8:	200037a4 	.word	0x200037a4
 80077fc:	20006cd4 	.word	0x20006cd4
 8007800:	20006cd0 	.word	0x20006cd0

08007804 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af02      	add	r7, sp, #8
 800780a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800780c:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <tcp_timewait_input+0xb0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d147      	bne.n	80078a8 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007818:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <tcp_timewait_input+0xb0>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d027      	beq.n	8007874 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007824:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <tcp_timewait_input+0xb4>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	db2a      	blt.n	8007888 <tcp_timewait_input+0x84>
 8007832:	4b21      	ldr	r3, [pc, #132]	; (80078b8 <tcp_timewait_input+0xb4>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800783e:	440b      	add	r3, r1
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	dc20      	bgt.n	8007888 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007846:	4b1d      	ldr	r3, [pc, #116]	; (80078bc <tcp_timewait_input+0xb8>)
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <tcp_timewait_input+0xbc>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	4b19      	ldr	r3, [pc, #100]	; (80078b8 <tcp_timewait_input+0xb4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007856:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <tcp_timewait_input+0xc0>)
 8007858:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800785e:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <tcp_timewait_input+0xc0>)
 8007860:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007862:	8812      	ldrh	r2, [r2, #0]
 8007864:	b292      	uxth	r2, r2
 8007866:	9201      	str	r2, [sp, #4]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <tcp_timewait_input+0xc4>)
 800786c:	4a17      	ldr	r2, [pc, #92]	; (80078cc <tcp_timewait_input+0xc8>)
 800786e:	f002 fa2f 	bl	8009cd0 <tcp_rst>
      return;
 8007872:	e01c      	b.n	80078ae <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <tcp_timewait_input+0xb0>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <tcp_timewait_input+0xcc>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <tcp_timewait_input+0xbc>)
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	7e9b      	ldrb	r3, [r3, #26]
 8007894:	f043 0302 	orr.w	r3, r3, #2
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 ff8c 	bl	80097bc <tcp_output>
  }
  return;
 80078a4:	bf00      	nop
 80078a6:	e001      	b.n	80078ac <tcp_timewait_input+0xa8>
    return;
 80078a8:	bf00      	nop
 80078aa:	e000      	b.n	80078ae <tcp_timewait_input+0xaa>
  return;
 80078ac:	bf00      	nop
}
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000108 	.word	0x20000108
 80078b8:	200000fc 	.word	0x200000fc
 80078bc:	20000100 	.word	0x20000100
 80078c0:	20000106 	.word	0x20000106
 80078c4:	200000ec 	.word	0x200000ec
 80078c8:	200037b4 	.word	0x200037b4
 80078cc:	200037b8 	.word	0x200037b8
 80078d0:	20006cd8 	.word	0x20006cd8

080078d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	; 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80078e4:	4ba4      	ldr	r3, [pc, #656]	; (8007b78 <tcp_process+0x2a4>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d04e      	beq.n	800798e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7d1b      	ldrb	r3, [r3, #20]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d108      	bne.n	800790a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078fc:	4b9f      	ldr	r3, [pc, #636]	; (8007b7c <tcp_process+0x2a8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d123      	bne.n	800794c <tcp_process+0x78>
        acceptable = 1;
 8007904:	2301      	movs	r3, #1
 8007906:	76fb      	strb	r3, [r7, #27]
 8007908:	e020      	b.n	800794c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790e:	4b9c      	ldr	r3, [pc, #624]	; (8007b80 <tcp_process+0x2ac>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d102      	bne.n	800791c <tcp_process+0x48>
        acceptable = 1;
 8007916:	2301      	movs	r3, #1
 8007918:	76fb      	strb	r3, [r7, #27]
 800791a:	e017      	b.n	800794c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800791c:	4b98      	ldr	r3, [pc, #608]	; (8007b80 <tcp_process+0x2ac>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	db10      	blt.n	800794c <tcp_process+0x78>
 800792a:	4b95      	ldr	r3, [pc, #596]	; (8007b80 <tcp_process+0x2ac>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007936:	440b      	add	r3, r1
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	dc06      	bgt.n	800794c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7e9b      	ldrb	r3, [r3, #26]
 8007942:	f043 0302 	orr.w	r3, r3, #2
 8007946:	b2da      	uxtb	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800794c:	7efb      	ldrb	r3, [r7, #27]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01b      	beq.n	800798a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7d1b      	ldrb	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <tcp_process+0x94>
 800795a:	4b8a      	ldr	r3, [pc, #552]	; (8007b84 <tcp_process+0x2b0>)
 800795c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007960:	4989      	ldr	r1, [pc, #548]	; (8007b88 <tcp_process+0x2b4>)
 8007962:	488a      	ldr	r0, [pc, #552]	; (8007b8c <tcp_process+0x2b8>)
 8007964:	f005 faec 	bl	800cf40 <iprintf>
      recv_flags |= TF_RESET;
 8007968:	4b89      	ldr	r3, [pc, #548]	; (8007b90 <tcp_process+0x2bc>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f043 0308 	orr.w	r3, r3, #8
 8007970:	b2da      	uxtb	r2, r3
 8007972:	4b87      	ldr	r3, [pc, #540]	; (8007b90 <tcp_process+0x2bc>)
 8007974:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7e9b      	ldrb	r3, [r3, #26]
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007984:	f06f 030d 	mvn.w	r3, #13
 8007988:	e34d      	b.n	8008026 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e34b      	b.n	8008026 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800798e:	4b7a      	ldr	r3, [pc, #488]	; (8007b78 <tcp_process+0x2a4>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d010      	beq.n	80079bc <tcp_process+0xe8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7d1b      	ldrb	r3, [r3, #20]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d00c      	beq.n	80079bc <tcp_process+0xe8>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7d1b      	ldrb	r3, [r3, #20]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d008      	beq.n	80079bc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7e9b      	ldrb	r3, [r3, #26]
 80079ae:	f043 0302 	orr.w	r3, r3, #2
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e334      	b.n	8008026 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7e9b      	ldrb	r3, [r3, #26]
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d103      	bne.n	80079d0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80079c8:	4b72      	ldr	r3, [pc, #456]	; (8007b94 <tcp_process+0x2c0>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fbdf 	bl	800919c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7d1b      	ldrb	r3, [r3, #20]
 80079e2:	3b02      	subs	r3, #2
 80079e4:	2b07      	cmp	r3, #7
 80079e6:	f200 830e 	bhi.w	8008006 <tcp_process+0x732>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <tcp_process+0x11c>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a11 	.word	0x08007a11
 80079f4:	08007c09 	.word	0x08007c09
 80079f8:	08007d61 	.word	0x08007d61
 80079fc:	08007d8b 	.word	0x08007d8b
 8007a00:	08007eb5 	.word	0x08007eb5
 8007a04:	08007d61 	.word	0x08007d61
 8007a08:	08007f41 	.word	0x08007f41
 8007a0c:	08007fd1 	.word	0x08007fd1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007a10:	4b59      	ldr	r3, [pc, #356]	; (8007b78 <tcp_process+0x2a4>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80cb 	beq.w	8007bb4 <tcp_process+0x2e0>
 8007a1e:	4b56      	ldr	r3, [pc, #344]	; (8007b78 <tcp_process+0x2a4>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 80c4 	beq.w	8007bb4 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	4b52      	ldr	r3, [pc, #328]	; (8007b7c <tcp_process+0x2a8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	f040 80bc 	bne.w	8007bb4 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8007a3c:	4b50      	ldr	r3, [pc, #320]	; (8007b80 <tcp_process+0x2ac>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8007a4e:	4b4b      	ldr	r3, [pc, #300]	; (8007b7c <tcp_process+0x2a8>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007a56:	4b50      	ldr	r3, [pc, #320]	; (8007b98 <tcp_process+0x2c4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	89db      	ldrh	r3, [r3, #14]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007a70:	4b43      	ldr	r3, [pc, #268]	; (8007b80 <tcp_process+0x2ac>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	1e5a      	subs	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f7ff f95c 	bl	8006d48 <tcp_eff_send_mss_impl>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	bf38      	it	cc
 8007aa6:	461a      	movcc	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bf28      	it	cs
 8007ab2:	4613      	movcs	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <tcp_process+0x200>
 8007ac6:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <tcp_process+0x2b0>)
 8007ac8:	f240 321a 	movw	r2, #794	; 0x31a
 8007acc:	4933      	ldr	r1, [pc, #204]	; (8007b9c <tcp_process+0x2c8>)
 8007ace:	482f      	ldr	r0, [pc, #188]	; (8007b8c <tcp_process+0x2b8>)
 8007ad0:	f005 fa36 	bl	800cf40 <iprintf>
      --pcb->snd_queuelen;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d111      	bne.n	8007b14 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <tcp_process+0x236>
 8007afc:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <tcp_process+0x2b0>)
 8007afe:	f240 3222 	movw	r2, #802	; 0x322
 8007b02:	4927      	ldr	r1, [pc, #156]	; (8007ba0 <tcp_process+0x2cc>)
 8007b04:	4821      	ldr	r0, [pc, #132]	; (8007b8c <tcp_process+0x2b8>)
 8007b06:	f005 fa1b 	bl	800cf40 <iprintf>
        pcb->unsent = rseg->next;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	669a      	str	r2, [r3, #104]	; 0x68
 8007b12:	e003      	b.n	8007b1c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007b1c:	69f8      	ldr	r0, [r7, #28]
 8007b1e:	f7fe fea8 	bl	8006872 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <tcp_process+0x260>
        pcb->rtime = -1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b30:	861a      	strh	r2, [r3, #48]	; 0x30
 8007b32:	e006      	b.n	8007b42 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <tcp_process+0x28e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6910      	ldr	r0, [r2, #16]
 8007b56:	2200      	movs	r2, #0
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4798      	blx	r3
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	76bb      	strb	r3, [r7, #26]
 8007b60:	e001      	b.n	8007b66 <tcp_process+0x292>
 8007b62:	2300      	movs	r3, #0
 8007b64:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8007b66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b6a:	f113 0f0d 	cmn.w	r3, #13
 8007b6e:	d119      	bne.n	8007ba4 <tcp_process+0x2d0>
        return ERR_ABRT;
 8007b70:	f06f 030c 	mvn.w	r3, #12
 8007b74:	e257      	b.n	8008026 <tcp_process+0x752>
 8007b76:	bf00      	nop
 8007b78:	20000108 	.word	0x20000108
 8007b7c:	20000100 	.word	0x20000100
 8007b80:	200000fc 	.word	0x200000fc
 8007b84:	0800ea58 	.word	0x0800ea58
 8007b88:	0800ec10 	.word	0x0800ec10
 8007b8c:	0800ea9c 	.word	0x0800ea9c
 8007b90:	20000109 	.word	0x20000109
 8007b94:	20006cd8 	.word	0x20006cd8
 8007b98:	200000ec 	.word	0x200000ec
 8007b9c:	0800ec30 	.word	0x0800ec30
 8007ba0:	0800ec48 	.word	0x0800ec48
      }
      tcp_ack_now(pcb);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7e9b      	ldrb	r3, [r3, #26]
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007bb2:	e22a      	b.n	800800a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8007bb4:	4b9f      	ldr	r3, [pc, #636]	; (8007e34 <tcp_process+0x560>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8224 	beq.w	800800a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bc2:	4b9d      	ldr	r3, [pc, #628]	; (8007e38 <tcp_process+0x564>)
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	4b9d      	ldr	r3, [pc, #628]	; (8007e3c <tcp_process+0x568>)
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b9c      	ldr	r3, [pc, #624]	; (8007e40 <tcp_process+0x56c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bd2:	4b9c      	ldr	r3, [pc, #624]	; (8007e44 <tcp_process+0x570>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bd6:	885b      	ldrh	r3, [r3, #2]
 8007bd8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bda:	4a9a      	ldr	r2, [pc, #616]	; (8007e44 <tcp_process+0x570>)
 8007bdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bde:	8812      	ldrh	r2, [r2, #0]
 8007be0:	b292      	uxth	r2, r2
 8007be2:	9201      	str	r2, [sp, #4]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	4b98      	ldr	r3, [pc, #608]	; (8007e48 <tcp_process+0x574>)
 8007be8:	4a98      	ldr	r2, [pc, #608]	; (8007e4c <tcp_process+0x578>)
 8007bea:	f002 f871 	bl	8009cd0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	f200 8208 	bhi.w	800800a <tcp_process+0x736>
        pcb->rtime = 0;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f002 f8db 	bl	8009dbc <tcp_rexmit_rto>
    break;
 8007c06:	e200      	b.n	800800a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007c08:	4b8a      	ldr	r3, [pc, #552]	; (8007e34 <tcp_process+0x560>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8091 	beq.w	8007d38 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007c16:	4b88      	ldr	r3, [pc, #544]	; (8007e38 <tcp_process+0x564>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	db71      	blt.n	8007d0a <tcp_process+0x436>
 8007c26:	4b84      	ldr	r3, [pc, #528]	; (8007e38 <tcp_process+0x564>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc6a      	bgt.n	8007d0a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2204      	movs	r2, #4
 8007c38:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <tcp_process+0x386>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <tcp_process+0x386>
 8007c4c:	4b80      	ldr	r3, [pc, #512]	; (8007e50 <tcp_process+0x57c>)
 8007c4e:	f240 3251 	movw	r2, #849	; 0x351
 8007c52:	4980      	ldr	r1, [pc, #512]	; (8007e54 <tcp_process+0x580>)
 8007c54:	4880      	ldr	r0, [pc, #512]	; (8007e58 <tcp_process+0x584>)
 8007c56:	f005 f973 	bl	800cf40 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8007c62:	23fa      	movs	r3, #250	; 0xfa
 8007c64:	76bb      	strb	r3, [r7, #26]
 8007c66:	e011      	b.n	8007c8c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <tcp_process+0x3b4>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6910      	ldr	r0, [r2, #16]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	4798      	blx	r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	76bb      	strb	r3, [r7, #26]
 8007c86:	e001      	b.n	8007c8c <tcp_process+0x3b8>
 8007c88:	23f0      	movs	r3, #240	; 0xf0
 8007c8a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007c8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8007c94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007c98:	f113 0f0d 	cmn.w	r3, #13
 8007c9c:	d002      	beq.n	8007ca4 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe f992 	bl	8005fc8 <tcp_abort>
          }
          return ERR_ABRT;
 8007ca4:	f06f 030c 	mvn.w	r3, #12
 8007ca8:	e1bd      	b.n	8008026 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa42 	bl	8008134 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8007cb0:	4b6a      	ldr	r3, [pc, #424]	; (8007e5c <tcp_process+0x588>)
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <tcp_process+0x3f0>
          recv_acked--;
 8007cb8:	4b68      	ldr	r3, [pc, #416]	; (8007e5c <tcp_process+0x588>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	4b66      	ldr	r3, [pc, #408]	; (8007e5c <tcp_process+0x588>)
 8007cc2:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	f241 121c 	movw	r2, #4380	; 0x111c
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bf38      	it	cc
 8007cd2:	461a      	movcc	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	bf28      	it	cs
 8007cde:	4613      	movcs	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007ce8:	4b5d      	ldr	r3, [pc, #372]	; (8007e60 <tcp_process+0x58c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d034      	beq.n	8007d5e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7e9b      	ldrb	r3, [r3, #26]
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2207      	movs	r2, #7
 8007d06:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007d08:	e029      	b.n	8007d5e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d0a:	4b4b      	ldr	r3, [pc, #300]	; (8007e38 <tcp_process+0x564>)
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	4b4b      	ldr	r3, [pc, #300]	; (8007e3c <tcp_process+0x568>)
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	4b4a      	ldr	r3, [pc, #296]	; (8007e40 <tcp_process+0x56c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d1a:	4b4a      	ldr	r3, [pc, #296]	; (8007e44 <tcp_process+0x570>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d22:	4a48      	ldr	r2, [pc, #288]	; (8007e44 <tcp_process+0x570>)
 8007d24:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d26:	8812      	ldrh	r2, [r2, #0]
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	4b46      	ldr	r3, [pc, #280]	; (8007e48 <tcp_process+0x574>)
 8007d30:	4a46      	ldr	r2, [pc, #280]	; (8007e4c <tcp_process+0x578>)
 8007d32:	f001 ffcd 	bl	8009cd0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007d36:	e16a      	b.n	800800e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007d38:	4b3e      	ldr	r3, [pc, #248]	; (8007e34 <tcp_process+0x560>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 8164 	beq.w	800800e <tcp_process+0x73a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	1e5a      	subs	r2, r3, #1
 8007d4c:	4b3c      	ldr	r3, [pc, #240]	; (8007e40 <tcp_process+0x56c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	f040 815c 	bne.w	800800e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 f866 	bl	8009e28 <tcp_rexmit>
    break;
 8007d5c:	e157      	b.n	800800e <tcp_process+0x73a>
 8007d5e:	e156      	b.n	800800e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9e7 	bl	8008134 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007d66:	4b3e      	ldr	r3, [pc, #248]	; (8007e60 <tcp_process+0x58c>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 814f 	beq.w	8008012 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7e9b      	ldrb	r3, [r3, #26]
 8007d78:	f043 0302 	orr.w	r3, r3, #2
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2207      	movs	r2, #7
 8007d86:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007d88:	e143      	b.n	8008012 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9d2 	bl	8008134 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007d90:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <tcp_process+0x58c>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d074      	beq.n	8007e86 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d9c:	4b25      	ldr	r3, [pc, #148]	; (8007e34 <tcp_process+0x560>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d063      	beq.n	8007e70 <tcp_process+0x59c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dac:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <tcp_process+0x564>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d15d      	bne.n	8007e70 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d159      	bne.n	8007e70 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7e9b      	ldrb	r3, [r3, #26]
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe fee6 	bl	8006b9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007dd0:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <tcp_process+0x590>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d105      	bne.n	8007de6 <tcp_process+0x512>
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <tcp_process+0x590>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	4a20      	ldr	r2, [pc, #128]	; (8007e64 <tcp_process+0x590>)
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	e013      	b.n	8007e0e <tcp_process+0x53a>
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <tcp_process+0x590>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e00c      	b.n	8007e08 <tcp_process+0x534>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d104      	bne.n	8007e02 <tcp_process+0x52e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	60da      	str	r2, [r3, #12]
 8007e00:	e005      	b.n	8007e0e <tcp_process+0x53a>
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1ef      	bne.n	8007dee <tcp_process+0x51a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	60da      	str	r2, [r3, #12]
 8007e14:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <tcp_process+0x594>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <tcp_process+0x598>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
 8007e28:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <tcp_process+0x598>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	f002 f99f 	bl	800a170 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8007e32:	e0f0      	b.n	8008016 <tcp_process+0x742>
 8007e34:	20000108 	.word	0x20000108
 8007e38:	20000100 	.word	0x20000100
 8007e3c:	20000106 	.word	0x20000106
 8007e40:	200000fc 	.word	0x200000fc
 8007e44:	200000ec 	.word	0x200000ec
 8007e48:	200037b4 	.word	0x200037b4
 8007e4c:	200037b8 	.word	0x200037b8
 8007e50:	0800ea58 	.word	0x0800ea58
 8007e54:	0800ec5c 	.word	0x0800ec5c
 8007e58:	0800ea9c 	.word	0x0800ea9c
 8007e5c:	20000104 	.word	0x20000104
 8007e60:	20000109 	.word	0x20000109
 8007e64:	20006cd4 	.word	0x20006cd4
 8007e68:	20006cd0 	.word	0x20006cd0
 8007e6c:	20006ce4 	.word	0x20006ce4
        tcp_ack_now(pcb);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	7e9b      	ldrb	r3, [r3, #26]
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2208      	movs	r2, #8
 8007e82:	751a      	strb	r2, [r3, #20]
    break;
 8007e84:	e0c7      	b.n	8008016 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e86:	4b6a      	ldr	r3, [pc, #424]	; (8008030 <tcp_process+0x75c>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80c1 	beq.w	8008016 <tcp_process+0x742>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e98:	4b66      	ldr	r3, [pc, #408]	; (8008034 <tcp_process+0x760>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	f040 80ba 	bne.w	8008016 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 80b5 	bne.w	8008016 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	751a      	strb	r2, [r3, #20]
    break;
 8007eb2:	e0b0      	b.n	8008016 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f93d 	bl	8008134 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007eba:	4b5f      	ldr	r3, [pc, #380]	; (8008038 <tcp_process+0x764>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80a9 	beq.w	800801a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7e9b      	ldrb	r3, [r3, #26]
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fe fe60 	bl	8006b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007edc:	4b57      	ldr	r3, [pc, #348]	; (800803c <tcp_process+0x768>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d105      	bne.n	8007ef2 <tcp_process+0x61e>
 8007ee6:	4b55      	ldr	r3, [pc, #340]	; (800803c <tcp_process+0x768>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a53      	ldr	r2, [pc, #332]	; (800803c <tcp_process+0x768>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e013      	b.n	8007f1a <tcp_process+0x646>
 8007ef2:	4b52      	ldr	r3, [pc, #328]	; (800803c <tcp_process+0x768>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	e00c      	b.n	8007f14 <tcp_process+0x640>
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d104      	bne.n	8007f0e <tcp_process+0x63a>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	e005      	b.n	8007f1a <tcp_process+0x646>
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1ef      	bne.n	8007efa <tcp_process+0x626>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	60da      	str	r2, [r3, #12]
 8007f20:	4b47      	ldr	r3, [pc, #284]	; (8008040 <tcp_process+0x76c>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220a      	movs	r2, #10
 8007f2a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007f2c:	4b45      	ldr	r3, [pc, #276]	; (8008044 <tcp_process+0x770>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
 8007f34:	4a43      	ldr	r2, [pc, #268]	; (8008044 <tcp_process+0x770>)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	f002 f919 	bl	800a170 <tcp_timer_needed>
    }
    break;
 8007f3e:	e06c      	b.n	800801a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f8f7 	bl	8008134 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007f46:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <tcp_process+0x75c>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d065      	beq.n	800801e <tcp_process+0x74a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f56:	4b37      	ldr	r3, [pc, #220]	; (8008034 <tcp_process+0x760>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d15f      	bne.n	800801e <tcp_process+0x74a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d15b      	bne.n	800801e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fe fe18 	bl	8006b9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f6c:	4b33      	ldr	r3, [pc, #204]	; (800803c <tcp_process+0x768>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d105      	bne.n	8007f82 <tcp_process+0x6ae>
 8007f76:	4b31      	ldr	r3, [pc, #196]	; (800803c <tcp_process+0x768>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	; (800803c <tcp_process+0x768>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e013      	b.n	8007faa <tcp_process+0x6d6>
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <tcp_process+0x768>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	e00c      	b.n	8007fa4 <tcp_process+0x6d0>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d104      	bne.n	8007f9e <tcp_process+0x6ca>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	e005      	b.n	8007faa <tcp_process+0x6d6>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1ef      	bne.n	8007f8a <tcp_process+0x6b6>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	60da      	str	r2, [r3, #12]
 8007fb0:	4b23      	ldr	r3, [pc, #140]	; (8008040 <tcp_process+0x76c>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220a      	movs	r2, #10
 8007fba:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007fbc:	4b21      	ldr	r3, [pc, #132]	; (8008044 <tcp_process+0x770>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <tcp_process+0x770>)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	f002 f8d1 	bl	800a170 <tcp_timer_needed>
    }
    break;
 8007fce:	e026      	b.n	800801e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f8af 	bl	8008134 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <tcp_process+0x75c>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 0310 	and.w	r3, r3, #16
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01f      	beq.n	8008022 <tcp_process+0x74e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <tcp_process+0x760>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d119      	bne.n	8008022 <tcp_process+0x74e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d115      	bne.n	8008022 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <tcp_process+0x764>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f043 0310 	orr.w	r3, r3, #16
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	4b0d      	ldr	r3, [pc, #52]	; (8008038 <tcp_process+0x764>)
 8008002:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008004:	e00d      	b.n	8008022 <tcp_process+0x74e>
  default:
    break;
 8008006:	bf00      	nop
 8008008:	e00c      	b.n	8008024 <tcp_process+0x750>
    break;
 800800a:	bf00      	nop
 800800c:	e00a      	b.n	8008024 <tcp_process+0x750>
    break;
 800800e:	bf00      	nop
 8008010:	e008      	b.n	8008024 <tcp_process+0x750>
    break;
 8008012:	bf00      	nop
 8008014:	e006      	b.n	8008024 <tcp_process+0x750>
    break;
 8008016:	bf00      	nop
 8008018:	e004      	b.n	8008024 <tcp_process+0x750>
    break;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <tcp_process+0x750>
    break;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <tcp_process+0x750>
    break;
 8008022:	bf00      	nop
  }
  return ERR_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000108 	.word	0x20000108
 8008034:	20000100 	.word	0x20000100
 8008038:	20000109 	.word	0x20000109
 800803c:	20006cd4 	.word	0x20006cd4
 8008040:	20006cd0 	.word	0x20006cd0
 8008044:	20006ce4 	.word	0x20006ce4

08008048 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	899b      	ldrh	r3, [r3, #12]
 8008058:	b29b      	uxth	r3, r3
 800805a:	4618      	mov	r0, r3
 800805c:	f7fc f98d 	bl	800437a <lwip_htons>
 8008060:	4603      	mov	r3, r0
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d027      	beq.n	80080ba <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800806a:	6838      	ldr	r0, [r7, #0]
 800806c:	f7fe fbed 	bl	800684a <tcp_segs_free>
    next = NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	e055      	b.n	8008122 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	899b      	ldrh	r3, [r3, #12]
 800807c:	b29b      	uxth	r3, r3
 800807e:	4618      	mov	r0, r3
 8008080:	f7fc f97b 	bl	800437a <lwip_htons>
 8008084:	4603      	mov	r3, r0
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00d      	beq.n	80080aa <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	899b      	ldrh	r3, [r3, #12]
 8008094:	b29c      	uxth	r4, r3
 8008096:	2001      	movs	r0, #1
 8008098:	f7fc f96f 	bl	800437a <lwip_htons>
 800809c:	4603      	mov	r3, r0
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4322      	orrs	r2, r4
 80080a6:	b292      	uxth	r2, r2
 80080a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7fe fbdc 	bl	8006872 <tcp_seg_free>
    while (next &&
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	891b      	ldrh	r3, [r3, #8]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <tcp_oos_insert_segment+0xe8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	441a      	add	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	8909      	ldrh	r1, [r1, #8]
 80080d6:	440b      	add	r3, r1
 80080d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dacb      	bge.n	8008076 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01e      	beq.n	8008122 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	891b      	ldrh	r3, [r3, #8]
 80080e8:	461a      	mov	r2, r3
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <tcp_oos_insert_segment+0xe8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	441a      	add	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dd12      	ble.n	8008122 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b29a      	uxth	r2, r3
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <tcp_oos_insert_segment+0xe8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	b29a      	uxth	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	891b      	ldrh	r3, [r3, #8]
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fd f8dd 	bl	80052dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	601a      	str	r2, [r3, #0]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bd90      	pop	{r4, r7, pc}
 8008130:	200000fc 	.word	0x200000fc

08008134 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008136:	b08d      	sub	sp, #52	; 0x34
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7d1b      	ldrb	r3, [r3, #20]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d806      	bhi.n	8008156 <tcp_receive+0x22>
 8008148:	4ba6      	ldr	r3, [pc, #664]	; (80083e4 <tcp_receive+0x2b0>)
 800814a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800814e:	49a6      	ldr	r1, [pc, #664]	; (80083e8 <tcp_receive+0x2b4>)
 8008150:	48a6      	ldr	r0, [pc, #664]	; (80083ec <tcp_receive+0x2b8>)
 8008152:	f004 fef5 	bl	800cf40 <iprintf>

  if (flags & TCP_ACK) {
 8008156:	4ba6      	ldr	r3, [pc, #664]	; (80083f0 <tcp_receive+0x2bc>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 82bf 	beq.w	80086e2 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008170:	4413      	add	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008178:	4b9e      	ldr	r3, [pc, #632]	; (80083f4 <tcp_receive+0x2c0>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	db1b      	blt.n	80081ba <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008186:	4b9b      	ldr	r3, [pc, #620]	; (80083f4 <tcp_receive+0x2c0>)
 8008188:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800818a:	429a      	cmp	r2, r3
 800818c:	d106      	bne.n	800819c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008192:	4b99      	ldr	r3, [pc, #612]	; (80083f8 <tcp_receive+0x2c4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	db0e      	blt.n	80081ba <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a0:	4b95      	ldr	r3, [pc, #596]	; (80083f8 <tcp_receive+0x2c4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d141      	bne.n	800822c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80081a8:	4b94      	ldr	r3, [pc, #592]	; (80083fc <tcp_receive+0x2c8>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	89db      	ldrh	r3, [r3, #14]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d938      	bls.n	800822c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80081ba:	4b90      	ldr	r3, [pc, #576]	; (80083fc <tcp_receive+0x2c8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	89db      	ldrh	r3, [r3, #14]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d205      	bcs.n	80081e4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80081e4:	4b83      	ldr	r3, [pc, #524]	; (80083f4 <tcp_receive+0x2c0>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80081ec:	4b82      	ldr	r3, [pc, #520]	; (80083f8 <tcp_receive+0x2c4>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10d      	bne.n	800821a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008204:	2b00      	cmp	r3, #0
 8008206:	d111      	bne.n	800822c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008218:	e008      	b.n	800822c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800822c:	4b72      	ldr	r3, [pc, #456]	; (80083f8 <tcp_receive+0x2c4>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	dc53      	bgt.n	80082e2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800823a:	4b71      	ldr	r3, [pc, #452]	; (8008400 <tcp_receive+0x2cc>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d146      	bne.n	80082d0 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800824c:	4413      	add	r3, r2
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	d13d      	bne.n	80082d0 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	db38      	blt.n	80082d0 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008262:	4b65      	ldr	r3, [pc, #404]	; (80083f8 <tcp_receive+0x2c4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d132      	bne.n	80082d0 <tcp_receive+0x19c>
              found_dupack = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008274:	2bff      	cmp	r3, #255	; 0xff
 8008276:	d007      	beq.n	8008288 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800827e:	3301      	adds	r3, #1
 8008280:	b2da      	uxtb	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800828e:	2b03      	cmp	r3, #3
 8008290:	d916      	bls.n	80082c0 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800829c:	4413      	add	r3, r2
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d912      	bls.n	80082d0 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082b4:	4413      	add	r3, r2
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082be:	e007      	b.n	80082d0 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d102      	bne.n	80082d0 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fdfc 	bl	8009ec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 8169 	bne.w	80085aa <tcp_receive+0x476>
        pcb->dupacks = 0;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082e0:	e163      	b.n	80085aa <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80082e2:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <tcp_receive+0x2c4>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f2c0 8107 	blt.w	8008502 <tcp_receive+0x3ce>
 80082f4:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <tcp_receive+0x2c4>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f300 80ff 	bgt.w	8008502 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7e9b      	ldrb	r3, [r3, #26]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7e9b      	ldrb	r3, [r3, #26]
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	b2da      	uxtb	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008338:	10db      	asrs	r3, r3, #3
 800833a:	b21b      	sxth	r3, r3
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008344:	b29b      	uxth	r3, r3
 8008346:	4413      	add	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	b21a      	sxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800835a:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <tcp_receive+0x2c4>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7d1b      	ldrb	r3, [r3, #20]
 8008366:	2b03      	cmp	r3, #3
 8008368:	f240 8094 	bls.w	8008494 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008378:	429a      	cmp	r2, r3
 800837a:	d216      	bcs.n	80083aa <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008386:	4413      	add	r3, r2
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008390:	429a      	cmp	r2, r3
 8008392:	d97f      	bls.n	8008494 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800839e:	4413      	add	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80083a8:	e074      	b.n	8008494 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083b4:	4619      	mov	r1, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083ba:	fb03 f301 	mul.w	r3, r3, r1
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80083c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4413      	add	r3, r2
 80083cc:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80083d4:	8a7a      	ldrh	r2, [r7, #18]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d95c      	bls.n	8008494 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8a7a      	ldrh	r2, [r7, #18]
 80083de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80083e2:	e057      	b.n	8008494 <tcp_receive+0x360>
 80083e4:	0800ea58 	.word	0x0800ea58
 80083e8:	0800ec7c 	.word	0x0800ec7c
 80083ec:	0800ea9c 	.word	0x0800ea9c
 80083f0:	20000108 	.word	0x20000108
 80083f4:	200000fc 	.word	0x200000fc
 80083f8:	20000100 	.word	0x20000100
 80083fc:	200000ec 	.word	0x200000ec
 8008400:	20000106 	.word	0x20000106
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd f964 	bl	80056ec <pbuf_clen>
 8008424:	4603      	mov	r3, r0
 8008426:	429c      	cmp	r4, r3
 8008428:	d206      	bcs.n	8008438 <tcp_receive+0x304>
 800842a:	4b70      	ldr	r3, [pc, #448]	; (80085ec <tcp_receive+0x4b8>)
 800842c:	f240 429e 	movw	r2, #1182	; 0x49e
 8008430:	496f      	ldr	r1, [pc, #444]	; (80085f0 <tcp_receive+0x4bc>)
 8008432:	4870      	ldr	r0, [pc, #448]	; (80085f4 <tcp_receive+0x4c0>)
 8008434:	f004 fd84 	bl	800cf40 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd f955 	bl	80056ec <pbuf_clen>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	b29a      	uxth	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	891a      	ldrh	r2, [r3, #8]
 800845a:	4b67      	ldr	r3, [pc, #412]	; (80085f8 <tcp_receive+0x4c4>)
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	4413      	add	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	4b65      	ldr	r3, [pc, #404]	; (80085f8 <tcp_receive+0x4c4>)
 8008464:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008468:	f7fe fa03 	bl	8006872 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <tcp_receive+0x360>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <tcp_receive+0x360>
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <tcp_receive+0x4b8>)
 8008488:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800848c:	495b      	ldr	r1, [pc, #364]	; (80085fc <tcp_receive+0x4c8>)
 800848e:	4859      	ldr	r0, [pc, #356]	; (80085f4 <tcp_receive+0x4c0>)
 8008490:	f004 fd56 	bl	800cf40 <iprintf>
      while (pcb->unacked != NULL &&
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d022      	beq.n	80084e2 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fb ff76 	bl	8004396 <lwip_htonl>
 80084aa:	4604      	mov	r4, r0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b0:	891b      	ldrh	r3, [r3, #8]
 80084b2:	461d      	mov	r5, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	899b      	ldrh	r3, [r3, #12]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fb ff5b 	bl	800437a <lwip_htons>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <tcp_receive+0x39e>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <tcp_receive+0x3a0>
 80084d2:	2300      	movs	r3, #0
 80084d4:	442b      	add	r3, r5
 80084d6:	18e2      	adds	r2, r4, r3
 80084d8:	4b49      	ldr	r3, [pc, #292]	; (8008600 <tcp_receive+0x4cc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd90      	ble.n	8008404 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80084f2:	e002      	b.n	80084fa <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	76da      	strb	r2, [r3, #27]
 8008500:	e002      	b.n	8008508 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f8fe 	bl	8009704 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008508:	e04f      	b.n	80085aa <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800851e:	2b00      	cmp	r3, #0
 8008520:	d103      	bne.n	800852a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4618      	mov	r0, r3
 8008536:	f7fd f8d9 	bl	80056ec <pbuf_clen>
 800853a:	4603      	mov	r3, r0
 800853c:	429c      	cmp	r4, r3
 800853e:	d206      	bcs.n	800854e <tcp_receive+0x41a>
 8008540:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <tcp_receive+0x4b8>)
 8008542:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008546:	492a      	ldr	r1, [pc, #168]	; (80085f0 <tcp_receive+0x4bc>)
 8008548:	482a      	ldr	r0, [pc, #168]	; (80085f4 <tcp_receive+0x4c0>)
 800854a:	f004 fcf9 	bl	800cf40 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd f8ca 	bl	80056ec <pbuf_clen>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	b29a      	uxth	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	891a      	ldrh	r2, [r3, #8]
 8008570:	4b21      	ldr	r3, [pc, #132]	; (80085f8 <tcp_receive+0x4c4>)
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	4413      	add	r3, r2
 8008576:	b29a      	uxth	r2, r3
 8008578:	4b1f      	ldr	r3, [pc, #124]	; (80085f8 <tcp_receive+0x4c4>)
 800857a:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800857c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800857e:	f7fe f978 	bl	8006872 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <tcp_receive+0x476>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008598:	2b00      	cmp	r3, #0
 800859a:	d106      	bne.n	80085aa <tcp_receive+0x476>
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <tcp_receive+0x4b8>)
 800859e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80085a2:	4916      	ldr	r1, [pc, #88]	; (80085fc <tcp_receive+0x4c8>)
 80085a4:	4813      	ldr	r0, [pc, #76]	; (80085f4 <tcp_receive+0x4c0>)
 80085a6:	f004 fccb 	bl	800cf40 <iprintf>
    while (pcb->unsent != NULL &&
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d036      	beq.n	8008620 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80085b2:	4b13      	ldr	r3, [pc, #76]	; (8008600 <tcp_receive+0x4cc>)
 80085b4:	681c      	ldr	r4, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fb fee9 	bl	8004396 <lwip_htonl>
 80085c4:	4605      	mov	r5, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	461e      	mov	r6, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	899b      	ldrh	r3, [r3, #12]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fb fece 	bl	800437a <lwip_htons>
 80085de:	4603      	mov	r3, r0
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00d      	beq.n	8008604 <tcp_receive+0x4d0>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e00c      	b.n	8008606 <tcp_receive+0x4d2>
 80085ec:	0800ea58 	.word	0x0800ea58
 80085f0:	0800ec98 	.word	0x0800ec98
 80085f4:	0800ea9c 	.word	0x0800ea9c
 80085f8:	20000104 	.word	0x20000104
 80085fc:	0800ecc0 	.word	0x0800ecc0
 8008600:	20000100 	.word	0x20000100
 8008604:	2300      	movs	r3, #0
 8008606:	4433      	add	r3, r6
 8008608:	442b      	add	r3, r5
 800860a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800860c:	2b00      	cmp	r3, #0
 800860e:	db07      	blt.n	8008620 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008610:	4b8d      	ldr	r3, [pc, #564]	; (8008848 <tcp_receive+0x714>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	f77f af75 	ble.w	800850a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008626:	4b89      	ldr	r3, [pc, #548]	; (800884c <tcp_receive+0x718>)
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	4413      	add	r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	2b00      	cmp	r3, #0
 800863a:	d052      	beq.n	80086e2 <tcp_receive+0x5ae>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008640:	4b81      	ldr	r3, [pc, #516]	; (8008848 <tcp_receive+0x714>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	da4b      	bge.n	80086e2 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800864a:	4b81      	ldr	r3, [pc, #516]	; (8008850 <tcp_receive+0x71c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	b29b      	uxth	r3, r3
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	b29b      	uxth	r3, r3
 800865a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800865c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008664:	10db      	asrs	r3, r3, #3
 8008666:	b21b      	sxth	r3, r3
 8008668:	b29b      	uxth	r3, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	b29b      	uxth	r3, r3
 800866e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008676:	b29a      	uxth	r2, r3
 8008678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800867a:	4413      	add	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	b21a      	sxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008684:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008688:	2b00      	cmp	r3, #0
 800868a:	da03      	bge.n	8008694 <tcp_receive+0x560>
        m = -m;
 800868c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800868e:	425b      	negs	r3, r3
 8008690:	b29b      	uxth	r3, r3
 8008692:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008694:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800869c:	109b      	asrs	r3, r3, #2
 800869e:	b21b      	sxth	r3, r3
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086b2:	4413      	add	r3, r2
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	b21a      	sxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80086c2:	10db      	asrs	r3, r3, #3
 80086c4:	b21b      	sxth	r3, r3
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	b21a      	sxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80086e2:	4b5c      	ldr	r3, [pc, #368]	; (8008854 <tcp_receive+0x720>)
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 84f1 	beq.w	80090ce <tcp_receive+0xf9a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7d1b      	ldrb	r3, [r3, #20]
 80086f0:	2b06      	cmp	r3, #6
 80086f2:	f200 84ec 	bhi.w	80090ce <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086fa:	4b57      	ldr	r3, [pc, #348]	; (8008858 <tcp_receive+0x724>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	f2c0 80b8 	blt.w	8008878 <tcp_receive+0x744>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870c:	4b51      	ldr	r3, [pc, #324]	; (8008854 <tcp_receive+0x720>)
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	4b51      	ldr	r3, [pc, #324]	; (8008858 <tcp_receive+0x724>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	440b      	add	r3, r1
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	3301      	adds	r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	f300 80ab 	bgt.w	8008878 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008722:	4b4e      	ldr	r3, [pc, #312]	; (800885c <tcp_receive+0x728>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872c:	4b4a      	ldr	r3, [pc, #296]	; (8008858 <tcp_receive+0x724>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008734:	4b49      	ldr	r3, [pc, #292]	; (800885c <tcp_receive+0x728>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <tcp_receive+0x616>
 800873c:	4b48      	ldr	r3, [pc, #288]	; (8008860 <tcp_receive+0x72c>)
 800873e:	f240 523c 	movw	r2, #1340	; 0x53c
 8008742:	4948      	ldr	r1, [pc, #288]	; (8008864 <tcp_receive+0x730>)
 8008744:	4848      	ldr	r0, [pc, #288]	; (8008868 <tcp_receive+0x734>)
 8008746:	f004 fbfb 	bl	800cf40 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008750:	4293      	cmp	r3, r2
 8008752:	dd06      	ble.n	8008762 <tcp_receive+0x62e>
 8008754:	4b42      	ldr	r3, [pc, #264]	; (8008860 <tcp_receive+0x72c>)
 8008756:	f240 523d 	movw	r2, #1341	; 0x53d
 800875a:	4944      	ldr	r1, [pc, #272]	; (800886c <tcp_receive+0x738>)
 800875c:	4842      	ldr	r0, [pc, #264]	; (8008868 <tcp_receive+0x734>)
 800875e:	f004 fbef 	bl	800cf40 <iprintf>
      if (inseg.p->len < off) {
 8008762:	4b3e      	ldr	r3, [pc, #248]	; (800885c <tcp_receive+0x728>)
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	895b      	ldrh	r3, [r3, #10]
 8008768:	461a      	mov	r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	4293      	cmp	r3, r2
 800876e:	dd3e      	ble.n	80087ee <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008770:	4b3a      	ldr	r3, [pc, #232]	; (800885c <tcp_receive+0x728>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	891b      	ldrh	r3, [r3, #8]
 8008776:	461a      	mov	r2, r3
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	4293      	cmp	r3, r2
 800877c:	dd06      	ble.n	800878c <tcp_receive+0x658>
 800877e:	4b38      	ldr	r3, [pc, #224]	; (8008860 <tcp_receive+0x72c>)
 8008780:	f240 523f 	movw	r2, #1343	; 0x53f
 8008784:	493a      	ldr	r1, [pc, #232]	; (8008870 <tcp_receive+0x73c>)
 8008786:	4838      	ldr	r0, [pc, #224]	; (8008868 <tcp_receive+0x734>)
 8008788:	f004 fbda 	bl	800cf40 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800878c:	4b33      	ldr	r3, [pc, #204]	; (800885c <tcp_receive+0x728>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	891a      	ldrh	r2, [r3, #8]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	b29b      	uxth	r3, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800879a:	e00e      	b.n	80087ba <tcp_receive+0x686>
          off -= p->len;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	895b      	ldrh	r3, [r3, #10]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	8a3a      	ldrh	r2, [r7, #16]
 80087ac:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2200      	movs	r2, #0
 80087b2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	895b      	ldrh	r3, [r3, #10]
 80087be:	461a      	mov	r2, r3
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	4293      	cmp	r3, r2
 80087c4:	dcea      	bgt.n	800879c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	425b      	negs	r3, r3
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	b21b      	sxth	r3, r3
 80087d0:	4619      	mov	r1, r3
 80087d2:	69b8      	ldr	r0, [r7, #24]
 80087d4:	f7fc fed2 	bl	800557c <pbuf_header>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01c      	beq.n	8008818 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80087de:	4b20      	ldr	r3, [pc, #128]	; (8008860 <tcp_receive+0x72c>)
 80087e0:	f240 524c 	movw	r2, #1356	; 0x54c
 80087e4:	4923      	ldr	r1, [pc, #140]	; (8008874 <tcp_receive+0x740>)
 80087e6:	4820      	ldr	r0, [pc, #128]	; (8008868 <tcp_receive+0x734>)
 80087e8:	f004 fbaa 	bl	800cf40 <iprintf>
 80087ec:	e014      	b.n	8008818 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <tcp_receive+0x728>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f4:	b292      	uxth	r2, r2
 80087f6:	4252      	negs	r2, r2
 80087f8:	b292      	uxth	r2, r2
 80087fa:	b212      	sxth	r2, r2
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fc febc 	bl	800557c <pbuf_header>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d006      	beq.n	8008818 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800880a:	4b15      	ldr	r3, [pc, #84]	; (8008860 <tcp_receive+0x72c>)
 800880c:	f240 5251 	movw	r2, #1361	; 0x551
 8008810:	4918      	ldr	r1, [pc, #96]	; (8008874 <tcp_receive+0x740>)
 8008812:	4815      	ldr	r0, [pc, #84]	; (8008868 <tcp_receive+0x734>)
 8008814:	f004 fb94 	bl	800cf40 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008818:	4b10      	ldr	r3, [pc, #64]	; (800885c <tcp_receive+0x728>)
 800881a:	891a      	ldrh	r2, [r3, #8]
 800881c:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <tcp_receive+0x724>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b299      	uxth	r1, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	b29b      	uxth	r3, r3
 8008828:	1acb      	subs	r3, r1, r3
 800882a:	b29b      	uxth	r3, r3
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <tcp_receive+0x728>)
 8008832:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	4a07      	ldr	r2, [pc, #28]	; (8008858 <tcp_receive+0x724>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <tcp_receive+0x728>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	4a05      	ldr	r2, [pc, #20]	; (8008858 <tcp_receive+0x724>)
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008846:	e025      	b.n	8008894 <tcp_receive+0x760>
 8008848:	20000100 	.word	0x20000100
 800884c:	20000104 	.word	0x20000104
 8008850:	20006cd8 	.word	0x20006cd8
 8008854:	20000106 	.word	0x20000106
 8008858:	200000fc 	.word	0x200000fc
 800885c:	200000dc 	.word	0x200000dc
 8008860:	0800ea58 	.word	0x0800ea58
 8008864:	0800ece0 	.word	0x0800ece0
 8008868:	0800ea9c 	.word	0x0800ea9c
 800886c:	0800ecf0 	.word	0x0800ecf0
 8008870:	0800ed00 	.word	0x0800ed00
 8008874:	0800ed10 	.word	0x0800ed10
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008878:	4b87      	ldr	r3, [pc, #540]	; (8008a98 <tcp_receive+0x964>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	da06      	bge.n	8008894 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7e9b      	ldrb	r3, [r3, #26]
 800888a:	f043 0302 	orr.w	r3, r3, #2
 800888e:	b2da      	uxtb	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008894:	4b80      	ldr	r3, [pc, #512]	; (8008a98 <tcp_receive+0x964>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f2c0 8410 	blt.w	80090c4 <tcp_receive+0xf90>
 80088a4:	4b7c      	ldr	r3, [pc, #496]	; (8008a98 <tcp_receive+0x964>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80088b0:	440b      	add	r3, r1
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	3301      	adds	r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f300 8404 	bgt.w	80090c4 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088c0:	4b75      	ldr	r3, [pc, #468]	; (8008a98 <tcp_receive+0x964>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	f040 8287 	bne.w	8008dd8 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80088ca:	4b74      	ldr	r3, [pc, #464]	; (8008a9c <tcp_receive+0x968>)
 80088cc:	891c      	ldrh	r4, [r3, #8]
 80088ce:	4b73      	ldr	r3, [pc, #460]	; (8008a9c <tcp_receive+0x968>)
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	899b      	ldrh	r3, [r3, #12]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fb fd4f 	bl	800437a <lwip_htons>
 80088dc:	4603      	mov	r3, r0
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <tcp_receive+0x7b6>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <tcp_receive+0x7b8>
 80088ea:	2300      	movs	r3, #0
 80088ec:	4423      	add	r3, r4
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	4b6b      	ldr	r3, [pc, #428]	; (8008aa0 <tcp_receive+0x96c>)
 80088f2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088f8:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <tcp_receive+0x96c>)
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d26e      	bcs.n	80089de <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008900:	4b66      	ldr	r3, [pc, #408]	; (8008a9c <tcp_receive+0x968>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	b29b      	uxth	r3, r3
 8008908:	4618      	mov	r0, r3
 800890a:	f7fb fd36 	bl	800437a <lwip_htons>
 800890e:	4603      	mov	r3, r0
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008918:	4b60      	ldr	r3, [pc, #384]	; (8008a9c <tcp_receive+0x968>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	899b      	ldrh	r3, [r3, #12]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008924:	b29c      	uxth	r4, r3
 8008926:	4b5d      	ldr	r3, [pc, #372]	; (8008a9c <tcp_receive+0x968>)
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	899b      	ldrh	r3, [r3, #12]
 800892c:	b29b      	uxth	r3, r3
 800892e:	4618      	mov	r0, r3
 8008930:	f7fb fd23 	bl	800437a <lwip_htons>
 8008934:	4603      	mov	r3, r0
 8008936:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800893a:	b29b      	uxth	r3, r3
 800893c:	4618      	mov	r0, r3
 800893e:	f7fb fd1c 	bl	800437a <lwip_htons>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	4b55      	ldr	r3, [pc, #340]	; (8008a9c <tcp_receive+0x968>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	4322      	orrs	r2, r4
 800894c:	b292      	uxth	r2, r2
 800894e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008954:	4b51      	ldr	r3, [pc, #324]	; (8008a9c <tcp_receive+0x968>)
 8008956:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008958:	4b50      	ldr	r3, [pc, #320]	; (8008a9c <tcp_receive+0x968>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	899b      	ldrh	r3, [r3, #12]
 800895e:	b29b      	uxth	r3, r3
 8008960:	4618      	mov	r0, r3
 8008962:	f7fb fd0a 	bl	800437a <lwip_htons>
 8008966:	4603      	mov	r3, r0
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <tcp_receive+0x848>
            inseg.len -= 1;
 8008970:	4b4a      	ldr	r3, [pc, #296]	; (8008a9c <tcp_receive+0x968>)
 8008972:	891b      	ldrh	r3, [r3, #8]
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	4b48      	ldr	r3, [pc, #288]	; (8008a9c <tcp_receive+0x968>)
 800897a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800897c:	4b47      	ldr	r3, [pc, #284]	; (8008a9c <tcp_receive+0x968>)
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	4b46      	ldr	r3, [pc, #280]	; (8008a9c <tcp_receive+0x968>)
 8008982:	891b      	ldrh	r3, [r3, #8]
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fc fca8 	bl	80052dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800898c:	4b43      	ldr	r3, [pc, #268]	; (8008a9c <tcp_receive+0x968>)
 800898e:	891c      	ldrh	r4, [r3, #8]
 8008990:	4b42      	ldr	r3, [pc, #264]	; (8008a9c <tcp_receive+0x968>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	899b      	ldrh	r3, [r3, #12]
 8008996:	b29b      	uxth	r3, r3
 8008998:	4618      	mov	r0, r3
 800899a:	f7fb fcee 	bl	800437a <lwip_htons>
 800899e:	4603      	mov	r3, r0
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <tcp_receive+0x878>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <tcp_receive+0x87a>
 80089ac:	2300      	movs	r3, #0
 80089ae:	4423      	add	r3, r4
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <tcp_receive+0x96c>)
 80089b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089b6:	4b3a      	ldr	r3, [pc, #232]	; (8008aa0 <tcp_receive+0x96c>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <tcp_receive+0x964>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	441a      	add	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80089ca:	440b      	add	r3, r1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d006      	beq.n	80089de <tcp_receive+0x8aa>
 80089d0:	4b34      	ldr	r3, [pc, #208]	; (8008aa4 <tcp_receive+0x970>)
 80089d2:	f240 527f 	movw	r2, #1407	; 0x57f
 80089d6:	4934      	ldr	r1, [pc, #208]	; (8008aa8 <tcp_receive+0x974>)
 80089d8:	4834      	ldr	r0, [pc, #208]	; (8008aac <tcp_receive+0x978>)
 80089da:	f004 fab1 	bl	800cf40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 80e1 	beq.w	8008baa <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80089e8:	4b2c      	ldr	r3, [pc, #176]	; (8008a9c <tcp_receive+0x968>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	899b      	ldrh	r3, [r3, #12]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fb fcc2 	bl	800437a <lwip_htons>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d010      	beq.n	8008a22 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008a00:	e00a      	b.n	8008a18 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a06:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008a12:	68b8      	ldr	r0, [r7, #8]
 8008a14:	f7fd ff2d 	bl	8006872 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f0      	bne.n	8008a02 <tcp_receive+0x8ce>
 8008a20:	e0c3      	b.n	8008baa <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008a28:	e04f      	b.n	8008aca <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	899b      	ldrh	r3, [r3, #12]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fb fca1 	bl	800437a <lwip_htons>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d03b      	beq.n	8008aba <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <tcp_receive+0x968>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	899b      	ldrh	r3, [r3, #12]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fb fc95 	bl	800437a <lwip_htons>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d12f      	bne.n	8008aba <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <tcp_receive+0x968>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	899b      	ldrh	r3, [r3, #12]
 8008a60:	b29c      	uxth	r4, r3
 8008a62:	2001      	movs	r0, #1
 8008a64:	f7fb fc89 	bl	800437a <lwip_htons>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <tcp_receive+0x968>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	4322      	orrs	r2, r4
 8008a72:	b292      	uxth	r2, r2
 8008a74:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <tcp_receive+0x968>)
 8008a78:	891c      	ldrh	r4, [r3, #8]
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <tcp_receive+0x968>)
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	899b      	ldrh	r3, [r3, #12]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fb fc79 	bl	800437a <lwip_htons>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00e      	beq.n	8008ab0 <tcp_receive+0x97c>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e00d      	b.n	8008ab2 <tcp_receive+0x97e>
 8008a96:	bf00      	nop
 8008a98:	200000fc 	.word	0x200000fc
 8008a9c:	200000dc 	.word	0x200000dc
 8008aa0:	20000106 	.word	0x20000106
 8008aa4:	0800ea58 	.word	0x0800ea58
 8008aa8:	0800ed24 	.word	0x0800ed24
 8008aac:	0800ea9c 	.word	0x0800ea9c
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4423      	add	r3, r4
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	4b95      	ldr	r3, [pc, #596]	; (8008d0c <tcp_receive+0xbd8>)
 8008ab8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac6:	f7fd fed4 	bl	8006872 <tcp_seg_free>
            while (next &&
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00e      	beq.n	8008aee <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008ad0:	4b8e      	ldr	r3, [pc, #568]	; (8008d0c <tcp_receive+0xbd8>)
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b8e      	ldr	r3, [pc, #568]	; (8008d10 <tcp_receive+0xbdc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	441a      	add	r2, r3
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae4:	8909      	ldrh	r1, [r1, #8]
 8008ae6:	440b      	add	r3, r1
 8008ae8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da9d      	bge.n	8008a2a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d057      	beq.n	8008ba4 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8008af4:	4b85      	ldr	r3, [pc, #532]	; (8008d0c <tcp_receive+0xbd8>)
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	4b85      	ldr	r3, [pc, #532]	; (8008d10 <tcp_receive+0xbdc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	441a      	add	r2, r3
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dd4b      	ble.n	8008ba4 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	4b7e      	ldr	r3, [pc, #504]	; (8008d10 <tcp_receive+0xbdc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	4b7d      	ldr	r3, [pc, #500]	; (8008d14 <tcp_receive+0xbe0>)
 8008b20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008b22:	4b7c      	ldr	r3, [pc, #496]	; (8008d14 <tcp_receive+0xbe0>)
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	899b      	ldrh	r3, [r3, #12]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fb fc25 	bl	800437a <lwip_htons>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <tcp_receive+0xa12>
                inseg.len -= 1;
 8008b3a:	4b76      	ldr	r3, [pc, #472]	; (8008d14 <tcp_receive+0xbe0>)
 8008b3c:	891b      	ldrh	r3, [r3, #8]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	4b74      	ldr	r3, [pc, #464]	; (8008d14 <tcp_receive+0xbe0>)
 8008b44:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008b46:	4b73      	ldr	r3, [pc, #460]	; (8008d14 <tcp_receive+0xbe0>)
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	4b72      	ldr	r3, [pc, #456]	; (8008d14 <tcp_receive+0xbe0>)
 8008b4c:	891b      	ldrh	r3, [r3, #8]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f7fc fbc3 	bl	80052dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008b56:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <tcp_receive+0xbe0>)
 8008b58:	891c      	ldrh	r4, [r3, #8]
 8008b5a:	4b6e      	ldr	r3, [pc, #440]	; (8008d14 <tcp_receive+0xbe0>)
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	899b      	ldrh	r3, [r3, #12]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fb fc09 	bl	800437a <lwip_htons>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <tcp_receive+0xa42>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <tcp_receive+0xa44>
 8008b76:	2300      	movs	r3, #0
 8008b78:	4423      	add	r3, r4
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	4b63      	ldr	r3, [pc, #396]	; (8008d0c <tcp_receive+0xbd8>)
 8008b7e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008b80:	4b62      	ldr	r3, [pc, #392]	; (8008d0c <tcp_receive+0xbd8>)
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	4b62      	ldr	r3, [pc, #392]	; (8008d10 <tcp_receive+0xbdc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	441a      	add	r2, r3
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d006      	beq.n	8008ba4 <tcp_receive+0xa70>
 8008b96:	4b60      	ldr	r3, [pc, #384]	; (8008d18 <tcp_receive+0xbe4>)
 8008b98:	f240 52af 	movw	r2, #1455	; 0x5af
 8008b9c:	495f      	ldr	r1, [pc, #380]	; (8008d1c <tcp_receive+0xbe8>)
 8008b9e:	4860      	ldr	r0, [pc, #384]	; (8008d20 <tcp_receive+0xbec>)
 8008ba0:	f004 f9ce 	bl	800cf40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008baa:	4b58      	ldr	r3, [pc, #352]	; (8008d0c <tcp_receive+0xbd8>)
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4b57      	ldr	r3, [pc, #348]	; (8008d10 <tcp_receive+0xbdc>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	441a      	add	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bbe:	4b53      	ldr	r3, [pc, #332]	; (8008d0c <tcp_receive+0xbd8>)
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d206      	bcs.n	8008bd4 <tcp_receive+0xaa0>
 8008bc6:	4b54      	ldr	r3, [pc, #336]	; (8008d18 <tcp_receive+0xbe4>)
 8008bc8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008bcc:	4955      	ldr	r1, [pc, #340]	; (8008d24 <tcp_receive+0xbf0>)
 8008bce:	4854      	ldr	r0, [pc, #336]	; (8008d20 <tcp_receive+0xbec>)
 8008bd0:	f004 f9b6 	bl	800cf40 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bd8:	4b4c      	ldr	r3, [pc, #304]	; (8008d0c <tcp_receive+0xbd8>)
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7fd f9fb 	bl	8005fe0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008bea:	4b4a      	ldr	r3, [pc, #296]	; (8008d14 <tcp_receive+0xbe0>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <tcp_receive+0xace>
          recv_data = inseg.p;
 8008bf4:	4b47      	ldr	r3, [pc, #284]	; (8008d14 <tcp_receive+0xbe0>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a4b      	ldr	r2, [pc, #300]	; (8008d28 <tcp_receive+0xbf4>)
 8008bfa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008bfc:	4b45      	ldr	r3, [pc, #276]	; (8008d14 <tcp_receive+0xbe0>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c02:	4b44      	ldr	r3, [pc, #272]	; (8008d14 <tcp_receive+0xbe0>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	899b      	ldrh	r3, [r3, #12]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fb fbb5 	bl	800437a <lwip_htons>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80b4 	beq.w	8008d84 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008c1c:	4b43      	ldr	r3, [pc, #268]	; (8008d2c <tcp_receive+0xbf8>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <tcp_receive+0xbf8>)
 8008c28:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008c2a:	e0ab      	b.n	8008d84 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4a35      	ldr	r2, [pc, #212]	; (8008d10 <tcp_receive+0xbdc>)
 8008c3c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	891b      	ldrh	r3, [r3, #8]
 8008c42:	461c      	mov	r4, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fb fb94 	bl	800437a <lwip_htons>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <tcp_receive+0xb2c>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <tcp_receive+0xb2e>
 8008c60:	2300      	movs	r3, #0
 8008c62:	191a      	adds	r2, r3, r4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	441a      	add	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c72:	461c      	mov	r4, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	891b      	ldrh	r3, [r3, #8]
 8008c78:	461d      	mov	r5, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fb fb79 	bl	800437a <lwip_htons>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <tcp_receive+0xb62>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <tcp_receive+0xb64>
 8008c96:	2300      	movs	r3, #0
 8008c98:	442b      	add	r3, r5
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	d206      	bcs.n	8008cac <tcp_receive+0xb78>
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <tcp_receive+0xbe4>)
 8008ca0:	f240 52de 	movw	r2, #1502	; 0x5de
 8008ca4:	4922      	ldr	r1, [pc, #136]	; (8008d30 <tcp_receive+0xbfc>)
 8008ca6:	481e      	ldr	r0, [pc, #120]	; (8008d20 <tcp_receive+0xbec>)
 8008ca8:	f004 f94a 	bl	800cf40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	891b      	ldrh	r3, [r3, #8]
 8008cb0:	461c      	mov	r4, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	899b      	ldrh	r3, [r3, #12]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fb fb5d 	bl	800437a <lwip_htons>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <tcp_receive+0xb9a>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <tcp_receive+0xb9c>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	1919      	adds	r1, r3, r4
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008cd6:	b28b      	uxth	r3, r1
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fd f97d 	bl	8005fe0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	891b      	ldrh	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d028      	beq.n	8008d42 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <tcp_receive+0xbf4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01d      	beq.n	8008d34 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <tcp_receive+0xbf4>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fc fd2c 	bl	8005760 <pbuf_cat>
 8008d08:	e018      	b.n	8008d3c <tcp_receive+0xc08>
 8008d0a:	bf00      	nop
 8008d0c:	20000106 	.word	0x20000106
 8008d10:	200000fc 	.word	0x200000fc
 8008d14:	200000dc 	.word	0x200000dc
 8008d18:	0800ea58 	.word	0x0800ea58
 8008d1c:	0800ed5c 	.word	0x0800ed5c
 8008d20:	0800ea9c 	.word	0x0800ea9c
 8008d24:	0800ed98 	.word	0x0800ed98
 8008d28:	2000010c 	.word	0x2000010c
 8008d2c:	20000109 	.word	0x20000109
 8008d30:	0800edb8 	.word	0x0800edb8
            } else {
              recv_data = cseg->p;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a71      	ldr	r2, [pc, #452]	; (8008f00 <tcp_receive+0xdcc>)
 8008d3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	899b      	ldrh	r3, [r3, #12]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fb fb15 	bl	800437a <lwip_htons>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008d5a:	4b6a      	ldr	r3, [pc, #424]	; (8008f04 <tcp_receive+0xdd0>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f043 0320 	orr.w	r3, r3, #32
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	4b67      	ldr	r3, [pc, #412]	; (8008f04 <tcp_receive+0xdd0>)
 8008d66:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d102      	bne.n	8008d76 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2207      	movs	r2, #7
 8008d74:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7fd fd77 	bl	8006872 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	f43f af47 	beq.w	8008c2c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7e9b      	ldrb	r3, [r3, #26]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00e      	beq.n	8008dc8 <tcp_receive+0xc94>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7e9b      	ldrb	r3, [r3, #26]
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	769a      	strb	r2, [r3, #26]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7e9b      	ldrb	r3, [r3, #26]
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008dc6:	e181      	b.n	80090cc <tcp_receive+0xf98>
        tcp_ack(pcb);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7e9b      	ldrb	r3, [r3, #26]
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008dd6:	e179      	b.n	80090cc <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc93 	bl	8009704 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d106      	bne.n	8008df4 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008de6:	4848      	ldr	r0, [pc, #288]	; (8008f08 <tcp_receive+0xdd4>)
 8008de8:	f7fd fd5b 	bl	80068a2 <tcp_seg_copy>
 8008dec:	4602      	mov	r2, r0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8008df2:	e16b      	b.n	80090cc <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfe:	e150      	b.n	80090a2 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <tcp_receive+0xdd8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d11d      	bne.n	8008e4a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	; (8008f08 <tcp_receive+0xdd4>)
 8008e10:	891a      	ldrh	r2, [r3, #8]
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	891b      	ldrh	r3, [r3, #8]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	f240 8148 	bls.w	80090ac <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008e1c:	483a      	ldr	r0, [pc, #232]	; (8008f08 <tcp_receive+0xdd4>)
 8008e1e:	f7fd fd40 	bl	80068a2 <tcp_seg_copy>
 8008e22:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 8142 	beq.w	80090b0 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <tcp_receive+0xd06>
                    prev->next = cseg;
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e002      	b.n	8008e40 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff f900 	bl	8008048 <tcp_oos_insert_segment>
                }
                break;
 8008e48:	e132      	b.n	80090b0 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d117      	bne.n	8008e80 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008e50:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <tcp_receive+0xdd8>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da57      	bge.n	8008f10 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008e60:	4829      	ldr	r0, [pc, #164]	; (8008f08 <tcp_receive+0xdd4>)
 8008e62:	f7fd fd1e 	bl	80068a2 <tcp_seg_copy>
 8008e66:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8122 	beq.w	80090b4 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f7ff f8e5 	bl	8008048 <tcp_oos_insert_segment>
                  }
                  break;
 8008e7e:	e119      	b.n	80090b4 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008e80:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <tcp_receive+0xdd8>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db3e      	blt.n	8008f10 <tcp_receive+0xddc>
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <tcp_receive+0xdd8>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc35      	bgt.n	8008f10 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008ea4:	4818      	ldr	r0, [pc, #96]	; (8008f08 <tcp_receive+0xdd4>)
 8008ea6:	f7fd fcfc 	bl	80068a2 <tcp_seg_copy>
 8008eaa:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8102 	beq.w	80090b8 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ebc:	8912      	ldrh	r2, [r2, #8]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <tcp_receive+0xdd8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd12      	ble.n	8008ef0 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <tcp_receive+0xdd8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	891b      	ldrh	r3, [r3, #8]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fc f9f6 	bl	80052dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff f8a5 	bl	8008048 <tcp_oos_insert_segment>
                  }
                  break;
 8008efe:	e0db      	b.n	80090b8 <tcp_receive+0xf84>
 8008f00:	2000010c 	.word	0x2000010c
 8008f04:	20000109 	.word	0x20000109
 8008f08:	200000dc 	.word	0x200000dc
 8008f0c:	200000fc 	.word	0x200000fc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 80bf 	bne.w	8009098 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008f1a:	4b7c      	ldr	r3, [pc, #496]	; (800910c <tcp_receive+0xfd8>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f340 80b6 	ble.w	8009098 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	899b      	ldrh	r3, [r3, #12]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fb fa20 	bl	800437a <lwip_htons>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 80bb 	bne.w	80090bc <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008f46:	4872      	ldr	r0, [pc, #456]	; (8009110 <tcp_receive+0xfdc>)
 8008f48:	f7fd fcab 	bl	80068a2 <tcp_seg_copy>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80b2 	beq.w	80090c0 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f64:	8912      	ldrh	r2, [r2, #8]
 8008f66:	441a      	add	r2, r3
 8008f68:	4b68      	ldr	r3, [pc, #416]	; (800910c <tcp_receive+0xfd8>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd12      	ble.n	8008f98 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008f72:	4b66      	ldr	r3, [pc, #408]	; (800910c <tcp_receive+0xfd8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	891b      	ldrh	r3, [r3, #8]
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fc f9a2 	bl	80052dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008f98:	4b5e      	ldr	r3, [pc, #376]	; (8009114 <tcp_receive+0xfe0>)
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b5b      	ldr	r3, [pc, #364]	; (800910c <tcp_receive+0xfd8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	441a      	add	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fac:	440b      	add	r3, r1
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f340 8085 	ble.w	80090c0 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	899b      	ldrh	r3, [r3, #12]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fb f9da 	bl	800437a <lwip_htons>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01e      	beq.n	800900e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	899b      	ldrh	r3, [r3, #12]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fde:	b29c      	uxth	r4, r3
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	899b      	ldrh	r3, [r3, #12]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fb f9c5 	bl	800437a <lwip_htons>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fb f9be 	bl	800437a <lwip_htons>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	4322      	orrs	r2, r4
 800900a:	b292      	uxth	r2, r2
 800900c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	4413      	add	r3, r2
 800901a:	b299      	uxth	r1, r3
 800901c:	4b3b      	ldr	r3, [pc, #236]	; (800910c <tcp_receive+0xfd8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	b29a      	uxth	r2, r3
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	1a8a      	subs	r2, r1, r2
 8009028:	b292      	uxth	r2, r2
 800902a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	891b      	ldrh	r3, [r3, #8]
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fc f94e 	bl	80052dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	891c      	ldrh	r4, [r3, #8]
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	899b      	ldrh	r3, [r3, #12]
 800904e:	b29b      	uxth	r3, r3
 8009050:	4618      	mov	r0, r3
 8009052:	f7fb f992 	bl	800437a <lwip_htons>
 8009056:	4603      	mov	r3, r0
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <tcp_receive+0xf30>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <tcp_receive+0xf32>
 8009064:	2300      	movs	r3, #0
 8009066:	4423      	add	r3, r4
 8009068:	b29a      	uxth	r2, r3
 800906a:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <tcp_receive+0xfe0>)
 800906c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800906e:	4b29      	ldr	r3, [pc, #164]	; (8009114 <tcp_receive+0xfe0>)
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	4b25      	ldr	r3, [pc, #148]	; (800910c <tcp_receive+0xfd8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	441a      	add	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009082:	440b      	add	r3, r1
 8009084:	429a      	cmp	r2, r3
 8009086:	d01b      	beq.n	80090c0 <tcp_receive+0xf8c>
 8009088:	4b23      	ldr	r3, [pc, #140]	; (8009118 <tcp_receive+0xfe4>)
 800908a:	f240 627b 	movw	r2, #1659	; 0x67b
 800908e:	4923      	ldr	r1, [pc, #140]	; (800911c <tcp_receive+0xfe8>)
 8009090:	4823      	ldr	r0, [pc, #140]	; (8009120 <tcp_receive+0xfec>)
 8009092:	f003 ff55 	bl	800cf40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009096:	e013      	b.n	80090c0 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f47f aeab 	bne.w	8008e00 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80090aa:	e00f      	b.n	80090cc <tcp_receive+0xf98>
                break;
 80090ac:	bf00      	nop
 80090ae:	e00d      	b.n	80090cc <tcp_receive+0xf98>
                break;
 80090b0:	bf00      	nop
 80090b2:	e00b      	b.n	80090cc <tcp_receive+0xf98>
                  break;
 80090b4:	bf00      	nop
 80090b6:	e009      	b.n	80090cc <tcp_receive+0xf98>
                  break;
 80090b8:	bf00      	nop
 80090ba:	e007      	b.n	80090cc <tcp_receive+0xf98>
                  break;
 80090bc:	bf00      	nop
 80090be:	e005      	b.n	80090cc <tcp_receive+0xf98>
                break;
 80090c0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80090c2:	e003      	b.n	80090cc <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fb1d 	bl	8009704 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090ca:	e01a      	b.n	8009102 <tcp_receive+0xfce>
 80090cc:	e019      	b.n	8009102 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80090ce:	4b0f      	ldr	r3, [pc, #60]	; (800910c <tcp_receive+0xfd8>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db0a      	blt.n	80090f2 <tcp_receive+0xfbe>
 80090dc:	4b0b      	ldr	r3, [pc, #44]	; (800910c <tcp_receive+0xfd8>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80090e8:	440b      	add	r3, r1
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	3301      	adds	r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dd07      	ble.n	8009102 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7e9b      	ldrb	r3, [r3, #26]
 80090f6:	f043 0302 	orr.w	r3, r3, #2
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009100:	e7ff      	b.n	8009102 <tcp_receive+0xfce>
 8009102:	bf00      	nop
 8009104:	3734      	adds	r7, #52	; 0x34
 8009106:	46bd      	mov	sp, r7
 8009108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910a:	bf00      	nop
 800910c:	200000fc 	.word	0x200000fc
 8009110:	200000dc 	.word	0x200000dc
 8009114:	20000106 	.word	0x20000106
 8009118:	0800ea58 	.word	0x0800ea58
 800911c:	0800ed24 	.word	0x0800ed24
 8009120:	0800ea9c 	.word	0x0800ea9c

08009124 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800912a:	4b18      	ldr	r3, [pc, #96]	; (800918c <tcp_getoptbyte+0x68>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <tcp_getoptbyte+0x1a>
 8009132:	4b17      	ldr	r3, [pc, #92]	; (8009190 <tcp_getoptbyte+0x6c>)
 8009134:	881a      	ldrh	r2, [r3, #0]
 8009136:	4b17      	ldr	r3, [pc, #92]	; (8009194 <tcp_getoptbyte+0x70>)
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d20e      	bcs.n	800915c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800913e:	4b16      	ldr	r3, [pc, #88]	; (8009198 <tcp_getoptbyte+0x74>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3314      	adds	r3, #20
 8009144:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009146:	4b12      	ldr	r3, [pc, #72]	; (8009190 <tcp_getoptbyte+0x6c>)
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	b291      	uxth	r1, r2
 800914e:	4a10      	ldr	r2, [pc, #64]	; (8009190 <tcp_getoptbyte+0x6c>)
 8009150:	8011      	strh	r1, [r2, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	4413      	add	r3, r2
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	e010      	b.n	800917e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800915c:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <tcp_getoptbyte+0x6c>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	b291      	uxth	r1, r2
 8009164:	4a0a      	ldr	r2, [pc, #40]	; (8009190 <tcp_getoptbyte+0x6c>)
 8009166:	8011      	strh	r1, [r2, #0]
 8009168:	b2da      	uxtb	r2, r3
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <tcp_getoptbyte+0x70>)
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <tcp_getoptbyte+0x68>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	4413      	add	r3, r2
 800917c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	200000f4 	.word	0x200000f4
 8009190:	200000f8 	.word	0x200000f8
 8009194:	200000f2 	.word	0x200000f2
 8009198:	200000ec 	.word	0x200000ec

0800919c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80091a4:	4b2d      	ldr	r3, [pc, #180]	; (800925c <tcp_parseopt+0xc0>)
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d053      	beq.n	8009254 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80091ac:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <tcp_parseopt+0xc4>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e043      	b.n	800923c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80091b4:	f7ff ffb6 	bl	8009124 <tcp_getoptbyte>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d03c      	beq.n	800923c <tcp_parseopt+0xa0>
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d002      	beq.n	80091cc <tcp_parseopt+0x30>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d03f      	beq.n	800924a <tcp_parseopt+0xae>
 80091ca:	e026      	b.n	800921a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80091cc:	f7ff ffaa 	bl	8009124 <tcp_getoptbyte>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d13b      	bne.n	800924e <tcp_parseopt+0xb2>
 80091d6:	4b22      	ldr	r3, [pc, #136]	; (8009260 <tcp_parseopt+0xc4>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	3302      	adds	r3, #2
 80091dc:	4a1f      	ldr	r2, [pc, #124]	; (800925c <tcp_parseopt+0xc0>)
 80091de:	8812      	ldrh	r2, [r2, #0]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	dc34      	bgt.n	800924e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80091e4:	f7ff ff9e 	bl	8009124 <tcp_getoptbyte>
 80091e8:	4603      	mov	r3, r0
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80091f0:	f7ff ff98 	bl	8009124 <tcp_getoptbyte>
 80091f4:	4603      	mov	r3, r0
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	89bb      	ldrh	r3, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80091fe:	89bb      	ldrh	r3, [r7, #12]
 8009200:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009204:	d804      	bhi.n	8009210 <tcp_parseopt+0x74>
 8009206:	89bb      	ldrh	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <tcp_parseopt+0x74>
 800920c:	89ba      	ldrh	r2, [r7, #12]
 800920e:	e001      	b.n	8009214 <tcp_parseopt+0x78>
 8009210:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8009218:	e010      	b.n	800923c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800921a:	f7ff ff83 	bl	8009124 <tcp_getoptbyte>
 800921e:	4603      	mov	r3, r0
 8009220:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8009222:	7afb      	ldrb	r3, [r7, #11]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d914      	bls.n	8009252 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	b29a      	uxth	r2, r3
 800922c:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <tcp_parseopt+0xc4>)
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	4413      	add	r3, r2
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b02      	subs	r3, #2
 8009236:	b29a      	uxth	r2, r3
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <tcp_parseopt+0xc4>)
 800923a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800923c:	4b08      	ldr	r3, [pc, #32]	; (8009260 <tcp_parseopt+0xc4>)
 800923e:	881a      	ldrh	r2, [r3, #0]
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <tcp_parseopt+0xc0>)
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d3b5      	bcc.n	80091b4 <tcp_parseopt+0x18>
 8009248:	e004      	b.n	8009254 <tcp_parseopt+0xb8>
        return;
 800924a:	bf00      	nop
 800924c:	e002      	b.n	8009254 <tcp_parseopt+0xb8>
          return;
 800924e:	bf00      	nop
 8009250:	e000      	b.n	8009254 <tcp_parseopt+0xb8>
          return;
 8009252:	bf00      	nop
      }
    }
  }
}
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200000f0 	.word	0x200000f0
 8009260:	200000f8 	.word	0x200000f8

08009264 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <tcp_trigger_input_pcb_close+0x1c>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f043 0310 	orr.w	r3, r3, #16
 8009270:	b2da      	uxtb	r2, r3
 8009272:	4b03      	ldr	r3, [pc, #12]	; (8009280 <tcp_trigger_input_pcb_close+0x1c>)
 8009274:	701a      	strb	r2, [r3, #0]
}
 8009276:	bf00      	nop
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000109 	.word	0x20000109

08009284 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	817b      	strh	r3, [r7, #10]
 8009292:	4613      	mov	r3, r2
 8009294:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009296:	897a      	ldrh	r2, [r7, #10]
 8009298:	893b      	ldrh	r3, [r7, #8]
 800929a:	4413      	add	r3, r2
 800929c:	b29b      	uxth	r3, r3
 800929e:	3314      	adds	r3, #20
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	4619      	mov	r1, r3
 80092a6:	2001      	movs	r0, #1
 80092a8:	f7fb fe1a 	bl	8004ee0 <pbuf_alloc>
 80092ac:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d057      	beq.n	8009364 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	895b      	ldrh	r3, [r3, #10]
 80092b8:	461a      	mov	r2, r3
 80092ba:	897b      	ldrh	r3, [r7, #10]
 80092bc:	3314      	adds	r3, #20
 80092be:	429a      	cmp	r2, r3
 80092c0:	da05      	bge.n	80092ce <tcp_output_alloc_header+0x4a>
 80092c2:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <tcp_output_alloc_header+0xec>)
 80092c4:	2273      	movs	r2, #115	; 0x73
 80092c6:	492b      	ldr	r1, [pc, #172]	; (8009374 <tcp_output_alloc_header+0xf0>)
 80092c8:	482b      	ldr	r0, [pc, #172]	; (8009378 <tcp_output_alloc_header+0xf4>)
 80092ca:	f003 fe39 	bl	800cf40 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8adb      	ldrh	r3, [r3, #22]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fb f84e 	bl	800437a <lwip_htons>
 80092de:	4603      	mov	r3, r0
 80092e0:	461a      	mov	r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8b1b      	ldrh	r3, [r3, #24]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fb f845 	bl	800437a <lwip_htons>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009302:	4618      	mov	r0, r3
 8009304:	f7fb f847 	bl	8004396 <lwip_htonl>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800930e:	897b      	ldrh	r3, [r7, #10]
 8009310:	089b      	lsrs	r3, r3, #2
 8009312:	b29b      	uxth	r3, r3
 8009314:	3305      	adds	r3, #5
 8009316:	b29b      	uxth	r3, r3
 8009318:	031b      	lsls	r3, r3, #12
 800931a:	b29b      	uxth	r3, r3
 800931c:	f043 0310 	orr.w	r3, r3, #16
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	f7fb f829 	bl	800437a <lwip_htons>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009334:	4618      	mov	r0, r3
 8009336:	f7fb f820 	bl	800437a <lwip_htons>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2200      	movs	r2, #0
 8009346:	741a      	strb	r2, [r3, #16]
 8009348:	2200      	movs	r2, #0
 800934a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2200      	movs	r2, #0
 8009350:	749a      	strb	r2, [r3, #18]
 8009352:	2200      	movs	r2, #0
 8009354:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009364:	697b      	ldr	r3, [r7, #20]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	0800ede0 	.word	0x0800ede0
 8009374:	0800ee14 	.word	0x0800ee14
 8009378:	0800ee44 	.word	0x0800ee44

0800937c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800937c:	b590      	push	{r4, r7, lr}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02d      	beq.n	80093e8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	e002      	b.n	800939a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1f8      	bne.n	8009394 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	899b      	ldrh	r3, [r3, #12]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fa ffe5 	bl	800437a <lwip_htons>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d116      	bne.n	80093e8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	899b      	ldrh	r3, [r3, #12]
 80093c0:	b29c      	uxth	r4, r3
 80093c2:	2001      	movs	r0, #1
 80093c4:	f7fa ffd9 	bl	800437a <lwip_htons>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	4322      	orrs	r2, r4
 80093d2:	b292      	uxth	r2, r2
 80093d4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7e9b      	ldrb	r3, [r3, #26]
 80093da:	f043 0320 	orr.w	r3, r3, #32
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e004      	b.n	80093f2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80093e8:	2101      	movs	r1, #1
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f88e 	bl	800950c <tcp_enqueue_flags>
 80093f0:	4603      	mov	r3, r0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}
	...

080093fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800940c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800941a:	2003      	movs	r0, #3
 800941c:	f7fb fb5c 	bl	8004ad8 <memp_malloc>
 8009420:	6138      	str	r0, [r7, #16]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009428:	68b8      	ldr	r0, [r7, #8]
 800942a:	f7fc f8cb 	bl	80055c4 <pbuf_free>
    return NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	e061      	b.n	80094f6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009438:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	891a      	ldrh	r2, [r3, #8]
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	b29b      	uxth	r3, r3
 800944e:	429a      	cmp	r2, r3
 8009450:	d205      	bcs.n	800945e <tcp_create_segment+0x62>
 8009452:	4b2b      	ldr	r3, [pc, #172]	; (8009500 <tcp_create_segment+0x104>)
 8009454:	22ba      	movs	r2, #186	; 0xba
 8009456:	492b      	ldr	r1, [pc, #172]	; (8009504 <tcp_create_segment+0x108>)
 8009458:	482b      	ldr	r0, [pc, #172]	; (8009508 <tcp_create_segment+0x10c>)
 800945a:	f003 fd71 	bl	800cf40 <iprintf>
  seg->len = p->tot_len - optlen;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	891a      	ldrh	r2, [r3, #8]
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	b29b      	uxth	r3, r3
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	b29a      	uxth	r2, r3
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800946e:	2114      	movs	r1, #20
 8009470:	68b8      	ldr	r0, [r7, #8]
 8009472:	f7fc f883 	bl	800557c <pbuf_header>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800947c:	6938      	ldr	r0, [r7, #16]
 800947e:	f7fd f9f8 	bl	8006872 <tcp_seg_free>
    return NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	e037      	b.n	80094f6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8ada      	ldrh	r2, [r3, #22]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68dc      	ldr	r4, [r3, #12]
 8009498:	4610      	mov	r0, r2
 800949a:	f7fa ff6e 	bl	800437a <lwip_htons>
 800949e:	4603      	mov	r3, r0
 80094a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8b1a      	ldrh	r2, [r3, #24]
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	68dc      	ldr	r4, [r3, #12]
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fa ff65 	bl	800437a <lwip_htons>
 80094b0:	4603      	mov	r3, r0
 80094b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	68dc      	ldr	r4, [r3, #12]
 80094b8:	6838      	ldr	r0, [r7, #0]
 80094ba:	f7fa ff6c 	bl	8004396 <lwip_htonl>
 80094be:	4603      	mov	r3, r0
 80094c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	089b      	lsrs	r3, r3, #2
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3305      	adds	r3, #5
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	031b      	lsls	r3, r3, #12
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4313      	orrs	r3, r2
 80094d8:	b29a      	uxth	r2, r3
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	68dc      	ldr	r4, [r3, #12]
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fa ff4b 	bl	800437a <lwip_htons>
 80094e4:	4603      	mov	r3, r0
 80094e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	749a      	strb	r2, [r3, #18]
 80094f0:	2200      	movs	r2, #0
 80094f2:	74da      	strb	r2, [r3, #19]
  return seg;
 80094f4:	693b      	ldr	r3, [r7, #16]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}
 80094fe:	bf00      	nop
 8009500:	0800ede0 	.word	0x0800ede0
 8009504:	0800ee6c 	.word	0x0800ee6c
 8009508:	0800ee44 	.word	0x0800ee44

0800950c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	; 0x28
 8009510:	af02      	add	r7, sp, #8
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <tcp_enqueue_flags+0x2c>
 800952a:	4b6f      	ldr	r3, [pc, #444]	; (80096e8 <tcp_enqueue_flags+0x1dc>)
 800952c:	f240 321b 	movw	r2, #795	; 0x31b
 8009530:	496e      	ldr	r1, [pc, #440]	; (80096ec <tcp_enqueue_flags+0x1e0>)
 8009532:	486f      	ldr	r0, [pc, #444]	; (80096f0 <tcp_enqueue_flags+0x1e4>)
 8009534:	f003 fd04 	bl	800cf40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800953e:	2b08      	cmp	r3, #8
 8009540:	d806      	bhi.n	8009550 <tcp_enqueue_flags+0x44>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009548:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800954c:	4293      	cmp	r3, r2
 800954e:	d90e      	bls.n	800956e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	7e9b      	ldrb	r3, [r3, #26]
 800955e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009562:	b2da      	uxtb	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	e0b7      	b.n	80096de <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8009578:	2301      	movs	r3, #1
 800957a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800957c:	7ffb      	ldrb	r3, [r7, #31]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	b29b      	uxth	r3, r3
 800958c:	2200      	movs	r2, #0
 800958e:	4619      	mov	r1, r3
 8009590:	2000      	movs	r0, #0
 8009592:	f7fb fca5 	bl	8004ee0 <pbuf_alloc>
 8009596:	6138      	str	r0, [r7, #16]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7e9b      	ldrb	r3, [r3, #26]
 80095a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80095ac:	f04f 33ff 	mov.w	r3, #4294967295
 80095b0:	e095      	b.n	80096de <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	895a      	ldrh	r2, [r3, #10]
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d206      	bcs.n	80095cc <tcp_enqueue_flags+0xc0>
 80095be:	4b4a      	ldr	r3, [pc, #296]	; (80096e8 <tcp_enqueue_flags+0x1dc>)
 80095c0:	f240 3241 	movw	r2, #833	; 0x341
 80095c4:	494b      	ldr	r1, [pc, #300]	; (80096f4 <tcp_enqueue_flags+0x1e8>)
 80095c6:	484a      	ldr	r0, [pc, #296]	; (80096f0 <tcp_enqueue_flags+0x1e4>)
 80095c8:	f003 fcba 	bl	800cf40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	7ffb      	ldrb	r3, [r7, #31]
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	460b      	mov	r3, r1
 80095d8:	6939      	ldr	r1, [r7, #16]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ff0e 	bl	80093fc <tcp_create_segment>
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7e9b      	ldrb	r3, [r3, #26]
 80095ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	e070      	b.n	80096de <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <tcp_enqueue_flags+0x10a>
 8009608:	4b37      	ldr	r3, [pc, #220]	; (80096e8 <tcp_enqueue_flags+0x1dc>)
 800960a:	f240 3249 	movw	r2, #841	; 0x349
 800960e:	493a      	ldr	r1, [pc, #232]	; (80096f8 <tcp_enqueue_flags+0x1ec>)
 8009610:	4837      	ldr	r0, [pc, #220]	; (80096f0 <tcp_enqueue_flags+0x1e4>)
 8009612:	f003 fc95 	bl	800cf40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	891b      	ldrh	r3, [r3, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <tcp_enqueue_flags+0x120>
 800961e:	4b32      	ldr	r3, [pc, #200]	; (80096e8 <tcp_enqueue_flags+0x1dc>)
 8009620:	f240 324a 	movw	r2, #842	; 0x34a
 8009624:	4935      	ldr	r1, [pc, #212]	; (80096fc <tcp_enqueue_flags+0x1f0>)
 8009626:	4832      	ldr	r0, [pc, #200]	; (80096f0 <tcp_enqueue_flags+0x1e4>)
 8009628:	f003 fc8a 	bl	800cf40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009630:	2b00      	cmp	r3, #0
 8009632:	d103      	bne.n	800963c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	669a      	str	r2, [r3, #104]	; 0x68
 800963a:	e00d      	b.n	8009658 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	e002      	b.n	800964a <tcp_enqueue_flags+0x13e>
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f8      	bne.n	8009644 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <tcp_enqueue_flags+0x168>
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7e9b      	ldrb	r3, [r3, #26]
 800968c:	f043 0320 	orr.w	r3, r3, #32
 8009690:	b2da      	uxtb	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fc f826 	bl	80056ec <pbuf_clen>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096aa:	4413      	add	r3, r2
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00e      	beq.n	80096dc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <tcp_enqueue_flags+0x1d0>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <tcp_enqueue_flags+0x1d0>
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <tcp_enqueue_flags+0x1dc>)
 80096d0:	f240 326d 	movw	r2, #877	; 0x36d
 80096d4:	490a      	ldr	r1, [pc, #40]	; (8009700 <tcp_enqueue_flags+0x1f4>)
 80096d6:	4806      	ldr	r0, [pc, #24]	; (80096f0 <tcp_enqueue_flags+0x1e4>)
 80096d8:	f003 fc32 	bl	800cf40 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3720      	adds	r7, #32
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	0800ede0 	.word	0x0800ede0
 80096ec:	0800f0e4 	.word	0x0800f0e4
 80096f0:	0800ee44 	.word	0x0800ee44
 80096f4:	0800f13c 	.word	0x0800f13c
 80096f8:	0800f178 	.word	0x0800f178
 80096fc:	0800f190 	.word	0x0800f190
 8009700:	0800f1bc 	.word	0x0800f1bc

08009704 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b08b      	sub	sp, #44	; 0x2c
 8009708:	af04      	add	r7, sp, #16
 800970a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009710:	7dbb      	ldrb	r3, [r7, #22]
 8009712:	b29c      	uxth	r4, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009718:	4618      	mov	r0, r3
 800971a:	f7fa fe3c 	bl	8004396 <lwip_htonl>
 800971e:	4603      	mov	r3, r0
 8009720:	2200      	movs	r2, #0
 8009722:	4621      	mov	r1, r4
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff fdad 	bl	8009284 <tcp_output_alloc_header>
 800972a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	7e9b      	ldrb	r3, [r3, #26]
 8009736:	f043 0303 	orr.w	r3, r3, #3
 800973a:	b2da      	uxtb	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009740:	f06f 0301 	mvn.w	r3, #1
 8009744:	e036      	b.n	80097b4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3304      	adds	r3, #4
 800974a:	4618      	mov	r0, r3
 800974c:	f002 fa4e 	bl	800bbec <ip4_route>
 8009750:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009758:	23fc      	movs	r3, #252	; 0xfc
 800975a:	75fb      	strb	r3, [r7, #23]
 800975c:	e012      	b.n	8009784 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	1d18      	adds	r0, r3, #4
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7a9c      	ldrb	r4, [r3, #10]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7a5b      	ldrb	r3, [r3, #9]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	9202      	str	r2, [sp, #8]
 8009770:	2206      	movs	r2, #6
 8009772:	9201      	str	r2, [sp, #4]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	4623      	mov	r3, r4
 8009778:	4602      	mov	r2, r0
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f002 fbde 	bl	800bf3c <ip4_output_if>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009784:	6938      	ldr	r0, [r7, #16]
 8009786:	f7fb ff1d 	bl	80055c4 <pbuf_free>

  if (err != ERR_OK) {
 800978a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d007      	beq.n	80097a2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7e9b      	ldrb	r3, [r3, #26]
 8009796:	f043 0303 	orr.w	r3, r3, #3
 800979a:	b2da      	uxtb	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	769a      	strb	r2, [r3, #26]
 80097a0:	e006      	b.n	80097b0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7e9b      	ldrb	r3, [r3, #26]
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80097b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}

080097bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7d1b      	ldrb	r3, [r3, #20]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d106      	bne.n	80097da <tcp_output+0x1e>
 80097cc:	4b9b      	ldr	r3, [pc, #620]	; (8009a3c <tcp_output+0x280>)
 80097ce:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80097d2:	499b      	ldr	r1, [pc, #620]	; (8009a40 <tcp_output+0x284>)
 80097d4:	489b      	ldr	r0, [pc, #620]	; (8009a44 <tcp_output+0x288>)
 80097d6:	f003 fbb3 	bl	800cf40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80097da:	4b9b      	ldr	r3, [pc, #620]	; (8009a48 <tcp_output+0x28c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d101      	bne.n	80097e8 <tcp_output+0x2c>
    return ERR_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	e1cf      	b.n	8009b88 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d203      	bcs.n	8009800 <tcp_output+0x44>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097fe:	e002      	b.n	8009806 <tcp_output+0x4a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009806:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	7e9b      	ldrb	r3, [r3, #26]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d017      	beq.n	800984a <tcp_output+0x8e>
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00f      	beq.n	8009840 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	4618      	mov	r0, r3
 8009828:	f7fa fdb5 	bl	8004396 <lwip_htonl>
 800982c:	4602      	mov	r2, r0
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	8912      	ldrh	r2, [r2, #8]
 8009838:	4413      	add	r3, r2
     (seg == NULL ||
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	429a      	cmp	r2, r3
 800983e:	d204      	bcs.n	800984a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ff5f 	bl	8009704 <tcp_send_empty_ack>
 8009846:	4603      	mov	r3, r0
 8009848:	e19e      	b.n	8009b88 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800984e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8009856:	e002      	b.n	800985e <tcp_output+0xa2>
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1f8      	bne.n	8009858 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	4618      	mov	r0, r3
 800986c:	f002 f9be 	bl	800bbec <ip4_route>
 8009870:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <tcp_output+0xc2>
    return ERR_RTE;
 8009878:	f06f 0303 	mvn.w	r3, #3
 800987c:	e184      	b.n	8009b88 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <tcp_output+0xd0>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d111      	bne.n	80098b0 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <tcp_output+0xdc>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	3304      	adds	r3, #4
 8009896:	e000      	b.n	800989a <tcp_output+0xde>
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <tcp_output+0xec>
      return ERR_RTE;
 80098a2:	f06f 0303 	mvn.w	r3, #3
 80098a6:	e16f      	b.n	8009b88 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 813e 	beq.w	8009b34 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fa fd69 	bl	8004396 <lwip_htonl>
 80098c4:	4602      	mov	r2, r0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	8912      	ldrh	r2, [r2, #8]
 80098d0:	4413      	add	r3, r2
  if (seg != NULL &&
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	f080 812d 	bcs.w	8009b34 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8129 	beq.w	8009b34 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098e8:	461a      	mov	r2, r3
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f040 8121 	bne.w	8009b34 <tcp_output+0x378>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 811c 	bne.w	8009b34 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009902:	2b00      	cmp	r3, #0
 8009904:	f040 812b 	bne.w	8009b5e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009918:	e121      	b.n	8009b5e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	b29b      	uxth	r3, r3
 8009922:	4618      	mov	r0, r3
 8009924:	f7fa fd29 	bl	800437a <lwip_htons>
 8009928:	4603      	mov	r3, r0
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d006      	beq.n	8009940 <tcp_output+0x184>
 8009932:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <tcp_output+0x280>)
 8009934:	f240 4246 	movw	r2, #1094	; 0x446
 8009938:	4944      	ldr	r1, [pc, #272]	; (8009a4c <tcp_output+0x290>)
 800993a:	4842      	ldr	r0, [pc, #264]	; (8009a44 <tcp_output+0x288>)
 800993c:	f003 fb00 	bl	800cf40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01f      	beq.n	8009988 <tcp_output+0x1cc>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7e9b      	ldrb	r3, [r3, #26]
 800994c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009950:	2b00      	cmp	r3, #0
 8009952:	d119      	bne.n	8009988 <tcp_output+0x1cc>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <tcp_output+0x1b8>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d110      	bne.n	8009988 <tcp_output+0x1cc>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800996a:	891a      	ldrh	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009970:	429a      	cmp	r2, r3
 8009972:	d209      	bcs.n	8009988 <tcp_output+0x1cc>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <tcp_output+0x1cc>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009984:	2b08      	cmp	r3, #8
 8009986:	d901      	bls.n	800998c <tcp_output+0x1d0>
 8009988:	2301      	movs	r3, #1
 800998a:	e000      	b.n	800998e <tcp_output+0x1d2>
 800998c:	2300      	movs	r3, #0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7e9b      	ldrb	r3, [r3, #26]
 8009996:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 80e1 	beq.w	8009b62 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	7d1b      	ldrb	r3, [r3, #20]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d00d      	beq.n	80099c4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	899b      	ldrh	r3, [r3, #12]
 80099ae:	b29c      	uxth	r4, r3
 80099b0:	2010      	movs	r0, #16
 80099b2:	f7fa fce2 	bl	800437a <lwip_htons>
 80099b6:	4603      	mov	r3, r0
 80099b8:	461a      	mov	r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	4322      	orrs	r2, r4
 80099c0:	b292      	uxth	r2, r2
 80099c2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ca:	f000 f8e1 	bl	8009b90 <tcp_output_segment>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80099d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d009      	beq.n	80099ee <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	7e9b      	ldrb	r3, [r3, #26]
 80099de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	769a      	strb	r2, [r3, #26]
      return err;
 80099e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ec:	e0cc      	b.n	8009b88 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7d1b      	ldrb	r3, [r3, #20]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d006      	beq.n	8009a0c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7e9b      	ldrb	r3, [r3, #26]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fa fcbf 	bl	8004396 <lwip_htonl>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	891b      	ldrh	r3, [r3, #8]
 8009a1e:	461d      	mov	r5, r3
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	899b      	ldrh	r3, [r3, #12]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fa fca6 	bl	800437a <lwip_htons>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <tcp_output+0x294>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e00a      	b.n	8009a52 <tcp_output+0x296>
 8009a3c:	0800ede0 	.word	0x0800ede0
 8009a40:	0800f1e4 	.word	0x0800f1e4
 8009a44:	0800ee44 	.word	0x0800ee44
 8009a48:	20006ce8 	.word	0x20006ce8
 8009a4c:	0800f20c 	.word	0x0800f20c
 8009a50:	2300      	movs	r3, #0
 8009a52:	442b      	add	r3, r5
 8009a54:	4423      	add	r3, r4
 8009a56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	da02      	bge.n	8009a6a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	891b      	ldrh	r3, [r3, #8]
 8009a6e:	461c      	mov	r4, r3
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	899b      	ldrh	r3, [r3, #12]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fa fc7e 	bl	800437a <lwip_htons>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <tcp_output+0x2d0>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e000      	b.n	8009a8e <tcp_output+0x2d2>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4423      	add	r3, r4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d049      	beq.n	8009b28 <tcp_output+0x36c>
      seg->next = NULL;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <tcp_output+0x2f2>
        pcb->unacked = seg;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa6:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	623b      	str	r3, [r7, #32]
 8009aac:	e03f      	b.n	8009b2e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fa fc6e 	bl	8004396 <lwip_htonl>
 8009aba:	4604      	mov	r4, r0
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fa fc67 	bl	8004396 <lwip_htonl>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	1ae3      	subs	r3, r4, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da24      	bge.n	8009b1a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	336c      	adds	r3, #108	; 0x6c
 8009ad4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ad6:	e002      	b.n	8009ade <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d011      	beq.n	8009b0a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fa fc51 	bl	8004396 <lwip_htonl>
 8009af4:	4604      	mov	r4, r0
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fa fc4a 	bl	8004396 <lwip_htonl>
 8009b02:	4603      	mov	r3, r0
 8009b04:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dbe6      	blt.n	8009ad8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e009      	b.n	8009b2e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	623b      	str	r3, [r7, #32]
 8009b26:	e002      	b.n	8009b2e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b2a:	f7fc fea2 	bl	8006872 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d015      	beq.n	8009b66 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fa fc28 	bl	8004396 <lwip_htonl>
 8009b46:	4602      	mov	r2, r0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b50:	8912      	ldrh	r2, [r2, #8]
 8009b52:	4413      	add	r3, r2
  while (seg != NULL &&
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	f4bf aedf 	bcs.w	800991a <tcp_output+0x15e>
  }
output_done:
 8009b5c:	e003      	b.n	8009b66 <tcp_output+0x3aa>
    goto output_done;
 8009b5e:	bf00      	nop
 8009b60:	e002      	b.n	8009b68 <tcp_output+0x3ac>
      break;
 8009b62:	bf00      	nop
 8009b64:	e000      	b.n	8009b68 <tcp_output+0x3ac>
output_done:
 8009b66:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d103      	bne.n	8009b78 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7e9b      	ldrb	r3, [r3, #26]
 8009b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3728      	adds	r7, #40	; 0x28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bdb0      	pop	{r4, r5, r7, pc}

08009b90 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009b90:	b5b0      	push	{r4, r5, r7, lr}
 8009b92:	b08c      	sub	sp, #48	; 0x30
 8009b94:	af04      	add	r7, sp, #16
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	89db      	ldrh	r3, [r3, #14]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d001      	beq.n	8009baa <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e08b      	b.n	8009cc2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	68dc      	ldr	r4, [r3, #12]
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7fa fbef 	bl	8004396 <lwip_htonl>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68dc      	ldr	r4, [r3, #12]
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7fa fbd8 	bl	800437a <lwip_htons>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009bd6:	441a      	add	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	3314      	adds	r3, #20
 8009be2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	7a9b      	ldrb	r3, [r3, #10]
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d014      	beq.n	8009c1a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009bfa:	f7fd f8a5 	bl	8006d48 <tcp_eff_send_mss_impl>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009c02:	8b7b      	ldrh	r3, [r7, #26]
 8009c04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fa fbc4 	bl	8004396 <lwip_htonl>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	3304      	adds	r3, #4
 8009c18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da02      	bge.n	8009c2a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10c      	bne.n	8009c4c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8009c32:	4b26      	ldr	r3, [pc, #152]	; (8009ccc <tcp_output_segment+0x13c>)
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fa fba8 	bl	8004396 <lwip_htonl>
 8009c46:	4602      	mov	r2, r0
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	461a      	mov	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	8959      	ldrh	r1, [r3, #10]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	8b3a      	ldrh	r2, [r7, #24]
 8009c68:	1a8a      	subs	r2, r1, r2
 8009c6a:	b292      	uxth	r2, r2
 8009c6c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	8919      	ldrh	r1, [r3, #8]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	8b3a      	ldrh	r2, [r7, #24]
 8009c7a:	1a8a      	subs	r2, r1, r2
 8009c7c:	b292      	uxth	r2, r2
 8009c7e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	68d2      	ldr	r2, [r2, #12]
 8009c88:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	741a      	strb	r2, [r3, #16]
 8009c92:	2200      	movs	r2, #0
 8009c94:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6858      	ldr	r0, [r3, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	1d1c      	adds	r4, r3, #4
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	7a9d      	ldrb	r5, [r3, #10]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	7a5b      	ldrb	r3, [r3, #9]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	9202      	str	r2, [sp, #8]
 8009cac:	2206      	movs	r2, #6
 8009cae:	9201      	str	r2, [sp, #4]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	f002 f941 	bl	800bf3c <ip4_output_if>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8009cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20006cd8 	.word	0x20006cd8

08009cd0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2114      	movs	r1, #20
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	f7fb f8fc 	bl	8004ee0 <pbuf_alloc>
 8009ce8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05b      	beq.n	8009da8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	895b      	ldrh	r3, [r3, #10]
 8009cf4:	2b13      	cmp	r3, #19
 8009cf6:	d806      	bhi.n	8009d06 <tcp_rst+0x36>
 8009cf8:	4b2d      	ldr	r3, [pc, #180]	; (8009db0 <tcp_rst+0xe0>)
 8009cfa:	f240 524d 	movw	r2, #1357	; 0x54d
 8009cfe:	492d      	ldr	r1, [pc, #180]	; (8009db4 <tcp_rst+0xe4>)
 8009d00:	482d      	ldr	r0, [pc, #180]	; (8009db8 <tcp_rst+0xe8>)
 8009d02:	f003 f91d 	bl	800cf40 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009d0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fa fb33 	bl	800437a <lwip_htons>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009d1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fa fb2b 	bl	800437a <lwip_htons>
 8009d24:	4603      	mov	r3, r0
 8009d26:	461a      	mov	r2, r3
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7fa fb32 	bl	8004396 <lwip_htonl>
 8009d32:	4602      	mov	r2, r0
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009d38:	68b8      	ldr	r0, [r7, #8]
 8009d3a:	f7fa fb2c 	bl	8004396 <lwip_htonl>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009d44:	f245 0014 	movw	r0, #20500	; 0x5014
 8009d48:	f7fa fb17 	bl	800437a <lwip_htons>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	461a      	mov	r2, r3
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f042 0208 	orr.w	r2, r2, #8
 8009d5c:	739a      	strb	r2, [r3, #14]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009d64:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	741a      	strb	r2, [r3, #16]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2200      	movs	r2, #0
 8009d74:	749a      	strb	r2, [r3, #18]
 8009d76:	2200      	movs	r2, #0
 8009d78:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009d7a:	6838      	ldr	r0, [r7, #0]
 8009d7c:	f001 ff36 	bl	800bbec <ip4_route>
 8009d80:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	2306      	movs	r3, #6
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	2300      	movs	r3, #0
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	23ff      	movs	r3, #255	; 0xff
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	69f8      	ldr	r0, [r7, #28]
 8009d9c:	f002 f8ce 	bl	800bf3c <ip4_output_if>
  }
  pbuf_free(p);
 8009da0:	69f8      	ldr	r0, [r7, #28]
 8009da2:	f7fb fc0f 	bl	80055c4 <pbuf_free>
 8009da6:	e000      	b.n	8009daa <tcp_rst+0xda>
    return;
 8009da8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	0800ede0 	.word	0x0800ede0
 8009db4:	0800ee14 	.word	0x0800ee14
 8009db8:	0800ee44 	.word	0x0800ee44

08009dbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d029      	beq.n	8009e20 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e002      	b.n	8009dda <tcp_rexmit_rto+0x1e>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f8      	bne.n	8009dd4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009dfe:	2bff      	cmp	r3, #255	; 0xff
 8009e00:	d007      	beq.n	8009e12 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e08:	3301      	adds	r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff fccf 	bl	80097bc <tcp_output>
 8009e1e:	e000      	b.n	8009e22 <tcp_rexmit_rto+0x66>
    return;
 8009e20:	bf00      	nop
}
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d043      	beq.n	8009ec0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e3c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3368      	adds	r3, #104	; 0x68
 8009e4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009e4c:	e002      	b.n	8009e54 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d011      	beq.n	8009e80 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fa fa96 	bl	8004396 <lwip_htonl>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fa fa8f 	bl	8004396 <lwip_htonl>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dbe6      	blt.n	8009e4e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d103      	bne.n	8009e9e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ea4:	2bff      	cmp	r3, #255	; 0xff
 8009ea6:	d007      	beq.n	8009eb8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eae:	3301      	adds	r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8009ebe:	e000      	b.n	8009ec2 <tcp_rexmit+0x9a>
    return;
 8009ec0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd90      	pop	{r4, r7, pc}

08009ec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d04a      	beq.n	8009f6e <tcp_rexmit_fast+0xa6>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7e9b      	ldrb	r3, [r3, #26]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d144      	bne.n	8009f6e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff ff9f 	bl	8009e28 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d207      	bcs.n	8009f0a <tcp_rexmit_fast+0x42>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f00:	0fda      	lsrs	r2, r3, #31
 8009f02:	4413      	add	r3, r2
 8009f04:	105b      	asrs	r3, r3, #1
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	e006      	b.n	8009f18 <tcp_rexmit_fast+0x50>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f10:	0fda      	lsrs	r2, r3, #31
 8009f12:	4413      	add	r3, r2
 8009f14:	105b      	asrs	r3, r3, #1
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009f24:	461a      	mov	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d206      	bcs.n	8009f3e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f48:	4619      	mov	r1, r3
 8009f4a:	0049      	lsls	r1, r1, #1
 8009f4c:	440b      	add	r3, r1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4413      	add	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7e9b      	ldrb	r3, [r3, #26]
 8009f5e:	f043 0304 	orr.w	r3, r3, #4
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b08a      	sub	sp, #40	; 0x28
 8009f7a:	af04      	add	r7, sp, #16
 8009f7c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	3b01      	subs	r3, #1
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fa fa06 	bl	8004396 <lwip_htonl>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff f977 	bl	8009284 <tcp_output_alloc_header>
 8009f96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	e021      	b.n	8009fe8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 fe1f 	bl	800bbec <ip4_route>
 8009fae:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <tcp_keepalive+0x46>
    err = ERR_RTE;
 8009fb6:	23fc      	movs	r3, #252	; 0xfc
 8009fb8:	75fb      	strb	r3, [r7, #23]
 8009fba:	e010      	b.n	8009fde <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	1d1a      	adds	r2, r3, #4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7a98      	ldrb	r0, [r3, #10]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	2306      	movs	r3, #6
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6938      	ldr	r0, [r7, #16]
 8009fd6:	f001 ffb1 	bl	800bf3c <ip4_output_if>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009fde:	6938      	ldr	r0, [r7, #16]
 8009fe0:	f7fb faf0 	bl	80055c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b08f      	sub	sp, #60	; 0x3c
 8009ff4:	af04      	add	r7, sp, #16
 8009ff6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a008:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	e085      	b.n	800a120 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	899b      	ldrh	r3, [r3, #12]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fa f9ac 	bl	800437a <lwip_htons>
 800a022:	4603      	mov	r3, r0
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <tcp_zero_window_probe+0x48>
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	891b      	ldrh	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <tcp_zero_window_probe+0x48>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <tcp_zero_window_probe+0x4a>
 800a038:	2300      	movs	r3, #0
 800a03a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a03c:	7ffb      	ldrb	r3, [r7, #31]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bf0c      	ite	eq
 800a042:	2301      	moveq	r3, #1
 800a044:	2300      	movne	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	8bba      	ldrh	r2, [r7, #28]
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff f915 	bl	8009284 <tcp_output_alloc_header>
 800a05a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	e05b      	b.n	800a120 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a06e:	7ffb      	ldrb	r3, [r7, #31]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00e      	beq.n	800a092 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	899b      	ldrh	r3, [r3, #12]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a07e:	b29c      	uxth	r4, r3
 800a080:	2011      	movs	r0, #17
 800a082:	f7fa f97a 	bl	800437a <lwip_htons>
 800a086:	4603      	mov	r3, r0
 800a088:	4323      	orrs	r3, r4
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	819a      	strh	r2, [r3, #12]
 800a090:	e010      	b.n	800a0b4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	3314      	adds	r3, #20
 800a098:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	6858      	ldr	r0, [r3, #4]
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	891a      	ldrh	r2, [r3, #8]
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	891b      	ldrh	r3, [r3, #8]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	f7fb fc88 	bl	80059c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fa f96b 	bl	8004396 <lwip_htonl>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da02      	bge.n	800a0d8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fd85 	bl	800bbec <ip4_route>
 800a0e2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a0ea:	23fc      	movs	r3, #252	; 0xfc
 800a0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0f0:	e011      	b.n	800a116 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	1d1a      	adds	r2, r3, #4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7a98      	ldrb	r0, [r3, #10]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	9302      	str	r3, [sp, #8]
 800a100:	2306      	movs	r3, #6
 800a102:	9301      	str	r3, [sp, #4]
 800a104:	2300      	movs	r3, #0
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	4603      	mov	r3, r0
 800a10a:	69b8      	ldr	r0, [r7, #24]
 800a10c:	f001 ff16 	bl	800bf3c <ip4_output_if>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a116:	69b8      	ldr	r0, [r7, #24]
 800a118:	f7fb fa54 	bl	80055c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a11c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a120:	4618      	mov	r0, r3
 800a122:	372c      	adds	r7, #44	; 0x2c
 800a124:	46bd      	mov	sp, r7
 800a126:	bd90      	pop	{r4, r7, pc}

0800a128 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a130:	f7fb fcca 	bl	8005ac8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a134:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <tcpip_tcp_timer+0x38>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d103      	bne.n	800a144 <tcpip_tcp_timer+0x1c>
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <tcpip_tcp_timer+0x3c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a144:	2200      	movs	r2, #0
 800a146:	4908      	ldr	r1, [pc, #32]	; (800a168 <tcpip_tcp_timer+0x40>)
 800a148:	20fa      	movs	r0, #250	; 0xfa
 800a14a:	f000 f86f 	bl	800a22c <sys_timeout>
 800a14e:	e002      	b.n	800a156 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <tcpip_tcp_timer+0x44>)
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
  }
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	20006cd4 	.word	0x20006cd4
 800a164:	20006ce4 	.word	0x20006ce4
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	20000118 	.word	0x20000118

0800a170 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a174:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <tcp_timer_needed+0x30>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10f      	bne.n	800a19c <tcp_timer_needed+0x2c>
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <tcp_timer_needed+0x34>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <tcp_timer_needed+0x1c>
 800a184:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <tcp_timer_needed+0x38>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a18c:	4b04      	ldr	r3, [pc, #16]	; (800a1a0 <tcp_timer_needed+0x30>)
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a192:	2200      	movs	r2, #0
 800a194:	4905      	ldr	r1, [pc, #20]	; (800a1ac <tcp_timer_needed+0x3c>)
 800a196:	20fa      	movs	r0, #250	; 0xfa
 800a198:	f000 f848 	bl	800a22c <sys_timeout>
  }
}
 800a19c:	bf00      	nop
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20000118 	.word	0x20000118
 800a1a4:	20006cd4 	.word	0x20006cd4
 800a1a8:	20006ce4 	.word	0x20006ce4
 800a1ac:	0800a129 	.word	0x0800a129

0800a1b0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4903      	ldr	r1, [pc, #12]	; (800a1d8 <cyclic_timer+0x28>)
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f82e 	bl	800a22c <sys_timeout>
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	0800a1b1 	.word	0x0800a1b1

0800a1dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	607b      	str	r3, [r7, #4]
 800a1e6:	e00e      	b.n	800a206 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a1e8:	4a0d      	ldr	r2, [pc, #52]	; (800a220 <sys_timeouts_init+0x44>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	4a0a      	ldr	r2, [pc, #40]	; (800a220 <sys_timeouts_init+0x44>)
 800a1f6:	4413      	add	r3, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	490a      	ldr	r1, [pc, #40]	; (800a224 <sys_timeouts_init+0x48>)
 800a1fc:	f000 f816 	bl	800a22c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3301      	adds	r3, #1
 800a204:	607b      	str	r3, [r7, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d9ed      	bls.n	800a1e8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a20c:	f7fa f8ae 	bl	800436c <sys_now>
 800a210:	4602      	mov	r2, r0
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <sys_timeouts_init+0x4c>)
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	0800faa8 	.word	0x0800faa8
 800a224:	0800a1b1 	.word	0x0800a1b1
 800a228:	20000114 	.word	0x20000114

0800a22c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a238:	2006      	movs	r0, #6
 800a23a:	f7fa fc4d 	bl	8004ad8 <memp_malloc>
 800a23e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f040 8084 	bne.w	800a356 <sys_timeout+0x12a>
 800a24e:	4b44      	ldr	r3, [pc, #272]	; (800a360 <sys_timeout+0x134>)
 800a250:	22d4      	movs	r2, #212	; 0xd4
 800a252:	4944      	ldr	r1, [pc, #272]	; (800a364 <sys_timeout+0x138>)
 800a254:	4844      	ldr	r0, [pc, #272]	; (800a368 <sys_timeout+0x13c>)
 800a256:	f002 fe73 	bl	800cf40 <iprintf>
    return;
 800a25a:	e07c      	b.n	800a356 <sys_timeout+0x12a>
  }

  now = sys_now();
 800a25c:	f7fa f886 	bl	800436c <sys_now>
 800a260:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a262:	4b42      	ldr	r3, [pc, #264]	; (800a36c <sys_timeout+0x140>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <sys_timeout+0x4a>
    diff = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a26e:	4a40      	ldr	r2, [pc, #256]	; (800a370 <sys_timeout+0x144>)
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	e004      	b.n	800a280 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a276:	4b3e      	ldr	r3, [pc, #248]	; (800a370 <sys_timeout+0x144>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	441a      	add	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a29c:	4b33      	ldr	r3, [pc, #204]	; (800a36c <sys_timeout+0x140>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d103      	bne.n	800a2ac <sys_timeout+0x80>
    next_timeout = timeout;
 800a2a4:	4a31      	ldr	r2, [pc, #196]	; (800a36c <sys_timeout+0x140>)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	6013      	str	r3, [r2, #0]
    return;
 800a2aa:	e055      	b.n	800a358 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a2ac:	4b2f      	ldr	r3, [pc, #188]	; (800a36c <sys_timeout+0x140>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d20f      	bcs.n	800a2d8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a2b8:	4b2c      	ldr	r3, [pc, #176]	; (800a36c <sys_timeout+0x140>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6859      	ldr	r1, [r3, #4]
 800a2be:	4b2b      	ldr	r3, [pc, #172]	; (800a36c <sys_timeout+0x140>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	1a8a      	subs	r2, r1, r2
 800a2c6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a2c8:	4b28      	ldr	r3, [pc, #160]	; (800a36c <sys_timeout+0x140>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a2d0:	4a26      	ldr	r2, [pc, #152]	; (800a36c <sys_timeout+0x140>)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	e03f      	b.n	800a358 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a2d8:	4b24      	ldr	r3, [pc, #144]	; (800a36c <sys_timeout+0x140>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e036      	b.n	800a34e <sys_timeout+0x122>
      timeout->time -= t->time;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	1ad2      	subs	r2, r2, r3
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d006      	beq.n	800a304 <sys_timeout+0xd8>
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d921      	bls.n	800a348 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d009      	beq.n	800a320 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6859      	ldr	r1, [r3, #4]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	1a8a      	subs	r2, r1, r2
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	e00b      	b.n	800a338 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	429a      	cmp	r2, r3
 800a328:	d206      	bcs.n	800a338 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a32a:	4b10      	ldr	r3, [pc, #64]	; (800a36c <sys_timeout+0x140>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	441a      	add	r2, r3
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	601a      	str	r2, [r3, #0]
        break;
 800a346:	e007      	b.n	800a358 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	61fb      	str	r3, [r7, #28]
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1c5      	bne.n	800a2e0 <sys_timeout+0xb4>
 800a354:	e000      	b.n	800a358 <sys_timeout+0x12c>
    return;
 800a356:	bf00      	nop
      }
    }
  }
}
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	0800f224 	.word	0x0800f224
 800a364:	0800f258 	.word	0x0800f258
 800a368:	0800f298 	.word	0x0800f298
 800a36c:	20000110 	.word	0x20000110
 800a370:	20000114 	.word	0x20000114

0800a374 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a37a:	4b24      	ldr	r3, [pc, #144]	; (800a40c <sys_check_timeouts+0x98>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d040      	beq.n	800a404 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a382:	f7f9 fff3 	bl	800436c <sys_now>
 800a386:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a388:	4b21      	ldr	r3, [pc, #132]	; (800a410 <sys_check_timeouts+0x9c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a392:	4b20      	ldr	r3, [pc, #128]	; (800a414 <sys_check_timeouts+0xa0>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <sys_check_timeouts+0x2c>
 800a39c:	f7fa fd70 	bl	8004e80 <pbuf_free_ooseq>
      had_one = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a3a4:	4b19      	ldr	r3, [pc, #100]	; (800a40c <sys_check_timeouts+0x98>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d026      	beq.n	800a3fe <sys_check_timeouts+0x8a>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d321      	bcc.n	800a3fe <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <sys_check_timeouts+0x9c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	4a11      	ldr	r2, [pc, #68]	; (800a410 <sys_check_timeouts+0x9c>)
 800a3ca:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a0c      	ldr	r2, [pc, #48]	; (800a40c <sys_check_timeouts+0x98>)
 800a3dc:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	2006      	movs	r0, #6
 800a3ee:	f7fa fbbf 	bl	8004b70 <memp_free>
        if (handler != NULL) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6838      	ldr	r0, [r7, #0]
 800a3fc:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a3fe:	7cfb      	ldrb	r3, [r7, #19]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1c6      	bne.n	800a392 <sys_check_timeouts+0x1e>
  }
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000110 	.word	0x20000110
 800a410:	20000114 	.word	0x20000114
 800a414:	20006ccc 	.word	0x20006ccc

0800a418 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a41c:	bf00      	nop
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a432:	4b17      	ldr	r3, [pc, #92]	; (800a490 <udp_new_port+0x68>)
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	b291      	uxth	r1, r2
 800a43a:	4a15      	ldr	r2, [pc, #84]	; (800a490 <udp_new_port+0x68>)
 800a43c:	8011      	strh	r1, [r2, #0]
 800a43e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a442:	4293      	cmp	r3, r2
 800a444:	d103      	bne.n	800a44e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <udp_new_port+0x68>)
 800a448:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a44c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a44e:	4b11      	ldr	r3, [pc, #68]	; (800a494 <udp_new_port+0x6c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	e011      	b.n	800a47a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	8a5a      	ldrh	r2, [r3, #18]
 800a45a:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <udp_new_port+0x68>)
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d108      	bne.n	800a474 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	3301      	adds	r3, #1
 800a466:	80fb      	strh	r3, [r7, #6]
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a46e:	d3e0      	bcc.n	800a432 <udp_new_port+0xa>
        return 0;
 800a470:	2300      	movs	r3, #0
 800a472:	e007      	b.n	800a484 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	603b      	str	r3, [r7, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1ea      	bne.n	800a456 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a480:	4b03      	ldr	r3, [pc, #12]	; (800a490 <udp_new_port+0x68>)
 800a482:	881b      	ldrh	r3, [r3, #0]
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	20000020 	.word	0x20000020
 800a494:	20006cec 	.word	0x20006cec

0800a498 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d018      	beq.n	800a4de <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d013      	beq.n	800a4da <udp_input_local_match+0x42>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00f      	beq.n	800a4da <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a4ba:	4b14      	ldr	r3, [pc, #80]	; (800a50c <udp_input_local_match+0x74>)
 800a4bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c2:	d00a      	beq.n	800a4da <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	4b10      	ldr	r3, [pc, #64]	; (800a50c <udp_input_local_match+0x74>)
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	405a      	eors	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d110      	bne.n	800a4fc <udp_input_local_match+0x64>
          return 1;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e00f      	b.n	800a4fe <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d009      	beq.n	800a4f8 <udp_input_local_match+0x60>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <udp_input_local_match+0x60>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <udp_input_local_match+0x74>)
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d101      	bne.n	800a4fc <udp_input_local_match+0x64>
      return 1;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e000      	b.n	800a4fe <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	200037a4 	.word	0x200037a4

0800a510 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a510:	b590      	push	{r4, r7, lr}
 800a512:	b08d      	sub	sp, #52	; 0x34
 800a514:	af02      	add	r7, sp, #8
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	895b      	ldrh	r3, [r3, #10]
 800a522:	2b07      	cmp	r3, #7
 800a524:	d803      	bhi.n	800a52e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7fb f84c 	bl	80055c4 <pbuf_free>
    goto end;
 800a52c:	e0c6      	b.n	800a6bc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a534:	4b63      	ldr	r3, [pc, #396]	; (800a6c4 <udp_input+0x1b4>)
 800a536:	695a      	ldr	r2, [r3, #20]
 800a538:	4b62      	ldr	r3, [pc, #392]	; (800a6c4 <udp_input+0x1b4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f001 fdce 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800a544:	4603      	mov	r3, r0
 800a546:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f9 ff13 	bl	800437a <lwip_htons>
 800a554:	4603      	mov	r3, r0
 800a556:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f9 ff0b 	bl	800437a <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a568:	2300      	movs	r3, #0
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a574:	4b54      	ldr	r3, [pc, #336]	; (800a6c8 <udp_input+0x1b8>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
 800a57a:	e03b      	b.n	800a5f4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	8a5b      	ldrh	r3, [r3, #18]
 800a580:	89fa      	ldrh	r2, [r7, #14]
 800a582:	429a      	cmp	r2, r3
 800a584:	d131      	bne.n	800a5ea <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a586:	7cfb      	ldrb	r3, [r7, #19]
 800a588:	461a      	mov	r2, r3
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a58e:	f7ff ff83 	bl	800a498 <udp_input_local_match>
 800a592:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a594:	2b00      	cmp	r3, #0
 800a596:	d028      	beq.n	800a5ea <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	7c1b      	ldrb	r3, [r3, #16]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <udp_input+0x9e>
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	8a9b      	ldrh	r3, [r3, #20]
 800a5b2:	8a3a      	ldrh	r2, [r7, #16]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d118      	bne.n	800a5ea <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4b3f      	ldr	r3, [pc, #252]	; (800a6c4 <udp_input+0x1b4>)
 800a5c6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d10e      	bne.n	800a5ea <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d014      	beq.n	800a5fc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a5da:	4b3b      	ldr	r3, [pc, #236]	; (800a6c8 <udp_input+0x1b8>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a5e2:	4a39      	ldr	r2, [pc, #228]	; (800a6c8 <udp_input+0x1b8>)
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a5e8:	e008      	b.n	800a5fc <udp_input+0xec>
      }
    }

    prev = pcb;
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1c0      	bne.n	800a57c <udp_input+0x6c>
 800a5fa:	e000      	b.n	800a5fe <udp_input+0xee>
        break;
 800a5fc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <udp_input+0xf8>
    pcb = uncon_pcb;
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <udp_input+0x104>
    for_us = 1;
 800a60e:	2301      	movs	r3, #1
 800a610:	76fb      	strb	r3, [r7, #27]
 800a612:	e00a      	b.n	800a62a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	3304      	adds	r3, #4
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4b2a      	ldr	r3, [pc, #168]	; (800a6c4 <udp_input+0x1b4>)
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	429a      	cmp	r2, r3
 800a620:	bf0c      	ite	eq
 800a622:	2301      	moveq	r3, #1
 800a624:	2300      	movne	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a62a:	7efb      	ldrb	r3, [r7, #27]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d042      	beq.n	800a6b6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800a630:	f06f 0107 	mvn.w	r1, #7
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7fa ffa1 	bl	800557c <pbuf_header>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00a      	beq.n	800a656 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a640:	4b22      	ldr	r3, [pc, #136]	; (800a6cc <udp_input+0x1bc>)
 800a642:	f240 1255 	movw	r2, #341	; 0x155
 800a646:	4922      	ldr	r1, [pc, #136]	; (800a6d0 <udp_input+0x1c0>)
 800a648:	4822      	ldr	r0, [pc, #136]	; (800a6d4 <udp_input+0x1c4>)
 800a64a:	f002 fc79 	bl	800cf40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7fa ffb8 	bl	80055c4 <pbuf_free>
      goto end;
 800a654:	e032      	b.n	800a6bc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d012      	beq.n	800a682 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	699c      	ldr	r4, [r3, #24]
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	69d8      	ldr	r0, [r3, #28]
 800a66c:	8a3b      	ldrh	r3, [r7, #16]
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <udp_input+0x1c8>)
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a676:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a678:	e021      	b.n	800a6be <udp_input+0x1ae>
        pbuf_free(p);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7fa ffa2 	bl	80055c4 <pbuf_free>
        goto end;
 800a680:	e01c      	b.n	800a6bc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a682:	7cfb      	ldrb	r3, [r7, #19]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d112      	bne.n	800a6ae <udp_input+0x19e>
 800a688:	4b0e      	ldr	r3, [pc, #56]	; (800a6c4 <udp_input+0x1b4>)
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a690:	2be0      	cmp	r3, #224	; 0xe0
 800a692:	d00c      	beq.n	800a6ae <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a694:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <udp_input+0x1b4>)
 800a696:	899b      	ldrh	r3, [r3, #12]
 800a698:	3308      	adds	r3, #8
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b21b      	sxth	r3, r3
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fa ff7d 	bl	80055a0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a6a6:	2103      	movs	r1, #3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fa17 	bl	800badc <icmp_dest_unreach>
      pbuf_free(p);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fa ff88 	bl	80055c4 <pbuf_free>
  return;
 800a6b4:	e003      	b.n	800a6be <udp_input+0x1ae>
    pbuf_free(p);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7fa ff84 	bl	80055c4 <pbuf_free>
  return;
 800a6bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a6be:	372c      	adds	r7, #44	; 0x2c
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd90      	pop	{r4, r7, pc}
 800a6c4:	200037a4 	.word	0x200037a4
 800a6c8:	20006cec 	.word	0x20006cec
 800a6cc:	0800f2c0 	.word	0x0800f2c0
 800a6d0:	0800f2f0 	.word	0x0800f2f0
 800a6d4:	0800f304 	.word	0x0800f304
 800a6d8:	200037b4 	.word	0x200037b4

0800a6dc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <udp_send+0x16>
    return ERR_VAL;
 800a6ec:	f06f 0305 	mvn.w	r3, #5
 800a6f0:	e008      	b.n	800a704 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	1d1a      	adds	r2, r3, #4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8a9b      	ldrh	r3, [r3, #20]
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f805 	bl	800a70c <udp_sendto>
 800a702:	4603      	mov	r3, r0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af02      	add	r7, sp, #8
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <udp_sendto+0x1e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <udp_sendto+0x24>
    return ERR_VAL;
 800a72a:	f06f 0305 	mvn.w	r3, #5
 800a72e:	e013      	b.n	800a758 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	f001 fa5b 	bl	800bbec <ip4_route>
 800a736:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800a73e:	f06f 0303 	mvn.w	r3, #3
 800a742:	e009      	b.n	800a758 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800a744:	887a      	ldrh	r2, [r7, #2]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	4613      	mov	r3, r2
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 f805 	bl	800a760 <udp_sendto_if>
 800a756:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <udp_sendto_if+0x1a>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <udp_sendto_if+0x20>
    return ERR_VAL;
 800a77a:	f06f 0305 	mvn.w	r3, #5
 800a77e:	e028      	b.n	800a7d2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d009      	beq.n	800a79a <udp_sendto_if+0x3a>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a796:	2be0      	cmp	r3, #224	; 0xe0
 800a798:	d103      	bne.n	800a7a2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	3304      	adds	r3, #4
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	e00b      	b.n	800a7ba <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d002      	beq.n	800a7b6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800a7b0:	f06f 0303 	mvn.w	r3, #3
 800a7b4:	e00d      	b.n	800a7d2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a7ba:	887a      	ldrh	r2, [r7, #2]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f806 	bl	800a7dc <udp_sendto_if_src>
 800a7d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	; 0x30
 800a7e0:	af04      	add	r7, sp, #16
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <udp_sendto_if_src+0x1a>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800a7f6:	f06f 0305 	mvn.w	r3, #5
 800a7fa:	e07e      	b.n	800a8fa <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8a5b      	ldrh	r3, [r3, #18]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10f      	bne.n	800a824 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a804:	68f9      	ldr	r1, [r7, #12]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8a5b      	ldrh	r3, [r3, #18]
 800a80a:	461a      	mov	r2, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f87f 	bl	800a910 <udp_bind>
 800a812:	4603      	mov	r3, r0
 800a814:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800a816:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800a81e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a822:	e06a      	b.n	800a8fa <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800a824:	2108      	movs	r1, #8
 800a826:	68b8      	ldr	r0, [r7, #8]
 800a828:	f7fa fea8 	bl	800557c <pbuf_header>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d014      	beq.n	800a85c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a832:	2200      	movs	r2, #0
 800a834:	2108      	movs	r1, #8
 800a836:	2001      	movs	r0, #1
 800a838:	f7fa fb52 	bl	8004ee0 <pbuf_alloc>
 800a83c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800a844:	f04f 33ff 	mov.w	r3, #4294967295
 800a848:	e057      	b.n	800a8fa <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	891b      	ldrh	r3, [r3, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d006      	beq.n	800a860 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	69f8      	ldr	r0, [r7, #28]
 800a856:	f7fa ffd9 	bl	800580c <pbuf_chain>
 800a85a:	e001      	b.n	800a860 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	895b      	ldrh	r3, [r3, #10]
 800a864:	2b07      	cmp	r3, #7
 800a866:	d806      	bhi.n	800a876 <udp_sendto_if_src+0x9a>
 800a868:	4b26      	ldr	r3, [pc, #152]	; (800a904 <udp_sendto_if_src+0x128>)
 800a86a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a86e:	4926      	ldr	r1, [pc, #152]	; (800a908 <udp_sendto_if_src+0x12c>)
 800a870:	4826      	ldr	r0, [pc, #152]	; (800a90c <udp_sendto_if_src+0x130>)
 800a872:	f002 fb65 	bl	800cf40 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	8a5b      	ldrh	r3, [r3, #18]
 800a880:	4618      	mov	r0, r3
 800a882:	f7f9 fd7a 	bl	800437a <lwip_htons>
 800a886:	4603      	mov	r3, r0
 800a888:	461a      	mov	r2, r3
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a88e:	887b      	ldrh	r3, [r7, #2]
 800a890:	4618      	mov	r0, r3
 800a892:	f7f9 fd72 	bl	800437a <lwip_htons>
 800a896:	4603      	mov	r3, r0
 800a898:	461a      	mov	r2, r3
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	719a      	strb	r2, [r3, #6]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	891b      	ldrh	r3, [r3, #8]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7f9 fd64 	bl	800437a <lwip_htons>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800a8ba:	2311      	movs	r3, #17
 800a8bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	7a9b      	ldrb	r3, [r3, #10]
 800a8c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	7a5b      	ldrb	r3, [r3, #9]
 800a8c8:	7cb9      	ldrb	r1, [r7, #18]
 800a8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8cc:	9202      	str	r2, [sp, #8]
 800a8ce:	7cfa      	ldrb	r2, [r7, #19]
 800a8d0:	9201      	str	r2, [sp, #4]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8da:	69f8      	ldr	r0, [r7, #28]
 800a8dc:	f001 fb58 	bl	800bf90 <ip4_output_if_src>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d004      	beq.n	800a8f6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800a8ec:	69f8      	ldr	r0, [r7, #28]
 800a8ee:	f7fa fe69 	bl	80055c4 <pbuf_free>
    q = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800a8f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	0800f2c0 	.word	0x0800f2c0
 800a908:	0800f32c 	.word	0x0800f32c
 800a90c:	0800f304 	.word	0x0800f304

0800a910 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800a924:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <udp_bind+0xd8>)
 800a926:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <udp_bind+0x24>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d102      	bne.n	800a93a <udp_bind+0x2a>
    return ERR_VAL;
 800a934:	f06f 0305 	mvn.w	r3, #5
 800a938:	e052      	b.n	800a9e0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a93e:	4b2b      	ldr	r3, [pc, #172]	; (800a9ec <udp_bind+0xdc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e009      	b.n	800a95a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d102      	bne.n	800a954 <udp_bind+0x44>
      rebind = 1;
 800a94e:	2301      	movs	r3, #1
 800a950:	74fb      	strb	r3, [r7, #19]
      break;
 800a952:	e005      	b.n	800a960 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f2      	bne.n	800a946 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <udp_bind+0x6a>
    port = udp_new_port();
 800a966:	f7ff fd5f 	bl	800a428 <udp_new_port>
 800a96a:	4603      	mov	r3, r0
 800a96c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a96e:	88fb      	ldrh	r3, [r7, #6]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d11e      	bne.n	800a9b2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a974:	f06f 0307 	mvn.w	r3, #7
 800a978:	e032      	b.n	800a9e0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a97a:	4b1c      	ldr	r3, [pc, #112]	; (800a9ec <udp_bind+0xdc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	e014      	b.n	800a9ac <udp_bind+0x9c>
      if (pcb != ipcb) {
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	429a      	cmp	r2, r3
 800a988:	d00d      	beq.n	800a9a6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	8a5b      	ldrh	r3, [r3, #18]
 800a98e:	88fa      	ldrh	r2, [r7, #6]
 800a990:	429a      	cmp	r2, r3
 800a992:	d108      	bne.n	800a9a6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d102      	bne.n	800a9a6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a9a0:	f06f 0307 	mvn.w	r3, #7
 800a9a4:	e01c      	b.n	800a9e0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e7      	bne.n	800a982 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <udp_bind+0xae>
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	e000      	b.n	800a9c0 <udp_bind+0xb0>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	88fa      	ldrh	r2, [r7, #6]
 800a9c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a9ca:	7cfb      	ldrb	r3, [r7, #19]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <udp_bind+0xdc>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a9d8:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <udp_bind+0xdc>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0800fac0 	.word	0x0800fac0
 800a9ec:	20006cec 	.word	0x20006cec

0800a9f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	61da      	str	r2, [r3, #28]
}
 800aa08:	bf00      	nop
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	f7fa f85c 	bl	8004ad8 <memp_malloc>
 800aa20:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800aa28:	2220      	movs	r2, #32
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f002 fa7f 	bl	800cf30 <memset>
    pcb->ttl = UDP_TTL;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	22ff      	movs	r2, #255	; 0xff
 800aa36:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800aa38:	687b      	ldr	r3, [r7, #4]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01e      	beq.n	800aa92 <udp_netif_ip_addr_changed+0x4e>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01a      	beq.n	800aa92 <udp_netif_ip_addr_changed+0x4e>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d017      	beq.n	800aa92 <udp_netif_ip_addr_changed+0x4e>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d013      	beq.n	800aa92 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <udp_netif_ip_addr_changed+0x5c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e00c      	b.n	800aa8c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d103      	bne.n	800aa86 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1ef      	bne.n	800aa72 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800aa92:	bf00      	nop
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20006cec 	.word	0x20006cec

0800aaa4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800aaac:	4915      	ldr	r1, [pc, #84]	; (800ab04 <etharp_free_entry+0x60>)
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4613      	mov	r3, r2
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	440b      	add	r3, r1
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d013      	beq.n	800aae8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800aac0:	4910      	ldr	r1, [pc, #64]	; (800ab04 <etharp_free_entry+0x60>)
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	4413      	add	r3, r2
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	440b      	add	r3, r1
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fa fd77 	bl	80055c4 <pbuf_free>
    arp_table[i].q = NULL;
 800aad6:	490b      	ldr	r1, [pc, #44]	; (800ab04 <etharp_free_entry+0x60>)
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	4413      	add	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	440b      	add	r3, r1
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800aae8:	4906      	ldr	r1, [pc, #24]	; (800ab04 <etharp_free_entry+0x60>)
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	440b      	add	r3, r1
 800aaf6:	3314      	adds	r3, #20
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	2000011c 	.word	0x2000011c

0800ab08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab0e:	2300      	movs	r3, #0
 800ab10:	71fb      	strb	r3, [r7, #7]
 800ab12:	e096      	b.n	800ac42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ab14:	79fa      	ldrb	r2, [r7, #7]
 800ab16:	494f      	ldr	r1, [pc, #316]	; (800ac54 <etharp_tmr+0x14c>)
 800ab18:	4613      	mov	r3, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	440b      	add	r3, r1
 800ab22:	3314      	adds	r3, #20
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800ab28:	79bb      	ldrb	r3, [r7, #6]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8086 	beq.w	800ac3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800ab30:	79fa      	ldrb	r2, [r7, #7]
 800ab32:	4948      	ldr	r1, [pc, #288]	; (800ac54 <etharp_tmr+0x14c>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3312      	adds	r3, #18
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	3301      	adds	r3, #1
 800ab44:	b298      	uxth	r0, r3
 800ab46:	4943      	ldr	r1, [pc, #268]	; (800ac54 <etharp_tmr+0x14c>)
 800ab48:	4613      	mov	r3, r2
 800ab4a:	005b      	lsls	r3, r3, #1
 800ab4c:	4413      	add	r3, r2
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	440b      	add	r3, r1
 800ab52:	3312      	adds	r3, #18
 800ab54:	4602      	mov	r2, r0
 800ab56:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ab58:	79fa      	ldrb	r2, [r7, #7]
 800ab5a:	493e      	ldr	r1, [pc, #248]	; (800ac54 <etharp_tmr+0x14c>)
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	4413      	add	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	440b      	add	r3, r1
 800ab66:	3312      	adds	r3, #18
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ab6e:	d215      	bcs.n	800ab9c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ab70:	79fa      	ldrb	r2, [r7, #7]
 800ab72:	4938      	ldr	r1, [pc, #224]	; (800ac54 <etharp_tmr+0x14c>)
 800ab74:	4613      	mov	r3, r2
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	4413      	add	r3, r2
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	440b      	add	r3, r1
 800ab7e:	3314      	adds	r3, #20
 800ab80:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d10f      	bne.n	800aba6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ab86:	79fa      	ldrb	r2, [r7, #7]
 800ab88:	4932      	ldr	r1, [pc, #200]	; (800ac54 <etharp_tmr+0x14c>)
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	4413      	add	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	440b      	add	r3, r1
 800ab94:	3312      	adds	r3, #18
 800ab96:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d904      	bls.n	800aba6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff ff80 	bl	800aaa4 <etharp_free_entry>
 800aba4:	e04a      	b.n	800ac3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800aba6:	79fa      	ldrb	r2, [r7, #7]
 800aba8:	492a      	ldr	r1, [pc, #168]	; (800ac54 <etharp_tmr+0x14c>)
 800abaa:	4613      	mov	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	3314      	adds	r3, #20
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d10a      	bne.n	800abd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800abbc:	79fa      	ldrb	r2, [r7, #7]
 800abbe:	4925      	ldr	r1, [pc, #148]	; (800ac54 <etharp_tmr+0x14c>)
 800abc0:	4613      	mov	r3, r2
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	4413      	add	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	3314      	adds	r3, #20
 800abcc:	2204      	movs	r2, #4
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	e034      	b.n	800ac3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800abd2:	79fa      	ldrb	r2, [r7, #7]
 800abd4:	491f      	ldr	r1, [pc, #124]	; (800ac54 <etharp_tmr+0x14c>)
 800abd6:	4613      	mov	r3, r2
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	4413      	add	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	440b      	add	r3, r1
 800abe0:	3314      	adds	r3, #20
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d10a      	bne.n	800abfe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800abe8:	79fa      	ldrb	r2, [r7, #7]
 800abea:	491a      	ldr	r1, [pc, #104]	; (800ac54 <etharp_tmr+0x14c>)
 800abec:	4613      	mov	r3, r2
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	4413      	add	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	440b      	add	r3, r1
 800abf6:	3314      	adds	r3, #20
 800abf8:	2202      	movs	r2, #2
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	e01e      	b.n	800ac3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800abfe:	79fa      	ldrb	r2, [r7, #7]
 800ac00:	4914      	ldr	r1, [pc, #80]	; (800ac54 <etharp_tmr+0x14c>)
 800ac02:	4613      	mov	r3, r2
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	4413      	add	r3, r2
 800ac08:	00db      	lsls	r3, r3, #3
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3314      	adds	r3, #20
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d113      	bne.n	800ac3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ac14:	79fa      	ldrb	r2, [r7, #7]
 800ac16:	490f      	ldr	r1, [pc, #60]	; (800ac54 <etharp_tmr+0x14c>)
 800ac18:	4613      	mov	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	4413      	add	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	440b      	add	r3, r1
 800ac22:	3308      	adds	r3, #8
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	79fa      	ldrb	r2, [r7, #7]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <etharp_tmr+0x14c>)
 800ac32:	4413      	add	r3, r2
 800ac34:	3304      	adds	r3, #4
 800ac36:	4619      	mov	r1, r3
 800ac38:	f000 fe38 	bl	800b8ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac3c:	79fb      	ldrb	r3, [r7, #7]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	71fb      	strb	r3, [r7, #7]
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	2b09      	cmp	r3, #9
 800ac46:	f67f af65 	bls.w	800ab14 <etharp_tmr+0xc>
      }
    }
  }
}
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	2000011c 	.word	0x2000011c

0800ac58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	460b      	mov	r3, r1
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ac66:	230a      	movs	r3, #10
 800ac68:	77fb      	strb	r3, [r7, #31]
 800ac6a:	230a      	movs	r3, #10
 800ac6c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800ac6e:	230a      	movs	r3, #10
 800ac70:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ac76:	230a      	movs	r3, #10
 800ac78:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	833b      	strh	r3, [r7, #24]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	82fb      	strh	r3, [r7, #22]
 800ac82:	2300      	movs	r3, #0
 800ac84:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac86:	2300      	movs	r3, #0
 800ac88:	773b      	strb	r3, [r7, #28]
 800ac8a:	e093      	b.n	800adb4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ac8c:	7f3a      	ldrb	r2, [r7, #28]
 800ac8e:	4990      	ldr	r1, [pc, #576]	; (800aed0 <etharp_find_entry+0x278>)
 800ac90:	4613      	mov	r3, r2
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	440b      	add	r3, r1
 800ac9a:	3314      	adds	r3, #20
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800aca0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800aca4:	2b0a      	cmp	r3, #10
 800aca6:	d105      	bne.n	800acb4 <etharp_find_entry+0x5c>
 800aca8:	7cfb      	ldrb	r3, [r7, #19]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800acae:	7f3b      	ldrb	r3, [r7, #28]
 800acb0:	777b      	strb	r3, [r7, #29]
 800acb2:	e07c      	b.n	800adae <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800acb4:	7cfb      	ldrb	r3, [r7, #19]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d079      	beq.n	800adae <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800acba:	7cfb      	ldrb	r3, [r7, #19]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d009      	beq.n	800acd4 <etharp_find_entry+0x7c>
 800acc0:	7cfb      	ldrb	r3, [r7, #19]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d806      	bhi.n	800acd4 <etharp_find_entry+0x7c>
 800acc6:	4b83      	ldr	r3, [pc, #524]	; (800aed4 <etharp_find_entry+0x27c>)
 800acc8:	f44f 7293 	mov.w	r2, #294	; 0x126
 800accc:	4982      	ldr	r1, [pc, #520]	; (800aed8 <etharp_find_entry+0x280>)
 800acce:	4883      	ldr	r0, [pc, #524]	; (800aedc <etharp_find_entry+0x284>)
 800acd0:	f002 f936 	bl	800cf40 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00f      	beq.n	800acfa <etharp_find_entry+0xa2>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6819      	ldr	r1, [r3, #0]
 800acde:	7f3a      	ldrb	r2, [r7, #28]
 800ace0:	487b      	ldr	r0, [pc, #492]	; (800aed0 <etharp_find_entry+0x278>)
 800ace2:	4613      	mov	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	4413      	add	r3, r2
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	4403      	add	r3, r0
 800acec:	3304      	adds	r3, #4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d102      	bne.n	800acfa <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800acf4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800acf8:	e0e5      	b.n	800aec6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800acfa:	7cfb      	ldrb	r3, [r7, #19]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d13b      	bne.n	800ad78 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ad00:	7f3a      	ldrb	r2, [r7, #28]
 800ad02:	4973      	ldr	r1, [pc, #460]	; (800aed0 <etharp_find_entry+0x278>)
 800ad04:	4613      	mov	r3, r2
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	4413      	add	r3, r2
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	440b      	add	r3, r1
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d018      	beq.n	800ad46 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800ad14:	7f3a      	ldrb	r2, [r7, #28]
 800ad16:	496e      	ldr	r1, [pc, #440]	; (800aed0 <etharp_find_entry+0x278>)
 800ad18:	4613      	mov	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	440b      	add	r3, r1
 800ad22:	3312      	adds	r3, #18
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	8b3a      	ldrh	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d840      	bhi.n	800adae <etharp_find_entry+0x156>
            old_queue = i;
 800ad2c:	7f3b      	ldrb	r3, [r7, #28]
 800ad2e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800ad30:	7f3a      	ldrb	r2, [r7, #28]
 800ad32:	4967      	ldr	r1, [pc, #412]	; (800aed0 <etharp_find_entry+0x278>)
 800ad34:	4613      	mov	r3, r2
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	4413      	add	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	440b      	add	r3, r1
 800ad3e:	3312      	adds	r3, #18
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	833b      	strh	r3, [r7, #24]
 800ad44:	e033      	b.n	800adae <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ad46:	7f3a      	ldrb	r2, [r7, #28]
 800ad48:	4961      	ldr	r1, [pc, #388]	; (800aed0 <etharp_find_entry+0x278>)
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	005b      	lsls	r3, r3, #1
 800ad4e:	4413      	add	r3, r2
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	440b      	add	r3, r1
 800ad54:	3312      	adds	r3, #18
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	8afa      	ldrh	r2, [r7, #22]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d827      	bhi.n	800adae <etharp_find_entry+0x156>
            old_pending = i;
 800ad5e:	7f3b      	ldrb	r3, [r7, #28]
 800ad60:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800ad62:	7f3a      	ldrb	r2, [r7, #28]
 800ad64:	495a      	ldr	r1, [pc, #360]	; (800aed0 <etharp_find_entry+0x278>)
 800ad66:	4613      	mov	r3, r2
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	4413      	add	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	440b      	add	r3, r1
 800ad70:	3312      	adds	r3, #18
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	82fb      	strh	r3, [r7, #22]
 800ad76:	e01a      	b.n	800adae <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ad78:	7cfb      	ldrb	r3, [r7, #19]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d917      	bls.n	800adae <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ad7e:	7f3a      	ldrb	r2, [r7, #28]
 800ad80:	4953      	ldr	r1, [pc, #332]	; (800aed0 <etharp_find_entry+0x278>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3312      	adds	r3, #18
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	8aba      	ldrh	r2, [r7, #20]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d80b      	bhi.n	800adae <etharp_find_entry+0x156>
            old_stable = i;
 800ad96:	7f3b      	ldrb	r3, [r7, #28]
 800ad98:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ad9a:	7f3a      	ldrb	r2, [r7, #28]
 800ad9c:	494c      	ldr	r1, [pc, #304]	; (800aed0 <etharp_find_entry+0x278>)
 800ad9e:	4613      	mov	r3, r2
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	4413      	add	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	440b      	add	r3, r1
 800ada8:	3312      	adds	r3, #18
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adae:	7f3b      	ldrb	r3, [r7, #28]
 800adb0:	3301      	adds	r3, #1
 800adb2:	773b      	strb	r3, [r7, #28]
 800adb4:	7f3b      	ldrb	r3, [r7, #28]
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	f67f af68 	bls.w	800ac8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d108      	bne.n	800add8 <etharp_find_entry+0x180>
 800adc6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800adca:	2b0a      	cmp	r3, #10
 800adcc:	d107      	bne.n	800adde <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800adce:	7afb      	ldrb	r3, [r7, #11]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	e073      	b.n	800aec6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800adde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ade2:	2b09      	cmp	r3, #9
 800ade4:	dc02      	bgt.n	800adec <etharp_find_entry+0x194>
    i = empty;
 800ade6:	7f7b      	ldrb	r3, [r7, #29]
 800ade8:	773b      	strb	r3, [r7, #28]
 800adea:	e036      	b.n	800ae5a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800adec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	dc13      	bgt.n	800ae1c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800adf4:	7fbb      	ldrb	r3, [r7, #30]
 800adf6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800adf8:	7f3a      	ldrb	r2, [r7, #28]
 800adfa:	4935      	ldr	r1, [pc, #212]	; (800aed0 <etharp_find_entry+0x278>)
 800adfc:	4613      	mov	r3, r2
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	4413      	add	r3, r2
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	440b      	add	r3, r1
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d018      	beq.n	800ae3e <etharp_find_entry+0x1e6>
 800ae0c:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <etharp_find_entry+0x27c>)
 800ae0e:	f240 126f 	movw	r2, #367	; 0x16f
 800ae12:	4933      	ldr	r1, [pc, #204]	; (800aee0 <etharp_find_entry+0x288>)
 800ae14:	4831      	ldr	r0, [pc, #196]	; (800aedc <etharp_find_entry+0x284>)
 800ae16:	f002 f893 	bl	800cf40 <iprintf>
 800ae1a:	e010      	b.n	800ae3e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ae1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	dc02      	bgt.n	800ae2a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800ae24:	7ffb      	ldrb	r3, [r7, #31]
 800ae26:	773b      	strb	r3, [r7, #28]
 800ae28:	e009      	b.n	800ae3e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ae2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	dc02      	bgt.n	800ae38 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ae32:	7efb      	ldrb	r3, [r7, #27]
 800ae34:	773b      	strb	r3, [r7, #28]
 800ae36:	e002      	b.n	800ae3e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800ae38:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3c:	e043      	b.n	800aec6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ae3e:	7f3b      	ldrb	r3, [r7, #28]
 800ae40:	2b09      	cmp	r3, #9
 800ae42:	d906      	bls.n	800ae52 <etharp_find_entry+0x1fa>
 800ae44:	4b23      	ldr	r3, [pc, #140]	; (800aed4 <etharp_find_entry+0x27c>)
 800ae46:	f240 1281 	movw	r2, #385	; 0x181
 800ae4a:	4926      	ldr	r1, [pc, #152]	; (800aee4 <etharp_find_entry+0x28c>)
 800ae4c:	4823      	ldr	r0, [pc, #140]	; (800aedc <etharp_find_entry+0x284>)
 800ae4e:	f002 f877 	bl	800cf40 <iprintf>
    etharp_free_entry(i);
 800ae52:	7f3b      	ldrb	r3, [r7, #28]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fe25 	bl	800aaa4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ae5a:	7f3b      	ldrb	r3, [r7, #28]
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d906      	bls.n	800ae6e <etharp_find_entry+0x216>
 800ae60:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <etharp_find_entry+0x27c>)
 800ae62:	f240 1285 	movw	r2, #389	; 0x185
 800ae66:	491f      	ldr	r1, [pc, #124]	; (800aee4 <etharp_find_entry+0x28c>)
 800ae68:	481c      	ldr	r0, [pc, #112]	; (800aedc <etharp_find_entry+0x284>)
 800ae6a:	f002 f869 	bl	800cf40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ae6e:	7f3a      	ldrb	r2, [r7, #28]
 800ae70:	4917      	ldr	r1, [pc, #92]	; (800aed0 <etharp_find_entry+0x278>)
 800ae72:	4613      	mov	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d006      	beq.n	800ae92 <etharp_find_entry+0x23a>
 800ae84:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <etharp_find_entry+0x27c>)
 800ae86:	f240 1287 	movw	r2, #391	; 0x187
 800ae8a:	4917      	ldr	r1, [pc, #92]	; (800aee8 <etharp_find_entry+0x290>)
 800ae8c:	4813      	ldr	r0, [pc, #76]	; (800aedc <etharp_find_entry+0x284>)
 800ae8e:	f002 f857 	bl	800cf40 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00a      	beq.n	800aeae <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ae98:	7f3a      	ldrb	r2, [r7, #28]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6819      	ldr	r1, [r3, #0]
 800ae9e:	480c      	ldr	r0, [pc, #48]	; (800aed0 <etharp_find_entry+0x278>)
 800aea0:	4613      	mov	r3, r2
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	4403      	add	r3, r0
 800aeaa:	3304      	adds	r3, #4
 800aeac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800aeae:	7f3a      	ldrb	r2, [r7, #28]
 800aeb0:	4907      	ldr	r1, [pc, #28]	; (800aed0 <etharp_find_entry+0x278>)
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	4413      	add	r3, r2
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	440b      	add	r3, r1
 800aebc:	3312      	adds	r3, #18
 800aebe:	2200      	movs	r2, #0
 800aec0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800aec2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	2000011c 	.word	0x2000011c
 800aed4:	0800f35c 	.word	0x0800f35c
 800aed8:	0800f394 	.word	0x0800f394
 800aedc:	0800f3d4 	.word	0x0800f3d4
 800aee0:	0800f3fc 	.word	0x0800f3fc
 800aee4:	0800f414 	.word	0x0800f414
 800aee8:	0800f428 	.word	0x0800f428

0800aeec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af00:	2b06      	cmp	r3, #6
 800af02:	d006      	beq.n	800af12 <etharp_update_arp_entry+0x26>
 800af04:	4b48      	ldr	r3, [pc, #288]	; (800b028 <etharp_update_arp_entry+0x13c>)
 800af06:	f240 12ab 	movw	r2, #427	; 0x1ab
 800af0a:	4948      	ldr	r1, [pc, #288]	; (800b02c <etharp_update_arp_entry+0x140>)
 800af0c:	4848      	ldr	r0, [pc, #288]	; (800b030 <etharp_update_arp_entry+0x144>)
 800af0e:	f002 f817 	bl	800cf40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d012      	beq.n	800af3e <etharp_update_arp_entry+0x52>
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00e      	beq.n	800af3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68f9      	ldr	r1, [r7, #12]
 800af26:	4618      	mov	r0, r3
 800af28:	f001 f8da 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800af2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800af3a:	2be0      	cmp	r3, #224	; 0xe0
 800af3c:	d102      	bne.n	800af44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800af3e:	f06f 030f 	mvn.w	r3, #15
 800af42:	e06c      	b.n	800b01e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4619      	mov	r1, r3
 800af4a:	68b8      	ldr	r0, [r7, #8]
 800af4c:	f7ff fe84 	bl	800ac58 <etharp_find_entry>
 800af50:	4603      	mov	r3, r0
 800af52:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800af54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	da02      	bge.n	800af62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800af5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af60:	e05d      	b.n	800b01e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800af62:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af66:	4933      	ldr	r1, [pc, #204]	; (800b034 <etharp_update_arp_entry+0x148>)
 800af68:	4613      	mov	r3, r2
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	4413      	add	r3, r2
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	440b      	add	r3, r1
 800af72:	3314      	adds	r3, #20
 800af74:	2202      	movs	r2, #2
 800af76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800af78:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af7c:	492d      	ldr	r1, [pc, #180]	; (800b034 <etharp_update_arp_entry+0x148>)
 800af7e:	4613      	mov	r3, r2
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	4413      	add	r3, r2
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	440b      	add	r3, r1
 800af88:	3308      	adds	r3, #8
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800af8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800af92:	4613      	mov	r3, r2
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	4413      	add	r3, r2
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	3308      	adds	r3, #8
 800af9c:	4a25      	ldr	r2, [pc, #148]	; (800b034 <etharp_update_arp_entry+0x148>)
 800af9e:	4413      	add	r3, r2
 800afa0:	3304      	adds	r3, #4
 800afa2:	2206      	movs	r2, #6
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 ffb7 	bl	800cf1a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800afac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800afb0:	4920      	ldr	r1, [pc, #128]	; (800b034 <etharp_update_arp_entry+0x148>)
 800afb2:	4613      	mov	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	4413      	add	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	440b      	add	r3, r1
 800afbc:	3312      	adds	r3, #18
 800afbe:	2200      	movs	r2, #0
 800afc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800afc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800afc6:	491b      	ldr	r1, [pc, #108]	; (800b034 <etharp_update_arp_entry+0x148>)
 800afc8:	4613      	mov	r3, r2
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	4413      	add	r3, r2
 800afce:	00db      	lsls	r3, r3, #3
 800afd0:	440b      	add	r3, r1
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d021      	beq.n	800b01c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800afd8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800afdc:	4915      	ldr	r1, [pc, #84]	; (800b034 <etharp_update_arp_entry+0x148>)
 800afde:	4613      	mov	r3, r2
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	440b      	add	r3, r1
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800afec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800aff0:	4910      	ldr	r1, [pc, #64]	; (800b034 <etharp_update_arp_entry+0x148>)
 800aff2:	4613      	mov	r3, r2
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	440b      	add	r3, r1
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800b006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6939      	ldr	r1, [r7, #16]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f001 ff07 	bl	800ce24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b016:	6938      	ldr	r0, [r7, #16]
 800b018:	f7fa fad4 	bl	80055c4 <pbuf_free>
  }
  return ERR_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	0800f35c 	.word	0x0800f35c
 800b02c:	0800f454 	.word	0x0800f454
 800b030:	0800f3d4 	.word	0x0800f3d4
 800b034:	2000011c 	.word	0x2000011c

0800b038 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
 800b044:	e01f      	b.n	800b086 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b046:	7bfa      	ldrb	r2, [r7, #15]
 800b048:	4912      	ldr	r1, [pc, #72]	; (800b094 <etharp_cleanup_netif+0x5c>)
 800b04a:	4613      	mov	r3, r2
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	4413      	add	r3, r2
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	440b      	add	r3, r1
 800b054:	3314      	adds	r3, #20
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00f      	beq.n	800b080 <etharp_cleanup_netif+0x48>
 800b060:	7bfa      	ldrb	r2, [r7, #15]
 800b062:	490c      	ldr	r1, [pc, #48]	; (800b094 <etharp_cleanup_netif+0x5c>)
 800b064:	4613      	mov	r3, r2
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	4413      	add	r3, r2
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	440b      	add	r3, r1
 800b06e:	3308      	adds	r3, #8
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d103      	bne.n	800b080 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fd12 	bl	800aaa4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	3301      	adds	r3, #1
 800b084:	73fb      	strb	r3, [r7, #15]
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	2b09      	cmp	r3, #9
 800b08a:	d9dc      	bls.n	800b046 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	2000011c 	.word	0x2000011c

0800b098 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b098:	b5b0      	push	{r4, r5, r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d107      	bne.n	800b0b8 <etharp_input+0x20>
 800b0a8:	4b3d      	ldr	r3, [pc, #244]	; (800b1a0 <etharp_input+0x108>)
 800b0aa:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b0ae:	493d      	ldr	r1, [pc, #244]	; (800b1a4 <etharp_input+0x10c>)
 800b0b0:	483d      	ldr	r0, [pc, #244]	; (800b1a8 <etharp_input+0x110>)
 800b0b2:	f001 ff45 	bl	800cf40 <iprintf>
 800b0b6:	e06f      	b.n	800b198 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c8:	d10c      	bne.n	800b0e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b0ce:	2b06      	cmp	r3, #6
 800b0d0:	d108      	bne.n	800b0e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d104      	bne.n	800b0e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d003      	beq.n	800b0ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7fa fa6d 	bl	80055c4 <pbuf_free>
    return;
 800b0ea:	e055      	b.n	800b198 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	330e      	adds	r3, #14
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3318      	adds	r3, #24
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	3304      	adds	r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <etharp_input+0x74>
    for_us = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	75fb      	strb	r3, [r7, #23]
 800b10a:	e009      	b.n	800b120 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	3304      	adds	r3, #4
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	bf0c      	ite	eq
 800b118:	2301      	moveq	r3, #1
 800b11a:	2300      	movne	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f103 0208 	add.w	r2, r3, #8
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <etharp_input+0x98>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <etharp_input+0x9a>
 800b130:	2302      	movs	r3, #2
 800b132:	f107 010c 	add.w	r1, r7, #12
 800b136:	6838      	ldr	r0, [r7, #0]
 800b138:	f7ff fed8 	bl	800aeec <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	88db      	ldrh	r3, [r3, #6]
 800b140:	b29b      	uxth	r3, r3
 800b142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b146:	d003      	beq.n	800b150 <etharp_input+0xb8>
 800b148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b14c:	d01e      	beq.n	800b18c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b14e:	e020      	b.n	800b192 <etharp_input+0xfa>
    if (for_us) {
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01c      	beq.n	800b190 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b170:	2102      	movs	r1, #2
 800b172:	9103      	str	r1, [sp, #12]
 800b174:	f107 010c 	add.w	r1, r7, #12
 800b178:	9102      	str	r1, [sp, #8]
 800b17a:	9201      	str	r2, [sp, #4]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	462b      	mov	r3, r5
 800b180:	4622      	mov	r2, r4
 800b182:	4601      	mov	r1, r0
 800b184:	6838      	ldr	r0, [r7, #0]
 800b186:	f000 fae3 	bl	800b750 <etharp_raw>
    break;
 800b18a:	e001      	b.n	800b190 <etharp_input+0xf8>
    break;
 800b18c:	bf00      	nop
 800b18e:	e000      	b.n	800b192 <etharp_input+0xfa>
    break;
 800b190:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7fa fa16 	bl	80055c4 <pbuf_free>
}
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bdb0      	pop	{r4, r5, r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	0800f35c 	.word	0x0800f35c
 800b1a4:	0800f4ac 	.word	0x0800f4ac
 800b1a8:	0800f3d4 	.word	0x0800f3d4

0800b1ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b1ba:	79fa      	ldrb	r2, [r7, #7]
 800b1bc:	4944      	ldr	r1, [pc, #272]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b1be:	4613      	mov	r3, r2
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	4413      	add	r3, r2
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	440b      	add	r3, r1
 800b1c8:	3314      	adds	r3, #20
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d806      	bhi.n	800b1de <etharp_output_to_arp_index+0x32>
 800b1d0:	4b40      	ldr	r3, [pc, #256]	; (800b2d4 <etharp_output_to_arp_index+0x128>)
 800b1d2:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b1d6:	4940      	ldr	r1, [pc, #256]	; (800b2d8 <etharp_output_to_arp_index+0x12c>)
 800b1d8:	4840      	ldr	r0, [pc, #256]	; (800b2dc <etharp_output_to_arp_index+0x130>)
 800b1da:	f001 feb1 	bl	800cf40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b1de:	79fa      	ldrb	r2, [r7, #7]
 800b1e0:	493b      	ldr	r1, [pc, #236]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	4413      	add	r3, r2
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	440b      	add	r3, r1
 800b1ec:	3314      	adds	r3, #20
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d153      	bne.n	800b29c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b1f4:	79fa      	ldrb	r2, [r7, #7]
 800b1f6:	4936      	ldr	r1, [pc, #216]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	4413      	add	r3, r2
 800b1fe:	00db      	lsls	r3, r3, #3
 800b200:	440b      	add	r3, r1
 800b202:	3312      	adds	r3, #18
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b20a:	d919      	bls.n	800b240 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b20c:	79fa      	ldrb	r2, [r7, #7]
 800b20e:	4613      	mov	r3, r2
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	4413      	add	r3, r2
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4a2e      	ldr	r2, [pc, #184]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b218:	4413      	add	r3, r2
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fb44 	bl	800b8ac <etharp_request>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d138      	bne.n	800b29c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b22a:	79fa      	ldrb	r2, [r7, #7]
 800b22c:	4928      	ldr	r1, [pc, #160]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b22e:	4613      	mov	r3, r2
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	4413      	add	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	440b      	add	r3, r1
 800b238:	3314      	adds	r3, #20
 800b23a:	2203      	movs	r2, #3
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e02d      	b.n	800b29c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b240:	79fa      	ldrb	r2, [r7, #7]
 800b242:	4923      	ldr	r1, [pc, #140]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b244:	4613      	mov	r3, r2
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	4413      	add	r3, r2
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	440b      	add	r3, r1
 800b24e:	3312      	adds	r3, #18
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b256:	d321      	bcc.n	800b29c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b258:	79fa      	ldrb	r2, [r7, #7]
 800b25a:	4613      	mov	r3, r2
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4413      	add	r3, r2
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b264:	4413      	add	r3, r2
 800b266:	1d19      	adds	r1, r3, #4
 800b268:	79fa      	ldrb	r2, [r7, #7]
 800b26a:	4613      	mov	r3, r2
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4413      	add	r3, r2
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	3308      	adds	r3, #8
 800b274:	4a16      	ldr	r2, [pc, #88]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b276:	4413      	add	r3, r2
 800b278:	3304      	adds	r3, #4
 800b27a:	461a      	mov	r2, r3
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 faf3 	bl	800b868 <etharp_request_dst>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b288:	79fa      	ldrb	r2, [r7, #7]
 800b28a:	4911      	ldr	r1, [pc, #68]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b28c:	4613      	mov	r3, r2
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	4413      	add	r3, r2
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	440b      	add	r3, r1
 800b296:	3314      	adds	r3, #20
 800b298:	2203      	movs	r2, #3
 800b29a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800b2a2:	79fa      	ldrb	r2, [r7, #7]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	4413      	add	r3, r2
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <etharp_output_to_arp_index+0x124>)
 800b2b0:	4413      	add	r3, r2
 800b2b2:	1d1a      	adds	r2, r3, #4
 800b2b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	460a      	mov	r2, r1
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f001 fdaf 	bl	800ce24 <ethernet_output>
 800b2c6:	4603      	mov	r3, r0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	2000011c 	.word	0x2000011c
 800b2d4:	0800f35c 	.word	0x0800f35c
 800b2d8:	0800f4cc 	.word	0x0800f4cc
 800b2dc:	0800f3d4 	.word	0x0800f3d4

0800b2e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <etharp_output+0x24>
 800b2f6:	4b69      	ldr	r3, [pc, #420]	; (800b49c <etharp_output+0x1bc>)
 800b2f8:	f240 321b 	movw	r2, #795	; 0x31b
 800b2fc:	4968      	ldr	r1, [pc, #416]	; (800b4a0 <etharp_output+0x1c0>)
 800b2fe:	4869      	ldr	r0, [pc, #420]	; (800b4a4 <etharp_output+0x1c4>)
 800b300:	f001 fe1e 	bl	800cf40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d106      	bne.n	800b318 <etharp_output+0x38>
 800b30a:	4b64      	ldr	r3, [pc, #400]	; (800b49c <etharp_output+0x1bc>)
 800b30c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b310:	4965      	ldr	r1, [pc, #404]	; (800b4a8 <etharp_output+0x1c8>)
 800b312:	4864      	ldr	r0, [pc, #400]	; (800b4a4 <etharp_output+0x1c4>)
 800b314:	f001 fe14 	bl	800cf40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <etharp_output+0x4c>
 800b31e:	4b5f      	ldr	r3, [pc, #380]	; (800b49c <etharp_output+0x1bc>)
 800b320:	f240 321d 	movw	r2, #797	; 0x31d
 800b324:	4961      	ldr	r1, [pc, #388]	; (800b4ac <etharp_output+0x1cc>)
 800b326:	485f      	ldr	r0, [pc, #380]	; (800b4a4 <etharp_output+0x1c4>)
 800b328:	f001 fe0a 	bl	800cf40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68f9      	ldr	r1, [r7, #12]
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fed4 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d002      	beq.n	800b344 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b33e:	4b5c      	ldr	r3, [pc, #368]	; (800b4b0 <etharp_output+0x1d0>)
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	e09b      	b.n	800b47c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b34c:	2be0      	cmp	r3, #224	; 0xe0
 800b34e:	d118      	bne.n	800b382 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b350:	2301      	movs	r3, #1
 800b352:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b354:	2300      	movs	r3, #0
 800b356:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b358:	235e      	movs	r3, #94	; 0x5e
 800b35a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3301      	adds	r3, #1
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b366:	b2db      	uxtb	r3, r3
 800b368:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3302      	adds	r3, #2
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3303      	adds	r3, #3
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b37a:	f107 0310 	add.w	r3, r7, #16
 800b37e:	61fb      	str	r3, [r7, #28]
 800b380:	e07c      	b.n	800b47c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3304      	adds	r3, #4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	405a      	eors	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3308      	adds	r3, #8
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4013      	ands	r3, r2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d012      	beq.n	800b3c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b3a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00b      	beq.n	800b3c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	330c      	adds	r3, #12
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e002      	b.n	800b3c0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b3ba:	f06f 0303 	mvn.w	r3, #3
 800b3be:	e069      	b.n	800b494 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b3c0:	4b3c      	ldr	r3, [pc, #240]	; (800b4b4 <etharp_output+0x1d4>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4a3c      	ldr	r2, [pc, #240]	; (800b4b8 <etharp_output+0x1d8>)
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	440b      	add	r3, r1
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	4413      	add	r3, r2
 800b3d2:	3314      	adds	r3, #20
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d917      	bls.n	800b40a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	4b35      	ldr	r3, [pc, #212]	; (800b4b4 <etharp_output+0x1d4>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	4934      	ldr	r1, [pc, #208]	; (800b4b8 <etharp_output+0x1d8>)
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	4403      	add	r3, r0
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	440b      	add	r3, r1
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d108      	bne.n	800b40a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b3f8:	4b2e      	ldr	r3, [pc, #184]	; (800b4b4 <etharp_output+0x1d4>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	68b9      	ldr	r1, [r7, #8]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff fed3 	bl	800b1ac <etharp_output_to_arp_index>
 800b406:	4603      	mov	r3, r0
 800b408:	e044      	b.n	800b494 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b40a:	2300      	movs	r3, #0
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e02a      	b.n	800b466 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b410:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b414:	4928      	ldr	r1, [pc, #160]	; (800b4b8 <etharp_output+0x1d8>)
 800b416:	4613      	mov	r3, r2
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	4413      	add	r3, r2
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	440b      	add	r3, r1
 800b420:	3314      	adds	r3, #20
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d918      	bls.n	800b45a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	6819      	ldr	r1, [r3, #0]
 800b42c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b430:	4821      	ldr	r0, [pc, #132]	; (800b4b8 <etharp_output+0x1d8>)
 800b432:	4613      	mov	r3, r2
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4413      	add	r3, r2
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	4403      	add	r3, r0
 800b43c:	3304      	adds	r3, #4
 800b43e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b440:	4299      	cmp	r1, r3
 800b442:	d10a      	bne.n	800b45a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b444:	7dfa      	ldrb	r2, [r7, #23]
 800b446:	4b1b      	ldr	r3, [pc, #108]	; (800b4b4 <etharp_output+0x1d4>)
 800b448:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	461a      	mov	r2, r3
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff feab 	bl	800b1ac <etharp_output_to_arp_index>
 800b456:	4603      	mov	r3, r0
 800b458:	e01c      	b.n	800b494 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	3301      	adds	r3, #1
 800b462:	b2db      	uxtb	r3, r3
 800b464:	75fb      	strb	r3, [r7, #23]
 800b466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b46a:	2b09      	cmp	r3, #9
 800b46c:	ddd0      	ble.n	800b410 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	69b9      	ldr	r1, [r7, #24]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f822 	bl	800b4bc <etharp_query>
 800b478:	4603      	mov	r3, r0
 800b47a:	e00b      	b.n	800b494 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800b482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f001 fcc9 	bl	800ce24 <ethernet_output>
 800b492:	4603      	mov	r3, r0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3720      	adds	r7, #32
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	0800f35c 	.word	0x0800f35c
 800b4a0:	0800f4ac 	.word	0x0800f4ac
 800b4a4:	0800f3d4 	.word	0x0800f3d4
 800b4a8:	0800f4fc 	.word	0x0800f4fc
 800b4ac:	0800f49c 	.word	0x0800f49c
 800b4b0:	0800fac4 	.word	0x0800fac4
 800b4b4:	2000020c 	.word	0x2000020c
 800b4b8:	2000011c 	.word	0x2000011c

0800b4bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08c      	sub	sp, #48	; 0x30
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3325      	adds	r3, #37	; 0x25
 800b4cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b4ce:	23ff      	movs	r3, #255	; 0xff
 800b4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68f9      	ldr	r1, [r7, #12]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fdfe 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10c      	bne.n	800b504 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b4f2:	2be0      	cmp	r3, #224	; 0xe0
 800b4f4:	d006      	beq.n	800b504 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b504:	f06f 030f 	mvn.w	r3, #15
 800b508:	e10f      	b.n	800b72a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	2101      	movs	r1, #1
 800b50e:	68b8      	ldr	r0, [r7, #8]
 800b510:	f7ff fba2 	bl	800ac58 <etharp_find_entry>
 800b514:	4603      	mov	r3, r0
 800b516:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da02      	bge.n	800b526 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b520:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b524:	e101      	b.n	800b72a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b526:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b52a:	4982      	ldr	r1, [pc, #520]	; (800b734 <etharp_query+0x278>)
 800b52c:	4613      	mov	r3, r2
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	4413      	add	r3, r2
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	440b      	add	r3, r1
 800b536:	3314      	adds	r3, #20
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d117      	bne.n	800b56e <etharp_query+0xb2>
    is_new_entry = 1;
 800b53e:	2301      	movs	r3, #1
 800b540:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b542:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b546:	497b      	ldr	r1, [pc, #492]	; (800b734 <etharp_query+0x278>)
 800b548:	4613      	mov	r3, r2
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	4413      	add	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	440b      	add	r3, r1
 800b552:	3314      	adds	r3, #20
 800b554:	2201      	movs	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b558:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b55c:	4975      	ldr	r1, [pc, #468]	; (800b734 <etharp_query+0x278>)
 800b55e:	4613      	mov	r3, r2
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	4413      	add	r3, r2
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	440b      	add	r3, r1
 800b568:	3308      	adds	r3, #8
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b56e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b572:	4970      	ldr	r1, [pc, #448]	; (800b734 <etharp_query+0x278>)
 800b574:	4613      	mov	r3, r2
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	4413      	add	r3, r2
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	440b      	add	r3, r1
 800b57e:	3314      	adds	r3, #20
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d012      	beq.n	800b5ac <etharp_query+0xf0>
 800b586:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b58a:	496a      	ldr	r1, [pc, #424]	; (800b734 <etharp_query+0x278>)
 800b58c:	4613      	mov	r3, r2
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	4413      	add	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	440b      	add	r3, r1
 800b596:	3314      	adds	r3, #20
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d806      	bhi.n	800b5ac <etharp_query+0xf0>
 800b59e:	4b66      	ldr	r3, [pc, #408]	; (800b738 <etharp_query+0x27c>)
 800b5a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b5a4:	4965      	ldr	r1, [pc, #404]	; (800b73c <etharp_query+0x280>)
 800b5a6:	4866      	ldr	r0, [pc, #408]	; (800b740 <etharp_query+0x284>)
 800b5a8:	f001 fcca 	bl	800cf40 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <etharp_query+0xfc>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10c      	bne.n	800b5d2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 f976 	bl	800b8ac <etharp_request>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <etharp_query+0x116>
      return result;
 800b5cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5d0:	e0ab      	b.n	800b72a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <etharp_query+0x12a>
 800b5d8:	4b57      	ldr	r3, [pc, #348]	; (800b738 <etharp_query+0x27c>)
 800b5da:	f240 32db 	movw	r2, #987	; 0x3db
 800b5de:	4959      	ldr	r1, [pc, #356]	; (800b744 <etharp_query+0x288>)
 800b5e0:	4857      	ldr	r0, [pc, #348]	; (800b740 <etharp_query+0x284>)
 800b5e2:	f001 fcad 	bl	800cf40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b5e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b5ea:	4952      	ldr	r1, [pc, #328]	; (800b734 <etharp_query+0x278>)
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	4413      	add	r3, r2
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	440b      	add	r3, r1
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d919      	bls.n	800b632 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b5fe:	7cfa      	ldrb	r2, [r7, #19]
 800b600:	4b51      	ldr	r3, [pc, #324]	; (800b748 <etharp_query+0x28c>)
 800b602:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b604:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b608:	4613      	mov	r3, r2
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	4413      	add	r3, r2
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	3308      	adds	r3, #8
 800b612:	4a48      	ldr	r2, [pc, #288]	; (800b734 <etharp_query+0x278>)
 800b614:	4413      	add	r3, r2
 800b616:	1d1a      	adds	r2, r3, #4
 800b618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	4613      	mov	r3, r2
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f001 fbfd 	bl	800ce24 <ethernet_output>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b630:	e079      	b.n	800b726 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b632:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b636:	493f      	ldr	r1, [pc, #252]	; (800b734 <etharp_query+0x278>)
 800b638:	4613      	mov	r3, r2
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	4413      	add	r3, r2
 800b63e:	00db      	lsls	r3, r3, #3
 800b640:	440b      	add	r3, r1
 800b642:	3314      	adds	r3, #20
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d16d      	bne.n	800b726 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b652:	e01a      	b.n	800b68a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	895a      	ldrh	r2, [r3, #10]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	891b      	ldrh	r3, [r3, #8]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d10a      	bne.n	800b676 <etharp_query+0x1ba>
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d006      	beq.n	800b676 <etharp_query+0x1ba>
 800b668:	4b33      	ldr	r3, [pc, #204]	; (800b738 <etharp_query+0x27c>)
 800b66a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800b66e:	4937      	ldr	r1, [pc, #220]	; (800b74c <etharp_query+0x290>)
 800b670:	4833      	ldr	r0, [pc, #204]	; (800b740 <etharp_query+0x284>)
 800b672:	f001 fc65 	bl	800cf40 <iprintf>
      if (p->type != PBUF_ROM) {
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	7b1b      	ldrb	r3, [r3, #12]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d002      	beq.n	800b684 <etharp_query+0x1c8>
        copy_needed = 1;
 800b67e:	2301      	movs	r3, #1
 800b680:	61bb      	str	r3, [r7, #24]
        break;
 800b682:	e005      	b.n	800b690 <etharp_query+0x1d4>
      }
      p = p->next;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e1      	bne.n	800b654 <etharp_query+0x198>
    }
    if (copy_needed) {
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d017      	beq.n	800b6c6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	891b      	ldrh	r3, [r3, #8]
 800b69a:	2200      	movs	r2, #0
 800b69c:	4619      	mov	r1, r3
 800b69e:	2002      	movs	r0, #2
 800b6a0:	f7f9 fc1e 	bl	8004ee0 <pbuf_alloc>
 800b6a4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d011      	beq.n	800b6d0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b6ac:	6879      	ldr	r1, [r7, #4]
 800b6ae:	69f8      	ldr	r0, [r7, #28]
 800b6b0:	f7fa f8bc 	bl	800582c <pbuf_copy>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <etharp_query+0x214>
          pbuf_free(p);
 800b6ba:	69f8      	ldr	r0, [r7, #28]
 800b6bc:	f7f9 ff82 	bl	80055c4 <pbuf_free>
          p = NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61fb      	str	r3, [r7, #28]
 800b6c4:	e004      	b.n	800b6d0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b6ca:	69f8      	ldr	r0, [r7, #28]
 800b6cc:	f7fa f826 	bl	800571c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d024      	beq.n	800b720 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b6d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b6da:	4916      	ldr	r1, [pc, #88]	; (800b734 <etharp_query+0x278>)
 800b6dc:	4613      	mov	r3, r2
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	4413      	add	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	440b      	add	r3, r1
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b6ec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b6f0:	4910      	ldr	r1, [pc, #64]	; (800b734 <etharp_query+0x278>)
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	4413      	add	r3, r2
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	440b      	add	r3, r1
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f9 ff60 	bl	80055c4 <pbuf_free>
      }
      arp_table[i].q = p;
 800b704:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b708:	490a      	ldr	r1, [pc, #40]	; (800b734 <etharp_query+0x278>)
 800b70a:	4613      	mov	r3, r2
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	4413      	add	r3, r2
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	440b      	add	r3, r1
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b71e:	e002      	b.n	800b726 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b720:	23ff      	movs	r3, #255	; 0xff
 800b722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3728      	adds	r7, #40	; 0x28
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	2000011c 	.word	0x2000011c
 800b738:	0800f35c 	.word	0x0800f35c
 800b73c:	0800f508 	.word	0x0800f508
 800b740:	0800f3d4 	.word	0x0800f3d4
 800b744:	0800f4fc 	.word	0x0800f4fc
 800b748:	2000020c 	.word	0x2000020c
 800b74c:	0800f530 	.word	0x0800f530

0800b750 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af02      	add	r7, sp, #8
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <etharp_raw+0x26>
 800b768:	4b3a      	ldr	r3, [pc, #232]	; (800b854 <etharp_raw+0x104>)
 800b76a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800b76e:	493a      	ldr	r1, [pc, #232]	; (800b858 <etharp_raw+0x108>)
 800b770:	483a      	ldr	r0, [pc, #232]	; (800b85c <etharp_raw+0x10c>)
 800b772:	f001 fbe5 	bl	800cf40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b776:	2200      	movs	r2, #0
 800b778:	211c      	movs	r1, #28
 800b77a:	2002      	movs	r0, #2
 800b77c:	f7f9 fbb0 	bl	8004ee0 <pbuf_alloc>
 800b780:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b788:	f04f 33ff 	mov.w	r3, #4294967295
 800b78c:	e05d      	b.n	800b84a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	895b      	ldrh	r3, [r3, #10]
 800b792:	2b1b      	cmp	r3, #27
 800b794:	d806      	bhi.n	800b7a4 <etharp_raw+0x54>
 800b796:	4b2f      	ldr	r3, [pc, #188]	; (800b854 <etharp_raw+0x104>)
 800b798:	f240 4264 	movw	r2, #1124	; 0x464
 800b79c:	4930      	ldr	r1, [pc, #192]	; (800b860 <etharp_raw+0x110>)
 800b79e:	482f      	ldr	r0, [pc, #188]	; (800b85c <etharp_raw+0x10c>)
 800b7a0:	f001 fbce 	bl	800cf40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b7aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f8 fde4 	bl	800437a <lwip_htons>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7c0:	2b06      	cmp	r3, #6
 800b7c2:	d006      	beq.n	800b7d2 <etharp_raw+0x82>
 800b7c4:	4b23      	ldr	r3, [pc, #140]	; (800b854 <etharp_raw+0x104>)
 800b7c6:	f240 426b 	movw	r2, #1131	; 0x46b
 800b7ca:	4926      	ldr	r1, [pc, #152]	; (800b864 <etharp_raw+0x114>)
 800b7cc:	4823      	ldr	r0, [pc, #140]	; (800b85c <etharp_raw+0x10c>)
 800b7ce:	f001 fbb7 	bl	800cf40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	2206      	movs	r2, #6
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 fb9d 	bl	800cf1a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	3312      	adds	r3, #18
 800b7e4:	2206      	movs	r2, #6
 800b7e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f001 fb96 	bl	800cf1a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	330e      	adds	r3, #14
 800b7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	3318      	adds	r3, #24
 800b7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2200      	movs	r2, #0
 800b806:	701a      	strb	r2, [r3, #0]
 800b808:	2200      	movs	r2, #0
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2200      	movs	r2, #0
 800b814:	f042 0208 	orr.w	r2, r2, #8
 800b818:	709a      	strb	r2, [r3, #2]
 800b81a:	2200      	movs	r2, #0
 800b81c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2206      	movs	r2, #6
 800b822:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2204      	movs	r2, #4
 800b828:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b82a:	f640 0306 	movw	r3, #2054	; 0x806
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	69b9      	ldr	r1, [r7, #24]
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f001 faf4 	bl	800ce24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b83c:	69b8      	ldr	r0, [r7, #24]
 800b83e:	f7f9 fec1 	bl	80055c4 <pbuf_free>
  p = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	0800f35c 	.word	0x0800f35c
 800b858:	0800f4ac 	.word	0x0800f4ac
 800b85c:	0800f3d4 	.word	0x0800f3d4
 800b860:	0800f54c 	.word	0x0800f54c
 800b864:	0800f580 	.word	0x0800f580

0800b868 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af04      	add	r7, sp, #16
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b884:	2201      	movs	r2, #1
 800b886:	9203      	str	r2, [sp, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	9202      	str	r2, [sp, #8]
 800b88c:	4a06      	ldr	r2, [pc, #24]	; (800b8a8 <etharp_request_dst+0x40>)
 800b88e:	9201      	str	r2, [sp, #4]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	4603      	mov	r3, r0
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff ff5a 	bl	800b750 <etharp_raw>
 800b89c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800facc 	.word	0x0800facc

0800b8ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b8b6:	4a05      	ldr	r2, [pc, #20]	; (800b8cc <etharp_request+0x20>)
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff ffd4 	bl	800b868 <etharp_request_dst>
 800b8c0:	4603      	mov	r3, r0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0800fac4 	.word	0x0800fac4

0800b8d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	; 0x38
 800b8d4:	af04      	add	r7, sp, #16
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b8da:	4b7a      	ldr	r3, [pc, #488]	; (800bac4 <icmp_input+0x1f4>)
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	f003 030f 	and.w	r3, r3, #15
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8f2:	2b13      	cmp	r3, #19
 800b8f4:	f240 80d1 	bls.w	800ba9a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	895b      	ldrh	r3, [r3, #10]
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	f240 80ce 	bls.w	800ba9e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b90c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 80bb 	beq.w	800ba8c <icmp_input+0x1bc>
 800b916:	2b08      	cmp	r3, #8
 800b918:	f040 80bb 	bne.w	800ba92 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800b91c:	4b6a      	ldr	r3, [pc, #424]	; (800bac8 <icmp_input+0x1f8>)
 800b91e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b920:	4b68      	ldr	r3, [pc, #416]	; (800bac4 <icmp_input+0x1f4>)
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b928:	2be0      	cmp	r3, #224	; 0xe0
 800b92a:	f000 80bf 	beq.w	800baac <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b92e:	4b65      	ldr	r3, [pc, #404]	; (800bac4 <icmp_input+0x1f4>)
 800b930:	695a      	ldr	r2, [r3, #20]
 800b932:	4b64      	ldr	r3, [pc, #400]	; (800bac4 <icmp_input+0x1f4>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f000 fbd1 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f040 80b5 	bne.w	800bab0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	891b      	ldrh	r3, [r3, #8]
 800b94a:	2b07      	cmp	r3, #7
 800b94c:	f240 80a9 	bls.w	800baa2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b952:	330e      	adds	r3, #14
 800b954:	b29b      	uxth	r3, r3
 800b956:	b21b      	sxth	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f9 fe0e 	bl	800557c <pbuf_header>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d046      	beq.n	800b9f4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	891a      	ldrh	r2, [r3, #8]
 800b96a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b96c:	4413      	add	r3, r2
 800b96e:	b29b      	uxth	r3, r3
 800b970:	2200      	movs	r2, #0
 800b972:	4619      	mov	r1, r3
 800b974:	2002      	movs	r0, #2
 800b976:	f7f9 fab3 	bl	8004ee0 <pbuf_alloc>
 800b97a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8098 	beq.w	800bab4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	895b      	ldrh	r3, [r3, #10]
 800b988:	461a      	mov	r2, r3
 800b98a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b98c:	3308      	adds	r3, #8
 800b98e:	429a      	cmp	r2, r3
 800b990:	d203      	bcs.n	800b99a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800b992:	69b8      	ldr	r0, [r7, #24]
 800b994:	f7f9 fe16 	bl	80055c4 <pbuf_free>
        goto icmperr;
 800b998:	e08d      	b.n	800bab6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f001 fab9 	bl	800cf1a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800b9a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9aa:	425b      	negs	r3, r3
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	b21b      	sxth	r3, r3
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	69b8      	ldr	r0, [r7, #24]
 800b9b4:	f7f9 fde2 	bl	800557c <pbuf_header>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d009      	beq.n	800b9d2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b9be:	4b43      	ldr	r3, [pc, #268]	; (800bacc <icmp_input+0x1fc>)
 800b9c0:	22af      	movs	r2, #175	; 0xaf
 800b9c2:	4943      	ldr	r1, [pc, #268]	; (800bad0 <icmp_input+0x200>)
 800b9c4:	4843      	ldr	r0, [pc, #268]	; (800bad4 <icmp_input+0x204>)
 800b9c6:	f001 fabb 	bl	800cf40 <iprintf>
        pbuf_free(r);
 800b9ca:	69b8      	ldr	r0, [r7, #24]
 800b9cc:	f7f9 fdfa 	bl	80055c4 <pbuf_free>
        goto icmperr;
 800b9d0:	e071      	b.n	800bab6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	69b8      	ldr	r0, [r7, #24]
 800b9d6:	f7f9 ff29 	bl	800582c <pbuf_copy>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800b9e0:	69b8      	ldr	r0, [r7, #24]
 800b9e2:	f7f9 fdef 	bl	80055c4 <pbuf_free>
        goto icmperr;
 800b9e6:	e066      	b.n	800bab6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7f9 fdeb 	bl	80055c4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	e015      	b.n	800ba20 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b9f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9f6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800b9fa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b9fe:	33f2      	adds	r3, #242	; 0xf2
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	b21b      	sxth	r3, r3
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f9 fdb8 	bl	800557c <pbuf_header>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ba12:	4b2e      	ldr	r3, [pc, #184]	; (800bacc <icmp_input+0x1fc>)
 800ba14:	22c0      	movs	r2, #192	; 0xc0
 800ba16:	4930      	ldr	r1, [pc, #192]	; (800bad8 <icmp_input+0x208>)
 800ba18:	482e      	ldr	r0, [pc, #184]	; (800bad4 <icmp_input+0x204>)
 800ba1a:	f001 fa91 	bl	800cf40 <iprintf>
        goto icmperr;
 800ba1e:	e04a      	b.n	800bab6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ba26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7f9 fda5 	bl	800557c <pbuf_header>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d12b      	bne.n	800ba90 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ba46:	4b1f      	ldr	r3, [pc, #124]	; (800bac4 <icmp_input+0x1f4>)
 800ba48:	691a      	ldr	r2, [r3, #16]
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2200      	movs	r2, #0
 800ba58:	709a      	strb	r2, [r3, #2]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	22ff      	movs	r2, #255	; 0xff
 800ba62:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	2200      	movs	r2, #0
 800ba68:	729a      	strb	r2, [r3, #10]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	9302      	str	r3, [sp, #8]
 800ba72:	2301      	movs	r3, #1
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	23ff      	movs	r3, #255	; 0xff
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	69f9      	ldr	r1, [r7, #28]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fa5b 	bl	800bf3c <ip4_output_if>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800ba8a:	e001      	b.n	800ba90 <icmp_input+0x1c0>
    break;
 800ba8c:	bf00      	nop
 800ba8e:	e000      	b.n	800ba92 <icmp_input+0x1c2>
    break;
 800ba90:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7f9 fd96 	bl	80055c4 <pbuf_free>
  return;
 800ba98:	e011      	b.n	800babe <icmp_input+0x1ee>
    goto lenerr;
 800ba9a:	bf00      	nop
 800ba9c:	e002      	b.n	800baa4 <icmp_input+0x1d4>
    goto lenerr;
 800ba9e:	bf00      	nop
 800baa0:	e000      	b.n	800baa4 <icmp_input+0x1d4>
      goto lenerr;
 800baa2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7f9 fd8d 	bl	80055c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800baaa:	e008      	b.n	800babe <icmp_input+0x1ee>
      goto icmperr;
 800baac:	bf00      	nop
 800baae:	e002      	b.n	800bab6 <icmp_input+0x1e6>
      goto icmperr;
 800bab0:	bf00      	nop
 800bab2:	e000      	b.n	800bab6 <icmp_input+0x1e6>
        goto icmperr;
 800bab4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7f9 fd84 	bl	80055c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800babc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800babe:	3728      	adds	r7, #40	; 0x28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	200037a4 	.word	0x200037a4
 800bac8:	200037b8 	.word	0x200037b8
 800bacc:	0800f5c4 	.word	0x0800f5c4
 800bad0:	0800f5fc 	.word	0x0800f5fc
 800bad4:	0800f634 	.word	0x0800f634
 800bad8:	0800f65c 	.word	0x0800f65c

0800badc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bae8:	78fb      	ldrb	r3, [r7, #3]
 800baea:	461a      	mov	r2, r3
 800baec:	2103      	movs	r1, #3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f814 	bl	800bb1c <icmp_send_response>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	210b      	movs	r1, #11
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f804 	bl	800bb1c <icmp_send_response>
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08c      	sub	sp, #48	; 0x30
 800bb20:	af04      	add	r7, sp, #16
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2124      	movs	r1, #36	; 0x24
 800bb30:	2001      	movs	r0, #1
 800bb32:	f7f9 f9d5 	bl	8004ee0 <pbuf_alloc>
 800bb36:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d04c      	beq.n	800bbd8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	2b23      	cmp	r3, #35	; 0x23
 800bb44:	d806      	bhi.n	800bb54 <icmp_send_response+0x38>
 800bb46:	4b26      	ldr	r3, [pc, #152]	; (800bbe0 <icmp_send_response+0xc4>)
 800bb48:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bb4c:	4925      	ldr	r1, [pc, #148]	; (800bbe4 <icmp_send_response+0xc8>)
 800bb4e:	4826      	ldr	r0, [pc, #152]	; (800bbe8 <icmp_send_response+0xcc>)
 800bb50:	f001 f9f6 	bl	800cf40 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	78fa      	ldrb	r2, [r7, #3]
 800bb64:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	78ba      	ldrb	r2, [r7, #2]
 800bb6a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	711a      	strb	r2, [r3, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	719a      	strb	r2, [r3, #6]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	f103 0008 	add.w	r0, r3, #8
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	221c      	movs	r2, #28
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f001 f9c3 	bl	800cf1a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f824 	bl	800bbec <ip4_route>
 800bba4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d011      	beq.n	800bbd0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	709a      	strb	r2, [r3, #2]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bbb6:	f107 020c 	add.w	r2, r7, #12
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	23ff      	movs	r3, #255	; 0xff
 800bbc8:	2100      	movs	r1, #0
 800bbca:	69f8      	ldr	r0, [r7, #28]
 800bbcc:	f000 f9b6 	bl	800bf3c <ip4_output_if>
  }
  pbuf_free(q);
 800bbd0:	69f8      	ldr	r0, [r7, #28]
 800bbd2:	f7f9 fcf7 	bl	80055c4 <pbuf_free>
 800bbd6:	e000      	b.n	800bbda <icmp_send_response+0xbe>
    return;
 800bbd8:	bf00      	nop
}
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	0800f5c4 	.word	0x0800f5c4
 800bbe4:	0800f690 	.word	0x0800f690
 800bbe8:	0800f634 	.word	0x0800f634

0800bbec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bbf4:	4b30      	ldr	r3, [pc, #192]	; (800bcb8 <ip4_route+0xcc>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	e036      	b.n	800bc6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d02b      	beq.n	800bc64 <ip4_route+0x78>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc12:	089b      	lsrs	r3, r3, #2
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d022      	beq.n	800bc64 <ip4_route+0x78>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3304      	adds	r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01d      	beq.n	800bc64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	405a      	eors	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3308      	adds	r3, #8
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	e033      	b.n	800bcac <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc4a:	f003 0302 	and.w	r3, r3, #2
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d108      	bne.n	800bc64 <ip4_route+0x78>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d101      	bne.n	800bc64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	e023      	b.n	800bcac <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1c5      	bne.n	800bbfc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bc70:	4b12      	ldr	r3, [pc, #72]	; (800bcbc <ip4_route+0xd0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d015      	beq.n	800bca4 <ip4_route+0xb8>
 800bc78:	4b10      	ldr	r3, [pc, #64]	; (800bcbc <ip4_route+0xd0>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00d      	beq.n	800bca4 <ip4_route+0xb8>
 800bc88:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <ip4_route+0xd0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bc90:	f003 0304 	and.w	r3, r3, #4
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d005      	beq.n	800bca4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800bc98:	4b08      	ldr	r3, [pc, #32]	; (800bcbc <ip4_route+0xd0>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e001      	b.n	800bcac <ip4_route+0xc0>
  }

  return netif_default;
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <ip4_route+0xd0>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20006cc4 	.word	0x20006cc4
 800bcbc:	20006cc8 	.word	0x20006cc8

0800bcc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	091b      	lsrs	r3, r3, #4
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d004      	beq.n	800bce6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7f9 fc71 	bl	80055c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	e122      	b.n	800bf2c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800bcf2:	897b      	ldrh	r3, [r7, #10]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	885b      	ldrh	r3, [r3, #2]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f8 fb3b 	bl	800437a <lwip_htons>
 800bd04:	4603      	mov	r3, r0
 800bd06:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	891b      	ldrh	r3, [r3, #8]
 800bd0c:	893a      	ldrh	r2, [r7, #8]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d204      	bcs.n	800bd1c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800bd12:	893b      	ldrh	r3, [r7, #8]
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7f9 fae0 	bl	80052dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	895b      	ldrh	r3, [r3, #10]
 800bd20:	897a      	ldrh	r2, [r7, #10]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d807      	bhi.n	800bd36 <ip4_input+0x76>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	891b      	ldrh	r3, [r3, #8]
 800bd2a:	893a      	ldrh	r2, [r7, #8]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d802      	bhi.n	800bd36 <ip4_input+0x76>
 800bd30:	897b      	ldrh	r3, [r7, #10]
 800bd32:	2b13      	cmp	r3, #19
 800bd34:	d804      	bhi.n	800bd40 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f9 fc44 	bl	80055c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e0f5      	b.n	800bf2c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	4a7b      	ldr	r2, [pc, #492]	; (800bf34 <ip4_input+0x274>)
 800bd46:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	4a79      	ldr	r2, [pc, #484]	; (800bf34 <ip4_input+0x274>)
 800bd4e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bd50:	4b78      	ldr	r3, [pc, #480]	; (800bf34 <ip4_input+0x274>)
 800bd52:	695b      	ldr	r3, [r3, #20]
 800bd54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd58:	2be0      	cmp	r3, #224	; 0xe0
 800bd5a:	d112      	bne.n	800bd82 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <ip4_input+0xbc>
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <ip4_input+0xbc>
      netif = inp;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	e041      	b.n	800be00 <ip4_input+0x140>
    } else {
      netif = NULL;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	613b      	str	r3, [r7, #16]
 800bd80:	e03e      	b.n	800be00 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bd82:	2301      	movs	r3, #1
 800bd84:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d014      	beq.n	800bdc4 <ip4_input+0x104>
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00f      	beq.n	800bdc4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bda4:	4b63      	ldr	r3, [pc, #396]	; (800bf34 <ip4_input+0x274>)
 800bda6:	695a      	ldr	r2, [r3, #20]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d026      	beq.n	800be00 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bdb2:	4b60      	ldr	r3, [pc, #384]	; (800bf34 <ip4_input+0x274>)
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	6939      	ldr	r1, [r7, #16]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 f991 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800bdbe:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d11d      	bne.n	800be00 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800bdca:	4b5a      	ldr	r3, [pc, #360]	; (800bf34 <ip4_input+0x274>)
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b7f      	cmp	r3, #127	; 0x7f
 800bdd2:	d102      	bne.n	800bdda <ip4_input+0x11a>
          netif = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	613b      	str	r3, [r7, #16]
          break;
 800bdd8:	e012      	b.n	800be00 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800bdde:	4b56      	ldr	r3, [pc, #344]	; (800bf38 <ip4_input+0x278>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	e002      	b.n	800bdec <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d102      	bne.n	800bdfa <ip4_input+0x13a>
        netif = netif->next;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1c4      	bne.n	800bd8a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800be00:	4b4c      	ldr	r3, [pc, #304]	; (800bf34 <ip4_input+0x274>)
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f96a 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800be12:	4b48      	ldr	r3, [pc, #288]	; (800bf34 <ip4_input+0x274>)
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800be1a:	2be0      	cmp	r3, #224	; 0xe0
 800be1c:	d104      	bne.n	800be28 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7f9 fbd0 	bl	80055c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	e081      	b.n	800bf2c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d104      	bne.n	800be38 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7f9 fbc8 	bl	80055c4 <pbuf_free>
    return ERR_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	e079      	b.n	800bf2c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	88db      	ldrh	r3, [r3, #6]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	461a      	mov	r2, r3
 800be40:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800be44:	4013      	ands	r3, r2
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00b      	beq.n	800be62 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fc8e 	bl	800c76c <ip4_reass>
 800be50:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <ip4_input+0x19c>
      return ERR_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	e067      	b.n	800bf2c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800be62:	4a34      	ldr	r2, [pc, #208]	; (800bf34 <ip4_input+0x274>)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800be68:	4a32      	ldr	r2, [pc, #200]	; (800bf34 <ip4_input+0x274>)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800be6e:	4a31      	ldr	r2, [pc, #196]	; (800bf34 <ip4_input+0x274>)
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	b29b      	uxth	r3, r3
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	b29a      	uxth	r2, r3
 800be84:	4b2b      	ldr	r3, [pc, #172]	; (800bf34 <ip4_input+0x274>)
 800be86:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800be88:	897b      	ldrh	r3, [r7, #10]
 800be8a:	425b      	negs	r3, r3
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	b21b      	sxth	r3, r3
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7f9 fb72 	bl	800557c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	7a5b      	ldrb	r3, [r3, #9]
 800be9c:	2b06      	cmp	r3, #6
 800be9e:	d009      	beq.n	800beb4 <ip4_input+0x1f4>
 800bea0:	2b11      	cmp	r3, #17
 800bea2:	d002      	beq.n	800beaa <ip4_input+0x1ea>
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d00a      	beq.n	800bebe <ip4_input+0x1fe>
 800bea8:	e00e      	b.n	800bec8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fe fb2f 	bl	800a510 <udp_input>
      break;
 800beb2:	e028      	b.n	800bf06 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7fa ffcc 	bl	8006e54 <tcp_input>
      break;
 800bebc:	e023      	b.n	800bf06 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff fd05 	bl	800b8d0 <icmp_input>
      break;
 800bec6:	e01e      	b.n	800bf06 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bec8:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <ip4_input+0x274>)
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	6939      	ldr	r1, [r7, #16]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 f906 	bl	800c0e0 <ip4_addr_isbroadcast_u32>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d112      	bne.n	800bf00 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800beda:	4b16      	ldr	r3, [pc, #88]	; (800bf34 <ip4_input+0x274>)
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bee2:	2be0      	cmp	r3, #224	; 0xe0
 800bee4:	d00c      	beq.n	800bf00 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800bee6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7f9 fb57 	bl	80055a0 <pbuf_header_force>
        p->payload = iphdr;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bef8:	2102      	movs	r1, #2
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff fdee 	bl	800badc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7f9 fb5f 	bl	80055c4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <ip4_input+0x274>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bf0c:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <ip4_input+0x274>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <ip4_input+0x274>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bf18:	4b06      	ldr	r3, [pc, #24]	; (800bf34 <ip4_input+0x274>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bf1e:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <ip4_input+0x274>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bf24:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <ip4_input+0x274>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	200037a4 	.word	0x200037a4
 800bf38:	20006cc4 	.word	0x20006cc4

0800bf3c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08a      	sub	sp, #40	; 0x28
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d009      	beq.n	800bf68 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <ip4_output_if+0x26>
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	3304      	adds	r3, #4
 800bf66:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bf68:	78fa      	ldrb	r2, [r7, #3]
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	9302      	str	r3, [sp, #8]
 800bf6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf72:	9301      	str	r3, [sp, #4]
 800bf74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	6979      	ldr	r1, [r7, #20]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 f805 	bl	800bf90 <ip4_output_if_src>
 800bf86:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b088      	sub	sp, #32
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
 800bf9c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	89db      	ldrh	r3, [r3, #14]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d006      	beq.n	800bfb4 <ip4_output_if_src+0x24>
 800bfa6:	4b48      	ldr	r3, [pc, #288]	; (800c0c8 <ip4_output_if_src+0x138>)
 800bfa8:	f240 3233 	movw	r2, #819	; 0x333
 800bfac:	4947      	ldr	r1, [pc, #284]	; (800c0cc <ip4_output_if_src+0x13c>)
 800bfae:	4848      	ldr	r0, [pc, #288]	; (800c0d0 <ip4_output_if_src+0x140>)
 800bfb0:	f000 ffc6 	bl	800cf40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d060      	beq.n	800c07c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bfba:	2314      	movs	r3, #20
 800bfbc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800bfbe:	2114      	movs	r1, #20
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7f9 fadb 	bl	800557c <pbuf_header>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bfcc:	f06f 0301 	mvn.w	r3, #1
 800bfd0:	e075      	b.n	800c0be <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	895b      	ldrh	r3, [r3, #10]
 800bfdc:	2b13      	cmp	r3, #19
 800bfde:	d806      	bhi.n	800bfee <ip4_output_if_src+0x5e>
 800bfe0:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <ip4_output_if_src+0x138>)
 800bfe2:	f240 3261 	movw	r2, #865	; 0x361
 800bfe6:	493b      	ldr	r1, [pc, #236]	; (800c0d4 <ip4_output_if_src+0x144>)
 800bfe8:	4839      	ldr	r0, [pc, #228]	; (800c0d0 <ip4_output_if_src+0x140>)
 800bfea:	f000 ffa9 	bl	800cf40 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	78fa      	ldrb	r2, [r7, #3]
 800bff2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bffa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c004:	8b7b      	ldrh	r3, [r7, #26]
 800c006:	089b      	lsrs	r3, r3, #2
 800c008:	b29b      	uxth	r3, r3
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c010:	b2da      	uxtb	r2, r3
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c01c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	891b      	ldrh	r3, [r3, #8]
 800c022:	4618      	mov	r0, r3
 800c024:	f7f8 f9a9 	bl	800437a <lwip_htons>
 800c028:	4603      	mov	r3, r0
 800c02a:	461a      	mov	r2, r3
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	2200      	movs	r2, #0
 800c034:	719a      	strb	r2, [r3, #6]
 800c036:	2200      	movs	r2, #0
 800c038:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c03a:	4b27      	ldr	r3, [pc, #156]	; (800c0d8 <ip4_output_if_src+0x148>)
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f8 f99b 	bl	800437a <lwip_htons>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c04c:	4b22      	ldr	r3, [pc, #136]	; (800c0d8 <ip4_output_if_src+0x148>)
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	3301      	adds	r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	4b20      	ldr	r3, [pc, #128]	; (800c0d8 <ip4_output_if_src+0x148>)
 800c056:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d104      	bne.n	800c068 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c05e:	4b1f      	ldr	r3, [pc, #124]	; (800c0dc <ip4_output_if_src+0x14c>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	60da      	str	r2, [r3, #12]
 800c066:	e003      	b.n	800c070 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2200      	movs	r2, #0
 800c074:	729a      	strb	r2, [r3, #10]
 800c076:	2200      	movs	r2, #0
 800c078:	72da      	strb	r2, [r3, #11]
 800c07a:	e008      	b.n	800c08e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c088:	f107 0314 	add.w	r3, r7, #20
 800c08c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00c      	beq.n	800c0b0 <ip4_output_if_src+0x120>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	891a      	ldrh	r2, [r3, #8]
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d906      	bls.n	800c0b0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f000 fd0a 	bl	800cac0 <ip4_frag>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	e006      	b.n	800c0be <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ba:	4798      	blx	r3
 800c0bc:	4603      	mov	r3, r0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	0800f6bc 	.word	0x0800f6bc
 800c0cc:	0800f6f0 	.word	0x0800f6f0
 800c0d0:	0800f6fc 	.word	0x0800f6fc
 800c0d4:	0800f724 	.word	0x0800f724
 800c0d8:	2000020e 	.word	0x2000020e
 800c0dc:	0800fac0 	.word	0x0800fac0

0800c0e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d002      	beq.n	800c0fc <ip4_addr_isbroadcast_u32+0x1c>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e02a      	b.n	800c156 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c106:	f003 0302 	and.w	r3, r3, #2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	e021      	b.n	800c156 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	3304      	adds	r3, #4
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d101      	bne.n	800c122 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	e019      	b.n	800c156 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	3304      	adds	r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	405a      	eors	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	3308      	adds	r3, #8
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4013      	ands	r3, r2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10d      	bne.n	800c154 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	3308      	adds	r3, #8
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	43da      	mvns	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	3308      	adds	r3, #8
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d101      	bne.n	800c154 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c154:	2300      	movs	r3, #0
  }
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c16e:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <ip_reass_tmr+0x54>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c174:	e018      	b.n	800c1a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	7fdb      	ldrb	r3, [r3, #31]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00b      	beq.n	800c196 <ip_reass_tmr+0x32>
      r->timer--;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	7fdb      	ldrb	r3, [r3, #31]
 800c182:	3b01      	subs	r3, #1
 800c184:	b2da      	uxtb	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e008      	b.n	800c1a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f80a 	bl	800c1bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e3      	bne.n	800c176 <ip_reass_tmr+0x12>
     }
   }
}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20000210 	.word	0x20000210

0800c1bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d105      	bne.n	800c1de <ip_reass_free_complete_datagram+0x22>
 800c1d2:	4b45      	ldr	r3, [pc, #276]	; (800c2e8 <ip_reass_free_complete_datagram+0x12c>)
 800c1d4:	22ab      	movs	r2, #171	; 0xab
 800c1d6:	4945      	ldr	r1, [pc, #276]	; (800c2ec <ip_reass_free_complete_datagram+0x130>)
 800c1d8:	4845      	ldr	r0, [pc, #276]	; (800c2f0 <ip_reass_free_complete_datagram+0x134>)
 800c1da:	f000 feb1 	bl	800cf40 <iprintf>
  if (prev != NULL) {
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d005      	beq.n	800c1fa <ip_reass_free_complete_datagram+0x3e>
 800c1ee:	4b3e      	ldr	r3, [pc, #248]	; (800c2e8 <ip_reass_free_complete_datagram+0x12c>)
 800c1f0:	22ad      	movs	r2, #173	; 0xad
 800c1f2:	4940      	ldr	r1, [pc, #256]	; (800c2f4 <ip_reass_free_complete_datagram+0x138>)
 800c1f4:	483e      	ldr	r0, [pc, #248]	; (800c2f0 <ip_reass_free_complete_datagram+0x134>)
 800c1f6:	f000 fea3 	bl	800cf40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	889b      	ldrh	r3, [r3, #4]
 800c206:	b29b      	uxth	r3, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d12a      	bne.n	800c262 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	6858      	ldr	r0, [r3, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3308      	adds	r3, #8
 800c222:	2214      	movs	r2, #20
 800c224:	4619      	mov	r1, r3
 800c226:	f000 fe78 	bl	800cf1a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c22a:	2101      	movs	r1, #1
 800c22c:	69b8      	ldr	r0, [r7, #24]
 800c22e:	f7ff fc65 	bl	800bafc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c232:	69b8      	ldr	r0, [r7, #24]
 800c234:	f7f9 fa5a 	bl	80056ec <pbuf_clen>
 800c238:	4603      	mov	r3, r0
 800c23a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c23c:	8bfa      	ldrh	r2, [r7, #30]
 800c23e:	8a7b      	ldrh	r3, [r7, #18]
 800c240:	4413      	add	r3, r2
 800c242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c246:	db05      	blt.n	800c254 <ip_reass_free_complete_datagram+0x98>
 800c248:	4b27      	ldr	r3, [pc, #156]	; (800c2e8 <ip_reass_free_complete_datagram+0x12c>)
 800c24a:	22bc      	movs	r2, #188	; 0xbc
 800c24c:	492a      	ldr	r1, [pc, #168]	; (800c2f8 <ip_reass_free_complete_datagram+0x13c>)
 800c24e:	4828      	ldr	r0, [pc, #160]	; (800c2f0 <ip_reass_free_complete_datagram+0x134>)
 800c250:	f000 fe76 	bl	800cf40 <iprintf>
    pbufs_freed += clen;
 800c254:	8bfa      	ldrh	r2, [r7, #30]
 800c256:	8a7b      	ldrh	r3, [r7, #18]
 800c258:	4413      	add	r3, r2
 800c25a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c25c:	69b8      	ldr	r0, [r7, #24]
 800c25e:	f7f9 f9b1 	bl	80055c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c268:	e01f      	b.n	800c2aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7f9 fa36 	bl	80056ec <pbuf_clen>
 800c280:	4603      	mov	r3, r0
 800c282:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c284:	8bfa      	ldrh	r2, [r7, #30]
 800c286:	8a7b      	ldrh	r3, [r7, #18]
 800c288:	4413      	add	r3, r2
 800c28a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c28e:	db05      	blt.n	800c29c <ip_reass_free_complete_datagram+0xe0>
 800c290:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <ip_reass_free_complete_datagram+0x12c>)
 800c292:	22cc      	movs	r2, #204	; 0xcc
 800c294:	4918      	ldr	r1, [pc, #96]	; (800c2f8 <ip_reass_free_complete_datagram+0x13c>)
 800c296:	4816      	ldr	r0, [pc, #88]	; (800c2f0 <ip_reass_free_complete_datagram+0x134>)
 800c298:	f000 fe52 	bl	800cf40 <iprintf>
    pbufs_freed += clen;
 800c29c:	8bfa      	ldrh	r2, [r7, #30]
 800c29e:	8a7b      	ldrh	r3, [r7, #18]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7f9 f98d 	bl	80055c4 <pbuf_free>
  while (p != NULL) {
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1dc      	bne.n	800c26a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f8c2 	bl	800c43c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c2b8:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <ip_reass_free_complete_datagram+0x140>)
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	8bfa      	ldrh	r2, [r7, #30]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d905      	bls.n	800c2ce <ip_reass_free_complete_datagram+0x112>
 800c2c2:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <ip_reass_free_complete_datagram+0x12c>)
 800c2c4:	22d2      	movs	r2, #210	; 0xd2
 800c2c6:	490e      	ldr	r1, [pc, #56]	; (800c300 <ip_reass_free_complete_datagram+0x144>)
 800c2c8:	4809      	ldr	r0, [pc, #36]	; (800c2f0 <ip_reass_free_complete_datagram+0x134>)
 800c2ca:	f000 fe39 	bl	800cf40 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <ip_reass_free_complete_datagram+0x140>)
 800c2d0:	881a      	ldrh	r2, [r3, #0]
 800c2d2:	8bfb      	ldrh	r3, [r7, #30]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	4b08      	ldr	r3, [pc, #32]	; (800c2fc <ip_reass_free_complete_datagram+0x140>)
 800c2da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c2dc:	8bfb      	ldrh	r3, [r7, #30]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3720      	adds	r7, #32
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	0800f754 	.word	0x0800f754
 800c2ec:	0800f790 	.word	0x0800f790
 800c2f0:	0800f79c 	.word	0x0800f79c
 800c2f4:	0800f7c4 	.word	0x0800f7c4
 800c2f8:	0800f7d8 	.word	0x0800f7d8
 800c2fc:	20000214 	.word	0x20000214
 800c300:	0800f7f8 	.word	0x0800f7f8

0800c304 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08a      	sub	sp, #40	; 0x28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c30e:	2300      	movs	r3, #0
 800c310:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c322:	4b28      	ldr	r3, [pc, #160]	; (800c3c4 <ip_reass_remove_oldest_datagram+0xc0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c328:	e030      	b.n	800c38c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	695a      	ldr	r2, [r3, #20]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	429a      	cmp	r2, r3
 800c334:	d10c      	bne.n	800c350 <ip_reass_remove_oldest_datagram+0x4c>
 800c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d106      	bne.n	800c350 <ip_reass_remove_oldest_datagram+0x4c>
 800c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c344:	899a      	ldrh	r2, [r3, #12]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	889b      	ldrh	r3, [r3, #4]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d014      	beq.n	800c37a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	3301      	adds	r3, #1
 800c354:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d104      	bne.n	800c366 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	61bb      	str	r3, [r7, #24]
 800c364:	e009      	b.n	800c37a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	7fda      	ldrb	r2, [r3, #31]
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	7fdb      	ldrb	r3, [r3, #31]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d803      	bhi.n	800c37a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c374:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1cb      	bne.n	800c32a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c398:	69b9      	ldr	r1, [r7, #24]
 800c39a:	6a38      	ldr	r0, [r7, #32]
 800c39c:	f7ff ff0e 	bl	800c1bc <ip_reass_free_complete_datagram>
 800c3a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	da02      	bge.n	800c3b8 <ip_reass_remove_oldest_datagram+0xb4>
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	dcac      	bgt.n	800c312 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c3b8:	697b      	ldr	r3, [r7, #20]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3728      	adds	r7, #40	; 0x28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000210 	.word	0x20000210

0800c3c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c3d2:	2004      	movs	r0, #4
 800c3d4:	f7f8 fb80 	bl	8004ad8 <memp_malloc>
 800c3d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d110      	bne.n	800c402 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff ff8e 	bl	800c304 <ip_reass_remove_oldest_datagram>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	dc03      	bgt.n	800c3f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c3f0:	2004      	movs	r0, #4
 800c3f2:	f7f8 fb71 	bl	8004ad8 <memp_malloc>
 800c3f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	e016      	b.n	800c430 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c402:	2220      	movs	r2, #32
 800c404:	2100      	movs	r1, #0
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f000 fd92 	bl	800cf30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2203      	movs	r2, #3
 800c410:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <ip_reass_enqueue_new_datagram+0x70>)
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c41a:	4a07      	ldr	r2, [pc, #28]	; (800c438 <ip_reass_enqueue_new_datagram+0x70>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3308      	adds	r3, #8
 800c424:	2214      	movs	r2, #20
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 fd76 	bl	800cf1a <memcpy>
  return ipr;
 800c42e:	68fb      	ldr	r3, [r7, #12]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20000210 	.word	0x20000210

0800c43c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c446:	4b10      	ldr	r3, [pc, #64]	; (800c488 <ip_reass_dequeue_datagram+0x4c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d104      	bne.n	800c45a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a0c      	ldr	r2, [pc, #48]	; (800c488 <ip_reass_dequeue_datagram+0x4c>)
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	e00d      	b.n	800c476 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d106      	bne.n	800c46e <ip_reass_dequeue_datagram+0x32>
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <ip_reass_dequeue_datagram+0x50>)
 800c462:	f240 1245 	movw	r2, #325	; 0x145
 800c466:	490a      	ldr	r1, [pc, #40]	; (800c490 <ip_reass_dequeue_datagram+0x54>)
 800c468:	480a      	ldr	r0, [pc, #40]	; (800c494 <ip_reass_dequeue_datagram+0x58>)
 800c46a:	f000 fd69 	bl	800cf40 <iprintf>
    prev->next = ipr->next;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	2004      	movs	r0, #4
 800c47a:	f7f8 fb79 	bl	8004b70 <memp_free>
}
 800c47e:	bf00      	nop
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000210 	.word	0x20000210
 800c48c:	0800f754 	.word	0x0800f754
 800c490:	0800f814 	.word	0x0800f814
 800c494:	0800f79c 	.word	0x0800f79c

0800c498 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08c      	sub	sp, #48	; 0x30
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	885b      	ldrh	r3, [r3, #2]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7f7 ff5e 	bl	800437a <lwip_htons>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f003 030f 	and.w	r3, r3, #15
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	88db      	ldrh	r3, [r3, #6]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f7 ff4c 	bl	800437a <lwip_htons>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	701a      	strb	r2, [r3, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	705a      	strb	r2, [r3, #1]
 800c4fe:	2200      	movs	r2, #0
 800c500:	709a      	strb	r2, [r3, #2]
 800c502:	2200      	movs	r2, #0
 800c504:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	8b3a      	ldrh	r2, [r7, #24]
 800c50a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c50c:	8b3a      	ldrh	r2, [r7, #24]
 800c50e:	8b7b      	ldrh	r3, [r7, #26]
 800c510:	4413      	add	r3, r2
 800c512:	b29a      	uxth	r2, r3
 800c514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c516:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
 800c51e:	e061      	b.n	800c5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	889b      	ldrh	r3, [r3, #4]
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	889b      	ldrh	r3, [r3, #4]
 800c530:	b29b      	uxth	r3, r3
 800c532:	429a      	cmp	r2, r3
 800c534:	d232      	bcs.n	800c59c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c53a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d01f      	beq.n	800c582 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	889b      	ldrh	r3, [r3, #4]
 800c546:	b29a      	uxth	r2, r3
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	88db      	ldrh	r3, [r3, #6]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	429a      	cmp	r2, r3
 800c550:	f0c0 80e3 	bcc.w	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	88db      	ldrh	r3, [r3, #6]
 800c558:	b29a      	uxth	r2, r3
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	889b      	ldrh	r3, [r3, #4]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	429a      	cmp	r2, r3
 800c562:	f200 80da 	bhi.w	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	88db      	ldrh	r3, [r3, #6]
 800c570:	b29a      	uxth	r2, r3
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	889b      	ldrh	r3, [r3, #4]
 800c576:	b29b      	uxth	r3, r3
 800c578:	429a      	cmp	r2, r3
 800c57a:	d037      	beq.n	800c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c580:	e034      	b.n	800c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800c582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c584:	88db      	ldrh	r3, [r3, #6]
 800c586:	b29a      	uxth	r2, r3
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	889b      	ldrh	r3, [r3, #4]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	429a      	cmp	r2, r3
 800c590:	f200 80c5 	bhi.w	800c71e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	605a      	str	r2, [r3, #4]
      break;
 800c59a:	e027      	b.n	800c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	889b      	ldrh	r3, [r3, #4]
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	889b      	ldrh	r3, [r3, #4]
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	f000 80ba 	beq.w	800c722 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b0:	889b      	ldrh	r3, [r3, #4]
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	88db      	ldrh	r3, [r3, #6]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	f0c0 80b3 	bcc.w	800c726 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c8:	88db      	ldrh	r3, [r3, #6]
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	889b      	ldrh	r3, [r3, #4]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d001      	beq.n	800c5da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d19a      	bne.n	800c520 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800c5ea:	e000      	b.n	800c5ee <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800c5ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d12d      	bne.n	800c650 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800c5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d01c      	beq.n	800c634 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	889b      	ldrh	r3, [r3, #4]
 800c604:	b29b      	uxth	r3, r3
 800c606:	429a      	cmp	r2, r3
 800c608:	d906      	bls.n	800c618 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800c60a:	4b51      	ldr	r3, [pc, #324]	; (800c750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c60c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c610:	4950      	ldr	r1, [pc, #320]	; (800c754 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c612:	4851      	ldr	r0, [pc, #324]	; (800c758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c614:	f000 fc94 	bl	800cf40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	88db      	ldrh	r3, [r3, #6]
 800c622:	b29a      	uxth	r2, r3
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	889b      	ldrh	r3, [r3, #4]
 800c628:	b29b      	uxth	r3, r3
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d010      	beq.n	800c650 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	623b      	str	r3, [r7, #32]
 800c632:	e00d      	b.n	800c650 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d006      	beq.n	800c64a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800c63c:	4b44      	ldr	r3, [pc, #272]	; (800c750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c63e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800c642:	4946      	ldr	r1, [pc, #280]	; (800c75c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c644:	4844      	ldr	r0, [pc, #272]	; (800c758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c646:	f000 fc7b 	bl	800cf40 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d105      	bne.n	800c662 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	7f9b      	ldrb	r3, [r3, #30]
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d059      	beq.n	800c716 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d04f      	beq.n	800c708 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d006      	beq.n	800c67e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	889b      	ldrh	r3, [r3, #4]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	623b      	str	r3, [r7, #32]
 800c682:	e041      	b.n	800c708 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c68e:	e012      	b.n	800c6b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	88db      	ldrh	r3, [r3, #6]
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	889b      	ldrh	r3, [r3, #4]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d002      	beq.n	800c6ac <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	623b      	str	r3, [r7, #32]
            break;
 800c6aa:	e007      	b.n	800c6bc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e9      	bne.n	800c690 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d022      	beq.n	800c708 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d106      	bne.n	800c6d8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800c6ca:	4b21      	ldr	r3, [pc, #132]	; (800c750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c6cc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800c6d0:	4923      	ldr	r1, [pc, #140]	; (800c760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c6d2:	4821      	ldr	r0, [pc, #132]	; (800c758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c6d4:	f000 fc34 	bl	800cf40 <iprintf>
          LWIP_ASSERT("sanity check",
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d106      	bne.n	800c6f2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800c6e4:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c6e6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c6ea:	491d      	ldr	r1, [pc, #116]	; (800c760 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c6ec:	481a      	ldr	r0, [pc, #104]	; (800c758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c6ee:	f000 fc27 	bl	800cf40 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d006      	beq.n	800c708 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c6fc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800c700:	4918      	ldr	r1, [pc, #96]	; (800c764 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c702:	4815      	ldr	r0, [pc, #84]	; (800c758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c704:	f000 fc1c 	bl	800cf40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	bf14      	ite	ne
 800c70e:	2301      	movne	r3, #1
 800c710:	2300      	moveq	r3, #0
 800c712:	b2db      	uxtb	r3, r3
 800c714:	e018      	b.n	800c748 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c716:	2300      	movs	r3, #0
 800c718:	e016      	b.n	800c748 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800c71a:	bf00      	nop
 800c71c:	e004      	b.n	800c728 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800c71e:	bf00      	nop
 800c720:	e002      	b.n	800c728 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c722:	bf00      	nop
 800c724:	e000      	b.n	800c728 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c726:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c728:	68b8      	ldr	r0, [r7, #8]
 800c72a:	f7f8 ffdf 	bl	80056ec <pbuf_clen>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	1a9b      	subs	r3, r3, r2
 800c738:	b29a      	uxth	r2, r3
 800c73a:	4b0b      	ldr	r3, [pc, #44]	; (800c768 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c73c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c73e:	68b8      	ldr	r0, [r7, #8]
 800c740:	f7f8 ff40 	bl	80055c4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c744:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3730      	adds	r7, #48	; 0x30
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	0800f754 	.word	0x0800f754
 800c754:	0800f830 	.word	0x0800f830
 800c758:	0800f79c 	.word	0x0800f79c
 800c75c:	0800f850 	.word	0x0800f850
 800c760:	0800f888 	.word	0x0800f888
 800c764:	0800f898 	.word	0x0800f898
 800c768:	20000214 	.word	0x20000214

0800c76c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08e      	sub	sp, #56	; 0x38
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	f003 030f 	and.w	r3, r3, #15
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	2b14      	cmp	r3, #20
 800c786:	f040 8131 	bne.w	800c9ec <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	88db      	ldrh	r3, [r3, #6]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	4618      	mov	r0, r3
 800c792:	f7f7 fdf2 	bl	800437a <lwip_htons>
 800c796:	4603      	mov	r3, r0
 800c798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	00db      	lsls	r3, r3, #3
 800c7a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	885b      	ldrh	r3, [r3, #2]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7f7 fde6 	bl	800437a <lwip_htons>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	f003 030f 	and.w	r3, r3, #15
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7f8 ff90 	bl	80056ec <pbuf_clen>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c7d0:	4b8d      	ldr	r3, [pc, #564]	; (800ca08 <ip4_reass+0x29c>)
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7d8:	4413      	add	r3, r2
 800c7da:	2b0a      	cmp	r3, #10
 800c7dc:	dd10      	ble.n	800c800 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c7de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7e4:	f7ff fd8e 	bl	800c304 <ip_reass_remove_oldest_datagram>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f000 8100 	beq.w	800c9f0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c7f0:	4b85      	ldr	r3, [pc, #532]	; (800ca08 <ip4_reass+0x29c>)
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c7fa:	2b0a      	cmp	r3, #10
 800c7fc:	f300 80f8 	bgt.w	800c9f0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c800:	4b82      	ldr	r3, [pc, #520]	; (800ca0c <ip4_reass+0x2a0>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	633b      	str	r3, [r7, #48]	; 0x30
 800c806:	e015      	b.n	800c834 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	695a      	ldr	r2, [r3, #20]
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	429a      	cmp	r2, r3
 800c812:	d10c      	bne.n	800c82e <ip4_reass+0xc2>
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d106      	bne.n	800c82e <ip4_reass+0xc2>
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	899a      	ldrh	r2, [r3, #12]
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	889b      	ldrh	r3, [r3, #4]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d006      	beq.n	800c83c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	633b      	str	r3, [r7, #48]	; 0x30
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e6      	bne.n	800c808 <ip4_reass+0x9c>
 800c83a:	e000      	b.n	800c83e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c83c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c840:	2b00      	cmp	r3, #0
 800c842:	d109      	bne.n	800c858 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c846:	4619      	mov	r1, r3
 800c848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84a:	f7ff fdbd 	bl	800c3c8 <ip_reass_enqueue_new_datagram>
 800c84e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	2b00      	cmp	r3, #0
 800c854:	d11c      	bne.n	800c890 <ip4_reass+0x124>
      goto nullreturn;
 800c856:	e0ce      	b.n	800c9f6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	88db      	ldrh	r3, [r3, #6]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f7 fd8b 	bl	800437a <lwip_htons>
 800c864:	4603      	mov	r3, r0
 800c866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d110      	bne.n	800c890 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	89db      	ldrh	r3, [r3, #14]
 800c872:	4618      	mov	r0, r3
 800c874:	f7f7 fd81 	bl	800437a <lwip_htons>
 800c878:	4603      	mov	r3, r0
 800c87a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	3308      	adds	r3, #8
 800c886:	2214      	movs	r2, #20
 800c888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 fb45 	bl	800cf1a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	88db      	ldrh	r3, [r3, #6]
 800c894:	b29b      	uxth	r3, r3
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bf0c      	ite	eq
 800c89e:	2301      	moveq	r3, #1
 800c8a0:	2300      	movne	r3, #0
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00e      	beq.n	800c8ca <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800c8ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8b0:	4413      	add	r3, r2
 800c8b2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c8b4:	8b7a      	ldrh	r2, [r7, #26]
 800c8b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	f0c0 8099 	bcc.w	800c9f0 <ip4_reass+0x284>
 800c8be:	8b7b      	ldrh	r3, [r7, #26]
 800c8c0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	f200 8093 	bhi.w	800c9f0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	6879      	ldr	r1, [r7, #4]
 800c8ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8d0:	f7ff fde2 	bl	800c498 <ip_reass_chain_frag_into_datagram_and_validate>
 800c8d4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	f000 808a 	beq.w	800c9f4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c8e0:	4b49      	ldr	r3, [pc, #292]	; (800ca08 <ip4_reass+0x29c>)
 800c8e2:	881a      	ldrh	r2, [r3, #0]
 800c8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e6:	4413      	add	r3, r2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	4b47      	ldr	r3, [pc, #284]	; (800ca08 <ip4_reass+0x29c>)
 800c8ec:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00d      	beq.n	800c910 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800c8f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8f8:	4413      	add	r3, r2
 800c8fa:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	8a7a      	ldrh	r2, [r7, #18]
 800c900:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	7f9b      	ldrb	r3, [r3, #30]
 800c906:	f043 0301 	orr.w	r3, r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d168      	bne.n	800c9e8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	8b9b      	ldrh	r3, [r3, #28]
 800c91a:	3314      	adds	r3, #20
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	3308      	adds	r3, #8
 800c938:	2214      	movs	r2, #20
 800c93a:	4619      	mov	r1, r3
 800c93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93e:	f000 faec 	bl	800cf1a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	8b9b      	ldrh	r3, [r3, #28]
 800c946:	4618      	mov	r0, r3
 800c948:	f7f7 fd17 	bl	800437a <lwip_htons>
 800c94c:	4603      	mov	r3, r0
 800c94e:	461a      	mov	r2, r3
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c956:	2200      	movs	r2, #0
 800c958:	719a      	strb	r2, [r3, #6]
 800c95a:	2200      	movs	r2, #0
 800c95c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c960:	2200      	movs	r2, #0
 800c962:	729a      	strb	r2, [r3, #10]
 800c964:	2200      	movs	r2, #0
 800c966:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c96e:	e00e      	b.n	800c98e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800c970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800c976:	f06f 0113 	mvn.w	r1, #19
 800c97a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c97c:	f7f8 fdfe 	bl	800557c <pbuf_header>
      pbuf_cat(p, r);
 800c980:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f8 feec 	bl	8005760 <pbuf_cat>
      r = iprh->next_pbuf;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1ed      	bne.n	800c970 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c994:	4b1d      	ldr	r3, [pc, #116]	; (800ca0c <ip4_reass+0x2a0>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d102      	bne.n	800c9a4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9a2:	e010      	b.n	800c9c6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c9a4:	4b19      	ldr	r3, [pc, #100]	; (800ca0c <ip4_reass+0x2a0>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9aa:	e007      	b.n	800c9bc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d006      	beq.n	800c9c4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f4      	bne.n	800c9ac <ip4_reass+0x240>
 800c9c2:	e000      	b.n	800c9c6 <ip4_reass+0x25a>
          break;
 800c9c4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c9c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ca:	f7ff fd37 	bl	800c43c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7f8 fe8c 	bl	80056ec <pbuf_clen>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ca08 <ip4_reass+0x29c>)
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	1a9b      	subs	r3, r3, r2
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <ip4_reass+0x29c>)
 800c9e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	e00a      	b.n	800c9fe <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e008      	b.n	800c9fe <ip4_reass+0x292>
    goto nullreturn;
 800c9ec:	bf00      	nop
 800c9ee:	e002      	b.n	800c9f6 <ip4_reass+0x28a>

nullreturn:
 800c9f0:	bf00      	nop
 800c9f2:	e000      	b.n	800c9f6 <ip4_reass+0x28a>
    goto nullreturn;
 800c9f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f8 fde4 	bl	80055c4 <pbuf_free>
  return NULL;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3738      	adds	r7, #56	; 0x38
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20000214 	.word	0x20000214
 800ca0c:	20000210 	.word	0x20000210

0800ca10 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ca14:	2005      	movs	r0, #5
 800ca16:	f7f8 f85f 	bl	8004ad8 <memp_malloc>
 800ca1a:	4603      	mov	r3, r0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ca2e:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ca30:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ca34:	4906      	ldr	r1, [pc, #24]	; (800ca50 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ca36:	4807      	ldr	r0, [pc, #28]	; (800ca54 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ca38:	f000 fa82 	bl	800cf40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	2005      	movs	r0, #5
 800ca40:	f7f8 f896 	bl	8004b70 <memp_free>
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	0800f754 	.word	0x0800f754
 800ca50:	0800f8bc 	.word	0x0800f8bc
 800ca54:	0800f79c 	.word	0x0800f79c

0800ca58 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <ipfrag_free_pbuf_custom+0x20>
 800ca6a:	4b11      	ldr	r3, [pc, #68]	; (800cab0 <ipfrag_free_pbuf_custom+0x58>)
 800ca6c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ca70:	4910      	ldr	r1, [pc, #64]	; (800cab4 <ipfrag_free_pbuf_custom+0x5c>)
 800ca72:	4811      	ldr	r0, [pc, #68]	; (800cab8 <ipfrag_free_pbuf_custom+0x60>)
 800ca74:	f000 fa64 	bl	800cf40 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d006      	beq.n	800ca8e <ipfrag_free_pbuf_custom+0x36>
 800ca80:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <ipfrag_free_pbuf_custom+0x58>)
 800ca82:	f240 22b9 	movw	r2, #697	; 0x2b9
 800ca86:	490d      	ldr	r1, [pc, #52]	; (800cabc <ipfrag_free_pbuf_custom+0x64>)
 800ca88:	480b      	ldr	r0, [pc, #44]	; (800cab8 <ipfrag_free_pbuf_custom+0x60>)
 800ca8a:	f000 fa59 	bl	800cf40 <iprintf>
  if (pcr->original != NULL) {
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	695b      	ldr	r3, [r3, #20]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d004      	beq.n	800caa0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f8 fd92 	bl	80055c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff ffbd 	bl	800ca20 <ip_frag_free_pbuf_custom_ref>
}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	0800f754 	.word	0x0800f754
 800cab4:	0800f8c8 	.word	0x0800f8c8
 800cab8:	0800f79c 	.word	0x0800f79c
 800cabc:	0800f8d4 	.word	0x0800f8d4

0800cac0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b092      	sub	sp, #72	; 0x48
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cad4:	3b14      	subs	r3, #20
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	da00      	bge.n	800cadc <ip4_frag+0x1c>
 800cada:	3307      	adds	r3, #7
 800cadc:	10db      	asrs	r3, r3, #3
 800cade:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cae0:	2314      	movs	r3, #20
 800cae2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	2b14      	cmp	r3, #20
 800cafa:	d009      	beq.n	800cb10 <ip4_frag+0x50>
 800cafc:	4b79      	ldr	r3, [pc, #484]	; (800cce4 <ip4_frag+0x224>)
 800cafe:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cb02:	4979      	ldr	r1, [pc, #484]	; (800cce8 <ip4_frag+0x228>)
 800cb04:	4879      	ldr	r0, [pc, #484]	; (800ccec <ip4_frag+0x22c>)
 800cb06:	f000 fa1b 	bl	800cf40 <iprintf>
 800cb0a:	f06f 0305 	mvn.w	r3, #5
 800cb0e:	e0e5      	b.n	800ccdc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	88db      	ldrh	r3, [r3, #6]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f7 fc2f 	bl	800437a <lwip_htons>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800cb20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb26:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800cb28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d009      	beq.n	800cb46 <ip4_frag+0x86>
 800cb32:	4b6c      	ldr	r3, [pc, #432]	; (800cce4 <ip4_frag+0x224>)
 800cb34:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cb38:	496d      	ldr	r1, [pc, #436]	; (800ccf0 <ip4_frag+0x230>)
 800cb3a:	486c      	ldr	r0, [pc, #432]	; (800ccec <ip4_frag+0x22c>)
 800cb3c:	f000 fa00 	bl	800cf40 <iprintf>
 800cb40:	f06f 0305 	mvn.w	r3, #5
 800cb44:	e0ca      	b.n	800ccdc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	891b      	ldrh	r3, [r3, #8]
 800cb4a:	3b14      	subs	r3, #20
 800cb4c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cb4e:	e0bc      	b.n	800ccca <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cb50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cb52:	00da      	lsls	r2, r3, #3
 800cb54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb56:	4293      	cmp	r3, r2
 800cb58:	bfa8      	it	ge
 800cb5a:	4613      	movge	r3, r2
 800cb5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2114      	movs	r1, #20
 800cb62:	2002      	movs	r0, #2
 800cb64:	f7f8 f9bc 	bl	8004ee0 <pbuf_alloc>
 800cb68:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 80b2 	beq.w	800ccd6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	895b      	ldrh	r3, [r3, #10]
 800cb76:	2b13      	cmp	r3, #19
 800cb78:	d806      	bhi.n	800cb88 <ip4_frag+0xc8>
 800cb7a:	4b5a      	ldr	r3, [pc, #360]	; (800cce4 <ip4_frag+0x224>)
 800cb7c:	f240 3209 	movw	r2, #777	; 0x309
 800cb80:	495c      	ldr	r1, [pc, #368]	; (800ccf4 <ip4_frag+0x234>)
 800cb82:	485a      	ldr	r0, [pc, #360]	; (800ccec <ip4_frag+0x22c>)
 800cb84:	f000 f9dc 	bl	800cf40 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	2214      	movs	r2, #20
 800cb8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f9c2 	bl	800cf1a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800cb9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800cba0:	e04f      	b.n	800cc42 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	895a      	ldrh	r2, [r3, #10]
 800cba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cbac:	8b7a      	ldrh	r2, [r7, #26]
 800cbae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	bf28      	it	cs
 800cbb4:	4613      	movcs	r3, r2
 800cbb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cbb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <ip4_frag+0x10a>
        poff = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60fb      	str	r3, [r7, #12]
        continue;
 800cbc8:	e03b      	b.n	800cc42 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cbca:	f7ff ff21 	bl	800ca10 <ip_frag_alloc_pbuf_custom_ref>
 800cbce:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d103      	bne.n	800cbde <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800cbd6:	6a38      	ldr	r0, [r7, #32]
 800cbd8:	f7f8 fcf4 	bl	80055c4 <pbuf_free>
        goto memerr;
 800cbdc:	e07c      	b.n	800ccd8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cbde:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cbe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbe6:	4413      	add	r3, r2
 800cbe8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cbec:	9201      	str	r2, [sp, #4]
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	2004      	movs	r0, #4
 800cbf6:	f7f8 fb07 	bl	8005208 <pbuf_alloced_custom>
 800cbfa:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cc02:	6978      	ldr	r0, [r7, #20]
 800cc04:	f7ff ff0c 	bl	800ca20 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cc08:	6a38      	ldr	r0, [r7, #32]
 800cc0a:	f7f8 fcdb 	bl	80055c4 <pbuf_free>
        goto memerr;
 800cc0e:	e063      	b.n	800ccd8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7f8 fd83 	bl	800571c <pbuf_ref>
      pcr->original = p;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	4a36      	ldr	r2, [pc, #216]	; (800ccf8 <ip4_frag+0x238>)
 800cc20:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cc22:	6939      	ldr	r1, [r7, #16]
 800cc24:	6a38      	ldr	r0, [r7, #32]
 800cc26:	f7f8 fd9b 	bl	8005760 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800cc2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800cc2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800cc32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <ip4_frag+0x182>
        poff = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cc42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1ac      	bne.n	800cba2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800cc48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc4c:	4413      	add	r3, r2
 800cc4e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cc50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cc56:	3b14      	subs	r3, #20
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	bfd4      	ite	le
 800cc5c:	2301      	movle	r3, #1
 800cc5e:	2300      	movgt	r3, #0
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cc64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cc66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc6a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d103      	bne.n	800cc7a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800cc72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc78:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cc7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f7 fb7c 	bl	800437a <lwip_htons>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461a      	mov	r2, r3
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800cc8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc8c:	3314      	adds	r3, #20
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7f7 fb72 	bl	800437a <lwip_htons>
 800cc96:	4603      	mov	r3, r0
 800cc98:	461a      	mov	r2, r3
 800cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	2200      	movs	r2, #0
 800cca2:	729a      	strb	r2, [r3, #10]
 800cca4:	2200      	movs	r2, #0
 800cca6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6a39      	ldr	r1, [r7, #32]
 800ccb0:	68b8      	ldr	r0, [r7, #8]
 800ccb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ccb4:	6a38      	ldr	r0, [r7, #32]
 800ccb6:	f7f8 fc85 	bl	80055c4 <pbuf_free>
    left -= fragsize;
 800ccba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ccbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800ccc2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ccc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ccc6:	4413      	add	r3, r2
 800ccc8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800ccca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f47f af3f 	bne.w	800cb50 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e002      	b.n	800ccdc <ip4_frag+0x21c>
      goto memerr;
 800ccd6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3740      	adds	r7, #64	; 0x40
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	0800f754 	.word	0x0800f754
 800cce8:	0800f8e0 	.word	0x0800f8e0
 800ccec:	0800f79c 	.word	0x0800f79c
 800ccf0:	0800f908 	.word	0x0800f908
 800ccf4:	0800f924 	.word	0x0800f924
 800ccf8:	0800ca59 	.word	0x0800ca59

0800ccfc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800cd06:	230e      	movs	r3, #14
 800cd08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	895b      	ldrh	r3, [r3, #10]
 800cd0e:	2b0e      	cmp	r3, #14
 800cd10:	d977      	bls.n	800ce02 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	7b1a      	ldrb	r2, [r3, #12]
 800cd1c:	7b5b      	ldrb	r3, [r3, #13]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	4313      	orrs	r3, r2
 800cd22:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d023      	beq.n	800cd78 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d10f      	bne.n	800cd58 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	785b      	ldrb	r3, [r3, #1]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d11b      	bne.n	800cd78 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cd44:	2b5e      	cmp	r3, #94	; 0x5e
 800cd46:	d117      	bne.n	800cd78 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	7b5b      	ldrb	r3, [r3, #13]
 800cd4c:	f043 0310 	orr.w	r3, r3, #16
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	735a      	strb	r2, [r3, #13]
 800cd56:	e00f      	b.n	800cd78 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	2206      	movs	r2, #6
 800cd5c:	4930      	ldr	r1, [pc, #192]	; (800ce20 <ethernet_input+0x124>)
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 f8cc 	bl	800cefc <memcmp>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d106      	bne.n	800cd78 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7b5b      	ldrb	r3, [r3, #13]
 800cd6e:	f043 0308 	orr.w	r3, r3, #8
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cd78:	89fb      	ldrh	r3, [r7, #14]
 800cd7a:	2b08      	cmp	r3, #8
 800cd7c:	d003      	beq.n	800cd86 <ethernet_input+0x8a>
 800cd7e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cd82:	d01e      	beq.n	800cdc2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cd84:	e044      	b.n	800ce10 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd8c:	f003 0308 	and.w	r3, r3, #8
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d038      	beq.n	800ce06 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	895b      	ldrh	r3, [r3, #10]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	db33      	blt.n	800ce0a <ethernet_input+0x10e>
 800cda2:	8afb      	ldrh	r3, [r7, #22]
 800cda4:	425b      	negs	r3, r3
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	b21b      	sxth	r3, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7f8 fbe5 	bl	800557c <pbuf_header>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d128      	bne.n	800ce0a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7fe ff80 	bl	800bcc0 <ip4_input>
      break;
 800cdc0:	e01d      	b.n	800cdfe <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cdc8:	f003 0308 	and.w	r3, r3, #8
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01e      	beq.n	800ce0e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	895b      	ldrh	r3, [r3, #10]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	db15      	blt.n	800ce0a <ethernet_input+0x10e>
 800cdde:	8afb      	ldrh	r3, [r7, #22]
 800cde0:	425b      	negs	r3, r3
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	b21b      	sxth	r3, r3
 800cde6:	4619      	mov	r1, r3
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7f8 fbc7 	bl	800557c <pbuf_header>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7fe f94e 	bl	800b098 <etharp_input>
      break;
 800cdfc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e00a      	b.n	800ce18 <ethernet_input+0x11c>
    goto free_and_return;
 800ce02:	bf00      	nop
 800ce04:	e004      	b.n	800ce10 <ethernet_input+0x114>
        goto free_and_return;
 800ce06:	bf00      	nop
 800ce08:	e002      	b.n	800ce10 <ethernet_input+0x114>

free_and_return:
 800ce0a:	bf00      	nop
 800ce0c:	e000      	b.n	800ce10 <ethernet_input+0x114>
        goto free_and_return;
 800ce0e:	bf00      	nop
  pbuf_free(p);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7f8 fbd7 	bl	80055c4 <pbuf_free>
  return ERR_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	0800fac4 	.word	0x0800fac4

0800ce24 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ce32:	8c3b      	ldrh	r3, [r7, #32]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7f7 faa0 	bl	800437a <lwip_htons>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ce3e:	210e      	movs	r1, #14
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	f7f8 fb9b 	bl	800557c <pbuf_header>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d125      	bne.n	800ce98 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	8afa      	ldrh	r2, [r7, #22]
 800ce56:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	2206      	movs	r2, #6
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f85b 	bl	800cf1a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	3306      	adds	r3, #6
 800ce68:	2206      	movs	r2, #6
 800ce6a:	6879      	ldr	r1, [r7, #4]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 f854 	bl	800cf1a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	d006      	beq.n	800ce8a <ethernet_output+0x66>
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <ethernet_output+0x84>)
 800ce7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ce82:	490a      	ldr	r1, [pc, #40]	; (800ceac <ethernet_output+0x88>)
 800ce84:	480a      	ldr	r0, [pc, #40]	; (800ceb0 <ethernet_output+0x8c>)
 800ce86:	f000 f85b 	bl	800cf40 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	4798      	blx	r3
 800ce94:	4603      	mov	r3, r0
 800ce96:	e002      	b.n	800ce9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ce98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ce9a:	f06f 0301 	mvn.w	r3, #1
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	0800f944 	.word	0x0800f944
 800ceac:	0800f97c 	.word	0x0800f97c
 800ceb0:	0800f9b0 	.word	0x0800f9b0

0800ceb4 <__libc_init_array>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4e0d      	ldr	r6, [pc, #52]	; (800ceec <__libc_init_array+0x38>)
 800ceb8:	4c0d      	ldr	r4, [pc, #52]	; (800cef0 <__libc_init_array+0x3c>)
 800ceba:	1ba4      	subs	r4, r4, r6
 800cebc:	10a4      	asrs	r4, r4, #2
 800cebe:	2500      	movs	r5, #0
 800cec0:	42a5      	cmp	r5, r4
 800cec2:	d109      	bne.n	800ced8 <__libc_init_array+0x24>
 800cec4:	4e0b      	ldr	r6, [pc, #44]	; (800cef4 <__libc_init_array+0x40>)
 800cec6:	4c0c      	ldr	r4, [pc, #48]	; (800cef8 <__libc_init_array+0x44>)
 800cec8:	f000 ff1e 	bl	800dd08 <_init>
 800cecc:	1ba4      	subs	r4, r4, r6
 800cece:	10a4      	asrs	r4, r4, #2
 800ced0:	2500      	movs	r5, #0
 800ced2:	42a5      	cmp	r5, r4
 800ced4:	d105      	bne.n	800cee2 <__libc_init_array+0x2e>
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cedc:	4798      	blx	r3
 800cede:	3501      	adds	r5, #1
 800cee0:	e7ee      	b.n	800cec0 <__libc_init_array+0xc>
 800cee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cee6:	4798      	blx	r3
 800cee8:	3501      	adds	r5, #1
 800ceea:	e7f2      	b.n	800ced2 <__libc_init_array+0x1e>
 800ceec:	0800fb74 	.word	0x0800fb74
 800cef0:	0800fb74 	.word	0x0800fb74
 800cef4:	0800fb74 	.word	0x0800fb74
 800cef8:	0800fb78 	.word	0x0800fb78

0800cefc <memcmp>:
 800cefc:	b530      	push	{r4, r5, lr}
 800cefe:	2400      	movs	r4, #0
 800cf00:	42a2      	cmp	r2, r4
 800cf02:	d101      	bne.n	800cf08 <memcmp+0xc>
 800cf04:	2000      	movs	r0, #0
 800cf06:	e007      	b.n	800cf18 <memcmp+0x1c>
 800cf08:	5d03      	ldrb	r3, [r0, r4]
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	190d      	adds	r5, r1, r4
 800cf0e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800cf12:	42ab      	cmp	r3, r5
 800cf14:	d0f4      	beq.n	800cf00 <memcmp+0x4>
 800cf16:	1b58      	subs	r0, r3, r5
 800cf18:	bd30      	pop	{r4, r5, pc}

0800cf1a <memcpy>:
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	1e43      	subs	r3, r0, #1
 800cf1e:	440a      	add	r2, r1
 800cf20:	4291      	cmp	r1, r2
 800cf22:	d100      	bne.n	800cf26 <memcpy+0xc>
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf2e:	e7f7      	b.n	800cf20 <memcpy+0x6>

0800cf30 <memset>:
 800cf30:	4402      	add	r2, r0
 800cf32:	4603      	mov	r3, r0
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d100      	bne.n	800cf3a <memset+0xa>
 800cf38:	4770      	bx	lr
 800cf3a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf3e:	e7f9      	b.n	800cf34 <memset+0x4>

0800cf40 <iprintf>:
 800cf40:	b40f      	push	{r0, r1, r2, r3}
 800cf42:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <iprintf+0x2c>)
 800cf44:	b513      	push	{r0, r1, r4, lr}
 800cf46:	681c      	ldr	r4, [r3, #0]
 800cf48:	b124      	cbz	r4, 800cf54 <iprintf+0x14>
 800cf4a:	69a3      	ldr	r3, [r4, #24]
 800cf4c:	b913      	cbnz	r3, 800cf54 <iprintf+0x14>
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 f84e 	bl	800cff0 <__sinit>
 800cf54:	ab05      	add	r3, sp, #20
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	68a1      	ldr	r1, [r4, #8]
 800cf5a:	9301      	str	r3, [sp, #4]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 f9a3 	bl	800d2a8 <_vfiprintf_r>
 800cf62:	b002      	add	sp, #8
 800cf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf68:	b004      	add	sp, #16
 800cf6a:	4770      	bx	lr
 800cf6c:	20000024 	.word	0x20000024

0800cf70 <std>:
 800cf70:	2300      	movs	r3, #0
 800cf72:	b510      	push	{r4, lr}
 800cf74:	4604      	mov	r4, r0
 800cf76:	e9c0 3300 	strd	r3, r3, [r0]
 800cf7a:	6083      	str	r3, [r0, #8]
 800cf7c:	8181      	strh	r1, [r0, #12]
 800cf7e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf80:	81c2      	strh	r2, [r0, #14]
 800cf82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf86:	6183      	str	r3, [r0, #24]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	2208      	movs	r2, #8
 800cf8c:	305c      	adds	r0, #92	; 0x5c
 800cf8e:	f7ff ffcf 	bl	800cf30 <memset>
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <std+0x38>)
 800cf94:	6263      	str	r3, [r4, #36]	; 0x24
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <std+0x3c>)
 800cf98:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf9a:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <std+0x40>)
 800cf9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <std+0x44>)
 800cfa0:	6224      	str	r4, [r4, #32]
 800cfa2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfa4:	bd10      	pop	{r4, pc}
 800cfa6:	bf00      	nop
 800cfa8:	0800d805 	.word	0x0800d805
 800cfac:	0800d827 	.word	0x0800d827
 800cfb0:	0800d85f 	.word	0x0800d85f
 800cfb4:	0800d883 	.word	0x0800d883

0800cfb8 <_cleanup_r>:
 800cfb8:	4901      	ldr	r1, [pc, #4]	; (800cfc0 <_cleanup_r+0x8>)
 800cfba:	f000 b885 	b.w	800d0c8 <_fwalk_reent>
 800cfbe:	bf00      	nop
 800cfc0:	0800db5d 	.word	0x0800db5d

0800cfc4 <__sfmoreglue>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	1e4a      	subs	r2, r1, #1
 800cfc8:	2568      	movs	r5, #104	; 0x68
 800cfca:	4355      	muls	r5, r2
 800cfcc:	460e      	mov	r6, r1
 800cfce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfd2:	f000 f8e5 	bl	800d1a0 <_malloc_r>
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	b140      	cbz	r0, 800cfec <__sfmoreglue+0x28>
 800cfda:	2100      	movs	r1, #0
 800cfdc:	e9c0 1600 	strd	r1, r6, [r0]
 800cfe0:	300c      	adds	r0, #12
 800cfe2:	60a0      	str	r0, [r4, #8]
 800cfe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfe8:	f7ff ffa2 	bl	800cf30 <memset>
 800cfec:	4620      	mov	r0, r4
 800cfee:	bd70      	pop	{r4, r5, r6, pc}

0800cff0 <__sinit>:
 800cff0:	6983      	ldr	r3, [r0, #24]
 800cff2:	b510      	push	{r4, lr}
 800cff4:	4604      	mov	r4, r0
 800cff6:	bb33      	cbnz	r3, 800d046 <__sinit+0x56>
 800cff8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cffc:	6503      	str	r3, [r0, #80]	; 0x50
 800cffe:	4b12      	ldr	r3, [pc, #72]	; (800d048 <__sinit+0x58>)
 800d000:	4a12      	ldr	r2, [pc, #72]	; (800d04c <__sinit+0x5c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6282      	str	r2, [r0, #40]	; 0x28
 800d006:	4298      	cmp	r0, r3
 800d008:	bf04      	itt	eq
 800d00a:	2301      	moveq	r3, #1
 800d00c:	6183      	streq	r3, [r0, #24]
 800d00e:	f000 f81f 	bl	800d050 <__sfp>
 800d012:	6060      	str	r0, [r4, #4]
 800d014:	4620      	mov	r0, r4
 800d016:	f000 f81b 	bl	800d050 <__sfp>
 800d01a:	60a0      	str	r0, [r4, #8]
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 f817 	bl	800d050 <__sfp>
 800d022:	2200      	movs	r2, #0
 800d024:	60e0      	str	r0, [r4, #12]
 800d026:	2104      	movs	r1, #4
 800d028:	6860      	ldr	r0, [r4, #4]
 800d02a:	f7ff ffa1 	bl	800cf70 <std>
 800d02e:	2201      	movs	r2, #1
 800d030:	2109      	movs	r1, #9
 800d032:	68a0      	ldr	r0, [r4, #8]
 800d034:	f7ff ff9c 	bl	800cf70 <std>
 800d038:	2202      	movs	r2, #2
 800d03a:	2112      	movs	r1, #18
 800d03c:	68e0      	ldr	r0, [r4, #12]
 800d03e:	f7ff ff97 	bl	800cf70 <std>
 800d042:	2301      	movs	r3, #1
 800d044:	61a3      	str	r3, [r4, #24]
 800d046:	bd10      	pop	{r4, pc}
 800d048:	0800fad4 	.word	0x0800fad4
 800d04c:	0800cfb9 	.word	0x0800cfb9

0800d050 <__sfp>:
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	4b1b      	ldr	r3, [pc, #108]	; (800d0c0 <__sfp+0x70>)
 800d054:	681e      	ldr	r6, [r3, #0]
 800d056:	69b3      	ldr	r3, [r6, #24]
 800d058:	4607      	mov	r7, r0
 800d05a:	b913      	cbnz	r3, 800d062 <__sfp+0x12>
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff ffc7 	bl	800cff0 <__sinit>
 800d062:	3648      	adds	r6, #72	; 0x48
 800d064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d068:	3b01      	subs	r3, #1
 800d06a:	d503      	bpl.n	800d074 <__sfp+0x24>
 800d06c:	6833      	ldr	r3, [r6, #0]
 800d06e:	b133      	cbz	r3, 800d07e <__sfp+0x2e>
 800d070:	6836      	ldr	r6, [r6, #0]
 800d072:	e7f7      	b.n	800d064 <__sfp+0x14>
 800d074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d078:	b16d      	cbz	r5, 800d096 <__sfp+0x46>
 800d07a:	3468      	adds	r4, #104	; 0x68
 800d07c:	e7f4      	b.n	800d068 <__sfp+0x18>
 800d07e:	2104      	movs	r1, #4
 800d080:	4638      	mov	r0, r7
 800d082:	f7ff ff9f 	bl	800cfc4 <__sfmoreglue>
 800d086:	6030      	str	r0, [r6, #0]
 800d088:	2800      	cmp	r0, #0
 800d08a:	d1f1      	bne.n	800d070 <__sfp+0x20>
 800d08c:	230c      	movs	r3, #12
 800d08e:	603b      	str	r3, [r7, #0]
 800d090:	4604      	mov	r4, r0
 800d092:	4620      	mov	r0, r4
 800d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d096:	4b0b      	ldr	r3, [pc, #44]	; (800d0c4 <__sfp+0x74>)
 800d098:	6665      	str	r5, [r4, #100]	; 0x64
 800d09a:	e9c4 5500 	strd	r5, r5, [r4]
 800d09e:	60a5      	str	r5, [r4, #8]
 800d0a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d0a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d0a8:	2208      	movs	r2, #8
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0b0:	f7ff ff3e 	bl	800cf30 <memset>
 800d0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0bc:	e7e9      	b.n	800d092 <__sfp+0x42>
 800d0be:	bf00      	nop
 800d0c0:	0800fad4 	.word	0x0800fad4
 800d0c4:	ffff0001 	.word	0xffff0001

0800d0c8 <_fwalk_reent>:
 800d0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0cc:	4680      	mov	r8, r0
 800d0ce:	4689      	mov	r9, r1
 800d0d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	b914      	cbnz	r4, 800d0de <_fwalk_reent+0x16>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d0e2:	3f01      	subs	r7, #1
 800d0e4:	d501      	bpl.n	800d0ea <_fwalk_reent+0x22>
 800d0e6:	6824      	ldr	r4, [r4, #0]
 800d0e8:	e7f5      	b.n	800d0d6 <_fwalk_reent+0xe>
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d907      	bls.n	800d100 <_fwalk_reent+0x38>
 800d0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	d003      	beq.n	800d100 <_fwalk_reent+0x38>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4640      	mov	r0, r8
 800d0fc:	47c8      	blx	r9
 800d0fe:	4306      	orrs	r6, r0
 800d100:	3568      	adds	r5, #104	; 0x68
 800d102:	e7ee      	b.n	800d0e2 <_fwalk_reent+0x1a>

0800d104 <_free_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4605      	mov	r5, r0
 800d108:	2900      	cmp	r1, #0
 800d10a:	d045      	beq.n	800d198 <_free_r+0x94>
 800d10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d110:	1f0c      	subs	r4, r1, #4
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfb8      	it	lt
 800d116:	18e4      	addlt	r4, r4, r3
 800d118:	f000 fdc0 	bl	800dc9c <__malloc_lock>
 800d11c:	4a1f      	ldr	r2, [pc, #124]	; (800d19c <_free_r+0x98>)
 800d11e:	6813      	ldr	r3, [r2, #0]
 800d120:	4610      	mov	r0, r2
 800d122:	b933      	cbnz	r3, 800d132 <_free_r+0x2e>
 800d124:	6063      	str	r3, [r4, #4]
 800d126:	6014      	str	r4, [r2, #0]
 800d128:	4628      	mov	r0, r5
 800d12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d12e:	f000 bdb6 	b.w	800dc9e <__malloc_unlock>
 800d132:	42a3      	cmp	r3, r4
 800d134:	d90c      	bls.n	800d150 <_free_r+0x4c>
 800d136:	6821      	ldr	r1, [r4, #0]
 800d138:	1862      	adds	r2, r4, r1
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bf04      	itt	eq
 800d13e:	681a      	ldreq	r2, [r3, #0]
 800d140:	685b      	ldreq	r3, [r3, #4]
 800d142:	6063      	str	r3, [r4, #4]
 800d144:	bf04      	itt	eq
 800d146:	1852      	addeq	r2, r2, r1
 800d148:	6022      	streq	r2, [r4, #0]
 800d14a:	6004      	str	r4, [r0, #0]
 800d14c:	e7ec      	b.n	800d128 <_free_r+0x24>
 800d14e:	4613      	mov	r3, r2
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	b10a      	cbz	r2, 800d158 <_free_r+0x54>
 800d154:	42a2      	cmp	r2, r4
 800d156:	d9fa      	bls.n	800d14e <_free_r+0x4a>
 800d158:	6819      	ldr	r1, [r3, #0]
 800d15a:	1858      	adds	r0, r3, r1
 800d15c:	42a0      	cmp	r0, r4
 800d15e:	d10b      	bne.n	800d178 <_free_r+0x74>
 800d160:	6820      	ldr	r0, [r4, #0]
 800d162:	4401      	add	r1, r0
 800d164:	1858      	adds	r0, r3, r1
 800d166:	4282      	cmp	r2, r0
 800d168:	6019      	str	r1, [r3, #0]
 800d16a:	d1dd      	bne.n	800d128 <_free_r+0x24>
 800d16c:	6810      	ldr	r0, [r2, #0]
 800d16e:	6852      	ldr	r2, [r2, #4]
 800d170:	605a      	str	r2, [r3, #4]
 800d172:	4401      	add	r1, r0
 800d174:	6019      	str	r1, [r3, #0]
 800d176:	e7d7      	b.n	800d128 <_free_r+0x24>
 800d178:	d902      	bls.n	800d180 <_free_r+0x7c>
 800d17a:	230c      	movs	r3, #12
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	e7d3      	b.n	800d128 <_free_r+0x24>
 800d180:	6820      	ldr	r0, [r4, #0]
 800d182:	1821      	adds	r1, r4, r0
 800d184:	428a      	cmp	r2, r1
 800d186:	bf04      	itt	eq
 800d188:	6811      	ldreq	r1, [r2, #0]
 800d18a:	6852      	ldreq	r2, [r2, #4]
 800d18c:	6062      	str	r2, [r4, #4]
 800d18e:	bf04      	itt	eq
 800d190:	1809      	addeq	r1, r1, r0
 800d192:	6021      	streq	r1, [r4, #0]
 800d194:	605c      	str	r4, [r3, #4]
 800d196:	e7c7      	b.n	800d128 <_free_r+0x24>
 800d198:	bd38      	pop	{r3, r4, r5, pc}
 800d19a:	bf00      	nop
 800d19c:	20000218 	.word	0x20000218

0800d1a0 <_malloc_r>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	1ccd      	adds	r5, r1, #3
 800d1a4:	f025 0503 	bic.w	r5, r5, #3
 800d1a8:	3508      	adds	r5, #8
 800d1aa:	2d0c      	cmp	r5, #12
 800d1ac:	bf38      	it	cc
 800d1ae:	250c      	movcc	r5, #12
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	db01      	blt.n	800d1ba <_malloc_r+0x1a>
 800d1b6:	42a9      	cmp	r1, r5
 800d1b8:	d903      	bls.n	800d1c2 <_malloc_r+0x22>
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	6033      	str	r3, [r6, #0]
 800d1be:	2000      	movs	r0, #0
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
 800d1c2:	f000 fd6b 	bl	800dc9c <__malloc_lock>
 800d1c6:	4a21      	ldr	r2, [pc, #132]	; (800d24c <_malloc_r+0xac>)
 800d1c8:	6814      	ldr	r4, [r2, #0]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	b991      	cbnz	r1, 800d1f4 <_malloc_r+0x54>
 800d1ce:	4c20      	ldr	r4, [pc, #128]	; (800d250 <_malloc_r+0xb0>)
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	b91b      	cbnz	r3, 800d1dc <_malloc_r+0x3c>
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	f000 fb05 	bl	800d7e4 <_sbrk_r>
 800d1da:	6020      	str	r0, [r4, #0]
 800d1dc:	4629      	mov	r1, r5
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f000 fb00 	bl	800d7e4 <_sbrk_r>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d124      	bne.n	800d232 <_malloc_r+0x92>
 800d1e8:	230c      	movs	r3, #12
 800d1ea:	6033      	str	r3, [r6, #0]
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f000 fd56 	bl	800dc9e <__malloc_unlock>
 800d1f2:	e7e4      	b.n	800d1be <_malloc_r+0x1e>
 800d1f4:	680b      	ldr	r3, [r1, #0]
 800d1f6:	1b5b      	subs	r3, r3, r5
 800d1f8:	d418      	bmi.n	800d22c <_malloc_r+0x8c>
 800d1fa:	2b0b      	cmp	r3, #11
 800d1fc:	d90f      	bls.n	800d21e <_malloc_r+0x7e>
 800d1fe:	600b      	str	r3, [r1, #0]
 800d200:	50cd      	str	r5, [r1, r3]
 800d202:	18cc      	adds	r4, r1, r3
 800d204:	4630      	mov	r0, r6
 800d206:	f000 fd4a 	bl	800dc9e <__malloc_unlock>
 800d20a:	f104 000b 	add.w	r0, r4, #11
 800d20e:	1d23      	adds	r3, r4, #4
 800d210:	f020 0007 	bic.w	r0, r0, #7
 800d214:	1ac3      	subs	r3, r0, r3
 800d216:	d0d3      	beq.n	800d1c0 <_malloc_r+0x20>
 800d218:	425a      	negs	r2, r3
 800d21a:	50e2      	str	r2, [r4, r3]
 800d21c:	e7d0      	b.n	800d1c0 <_malloc_r+0x20>
 800d21e:	428c      	cmp	r4, r1
 800d220:	684b      	ldr	r3, [r1, #4]
 800d222:	bf16      	itet	ne
 800d224:	6063      	strne	r3, [r4, #4]
 800d226:	6013      	streq	r3, [r2, #0]
 800d228:	460c      	movne	r4, r1
 800d22a:	e7eb      	b.n	800d204 <_malloc_r+0x64>
 800d22c:	460c      	mov	r4, r1
 800d22e:	6849      	ldr	r1, [r1, #4]
 800d230:	e7cc      	b.n	800d1cc <_malloc_r+0x2c>
 800d232:	1cc4      	adds	r4, r0, #3
 800d234:	f024 0403 	bic.w	r4, r4, #3
 800d238:	42a0      	cmp	r0, r4
 800d23a:	d005      	beq.n	800d248 <_malloc_r+0xa8>
 800d23c:	1a21      	subs	r1, r4, r0
 800d23e:	4630      	mov	r0, r6
 800d240:	f000 fad0 	bl	800d7e4 <_sbrk_r>
 800d244:	3001      	adds	r0, #1
 800d246:	d0cf      	beq.n	800d1e8 <_malloc_r+0x48>
 800d248:	6025      	str	r5, [r4, #0]
 800d24a:	e7db      	b.n	800d204 <_malloc_r+0x64>
 800d24c:	20000218 	.word	0x20000218
 800d250:	2000021c 	.word	0x2000021c

0800d254 <__sfputc_r>:
 800d254:	6893      	ldr	r3, [r2, #8]
 800d256:	3b01      	subs	r3, #1
 800d258:	2b00      	cmp	r3, #0
 800d25a:	b410      	push	{r4}
 800d25c:	6093      	str	r3, [r2, #8]
 800d25e:	da08      	bge.n	800d272 <__sfputc_r+0x1e>
 800d260:	6994      	ldr	r4, [r2, #24]
 800d262:	42a3      	cmp	r3, r4
 800d264:	db01      	blt.n	800d26a <__sfputc_r+0x16>
 800d266:	290a      	cmp	r1, #10
 800d268:	d103      	bne.n	800d272 <__sfputc_r+0x1e>
 800d26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d26e:	f000 bb0d 	b.w	800d88c <__swbuf_r>
 800d272:	6813      	ldr	r3, [r2, #0]
 800d274:	1c58      	adds	r0, r3, #1
 800d276:	6010      	str	r0, [r2, #0]
 800d278:	7019      	strb	r1, [r3, #0]
 800d27a:	4608      	mov	r0, r1
 800d27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <__sfputs_r>:
 800d282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d284:	4606      	mov	r6, r0
 800d286:	460f      	mov	r7, r1
 800d288:	4614      	mov	r4, r2
 800d28a:	18d5      	adds	r5, r2, r3
 800d28c:	42ac      	cmp	r4, r5
 800d28e:	d101      	bne.n	800d294 <__sfputs_r+0x12>
 800d290:	2000      	movs	r0, #0
 800d292:	e007      	b.n	800d2a4 <__sfputs_r+0x22>
 800d294:	463a      	mov	r2, r7
 800d296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7ff ffda 	bl	800d254 <__sfputc_r>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d1f3      	bne.n	800d28c <__sfputs_r+0xa>
 800d2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2a8 <_vfiprintf_r>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	b09d      	sub	sp, #116	; 0x74
 800d2b0:	4617      	mov	r7, r2
 800d2b2:	461d      	mov	r5, r3
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	b118      	cbz	r0, 800d2c0 <_vfiprintf_r+0x18>
 800d2b8:	6983      	ldr	r3, [r0, #24]
 800d2ba:	b90b      	cbnz	r3, 800d2c0 <_vfiprintf_r+0x18>
 800d2bc:	f7ff fe98 	bl	800cff0 <__sinit>
 800d2c0:	4b7c      	ldr	r3, [pc, #496]	; (800d4b4 <_vfiprintf_r+0x20c>)
 800d2c2:	429c      	cmp	r4, r3
 800d2c4:	d158      	bne.n	800d378 <_vfiprintf_r+0xd0>
 800d2c6:	6874      	ldr	r4, [r6, #4]
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	0718      	lsls	r0, r3, #28
 800d2cc:	d55e      	bpl.n	800d38c <_vfiprintf_r+0xe4>
 800d2ce:	6923      	ldr	r3, [r4, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d05b      	beq.n	800d38c <_vfiprintf_r+0xe4>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d8:	2320      	movs	r3, #32
 800d2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2de:	2330      	movs	r3, #48	; 0x30
 800d2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2e4:	9503      	str	r5, [sp, #12]
 800d2e6:	f04f 0b01 	mov.w	fp, #1
 800d2ea:	46b8      	mov	r8, r7
 800d2ec:	4645      	mov	r5, r8
 800d2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2f2:	b10b      	cbz	r3, 800d2f8 <_vfiprintf_r+0x50>
 800d2f4:	2b25      	cmp	r3, #37	; 0x25
 800d2f6:	d154      	bne.n	800d3a2 <_vfiprintf_r+0xfa>
 800d2f8:	ebb8 0a07 	subs.w	sl, r8, r7
 800d2fc:	d00b      	beq.n	800d316 <_vfiprintf_r+0x6e>
 800d2fe:	4653      	mov	r3, sl
 800d300:	463a      	mov	r2, r7
 800d302:	4621      	mov	r1, r4
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff ffbc 	bl	800d282 <__sfputs_r>
 800d30a:	3001      	adds	r0, #1
 800d30c:	f000 80c2 	beq.w	800d494 <_vfiprintf_r+0x1ec>
 800d310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d312:	4453      	add	r3, sl
 800d314:	9309      	str	r3, [sp, #36]	; 0x24
 800d316:	f898 3000 	ldrb.w	r3, [r8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 80ba 	beq.w	800d494 <_vfiprintf_r+0x1ec>
 800d320:	2300      	movs	r3, #0
 800d322:	f04f 32ff 	mov.w	r2, #4294967295
 800d326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	9307      	str	r3, [sp, #28]
 800d32e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d332:	931a      	str	r3, [sp, #104]	; 0x68
 800d334:	46a8      	mov	r8, r5
 800d336:	2205      	movs	r2, #5
 800d338:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d33c:	485e      	ldr	r0, [pc, #376]	; (800d4b8 <_vfiprintf_r+0x210>)
 800d33e:	f7f2 ff57 	bl	80001f0 <memchr>
 800d342:	9b04      	ldr	r3, [sp, #16]
 800d344:	bb78      	cbnz	r0, 800d3a6 <_vfiprintf_r+0xfe>
 800d346:	06d9      	lsls	r1, r3, #27
 800d348:	bf44      	itt	mi
 800d34a:	2220      	movmi	r2, #32
 800d34c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d350:	071a      	lsls	r2, r3, #28
 800d352:	bf44      	itt	mi
 800d354:	222b      	movmi	r2, #43	; 0x2b
 800d356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d35a:	782a      	ldrb	r2, [r5, #0]
 800d35c:	2a2a      	cmp	r2, #42	; 0x2a
 800d35e:	d02a      	beq.n	800d3b6 <_vfiprintf_r+0x10e>
 800d360:	9a07      	ldr	r2, [sp, #28]
 800d362:	46a8      	mov	r8, r5
 800d364:	2000      	movs	r0, #0
 800d366:	250a      	movs	r5, #10
 800d368:	4641      	mov	r1, r8
 800d36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36e:	3b30      	subs	r3, #48	; 0x30
 800d370:	2b09      	cmp	r3, #9
 800d372:	d969      	bls.n	800d448 <_vfiprintf_r+0x1a0>
 800d374:	b360      	cbz	r0, 800d3d0 <_vfiprintf_r+0x128>
 800d376:	e024      	b.n	800d3c2 <_vfiprintf_r+0x11a>
 800d378:	4b50      	ldr	r3, [pc, #320]	; (800d4bc <_vfiprintf_r+0x214>)
 800d37a:	429c      	cmp	r4, r3
 800d37c:	d101      	bne.n	800d382 <_vfiprintf_r+0xda>
 800d37e:	68b4      	ldr	r4, [r6, #8]
 800d380:	e7a2      	b.n	800d2c8 <_vfiprintf_r+0x20>
 800d382:	4b4f      	ldr	r3, [pc, #316]	; (800d4c0 <_vfiprintf_r+0x218>)
 800d384:	429c      	cmp	r4, r3
 800d386:	bf08      	it	eq
 800d388:	68f4      	ldreq	r4, [r6, #12]
 800d38a:	e79d      	b.n	800d2c8 <_vfiprintf_r+0x20>
 800d38c:	4621      	mov	r1, r4
 800d38e:	4630      	mov	r0, r6
 800d390:	f000 fae0 	bl	800d954 <__swsetup_r>
 800d394:	2800      	cmp	r0, #0
 800d396:	d09d      	beq.n	800d2d4 <_vfiprintf_r+0x2c>
 800d398:	f04f 30ff 	mov.w	r0, #4294967295
 800d39c:	b01d      	add	sp, #116	; 0x74
 800d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a2:	46a8      	mov	r8, r5
 800d3a4:	e7a2      	b.n	800d2ec <_vfiprintf_r+0x44>
 800d3a6:	4a44      	ldr	r2, [pc, #272]	; (800d4b8 <_vfiprintf_r+0x210>)
 800d3a8:	1a80      	subs	r0, r0, r2
 800d3aa:	fa0b f000 	lsl.w	r0, fp, r0
 800d3ae:	4318      	orrs	r0, r3
 800d3b0:	9004      	str	r0, [sp, #16]
 800d3b2:	4645      	mov	r5, r8
 800d3b4:	e7be      	b.n	800d334 <_vfiprintf_r+0x8c>
 800d3b6:	9a03      	ldr	r2, [sp, #12]
 800d3b8:	1d11      	adds	r1, r2, #4
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	9103      	str	r1, [sp, #12]
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	db01      	blt.n	800d3c6 <_vfiprintf_r+0x11e>
 800d3c2:	9207      	str	r2, [sp, #28]
 800d3c4:	e004      	b.n	800d3d0 <_vfiprintf_r+0x128>
 800d3c6:	4252      	negs	r2, r2
 800d3c8:	f043 0302 	orr.w	r3, r3, #2
 800d3cc:	9207      	str	r2, [sp, #28]
 800d3ce:	9304      	str	r3, [sp, #16]
 800d3d0:	f898 3000 	ldrb.w	r3, [r8]
 800d3d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d6:	d10e      	bne.n	800d3f6 <_vfiprintf_r+0x14e>
 800d3d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d3dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d3de:	d138      	bne.n	800d452 <_vfiprintf_r+0x1aa>
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	1d1a      	adds	r2, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	9203      	str	r2, [sp, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfb8      	it	lt
 800d3ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3f0:	f108 0802 	add.w	r8, r8, #2
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	4d33      	ldr	r5, [pc, #204]	; (800d4c4 <_vfiprintf_r+0x21c>)
 800d3f8:	f898 1000 	ldrb.w	r1, [r8]
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	4628      	mov	r0, r5
 800d400:	f7f2 fef6 	bl	80001f0 <memchr>
 800d404:	b140      	cbz	r0, 800d418 <_vfiprintf_r+0x170>
 800d406:	2340      	movs	r3, #64	; 0x40
 800d408:	1b40      	subs	r0, r0, r5
 800d40a:	fa03 f000 	lsl.w	r0, r3, r0
 800d40e:	9b04      	ldr	r3, [sp, #16]
 800d410:	4303      	orrs	r3, r0
 800d412:	f108 0801 	add.w	r8, r8, #1
 800d416:	9304      	str	r3, [sp, #16]
 800d418:	f898 1000 	ldrb.w	r1, [r8]
 800d41c:	482a      	ldr	r0, [pc, #168]	; (800d4c8 <_vfiprintf_r+0x220>)
 800d41e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d422:	2206      	movs	r2, #6
 800d424:	f108 0701 	add.w	r7, r8, #1
 800d428:	f7f2 fee2 	bl	80001f0 <memchr>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d037      	beq.n	800d4a0 <_vfiprintf_r+0x1f8>
 800d430:	4b26      	ldr	r3, [pc, #152]	; (800d4cc <_vfiprintf_r+0x224>)
 800d432:	bb1b      	cbnz	r3, 800d47c <_vfiprintf_r+0x1d4>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	3307      	adds	r3, #7
 800d438:	f023 0307 	bic.w	r3, r3, #7
 800d43c:	3308      	adds	r3, #8
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d442:	444b      	add	r3, r9
 800d444:	9309      	str	r3, [sp, #36]	; 0x24
 800d446:	e750      	b.n	800d2ea <_vfiprintf_r+0x42>
 800d448:	fb05 3202 	mla	r2, r5, r2, r3
 800d44c:	2001      	movs	r0, #1
 800d44e:	4688      	mov	r8, r1
 800d450:	e78a      	b.n	800d368 <_vfiprintf_r+0xc0>
 800d452:	2300      	movs	r3, #0
 800d454:	f108 0801 	add.w	r8, r8, #1
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	4619      	mov	r1, r3
 800d45c:	250a      	movs	r5, #10
 800d45e:	4640      	mov	r0, r8
 800d460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d464:	3a30      	subs	r2, #48	; 0x30
 800d466:	2a09      	cmp	r2, #9
 800d468:	d903      	bls.n	800d472 <_vfiprintf_r+0x1ca>
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0c3      	beq.n	800d3f6 <_vfiprintf_r+0x14e>
 800d46e:	9105      	str	r1, [sp, #20]
 800d470:	e7c1      	b.n	800d3f6 <_vfiprintf_r+0x14e>
 800d472:	fb05 2101 	mla	r1, r5, r1, r2
 800d476:	2301      	movs	r3, #1
 800d478:	4680      	mov	r8, r0
 800d47a:	e7f0      	b.n	800d45e <_vfiprintf_r+0x1b6>
 800d47c:	ab03      	add	r3, sp, #12
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	4622      	mov	r2, r4
 800d482:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <_vfiprintf_r+0x228>)
 800d484:	a904      	add	r1, sp, #16
 800d486:	4630      	mov	r0, r6
 800d488:	f3af 8000 	nop.w
 800d48c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d490:	4681      	mov	r9, r0
 800d492:	d1d5      	bne.n	800d440 <_vfiprintf_r+0x198>
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	065b      	lsls	r3, r3, #25
 800d498:	f53f af7e 	bmi.w	800d398 <_vfiprintf_r+0xf0>
 800d49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d49e:	e77d      	b.n	800d39c <_vfiprintf_r+0xf4>
 800d4a0:	ab03      	add	r3, sp, #12
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4b0a      	ldr	r3, [pc, #40]	; (800d4d0 <_vfiprintf_r+0x228>)
 800d4a8:	a904      	add	r1, sp, #16
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f000 f888 	bl	800d5c0 <_printf_i>
 800d4b0:	e7ec      	b.n	800d48c <_vfiprintf_r+0x1e4>
 800d4b2:	bf00      	nop
 800d4b4:	0800faf8 	.word	0x0800faf8
 800d4b8:	0800fb38 	.word	0x0800fb38
 800d4bc:	0800fb18 	.word	0x0800fb18
 800d4c0:	0800fad8 	.word	0x0800fad8
 800d4c4:	0800fb3e 	.word	0x0800fb3e
 800d4c8:	0800fb42 	.word	0x0800fb42
 800d4cc:	00000000 	.word	0x00000000
 800d4d0:	0800d283 	.word	0x0800d283

0800d4d4 <_printf_common>:
 800d4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	4691      	mov	r9, r2
 800d4da:	461f      	mov	r7, r3
 800d4dc:	688a      	ldr	r2, [r1, #8]
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	bfb8      	it	lt
 800d4e8:	4613      	movlt	r3, r2
 800d4ea:	f8c9 3000 	str.w	r3, [r9]
 800d4ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	b112      	cbz	r2, 800d4fe <_printf_common+0x2a>
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	f8c9 3000 	str.w	r3, [r9]
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	0699      	lsls	r1, r3, #26
 800d502:	bf42      	ittt	mi
 800d504:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d508:	3302      	addmi	r3, #2
 800d50a:	f8c9 3000 	strmi.w	r3, [r9]
 800d50e:	6825      	ldr	r5, [r4, #0]
 800d510:	f015 0506 	ands.w	r5, r5, #6
 800d514:	d107      	bne.n	800d526 <_printf_common+0x52>
 800d516:	f104 0a19 	add.w	sl, r4, #25
 800d51a:	68e3      	ldr	r3, [r4, #12]
 800d51c:	f8d9 2000 	ldr.w	r2, [r9]
 800d520:	1a9b      	subs	r3, r3, r2
 800d522:	42ab      	cmp	r3, r5
 800d524:	dc28      	bgt.n	800d578 <_printf_common+0xa4>
 800d526:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	3300      	adds	r3, #0
 800d52e:	bf18      	it	ne
 800d530:	2301      	movne	r3, #1
 800d532:	0692      	lsls	r2, r2, #26
 800d534:	d42d      	bmi.n	800d592 <_printf_common+0xbe>
 800d536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d53a:	4639      	mov	r1, r7
 800d53c:	4630      	mov	r0, r6
 800d53e:	47c0      	blx	r8
 800d540:	3001      	adds	r0, #1
 800d542:	d020      	beq.n	800d586 <_printf_common+0xb2>
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	68e5      	ldr	r5, [r4, #12]
 800d548:	f8d9 2000 	ldr.w	r2, [r9]
 800d54c:	f003 0306 	and.w	r3, r3, #6
 800d550:	2b04      	cmp	r3, #4
 800d552:	bf08      	it	eq
 800d554:	1aad      	subeq	r5, r5, r2
 800d556:	68a3      	ldr	r3, [r4, #8]
 800d558:	6922      	ldr	r2, [r4, #16]
 800d55a:	bf0c      	ite	eq
 800d55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d560:	2500      	movne	r5, #0
 800d562:	4293      	cmp	r3, r2
 800d564:	bfc4      	itt	gt
 800d566:	1a9b      	subgt	r3, r3, r2
 800d568:	18ed      	addgt	r5, r5, r3
 800d56a:	f04f 0900 	mov.w	r9, #0
 800d56e:	341a      	adds	r4, #26
 800d570:	454d      	cmp	r5, r9
 800d572:	d11a      	bne.n	800d5aa <_printf_common+0xd6>
 800d574:	2000      	movs	r0, #0
 800d576:	e008      	b.n	800d58a <_printf_common+0xb6>
 800d578:	2301      	movs	r3, #1
 800d57a:	4652      	mov	r2, sl
 800d57c:	4639      	mov	r1, r7
 800d57e:	4630      	mov	r0, r6
 800d580:	47c0      	blx	r8
 800d582:	3001      	adds	r0, #1
 800d584:	d103      	bne.n	800d58e <_printf_common+0xba>
 800d586:	f04f 30ff 	mov.w	r0, #4294967295
 800d58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58e:	3501      	adds	r5, #1
 800d590:	e7c3      	b.n	800d51a <_printf_common+0x46>
 800d592:	18e1      	adds	r1, r4, r3
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	2030      	movs	r0, #48	; 0x30
 800d598:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d59c:	4422      	add	r2, r4
 800d59e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	e7c5      	b.n	800d536 <_printf_common+0x62>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	47c0      	blx	r8
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d0e6      	beq.n	800d586 <_printf_common+0xb2>
 800d5b8:	f109 0901 	add.w	r9, r9, #1
 800d5bc:	e7d8      	b.n	800d570 <_printf_common+0x9c>
	...

0800d5c0 <_printf_i>:
 800d5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	7e09      	ldrb	r1, [r1, #24]
 800d5cc:	b085      	sub	sp, #20
 800d5ce:	296e      	cmp	r1, #110	; 0x6e
 800d5d0:	4617      	mov	r7, r2
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	4698      	mov	r8, r3
 800d5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5d8:	f000 80b3 	beq.w	800d742 <_printf_i+0x182>
 800d5dc:	d822      	bhi.n	800d624 <_printf_i+0x64>
 800d5de:	2963      	cmp	r1, #99	; 0x63
 800d5e0:	d036      	beq.n	800d650 <_printf_i+0x90>
 800d5e2:	d80a      	bhi.n	800d5fa <_printf_i+0x3a>
 800d5e4:	2900      	cmp	r1, #0
 800d5e6:	f000 80b9 	beq.w	800d75c <_printf_i+0x19c>
 800d5ea:	2958      	cmp	r1, #88	; 0x58
 800d5ec:	f000 8083 	beq.w	800d6f6 <_printf_i+0x136>
 800d5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d5f8:	e032      	b.n	800d660 <_printf_i+0xa0>
 800d5fa:	2964      	cmp	r1, #100	; 0x64
 800d5fc:	d001      	beq.n	800d602 <_printf_i+0x42>
 800d5fe:	2969      	cmp	r1, #105	; 0x69
 800d600:	d1f6      	bne.n	800d5f0 <_printf_i+0x30>
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	6813      	ldr	r3, [r2, #0]
 800d606:	0605      	lsls	r5, r0, #24
 800d608:	f103 0104 	add.w	r1, r3, #4
 800d60c:	d52a      	bpl.n	800d664 <_printf_i+0xa4>
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	da03      	bge.n	800d61e <_printf_i+0x5e>
 800d616:	222d      	movs	r2, #45	; 0x2d
 800d618:	425b      	negs	r3, r3
 800d61a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d61e:	486f      	ldr	r0, [pc, #444]	; (800d7dc <_printf_i+0x21c>)
 800d620:	220a      	movs	r2, #10
 800d622:	e039      	b.n	800d698 <_printf_i+0xd8>
 800d624:	2973      	cmp	r1, #115	; 0x73
 800d626:	f000 809d 	beq.w	800d764 <_printf_i+0x1a4>
 800d62a:	d808      	bhi.n	800d63e <_printf_i+0x7e>
 800d62c:	296f      	cmp	r1, #111	; 0x6f
 800d62e:	d020      	beq.n	800d672 <_printf_i+0xb2>
 800d630:	2970      	cmp	r1, #112	; 0x70
 800d632:	d1dd      	bne.n	800d5f0 <_printf_i+0x30>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	f043 0320 	orr.w	r3, r3, #32
 800d63a:	6023      	str	r3, [r4, #0]
 800d63c:	e003      	b.n	800d646 <_printf_i+0x86>
 800d63e:	2975      	cmp	r1, #117	; 0x75
 800d640:	d017      	beq.n	800d672 <_printf_i+0xb2>
 800d642:	2978      	cmp	r1, #120	; 0x78
 800d644:	d1d4      	bne.n	800d5f0 <_printf_i+0x30>
 800d646:	2378      	movs	r3, #120	; 0x78
 800d648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d64c:	4864      	ldr	r0, [pc, #400]	; (800d7e0 <_printf_i+0x220>)
 800d64e:	e055      	b.n	800d6fc <_printf_i+0x13c>
 800d650:	6813      	ldr	r3, [r2, #0]
 800d652:	1d19      	adds	r1, r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6011      	str	r1, [r2, #0]
 800d658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d660:	2301      	movs	r3, #1
 800d662:	e08c      	b.n	800d77e <_printf_i+0x1be>
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6011      	str	r1, [r2, #0]
 800d668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d66c:	bf18      	it	ne
 800d66e:	b21b      	sxthne	r3, r3
 800d670:	e7cf      	b.n	800d612 <_printf_i+0x52>
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	6825      	ldr	r5, [r4, #0]
 800d676:	1d18      	adds	r0, r3, #4
 800d678:	6010      	str	r0, [r2, #0]
 800d67a:	0628      	lsls	r0, r5, #24
 800d67c:	d501      	bpl.n	800d682 <_printf_i+0xc2>
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	e002      	b.n	800d688 <_printf_i+0xc8>
 800d682:	0668      	lsls	r0, r5, #25
 800d684:	d5fb      	bpl.n	800d67e <_printf_i+0xbe>
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	4854      	ldr	r0, [pc, #336]	; (800d7dc <_printf_i+0x21c>)
 800d68a:	296f      	cmp	r1, #111	; 0x6f
 800d68c:	bf14      	ite	ne
 800d68e:	220a      	movne	r2, #10
 800d690:	2208      	moveq	r2, #8
 800d692:	2100      	movs	r1, #0
 800d694:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d698:	6865      	ldr	r5, [r4, #4]
 800d69a:	60a5      	str	r5, [r4, #8]
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	f2c0 8095 	blt.w	800d7cc <_printf_i+0x20c>
 800d6a2:	6821      	ldr	r1, [r4, #0]
 800d6a4:	f021 0104 	bic.w	r1, r1, #4
 800d6a8:	6021      	str	r1, [r4, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d13d      	bne.n	800d72a <_printf_i+0x16a>
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	f040 808e 	bne.w	800d7d0 <_printf_i+0x210>
 800d6b4:	4665      	mov	r5, ip
 800d6b6:	2a08      	cmp	r2, #8
 800d6b8:	d10b      	bne.n	800d6d2 <_printf_i+0x112>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	07db      	lsls	r3, r3, #31
 800d6be:	d508      	bpl.n	800d6d2 <_printf_i+0x112>
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	6862      	ldr	r2, [r4, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	bfde      	ittt	le
 800d6c8:	2330      	movle	r3, #48	; 0x30
 800d6ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6d2:	ebac 0305 	sub.w	r3, ip, r5
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	f8cd 8000 	str.w	r8, [sp]
 800d6dc:	463b      	mov	r3, r7
 800d6de:	aa03      	add	r2, sp, #12
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7ff fef6 	bl	800d4d4 <_printf_common>
 800d6e8:	3001      	adds	r0, #1
 800d6ea:	d14d      	bne.n	800d788 <_printf_i+0x1c8>
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f0:	b005      	add	sp, #20
 800d6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f6:	4839      	ldr	r0, [pc, #228]	; (800d7dc <_printf_i+0x21c>)
 800d6f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d6fc:	6813      	ldr	r3, [r2, #0]
 800d6fe:	6821      	ldr	r1, [r4, #0]
 800d700:	1d1d      	adds	r5, r3, #4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6015      	str	r5, [r2, #0]
 800d706:	060a      	lsls	r2, r1, #24
 800d708:	d50b      	bpl.n	800d722 <_printf_i+0x162>
 800d70a:	07ca      	lsls	r2, r1, #31
 800d70c:	bf44      	itt	mi
 800d70e:	f041 0120 	orrmi.w	r1, r1, #32
 800d712:	6021      	strmi	r1, [r4, #0]
 800d714:	b91b      	cbnz	r3, 800d71e <_printf_i+0x15e>
 800d716:	6822      	ldr	r2, [r4, #0]
 800d718:	f022 0220 	bic.w	r2, r2, #32
 800d71c:	6022      	str	r2, [r4, #0]
 800d71e:	2210      	movs	r2, #16
 800d720:	e7b7      	b.n	800d692 <_printf_i+0xd2>
 800d722:	064d      	lsls	r5, r1, #25
 800d724:	bf48      	it	mi
 800d726:	b29b      	uxthmi	r3, r3
 800d728:	e7ef      	b.n	800d70a <_printf_i+0x14a>
 800d72a:	4665      	mov	r5, ip
 800d72c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d730:	fb02 3311 	mls	r3, r2, r1, r3
 800d734:	5cc3      	ldrb	r3, [r0, r3]
 800d736:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d73a:	460b      	mov	r3, r1
 800d73c:	2900      	cmp	r1, #0
 800d73e:	d1f5      	bne.n	800d72c <_printf_i+0x16c>
 800d740:	e7b9      	b.n	800d6b6 <_printf_i+0xf6>
 800d742:	6813      	ldr	r3, [r2, #0]
 800d744:	6825      	ldr	r5, [r4, #0]
 800d746:	6961      	ldr	r1, [r4, #20]
 800d748:	1d18      	adds	r0, r3, #4
 800d74a:	6010      	str	r0, [r2, #0]
 800d74c:	0628      	lsls	r0, r5, #24
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	d501      	bpl.n	800d756 <_printf_i+0x196>
 800d752:	6019      	str	r1, [r3, #0]
 800d754:	e002      	b.n	800d75c <_printf_i+0x19c>
 800d756:	066a      	lsls	r2, r5, #25
 800d758:	d5fb      	bpl.n	800d752 <_printf_i+0x192>
 800d75a:	8019      	strh	r1, [r3, #0]
 800d75c:	2300      	movs	r3, #0
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	4665      	mov	r5, ip
 800d762:	e7b9      	b.n	800d6d8 <_printf_i+0x118>
 800d764:	6813      	ldr	r3, [r2, #0]
 800d766:	1d19      	adds	r1, r3, #4
 800d768:	6011      	str	r1, [r2, #0]
 800d76a:	681d      	ldr	r5, [r3, #0]
 800d76c:	6862      	ldr	r2, [r4, #4]
 800d76e:	2100      	movs	r1, #0
 800d770:	4628      	mov	r0, r5
 800d772:	f7f2 fd3d 	bl	80001f0 <memchr>
 800d776:	b108      	cbz	r0, 800d77c <_printf_i+0x1bc>
 800d778:	1b40      	subs	r0, r0, r5
 800d77a:	6060      	str	r0, [r4, #4]
 800d77c:	6863      	ldr	r3, [r4, #4]
 800d77e:	6123      	str	r3, [r4, #16]
 800d780:	2300      	movs	r3, #0
 800d782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d786:	e7a7      	b.n	800d6d8 <_printf_i+0x118>
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	462a      	mov	r2, r5
 800d78c:	4639      	mov	r1, r7
 800d78e:	4630      	mov	r0, r6
 800d790:	47c0      	blx	r8
 800d792:	3001      	adds	r0, #1
 800d794:	d0aa      	beq.n	800d6ec <_printf_i+0x12c>
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	079b      	lsls	r3, r3, #30
 800d79a:	d413      	bmi.n	800d7c4 <_printf_i+0x204>
 800d79c:	68e0      	ldr	r0, [r4, #12]
 800d79e:	9b03      	ldr	r3, [sp, #12]
 800d7a0:	4298      	cmp	r0, r3
 800d7a2:	bfb8      	it	lt
 800d7a4:	4618      	movlt	r0, r3
 800d7a6:	e7a3      	b.n	800d6f0 <_printf_i+0x130>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	464a      	mov	r2, r9
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	47c0      	blx	r8
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	d09a      	beq.n	800d6ec <_printf_i+0x12c>
 800d7b6:	3501      	adds	r5, #1
 800d7b8:	68e3      	ldr	r3, [r4, #12]
 800d7ba:	9a03      	ldr	r2, [sp, #12]
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	42ab      	cmp	r3, r5
 800d7c0:	dcf2      	bgt.n	800d7a8 <_printf_i+0x1e8>
 800d7c2:	e7eb      	b.n	800d79c <_printf_i+0x1dc>
 800d7c4:	2500      	movs	r5, #0
 800d7c6:	f104 0919 	add.w	r9, r4, #25
 800d7ca:	e7f5      	b.n	800d7b8 <_printf_i+0x1f8>
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1ac      	bne.n	800d72a <_printf_i+0x16a>
 800d7d0:	7803      	ldrb	r3, [r0, #0]
 800d7d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7da:	e76c      	b.n	800d6b6 <_printf_i+0xf6>
 800d7dc:	0800fb49 	.word	0x0800fb49
 800d7e0:	0800fb5a 	.word	0x0800fb5a

0800d7e4 <_sbrk_r>:
 800d7e4:	b538      	push	{r3, r4, r5, lr}
 800d7e6:	4c06      	ldr	r4, [pc, #24]	; (800d800 <_sbrk_r+0x1c>)
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	4608      	mov	r0, r1
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	f7f3 f8ca 	bl	8000988 <_sbrk>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d102      	bne.n	800d7fe <_sbrk_r+0x1a>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	b103      	cbz	r3, 800d7fe <_sbrk_r+0x1a>
 800d7fc:	602b      	str	r3, [r5, #0]
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	20006cf0 	.word	0x20006cf0

0800d804 <__sread>:
 800d804:	b510      	push	{r4, lr}
 800d806:	460c      	mov	r4, r1
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	f000 fa48 	bl	800dca0 <_read_r>
 800d810:	2800      	cmp	r0, #0
 800d812:	bfab      	itete	ge
 800d814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d816:	89a3      	ldrhlt	r3, [r4, #12]
 800d818:	181b      	addge	r3, r3, r0
 800d81a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d81e:	bfac      	ite	ge
 800d820:	6563      	strge	r3, [r4, #84]	; 0x54
 800d822:	81a3      	strhlt	r3, [r4, #12]
 800d824:	bd10      	pop	{r4, pc}

0800d826 <__swrite>:
 800d826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d82a:	461f      	mov	r7, r3
 800d82c:	898b      	ldrh	r3, [r1, #12]
 800d82e:	05db      	lsls	r3, r3, #23
 800d830:	4605      	mov	r5, r0
 800d832:	460c      	mov	r4, r1
 800d834:	4616      	mov	r6, r2
 800d836:	d505      	bpl.n	800d844 <__swrite+0x1e>
 800d838:	2302      	movs	r3, #2
 800d83a:	2200      	movs	r2, #0
 800d83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d840:	f000 f9b6 	bl	800dbb0 <_lseek_r>
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d84a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	4632      	mov	r2, r6
 800d852:	463b      	mov	r3, r7
 800d854:	4628      	mov	r0, r5
 800d856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d85a:	f000 b869 	b.w	800d930 <_write_r>

0800d85e <__sseek>:
 800d85e:	b510      	push	{r4, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d866:	f000 f9a3 	bl	800dbb0 <_lseek_r>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	89a3      	ldrh	r3, [r4, #12]
 800d86e:	bf15      	itete	ne
 800d870:	6560      	strne	r0, [r4, #84]	; 0x54
 800d872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d87a:	81a3      	strheq	r3, [r4, #12]
 800d87c:	bf18      	it	ne
 800d87e:	81a3      	strhne	r3, [r4, #12]
 800d880:	bd10      	pop	{r4, pc}

0800d882 <__sclose>:
 800d882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d886:	f000 b8d3 	b.w	800da30 <_close_r>
	...

0800d88c <__swbuf_r>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	460e      	mov	r6, r1
 800d890:	4614      	mov	r4, r2
 800d892:	4605      	mov	r5, r0
 800d894:	b118      	cbz	r0, 800d89e <__swbuf_r+0x12>
 800d896:	6983      	ldr	r3, [r0, #24]
 800d898:	b90b      	cbnz	r3, 800d89e <__swbuf_r+0x12>
 800d89a:	f7ff fba9 	bl	800cff0 <__sinit>
 800d89e:	4b21      	ldr	r3, [pc, #132]	; (800d924 <__swbuf_r+0x98>)
 800d8a0:	429c      	cmp	r4, r3
 800d8a2:	d12a      	bne.n	800d8fa <__swbuf_r+0x6e>
 800d8a4:	686c      	ldr	r4, [r5, #4]
 800d8a6:	69a3      	ldr	r3, [r4, #24]
 800d8a8:	60a3      	str	r3, [r4, #8]
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	071a      	lsls	r2, r3, #28
 800d8ae:	d52e      	bpl.n	800d90e <__swbuf_r+0x82>
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	b363      	cbz	r3, 800d90e <__swbuf_r+0x82>
 800d8b4:	6923      	ldr	r3, [r4, #16]
 800d8b6:	6820      	ldr	r0, [r4, #0]
 800d8b8:	1ac0      	subs	r0, r0, r3
 800d8ba:	6963      	ldr	r3, [r4, #20]
 800d8bc:	b2f6      	uxtb	r6, r6
 800d8be:	4283      	cmp	r3, r0
 800d8c0:	4637      	mov	r7, r6
 800d8c2:	dc04      	bgt.n	800d8ce <__swbuf_r+0x42>
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f000 f948 	bl	800db5c <_fflush_r>
 800d8cc:	bb28      	cbnz	r0, 800d91a <__swbuf_r+0x8e>
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	60a3      	str	r3, [r4, #8]
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	1c5a      	adds	r2, r3, #1
 800d8d8:	6022      	str	r2, [r4, #0]
 800d8da:	701e      	strb	r6, [r3, #0]
 800d8dc:	6963      	ldr	r3, [r4, #20]
 800d8de:	3001      	adds	r0, #1
 800d8e0:	4283      	cmp	r3, r0
 800d8e2:	d004      	beq.n	800d8ee <__swbuf_r+0x62>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	07db      	lsls	r3, r3, #31
 800d8e8:	d519      	bpl.n	800d91e <__swbuf_r+0x92>
 800d8ea:	2e0a      	cmp	r6, #10
 800d8ec:	d117      	bne.n	800d91e <__swbuf_r+0x92>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f000 f933 	bl	800db5c <_fflush_r>
 800d8f6:	b190      	cbz	r0, 800d91e <__swbuf_r+0x92>
 800d8f8:	e00f      	b.n	800d91a <__swbuf_r+0x8e>
 800d8fa:	4b0b      	ldr	r3, [pc, #44]	; (800d928 <__swbuf_r+0x9c>)
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	d101      	bne.n	800d904 <__swbuf_r+0x78>
 800d900:	68ac      	ldr	r4, [r5, #8]
 800d902:	e7d0      	b.n	800d8a6 <__swbuf_r+0x1a>
 800d904:	4b09      	ldr	r3, [pc, #36]	; (800d92c <__swbuf_r+0xa0>)
 800d906:	429c      	cmp	r4, r3
 800d908:	bf08      	it	eq
 800d90a:	68ec      	ldreq	r4, [r5, #12]
 800d90c:	e7cb      	b.n	800d8a6 <__swbuf_r+0x1a>
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f000 f81f 	bl	800d954 <__swsetup_r>
 800d916:	2800      	cmp	r0, #0
 800d918:	d0cc      	beq.n	800d8b4 <__swbuf_r+0x28>
 800d91a:	f04f 37ff 	mov.w	r7, #4294967295
 800d91e:	4638      	mov	r0, r7
 800d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d922:	bf00      	nop
 800d924:	0800faf8 	.word	0x0800faf8
 800d928:	0800fb18 	.word	0x0800fb18
 800d92c:	0800fad8 	.word	0x0800fad8

0800d930 <_write_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4c07      	ldr	r4, [pc, #28]	; (800d950 <_write_r+0x20>)
 800d934:	4605      	mov	r5, r0
 800d936:	4608      	mov	r0, r1
 800d938:	4611      	mov	r1, r2
 800d93a:	2200      	movs	r2, #0
 800d93c:	6022      	str	r2, [r4, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f7f2 ffd1 	bl	80008e6 <_write>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d102      	bne.n	800d94e <_write_r+0x1e>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	b103      	cbz	r3, 800d94e <_write_r+0x1e>
 800d94c:	602b      	str	r3, [r5, #0]
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	20006cf0 	.word	0x20006cf0

0800d954 <__swsetup_r>:
 800d954:	4b32      	ldr	r3, [pc, #200]	; (800da20 <__swsetup_r+0xcc>)
 800d956:	b570      	push	{r4, r5, r6, lr}
 800d958:	681d      	ldr	r5, [r3, #0]
 800d95a:	4606      	mov	r6, r0
 800d95c:	460c      	mov	r4, r1
 800d95e:	b125      	cbz	r5, 800d96a <__swsetup_r+0x16>
 800d960:	69ab      	ldr	r3, [r5, #24]
 800d962:	b913      	cbnz	r3, 800d96a <__swsetup_r+0x16>
 800d964:	4628      	mov	r0, r5
 800d966:	f7ff fb43 	bl	800cff0 <__sinit>
 800d96a:	4b2e      	ldr	r3, [pc, #184]	; (800da24 <__swsetup_r+0xd0>)
 800d96c:	429c      	cmp	r4, r3
 800d96e:	d10f      	bne.n	800d990 <__swsetup_r+0x3c>
 800d970:	686c      	ldr	r4, [r5, #4]
 800d972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d976:	b29a      	uxth	r2, r3
 800d978:	0715      	lsls	r5, r2, #28
 800d97a:	d42c      	bmi.n	800d9d6 <__swsetup_r+0x82>
 800d97c:	06d0      	lsls	r0, r2, #27
 800d97e:	d411      	bmi.n	800d9a4 <__swsetup_r+0x50>
 800d980:	2209      	movs	r2, #9
 800d982:	6032      	str	r2, [r6, #0]
 800d984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	f04f 30ff 	mov.w	r0, #4294967295
 800d98e:	e03e      	b.n	800da0e <__swsetup_r+0xba>
 800d990:	4b25      	ldr	r3, [pc, #148]	; (800da28 <__swsetup_r+0xd4>)
 800d992:	429c      	cmp	r4, r3
 800d994:	d101      	bne.n	800d99a <__swsetup_r+0x46>
 800d996:	68ac      	ldr	r4, [r5, #8]
 800d998:	e7eb      	b.n	800d972 <__swsetup_r+0x1e>
 800d99a:	4b24      	ldr	r3, [pc, #144]	; (800da2c <__swsetup_r+0xd8>)
 800d99c:	429c      	cmp	r4, r3
 800d99e:	bf08      	it	eq
 800d9a0:	68ec      	ldreq	r4, [r5, #12]
 800d9a2:	e7e6      	b.n	800d972 <__swsetup_r+0x1e>
 800d9a4:	0751      	lsls	r1, r2, #29
 800d9a6:	d512      	bpl.n	800d9ce <__swsetup_r+0x7a>
 800d9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9aa:	b141      	cbz	r1, 800d9be <__swsetup_r+0x6a>
 800d9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9b0:	4299      	cmp	r1, r3
 800d9b2:	d002      	beq.n	800d9ba <__swsetup_r+0x66>
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f7ff fba5 	bl	800d104 <_free_r>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	6063      	str	r3, [r4, #4]
 800d9ca:	6923      	ldr	r3, [r4, #16]
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f043 0308 	orr.w	r3, r3, #8
 800d9d4:	81a3      	strh	r3, [r4, #12]
 800d9d6:	6923      	ldr	r3, [r4, #16]
 800d9d8:	b94b      	cbnz	r3, 800d9ee <__swsetup_r+0x9a>
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9e4:	d003      	beq.n	800d9ee <__swsetup_r+0x9a>
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f000 f917 	bl	800dc1c <__smakebuf_r>
 800d9ee:	89a2      	ldrh	r2, [r4, #12]
 800d9f0:	f012 0301 	ands.w	r3, r2, #1
 800d9f4:	d00c      	beq.n	800da10 <__swsetup_r+0xbc>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	6963      	ldr	r3, [r4, #20]
 800d9fc:	425b      	negs	r3, r3
 800d9fe:	61a3      	str	r3, [r4, #24]
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	b953      	cbnz	r3, 800da1a <__swsetup_r+0xc6>
 800da04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800da0c:	d1ba      	bne.n	800d984 <__swsetup_r+0x30>
 800da0e:	bd70      	pop	{r4, r5, r6, pc}
 800da10:	0792      	lsls	r2, r2, #30
 800da12:	bf58      	it	pl
 800da14:	6963      	ldrpl	r3, [r4, #20]
 800da16:	60a3      	str	r3, [r4, #8]
 800da18:	e7f2      	b.n	800da00 <__swsetup_r+0xac>
 800da1a:	2000      	movs	r0, #0
 800da1c:	e7f7      	b.n	800da0e <__swsetup_r+0xba>
 800da1e:	bf00      	nop
 800da20:	20000024 	.word	0x20000024
 800da24:	0800faf8 	.word	0x0800faf8
 800da28:	0800fb18 	.word	0x0800fb18
 800da2c:	0800fad8 	.word	0x0800fad8

0800da30 <_close_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4c06      	ldr	r4, [pc, #24]	; (800da4c <_close_r+0x1c>)
 800da34:	2300      	movs	r3, #0
 800da36:	4605      	mov	r5, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	f7f2 ff6f 	bl	800091e <_close>
 800da40:	1c43      	adds	r3, r0, #1
 800da42:	d102      	bne.n	800da4a <_close_r+0x1a>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	b103      	cbz	r3, 800da4a <_close_r+0x1a>
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	20006cf0 	.word	0x20006cf0

0800da50 <__sflush_r>:
 800da50:	898a      	ldrh	r2, [r1, #12]
 800da52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	4605      	mov	r5, r0
 800da58:	0710      	lsls	r0, r2, #28
 800da5a:	460c      	mov	r4, r1
 800da5c:	d458      	bmi.n	800db10 <__sflush_r+0xc0>
 800da5e:	684b      	ldr	r3, [r1, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dc05      	bgt.n	800da70 <__sflush_r+0x20>
 800da64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da66:	2b00      	cmp	r3, #0
 800da68:	dc02      	bgt.n	800da70 <__sflush_r+0x20>
 800da6a:	2000      	movs	r0, #0
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da72:	2e00      	cmp	r6, #0
 800da74:	d0f9      	beq.n	800da6a <__sflush_r+0x1a>
 800da76:	2300      	movs	r3, #0
 800da78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da7c:	682f      	ldr	r7, [r5, #0]
 800da7e:	6a21      	ldr	r1, [r4, #32]
 800da80:	602b      	str	r3, [r5, #0]
 800da82:	d032      	beq.n	800daea <__sflush_r+0x9a>
 800da84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	075a      	lsls	r2, r3, #29
 800da8a:	d505      	bpl.n	800da98 <__sflush_r+0x48>
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	1ac0      	subs	r0, r0, r3
 800da90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da92:	b10b      	cbz	r3, 800da98 <__sflush_r+0x48>
 800da94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da96:	1ac0      	subs	r0, r0, r3
 800da98:	2300      	movs	r3, #0
 800da9a:	4602      	mov	r2, r0
 800da9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da9e:	6a21      	ldr	r1, [r4, #32]
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b0      	blx	r6
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	d106      	bne.n	800dab8 <__sflush_r+0x68>
 800daaa:	6829      	ldr	r1, [r5, #0]
 800daac:	291d      	cmp	r1, #29
 800daae:	d848      	bhi.n	800db42 <__sflush_r+0xf2>
 800dab0:	4a29      	ldr	r2, [pc, #164]	; (800db58 <__sflush_r+0x108>)
 800dab2:	40ca      	lsrs	r2, r1
 800dab4:	07d6      	lsls	r6, r2, #31
 800dab6:	d544      	bpl.n	800db42 <__sflush_r+0xf2>
 800dab8:	2200      	movs	r2, #0
 800daba:	6062      	str	r2, [r4, #4]
 800dabc:	04d9      	lsls	r1, r3, #19
 800dabe:	6922      	ldr	r2, [r4, #16]
 800dac0:	6022      	str	r2, [r4, #0]
 800dac2:	d504      	bpl.n	800dace <__sflush_r+0x7e>
 800dac4:	1c42      	adds	r2, r0, #1
 800dac6:	d101      	bne.n	800dacc <__sflush_r+0x7c>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b903      	cbnz	r3, 800dace <__sflush_r+0x7e>
 800dacc:	6560      	str	r0, [r4, #84]	; 0x54
 800dace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dad0:	602f      	str	r7, [r5, #0]
 800dad2:	2900      	cmp	r1, #0
 800dad4:	d0c9      	beq.n	800da6a <__sflush_r+0x1a>
 800dad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dada:	4299      	cmp	r1, r3
 800dadc:	d002      	beq.n	800dae4 <__sflush_r+0x94>
 800dade:	4628      	mov	r0, r5
 800dae0:	f7ff fb10 	bl	800d104 <_free_r>
 800dae4:	2000      	movs	r0, #0
 800dae6:	6360      	str	r0, [r4, #52]	; 0x34
 800dae8:	e7c0      	b.n	800da6c <__sflush_r+0x1c>
 800daea:	2301      	movs	r3, #1
 800daec:	4628      	mov	r0, r5
 800daee:	47b0      	blx	r6
 800daf0:	1c41      	adds	r1, r0, #1
 800daf2:	d1c8      	bne.n	800da86 <__sflush_r+0x36>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0c5      	beq.n	800da86 <__sflush_r+0x36>
 800dafa:	2b1d      	cmp	r3, #29
 800dafc:	d001      	beq.n	800db02 <__sflush_r+0xb2>
 800dafe:	2b16      	cmp	r3, #22
 800db00:	d101      	bne.n	800db06 <__sflush_r+0xb6>
 800db02:	602f      	str	r7, [r5, #0]
 800db04:	e7b1      	b.n	800da6a <__sflush_r+0x1a>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	e7ad      	b.n	800da6c <__sflush_r+0x1c>
 800db10:	690f      	ldr	r7, [r1, #16]
 800db12:	2f00      	cmp	r7, #0
 800db14:	d0a9      	beq.n	800da6a <__sflush_r+0x1a>
 800db16:	0793      	lsls	r3, r2, #30
 800db18:	680e      	ldr	r6, [r1, #0]
 800db1a:	bf08      	it	eq
 800db1c:	694b      	ldreq	r3, [r1, #20]
 800db1e:	600f      	str	r7, [r1, #0]
 800db20:	bf18      	it	ne
 800db22:	2300      	movne	r3, #0
 800db24:	eba6 0807 	sub.w	r8, r6, r7
 800db28:	608b      	str	r3, [r1, #8]
 800db2a:	f1b8 0f00 	cmp.w	r8, #0
 800db2e:	dd9c      	ble.n	800da6a <__sflush_r+0x1a>
 800db30:	4643      	mov	r3, r8
 800db32:	463a      	mov	r2, r7
 800db34:	6a21      	ldr	r1, [r4, #32]
 800db36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dc06      	bgt.n	800db4e <__sflush_r+0xfe>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	e78e      	b.n	800da6c <__sflush_r+0x1c>
 800db4e:	4407      	add	r7, r0
 800db50:	eba8 0800 	sub.w	r8, r8, r0
 800db54:	e7e9      	b.n	800db2a <__sflush_r+0xda>
 800db56:	bf00      	nop
 800db58:	20400001 	.word	0x20400001

0800db5c <_fflush_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	690b      	ldr	r3, [r1, #16]
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	b1db      	cbz	r3, 800db9e <_fflush_r+0x42>
 800db66:	b118      	cbz	r0, 800db70 <_fflush_r+0x14>
 800db68:	6983      	ldr	r3, [r0, #24]
 800db6a:	b90b      	cbnz	r3, 800db70 <_fflush_r+0x14>
 800db6c:	f7ff fa40 	bl	800cff0 <__sinit>
 800db70:	4b0c      	ldr	r3, [pc, #48]	; (800dba4 <_fflush_r+0x48>)
 800db72:	429c      	cmp	r4, r3
 800db74:	d109      	bne.n	800db8a <_fflush_r+0x2e>
 800db76:	686c      	ldr	r4, [r5, #4]
 800db78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7c:	b17b      	cbz	r3, 800db9e <_fflush_r+0x42>
 800db7e:	4621      	mov	r1, r4
 800db80:	4628      	mov	r0, r5
 800db82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db86:	f7ff bf63 	b.w	800da50 <__sflush_r>
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <_fflush_r+0x4c>)
 800db8c:	429c      	cmp	r4, r3
 800db8e:	d101      	bne.n	800db94 <_fflush_r+0x38>
 800db90:	68ac      	ldr	r4, [r5, #8]
 800db92:	e7f1      	b.n	800db78 <_fflush_r+0x1c>
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <_fflush_r+0x50>)
 800db96:	429c      	cmp	r4, r3
 800db98:	bf08      	it	eq
 800db9a:	68ec      	ldreq	r4, [r5, #12]
 800db9c:	e7ec      	b.n	800db78 <_fflush_r+0x1c>
 800db9e:	2000      	movs	r0, #0
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	bf00      	nop
 800dba4:	0800faf8 	.word	0x0800faf8
 800dba8:	0800fb18 	.word	0x0800fb18
 800dbac:	0800fad8 	.word	0x0800fad8

0800dbb0 <_lseek_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4c07      	ldr	r4, [pc, #28]	; (800dbd0 <_lseek_r+0x20>)
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	6022      	str	r2, [r4, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f2 fed4 	bl	800096c <_lseek>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_lseek_r+0x1e>
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_lseek_r+0x1e>
 800dbcc:	602b      	str	r3, [r5, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	20006cf0 	.word	0x20006cf0

0800dbd4 <__swhatbuf_r>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	460e      	mov	r6, r1
 800dbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbdc:	2900      	cmp	r1, #0
 800dbde:	b096      	sub	sp, #88	; 0x58
 800dbe0:	4614      	mov	r4, r2
 800dbe2:	461d      	mov	r5, r3
 800dbe4:	da07      	bge.n	800dbf6 <__swhatbuf_r+0x22>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	602b      	str	r3, [r5, #0]
 800dbea:	89b3      	ldrh	r3, [r6, #12]
 800dbec:	061a      	lsls	r2, r3, #24
 800dbee:	d410      	bmi.n	800dc12 <__swhatbuf_r+0x3e>
 800dbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbf4:	e00e      	b.n	800dc14 <__swhatbuf_r+0x40>
 800dbf6:	466a      	mov	r2, sp
 800dbf8:	f000 f864 	bl	800dcc4 <_fstat_r>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	dbf2      	blt.n	800dbe6 <__swhatbuf_r+0x12>
 800dc00:	9a01      	ldr	r2, [sp, #4]
 800dc02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc0a:	425a      	negs	r2, r3
 800dc0c:	415a      	adcs	r2, r3
 800dc0e:	602a      	str	r2, [r5, #0]
 800dc10:	e7ee      	b.n	800dbf0 <__swhatbuf_r+0x1c>
 800dc12:	2340      	movs	r3, #64	; 0x40
 800dc14:	2000      	movs	r0, #0
 800dc16:	6023      	str	r3, [r4, #0]
 800dc18:	b016      	add	sp, #88	; 0x58
 800dc1a:	bd70      	pop	{r4, r5, r6, pc}

0800dc1c <__smakebuf_r>:
 800dc1c:	898b      	ldrh	r3, [r1, #12]
 800dc1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc20:	079d      	lsls	r5, r3, #30
 800dc22:	4606      	mov	r6, r0
 800dc24:	460c      	mov	r4, r1
 800dc26:	d507      	bpl.n	800dc38 <__smakebuf_r+0x1c>
 800dc28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	6123      	str	r3, [r4, #16]
 800dc30:	2301      	movs	r3, #1
 800dc32:	6163      	str	r3, [r4, #20]
 800dc34:	b002      	add	sp, #8
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	ab01      	add	r3, sp, #4
 800dc3a:	466a      	mov	r2, sp
 800dc3c:	f7ff ffca 	bl	800dbd4 <__swhatbuf_r>
 800dc40:	9900      	ldr	r1, [sp, #0]
 800dc42:	4605      	mov	r5, r0
 800dc44:	4630      	mov	r0, r6
 800dc46:	f7ff faab 	bl	800d1a0 <_malloc_r>
 800dc4a:	b948      	cbnz	r0, 800dc60 <__smakebuf_r+0x44>
 800dc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc50:	059a      	lsls	r2, r3, #22
 800dc52:	d4ef      	bmi.n	800dc34 <__smakebuf_r+0x18>
 800dc54:	f023 0303 	bic.w	r3, r3, #3
 800dc58:	f043 0302 	orr.w	r3, r3, #2
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	e7e3      	b.n	800dc28 <__smakebuf_r+0xc>
 800dc60:	4b0d      	ldr	r3, [pc, #52]	; (800dc98 <__smakebuf_r+0x7c>)
 800dc62:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	6020      	str	r0, [r4, #0]
 800dc68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	9b00      	ldr	r3, [sp, #0]
 800dc70:	6163      	str	r3, [r4, #20]
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	6120      	str	r0, [r4, #16]
 800dc76:	b15b      	cbz	r3, 800dc90 <__smakebuf_r+0x74>
 800dc78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f000 f833 	bl	800dce8 <_isatty_r>
 800dc82:	b128      	cbz	r0, 800dc90 <__smakebuf_r+0x74>
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	f023 0303 	bic.w	r3, r3, #3
 800dc8a:	f043 0301 	orr.w	r3, r3, #1
 800dc8e:	81a3      	strh	r3, [r4, #12]
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	431d      	orrs	r5, r3
 800dc94:	81a5      	strh	r5, [r4, #12]
 800dc96:	e7cd      	b.n	800dc34 <__smakebuf_r+0x18>
 800dc98:	0800cfb9 	.word	0x0800cfb9

0800dc9c <__malloc_lock>:
 800dc9c:	4770      	bx	lr

0800dc9e <__malloc_unlock>:
 800dc9e:	4770      	bx	lr

0800dca0 <_read_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4c07      	ldr	r4, [pc, #28]	; (800dcc0 <_read_r+0x20>)
 800dca4:	4605      	mov	r5, r0
 800dca6:	4608      	mov	r0, r1
 800dca8:	4611      	mov	r1, r2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	6022      	str	r2, [r4, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f7f2 fdfc 	bl	80008ac <_read>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_read_r+0x1e>
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_read_r+0x1e>
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	20006cf0 	.word	0x20006cf0

0800dcc4 <_fstat_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4c07      	ldr	r4, [pc, #28]	; (800dce4 <_fstat_r+0x20>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4605      	mov	r5, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	4611      	mov	r1, r2
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	f7f2 fe30 	bl	8000936 <_fstat>
 800dcd6:	1c43      	adds	r3, r0, #1
 800dcd8:	d102      	bne.n	800dce0 <_fstat_r+0x1c>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	b103      	cbz	r3, 800dce0 <_fstat_r+0x1c>
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	bd38      	pop	{r3, r4, r5, pc}
 800dce2:	bf00      	nop
 800dce4:	20006cf0 	.word	0x20006cf0

0800dce8 <_isatty_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4c06      	ldr	r4, [pc, #24]	; (800dd04 <_isatty_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4605      	mov	r5, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	f7f2 fe2f 	bl	8000956 <_isatty>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_isatty_r+0x1a>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_isatty_r+0x1a>
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	20006cf0 	.word	0x20006cf0

0800dd08 <_init>:
 800dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0a:	bf00      	nop
 800dd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd0e:	bc08      	pop	{r3}
 800dd10:	469e      	mov	lr, r3
 800dd12:	4770      	bx	lr

0800dd14 <_fini>:
 800dd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd16:	bf00      	nop
 800dd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1a:	bc08      	pop	{r3}
 800dd1c:	469e      	mov	lr, r3
 800dd1e:	4770      	bx	lr
